/*! jQuery v2.1.4 | (c) 2005, 2015 jQuery Foundation, Inc. | jquery.org/license */
!function(a,b){"object"==typeof module&&"object"==typeof module.exports?module.exports=a.document?b(a,!0):function(a){if(!a.document)throw new Error("jQuery requires a window with a document");return b(a)}:b(a)}("undefined"!=typeof window?window:this,function(a,b){var c=[],d=c.slice,e=c.concat,f=c.push,g=c.indexOf,h={},i=h.toString,j=h.hasOwnProperty,k={},l=a.document,m="2.1.4",n=function(a,b){return new n.fn.init(a,b)},o=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,p=/^-ms-/,q=/-([\da-z])/gi,r=function(a,b){return b.toUpperCase()};n.fn=n.prototype={jquery:m,constructor:n,selector:"",length:0,toArray:function(){return d.call(this)},get:function(a){return null!=a?0>a?this[a+this.length]:this[a]:d.call(this)},pushStack:function(a){var b=n.merge(this.constructor(),a);return b.prevObject=this,b.context=this.context,b},each:function(a,b){return n.each(this,a,b)},map:function(a){return this.pushStack(n.map(this,function(b,c){return a.call(b,c,b)}))},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(a){var b=this.length,c=+a+(0>a?b:0);return this.pushStack(c>=0&&b>c?[this[c]]:[])},end:function(){return this.prevObject||this.constructor(null)},push:f,sort:c.sort,splice:c.splice},n.extend=n.fn.extend=function(){var a,b,c,d,e,f,g=arguments[0]||{},h=1,i=arguments.length,j=!1;for("boolean"==typeof g&&(j=g,g=arguments[h]||{},h++),"object"==typeof g||n.isFunction(g)||(g={}),h===i&&(g=this,h--);i>h;h++)if(null!=(a=arguments[h]))for(b in a)c=g[b],d=a[b],g!==d&&(j&&d&&(n.isPlainObject(d)||(e=n.isArray(d)))?(e?(e=!1,f=c&&n.isArray(c)?c:[]):f=c&&n.isPlainObject(c)?c:{},g[b]=n.extend(j,f,d)):void 0!==d&&(g[b]=d));return g},n.extend({expando:"jQuery"+(m+Math.random()).replace(/\D/g,""),isReady:!0,error:function(a){throw new Error(a)},noop:function(){},isFunction:function(a){return"function"===n.type(a)},isArray:Array.isArray,isWindow:function(a){return null!=a&&a===a.window},isNumeric:function(a){return!n.isArray(a)&&a-parseFloat(a)+1>=0},isPlainObject:function(a){return"object"!==n.type(a)||a.nodeType||n.isWindow(a)?!1:a.constructor&&!j.call(a.constructor.prototype,"isPrototypeOf")?!1:!0},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},type:function(a){return null==a?a+"":"object"==typeof a||"function"==typeof a?h[i.call(a)]||"object":typeof a},globalEval:function(a){var b,c=eval;a=n.trim(a),a&&(1===a.indexOf("use strict")?(b=l.createElement("script"),b.text=a,l.head.appendChild(b).parentNode.removeChild(b)):c(a))},camelCase:function(a){return a.replace(p,"ms-").replace(q,r)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,b,c){var d,e=0,f=a.length,g=s(a);if(c){if(g){for(;f>e;e++)if(d=b.apply(a[e],c),d===!1)break}else for(e in a)if(d=b.apply(a[e],c),d===!1)break}else if(g){for(;f>e;e++)if(d=b.call(a[e],e,a[e]),d===!1)break}else for(e in a)if(d=b.call(a[e],e,a[e]),d===!1)break;return a},trim:function(a){return null==a?"":(a+"").replace(o,"")},makeArray:function(a,b){var c=b||[];return null!=a&&(s(Object(a))?n.merge(c,"string"==typeof a?[a]:a):f.call(c,a)),c},inArray:function(a,b,c){return null==b?-1:g.call(b,a,c)},merge:function(a,b){for(var c=+b.length,d=0,e=a.length;c>d;d++)a[e++]=b[d];return a.length=e,a},grep:function(a,b,c){for(var d,e=[],f=0,g=a.length,h=!c;g>f;f++)d=!b(a[f],f),d!==h&&e.push(a[f]);return e},map:function(a,b,c){var d,f=0,g=a.length,h=s(a),i=[];if(h)for(;g>f;f++)d=b(a[f],f,c),null!=d&&i.push(d);else for(f in a)d=b(a[f],f,c),null!=d&&i.push(d);return e.apply([],i)},guid:1,proxy:function(a,b){var c,e,f;return"string"==typeof b&&(c=a[b],b=a,a=c),n.isFunction(a)?(e=d.call(arguments,2),f=function(){return a.apply(b||this,e.concat(d.call(arguments)))},f.guid=a.guid=a.guid||n.guid++,f):void 0},now:Date.now,support:k}),n.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),function(a,b){h["[object "+b+"]"]=b.toLowerCase()});function s(a){var b="length"in a&&a.length,c=n.type(a);return"function"===c||n.isWindow(a)?!1:1===a.nodeType&&b?!0:"array"===c||0===b||"number"==typeof b&&b>0&&b-1 in a}var t=function(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u="sizzle"+1*new Date,v=a.document,w=0,x=0,y=ha(),z=ha(),A=ha(),B=function(a,b){return a===b&&(l=!0),0},C=1<<31,D={}.hasOwnProperty,E=[],F=E.pop,G=E.push,H=E.push,I=E.slice,J=function(a,b){for(var c=0,d=a.length;d>c;c++)if(a[c]===b)return c;return-1},K="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",L="[\\x20\\t\\r\\n\\f]",M="(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",N=M.replace("w","w#"),O="\\["+L+"*("+M+")(?:"+L+"*([*^$|!~]?=)"+L+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+N+"))|)"+L+"*\\]",P=":("+M+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+O+")*)|.*)\\)|)",Q=new RegExp(L+"+","g"),R=new RegExp("^"+L+"+|((?:^|[^\\\\])(?:\\\\.)*)"+L+"+$","g"),S=new RegExp("^"+L+"*,"+L+"*"),T=new RegExp("^"+L+"*([>+~]|"+L+")"+L+"*"),U=new RegExp("="+L+"*([^\\]'\"]*?)"+L+"*\\]","g"),V=new RegExp(P),W=new RegExp("^"+N+"$"),X={ID:new RegExp("^#("+M+")"),CLASS:new RegExp("^\\.("+M+")"),TAG:new RegExp("^("+M.replace("w","w*")+")"),ATTR:new RegExp("^"+O),PSEUDO:new RegExp("^"+P),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+L+"*(even|odd|(([+-]|)(\\d*)n|)"+L+"*(?:([+-]|)"+L+"*(\\d+)|))"+L+"*\\)|)","i"),bool:new RegExp("^(?:"+K+")$","i"),needsContext:new RegExp("^"+L+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+L+"*((?:-\\d)?\\d*)"+L+"*\\)|)(?=[^-]|$)","i")},Y=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,$=/^[^{]+\{\s*\[native \w/,_=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,aa=/[+~]/,ba=/'|\\/g,ca=new RegExp("\\\\([\\da-f]{1,6}"+L+"?|("+L+")|.)","ig"),da=function(a,b,c){var d="0x"+b-65536;return d!==d||c?b:0>d?String.fromCharCode(d+65536):String.fromCharCode(d>>10|55296,1023&d|56320)},ea=function(){m()};try{H.apply(E=I.call(v.childNodes),v.childNodes),E[v.childNodes.length].nodeType}catch(fa){H={apply:E.length?function(a,b){G.apply(a,I.call(b))}:function(a,b){var c=a.length,d=0;while(a[c++]=b[d++]);a.length=c-1}}}function ga(a,b,d,e){var f,h,j,k,l,o,r,s,w,x;if((b?b.ownerDocument||b:v)!==n&&m(b),b=b||n,d=d||[],k=b.nodeType,"string"!=typeof a||!a||1!==k&&9!==k&&11!==k)return d;if(!e&&p){if(11!==k&&(f=_.exec(a)))if(j=f[1]){if(9===k){if(h=b.getElementById(j),!h||!h.parentNode)return d;if(h.id===j)return d.push(h),d}else if(b.ownerDocument&&(h=b.ownerDocument.getElementById(j))&&t(b,h)&&h.id===j)return d.push(h),d}else{if(f[2])return H.apply(d,b.getElementsByTagName(a)),d;if((j=f[3])&&c.getElementsByClassName)return H.apply(d,b.getElementsByClassName(j)),d}if(c.qsa&&(!q||!q.test(a))){if(s=r=u,w=b,x=1!==k&&a,1===k&&"object"!==b.nodeName.toLowerCase()){o=g(a),(r=b.getAttribute("id"))?s=r.replace(ba,"\\$&"):b.setAttribute("id",s),s="[id='"+s+"'] ",l=o.length;while(l--)o[l]=s+ra(o[l]);w=aa.test(a)&&pa(b.parentNode)||b,x=o.join(",")}if(x)try{return H.apply(d,w.querySelectorAll(x)),d}catch(y){}finally{r||b.removeAttribute("id")}}}return i(a.replace(R,"$1"),b,d,e)}function ha(){var a=[];function b(c,e){return a.push(c+" ")>d.cacheLength&&delete b[a.shift()],b[c+" "]=e}return b}function ia(a){return a[u]=!0,a}function ja(a){var b=n.createElement("div");try{return!!a(b)}catch(c){return!1}finally{b.parentNode&&b.parentNode.removeChild(b),b=null}}function ka(a,b){var c=a.split("|"),e=a.length;while(e--)d.attrHandle[c[e]]=b}function la(a,b){var c=b&&a,d=c&&1===a.nodeType&&1===b.nodeType&&(~b.sourceIndex||C)-(~a.sourceIndex||C);if(d)return d;if(c)while(c=c.nextSibling)if(c===b)return-1;return a?1:-1}function ma(a){return function(b){var c=b.nodeName.toLowerCase();return"input"===c&&b.type===a}}function na(a){return function(b){var c=b.nodeName.toLowerCase();return("input"===c||"button"===c)&&b.type===a}}function oa(a){return ia(function(b){return b=+b,ia(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function pa(a){return a&&"undefined"!=typeof a.getElementsByTagName&&a}c=ga.support={},f=ga.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?"HTML"!==b.nodeName:!1},m=ga.setDocument=function(a){var b,e,g=a?a.ownerDocument||a:v;return g!==n&&9===g.nodeType&&g.documentElement?(n=g,o=g.documentElement,e=g.defaultView,e&&e!==e.top&&(e.addEventListener?e.addEventListener("unload",ea,!1):e.attachEvent&&e.attachEvent("onunload",ea)),p=!f(g),c.attributes=ja(function(a){return a.className="i",!a.getAttribute("className")}),c.getElementsByTagName=ja(function(a){return a.appendChild(g.createComment("")),!a.getElementsByTagName("*").length}),c.getElementsByClassName=$.test(g.getElementsByClassName),c.getById=ja(function(a){return o.appendChild(a).id=u,!g.getElementsByName||!g.getElementsByName(u).length}),c.getById?(d.find.ID=function(a,b){if("undefined"!=typeof b.getElementById&&p){var c=b.getElementById(a);return c&&c.parentNode?[c]:[]}},d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){return a.getAttribute("id")===b}}):(delete d.find.ID,d.filter.ID=function(a){var b=a.replace(ca,da);return function(a){var c="undefined"!=typeof a.getAttributeNode&&a.getAttributeNode("id");return c&&c.value===b}}),d.find.TAG=c.getElementsByTagName?function(a,b){return"undefined"!=typeof b.getElementsByTagName?b.getElementsByTagName(a):c.qsa?b.querySelectorAll(a):void 0}:function(a,b){var c,d=[],e=0,f=b.getElementsByTagName(a);if("*"===a){while(c=f[e++])1===c.nodeType&&d.push(c);return d}return f},d.find.CLASS=c.getElementsByClassName&&function(a,b){return p?b.getElementsByClassName(a):void 0},r=[],q=[],(c.qsa=$.test(g.querySelectorAll))&&(ja(function(a){o.appendChild(a).innerHTML="<a id='"+u+"'></a><select id='"+u+"-\f]' msallowcapture=''><option selected=''></option></select>",a.querySelectorAll("[msallowcapture^='']").length&&q.push("[*^$]="+L+"*(?:''|\"\")"),a.querySelectorAll("[selected]").length||q.push("\\["+L+"*(?:value|"+K+")"),a.querySelectorAll("[id~="+u+"-]").length||q.push("~="),a.querySelectorAll(":checked").length||q.push(":checked"),a.querySelectorAll("a#"+u+"+*").length||q.push(".#.+[+~]")}),ja(function(a){var b=g.createElement("input");b.setAttribute("type","hidden"),a.appendChild(b).setAttribute("name","D"),a.querySelectorAll("[name=d]").length&&q.push("name"+L+"*[*^$|!~]?="),a.querySelectorAll(":enabled").length||q.push(":enabled",":disabled"),a.querySelectorAll("*,:x"),q.push(",.*:")})),(c.matchesSelector=$.test(s=o.matches||o.webkitMatchesSelector||o.mozMatchesSelector||o.oMatchesSelector||o.msMatchesSelector))&&ja(function(a){c.disconnectedMatch=s.call(a,"div"),s.call(a,"[s!='']:x"),r.push("!=",P)}),q=q.length&&new RegExp(q.join("|")),r=r.length&&new RegExp(r.join("|")),b=$.test(o.compareDocumentPosition),t=b||$.test(o.contains)?function(a,b){var c=9===a.nodeType?a.documentElement:a,d=b&&b.parentNode;return a===d||!(!d||1!==d.nodeType||!(c.contains?c.contains(d):a.compareDocumentPosition&&16&a.compareDocumentPosition(d)))}:function(a,b){if(b)while(b=b.parentNode)if(b===a)return!0;return!1},B=b?function(a,b){if(a===b)return l=!0,0;var d=!a.compareDocumentPosition-!b.compareDocumentPosition;return d?d:(d=(a.ownerDocument||a)===(b.ownerDocument||b)?a.compareDocumentPosition(b):1,1&d||!c.sortDetached&&b.compareDocumentPosition(a)===d?a===g||a.ownerDocument===v&&t(v,a)?-1:b===g||b.ownerDocument===v&&t(v,b)?1:k?J(k,a)-J(k,b):0:4&d?-1:1)}:function(a,b){if(a===b)return l=!0,0;var c,d=0,e=a.parentNode,f=b.parentNode,h=[a],i=[b];if(!e||!f)return a===g?-1:b===g?1:e?-1:f?1:k?J(k,a)-J(k,b):0;if(e===f)return la(a,b);c=a;while(c=c.parentNode)h.unshift(c);c=b;while(c=c.parentNode)i.unshift(c);while(h[d]===i[d])d++;return d?la(h[d],i[d]):h[d]===v?-1:i[d]===v?1:0},g):n},ga.matches=function(a,b){return ga(a,null,null,b)},ga.matchesSelector=function(a,b){if((a.ownerDocument||a)!==n&&m(a),b=b.replace(U,"='$1']"),!(!c.matchesSelector||!p||r&&r.test(b)||q&&q.test(b)))try{var d=s.call(a,b);if(d||c.disconnectedMatch||a.document&&11!==a.document.nodeType)return d}catch(e){}return ga(b,n,null,[a]).length>0},ga.contains=function(a,b){return(a.ownerDocument||a)!==n&&m(a),t(a,b)},ga.attr=function(a,b){(a.ownerDocument||a)!==n&&m(a);var e=d.attrHandle[b.toLowerCase()],f=e&&D.call(d.attrHandle,b.toLowerCase())?e(a,b,!p):void 0;return void 0!==f?f:c.attributes||!p?a.getAttribute(b):(f=a.getAttributeNode(b))&&f.specified?f.value:null},ga.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},ga.uniqueSort=function(a){var b,d=[],e=0,f=0;if(l=!c.detectDuplicates,k=!c.sortStable&&a.slice(0),a.sort(B),l){while(b=a[f++])b===a[f]&&(e=d.push(f));while(e--)a.splice(d[e],1)}return k=null,a},e=ga.getText=function(a){var b,c="",d=0,f=a.nodeType;if(f){if(1===f||9===f||11===f){if("string"==typeof a.textContent)return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=e(a)}else if(3===f||4===f)return a.nodeValue}else while(b=a[d++])c+=e(b);return c},d=ga.selectors={cacheLength:50,createPseudo:ia,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(ca,da),a[3]=(a[3]||a[4]||a[5]||"").replace(ca,da),"~="===a[2]&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),"nth"===a[1].slice(0,3)?(a[3]||ga.error(a[0]),a[4]=+(a[4]?a[5]+(a[6]||1):2*("even"===a[3]||"odd"===a[3])),a[5]=+(a[7]+a[8]||"odd"===a[3])):a[3]&&ga.error(a[0]),a},PSEUDO:function(a){var b,c=!a[6]&&a[2];return X.CHILD.test(a[0])?null:(a[3]?a[2]=a[4]||a[5]||"":c&&V.test(c)&&(b=g(c,!0))&&(b=c.indexOf(")",c.length-b)-c.length)&&(a[0]=a[0].slice(0,b),a[2]=c.slice(0,b)),a.slice(0,3))}},filter:{TAG:function(a){var b=a.replace(ca,da).toLowerCase();return"*"===a?function(){return!0}:function(a){return a.nodeName&&a.nodeName.toLowerCase()===b}},CLASS:function(a){var b=y[a+" "];return b||(b=new RegExp("(^|"+L+")"+a+"("+L+"|$)"))&&y(a,function(a){return b.test("string"==typeof a.className&&a.className||"undefined"!=typeof a.getAttribute&&a.getAttribute("class")||"")})},ATTR:function(a,b,c){return function(d){var e=ga.attr(d,a);return null==e?"!="===b:b?(e+="","="===b?e===c:"!="===b?e!==c:"^="===b?c&&0===e.indexOf(c):"*="===b?c&&e.indexOf(c)>-1:"$="===b?c&&e.slice(-c.length)===c:"~="===b?(" "+e.replace(Q," ")+" ").indexOf(c)>-1:"|="===b?e===c||e.slice(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d,e){var f="nth"!==a.slice(0,3),g="last"!==a.slice(-4),h="of-type"===b;return 1===d&&0===e?function(a){return!!a.parentNode}:function(b,c,i){var j,k,l,m,n,o,p=f!==g?"nextSibling":"previousSibling",q=b.parentNode,r=h&&b.nodeName.toLowerCase(),s=!i&&!h;if(q){if(f){while(p){l=b;while(l=l[p])if(h?l.nodeName.toLowerCase()===r:1===l.nodeType)return!1;o=p="only"===a&&!o&&"nextSibling"}return!0}if(o=[g?q.firstChild:q.lastChild],g&&s){k=q[u]||(q[u]={}),j=k[a]||[],n=j[0]===w&&j[1],m=j[0]===w&&j[2],l=n&&q.childNodes[n];while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if(1===l.nodeType&&++m&&l===b){k[a]=[w,n,m];break}}else if(s&&(j=(b[u]||(b[u]={}))[a])&&j[0]===w)m=j[1];else while(l=++n&&l&&l[p]||(m=n=0)||o.pop())if((h?l.nodeName.toLowerCase()===r:1===l.nodeType)&&++m&&(s&&((l[u]||(l[u]={}))[a]=[w,m]),l===b))break;return m-=e,m===d||m%d===0&&m/d>=0}}},PSEUDO:function(a,b){var c,e=d.pseudos[a]||d.setFilters[a.toLowerCase()]||ga.error("unsupported pseudo: "+a);return e[u]?e(b):e.length>1?(c=[a,a,"",b],d.setFilters.hasOwnProperty(a.toLowerCase())?ia(function(a,c){var d,f=e(a,b),g=f.length;while(g--)d=J(a,f[g]),a[d]=!(c[d]=f[g])}):function(a){return e(a,0,c)}):e}},pseudos:{not:ia(function(a){var b=[],c=[],d=h(a.replace(R,"$1"));return d[u]?ia(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)(f=g[h])&&(a[h]=!(b[h]=f))}):function(a,e,f){return b[0]=a,d(b,null,f,c),b[0]=null,!c.pop()}}),has:ia(function(a){return function(b){return ga(a,b).length>0}}),contains:ia(function(a){return a=a.replace(ca,da),function(b){return(b.textContent||b.innerText||e(b)).indexOf(a)>-1}}),lang:ia(function(a){return W.test(a||"")||ga.error("unsupported lang: "+a),a=a.replace(ca,da).toLowerCase(),function(b){var c;do if(c=p?b.lang:b.getAttribute("xml:lang")||b.getAttribute("lang"))return c=c.toLowerCase(),c===a||0===c.indexOf(a+"-");while((b=b.parentNode)&&1===b.nodeType);return!1}}),target:function(b){var c=a.location&&a.location.hash;return c&&c.slice(1)===b.id},root:function(a){return a===o},focus:function(a){return a===n.activeElement&&(!n.hasFocus||n.hasFocus())&&!!(a.type||a.href||~a.tabIndex)},enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&!!a.checked||"option"===b&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},empty:function(a){for(a=a.firstChild;a;a=a.nextSibling)if(a.nodeType<6)return!1;return!0},parent:function(a){return!d.pseudos.empty(a)},header:function(a){return Z.test(a.nodeName)},input:function(a){return Y.test(a.nodeName)},button:function(a){var b=a.nodeName.toLowerCase();return"input"===b&&"button"===a.type||"button"===b},text:function(a){var b;return"input"===a.nodeName.toLowerCase()&&"text"===a.type&&(null==(b=a.getAttribute("type"))||"text"===b.toLowerCase())},first:oa(function(){return[0]}),last:oa(function(a,b){return[b-1]}),eq:oa(function(a,b,c){return[0>c?c+b:c]}),even:oa(function(a,b){for(var c=0;b>c;c+=2)a.push(c);return a}),odd:oa(function(a,b){for(var c=1;b>c;c+=2)a.push(c);return a}),lt:oa(function(a,b,c){for(var d=0>c?c+b:c;--d>=0;)a.push(d);return a}),gt:oa(function(a,b,c){for(var d=0>c?c+b:c;++d<b;)a.push(d);return a})}},d.pseudos.nth=d.pseudos.eq;for(b in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})d.pseudos[b]=ma(b);for(b in{submit:!0,reset:!0})d.pseudos[b]=na(b);function qa(){}qa.prototype=d.filters=d.pseudos,d.setFilters=new qa,g=ga.tokenize=function(a,b){var c,e,f,g,h,i,j,k=z[a+" "];if(k)return b?0:k.slice(0);h=a,i=[],j=d.preFilter;while(h){(!c||(e=S.exec(h)))&&(e&&(h=h.slice(e[0].length)||h),i.push(f=[])),c=!1,(e=T.exec(h))&&(c=e.shift(),f.push({value:c,type:e[0].replace(R," ")}),h=h.slice(c.length));for(g in d.filter)!(e=X[g].exec(h))||j[g]&&!(e=j[g](e))||(c=e.shift(),f.push({value:c,type:g,matches:e}),h=h.slice(c.length));if(!c)break}return b?h.length:h?ga.error(a):z(a,i).slice(0)};function ra(a){for(var b=0,c=a.length,d="";c>b;b++)d+=a[b].value;return d}function sa(a,b,c){var d=b.dir,e=c&&"parentNode"===d,f=x++;return b.first?function(b,c,f){while(b=b[d])if(1===b.nodeType||e)return a(b,c,f)}:function(b,c,g){var h,i,j=[w,f];if(g){while(b=b[d])if((1===b.nodeType||e)&&a(b,c,g))return!0}else while(b=b[d])if(1===b.nodeType||e){if(i=b[u]||(b[u]={}),(h=i[d])&&h[0]===w&&h[1]===f)return j[2]=h[2];if(i[d]=j,j[2]=a(b,c,g))return!0}}}function ta(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function ua(a,b,c){for(var d=0,e=b.length;e>d;d++)ga(a,b[d],c);return c}function va(a,b,c,d,e){for(var f,g=[],h=0,i=a.length,j=null!=b;i>h;h++)(f=a[h])&&(!c||c(f,d,e))&&(g.push(f),j&&b.push(h));return g}function wa(a,b,c,d,e,f){return d&&!d[u]&&(d=wa(d)),e&&!e[u]&&(e=wa(e,f)),ia(function(f,g,h,i){var j,k,l,m=[],n=[],o=g.length,p=f||ua(b||"*",h.nodeType?[h]:h,[]),q=!a||!f&&b?p:va(p,m,a,h,i),r=c?e||(f?a:o||d)?[]:g:q;if(c&&c(q,r,h,i),d){j=va(r,n),d(j,[],h,i),k=j.length;while(k--)(l=j[k])&&(r[n[k]]=!(q[n[k]]=l))}if(f){if(e||a){if(e){j=[],k=r.length;while(k--)(l=r[k])&&j.push(q[k]=l);e(null,r=[],j,i)}k=r.length;while(k--)(l=r[k])&&(j=e?J(f,l):m[k])>-1&&(f[j]=!(g[j]=l))}}else r=va(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):H.apply(g,r)})}function xa(a){for(var b,c,e,f=a.length,g=d.relative[a[0].type],h=g||d.relative[" "],i=g?1:0,k=sa(function(a){return a===b},h,!0),l=sa(function(a){return J(b,a)>-1},h,!0),m=[function(a,c,d){var e=!g&&(d||c!==j)||((b=c).nodeType?k(a,c,d):l(a,c,d));return b=null,e}];f>i;i++)if(c=d.relative[a[i].type])m=[sa(ta(m),c)];else{if(c=d.filter[a[i].type].apply(null,a[i].matches),c[u]){for(e=++i;f>e;e++)if(d.relative[a[e].type])break;return wa(i>1&&ta(m),i>1&&ra(a.slice(0,i-1).concat({value:" "===a[i-2].type?"*":""})).replace(R,"$1"),c,e>i&&xa(a.slice(i,e)),f>e&&xa(a=a.slice(e)),f>e&&ra(a))}m.push(c)}return ta(m)}function ya(a,b){var c=b.length>0,e=a.length>0,f=function(f,g,h,i,k){var l,m,o,p=0,q="0",r=f&&[],s=[],t=j,u=f||e&&d.find.TAG("*",k),v=w+=null==t?1:Math.random()||.1,x=u.length;for(k&&(j=g!==n&&g);q!==x&&null!=(l=u[q]);q++){if(e&&l){m=0;while(o=a[m++])if(o(l,g,h)){i.push(l);break}k&&(w=v)}c&&((l=!o&&l)&&p--,f&&r.push(l))}if(p+=q,c&&q!==p){m=0;while(o=b[m++])o(r,s,g,h);if(f){if(p>0)while(q--)r[q]||s[q]||(s[q]=F.call(i));s=va(s)}H.apply(i,s),k&&!f&&s.length>0&&p+b.length>1&&ga.uniqueSort(i)}return k&&(w=v,j=t),r};return c?ia(f):f}return h=ga.compile=function(a,b){var c,d=[],e=[],f=A[a+" "];if(!f){b||(b=g(a)),c=b.length;while(c--)f=xa(b[c]),f[u]?d.push(f):e.push(f);f=A(a,ya(e,d)),f.selector=a}return f},i=ga.select=function(a,b,e,f){var i,j,k,l,m,n="function"==typeof a&&a,o=!f&&g(a=n.selector||a);if(e=e||[],1===o.length){if(j=o[0]=o[0].slice(0),j.length>2&&"ID"===(k=j[0]).type&&c.getById&&9===b.nodeType&&p&&d.relative[j[1].type]){if(b=(d.find.ID(k.matches[0].replace(ca,da),b)||[])[0],!b)return e;n&&(b=b.parentNode),a=a.slice(j.shift().value.length)}i=X.needsContext.test(a)?0:j.length;while(i--){if(k=j[i],d.relative[l=k.type])break;if((m=d.find[l])&&(f=m(k.matches[0].replace(ca,da),aa.test(j[0].type)&&pa(b.parentNode)||b))){if(j.splice(i,1),a=f.length&&ra(j),!a)return H.apply(e,f),e;break}}}return(n||h(a,o))(f,b,!p,e,aa.test(a)&&pa(b.parentNode)||b),e},c.sortStable=u.split("").sort(B).join("")===u,c.detectDuplicates=!!l,m(),c.sortDetached=ja(function(a){return 1&a.compareDocumentPosition(n.createElement("div"))}),ja(function(a){return a.innerHTML="<a href='#'></a>","#"===a.firstChild.getAttribute("href")})||ka("type|href|height|width",function(a,b,c){return c?void 0:a.getAttribute(b,"type"===b.toLowerCase()?1:2)}),c.attributes&&ja(function(a){return a.innerHTML="<input/>",a.firstChild.setAttribute("value",""),""===a.firstChild.getAttribute("value")})||ka("value",function(a,b,c){return c||"input"!==a.nodeName.toLowerCase()?void 0:a.defaultValue}),ja(function(a){return null==a.getAttribute("disabled")})||ka(K,function(a,b,c){var d;return c?void 0:a[b]===!0?b.toLowerCase():(d=a.getAttributeNode(b))&&d.specified?d.value:null}),ga}(a);n.find=t,n.expr=t.selectors,n.expr[":"]=n.expr.pseudos,n.unique=t.uniqueSort,n.text=t.getText,n.isXMLDoc=t.isXML,n.contains=t.contains;var u=n.expr.match.needsContext,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^.[^:#\[\.,]*$/;function x(a,b,c){if(n.isFunction(b))return n.grep(a,function(a,d){return!!b.call(a,d,a)!==c});if(b.nodeType)return n.grep(a,function(a){return a===b!==c});if("string"==typeof b){if(w.test(b))return n.filter(b,a,c);b=n.filter(b,a)}return n.grep(a,function(a){return g.call(b,a)>=0!==c})}n.filter=function(a,b,c){var d=b[0];return c&&(a=":not("+a+")"),1===b.length&&1===d.nodeType?n.find.matchesSelector(d,a)?[d]:[]:n.find.matches(a,n.grep(b,function(a){return 1===a.nodeType}))},n.fn.extend({find:function(a){var b,c=this.length,d=[],e=this;if("string"!=typeof a)return this.pushStack(n(a).filter(function(){for(b=0;c>b;b++)if(n.contains(e[b],this))return!0}));for(b=0;c>b;b++)n.find(a,e[b],d);return d=this.pushStack(c>1?n.unique(d):d),d.selector=this.selector?this.selector+" "+a:a,d},filter:function(a){return this.pushStack(x(this,a||[],!1))},not:function(a){return this.pushStack(x(this,a||[],!0))},is:function(a){return!!x(this,"string"==typeof a&&u.test(a)?n(a):a||[],!1).length}});var y,z=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,A=n.fn.init=function(a,b){var c,d;if(!a)return this;if("string"==typeof a){if(c="<"===a[0]&&">"===a[a.length-1]&&a.length>=3?[null,a,null]:z.exec(a),!c||!c[1]&&b)return!b||b.jquery?(b||y).find(a):this.constructor(b).find(a);if(c[1]){if(b=b instanceof n?b[0]:b,n.merge(this,n.parseHTML(c[1],b&&b.nodeType?b.ownerDocument||b:l,!0)),v.test(c[1])&&n.isPlainObject(b))for(c in b)n.isFunction(this[c])?this[c](b[c]):this.attr(c,b[c]);return this}return d=l.getElementById(c[2]),d&&d.parentNode&&(this.length=1,this[0]=d),this.context=l,this.selector=a,this}return a.nodeType?(this.context=this[0]=a,this.length=1,this):n.isFunction(a)?"undefined"!=typeof y.ready?y.ready(a):a(n):(void 0!==a.selector&&(this.selector=a.selector,this.context=a.context),n.makeArray(a,this))};A.prototype=n.fn,y=n(l);var B=/^(?:parents|prev(?:Until|All))/,C={children:!0,contents:!0,next:!0,prev:!0};n.extend({dir:function(a,b,c){var d=[],e=void 0!==c;while((a=a[b])&&9!==a.nodeType)if(1===a.nodeType){if(e&&n(a).is(c))break;d.push(a)}return d},sibling:function(a,b){for(var c=[];a;a=a.nextSibling)1===a.nodeType&&a!==b&&c.push(a);return c}}),n.fn.extend({has:function(a){var b=n(a,this),c=b.length;return this.filter(function(){for(var a=0;c>a;a++)if(n.contains(this,b[a]))return!0})},closest:function(a,b){for(var c,d=0,e=this.length,f=[],g=u.test(a)||"string"!=typeof a?n(a,b||this.context):0;e>d;d++)for(c=this[d];c&&c!==b;c=c.parentNode)if(c.nodeType<11&&(g?g.index(c)>-1:1===c.nodeType&&n.find.matchesSelector(c,a))){f.push(c);break}return this.pushStack(f.length>1?n.unique(f):f)},index:function(a){return a?"string"==typeof a?g.call(n(a),this[0]):g.call(this,a.jquery?a[0]:a):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(a,b){return this.pushStack(n.unique(n.merge(this.get(),n(a,b))))},addBack:function(a){return this.add(null==a?this.prevObject:this.prevObject.filter(a))}});function D(a,b){while((a=a[b])&&1!==a.nodeType);return a}n.each({parent:function(a){var b=a.parentNode;return b&&11!==b.nodeType?b:null},parents:function(a){return n.dir(a,"parentNode")},parentsUntil:function(a,b,c){return n.dir(a,"parentNode",c)},next:function(a){return D(a,"nextSibling")},prev:function(a){return D(a,"previousSibling")},nextAll:function(a){return n.dir(a,"nextSibling")},prevAll:function(a){return n.dir(a,"previousSibling")},nextUntil:function(a,b,c){return n.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return n.dir(a,"previousSibling",c)},siblings:function(a){return n.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return n.sibling(a.firstChild)},contents:function(a){return a.contentDocument||n.merge([],a.childNodes)}},function(a,b){n.fn[a]=function(c,d){var e=n.map(this,b,c);return"Until"!==a.slice(-5)&&(d=c),d&&"string"==typeof d&&(e=n.filter(d,e)),this.length>1&&(C[a]||n.unique(e),B.test(a)&&e.reverse()),this.pushStack(e)}});var E=/\S+/g,F={};function G(a){var b=F[a]={};return n.each(a.match(E)||[],function(a,c){b[c]=!0}),b}n.Callbacks=function(a){a="string"==typeof a?F[a]||G(a):n.extend({},a);var b,c,d,e,f,g,h=[],i=!a.once&&[],j=function(l){for(b=a.memory&&l,c=!0,g=e||0,e=0,f=h.length,d=!0;h&&f>g;g++)if(h[g].apply(l[0],l[1])===!1&&a.stopOnFalse){b=!1;break}d=!1,h&&(i?i.length&&j(i.shift()):b?h=[]:k.disable())},k={add:function(){if(h){var c=h.length;!function g(b){n.each(b,function(b,c){var d=n.type(c);"function"===d?a.unique&&k.has(c)||h.push(c):c&&c.length&&"string"!==d&&g(c)})}(arguments),d?f=h.length:b&&(e=c,j(b))}return this},remove:function(){return h&&n.each(arguments,function(a,b){var c;while((c=n.inArray(b,h,c))>-1)h.splice(c,1),d&&(f>=c&&f--,g>=c&&g--)}),this},has:function(a){return a?n.inArray(a,h)>-1:!(!h||!h.length)},empty:function(){return h=[],f=0,this},disable:function(){return h=i=b=void 0,this},disabled:function(){return!h},lock:function(){return i=void 0,b||k.disable(),this},locked:function(){return!i},fireWith:function(a,b){return!h||c&&!i||(b=b||[],b=[a,b.slice?b.slice():b],d?i.push(b):j(b)),this},fire:function(){return k.fireWith(this,arguments),this},fired:function(){return!!c}};return k},n.extend({Deferred:function(a){var b=[["resolve","done",n.Callbacks("once memory"),"resolved"],["reject","fail",n.Callbacks("once memory"),"rejected"],["notify","progress",n.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return n.Deferred(function(c){n.each(b,function(b,f){var g=n.isFunction(a[b])&&a[b];e[f[1]](function(){var a=g&&g.apply(this,arguments);a&&n.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f[0]+"With"](this===d?c.promise():this,g?[a]:arguments)})}),a=null}).promise()},promise:function(a){return null!=a?n.extend(a,d):d}},e={};return d.pipe=d.then,n.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[1^a][2].disable,b[2][2].lock),e[f[0]]=function(){return e[f[0]+"With"](this===e?d:this,arguments),this},e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=d.call(arguments),e=c.length,f=1!==e||a&&n.isFunction(a.promise)?e:0,g=1===f?a:n.Deferred(),h=function(a,b,c){return function(e){b[a]=this,c[a]=arguments.length>1?d.call(arguments):e,c===i?g.notifyWith(b,c):--f||g.resolveWith(b,c)}},i,j,k;if(e>1)for(i=new Array(e),j=new Array(e),k=new Array(e);e>b;b++)c[b]&&n.isFunction(c[b].promise)?c[b].promise().done(h(b,k,c)).fail(g.reject).progress(h(b,j,i)):--f;return f||g.resolveWith(k,c),g.promise()}});var H;n.fn.ready=function(a){return n.ready.promise().done(a),this},n.extend({isReady:!1,readyWait:1,holdReady:function(a){a?n.readyWait++:n.ready(!0)},ready:function(a){(a===!0?--n.readyWait:n.isReady)||(n.isReady=!0,a!==!0&&--n.readyWait>0||(H.resolveWith(l,[n]),n.fn.triggerHandler&&(n(l).triggerHandler("ready"),n(l).off("ready"))))}});function I(){l.removeEventListener("DOMContentLoaded",I,!1),a.removeEventListener("load",I,!1),n.ready()}n.ready.promise=function(b){return H||(H=n.Deferred(),"complete"===l.readyState?setTimeout(n.ready):(l.addEventListener("DOMContentLoaded",I,!1),a.addEventListener("load",I,!1))),H.promise(b)},n.ready.promise();var J=n.access=function(a,b,c,d,e,f,g){var h=0,i=a.length,j=null==c;if("object"===n.type(c)){e=!0;for(h in c)n.access(a,b,h,c[h],!0,f,g)}else if(void 0!==d&&(e=!0,n.isFunction(d)||(g=!0),j&&(g?(b.call(a,d),b=null):(j=b,b=function(a,b,c){return j.call(n(a),c)})),b))for(;i>h;h++)b(a[h],c,g?d:d.call(a[h],h,b(a[h],c)));return e?a:j?b.call(a):i?b(a[0],c):f};n.acceptData=function(a){return 1===a.nodeType||9===a.nodeType||!+a.nodeType};function K(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=n.expando+K.uid++}K.uid=1,K.accepts=n.acceptData,K.prototype={key:function(a){if(!K.accepts(a))return 0;var b={},c=a[this.expando];if(!c){c=K.uid++;try{b[this.expando]={value:c},Object.defineProperties(a,b)}catch(d){b[this.expando]=c,n.extend(a,b)}}return this.cache[c]||(this.cache[c]={}),c},set:function(a,b,c){var d,e=this.key(a),f=this.cache[e];if("string"==typeof b)f[b]=c;else if(n.isEmptyObject(f))n.extend(this.cache[e],b);else for(d in b)f[d]=b[d];return f},get:function(a,b){var c=this.cache[this.key(a)];return void 0===b?c:c[b]},access:function(a,b,c){var d;return void 0===b||b&&"string"==typeof b&&void 0===c?(d=this.get(a,b),void 0!==d?d:this.get(a,n.camelCase(b))):(this.set(a,b,c),void 0!==c?c:b)},remove:function(a,b){var c,d,e,f=this.key(a),g=this.cache[f];if(void 0===b)this.cache[f]={};else{n.isArray(b)?d=b.concat(b.map(n.camelCase)):(e=n.camelCase(b),b in g?d=[b,e]:(d=e,d=d in g?[d]:d.match(E)||[])),c=d.length;while(c--)delete g[d[c]]}},hasData:function(a){return!n.isEmptyObject(this.cache[a[this.expando]]||{})},discard:function(a){a[this.expando]&&delete this.cache[a[this.expando]]}};var L=new K,M=new K,N=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,O=/([A-Z])/g;function P(a,b,c){var d;if(void 0===c&&1===a.nodeType)if(d="data-"+b.replace(O,"-$1").toLowerCase(),c=a.getAttribute(d),"string"==typeof c){try{c="true"===c?!0:"false"===c?!1:"null"===c?null:+c+""===c?+c:N.test(c)?n.parseJSON(c):c}catch(e){}M.set(a,b,c)}else c=void 0;return c}n.extend({hasData:function(a){return M.hasData(a)||L.hasData(a)},data:function(a,b,c){
return M.access(a,b,c)},removeData:function(a,b){M.remove(a,b)},_data:function(a,b,c){return L.access(a,b,c)},_removeData:function(a,b){L.remove(a,b)}}),n.fn.extend({data:function(a,b){var c,d,e,f=this[0],g=f&&f.attributes;if(void 0===a){if(this.length&&(e=M.get(f),1===f.nodeType&&!L.get(f,"hasDataAttrs"))){c=g.length;while(c--)g[c]&&(d=g[c].name,0===d.indexOf("data-")&&(d=n.camelCase(d.slice(5)),P(f,d,e[d])));L.set(f,"hasDataAttrs",!0)}return e}return"object"==typeof a?this.each(function(){M.set(this,a)}):J(this,function(b){var c,d=n.camelCase(a);if(f&&void 0===b){if(c=M.get(f,a),void 0!==c)return c;if(c=M.get(f,d),void 0!==c)return c;if(c=P(f,d,void 0),void 0!==c)return c}else this.each(function(){var c=M.get(this,d);M.set(this,d,b),-1!==a.indexOf("-")&&void 0!==c&&M.set(this,a,b)})},null,b,arguments.length>1,null,!0)},removeData:function(a){return this.each(function(){M.remove(this,a)})}}),n.extend({queue:function(a,b,c){var d;return a?(b=(b||"fx")+"queue",d=L.get(a,b),c&&(!d||n.isArray(c)?d=L.access(a,b,n.makeArray(c)):d.push(c)),d||[]):void 0},dequeue:function(a,b){b=b||"fx";var c=n.queue(a,b),d=c.length,e=c.shift(),f=n._queueHooks(a,b),g=function(){n.dequeue(a,b)};"inprogress"===e&&(e=c.shift(),d--),e&&("fx"===b&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return L.get(a,c)||L.access(a,c,{empty:n.Callbacks("once memory").add(function(){L.remove(a,[b+"queue",c])})})}}),n.fn.extend({queue:function(a,b){var c=2;return"string"!=typeof a&&(b=a,a="fx",c--),arguments.length<c?n.queue(this[0],a):void 0===b?this:this.each(function(){var c=n.queue(this,a,b);n._queueHooks(this,a),"fx"===a&&"inprogress"!==c[0]&&n.dequeue(this,a)})},dequeue:function(a){return this.each(function(){n.dequeue(this,a)})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,b){var c,d=1,e=n.Deferred(),f=this,g=this.length,h=function(){--d||e.resolveWith(f,[f])};"string"!=typeof a&&(b=a,a=void 0),a=a||"fx";while(g--)c=L.get(f[g],a+"queueHooks"),c&&c.empty&&(d++,c.empty.add(h));return h(),e.promise(b)}});var Q=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,R=["Top","Right","Bottom","Left"],S=function(a,b){return a=b||a,"none"===n.css(a,"display")||!n.contains(a.ownerDocument,a)},T=/^(?:checkbox|radio)$/i;!function(){var a=l.createDocumentFragment(),b=a.appendChild(l.createElement("div")),c=l.createElement("input");c.setAttribute("type","radio"),c.setAttribute("checked","checked"),c.setAttribute("name","t"),b.appendChild(c),k.checkClone=b.cloneNode(!0).cloneNode(!0).lastChild.checked,b.innerHTML="<textarea>x</textarea>",k.noCloneChecked=!!b.cloneNode(!0).lastChild.defaultValue}();var U="undefined";k.focusinBubbles="onfocusin"in a;var V=/^key/,W=/^(?:mouse|pointer|contextmenu)|click/,X=/^(?:focusinfocus|focusoutblur)$/,Y=/^([^.]*)(?:\.(.+)|)$/;function Z(){return!0}function $(){return!1}function _(){try{return l.activeElement}catch(a){}}n.event={global:{},add:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.get(a);if(r){c.handler&&(f=c,c=f.handler,e=f.selector),c.guid||(c.guid=n.guid++),(i=r.events)||(i=r.events={}),(g=r.handle)||(g=r.handle=function(b){return typeof n!==U&&n.event.triggered!==b.type?n.event.dispatch.apply(a,arguments):void 0}),b=(b||"").match(E)||[""],j=b.length;while(j--)h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o&&(l=n.event.special[o]||{},o=(e?l.delegateType:l.bindType)||o,l=n.event.special[o]||{},k=n.extend({type:o,origType:q,data:d,handler:c,guid:c.guid,selector:e,needsContext:e&&n.expr.match.needsContext.test(e),namespace:p.join(".")},f),(m=i[o])||(m=i[o]=[],m.delegateCount=0,l.setup&&l.setup.call(a,d,p,g)!==!1||a.addEventListener&&a.addEventListener(o,g,!1)),l.add&&(l.add.call(a,k),k.handler.guid||(k.handler.guid=c.guid)),e?m.splice(m.delegateCount++,0,k):m.push(k),n.event.global[o]=!0)}},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,o,p,q,r=L.hasData(a)&&L.get(a);if(r&&(i=r.events)){b=(b||"").match(E)||[""],j=b.length;while(j--)if(h=Y.exec(b[j])||[],o=q=h[1],p=(h[2]||"").split(".").sort(),o){l=n.event.special[o]||{},o=(d?l.delegateType:l.bindType)||o,m=i[o]||[],h=h[2]&&new RegExp("(^|\\.)"+p.join("\\.(?:.*\\.|)")+"(\\.|$)"),g=f=m.length;while(f--)k=m[f],!e&&q!==k.origType||c&&c.guid!==k.guid||h&&!h.test(k.namespace)||d&&d!==k.selector&&("**"!==d||!k.selector)||(m.splice(f,1),k.selector&&m.delegateCount--,l.remove&&l.remove.call(a,k));g&&!m.length&&(l.teardown&&l.teardown.call(a,p,r.handle)!==!1||n.removeEvent(a,o,r.handle),delete i[o])}else for(o in i)n.event.remove(a,o+b[j],c,d,!0);n.isEmptyObject(i)&&(delete r.handle,L.remove(a,"events"))}},trigger:function(b,c,d,e){var f,g,h,i,k,m,o,p=[d||l],q=j.call(b,"type")?b.type:b,r=j.call(b,"namespace")?b.namespace.split("."):[];if(g=h=d=d||l,3!==d.nodeType&&8!==d.nodeType&&!X.test(q+n.event.triggered)&&(q.indexOf(".")>=0&&(r=q.split("."),q=r.shift(),r.sort()),k=q.indexOf(":")<0&&"on"+q,b=b[n.expando]?b:new n.Event(q,"object"==typeof b&&b),b.isTrigger=e?2:3,b.namespace=r.join("."),b.namespace_re=b.namespace?new RegExp("(^|\\.)"+r.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,b.result=void 0,b.target||(b.target=d),c=null==c?[b]:n.makeArray(c,[b]),o=n.event.special[q]||{},e||!o.trigger||o.trigger.apply(d,c)!==!1)){if(!e&&!o.noBubble&&!n.isWindow(d)){for(i=o.delegateType||q,X.test(i+q)||(g=g.parentNode);g;g=g.parentNode)p.push(g),h=g;h===(d.ownerDocument||l)&&p.push(h.defaultView||h.parentWindow||a)}f=0;while((g=p[f++])&&!b.isPropagationStopped())b.type=f>1?i:o.bindType||q,m=(L.get(g,"events")||{})[b.type]&&L.get(g,"handle"),m&&m.apply(g,c),m=k&&g[k],m&&m.apply&&n.acceptData(g)&&(b.result=m.apply(g,c),b.result===!1&&b.preventDefault());return b.type=q,e||b.isDefaultPrevented()||o._default&&o._default.apply(p.pop(),c)!==!1||!n.acceptData(d)||k&&n.isFunction(d[q])&&!n.isWindow(d)&&(h=d[k],h&&(d[k]=null),n.event.triggered=q,d[q](),n.event.triggered=void 0,h&&(d[k]=h)),b.result}},dispatch:function(a){a=n.event.fix(a);var b,c,e,f,g,h=[],i=d.call(arguments),j=(L.get(this,"events")||{})[a.type]||[],k=n.event.special[a.type]||{};if(i[0]=a,a.delegateTarget=this,!k.preDispatch||k.preDispatch.call(this,a)!==!1){h=n.event.handlers.call(this,a,j),b=0;while((f=h[b++])&&!a.isPropagationStopped()){a.currentTarget=f.elem,c=0;while((g=f.handlers[c++])&&!a.isImmediatePropagationStopped())(!a.namespace_re||a.namespace_re.test(g.namespace))&&(a.handleObj=g,a.data=g.data,e=((n.event.special[g.origType]||{}).handle||g.handler).apply(f.elem,i),void 0!==e&&(a.result=e)===!1&&(a.preventDefault(),a.stopPropagation()))}return k.postDispatch&&k.postDispatch.call(this,a),a.result}},handlers:function(a,b){var c,d,e,f,g=[],h=b.delegateCount,i=a.target;if(h&&i.nodeType&&(!a.button||"click"!==a.type))for(;i!==this;i=i.parentNode||this)if(i.disabled!==!0||"click"!==a.type){for(d=[],c=0;h>c;c++)f=b[c],e=f.selector+" ",void 0===d[e]&&(d[e]=f.needsContext?n(e,this).index(i)>=0:n.find(e,this,null,[i]).length),d[e]&&d.push(f);d.length&&g.push({elem:i,handlers:d})}return h<b.length&&g.push({elem:this,handlers:b.slice(h)}),g},props:"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return null==a.which&&(a.which=null!=b.charCode?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,b){var c,d,e,f=b.button;return null==a.pageX&&null!=b.clientX&&(c=a.target.ownerDocument||l,d=c.documentElement,e=c.body,a.pageX=b.clientX+(d&&d.scrollLeft||e&&e.scrollLeft||0)-(d&&d.clientLeft||e&&e.clientLeft||0),a.pageY=b.clientY+(d&&d.scrollTop||e&&e.scrollTop||0)-(d&&d.clientTop||e&&e.clientTop||0)),a.which||void 0===f||(a.which=1&f?1:2&f?3:4&f?2:0),a}},fix:function(a){if(a[n.expando])return a;var b,c,d,e=a.type,f=a,g=this.fixHooks[e];g||(this.fixHooks[e]=g=W.test(e)?this.mouseHooks:V.test(e)?this.keyHooks:{}),d=g.props?this.props.concat(g.props):this.props,a=new n.Event(f),b=d.length;while(b--)c=d[b],a[c]=f[c];return a.target||(a.target=l),3===a.target.nodeType&&(a.target=a.target.parentNode),g.filter?g.filter(a,f):a},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==_()&&this.focus?(this.focus(),!1):void 0},delegateType:"focusin"},blur:{trigger:function(){return this===_()&&this.blur?(this.blur(),!1):void 0},delegateType:"focusout"},click:{trigger:function(){return"checkbox"===this.type&&this.click&&n.nodeName(this,"input")?(this.click(),!1):void 0},_default:function(a){return n.nodeName(a.target,"a")}},beforeunload:{postDispatch:function(a){void 0!==a.result&&a.originalEvent&&(a.originalEvent.returnValue=a.result)}}},simulate:function(a,b,c,d){var e=n.extend(new n.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?n.event.trigger(e,null,b):n.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},n.removeEvent=function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)},n.Event=function(a,b){return this instanceof n.Event?(a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||void 0===a.defaultPrevented&&a.returnValue===!1?Z:$):this.type=a,b&&n.extend(this,b),this.timeStamp=a&&a.timeStamp||n.now(),void(this[n.expando]=!0)):new n.Event(a,b)},n.Event.prototype={isDefaultPrevented:$,isPropagationStopped:$,isImmediatePropagationStopped:$,preventDefault:function(){var a=this.originalEvent;this.isDefaultPrevented=Z,a&&a.preventDefault&&a.preventDefault()},stopPropagation:function(){var a=this.originalEvent;this.isPropagationStopped=Z,a&&a.stopPropagation&&a.stopPropagation()},stopImmediatePropagation:function(){var a=this.originalEvent;this.isImmediatePropagationStopped=Z,a&&a.stopImmediatePropagation&&a.stopImmediatePropagation(),this.stopPropagation()}},n.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(a,b){n.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj;return(!e||e!==d&&!n.contains(d,e))&&(a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b),c}}}),k.focusinBubbles||n.each({focus:"focusin",blur:"focusout"},function(a,b){var c=function(a){n.event.simulate(b,a.target,n.event.fix(a),!0)};n.event.special[b]={setup:function(){var d=this.ownerDocument||this,e=L.access(d,b);e||d.addEventListener(a,c,!0),L.access(d,b,(e||0)+1)},teardown:function(){var d=this.ownerDocument||this,e=L.access(d,b)-1;e?L.access(d,b,e):(d.removeEventListener(a,c,!0),L.remove(d,b))}}}),n.fn.extend({on:function(a,b,c,d,e){var f,g;if("object"==typeof a){"string"!=typeof b&&(c=c||b,b=void 0);for(g in a)this.on(g,b,c,a[g],e);return this}if(null==c&&null==d?(d=b,c=b=void 0):null==d&&("string"==typeof b?(d=c,c=void 0):(d=c,c=b,b=void 0)),d===!1)d=$;else if(!d)return this;return 1===e&&(f=d,d=function(a){return n().off(a),f.apply(this,arguments)},d.guid=f.guid||(f.guid=n.guid++)),this.each(function(){n.event.add(this,a,d,c,b)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,b,c){var d,e;if(a&&a.preventDefault&&a.handleObj)return d=a.handleObj,n(a.delegateTarget).off(d.namespace?d.origType+"."+d.namespace:d.origType,d.selector,d.handler),this;if("object"==typeof a){for(e in a)this.off(e,b,a[e]);return this}return(b===!1||"function"==typeof b)&&(c=b,b=void 0),c===!1&&(c=$),this.each(function(){n.event.remove(this,a,c,b)})},trigger:function(a,b){return this.each(function(){n.event.trigger(a,b,this)})},triggerHandler:function(a,b){var c=this[0];return c?n.event.trigger(a,b,c,!0):void 0}});var aa=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,ba=/<([\w:]+)/,ca=/<|&#?\w+;/,da=/<(?:script|style|link)/i,ea=/checked\s*(?:[^=]|=\s*.checked.)/i,fa=/^$|\/(?:java|ecma)script/i,ga=/^true\/(.*)/,ha=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,ia={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};ia.optgroup=ia.option,ia.tbody=ia.tfoot=ia.colgroup=ia.caption=ia.thead,ia.th=ia.td;function ja(a,b){return n.nodeName(a,"table")&&n.nodeName(11!==b.nodeType?b:b.firstChild,"tr")?a.getElementsByTagName("tbody")[0]||a.appendChild(a.ownerDocument.createElement("tbody")):a}function ka(a){return a.type=(null!==a.getAttribute("type"))+"/"+a.type,a}function la(a){var b=ga.exec(a.type);return b?a.type=b[1]:a.removeAttribute("type"),a}function ma(a,b){for(var c=0,d=a.length;d>c;c++)L.set(a[c],"globalEval",!b||L.get(b[c],"globalEval"))}function na(a,b){var c,d,e,f,g,h,i,j;if(1===b.nodeType){if(L.hasData(a)&&(f=L.access(a),g=L.set(b,f),j=f.events)){delete g.handle,g.events={};for(e in j)for(c=0,d=j[e].length;d>c;c++)n.event.add(b,e,j[e][c])}M.hasData(a)&&(h=M.access(a),i=n.extend({},h),M.set(b,i))}}function oa(a,b){var c=a.getElementsByTagName?a.getElementsByTagName(b||"*"):a.querySelectorAll?a.querySelectorAll(b||"*"):[];return void 0===b||b&&n.nodeName(a,b)?n.merge([a],c):c}function pa(a,b){var c=b.nodeName.toLowerCase();"input"===c&&T.test(a.type)?b.checked=a.checked:("input"===c||"textarea"===c)&&(b.defaultValue=a.defaultValue)}n.extend({clone:function(a,b,c){var d,e,f,g,h=a.cloneNode(!0),i=n.contains(a.ownerDocument,a);if(!(k.noCloneChecked||1!==a.nodeType&&11!==a.nodeType||n.isXMLDoc(a)))for(g=oa(h),f=oa(a),d=0,e=f.length;e>d;d++)pa(f[d],g[d]);if(b)if(c)for(f=f||oa(a),g=g||oa(h),d=0,e=f.length;e>d;d++)na(f[d],g[d]);else na(a,h);return g=oa(h,"script"),g.length>0&&ma(g,!i&&oa(a,"script")),h},buildFragment:function(a,b,c,d){for(var e,f,g,h,i,j,k=b.createDocumentFragment(),l=[],m=0,o=a.length;o>m;m++)if(e=a[m],e||0===e)if("object"===n.type(e))n.merge(l,e.nodeType?[e]:e);else if(ca.test(e)){f=f||k.appendChild(b.createElement("div")),g=(ba.exec(e)||["",""])[1].toLowerCase(),h=ia[g]||ia._default,f.innerHTML=h[1]+e.replace(aa,"<$1></$2>")+h[2],j=h[0];while(j--)f=f.lastChild;n.merge(l,f.childNodes),f=k.firstChild,f.textContent=""}else l.push(b.createTextNode(e));k.textContent="",m=0;while(e=l[m++])if((!d||-1===n.inArray(e,d))&&(i=n.contains(e.ownerDocument,e),f=oa(k.appendChild(e),"script"),i&&ma(f),c)){j=0;while(e=f[j++])fa.test(e.type||"")&&c.push(e)}return k},cleanData:function(a){for(var b,c,d,e,f=n.event.special,g=0;void 0!==(c=a[g]);g++){if(n.acceptData(c)&&(e=c[L.expando],e&&(b=L.cache[e]))){if(b.events)for(d in b.events)f[d]?n.event.remove(c,d):n.removeEvent(c,d,b.handle);L.cache[e]&&delete L.cache[e]}delete M.cache[c[M.expando]]}}}),n.fn.extend({text:function(a){return J(this,function(a){return void 0===a?n.text(this):this.empty().each(function(){(1===this.nodeType||11===this.nodeType||9===this.nodeType)&&(this.textContent=a)})},null,a,arguments.length)},append:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.appendChild(a)}})},prepend:function(){return this.domManip(arguments,function(a){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var b=ja(this,a);b.insertBefore(a,b.firstChild)}})},before:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this)})},after:function(){return this.domManip(arguments,function(a){this.parentNode&&this.parentNode.insertBefore(a,this.nextSibling)})},remove:function(a,b){for(var c,d=a?n.filter(a,this):this,e=0;null!=(c=d[e]);e++)b||1!==c.nodeType||n.cleanData(oa(c)),c.parentNode&&(b&&n.contains(c.ownerDocument,c)&&ma(oa(c,"script")),c.parentNode.removeChild(c));return this},empty:function(){for(var a,b=0;null!=(a=this[b]);b++)1===a.nodeType&&(n.cleanData(oa(a,!1)),a.textContent="");return this},clone:function(a,b){return a=null==a?!1:a,b=null==b?a:b,this.map(function(){return n.clone(this,a,b)})},html:function(a){return J(this,function(a){var b=this[0]||{},c=0,d=this.length;if(void 0===a&&1===b.nodeType)return b.innerHTML;if("string"==typeof a&&!da.test(a)&&!ia[(ba.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(aa,"<$1></$2>");try{for(;d>c;c++)b=this[c]||{},1===b.nodeType&&(n.cleanData(oa(b,!1)),b.innerHTML=a);b=0}catch(e){}}b&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(){var a=arguments[0];return this.domManip(arguments,function(b){a=this.parentNode,n.cleanData(oa(this)),a&&a.replaceChild(b,this)}),a&&(a.length||a.nodeType)?this:this.remove()},detach:function(a){return this.remove(a,!0)},domManip:function(a,b){a=e.apply([],a);var c,d,f,g,h,i,j=0,l=this.length,m=this,o=l-1,p=a[0],q=n.isFunction(p);if(q||l>1&&"string"==typeof p&&!k.checkClone&&ea.test(p))return this.each(function(c){var d=m.eq(c);q&&(a[0]=p.call(this,c,d.html())),d.domManip(a,b)});if(l&&(c=n.buildFragment(a,this[0].ownerDocument,!1,this),d=c.firstChild,1===c.childNodes.length&&(c=d),d)){for(f=n.map(oa(c,"script"),ka),g=f.length;l>j;j++)h=c,j!==o&&(h=n.clone(h,!0,!0),g&&n.merge(f,oa(h,"script"))),b.call(this[j],h,j);if(g)for(i=f[f.length-1].ownerDocument,n.map(f,la),j=0;g>j;j++)h=f[j],fa.test(h.type||"")&&!L.access(h,"globalEval")&&n.contains(i,h)&&(h.src?n._evalUrl&&n._evalUrl(h.src):n.globalEval(h.textContent.replace(ha,"")))}return this}}),n.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){n.fn[a]=function(a){for(var c,d=[],e=n(a),g=e.length-1,h=0;g>=h;h++)c=h===g?this:this.clone(!0),n(e[h])[b](c),f.apply(d,c.get());return this.pushStack(d)}});var qa,ra={};function sa(b,c){var d,e=n(c.createElement(b)).appendTo(c.body),f=a.getDefaultComputedStyle&&(d=a.getDefaultComputedStyle(e[0]))?d.display:n.css(e[0],"display");return e.detach(),f}function ta(a){var b=l,c=ra[a];return c||(c=sa(a,b),"none"!==c&&c||(qa=(qa||n("<iframe frameborder='0' width='0' height='0'/>")).appendTo(b.documentElement),b=qa[0].contentDocument,b.write(),b.close(),c=sa(a,b),qa.detach()),ra[a]=c),c}var ua=/^margin/,va=new RegExp("^("+Q+")(?!px)[a-z%]+$","i"),wa=function(b){return b.ownerDocument.defaultView.opener?b.ownerDocument.defaultView.getComputedStyle(b,null):a.getComputedStyle(b,null)};function xa(a,b,c){var d,e,f,g,h=a.style;return c=c||wa(a),c&&(g=c.getPropertyValue(b)||c[b]),c&&(""!==g||n.contains(a.ownerDocument,a)||(g=n.style(a,b)),va.test(g)&&ua.test(b)&&(d=h.width,e=h.minWidth,f=h.maxWidth,h.minWidth=h.maxWidth=h.width=g,g=c.width,h.width=d,h.minWidth=e,h.maxWidth=f)),void 0!==g?g+"":g}function ya(a,b){return{get:function(){return a()?void delete this.get:(this.get=b).apply(this,arguments)}}}!function(){var b,c,d=l.documentElement,e=l.createElement("div"),f=l.createElement("div");if(f.style){f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",k.clearCloneStyle="content-box"===f.style.backgroundClip,e.style.cssText="border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;position:absolute",e.appendChild(f);function g(){f.style.cssText="-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;display:block;margin-top:1%;top:1%;border:1px;padding:1px;width:4px;position:absolute",f.innerHTML="",d.appendChild(e);var g=a.getComputedStyle(f,null);b="1%"!==g.top,c="4px"===g.width,d.removeChild(e)}a.getComputedStyle&&n.extend(k,{pixelPosition:function(){return g(),b},boxSizingReliable:function(){return null==c&&g(),c},reliableMarginRight:function(){var b,c=f.appendChild(l.createElement("div"));return c.style.cssText=f.style.cssText="-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box;display:block;margin:0;border:0;padding:0",c.style.marginRight=c.style.width="0",f.style.width="1px",d.appendChild(e),b=!parseFloat(a.getComputedStyle(c,null).marginRight),d.removeChild(e),f.removeChild(c),b}})}}(),n.swap=function(a,b,c,d){var e,f,g={};for(f in b)g[f]=a.style[f],a.style[f]=b[f];e=c.apply(a,d||[]);for(f in b)a.style[f]=g[f];return e};var za=/^(none|table(?!-c[ea]).+)/,Aa=new RegExp("^("+Q+")(.*)$","i"),Ba=new RegExp("^([+-])=("+Q+")","i"),Ca={position:"absolute",visibility:"hidden",display:"block"},Da={letterSpacing:"0",fontWeight:"400"},Ea=["Webkit","O","Moz","ms"];function Fa(a,b){if(b in a)return b;var c=b[0].toUpperCase()+b.slice(1),d=b,e=Ea.length;while(e--)if(b=Ea[e]+c,b in a)return b;return d}function Ga(a,b,c){var d=Aa.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function Ha(a,b,c,d,e){for(var f=c===(d?"border":"content")?4:"width"===b?1:0,g=0;4>f;f+=2)"margin"===c&&(g+=n.css(a,c+R[f],!0,e)),d?("content"===c&&(g-=n.css(a,"padding"+R[f],!0,e)),"margin"!==c&&(g-=n.css(a,"border"+R[f]+"Width",!0,e))):(g+=n.css(a,"padding"+R[f],!0,e),"padding"!==c&&(g+=n.css(a,"border"+R[f]+"Width",!0,e)));return g}function Ia(a,b,c){var d=!0,e="width"===b?a.offsetWidth:a.offsetHeight,f=wa(a),g="border-box"===n.css(a,"boxSizing",!1,f);if(0>=e||null==e){if(e=xa(a,b,f),(0>e||null==e)&&(e=a.style[b]),va.test(e))return e;d=g&&(k.boxSizingReliable()||e===a.style[b]),e=parseFloat(e)||0}return e+Ha(a,b,c||(g?"border":"content"),d,f)+"px"}function Ja(a,b){for(var c,d,e,f=[],g=0,h=a.length;h>g;g++)d=a[g],d.style&&(f[g]=L.get(d,"olddisplay"),c=d.style.display,b?(f[g]||"none"!==c||(d.style.display=""),""===d.style.display&&S(d)&&(f[g]=L.access(d,"olddisplay",ta(d.nodeName)))):(e=S(d),"none"===c&&e||L.set(d,"olddisplay",e?c:n.css(d,"display"))));for(g=0;h>g;g++)d=a[g],d.style&&(b&&"none"!==d.style.display&&""!==d.style.display||(d.style.display=b?f[g]||"":"none"));return a}n.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=xa(a,"opacity");return""===c?"1":c}}}},cssNumber:{columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":"cssFloat"},style:function(a,b,c,d){if(a&&3!==a.nodeType&&8!==a.nodeType&&a.style){var e,f,g,h=n.camelCase(b),i=a.style;return b=n.cssProps[h]||(n.cssProps[h]=Fa(i,h)),g=n.cssHooks[b]||n.cssHooks[h],void 0===c?g&&"get"in g&&void 0!==(e=g.get(a,!1,d))?e:i[b]:(f=typeof c,"string"===f&&(e=Ba.exec(c))&&(c=(e[1]+1)*e[2]+parseFloat(n.css(a,b)),f="number"),null!=c&&c===c&&("number"!==f||n.cssNumber[h]||(c+="px"),k.clearCloneStyle||""!==c||0!==b.indexOf("background")||(i[b]="inherit"),g&&"set"in g&&void 0===(c=g.set(a,c,d))||(i[b]=c)),void 0)}},css:function(a,b,c,d){var e,f,g,h=n.camelCase(b);return b=n.cssProps[h]||(n.cssProps[h]=Fa(a.style,h)),g=n.cssHooks[b]||n.cssHooks[h],g&&"get"in g&&(e=g.get(a,!0,c)),void 0===e&&(e=xa(a,b,d)),"normal"===e&&b in Da&&(e=Da[b]),""===c||c?(f=parseFloat(e),c===!0||n.isNumeric(f)?f||0:e):e}}),n.each(["height","width"],function(a,b){n.cssHooks[b]={get:function(a,c,d){return c?za.test(n.css(a,"display"))&&0===a.offsetWidth?n.swap(a,Ca,function(){return Ia(a,b,d)}):Ia(a,b,d):void 0},set:function(a,c,d){var e=d&&wa(a);return Ga(a,c,d?Ha(a,b,d,"border-box"===n.css(a,"boxSizing",!1,e),e):0)}}}),n.cssHooks.marginRight=ya(k.reliableMarginRight,function(a,b){return b?n.swap(a,{display:"inline-block"},xa,[a,"marginRight"]):void 0}),n.each({margin:"",padding:"",border:"Width"},function(a,b){n.cssHooks[a+b]={expand:function(c){for(var d=0,e={},f="string"==typeof c?c.split(" "):[c];4>d;d++)e[a+R[d]+b]=f[d]||f[d-2]||f[0];return e}},ua.test(a)||(n.cssHooks[a+b].set=Ga)}),n.fn.extend({css:function(a,b){return J(this,function(a,b,c){var d,e,f={},g=0;if(n.isArray(b)){for(d=wa(a),e=b.length;e>g;g++)f[b[g]]=n.css(a,b[g],!1,d);return f}return void 0!==c?n.style(a,b,c):n.css(a,b)},a,b,arguments.length>1)},show:function(){return Ja(this,!0)},hide:function(){return Ja(this)},toggle:function(a){return"boolean"==typeof a?a?this.show():this.hide():this.each(function(){S(this)?n(this).show():n(this).hide()})}});function Ka(a,b,c,d,e){return new Ka.prototype.init(a,b,c,d,e)}n.Tween=Ka,Ka.prototype={constructor:Ka,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(n.cssNumber[c]?"":"px")},cur:function(){var a=Ka.propHooks[this.prop];return a&&a.get?a.get(this):Ka.propHooks._default.get(this)},run:function(a){var b,c=Ka.propHooks[this.prop];return this.options.duration?this.pos=b=n.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):Ka.propHooks._default.set(this),this}},Ka.prototype.init.prototype=Ka.prototype,Ka.propHooks={_default:{get:function(a){var b;return null==a.elem[a.prop]||a.elem.style&&null!=a.elem.style[a.prop]?(b=n.css(a.elem,a.prop,""),b&&"auto"!==b?b:0):a.elem[a.prop]},set:function(a){n.fx.step[a.prop]?n.fx.step[a.prop](a):a.elem.style&&(null!=a.elem.style[n.cssProps[a.prop]]||n.cssHooks[a.prop])?n.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},Ka.propHooks.scrollTop=Ka.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},n.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},n.fx=Ka.prototype.init,n.fx.step={};var La,Ma,Na=/^(?:toggle|show|hide)$/,Oa=new RegExp("^(?:([+-])=|)("+Q+")([a-z%]*)$","i"),Pa=/queueHooks$/,Qa=[Va],Ra={"*":[function(a,b){var c=this.createTween(a,b),d=c.cur(),e=Oa.exec(b),f=e&&e[3]||(n.cssNumber[a]?"":"px"),g=(n.cssNumber[a]||"px"!==f&&+d)&&Oa.exec(n.css(c.elem,a)),h=1,i=20;if(g&&g[3]!==f){f=f||g[3],e=e||[],g=+d||1;do h=h||".5",g/=h,n.style(c.elem,a,g+f);while(h!==(h=c.cur()/d)&&1!==h&&--i)}return e&&(g=c.start=+g||+d||0,c.unit=f,c.end=e[1]?g+(e[1]+1)*e[2]:+e[2]),c}]};function Sa(){return setTimeout(function(){La=void 0}),La=n.now()}function Ta(a,b){var c,d=0,e={height:a};for(b=b?1:0;4>d;d+=2-b)c=R[d],e["margin"+c]=e["padding"+c]=a;return b&&(e.opacity=e.width=a),e}function Ua(a,b,c){for(var d,e=(Ra[b]||[]).concat(Ra["*"]),f=0,g=e.length;g>f;f++)if(d=e[f].call(c,b,a))return d}function Va(a,b,c){var d,e,f,g,h,i,j,k,l=this,m={},o=a.style,p=a.nodeType&&S(a),q=L.get(a,"fxshow");c.queue||(h=n._queueHooks(a,"fx"),null==h.unqueued&&(h.unqueued=0,i=h.empty.fire,h.empty.fire=function(){h.unqueued||i()}),h.unqueued++,l.always(function(){l.always(function(){h.unqueued--,n.queue(a,"fx").length||h.empty.fire()})})),1===a.nodeType&&("height"in b||"width"in b)&&(c.overflow=[o.overflow,o.overflowX,o.overflowY],j=n.css(a,"display"),k="none"===j?L.get(a,"olddisplay")||ta(a.nodeName):j,"inline"===k&&"none"===n.css(a,"float")&&(o.display="inline-block")),c.overflow&&(o.overflow="hidden",l.always(function(){o.overflow=c.overflow[0],o.overflowX=c.overflow[1],o.overflowY=c.overflow[2]}));for(d in b)if(e=b[d],Na.exec(e)){if(delete b[d],f=f||"toggle"===e,e===(p?"hide":"show")){if("show"!==e||!q||void 0===q[d])continue;p=!0}m[d]=q&&q[d]||n.style(a,d)}else j=void 0;if(n.isEmptyObject(m))"inline"===("none"===j?ta(a.nodeName):j)&&(o.display=j);else{q?"hidden"in q&&(p=q.hidden):q=L.access(a,"fxshow",{}),f&&(q.hidden=!p),p?n(a).show():l.done(function(){n(a).hide()}),l.done(function(){var b;L.remove(a,"fxshow");for(b in m)n.style(a,b,m[b])});for(d in m)g=Ua(p?q[d]:0,d,l),d in q||(q[d]=g.start,p&&(g.end=g.start,g.start="width"===d||"height"===d?1:0))}}function Wa(a,b){var c,d,e,f,g;for(c in a)if(d=n.camelCase(c),e=b[d],f=a[c],n.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=n.cssHooks[d],g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}function Xa(a,b,c){var d,e,f=0,g=Qa.length,h=n.Deferred().always(function(){delete i.elem}),i=function(){if(e)return!1;for(var b=La||Sa(),c=Math.max(0,j.startTime+j.duration-b),d=c/j.duration||0,f=1-d,g=0,i=j.tweens.length;i>g;g++)j.tweens[g].run(f);return h.notifyWith(a,[j,f,c]),1>f&&i?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:n.extend({},b),opts:n.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:La||Sa(),duration:c.duration,tweens:[],createTween:function(b,c){var d=n.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(d),d},stop:function(b){var c=0,d=b?j.tweens.length:0;if(e)return this;for(e=!0;d>c;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;for(Wa(k,j.opts.specialEasing);g>f;f++)if(d=Qa[f].call(j,a,k,j.opts))return d;return n.map(k,Ua,j),n.isFunction(j.opts.start)&&j.opts.start.call(a,j),n.fx.timer(n.extend(i,{elem:a,anim:j,queue:j.opts.queue})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}n.Animation=n.extend(Xa,{tweener:function(a,b){n.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");for(var c,d=0,e=a.length;e>d;d++)c=a[d],Ra[c]=Ra[c]||[],Ra[c].unshift(b)},prefilter:function(a,b){b?Qa.unshift(a):Qa.push(a)}}),n.speed=function(a,b,c){var d=a&&"object"==typeof a?n.extend({},a):{complete:c||!c&&b||n.isFunction(a)&&a,duration:a,easing:c&&b||b&&!n.isFunction(b)&&b};return d.duration=n.fx.off?0:"number"==typeof d.duration?d.duration:d.duration in n.fx.speeds?n.fx.speeds[d.duration]:n.fx.speeds._default,(null==d.queue||d.queue===!0)&&(d.queue="fx"),d.old=d.complete,d.complete=function(){n.isFunction(d.old)&&d.old.call(this),d.queue&&n.dequeue(this,d.queue)},d},n.fn.extend({fadeTo:function(a,b,c,d){return this.filter(S).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=n.isEmptyObject(a),f=n.speed(b,c,d),g=function(){var b=Xa(this,n.extend({},a),f);(e||L.get(this,"finish"))&&b.stop(!0)};return g.finish=g,e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,b,c){var d=function(a){var b=a.stop;delete a.stop,b(c)};return"string"!=typeof a&&(c=b,b=a,a=void 0),b&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,e=null!=a&&a+"queueHooks",f=n.timers,g=L.get(this);if(e)g[e]&&g[e].stop&&d(g[e]);else for(e in g)g[e]&&g[e].stop&&Pa.test(e)&&d(g[e]);for(e=f.length;e--;)f[e].elem!==this||null!=a&&f[e].queue!==a||(f[e].anim.stop(c),b=!1,f.splice(e,1));(b||!c)&&n.dequeue(this,a)})},finish:function(a){return a!==!1&&(a=a||"fx"),this.each(function(){var b,c=L.get(this),d=c[a+"queue"],e=c[a+"queueHooks"],f=n.timers,g=d?d.length:0;for(c.finish=!0,n.queue(this,a,[]),e&&e.stop&&e.stop.call(this,!0),b=f.length;b--;)f[b].elem===this&&f[b].queue===a&&(f[b].anim.stop(!0),f.splice(b,1));for(b=0;g>b;b++)d[b]&&d[b].finish&&d[b].finish.call(this);delete c.finish})}}),n.each(["toggle","show","hide"],function(a,b){var c=n.fn[b];n.fn[b]=function(a,d,e){return null==a||"boolean"==typeof a?c.apply(this,arguments):this.animate(Ta(b,!0),a,d,e)}}),n.each({slideDown:Ta("show"),slideUp:Ta("hide"),slideToggle:Ta("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){n.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),n.timers=[],n.fx.tick=function(){var a,b=0,c=n.timers;for(La=n.now();b<c.length;b++)a=c[b],a()||c[b]!==a||c.splice(b--,1);c.length||n.fx.stop(),La=void 0},n.fx.timer=function(a){n.timers.push(a),a()?n.fx.start():n.timers.pop()},n.fx.interval=13,n.fx.start=function(){Ma||(Ma=setInterval(n.fx.tick,n.fx.interval))},n.fx.stop=function(){clearInterval(Ma),Ma=null},n.fx.speeds={slow:600,fast:200,_default:400},n.fn.delay=function(a,b){return a=n.fx?n.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},function(){var a=l.createElement("input"),b=l.createElement("select"),c=b.appendChild(l.createElement("option"));a.type="checkbox",k.checkOn=""!==a.value,k.optSelected=c.selected,b.disabled=!0,k.optDisabled=!c.disabled,a=l.createElement("input"),a.value="t",a.type="radio",k.radioValue="t"===a.value}();var Ya,Za,$a=n.expr.attrHandle;n.fn.extend({attr:function(a,b){return J(this,n.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){n.removeAttr(this,a)})}}),n.extend({attr:function(a,b,c){var d,e,f=a.nodeType;if(a&&3!==f&&8!==f&&2!==f)return typeof a.getAttribute===U?n.prop(a,b,c):(1===f&&n.isXMLDoc(a)||(b=b.toLowerCase(),d=n.attrHooks[b]||(n.expr.match.bool.test(b)?Za:Ya)),
void 0===c?d&&"get"in d&&null!==(e=d.get(a,b))?e:(e=n.find.attr(a,b),null==e?void 0:e):null!==c?d&&"set"in d&&void 0!==(e=d.set(a,c,b))?e:(a.setAttribute(b,c+""),c):void n.removeAttr(a,b))},removeAttr:function(a,b){var c,d,e=0,f=b&&b.match(E);if(f&&1===a.nodeType)while(c=f[e++])d=n.propFix[c]||c,n.expr.match.bool.test(c)&&(a[d]=!1),a.removeAttribute(c)},attrHooks:{type:{set:function(a,b){if(!k.radioValue&&"radio"===b&&n.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}}}}),Za={set:function(a,b,c){return b===!1?n.removeAttr(a,c):a.setAttribute(c,c),c}},n.each(n.expr.match.bool.source.match(/\w+/g),function(a,b){var c=$a[b]||n.find.attr;$a[b]=function(a,b,d){var e,f;return d||(f=$a[b],$a[b]=e,e=null!=c(a,b,d)?b.toLowerCase():null,$a[b]=f),e}});var _a=/^(?:input|select|textarea|button)$/i;n.fn.extend({prop:function(a,b){return J(this,n.prop,a,b,arguments.length>1)},removeProp:function(a){return this.each(function(){delete this[n.propFix[a]||a]})}}),n.extend({propFix:{"for":"htmlFor","class":"className"},prop:function(a,b,c){var d,e,f,g=a.nodeType;if(a&&3!==g&&8!==g&&2!==g)return f=1!==g||!n.isXMLDoc(a),f&&(b=n.propFix[b]||b,e=n.propHooks[b]),void 0!==c?e&&"set"in e&&void 0!==(d=e.set(a,c,b))?d:a[b]=c:e&&"get"in e&&null!==(d=e.get(a,b))?d:a[b]},propHooks:{tabIndex:{get:function(a){return a.hasAttribute("tabindex")||_a.test(a.nodeName)||a.href?a.tabIndex:-1}}}}),k.optSelected||(n.propHooks.selected={get:function(a){var b=a.parentNode;return b&&b.parentNode&&b.parentNode.selectedIndex,null}}),n.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){n.propFix[this.toLowerCase()]=this});var ab=/[\t\r\n\f]/g;n.fn.extend({addClass:function(a){var b,c,d,e,f,g,h="string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).addClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):" ")){f=0;while(e=b[f++])d.indexOf(" "+e+" ")<0&&(d+=e+" ");g=n.trim(d),c.className!==g&&(c.className=g)}return this},removeClass:function(a){var b,c,d,e,f,g,h=0===arguments.length||"string"==typeof a&&a,i=0,j=this.length;if(n.isFunction(a))return this.each(function(b){n(this).removeClass(a.call(this,b,this.className))});if(h)for(b=(a||"").match(E)||[];j>i;i++)if(c=this[i],d=1===c.nodeType&&(c.className?(" "+c.className+" ").replace(ab," "):"")){f=0;while(e=b[f++])while(d.indexOf(" "+e+" ")>=0)d=d.replace(" "+e+" "," ");g=a?n.trim(d):"",c.className!==g&&(c.className=g)}return this},toggleClass:function(a,b){var c=typeof a;return"boolean"==typeof b&&"string"===c?b?this.addClass(a):this.removeClass(a):this.each(n.isFunction(a)?function(c){n(this).toggleClass(a.call(this,c,this.className,b),b)}:function(){if("string"===c){var b,d=0,e=n(this),f=a.match(E)||[];while(b=f[d++])e.hasClass(b)?e.removeClass(b):e.addClass(b)}else(c===U||"boolean"===c)&&(this.className&&L.set(this,"__className__",this.className),this.className=this.className||a===!1?"":L.get(this,"__className__")||"")})},hasClass:function(a){for(var b=" "+a+" ",c=0,d=this.length;d>c;c++)if(1===this[c].nodeType&&(" "+this[c].className+" ").replace(ab," ").indexOf(b)>=0)return!0;return!1}});var bb=/\r/g;n.fn.extend({val:function(a){var b,c,d,e=this[0];{if(arguments.length)return d=n.isFunction(a),this.each(function(c){var e;1===this.nodeType&&(e=d?a.call(this,c,n(this).val()):a,null==e?e="":"number"==typeof e?e+="":n.isArray(e)&&(e=n.map(e,function(a){return null==a?"":a+""})),b=n.valHooks[this.type]||n.valHooks[this.nodeName.toLowerCase()],b&&"set"in b&&void 0!==b.set(this,e,"value")||(this.value=e))});if(e)return b=n.valHooks[e.type]||n.valHooks[e.nodeName.toLowerCase()],b&&"get"in b&&void 0!==(c=b.get(e,"value"))?c:(c=e.value,"string"==typeof c?c.replace(bb,""):null==c?"":c)}}}),n.extend({valHooks:{option:{get:function(a){var b=n.find.attr(a,"value");return null!=b?b:n.trim(n.text(a))}},select:{get:function(a){for(var b,c,d=a.options,e=a.selectedIndex,f="select-one"===a.type||0>e,g=f?null:[],h=f?e+1:d.length,i=0>e?h:f?e:0;h>i;i++)if(c=d[i],!(!c.selected&&i!==e||(k.optDisabled?c.disabled:null!==c.getAttribute("disabled"))||c.parentNode.disabled&&n.nodeName(c.parentNode,"optgroup"))){if(b=n(c).val(),f)return b;g.push(b)}return g},set:function(a,b){var c,d,e=a.options,f=n.makeArray(b),g=e.length;while(g--)d=e[g],(d.selected=n.inArray(d.value,f)>=0)&&(c=!0);return c||(a.selectedIndex=-1),f}}}}),n.each(["radio","checkbox"],function(){n.valHooks[this]={set:function(a,b){return n.isArray(b)?a.checked=n.inArray(n(a).val(),b)>=0:void 0}},k.checkOn||(n.valHooks[this].get=function(a){return null===a.getAttribute("value")?"on":a.value})}),n.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){n.fn[b]=function(a,c){return arguments.length>0?this.on(b,null,a,c):this.trigger(b)}}),n.fn.extend({hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return 1===arguments.length?this.off(a,"**"):this.off(b,a||"**",c)}});var cb=n.now(),db=/\?/;n.parseJSON=function(a){return JSON.parse(a+"")},n.parseXML=function(a){var b,c;if(!a||"string"!=typeof a)return null;try{c=new DOMParser,b=c.parseFromString(a,"text/xml")}catch(d){b=void 0}return(!b||b.getElementsByTagName("parsererror").length)&&n.error("Invalid XML: "+a),b};var eb=/#.*$/,fb=/([?&])_=[^&]*/,gb=/^(.*?):[ \t]*([^\r\n]*)$/gm,hb=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,ib=/^(?:GET|HEAD)$/,jb=/^\/\//,kb=/^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,lb={},mb={},nb="*/".concat("*"),ob=a.location.href,pb=kb.exec(ob.toLowerCase())||[];function qb(a){return function(b,c){"string"!=typeof b&&(c=b,b="*");var d,e=0,f=b.toLowerCase().match(E)||[];if(n.isFunction(c))while(d=f[e++])"+"===d[0]?(d=d.slice(1)||"*",(a[d]=a[d]||[]).unshift(c)):(a[d]=a[d]||[]).push(c)}}function rb(a,b,c,d){var e={},f=a===mb;function g(h){var i;return e[h]=!0,n.each(a[h]||[],function(a,h){var j=h(b,c,d);return"string"!=typeof j||f||e[j]?f?!(i=j):void 0:(b.dataTypes.unshift(j),g(j),!1)}),i}return g(b.dataTypes[0])||!e["*"]&&g("*")}function sb(a,b){var c,d,e=n.ajaxSettings.flatOptions||{};for(c in b)void 0!==b[c]&&((e[c]?a:d||(d={}))[c]=b[c]);return d&&n.extend(!0,a,d),a}function tb(a,b,c){var d,e,f,g,h=a.contents,i=a.dataTypes;while("*"===i[0])i.shift(),void 0===d&&(d=a.mimeType||b.getResponseHeader("Content-Type"));if(d)for(e in h)if(h[e]&&h[e].test(d)){i.unshift(e);break}if(i[0]in c)f=i[0];else{for(e in c){if(!i[0]||a.converters[e+" "+i[0]]){f=e;break}g||(g=e)}f=f||g}return f?(f!==i[0]&&i.unshift(f),c[f]):void 0}function ub(a,b,c,d){var e,f,g,h,i,j={},k=a.dataTypes.slice();if(k[1])for(g in a.converters)j[g.toLowerCase()]=a.converters[g];f=k.shift();while(f)if(a.responseFields[f]&&(c[a.responseFields[f]]=b),!i&&d&&a.dataFilter&&(b=a.dataFilter(b,a.dataType)),i=f,f=k.shift())if("*"===f)f=i;else if("*"!==i&&i!==f){if(g=j[i+" "+f]||j["* "+f],!g)for(e in j)if(h=e.split(" "),h[1]===f&&(g=j[i+" "+h[0]]||j["* "+h[0]])){g===!0?g=j[e]:j[e]!==!0&&(f=h[0],k.unshift(h[1]));break}if(g!==!0)if(g&&a["throws"])b=g(b);else try{b=g(b)}catch(l){return{state:"parsererror",error:g?l:"No conversion from "+i+" to "+f}}}return{state:"success",data:b}}n.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ob,type:"GET",isLocal:hb.test(pb[1]),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":nb,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":n.parseJSON,"text xml":n.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(a,b){return b?sb(sb(a,n.ajaxSettings),b):sb(n.ajaxSettings,a)},ajaxPrefilter:qb(lb),ajaxTransport:qb(mb),ajax:function(a,b){"object"==typeof a&&(b=a,a=void 0),b=b||{};var c,d,e,f,g,h,i,j,k=n.ajaxSetup({},b),l=k.context||k,m=k.context&&(l.nodeType||l.jquery)?n(l):n.event,o=n.Deferred(),p=n.Callbacks("once memory"),q=k.statusCode||{},r={},s={},t=0,u="canceled",v={readyState:0,getResponseHeader:function(a){var b;if(2===t){if(!f){f={};while(b=gb.exec(e))f[b[1].toLowerCase()]=b[2]}b=f[a.toLowerCase()]}return null==b?null:b},getAllResponseHeaders:function(){return 2===t?e:null},setRequestHeader:function(a,b){var c=a.toLowerCase();return t||(a=s[c]=s[c]||a,r[a]=b),this},overrideMimeType:function(a){return t||(k.mimeType=a),this},statusCode:function(a){var b;if(a)if(2>t)for(b in a)q[b]=[q[b],a[b]];else v.always(a[v.status]);return this},abort:function(a){var b=a||u;return c&&c.abort(b),x(0,b),this}};if(o.promise(v).complete=p.add,v.success=v.done,v.error=v.fail,k.url=((a||k.url||ob)+"").replace(eb,"").replace(jb,pb[1]+"//"),k.type=b.method||b.type||k.method||k.type,k.dataTypes=n.trim(k.dataType||"*").toLowerCase().match(E)||[""],null==k.crossDomain&&(h=kb.exec(k.url.toLowerCase()),k.crossDomain=!(!h||h[1]===pb[1]&&h[2]===pb[2]&&(h[3]||("http:"===h[1]?"80":"443"))===(pb[3]||("http:"===pb[1]?"80":"443")))),k.data&&k.processData&&"string"!=typeof k.data&&(k.data=n.param(k.data,k.traditional)),rb(lb,k,b,v),2===t)return v;i=n.event&&k.global,i&&0===n.active++&&n.event.trigger("ajaxStart"),k.type=k.type.toUpperCase(),k.hasContent=!ib.test(k.type),d=k.url,k.hasContent||(k.data&&(d=k.url+=(db.test(d)?"&":"?")+k.data,delete k.data),k.cache===!1&&(k.url=fb.test(d)?d.replace(fb,"$1_="+cb++):d+(db.test(d)?"&":"?")+"_="+cb++)),k.ifModified&&(n.lastModified[d]&&v.setRequestHeader("If-Modified-Since",n.lastModified[d]),n.etag[d]&&v.setRequestHeader("If-None-Match",n.etag[d])),(k.data&&k.hasContent&&k.contentType!==!1||b.contentType)&&v.setRequestHeader("Content-Type",k.contentType),v.setRequestHeader("Accept",k.dataTypes[0]&&k.accepts[k.dataTypes[0]]?k.accepts[k.dataTypes[0]]+("*"!==k.dataTypes[0]?", "+nb+"; q=0.01":""):k.accepts["*"]);for(j in k.headers)v.setRequestHeader(j,k.headers[j]);if(k.beforeSend&&(k.beforeSend.call(l,v,k)===!1||2===t))return v.abort();u="abort";for(j in{success:1,error:1,complete:1})v[j](k[j]);if(c=rb(mb,k,b,v)){v.readyState=1,i&&m.trigger("ajaxSend",[v,k]),k.async&&k.timeout>0&&(g=setTimeout(function(){v.abort("timeout")},k.timeout));try{t=1,c.send(r,x)}catch(w){if(!(2>t))throw w;x(-1,w)}}else x(-1,"No Transport");function x(a,b,f,h){var j,r,s,u,w,x=b;2!==t&&(t=2,g&&clearTimeout(g),c=void 0,e=h||"",v.readyState=a>0?4:0,j=a>=200&&300>a||304===a,f&&(u=tb(k,v,f)),u=ub(k,u,v,j),j?(k.ifModified&&(w=v.getResponseHeader("Last-Modified"),w&&(n.lastModified[d]=w),w=v.getResponseHeader("etag"),w&&(n.etag[d]=w)),204===a||"HEAD"===k.type?x="nocontent":304===a?x="notmodified":(x=u.state,r=u.data,s=u.error,j=!s)):(s=x,(a||!x)&&(x="error",0>a&&(a=0))),v.status=a,v.statusText=(b||x)+"",j?o.resolveWith(l,[r,x,v]):o.rejectWith(l,[v,x,s]),v.statusCode(q),q=void 0,i&&m.trigger(j?"ajaxSuccess":"ajaxError",[v,k,j?r:s]),p.fireWith(l,[v,x]),i&&(m.trigger("ajaxComplete",[v,k]),--n.active||n.event.trigger("ajaxStop")))}return v},getJSON:function(a,b,c){return n.get(a,b,c,"json")},getScript:function(a,b){return n.get(a,void 0,b,"script")}}),n.each(["get","post"],function(a,b){n[b]=function(a,c,d,e){return n.isFunction(c)&&(e=e||d,d=c,c=void 0),n.ajax({url:a,type:b,dataType:e,data:c,success:d})}}),n._evalUrl=function(a){return n.ajax({url:a,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0})},n.fn.extend({wrapAll:function(a){var b;return n.isFunction(a)?this.each(function(b){n(this).wrapAll(a.call(this,b))}):(this[0]&&(b=n(a,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstElementChild)a=a.firstElementChild;return a}).append(this)),this)},wrapInner:function(a){return this.each(n.isFunction(a)?function(b){n(this).wrapInner(a.call(this,b))}:function(){var b=n(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=n.isFunction(a);return this.each(function(c){n(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){n.nodeName(this,"body")||n(this).replaceWith(this.childNodes)}).end()}}),n.expr.filters.hidden=function(a){return a.offsetWidth<=0&&a.offsetHeight<=0},n.expr.filters.visible=function(a){return!n.expr.filters.hidden(a)};var vb=/%20/g,wb=/\[\]$/,xb=/\r?\n/g,yb=/^(?:submit|button|image|reset|file)$/i,zb=/^(?:input|select|textarea|keygen)/i;function Ab(a,b,c,d){var e;if(n.isArray(b))n.each(b,function(b,e){c||wb.test(a)?d(a,e):Ab(a+"["+("object"==typeof e?b:"")+"]",e,c,d)});else if(c||"object"!==n.type(b))d(a,b);else for(e in b)Ab(a+"["+e+"]",b[e],c,d)}n.param=function(a,b){var c,d=[],e=function(a,b){b=n.isFunction(b)?b():null==b?"":b,d[d.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};if(void 0===b&&(b=n.ajaxSettings&&n.ajaxSettings.traditional),n.isArray(a)||a.jquery&&!n.isPlainObject(a))n.each(a,function(){e(this.name,this.value)});else for(c in a)Ab(c,a[c],b,e);return d.join("&").replace(vb,"+")},n.fn.extend({serialize:function(){return n.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var a=n.prop(this,"elements");return a?n.makeArray(a):this}).filter(function(){var a=this.type;return this.name&&!n(this).is(":disabled")&&zb.test(this.nodeName)&&!yb.test(a)&&(this.checked||!T.test(a))}).map(function(a,b){var c=n(this).val();return null==c?null:n.isArray(c)?n.map(c,function(a){return{name:b.name,value:a.replace(xb,"\r\n")}}):{name:b.name,value:c.replace(xb,"\r\n")}}).get()}}),n.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(a){}};var Bb=0,Cb={},Db={0:200,1223:204},Eb=n.ajaxSettings.xhr();a.attachEvent&&a.attachEvent("onunload",function(){for(var a in Cb)Cb[a]()}),k.cors=!!Eb&&"withCredentials"in Eb,k.ajax=Eb=!!Eb,n.ajaxTransport(function(a){var b;return k.cors||Eb&&!a.crossDomain?{send:function(c,d){var e,f=a.xhr(),g=++Bb;if(f.open(a.type,a.url,a.async,a.username,a.password),a.xhrFields)for(e in a.xhrFields)f[e]=a.xhrFields[e];a.mimeType&&f.overrideMimeType&&f.overrideMimeType(a.mimeType),a.crossDomain||c["X-Requested-With"]||(c["X-Requested-With"]="XMLHttpRequest");for(e in c)f.setRequestHeader(e,c[e]);b=function(a){return function(){b&&(delete Cb[g],b=f.onload=f.onerror=null,"abort"===a?f.abort():"error"===a?d(f.status,f.statusText):d(Db[f.status]||f.status,f.statusText,"string"==typeof f.responseText?{text:f.responseText}:void 0,f.getAllResponseHeaders()))}},f.onload=b(),f.onerror=b("error"),b=Cb[g]=b("abort");try{f.send(a.hasContent&&a.data||null)}catch(h){if(b)throw h}},abort:function(){b&&b()}}:void 0}),n.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/(?:java|ecma)script/},converters:{"text script":function(a){return n.globalEval(a),a}}}),n.ajaxPrefilter("script",function(a){void 0===a.cache&&(a.cache=!1),a.crossDomain&&(a.type="GET")}),n.ajaxTransport("script",function(a){if(a.crossDomain){var b,c;return{send:function(d,e){b=n("<script>").prop({async:!0,charset:a.scriptCharset,src:a.url}).on("load error",c=function(a){b.remove(),c=null,a&&e("error"===a.type?404:200,a.type)}),l.head.appendChild(b[0])},abort:function(){c&&c()}}}});var Fb=[],Gb=/(=)\?(?=&|$)|\?\?/;n.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=Fb.pop()||n.expando+"_"+cb++;return this[a]=!0,a}}),n.ajaxPrefilter("json jsonp",function(b,c,d){var e,f,g,h=b.jsonp!==!1&&(Gb.test(b.url)?"url":"string"==typeof b.data&&!(b.contentType||"").indexOf("application/x-www-form-urlencoded")&&Gb.test(b.data)&&"data");return h||"jsonp"===b.dataTypes[0]?(e=b.jsonpCallback=n.isFunction(b.jsonpCallback)?b.jsonpCallback():b.jsonpCallback,h?b[h]=b[h].replace(Gb,"$1"+e):b.jsonp!==!1&&(b.url+=(db.test(b.url)?"&":"?")+b.jsonp+"="+e),b.converters["script json"]=function(){return g||n.error(e+" was not called"),g[0]},b.dataTypes[0]="json",f=a[e],a[e]=function(){g=arguments},d.always(function(){a[e]=f,b[e]&&(b.jsonpCallback=c.jsonpCallback,Fb.push(e)),g&&n.isFunction(f)&&f(g[0]),g=f=void 0}),"script"):void 0}),n.parseHTML=function(a,b,c){if(!a||"string"!=typeof a)return null;"boolean"==typeof b&&(c=b,b=!1),b=b||l;var d=v.exec(a),e=!c&&[];return d?[b.createElement(d[1])]:(d=n.buildFragment([a],b,e),e&&e.length&&n(e).remove(),n.merge([],d.childNodes))};var Hb=n.fn.load;n.fn.load=function(a,b,c){if("string"!=typeof a&&Hb)return Hb.apply(this,arguments);var d,e,f,g=this,h=a.indexOf(" ");return h>=0&&(d=n.trim(a.slice(h)),a=a.slice(0,h)),n.isFunction(b)?(c=b,b=void 0):b&&"object"==typeof b&&(e="POST"),g.length>0&&n.ajax({url:a,type:e,dataType:"html",data:b}).done(function(a){f=arguments,g.html(d?n("<div>").append(n.parseHTML(a)).find(d):a)}).complete(c&&function(a,b){g.each(c,f||[a.responseText,b,a])}),this},n.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(a,b){n.fn[b]=function(a){return this.on(b,a)}}),n.expr.filters.animated=function(a){return n.grep(n.timers,function(b){return a===b.elem}).length};var Ib=a.document.documentElement;function Jb(a){return n.isWindow(a)?a:9===a.nodeType&&a.defaultView}n.offset={setOffset:function(a,b,c){var d,e,f,g,h,i,j,k=n.css(a,"position"),l=n(a),m={};"static"===k&&(a.style.position="relative"),h=l.offset(),f=n.css(a,"top"),i=n.css(a,"left"),j=("absolute"===k||"fixed"===k)&&(f+i).indexOf("auto")>-1,j?(d=l.position(),g=d.top,e=d.left):(g=parseFloat(f)||0,e=parseFloat(i)||0),n.isFunction(b)&&(b=b.call(a,c,h)),null!=b.top&&(m.top=b.top-h.top+g),null!=b.left&&(m.left=b.left-h.left+e),"using"in b?b.using.call(a,m):l.css(m)}},n.fn.extend({offset:function(a){if(arguments.length)return void 0===a?this:this.each(function(b){n.offset.setOffset(this,a,b)});var b,c,d=this[0],e={top:0,left:0},f=d&&d.ownerDocument;if(f)return b=f.documentElement,n.contains(b,d)?(typeof d.getBoundingClientRect!==U&&(e=d.getBoundingClientRect()),c=Jb(f),{top:e.top+c.pageYOffset-b.clientTop,left:e.left+c.pageXOffset-b.clientLeft}):e},position:function(){if(this[0]){var a,b,c=this[0],d={top:0,left:0};return"fixed"===n.css(c,"position")?b=c.getBoundingClientRect():(a=this.offsetParent(),b=this.offset(),n.nodeName(a[0],"html")||(d=a.offset()),d.top+=n.css(a[0],"borderTopWidth",!0),d.left+=n.css(a[0],"borderLeftWidth",!0)),{top:b.top-d.top-n.css(c,"marginTop",!0),left:b.left-d.left-n.css(c,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||Ib;while(a&&!n.nodeName(a,"html")&&"static"===n.css(a,"position"))a=a.offsetParent;return a||Ib})}}),n.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(b,c){var d="pageYOffset"===c;n.fn[b]=function(e){return J(this,function(b,e,f){var g=Jb(b);return void 0===f?g?g[c]:b[e]:void(g?g.scrollTo(d?a.pageXOffset:f,d?f:a.pageYOffset):b[e]=f)},b,e,arguments.length,null)}}),n.each(["top","left"],function(a,b){n.cssHooks[b]=ya(k.pixelPosition,function(a,c){return c?(c=xa(a,b),va.test(c)?n(a).position()[b]+"px":c):void 0})}),n.each({Height:"height",Width:"width"},function(a,b){n.each({padding:"inner"+a,content:b,"":"outer"+a},function(c,d){n.fn[d]=function(d,e){var f=arguments.length&&(c||"boolean"!=typeof d),g=c||(d===!0||e===!0?"margin":"border");return J(this,function(b,c,d){var e;return n.isWindow(b)?b.document.documentElement["client"+a]:9===b.nodeType?(e=b.documentElement,Math.max(b.body["scroll"+a],e["scroll"+a],b.body["offset"+a],e["offset"+a],e["client"+a])):void 0===d?n.css(b,c,g):n.style(b,c,d,g)},b,f?d:void 0,f,null)}})}),n.fn.size=function(){return this.length},n.fn.andSelf=n.fn.addBack,"function"==typeof define&&define.amd&&define("jquery",[],function(){return n});var Kb=a.jQuery,Lb=a.$;return n.noConflict=function(b){return a.$===n&&(a.$=Lb),b&&a.jQuery===n&&(a.jQuery=Kb),n},typeof b===U&&(a.jQuery=a.$=n),n});
//# sourceMappingURL=jquery.min.map
/*
Class make plugin like NHN jindo
parameter 로 넘겨진 JSON 을 member 로 가지는 Class 를 생성

@author 최승학
@version 1.0
@since version 1.0

@requires jQuery

@example

// 상속
;(function($){
	// var Mother = jindo.$Class({
	var Mother = $.Class({
		$init : function(){
			this.name = "mother";
		},
		methodA : function(){
			console.log("mother's methodA");
			console.log("mother name = " + this.name);
			this.methodB();
		},
		methodB : function(){
			console.log("mother's methodB");
		}
	});

	// var Son = jindo.$Class({
	var Son = $.Class({
		$init : function(){
			// this.name = "son"
		},
		methodA : function(){
			console.log("son's methodA");
			console.log("son name = " + this.name);
			this.$super.methodA();
		}
	}).extend(Mother);
	
	var Son2 = $.Class({
		$init : function(){
			// this.name = "son2";
		},
		methodA : function(){
			console.log("son2's methodA");
			console.log("son2 name = " + this.name);
			this.$super.methodA();
		},
		methodB : function(){
			console.log("son2's methodB");
		}
	}).extend(Son);
	
	var oSon = new Son2();
	oSon.methodA();
	// ※ jQuery Class result
	// son2's methodA
	// son2 name = mother
	// son's methodA
	// son name = mother
	// mother's methodA
	// mother name = mother
	// son2's methodB


	// ※ jindo result
	// son2's methodA
	// son2 name = mother
	// son's methodA
	// son name = undefined
	// mother's methodA
	// mother name = mother
	// son2's methodB


	// ※ java Class result
	// son2's methodA
	// son2 name = mother
	// son's methodA
	// son name = mother
	// mother's methodA
	// mother name = mother
	// son2's methodB
})(jQuery);

// java 상속 결과 test source 참고
class Mother{
	String name = "";

	public Mother(){
		this.name = "mother";
	}

	public void methodA(){
		System.out.println("mother's methodA");
		System.out.println("mother name = " + this.name);
		methodB();
	}

	public void methodB(){
		System.out.println("mother's methodB");
	}
}

class Son extends Mother{
	public Son(){
		// init
	}

	public void methodA(){
		System.out.println("son's methodA");
		System.out.println("son name = " + this.name);
		super.methodA();
	}
}

class Son2 extends Son{
	public Son2(){
		// init
	}

	public void methodA(){
		System.out.println("son2's methodA");
		System.out.println("son2 name = " + this.name);
		super.methodA();
	}

	public void methodB(){
		System.out.println("son2's methodB");
	}
}

class Inheritance{
	public static void main(String[] args){
		Son2 oSon = new Son2();
		oSon.methodA();
	}
}

// trigger custom function
;(function($){
	var TriggerTest = $.Class({
		$init : function(htParam){
			this.option = htParam;
		},
		methodA : function(){
			this._trigger(this.option.printAge);
		},
	});

	var oTriggerTest = new TriggerTest({
		"nAge" : 18,
		"printAge" : function(){
			console.log(this.option.nAge);
		}
	});
	
	// 18
	oTriggerTest.methodA();
})(jQuery);
*/
(function($, window, document, undefined){
	"use strict";
	// Class 생성 plugin Name
	var sPluginName = 'Class',
		// extend handle
		oExtendHandle = {
			// 상속
			// prototype 만 상속
			// property 는 불 필요한 것 같아 구현 안했다
			extend : function(SuperClass){
				this.prototype = this.copySuperPrototype(SuperClass);
				this.prototype.$super = SuperClass;

				return this;
			},
			// copy super Class prototype member
			copySuperPrototype : function(SuperClass){
				var oExtendedPrototype = {};

				$.extend(true,
					oExtendedPrototype,
					SuperClass.prototype,
					// super 로 부터 상속 하지 않을 속성
					{
						"$init" : null,
						"$super" : null,
						"constructor" : null
					},
					// this prototype 으로 overwrite
					this.prototype
				);

				return oExtendedPrototype;
			}
		},
		// super class handle
		oSuperClassHandle = {
			// redefine super class member
			redefineSuperMember : function(oInstance, aClassHasSuper){
				var ClassHasSuper = oInstance;

				while(ClassHasSuper.$super !== undefined){
					ClassHasSuper.$super = this.getNewSuperMember(
						ClassHasSuper.$super);
					
					// 모든 상속 chain 의 method 실행 결과는 this 에 반영된다.
					// this = 현재 instance
					ClassHasSuper.$super.$this = oInstance;

					aClassHasSuper.push(ClassHasSuper);

					// 상위 Class 를 계속 loop
					ClassHasSuper = ClassHasSuper.$super;
				}
			},
			// get redefined super member
			getNewSuperMember : function(SuperClass){
				var oNewSuper = {},
					oSuperPrototype = SuperClass.prototype,
					varMember = null;

				for(var sKey in oSuperPrototype){
					if(oSuperPrototype.hasOwnProperty(sKey)) {
						varMember = oSuperPrototype[sKey];
						
						if(!oSuperPrototype.hasOwnProperty(sKey)){
							continue;
						}
	
						if(this.isPassRedefine(sKey)){
							oNewSuper[sKey] = varMember;
							continue;
						}
	
						if(typeof varMember === "function"){
							oNewSuper[sKey] = this.redefineSuperMethod(
								sKey, varMember);
							continue;
						}
	
						oNewSuper[sKey] = varMember;
					}
				}

				return oNewSuper;
			},
			isPassRedefine : function(sKey){
				var htPassKey = {
					"constructor" : 1,
					"$super" : 1
				};

				if(htPassKey[sKey]){
					return true;
				}

				return false;
			},
			// redefine super method
			// chnage context to child instance
			redefineSuperMethod : function(sSuperMethod, fSuperMethod){
				// this = super class
				return function(){
					var oChild = this.$this,
						oChildBackup = {
							"super" : oChild.$super,
							"method" : oChild[sSuperMethod]
						},
						result = "";

					oSuperClassHandle.changeChildMethod({
						"oSuper" : this,
						"oChild" : oChild,
						"sSuperMethod" : sSuperMethod,
						"fSuperMethod" : fSuperMethod
					});

					// child context 로 super method 실행
					result = fSuperMethod.apply(oChild, arguments);

					oSuperClassHandle.restoreChildMethod({
						"oChild" : oChild,
						"sSuperMethod" : sSuperMethod,
						"oChildBackup" : oChildBackup
					});

					return result;
				};
			},
			// change child method to super method
			changeChildMethod : function(htParam){
				var oSuper = htParam.oSuper,
					oChild = htParam.oChild,
					sSuperMethod = htParam.sSuperMethod,
					fSuperMethod = htParam.fSuperMethod;

				// child 의 method 를 실행 될 super method 로 교체
				// 재귀 함수 호출을 위한 처리
				oChild[sSuperMethod] = fSuperMethod;
				
				// child 의 $super 를 교체
				// 실행된 method 에서 호출한 super 는 super Class 가 상속한
				// 직속 상위 Class 가 된다.
				oChild.$super = oSuper.$super;
			},
			// restore child method
			restoreChildMethod : function(htParam){
				var oChild = htParam.oChild,
					sSuperMethod = htParam.sSuperMethod,
					oChildBackup = htParam.oChildBackup;

				oChild[sSuperMethod] = oChildBackup.method;
				oChild.$super = oChildBackup["super"];
			},
			// run all super class $init()
			runSuperInit : function(aClassHasSuper, oArguments){
				var nLength = aClassHasSuper.length,
					SuperClass = null;
				
				while(nLength){
					nLength -= 1;
					SuperClass = aClassHasSuper[nLength].$super;

					if (typeof SuperClass.$init !== "function"){
						continue;
					}

					SuperClass.$init.apply(SuperClass, oArguments);
				}
			}
		},
		oAttachToPrototype = {
			/**
			 * context 를 instance 로 사용자 함수 실행
			 *
			 * @param {Function}	fnMethod	실행 할 함수
			 * @param {HashTable}	htParam		함수에 전달 될 parameter
			 */
			_trigger : function(fnMethod, htParam){
				if(!fnMethod){
					return false;
				}

				fnMethod.apply(this, [htParam]);
			},
			// option controll (get, set, expend)
			option : function(key, value){
				// all option
				if("undefined" === key){
					return this.htOption || {};
				}
				// set
				if(typeof value !== "undefined"){
					this.htOption[key] = value;
					return value;
				}
				// get
				if(typeof key === "string"){
					return this.htOption[key];
				}
				// extend
				$.extend(this.htOption, key);
			}
		};

	$[sPluginName] = function(htMember){
		// The actual Class constructor
		function Class(){
			var aClassHasSuper = [];

			this.htOption = {};

			// super class 의 member 재정의
			oSuperClassHandle.redefineSuperMember(this, aClassHasSuper);

			// super class 의 모든 init 을 실행 한다.
			oSuperClassHandle.runSuperInit(aClassHasSuper, arguments);

			if(typeof this.$init === "function"){
				this.$init.apply(this, arguments);
			}
		}

		$.extend(Class, oExtendHandle);

		Class.prototype = $.extend(htMember, oAttachToPrototype);
		Class.prototype.constructor = Class;

		return Class;
	};
})(jQuery, window, document);
// */

//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.
(function(){function n(n){function t(t,r,e,u,i,o){for(;i>=0&&o>i;i+=n){var a=u?u[i]:i;e=r(e,t[a],a,t)}return e}return function(r,e,u,i){e=b(e,i,4);var o=!k(r)&&m.keys(r),a=(o||r).length,c=n>0?0:a-1;return arguments.length<3&&(u=r[o?o[c]:c],c+=n),t(r,e,u,o,c,a)}}function t(n){return function(t,r,e){r=x(r,e);for(var u=O(t),i=n>0?0:u-1;i>=0&&u>i;i+=n)if(r(t[i],i,t))return i;return-1}}function r(n,t,r){return function(e,u,i){var o=0,a=O(e);if("number"==typeof i)n>0?o=i>=0?i:Math.max(i+a,o):a=i>=0?Math.min(i+1,a):i+a+1;else if(r&&i&&a)return i=r(e,u),e[i]===u?i:-1;if(u!==u)return i=t(l.call(e,o,a),m.isNaN),i>=0?i+o:-1;for(i=n>0?o:a-1;i>=0&&a>i;i+=n)if(e[i]===u)return i;return-1}}function e(n,t){var r=I.length,e=n.constructor,u=m.isFunction(e)&&e.prototype||a,i="constructor";for(m.has(n,i)&&!m.contains(t,i)&&t.push(i);r--;)i=I[r],i in n&&n[i]!==u[i]&&!m.contains(t,i)&&t.push(i)}var u=this,i=u._,o=Array.prototype,a=Object.prototype,c=Function.prototype,f=o.push,l=o.slice,s=a.toString,p=a.hasOwnProperty,h=Array.isArray,v=Object.keys,g=c.bind,y=Object.create,d=function(){},m=function(n){return n instanceof m?n:this instanceof m?void(this._wrapped=n):new m(n)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=m),exports._=m):u._=m,m.VERSION="1.8.3";var b=function(n,t,r){if(t===void 0)return n;switch(null==r?3:r){case 1:return function(r){return n.call(t,r)};case 2:return function(r,e){return n.call(t,r,e)};case 3:return function(r,e,u){return n.call(t,r,e,u)};case 4:return function(r,e,u,i){return n.call(t,r,e,u,i)}}return function(){return n.apply(t,arguments)}},x=function(n,t,r){return null==n?m.identity:m.isFunction(n)?b(n,t,r):m.isObject(n)?m.matcher(n):m.property(n)};m.iteratee=function(n,t){return x(n,t,1/0)};var _=function(n,t){return function(r){var e=arguments.length;if(2>e||null==r)return r;for(var u=1;e>u;u++)for(var i=arguments[u],o=n(i),a=o.length,c=0;a>c;c++){var f=o[c];t&&r[f]!==void 0||(r[f]=i[f])}return r}},j=function(n){if(!m.isObject(n))return{};if(y)return y(n);d.prototype=n;var t=new d;return d.prototype=null,t},w=function(n){return function(t){return null==t?void 0:t[n]}},A=Math.pow(2,53)-1,O=w("length"),k=function(n){var t=O(n);return"number"==typeof t&&t>=0&&A>=t};m.each=m.forEach=function(n,t,r){t=b(t,r);var e,u;if(k(n))for(e=0,u=n.length;u>e;e++)t(n[e],e,n);else{var i=m.keys(n);for(e=0,u=i.length;u>e;e++)t(n[i[e]],i[e],n)}return n},m.map=m.collect=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=Array(u),o=0;u>o;o++){var a=e?e[o]:o;i[o]=t(n[a],a,n)}return i},m.reduce=m.foldl=m.inject=n(1),m.reduceRight=m.foldr=n(-1),m.find=m.detect=function(n,t,r){var e;return e=k(n)?m.findIndex(n,t,r):m.findKey(n,t,r),e!==void 0&&e!==-1?n[e]:void 0},m.filter=m.select=function(n,t,r){var e=[];return t=x(t,r),m.each(n,function(n,r,u){t(n,r,u)&&e.push(n)}),e},m.reject=function(n,t,r){return m.filter(n,m.negate(x(t)),r)},m.every=m.all=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(!t(n[o],o,n))return!1}return!0},m.some=m.any=function(n,t,r){t=x(t,r);for(var e=!k(n)&&m.keys(n),u=(e||n).length,i=0;u>i;i++){var o=e?e[i]:i;if(t(n[o],o,n))return!0}return!1},m.contains=m.includes=m.include=function(n,t,r,e){return k(n)||(n=m.values(n)),("number"!=typeof r||e)&&(r=0),m.indexOf(n,t,r)>=0},m.invoke=function(n,t){var r=l.call(arguments,2),e=m.isFunction(t);return m.map(n,function(n){var u=e?t:n[t];return null==u?u:u.apply(n,r)})},m.pluck=function(n,t){return m.map(n,m.property(t))},m.where=function(n,t){return m.filter(n,m.matcher(t))},m.findWhere=function(n,t){return m.find(n,m.matcher(t))},m.max=function(n,t,r){var e,u,i=-1/0,o=-1/0;if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],e>i&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(u>o||u===-1/0&&i===-1/0)&&(i=n,o=u)});return i},m.min=function(n,t,r){var e,u,i=1/0,o=1/0;if(null==t&&null!=n){n=k(n)?n:m.values(n);for(var a=0,c=n.length;c>a;a++)e=n[a],i>e&&(i=e)}else t=x(t,r),m.each(n,function(n,r,e){u=t(n,r,e),(o>u||1/0===u&&1/0===i)&&(i=n,o=u)});return i},m.shuffle=function(n){for(var t,r=k(n)?n:m.values(n),e=r.length,u=Array(e),i=0;e>i;i++)t=m.random(0,i),t!==i&&(u[i]=u[t]),u[t]=r[i];return u},m.sample=function(n,t,r){return null==t||r?(k(n)||(n=m.values(n)),n[m.random(n.length-1)]):m.shuffle(n).slice(0,Math.max(0,t))},m.sortBy=function(n,t,r){return t=x(t,r),m.pluck(m.map(n,function(n,r,e){return{value:n,index:r,criteria:t(n,r,e)}}).sort(function(n,t){var r=n.criteria,e=t.criteria;if(r!==e){if(r>e||r===void 0)return 1;if(e>r||e===void 0)return-1}return n.index-t.index}),"value")};var F=function(n){return function(t,r,e){var u={};return r=x(r,e),m.each(t,function(e,i){var o=r(e,i,t);n(u,e,o)}),u}};m.groupBy=F(function(n,t,r){m.has(n,r)?n[r].push(t):n[r]=[t]}),m.indexBy=F(function(n,t,r){n[r]=t}),m.countBy=F(function(n,t,r){m.has(n,r)?n[r]++:n[r]=1}),m.toArray=function(n){return n?m.isArray(n)?l.call(n):k(n)?m.map(n,m.identity):m.values(n):[]},m.size=function(n){return null==n?0:k(n)?n.length:m.keys(n).length},m.partition=function(n,t,r){t=x(t,r);var e=[],u=[];return m.each(n,function(n,r,i){(t(n,r,i)?e:u).push(n)}),[e,u]},m.first=m.head=m.take=function(n,t,r){return null==n?void 0:null==t||r?n[0]:m.initial(n,n.length-t)},m.initial=function(n,t,r){return l.call(n,0,Math.max(0,n.length-(null==t||r?1:t)))},m.last=function(n,t,r){return null==n?void 0:null==t||r?n[n.length-1]:m.rest(n,Math.max(0,n.length-t))},m.rest=m.tail=m.drop=function(n,t,r){return l.call(n,null==t||r?1:t)},m.compact=function(n){return m.filter(n,m.identity)};var S=function(n,t,r,e){for(var u=[],i=0,o=e||0,a=O(n);a>o;o++){var c=n[o];if(k(c)&&(m.isArray(c)||m.isArguments(c))){t||(c=S(c,t,r));var f=0,l=c.length;for(u.length+=l;l>f;)u[i++]=c[f++]}else r||(u[i++]=c)}return u};m.flatten=function(n,t){return S(n,t,!1)},m.without=function(n){return m.difference(n,l.call(arguments,1))},m.uniq=m.unique=function(n,t,r,e){m.isBoolean(t)||(e=r,r=t,t=!1),null!=r&&(r=x(r,e));for(var u=[],i=[],o=0,a=O(n);a>o;o++){var c=n[o],f=r?r(c,o,n):c;t?(o&&i===f||u.push(c),i=f):r?m.contains(i,f)||(i.push(f),u.push(c)):m.contains(u,c)||u.push(c)}return u},m.union=function(){return m.uniq(S(arguments,!0,!0))},m.intersection=function(n){for(var t=[],r=arguments.length,e=0,u=O(n);u>e;e++){var i=n[e];if(!m.contains(t,i)){for(var o=1;r>o&&m.contains(arguments[o],i);o++);o===r&&t.push(i)}}return t},m.difference=function(n){var t=S(arguments,!0,!0,1);return m.filter(n,function(n){return!m.contains(t,n)})},m.zip=function(){return m.unzip(arguments)},m.unzip=function(n){for(var t=n&&m.max(n,O).length||0,r=Array(t),e=0;t>e;e++)r[e]=m.pluck(n,e);return r},m.object=function(n,t){for(var r={},e=0,u=O(n);u>e;e++)t?r[n[e]]=t[e]:r[n[e][0]]=n[e][1];return r},m.findIndex=t(1),m.findLastIndex=t(-1),m.sortedIndex=function(n,t,r,e){r=x(r,e,1);for(var u=r(t),i=0,o=O(n);o>i;){var a=Math.floor((i+o)/2);r(n[a])<u?i=a+1:o=a}return i},m.indexOf=r(1,m.findIndex,m.sortedIndex),m.lastIndexOf=r(-1,m.findLastIndex),m.range=function(n,t,r){null==t&&(t=n||0,n=0),r=r||1;for(var e=Math.max(Math.ceil((t-n)/r),0),u=Array(e),i=0;e>i;i++,n+=r)u[i]=n;return u};var E=function(n,t,r,e,u){if(!(e instanceof t))return n.apply(r,u);var i=j(n.prototype),o=n.apply(i,u);return m.isObject(o)?o:i};m.bind=function(n,t){if(g&&n.bind===g)return g.apply(n,l.call(arguments,1));if(!m.isFunction(n))throw new TypeError("Bind must be called on a function");var r=l.call(arguments,2),e=function(){return E(n,e,t,this,r.concat(l.call(arguments)))};return e},m.partial=function(n){var t=l.call(arguments,1),r=function(){for(var e=0,u=t.length,i=Array(u),o=0;u>o;o++)i[o]=t[o]===m?arguments[e++]:t[o];for(;e<arguments.length;)i.push(arguments[e++]);return E(n,r,this,this,i)};return r},m.bindAll=function(n){var t,r,e=arguments.length;if(1>=e)throw new Error("bindAll must be passed function names");for(t=1;e>t;t++)r=arguments[t],n[r]=m.bind(n[r],n);return n},m.memoize=function(n,t){var r=function(e){var u=r.cache,i=""+(t?t.apply(this,arguments):e);return m.has(u,i)||(u[i]=n.apply(this,arguments)),u[i]};return r.cache={},r},m.delay=function(n,t){var r=l.call(arguments,2);return setTimeout(function(){return n.apply(null,r)},t)},m.defer=m.partial(m.delay,m,1),m.throttle=function(n,t,r){var e,u,i,o=null,a=0;r||(r={});var c=function(){a=r.leading===!1?0:m.now(),o=null,i=n.apply(e,u),o||(e=u=null)};return function(){var f=m.now();a||r.leading!==!1||(a=f);var l=t-(f-a);return e=this,u=arguments,0>=l||l>t?(o&&(clearTimeout(o),o=null),a=f,i=n.apply(e,u),o||(e=u=null)):o||r.trailing===!1||(o=setTimeout(c,l)),i}},m.debounce=function(n,t,r){var e,u,i,o,a,c=function(){var f=m.now()-o;t>f&&f>=0?e=setTimeout(c,t-f):(e=null,r||(a=n.apply(i,u),e||(i=u=null)))};return function(){i=this,u=arguments,o=m.now();var f=r&&!e;return e||(e=setTimeout(c,t)),f&&(a=n.apply(i,u),i=u=null),a}},m.wrap=function(n,t){return m.partial(t,n)},m.negate=function(n){return function(){return!n.apply(this,arguments)}},m.compose=function(){var n=arguments,t=n.length-1;return function(){for(var r=t,e=n[t].apply(this,arguments);r--;)e=n[r].call(this,e);return e}},m.after=function(n,t){return function(){return--n<1?t.apply(this,arguments):void 0}},m.before=function(n,t){var r;return function(){return--n>0&&(r=t.apply(this,arguments)),1>=n&&(t=null),r}},m.once=m.partial(m.before,2);var M=!{toString:null}.propertyIsEnumerable("toString"),I=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];m.keys=function(n){if(!m.isObject(n))return[];if(v)return v(n);var t=[];for(var r in n)m.has(n,r)&&t.push(r);return M&&e(n,t),t},m.allKeys=function(n){if(!m.isObject(n))return[];var t=[];for(var r in n)t.push(r);return M&&e(n,t),t},m.values=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=n[t[u]];return e},m.mapObject=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=u.length,o={},a=0;i>a;a++)e=u[a],o[e]=t(n[e],e,n);return o},m.pairs=function(n){for(var t=m.keys(n),r=t.length,e=Array(r),u=0;r>u;u++)e[u]=[t[u],n[t[u]]];return e},m.invert=function(n){for(var t={},r=m.keys(n),e=0,u=r.length;u>e;e++)t[n[r[e]]]=r[e];return t},m.functions=m.methods=function(n){var t=[];for(var r in n)m.isFunction(n[r])&&t.push(r);return t.sort()},m.extend=_(m.allKeys),m.extendOwn=m.assign=_(m.keys),m.findKey=function(n,t,r){t=x(t,r);for(var e,u=m.keys(n),i=0,o=u.length;o>i;i++)if(e=u[i],t(n[e],e,n))return e},m.pick=function(n,t,r){var e,u,i={},o=n;if(null==o)return i;m.isFunction(t)?(u=m.allKeys(o),e=b(t,r)):(u=S(arguments,!1,!1,1),e=function(n,t,r){return t in r},o=Object(o));for(var a=0,c=u.length;c>a;a++){var f=u[a],l=o[f];e(l,f,o)&&(i[f]=l)}return i},m.omit=function(n,t,r){if(m.isFunction(t))t=m.negate(t);else{var e=m.map(S(arguments,!1,!1,1),String);t=function(n,t){return!m.contains(e,t)}}return m.pick(n,t,r)},m.defaults=_(m.allKeys,!0),m.create=function(n,t){var r=j(n);return t&&m.extendOwn(r,t),r},m.clone=function(n){return m.isObject(n)?m.isArray(n)?n.slice():m.extend({},n):n},m.tap=function(n,t){return t(n),n},m.isMatch=function(n,t){var r=m.keys(t),e=r.length;if(null==n)return!e;for(var u=Object(n),i=0;e>i;i++){var o=r[i];if(t[o]!==u[o]||!(o in u))return!1}return!0};var N=function(n,t,r,e){if(n===t)return 0!==n||1/n===1/t;if(null==n||null==t)return n===t;n instanceof m&&(n=n._wrapped),t instanceof m&&(t=t._wrapped);var u=s.call(n);if(u!==s.call(t))return!1;switch(u){case"[object RegExp]":case"[object String]":return""+n==""+t;case"[object Number]":return+n!==+n?+t!==+t:0===+n?1/+n===1/t:+n===+t;case"[object Date]":case"[object Boolean]":return+n===+t}var i="[object Array]"===u;if(!i){if("object"!=typeof n||"object"!=typeof t)return!1;var o=n.constructor,a=t.constructor;if(o!==a&&!(m.isFunction(o)&&o instanceof o&&m.isFunction(a)&&a instanceof a)&&"constructor"in n&&"constructor"in t)return!1}r=r||[],e=e||[];for(var c=r.length;c--;)if(r[c]===n)return e[c]===t;if(r.push(n),e.push(t),i){if(c=n.length,c!==t.length)return!1;for(;c--;)if(!N(n[c],t[c],r,e))return!1}else{var f,l=m.keys(n);if(c=l.length,m.keys(t).length!==c)return!1;for(;c--;)if(f=l[c],!m.has(t,f)||!N(n[f],t[f],r,e))return!1}return r.pop(),e.pop(),!0};m.isEqual=function(n,t){return N(n,t)},m.isEmpty=function(n){return null==n?!0:k(n)&&(m.isArray(n)||m.isString(n)||m.isArguments(n))?0===n.length:0===m.keys(n).length},m.isElement=function(n){return!(!n||1!==n.nodeType)},m.isArray=h||function(n){return"[object Array]"===s.call(n)},m.isObject=function(n){var t=typeof n;return"function"===t||"object"===t&&!!n},m.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(n){m["is"+n]=function(t){return s.call(t)==="[object "+n+"]"}}),m.isArguments(arguments)||(m.isArguments=function(n){return m.has(n,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(m.isFunction=function(n){return"function"==typeof n||!1}),m.isFinite=function(n){return isFinite(n)&&!isNaN(parseFloat(n))},m.isNaN=function(n){return m.isNumber(n)&&n!==+n},m.isBoolean=function(n){return n===!0||n===!1||"[object Boolean]"===s.call(n)},m.isNull=function(n){return null===n},m.isUndefined=function(n){return n===void 0},m.has=function(n,t){return null!=n&&p.call(n,t)},m.noConflict=function(){return u._=i,this},m.identity=function(n){return n},m.constant=function(n){return function(){return n}},m.noop=function(){},m.property=w,m.propertyOf=function(n){return null==n?function(){}:function(t){return n[t]}},m.matcher=m.matches=function(n){return n=m.extendOwn({},n),function(t){return m.isMatch(t,n)}},m.times=function(n,t,r){var e=Array(Math.max(0,n));t=b(t,r,1);for(var u=0;n>u;u++)e[u]=t(u);return e},m.random=function(n,t){return null==t&&(t=n,n=0),n+Math.floor(Math.random()*(t-n+1))},m.now=Date.now||function(){return(new Date).getTime()};var B={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},T=m.invert(B),R=function(n){var t=function(t){return n[t]},r="(?:"+m.keys(n).join("|")+")",e=RegExp(r),u=RegExp(r,"g");return function(n){return n=null==n?"":""+n,e.test(n)?n.replace(u,t):n}};m.escape=R(B),m.unescape=R(T),m.result=function(n,t,r){var e=null==n?void 0:n[t];return e===void 0&&(e=r),m.isFunction(e)?e.call(n):e};var q=0;m.uniqueId=function(n){var t=++q+"";return n?n+t:t},m.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var K=/(.)^/,z={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},D=/\\|'|\r|\n|\u2028|\u2029/g,L=function(n){return"\\"+z[n]};m.template=function(n,t,r){!t&&r&&(t=r),t=m.defaults({},t,m.templateSettings);var e=RegExp([(t.escape||K).source,(t.interpolate||K).source,(t.evaluate||K).source].join("|")+"|$","g"),u=0,i="__p+='";n.replace(e,function(t,r,e,o,a){return i+=n.slice(u,a).replace(D,L),u=a+t.length,r?i+="'+\n((__t=("+r+"))==null?'':_.escape(__t))+\n'":e?i+="'+\n((__t=("+e+"))==null?'':__t)+\n'":o&&(i+="';\n"+o+"\n__p+='"),t}),i+="';\n",t.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,"+"print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var o=new Function(t.variable||"obj","_",i)}catch(a){throw a.source=i,a}var c=function(n){return o.call(this,n,m)},f=t.variable||"obj";return c.source="function("+f+"){\n"+i+"}",c},m.chain=function(n){var t=m(n);return t._chain=!0,t};var P=function(n,t){return n._chain?m(t).chain():t};m.mixin=function(n){m.each(m.functions(n),function(t){var r=m[t]=n[t];m.prototype[t]=function(){var n=[this._wrapped];return f.apply(n,arguments),P(this,r.apply(m,n))}})},m.mixin(m),m.each(["pop","push","reverse","shift","sort","splice","unshift"],function(n){var t=o[n];m.prototype[n]=function(){var r=this._wrapped;return t.apply(r,arguments),"shift"!==n&&"splice"!==n||0!==r.length||delete r[0],P(this,r)}}),m.each(["concat","join","slice"],function(n){var t=o[n];m.prototype[n]=function(){return P(this,t.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},m.prototype.valueOf=m.prototype.toJSON=m.prototype.value,m.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return m})}).call(this);
//# sourceMappingURL=underscore-min.map
!function() {
  var d3 = {
    version: "3.4.10"
  };
  if (!Date.now) Date.now = function() {
    return +new Date();
  };
  var d3_arraySlice = [].slice, d3_array = function(list) {
    return d3_arraySlice.call(list);
  };
  var d3_document = document, d3_documentElement = d3_document.documentElement, d3_window = window;
  try {
    d3_array(d3_documentElement.childNodes)[0].nodeType;
  } catch (e) {
    d3_array = function(list) {
      var i = list.length, array = new Array(i);
      while (i--) array[i] = list[i];
      return array;
    };
  }
  try {
    d3_document.createElement("div").style.setProperty("opacity", 0, "");
  } catch (error) {
    var d3_element_prototype = d3_window.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = d3_window.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
    d3_element_prototype.setAttribute = function(name, value) {
      d3_element_setAttribute.call(this, name, value + "");
    };
    d3_element_prototype.setAttributeNS = function(space, local, value) {
      d3_element_setAttributeNS.call(this, space, local, value + "");
    };
    d3_style_prototype.setProperty = function(name, value, priority) {
      d3_style_setProperty.call(this, name, value + "", priority);
    };
  }
  d3.ascending = d3_ascending;
  function d3_ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
  }
  d3.descending = function(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
  };
  d3.min = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
    }
    return a;
  };
  d3.max = function(array, f) {
    var i = -1, n = array.length, a, b;
    if (arguments.length === 1) {
      while (++i < n && !((a = array[i]) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
    } else {
      while (++i < n && !((a = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
    }
    return a;
  };
  d3.extent = function(array, f) {
    var i = -1, n = array.length, a, b, c;
    if (arguments.length === 1) {
      while (++i < n && !((a = c = array[i]) != null && a <= a)) a = c = undefined;
      while (++i < n) if ((b = array[i]) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    } else {
      while (++i < n && !((a = c = f.call(array, array[i], i)) != null && a <= a)) a = undefined;
      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
        if (a > b) a = b;
        if (c < b) c = b;
      }
    }
    return [ a, c ];
  };
  d3.sum = function(array, f) {
    var s = 0, n = array.length, a, i = -1;
    if (arguments.length === 1) {
      while (++i < n) if (!isNaN(a = +array[i])) s += a;
    } else {
      while (++i < n) if (!isNaN(a = +f.call(array, array[i], i))) s += a;
    }
    return s;
  };
  function d3_number(x) {
    return x != null && !isNaN(x);
  }
  d3.mean = function(array, f) {
    var s = 0, n = array.length, a, i = -1, j = n;
    if (arguments.length === 1) {
      while (++i < n) if (d3_number(a = array[i])) s += a; else --j;
    } else {
      while (++i < n) if (d3_number(a = f.call(array, array[i], i))) s += a; else --j;
    }
    return j ? s / j : undefined;
  };
  d3.quantile = function(values, p) {
    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
    return e ? v + e * (values[h] - v) : v;
  };
  d3.median = function(array, f) {
    if (arguments.length > 1) array = array.map(f);
    array = array.filter(d3_number);
    return array.length ? d3.quantile(array.sort(d3_ascending), .5) : undefined;
  };
  function d3_bisector(compare) {
    return {
      left: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
        }
        return lo;
      },
      right: function(a, x, lo, hi) {
        if (arguments.length < 3) lo = 0;
        if (arguments.length < 4) hi = a.length;
        while (lo < hi) {
          var mid = lo + hi >>> 1;
          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
        }
        return lo;
      }
    };
  }
  var d3_bisect = d3_bisector(d3_ascending);
  d3.bisectLeft = d3_bisect.left;
  d3.bisect = d3.bisectRight = d3_bisect.right;
  d3.bisector = function(f) {
    return d3_bisector(f.length === 1 ? function(d, x) {
      return d3_ascending(f(d), x);
    } : f);
  };
  d3.shuffle = function(array) {
    var m = array.length, t, i;
    while (m) {
      i = Math.random() * m-- | 0;
      t = array[m], array[m] = array[i], array[i] = t;
    }
    return array;
  };
  d3.permute = function(array, indexes) {
    var i = indexes.length, permutes = new Array(i);
    while (i--) permutes[i] = array[indexes[i]];
    return permutes;
  };
  d3.pairs = function(array) {
    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
    return pairs;
  };
  d3.zip = function() {
    if (!(n = arguments.length)) return [];
    for (var i = -1, m = d3.min(arguments, d3_zipLength), zips = new Array(m); ++i < m; ) {
      for (var j = -1, n, zip = zips[i] = new Array(n); ++j < n; ) {
        zip[j] = arguments[j][i];
      }
    }
    return zips;
  };
  function d3_zipLength(d) {
    return d.length;
  }
  d3.transpose = function(matrix) {
    return d3.zip.apply(d3, matrix);
  };
  d3.keys = function(map) {
    var keys = [];
    for (var key in map) keys.push(key);
    return keys;
  };
  d3.values = function(map) {
    var values = [];
    for (var key in map) values.push(map[key]);
    return values;
  };
  d3.entries = function(map) {
    var entries = [];
    for (var key in map) entries.push({
      key: key,
      value: map[key]
    });
    return entries;
  };
  d3.merge = function(arrays) {
    var n = arrays.length, m, i = -1, j = 0, merged, array;
    while (++i < n) j += arrays[i].length;
    merged = new Array(j);
    while (--n >= 0) {
      array = arrays[n];
      m = array.length;
      while (--m >= 0) {
        merged[--j] = array[m];
      }
    }
    return merged;
  };
  var abs = Math.abs;
  d3.range = function(start, stop, step) {
    if (arguments.length < 3) {
      step = 1;
      if (arguments.length < 2) {
        stop = start;
        start = 0;
      }
    }
    if ((stop - start) / step === Infinity) throw new Error("infinite range");
    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
    start *= k, stop *= k, step *= k;
    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
    return range;
  };
  function d3_range_integerScale(x) {
    var k = 1;
    while (x * k % 1) k *= 10;
    return k;
  }
  function d3_class(ctor, properties) {
    try {
      for (var key in properties) {
        Object.defineProperty(ctor.prototype, key, {
          value: properties[key],
          enumerable: false
        });
      }
    } catch (e) {
      ctor.prototype = properties;
    }
  }
  d3.map = function(object) {
    var map = new d3_Map();
    if (object instanceof d3_Map) object.forEach(function(key, value) {
      map.set(key, value);
    }); else for (var key in object) map.set(key, object[key]);
    return map;
  };
  function d3_Map() {}
  d3_class(d3_Map, {
    has: d3_map_has,
    get: function(key) {
      return this[d3_map_prefix + key];
    },
    set: function(key, value) {
      return this[d3_map_prefix + key] = value;
    },
    remove: d3_map_remove,
    keys: d3_map_keys,
    values: function() {
      var values = [];
      this.forEach(function(key, value) {
        values.push(value);
      });
      return values;
    },
    entries: function() {
      var entries = [];
      this.forEach(function(key, value) {
        entries.push({
          key: key,
          value: value
        });
      });
      return entries;
    },
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) f.call(this, key.substring(1), this[key]);
    }
  });
  var d3_map_prefix = "\x00", d3_map_prefixCode = d3_map_prefix.charCodeAt(0);
  function d3_map_has(key) {
    return d3_map_prefix + key in this;
  }
  function d3_map_remove(key) {
    key = d3_map_prefix + key;
    return key in this && delete this[key];
  }
  function d3_map_keys() {
    var keys = [];
    this.forEach(function(key) {
      keys.push(key);
    });
    return keys;
  }
  function d3_map_size() {
    var size = 0;
    for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) ++size;
    return size;
  }
  function d3_map_empty() {
    for (var key in this) if (key.charCodeAt(0) === d3_map_prefixCode) return false;
    return true;
  }
  d3.nest = function() {
    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
    function map(mapType, array, depth) {
      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
      while (++i < n) {
        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
          values.push(object);
        } else {
          valuesByKey.set(keyValue, [ object ]);
        }
      }
      if (mapType) {
        object = mapType();
        setter = function(keyValue, values) {
          object.set(keyValue, map(mapType, values, depth));
        };
      } else {
        object = {};
        setter = function(keyValue, values) {
          object[keyValue] = map(mapType, values, depth);
        };
      }
      valuesByKey.forEach(setter);
      return object;
    }
    function entries(map, depth) {
      if (depth >= keys.length) return map;
      var array = [], sortKey = sortKeys[depth++];
      map.forEach(function(key, keyMap) {
        array.push({
          key: key,
          values: entries(keyMap, depth)
        });
      });
      return sortKey ? array.sort(function(a, b) {
        return sortKey(a.key, b.key);
      }) : array;
    }
    nest.map = function(array, mapType) {
      return map(mapType, array, 0);
    };
    nest.entries = function(array) {
      return entries(map(d3.map, array, 0), 0);
    };
    nest.key = function(d) {
      keys.push(d);
      return nest;
    };
    nest.sortKeys = function(order) {
      sortKeys[keys.length - 1] = order;
      return nest;
    };
    nest.sortValues = function(order) {
      sortValues = order;
      return nest;
    };
    nest.rollup = function(f) {
      rollup = f;
      return nest;
    };
    return nest;
  };
  d3.set = function(array) {
    var set = new d3_Set();
    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
    return set;
  };
  function d3_Set() {}
  d3_class(d3_Set, {
    has: d3_map_has,
    add: function(value) {
      this[d3_map_prefix + value] = true;
      return value;
    },
    remove: function(value) {
      value = d3_map_prefix + value;
      return value in this && delete this[value];
    },
    values: d3_map_keys,
    size: d3_map_size,
    empty: d3_map_empty,
    forEach: function(f) {
      for (var value in this) if (value.charCodeAt(0) === d3_map_prefixCode) f.call(this, value.substring(1));
    }
  });
  d3.behavior = {};
  d3.rebind = function(target, source) {
    var i = 1, n = arguments.length, method;
    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
    return target;
  };
  function d3_rebind(target, source, method) {
    return function() {
      var value = method.apply(source, arguments);
      return value === source ? target : value;
    };
  }
  function d3_vendorSymbol(object, name) {
    if (name in object) return name;
    name = name.charAt(0).toUpperCase() + name.substring(1);
    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
      var prefixName = d3_vendorPrefixes[i] + name;
      if (prefixName in object) return prefixName;
    }
  }
  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
  function d3_noop() {}
  d3.dispatch = function() {
    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    return dispatch;
  };
  function d3_dispatch() {}
  d3_dispatch.prototype.on = function(type, listener) {
    var i = type.indexOf("."), name = "";
    if (i >= 0) {
      name = type.substring(i + 1);
      type = type.substring(0, i);
    }
    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
    if (arguments.length === 2) {
      if (listener == null) for (type in this) {
        if (this.hasOwnProperty(type)) this[type].on(name, null);
      }
      return this;
    }
  };
  function d3_dispatch_event(dispatch) {
    var listeners = [], listenerByName = new d3_Map();
    function event() {
      var z = listeners, i = -1, n = z.length, l;
      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
      return dispatch;
    }
    event.on = function(name, listener) {
      var l = listenerByName.get(name), i;
      if (arguments.length < 2) return l && l.on;
      if (l) {
        l.on = null;
        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
        listenerByName.remove(name);
      }
      if (listener) listeners.push(listenerByName.set(name, {
        on: listener
      }));
      return dispatch;
    };
    return event;
  }
  d3.event = null;
  function d3_eventPreventDefault() {
    d3.event.preventDefault();
  }
  function d3_eventSource() {
    var e = d3.event, s;
    while (s = e.sourceEvent) e = s;
    return e;
  }
  function d3_eventDispatch(target) {
    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
    dispatch.of = function(thiz, argumentz) {
      return function(e1) {
        try {
          var e0 = e1.sourceEvent = d3.event;
          e1.target = target;
          d3.event = e1;
          dispatch[e1.type].apply(thiz, argumentz);
        } finally {
          d3.event = e0;
        }
      };
    };
    return dispatch;
  }
  d3.requote = function(s) {
    return s.replace(d3_requote_re, "\\$&");
  };
  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
  var d3_subclass = {}.__proto__ ? function(object, prototype) {
    object.__proto__ = prototype;
  } : function(object, prototype) {
    for (var property in prototype) object[property] = prototype[property];
  };
  function d3_selection(groups) {
    d3_subclass(groups, d3_selectionPrototype);
    return groups;
  }
  var d3_select = function(s, n) {
    return n.querySelector(s);
  }, d3_selectAll = function(s, n) {
    return n.querySelectorAll(s);
  }, d3_selectMatcher = d3_documentElement.matches || d3_documentElement[d3_vendorSymbol(d3_documentElement, "matchesSelector")], d3_selectMatches = function(n, s) {
    return d3_selectMatcher.call(n, s);
  };
  if (typeof Sizzle === "function") {
    d3_select = function(s, n) {
      return Sizzle(s, n)[0] || null;
    };
    d3_selectAll = Sizzle;
    d3_selectMatches = Sizzle.matchesSelector;
  }
  d3.selection = function() {
    return d3_selectionRoot;
  };
  var d3_selectionPrototype = d3.selection.prototype = [];
  d3_selectionPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, group, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selector(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_select(selector, this);
    };
  }
  d3_selectionPrototype.selectAll = function(selector) {
    var subgroups = [], subgroup, node;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
          subgroup.parentNode = node;
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_selectorAll(selector) {
    return typeof selector === "function" ? selector : function() {
      return d3_selectAll(selector, this);
    };
  }
  var d3_nsPrefix = {
    svg: "http://www.w3.org/2000/svg",
    xhtml: "http://www.w3.org/1999/xhtml",
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  d3.ns = {
    prefix: d3_nsPrefix,
    qualify: function(name) {
      var i = name.indexOf(":"), prefix = name;
      if (i >= 0) {
        prefix = name.substring(0, i);
        name = name.substring(i + 1);
      }
      return d3_nsPrefix.hasOwnProperty(prefix) ? {
        space: d3_nsPrefix[prefix],
        local: name
      } : name;
    }
  };
  d3_selectionPrototype.attr = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node();
        name = d3.ns.qualify(name);
        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
      }
      for (value in name) this.each(d3_selection_attr(value, name[value]));
      return this;
    }
    return this.each(d3_selection_attr(name, value));
  };
  function d3_selection_attr(name, value) {
    name = d3.ns.qualify(name);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrConstant() {
      this.setAttribute(name, value);
    }
    function attrConstantNS() {
      this.setAttributeNS(name.space, name.local, value);
    }
    function attrFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
    }
    function attrFunctionNS() {
      var x = value.apply(this, arguments);
      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
    }
    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
  }
  function d3_collapse(s) {
    return s.trim().replace(/\s+/g, " ");
  }
  d3_selectionPrototype.classed = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") {
        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
        if (value = node.classList) {
          while (++i < n) if (!value.contains(name[i])) return false;
        } else {
          value = node.getAttribute("class");
          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
        }
        return true;
      }
      for (value in name) this.each(d3_selection_classed(value, name[value]));
      return this;
    }
    return this.each(d3_selection_classed(name, value));
  };
  function d3_selection_classedRe(name) {
    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
  }
  function d3_selection_classes(name) {
    return (name + "").trim().split(/^|\s+/);
  }
  function d3_selection_classed(name, value) {
    name = d3_selection_classes(name).map(d3_selection_classedName);
    var n = name.length;
    function classedConstant() {
      var i = -1;
      while (++i < n) name[i](this, value);
    }
    function classedFunction() {
      var i = -1, x = value.apply(this, arguments);
      while (++i < n) name[i](this, x);
    }
    return typeof value === "function" ? classedFunction : classedConstant;
  }
  function d3_selection_classedName(name) {
    var re = d3_selection_classedRe(name);
    return function(node, value) {
      if (c = node.classList) return value ? c.add(name) : c.remove(name);
      var c = node.getAttribute("class") || "";
      if (value) {
        re.lastIndex = 0;
        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
      } else {
        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
      }
    };
  }
  d3_selectionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
        return this;
      }
      if (n < 2) return d3_window.getComputedStyle(this.node(), null).getPropertyValue(name);
      priority = "";
    }
    return this.each(d3_selection_style(name, value, priority));
  };
  function d3_selection_style(name, value, priority) {
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleConstant() {
      this.style.setProperty(name, value, priority);
    }
    function styleFunction() {
      var x = value.apply(this, arguments);
      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
    }
    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
  }
  d3_selectionPrototype.property = function(name, value) {
    if (arguments.length < 2) {
      if (typeof name === "string") return this.node()[name];
      for (value in name) this.each(d3_selection_property(value, name[value]));
      return this;
    }
    return this.each(d3_selection_property(name, value));
  };
  function d3_selection_property(name, value) {
    function propertyNull() {
      delete this[name];
    }
    function propertyConstant() {
      this[name] = value;
    }
    function propertyFunction() {
      var x = value.apply(this, arguments);
      if (x == null) delete this[name]; else this[name] = x;
    }
    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
  }
  d3_selectionPrototype.text = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.textContent = v == null ? "" : v;
    } : value == null ? function() {
      this.textContent = "";
    } : function() {
      this.textContent = value;
    }) : this.node().textContent;
  };
  d3_selectionPrototype.html = function(value) {
    return arguments.length ? this.each(typeof value === "function" ? function() {
      var v = value.apply(this, arguments);
      this.innerHTML = v == null ? "" : v;
    } : value == null ? function() {
      this.innerHTML = "";
    } : function() {
      this.innerHTML = value;
    }) : this.node().innerHTML;
  };
  d3_selectionPrototype.append = function(name) {
    name = d3_selection_creator(name);
    return this.select(function() {
      return this.appendChild(name.apply(this, arguments));
    });
  };
  function d3_selection_creator(name) {
    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? function() {
      return this.ownerDocument.createElementNS(name.space, name.local);
    } : function() {
      return this.ownerDocument.createElementNS(this.namespaceURI, name);
    };
  }
  d3_selectionPrototype.insert = function(name, before) {
    name = d3_selection_creator(name);
    before = d3_selection_selector(before);
    return this.select(function() {
      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
    });
  };
  d3_selectionPrototype.remove = function() {
    return this.each(function() {
      var parent = this.parentNode;
      if (parent) parent.removeChild(this);
    });
  };
  d3_selectionPrototype.data = function(value, key) {
    var i = -1, n = this.length, group, node;
    if (!arguments.length) {
      value = new Array(n = (group = this[0]).length);
      while (++i < n) {
        if (node = group[i]) {
          value[i] = node.__data__;
        }
      }
      return value;
    }
    function bind(group, groupData) {
      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
      if (key) {
        var nodeByKeyValue = new d3_Map(), dataByKeyValue = new d3_Map(), keyValues = [], keyValue;
        for (i = -1; ++i < n; ) {
          keyValue = key.call(node = group[i], node.__data__, i);
          if (nodeByKeyValue.has(keyValue)) {
            exitNodes[i] = node;
          } else {
            nodeByKeyValue.set(keyValue, node);
          }
          keyValues.push(keyValue);
        }
        for (i = -1; ++i < m; ) {
          keyValue = key.call(groupData, nodeData = groupData[i], i);
          if (node = nodeByKeyValue.get(keyValue)) {
            updateNodes[i] = node;
            node.__data__ = nodeData;
          } else if (!dataByKeyValue.has(keyValue)) {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
          dataByKeyValue.set(keyValue, nodeData);
          nodeByKeyValue.remove(keyValue);
        }
        for (i = -1; ++i < n; ) {
          if (nodeByKeyValue.has(keyValues[i])) {
            exitNodes[i] = group[i];
          }
        }
      } else {
        for (i = -1; ++i < n0; ) {
          node = group[i];
          nodeData = groupData[i];
          if (node) {
            node.__data__ = nodeData;
            updateNodes[i] = node;
          } else {
            enterNodes[i] = d3_selection_dataNode(nodeData);
          }
        }
        for (;i < m; ++i) {
          enterNodes[i] = d3_selection_dataNode(groupData[i]);
        }
        for (;i < n; ++i) {
          exitNodes[i] = group[i];
        }
      }
      enterNodes.update = updateNodes;
      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
      enter.push(enterNodes);
      update.push(updateNodes);
      exit.push(exitNodes);
    }
    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
    if (typeof value === "function") {
      while (++i < n) {
        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
      }
    } else {
      while (++i < n) {
        bind(group = this[i], value);
      }
    }
    update.enter = function() {
      return enter;
    };
    update.exit = function() {
      return exit;
    };
    return update;
  };
  function d3_selection_dataNode(data) {
    return {
      __data__: data
    };
  }
  d3_selectionPrototype.datum = function(value) {
    return arguments.length ? this.property("__data__", value) : this.property("__data__");
  };
  d3_selectionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      subgroup.parentNode = (group = this[j]).parentNode;
      for (var i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_selection(subgroups);
  };
  function d3_selection_filter(selector) {
    return function() {
      return d3_selectMatches(this, selector);
    };
  }
  d3_selectionPrototype.order = function() {
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if (node = group[i]) {
          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
          next = node;
        }
      }
    }
    return this;
  };
  d3_selectionPrototype.sort = function(comparator) {
    comparator = d3_selection_sortComparator.apply(this, arguments);
    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
    return this.order();
  };
  function d3_selection_sortComparator(comparator) {
    if (!arguments.length) comparator = d3_ascending;
    return function(a, b) {
      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
    };
  }
  d3_selectionPrototype.each = function(callback) {
    return d3_selection_each(this, function(node, i, j) {
      callback.call(node, node.__data__, i, j);
    });
  };
  function d3_selection_each(groups, callback) {
    for (var j = 0, m = groups.length; j < m; j++) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
        if (node = group[i]) callback(node, i, j);
      }
    }
    return groups;
  }
  d3_selectionPrototype.call = function(callback) {
    var args = d3_array(arguments);
    callback.apply(args[0] = this, args);
    return this;
  };
  d3_selectionPrototype.empty = function() {
    return !this.node();
  };
  d3_selectionPrototype.node = function() {
    for (var j = 0, m = this.length; j < m; j++) {
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        var node = group[i];
        if (node) return node;
      }
    }
    return null;
  };
  d3_selectionPrototype.size = function() {
    var n = 0;
    this.each(function() {
      ++n;
    });
    return n;
  };
  function d3_selection_enter(selection) {
    d3_subclass(selection, d3_selection_enterPrototype);
    return selection;
  }
  var d3_selection_enterPrototype = [];
  d3.selection.enter = d3_selection_enter;
  d3.selection.enter.prototype = d3_selection_enterPrototype;
  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
  d3_selection_enterPrototype.select = function(selector) {
    var subgroups = [], subgroup, subnode, upgroup, group, node;
    for (var j = -1, m = this.length; ++j < m; ) {
      upgroup = (group = this[j]).update;
      subgroups.push(subgroup = []);
      subgroup.parentNode = group.parentNode;
      for (var i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
          subnode.__data__ = node.__data__;
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_selection(subgroups);
  };
  d3_selection_enterPrototype.insert = function(name, before) {
    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
    return d3_selectionPrototype.insert.call(this, name, before);
  };
  function d3_selection_enterInsertBefore(enter) {
    var i0, j0;
    return function(d, i, j) {
      var group = enter[j].update, n = group.length, node;
      if (j != j0) j0 = j, i0 = 0;
      if (i >= i0) i0 = i + 1;
      while (!(node = group[i0]) && ++i0 < n) ;
      return node;
    };
  }
  d3_selectionPrototype.transition = function() {
    var id = d3_transitionInheritId || ++d3_transitionId, subgroups = [], subgroup, node, transition = d3_transitionInherit || {
      time: Date.now(),
      ease: d3_ease_cubicInOut,
      delay: 0,
      duration: 250
    };
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) d3_transitionNode(node, i, id, transition);
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_selectionPrototype.interrupt = function() {
    return this.each(d3_selection_interrupt);
  };
  function d3_selection_interrupt() {
    var lock = this.__transition__;
    if (lock) ++lock.active;
  }
  d3.select = function(node) {
    var group = [ typeof node === "string" ? d3_select(node, d3_document) : node ];
    group.parentNode = d3_documentElement;
    return d3_selection([ group ]);
  };
  d3.selectAll = function(nodes) {
    var group = d3_array(typeof nodes === "string" ? d3_selectAll(nodes, d3_document) : nodes);
    group.parentNode = d3_documentElement;
    return d3_selection([ group ]);
  };
  var d3_selectionRoot = d3.select(d3_documentElement);
  d3_selectionPrototype.on = function(type, listener, capture) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof type !== "string") {
        if (n < 2) listener = false;
        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
        return this;
      }
      if (n < 2) return (n = this.node()["__on" + type]) && n._;
      capture = false;
    }
    return this.each(d3_selection_on(type, listener, capture));
  };
  function d3_selection_on(type, listener, capture) {
    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
    if (i > 0) type = type.substring(0, i);
    var filter = d3_selection_onFilters.get(type);
    if (filter) type = filter, wrap = d3_selection_onFilter;
    function onRemove() {
      var l = this[name];
      if (l) {
        this.removeEventListener(type, l, l.$);
        delete this[name];
      }
    }
    function onAdd() {
      var l = wrap(listener, d3_array(arguments));
      onRemove.call(this);
      this.addEventListener(type, this[name] = l, l.$ = capture);
      l._ = listener;
    }
    function removeAll() {
      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
      for (var name in this) {
        if (match = name.match(re)) {
          var l = this[name];
          this.removeEventListener(match[1], l, l.$);
          delete this[name];
        }
      }
    }
    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
  }
  var d3_selection_onFilters = d3.map({
    mouseenter: "mouseover",
    mouseleave: "mouseout"
  });
  d3_selection_onFilters.forEach(function(k) {
    if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
  });
  function d3_selection_onListener(listener, argumentz) {
    return function(e) {
      var o = d3.event;
      d3.event = e;
      argumentz[0] = this.__data__;
      try {
        listener.apply(this, argumentz);
      } finally {
        d3.event = o;
      }
    };
  }
  function d3_selection_onFilter(listener, argumentz) {
    var l = d3_selection_onListener(listener, argumentz);
    return function(e) {
      var target = this, related = e.relatedTarget;
      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
        l.call(target, e);
      }
    };
  }
  var d3_event_dragSelect = "onselectstart" in d3_document ? null : d3_vendorSymbol(d3_documentElement.style, "userSelect"), d3_event_dragId = 0;
  function d3_event_dragSuppress() {
    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
    if (d3_event_dragSelect) {
      var style = d3_documentElement.style, select = style[d3_event_dragSelect];
      style[d3_event_dragSelect] = "none";
    }
    return function(suppressClick) {
      w.on(name, null);
      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
      if (suppressClick) {
        function off() {
          w.on(click, null);
        }
        w.on(click, function() {
          d3_eventPreventDefault();
          off();
        }, true);
        setTimeout(off, 0);
      }
    };
  }
  d3.mouse = function(container) {
    return d3_mousePoint(container, d3_eventSource());
  };
  var d3_mouse_bug44083 = /WebKit/.test(d3_window.navigator.userAgent) ? -1 : 0;
  function d3_mousePoint(container, e) {
    if (e.changedTouches) e = e.changedTouches[0];
    var svg = container.ownerSVGElement || container;
    if (svg.createSVGPoint) {
      var point = svg.createSVGPoint();
      if (d3_mouse_bug44083 < 0 && (d3_window.scrollX || d3_window.scrollY)) {
        svg = d3.select("body").append("svg").style({
          position: "absolute",
          top: 0,
          left: 0,
          margin: 0,
          padding: 0,
          border: "none"
        }, "important");
        var ctm = svg[0][0].getScreenCTM();
        d3_mouse_bug44083 = !(ctm.f || ctm.e);
        svg.remove();
      }
      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
      point.y = e.clientY;
      point = point.matrixTransform(container.getScreenCTM().inverse());
      return [ point.x, point.y ];
    }
    var rect = container.getBoundingClientRect();
    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
  }
  d3.touches = function(container, touches) {
    if (arguments.length < 2) touches = d3_eventSource().touches;
    return touches ? d3_array(touches).map(function(touch) {
      var point = d3_mousePoint(container, touch);
      point.identifier = touch.identifier;
      return point;
    }) : [];
  };
  d3.behavior.drag = function() {
    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_behavior_dragMouseSubject, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_behavior_dragTouchSubject, "touchmove", "touchend");
    function drag() {
      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
    }
    function dragstart(id, position, subject, move, end) {
      return function() {
        var that = this, target = d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject()).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(), position0 = position(parent, dragId);
        if (origin) {
          dragOffset = origin.apply(that, arguments);
          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
        } else {
          dragOffset = [ 0, 0 ];
        }
        dispatch({
          type: "dragstart"
        });
        function moved() {
          var position1 = position(parent, dragId), dx, dy;
          if (!position1) return;
          dx = position1[0] - position0[0];
          dy = position1[1] - position0[1];
          dragged |= dx | dy;
          position0 = position1;
          dispatch({
            type: "drag",
            x: position1[0] + dragOffset[0],
            y: position1[1] + dragOffset[1],
            dx: dx,
            dy: dy
          });
        }
        function ended() {
          if (!position(parent, dragId)) return;
          dragSubject.on(move + dragName, null).on(end + dragName, null);
          dragRestore(dragged && d3.event.target === target);
          dispatch({
            type: "dragend"
          });
        }
      };
    }
    drag.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return drag;
    };
    return d3.rebind(drag, event, "on");
  };
  function d3_behavior_dragTouchId() {
    return d3.event.changedTouches[0].identifier;
  }
  function d3_behavior_dragTouchSubject() {
    return d3.event.target;
  }
  function d3_behavior_dragMouseSubject() {
    return d3_window;
  }
  var π = Math.PI, τ = 2 * π, halfπ = π / 2, ε = 1e-6, ε2 = ε * ε, d3_radians = π / 180, d3_degrees = 180 / π;
  function d3_sgn(x) {
    return x > 0 ? 1 : x < 0 ? -1 : 0;
  }
  function d3_cross2d(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
  }
  function d3_acos(x) {
    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
  }
  function d3_asin(x) {
    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
  }
  function d3_sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2;
  }
  function d3_cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2;
  }
  function d3_tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
  }
  function d3_haversin(x) {
    return (x = Math.sin(x / 2)) * x;
  }
  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
  d3.interpolateZoom = function(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2];
    var dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1), dr = r1 - r0, S = (dr || Math.log(w1 / w0)) / ρ;
    function interpolate(t) {
      var s = t * S;
      if (dr) {
        var coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
      }
      return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * s) ];
    }
    interpolate.duration = S * 1e3;
    return interpolate;
  };
  d3.behavior.zoom = function() {
    var view = {
      x: 0,
      y: 0,
      k: 1
    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
    function zoom(g) {
      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
    }
    zoom.event = function(g) {
      g.each(function() {
        var dispatch = event.of(this, arguments), view1 = view;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.zoom", function() {
            view = this.__chart__ || {
              x: 0,
              y: 0,
              k: 1
            };
            zoomstarted(dispatch);
          }).tween("zoom:zoom", function() {
            var dx = size[0], dy = size[1], cx = dx / 2, cy = dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
            return function(t) {
              var l = i(t), k = dx / l[2];
              this.__chart__ = view = {
                x: cx - l[0] * k,
                y: cy - l[1] * k,
                k: k
              };
              zoomed(dispatch);
            };
          }).each("end.zoom", function() {
            zoomended(dispatch);
          });
        } else {
          this.__chart__ = view;
          zoomstarted(dispatch);
          zoomed(dispatch);
          zoomended(dispatch);
        }
      });
    };
    zoom.translate = function(_) {
      if (!arguments.length) return [ view.x, view.y ];
      view = {
        x: +_[0],
        y: +_[1],
        k: view.k
      };
      rescale();
      return zoom;
    };
    zoom.scale = function(_) {
      if (!arguments.length) return view.k;
      view = {
        x: view.x,
        y: view.y,
        k: +_
      };
      rescale();
      return zoom;
    };
    zoom.scaleExtent = function(_) {
      if (!arguments.length) return scaleExtent;
      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.center = function(_) {
      if (!arguments.length) return center;
      center = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.size = function(_) {
      if (!arguments.length) return size;
      size = _ && [ +_[0], +_[1] ];
      return zoom;
    };
    zoom.x = function(z) {
      if (!arguments.length) return x1;
      x1 = z;
      x0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    zoom.y = function(z) {
      if (!arguments.length) return y1;
      y1 = z;
      y0 = z.copy();
      view = {
        x: 0,
        y: 0,
        k: 1
      };
      return zoom;
    };
    function location(p) {
      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
    }
    function point(l) {
      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
    }
    function scaleTo(s) {
      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
    }
    function translateTo(p, l) {
      l = point(l);
      view.x += p[0] - l[0];
      view.y += p[1] - l[1];
    }
    function rescale() {
      if (x1) x1.domain(x0.range().map(function(x) {
        return (x - view.x) / view.k;
      }).map(x0.invert));
      if (y1) y1.domain(y0.range().map(function(y) {
        return (y - view.y) / view.k;
      }).map(y0.invert));
    }
    function zoomstarted(dispatch) {
      dispatch({
        type: "zoomstart"
      });
    }
    function zoomed(dispatch) {
      rescale();
      dispatch({
        type: "zoom",
        scale: view.k,
        translate: [ view.x, view.y ]
      });
    }
    function zoomended(dispatch) {
      dispatch({
        type: "zoomend"
      });
    }
    function mousedowned() {
      var that = this, target = d3.event.target, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(that);
      zoomstarted(dispatch);
      function moved() {
        dragged = 1;
        translateTo(d3.mouse(that), location0);
        zoomed(dispatch);
      }
      function ended() {
        subject.on(mousemove, null).on(mouseup, null);
        dragRestore(dragged && d3.event.target === target);
        zoomended(dispatch);
      }
    }
    function touchstarted() {
      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that).on(mousedown, null).on(touchstart, started), dragRestore = d3_event_dragSuppress();
      d3_selection_interrupt.call(that);
      started();
      zoomstarted(dispatch);
      function relocate() {
        var touches = d3.touches(that);
        scale0 = view.k;
        touches.forEach(function(t) {
          if (t.identifier in locations0) locations0[t.identifier] = location(t);
        });
        return touches;
      }
      function started() {
        var target = d3.event.target;
        d3.select(target).on(touchmove, moved).on(touchend, ended);
        targets.push(target);
        var changed = d3.event.changedTouches;
        for (var i = 0, n = changed.length; i < n; ++i) {
          locations0[changed[i].identifier] = null;
        }
        var touches = relocate(), now = Date.now();
        if (touches.length === 1) {
          if (now - touchtime < 500) {
            var p = touches[0], l = locations0[p.identifier];
            scaleTo(view.k * 2);
            translateTo(p, l);
            d3_eventPreventDefault();
            zoomed(dispatch);
          }
          touchtime = now;
        } else if (touches.length > 1) {
          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
          distance0 = dx * dx + dy * dy;
        }
      }
      function moved() {
        var touches = d3.touches(that), p0, l0, p1, l1;
        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
          p1 = touches[i];
          if (l1 = locations0[p1.identifier]) {
            if (l0) break;
            p0 = p1, l0 = l1;
          }
        }
        if (l1) {
          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
          scaleTo(scale1 * scale0);
        }
        touchtime = null;
        translateTo(p0, l0);
        zoomed(dispatch);
      }
      function ended() {
        if (d3.event.touches.length) {
          var changed = d3.event.changedTouches;
          for (var i = 0, n = changed.length; i < n; ++i) {
            delete locations0[changed[i].identifier];
          }
          for (var identifier in locations0) {
            return void relocate();
          }
        }
        d3.selectAll(targets).on(zoomName, null);
        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
        dragRestore();
        zoomended(dispatch);
      }
    }
    function mousewheeled() {
      var dispatch = event.of(this, arguments);
      if (mousewheelTimer) clearTimeout(mousewheelTimer); else translate0 = location(center0 = center || d3.mouse(this)), 
      d3_selection_interrupt.call(this), zoomstarted(dispatch);
      mousewheelTimer = setTimeout(function() {
        mousewheelTimer = null;
        zoomended(dispatch);
      }, 50);
      d3_eventPreventDefault();
      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
      translateTo(center0, translate0);
      zoomed(dispatch);
    }
    function dblclicked() {
      var dispatch = event.of(this, arguments), p = d3.mouse(this), l = location(p), k = Math.log(view.k) / Math.LN2;
      zoomstarted(dispatch);
      scaleTo(Math.pow(2, d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1));
      translateTo(p, l);
      zoomed(dispatch);
      zoomended(dispatch);
    }
    return d3.rebind(zoom, event, "on");
  };
  var d3_behavior_zoomInfinity = [ 0, Infinity ];
  var d3_behavior_zoomDelta, d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
    return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
  }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
    return d3.event.wheelDelta;
  }, "mousewheel") : (d3_behavior_zoomDelta = function() {
    return -d3.event.detail;
  }, "MozMousePixelScroll");
  d3.color = d3_color;
  function d3_color() {}
  d3_color.prototype.toString = function() {
    return this.rgb() + "";
  };
  d3.hsl = d3_hsl;
  function d3_hsl(h, s, l) {
    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
  }
  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
  d3_hslPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, this.l / k);
  };
  d3_hslPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_hsl(this.h, this.s, k * this.l);
  };
  d3_hslPrototype.rgb = function() {
    return d3_hsl_rgb(this.h, this.s, this.l);
  };
  function d3_hsl_rgb(h, s, l) {
    var m1, m2;
    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
    l = l < 0 ? 0 : l > 1 ? 1 : l;
    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
    m1 = 2 * l - m2;
    function v(h) {
      if (h > 360) h -= 360; else if (h < 0) h += 360;
      if (h < 60) return m1 + (m2 - m1) * h / 60;
      if (h < 180) return m2;
      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
      return m1;
    }
    function vv(h) {
      return Math.round(v(h) * 255);
    }
    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
  }
  d3.hcl = d3_hcl;
  function d3_hcl(h, c, l) {
    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
  }
  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
  d3_hclPrototype.brighter = function(k) {
    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.darker = function(k) {
    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
  };
  d3_hclPrototype.rgb = function() {
    return d3_hcl_lab(this.h, this.c, this.l).rgb();
  };
  function d3_hcl_lab(h, c, l) {
    if (isNaN(h)) h = 0;
    if (isNaN(c)) c = 0;
    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
  }
  d3.lab = d3_lab;
  function d3_lab(l, a, b) {
    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.l, l.c, l.h) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
  }
  var d3_lab_K = 18;
  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
  var d3_labPrototype = d3_lab.prototype = new d3_color();
  d3_labPrototype.brighter = function(k) {
    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.darker = function(k) {
    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
  };
  d3_labPrototype.rgb = function() {
    return d3_lab_rgb(this.l, this.a, this.b);
  };
  function d3_lab_rgb(l, a, b) {
    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
    x = d3_lab_xyz(x) * d3_lab_X;
    y = d3_lab_xyz(y) * d3_lab_Y;
    z = d3_lab_xyz(z) * d3_lab_Z;
    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
  }
  function d3_lab_hcl(l, a, b) {
    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
  }
  function d3_lab_xyz(x) {
    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
  }
  function d3_xyz_lab(x) {
    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
  }
  function d3_xyz_rgb(r) {
    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
  }
  d3.rgb = d3_rgb;
  function d3_rgb(r, g, b) {
    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
  }
  function d3_rgbNumber(value) {
    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
  }
  function d3_rgbString(value) {
    return d3_rgbNumber(value) + "";
  }
  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
  d3_rgbPrototype.brighter = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    var r = this.r, g = this.g, b = this.b, i = 30;
    if (!r && !g && !b) return new d3_rgb(i, i, i);
    if (r && r < i) r = i;
    if (g && g < i) g = i;
    if (b && b < i) b = i;
    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
  };
  d3_rgbPrototype.darker = function(k) {
    k = Math.pow(.7, arguments.length ? k : 1);
    return new d3_rgb(k * this.r, k * this.g, k * this.b);
  };
  d3_rgbPrototype.hsl = function() {
    return d3_rgb_hsl(this.r, this.g, this.b);
  };
  d3_rgbPrototype.toString = function() {
    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
  };
  function d3_rgb_hex(v) {
    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
  }
  function d3_rgb_parse(format, rgb, hsl) {
    var r = 0, g = 0, b = 0, m1, m2, color;
    m1 = /([a-z]+)\((.*)\)/i.exec(format);
    if (m1) {
      m2 = m1[2].split(",");
      switch (m1[1]) {
       case "hsl":
        {
          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
        }

       case "rgb":
        {
          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
        }
      }
    }
    if (color = d3_rgb_names.get(format)) return rgb(color.r, color.g, color.b);
    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.substring(1), 16))) {
      if (format.length === 4) {
        r = (color & 3840) >> 4;
        r = r >> 4 | r;
        g = color & 240;
        g = g >> 4 | g;
        b = color & 15;
        b = b << 4 | b;
      } else if (format.length === 7) {
        r = (color & 16711680) >> 16;
        g = (color & 65280) >> 8;
        b = color & 255;
      }
    }
    return rgb(r, g, b);
  }
  function d3_rgb_hsl(r, g, b) {
    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
    if (d) {
      s = l < .5 ? d / (max + min) : d / (2 - max - min);
      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
      h *= 60;
    } else {
      h = NaN;
      s = l > 0 && l < 1 ? 0 : h;
    }
    return new d3_hsl(h, s, l);
  }
  function d3_rgb_lab(r, g, b) {
    r = d3_rgb_xyz(r);
    g = d3_rgb_xyz(g);
    b = d3_rgb_xyz(b);
    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
  }
  function d3_rgb_xyz(r) {
    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
  }
  function d3_rgb_parseNumber(c) {
    var f = parseFloat(c);
    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
  }
  var d3_rgb_names = d3.map({
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  });
  d3_rgb_names.forEach(function(key, value) {
    d3_rgb_names.set(key, d3_rgbNumber(value));
  });
  function d3_functor(v) {
    return typeof v === "function" ? v : function() {
      return v;
    };
  }
  d3.functor = d3_functor;
  function d3_identity(d) {
    return d;
  }
  d3.xhr = d3_xhrType(d3_identity);
  function d3_xhrType(response) {
    return function(url, mimeType, callback) {
      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
      mimeType = null;
      return d3_xhr(url, mimeType, response, callback);
    };
  }
  function d3_xhr(url, mimeType, response, callback) {
    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
    if (d3_window.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
      request.readyState > 3 && respond();
    };
    function respond() {
      var status = request.status, result;
      if (!status && request.responseText || status >= 200 && status < 300 || status === 304) {
        try {
          result = response.call(xhr, request);
        } catch (e) {
          dispatch.error.call(xhr, e);
          return;
        }
        dispatch.load.call(xhr, result);
      } else {
        dispatch.error.call(xhr, request);
      }
    }
    request.onprogress = function(event) {
      var o = d3.event;
      d3.event = event;
      try {
        dispatch.progress.call(xhr, request);
      } finally {
        d3.event = o;
      }
    };
    xhr.header = function(name, value) {
      name = (name + "").toLowerCase();
      if (arguments.length < 2) return headers[name];
      if (value == null) delete headers[name]; else headers[name] = value + "";
      return xhr;
    };
    xhr.mimeType = function(value) {
      if (!arguments.length) return mimeType;
      mimeType = value == null ? null : value + "";
      return xhr;
    };
    xhr.responseType = function(value) {
      if (!arguments.length) return responseType;
      responseType = value;
      return xhr;
    };
    xhr.response = function(value) {
      response = value;
      return xhr;
    };
    [ "get", "post" ].forEach(function(method) {
      xhr[method] = function() {
        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
      };
    });
    xhr.send = function(method, data, callback) {
      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
      request.open(method, url, true);
      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
      if (responseType != null) request.responseType = responseType;
      if (callback != null) xhr.on("error", callback).on("load", function(request) {
        callback(null, request);
      });
      dispatch.beforesend.call(xhr, request);
      request.send(data == null ? null : data);
      return xhr;
    };
    xhr.abort = function() {
      request.abort();
      return xhr;
    };
    d3.rebind(xhr, dispatch, "on");
    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
  }
  function d3_xhr_fixCallback(callback) {
    return callback.length === 1 ? function(error, request) {
      callback(error == null ? request : null);
    } : callback;
  }
  d3.dsv = function(delimiter, mimeType) {
    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
    function dsv(url, row, callback) {
      if (arguments.length < 3) callback = row, row = null;
      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
      xhr.row = function(_) {
        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
      };
      return xhr;
    }
    function response(request) {
      return dsv.parse(request.responseText);
    }
    function typedResponse(f) {
      return function(request) {
        return dsv.parse(request.responseText, f);
      };
    }
    dsv.parse = function(text, f) {
      var o;
      return dsv.parseRows(text, function(row, i) {
        if (o) return o(row, i - 1);
        var a = new Function("d", "return {" + row.map(function(name, i) {
          return JSON.stringify(name) + ": d[" + i + "]";
        }).join(",") + "}");
        o = f ? function(row, i) {
          return f(a(row), i);
        } : a;
      });
    };
    dsv.parseRows = function(text, f) {
      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
      function token() {
        if (I >= N) return EOF;
        if (eol) return eol = false, EOL;
        var j = I;
        if (text.charCodeAt(j) === 34) {
          var i = j;
          while (i++ < N) {
            if (text.charCodeAt(i) === 34) {
              if (text.charCodeAt(i + 1) !== 34) break;
              ++i;
            }
          }
          I = i + 2;
          var c = text.charCodeAt(i + 1);
          if (c === 13) {
            eol = true;
            if (text.charCodeAt(i + 2) === 10) ++I;
          } else if (c === 10) {
            eol = true;
          }
          return text.substring(j + 1, i).replace(/""/g, '"');
        }
        while (I < N) {
          var c = text.charCodeAt(I++), k = 1;
          if (c === 10) eol = true; else if (c === 13) {
            eol = true;
            if (text.charCodeAt(I) === 10) ++I, ++k;
          } else if (c !== delimiterCode) continue;
          return text.substring(j, I - k);
        }
        return text.substring(j);
      }
      while ((t = token()) !== EOF) {
        var a = [];
        while (t !== EOL && t !== EOF) {
          a.push(t);
          t = token();
        }
        if (f && !(a = f(a, n++))) continue;
        rows.push(a);
      }
      return rows;
    };
    dsv.format = function(rows) {
      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
      var fieldSet = new d3_Set(), fields = [];
      rows.forEach(function(row) {
        for (var field in row) {
          if (!fieldSet.has(field)) {
            fields.push(fieldSet.add(field));
          }
        }
      });
      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
        return fields.map(function(field) {
          return formatValue(row[field]);
        }).join(delimiter);
      })).join("\n");
    };
    dsv.formatRows = function(rows) {
      return rows.map(formatRow).join("\n");
    };
    function formatRow(row) {
      return row.map(formatValue).join(delimiter);
    }
    function formatValue(text) {
      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
    }
    return dsv;
  };
  d3.csv = d3.dsv(",", "text/csv");
  d3.tsv = d3.dsv(" ", "text/tab-separated-values");
  d3.touch = function(container, touches, identifier) {
    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
      if ((touch = touches[i]).identifier === identifier) {
        return d3_mousePoint(container, touch);
      }
    }
  };
  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_active, d3_timer_frame = d3_window[d3_vendorSymbol(d3_window, "requestAnimationFrame")] || function(callback) {
    setTimeout(callback, 17);
  };
  d3.timer = function(callback, delay, then) {
    var n = arguments.length;
    if (n < 2) delay = 0;
    if (n < 3) then = Date.now();
    var time = then + delay, timer = {
      c: callback,
      t: time,
      f: false,
      n: null
    };
    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
    d3_timer_queueTail = timer;
    if (!d3_timer_interval) {
      d3_timer_timeout = clearTimeout(d3_timer_timeout);
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  };
  function d3_timer_step() {
    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
    if (delay > 24) {
      if (isFinite(delay)) {
        clearTimeout(d3_timer_timeout);
        d3_timer_timeout = setTimeout(d3_timer_step, delay);
      }
      d3_timer_interval = 0;
    } else {
      d3_timer_interval = 1;
      d3_timer_frame(d3_timer_step);
    }
  }
  d3.timer.flush = function() {
    d3_timer_mark();
    d3_timer_sweep();
  };
  function d3_timer_mark() {
    var now = Date.now();
    d3_timer_active = d3_timer_queueHead;
    while (d3_timer_active) {
      if (now >= d3_timer_active.t) d3_timer_active.f = d3_timer_active.c(now - d3_timer_active.t);
      d3_timer_active = d3_timer_active.n;
    }
    return now;
  }
  function d3_timer_sweep() {
    var t0, t1 = d3_timer_queueHead, time = Infinity;
    while (t1) {
      if (t1.f) {
        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
      } else {
        if (t1.t < time) time = t1.t;
        t1 = (t0 = t1).n;
      }
    }
    d3_timer_queueTail = t0;
    return time;
  }
  function d3_format_precision(x, p) {
    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
  }
  d3.round = function(x, n) {
    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
  };
  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
  d3.formatPrefix = function(value, precision) {
    var i = 0;
    if (value) {
      if (value < 0) value *= -1;
      if (precision) value = d3.round(value, d3_format_precision(value, precision));
      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
    }
    return d3_formatPrefixes[8 + i / 3];
  };
  function d3_formatPrefix(d, i) {
    var k = Math.pow(10, abs(8 - i) * 3);
    return {
      scale: i > 8 ? function(d) {
        return d / k;
      } : function(d) {
        return d * k;
      },
      symbol: d
    };
  }
  function d3_locale_numberFormat(locale) {
    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping ? function(value) {
      var i = value.length, t = [], j = 0, g = locale_grouping[0];
      while (i > 0 && g > 0) {
        t.push(value.substring(i -= g, i + g));
        g = locale_grouping[j = (j + 1) % locale_grouping.length];
      }
      return t.reverse().join(locale_thousands);
    } : d3_identity;
    return function(specifier) {
      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false;
      if (precision) precision = +precision.substring(1);
      if (zfill || fill === "0" && align === "=") {
        zfill = fill = "0";
        align = "=";
        if (comma) width -= Math.floor((width - 1) / 4);
      }
      switch (type) {
       case "n":
        comma = true;
        type = "g";
        break;

       case "%":
        scale = 100;
        suffix = "%";
        type = "f";
        break;

       case "p":
        scale = 100;
        suffix = "%";
        type = "r";
        break;

       case "b":
       case "o":
       case "x":
       case "X":
        if (symbol === "#") prefix = "0" + type.toLowerCase();

       case "c":
       case "d":
        integer = true;
        precision = 0;
        break;

       case "s":
        scale = -1;
        type = "r";
        break;
      }
      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
      if (type == "r" && !precision) type = "g";
      if (precision != null) {
        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
      }
      type = d3_format_types.get(type) || d3_format_typeDefault;
      var zcomma = zfill && comma;
      return function(value) {
        var fullSuffix = suffix;
        if (integer && value % 1) return "";
        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign;
        if (scale < 0) {
          var unit = d3.formatPrefix(value, precision);
          value = unit.scale(value);
          fullSuffix = unit.symbol + suffix;
        } else {
          value *= scale;
        }
        value = type(value, precision);
        var i = value.lastIndexOf("."), before = i < 0 ? value : value.substring(0, i), after = i < 0 ? "" : locale_decimal + value.substring(i + 1);
        if (!zfill && comma) before = formatGroup(before);
        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
        if (zcomma) before = formatGroup(padding + before);
        negative += prefix;
        value = before + after;
        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
      };
    };
  }
  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
  var d3_format_types = d3.map({
    b: function(x) {
      return x.toString(2);
    },
    c: function(x) {
      return String.fromCharCode(x);
    },
    o: function(x) {
      return x.toString(8);
    },
    x: function(x) {
      return x.toString(16);
    },
    X: function(x) {
      return x.toString(16).toUpperCase();
    },
    g: function(x, p) {
      return x.toPrecision(p);
    },
    e: function(x, p) {
      return x.toExponential(p);
    },
    f: function(x, p) {
      return x.toFixed(p);
    },
    r: function(x, p) {
      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
    }
  });
  function d3_format_typeDefault(x) {
    return x + "";
  }
  var d3_time = d3.time = {}, d3_date = Date;
  function d3_date_utc() {
    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
  }
  d3_date_utc.prototype = {
    getDate: function() {
      return this._.getUTCDate();
    },
    getDay: function() {
      return this._.getUTCDay();
    },
    getFullYear: function() {
      return this._.getUTCFullYear();
    },
    getHours: function() {
      return this._.getUTCHours();
    },
    getMilliseconds: function() {
      return this._.getUTCMilliseconds();
    },
    getMinutes: function() {
      return this._.getUTCMinutes();
    },
    getMonth: function() {
      return this._.getUTCMonth();
    },
    getSeconds: function() {
      return this._.getUTCSeconds();
    },
    getTime: function() {
      return this._.getTime();
    },
    getTimezoneOffset: function() {
      return 0;
    },
    valueOf: function() {
      return this._.valueOf();
    },
    setDate: function() {
      d3_time_prototype.setUTCDate.apply(this._, arguments);
    },
    setDay: function() {
      d3_time_prototype.setUTCDay.apply(this._, arguments);
    },
    setFullYear: function() {
      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
    },
    setHours: function() {
      d3_time_prototype.setUTCHours.apply(this._, arguments);
    },
    setMilliseconds: function() {
      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
    },
    setMinutes: function() {
      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
    },
    setMonth: function() {
      d3_time_prototype.setUTCMonth.apply(this._, arguments);
    },
    setSeconds: function() {
      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
    },
    setTime: function() {
      d3_time_prototype.setTime.apply(this._, arguments);
    }
  };
  var d3_time_prototype = Date.prototype;
  function d3_time_interval(local, step, number) {
    function round(date) {
      var d0 = local(date), d1 = offset(d0, 1);
      return date - d0 < d1 - date ? d0 : d1;
    }
    function ceil(date) {
      step(date = local(new d3_date(date - 1)), 1);
      return date;
    }
    function offset(date, k) {
      step(date = new d3_date(+date), k);
      return date;
    }
    function range(t0, t1, dt) {
      var time = ceil(t0), times = [];
      if (dt > 1) {
        while (time < t1) {
          if (!(number(time) % dt)) times.push(new Date(+time));
          step(time, 1);
        }
      } else {
        while (time < t1) times.push(new Date(+time)), step(time, 1);
      }
      return times;
    }
    function range_utc(t0, t1, dt) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = t0;
        return range(utc, t1, dt);
      } finally {
        d3_date = Date;
      }
    }
    local.floor = local;
    local.round = round;
    local.ceil = ceil;
    local.offset = offset;
    local.range = range;
    var utc = local.utc = d3_time_interval_utc(local);
    utc.floor = utc;
    utc.round = d3_time_interval_utc(round);
    utc.ceil = d3_time_interval_utc(ceil);
    utc.offset = d3_time_interval_utc(offset);
    utc.range = range_utc;
    return local;
  }
  function d3_time_interval_utc(method) {
    return function(date, k) {
      try {
        d3_date = d3_date_utc;
        var utc = new d3_date_utc();
        utc._ = date;
        return method(utc, k)._;
      } finally {
        d3_date = Date;
      }
    };
  }
  d3_time.year = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setMonth(0, 1);
    return date;
  }, function(date, offset) {
    date.setFullYear(date.getFullYear() + offset);
  }, function(date) {
    return date.getFullYear();
  });
  d3_time.years = d3_time.year.range;
  d3_time.years.utc = d3_time.year.utc.range;
  d3_time.day = d3_time_interval(function(date) {
    var day = new d3_date(2e3, 0);
    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    return day;
  }, function(date, offset) {
    date.setDate(date.getDate() + offset);
  }, function(date) {
    return date.getDate() - 1;
  });
  d3_time.days = d3_time.day.range;
  d3_time.days.utc = d3_time.day.utc.range;
  d3_time.dayOfYear = function(date) {
    var year = d3_time.year(date);
    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
  };
  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
    i = 7 - i;
    var interval = d3_time[day] = d3_time_interval(function(date) {
      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
      return date;
    }, function(date, offset) {
      date.setDate(date.getDate() + Math.floor(offset) * 7);
    }, function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
    });
    d3_time[day + "s"] = interval.range;
    d3_time[day + "s"].utc = interval.utc.range;
    d3_time[day + "OfYear"] = function(date) {
      var day = d3_time.year(date).getDay();
      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
    };
  });
  d3_time.week = d3_time.sunday;
  d3_time.weeks = d3_time.sunday.range;
  d3_time.weeks.utc = d3_time.sunday.utc.range;
  d3_time.weekOfYear = d3_time.sundayOfYear;
  function d3_locale_timeFormat(locale) {
    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
    function d3_time_format(template) {
      var n = template.length;
      function format(date) {
        var string = [], i = -1, j = 0, c, p, f;
        while (++i < n) {
          if (template.charCodeAt(i) === 37) {
            string.push(template.substring(j, i));
            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
            string.push(c);
            j = i + 1;
          }
        }
        string.push(template.substring(j, i));
        return string.join("");
      }
      format.parse = function(string) {
        var d = {
          y: 1900,
          m: 0,
          d: 1,
          H: 0,
          M: 0,
          S: 0,
          L: 0,
          Z: null
        }, i = d3_time_parse(d, template, string, 0);
        if (i != string.length) return null;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("w" in d && ("W" in d || "U" in d)) {
          date.setFullYear(d.y, 0, 1);
          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
        } else date.setFullYear(d.y, d.m, d.d);
        date.setHours(d.H + Math.floor(d.Z / 100), d.M + d.Z % 100, d.S, d.L);
        return localZ ? date._ : date;
      };
      format.toString = function() {
        return template;
      };
      return format;
    }
    function d3_time_parse(date, template, string, j) {
      var c, p, t, i = 0, n = template.length, m = string.length;
      while (i < n) {
        if (j >= m) return -1;
        c = template.charCodeAt(i++);
        if (c === 37) {
          t = template.charAt(i++);
          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
          if (!p || (j = p(date, string, j)) < 0) return -1;
        } else if (c != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    d3_time_format.utc = function(template) {
      var local = d3_time_format(template);
      function format(date) {
        try {
          d3_date = d3_date_utc;
          var utc = new d3_date();
          utc._ = date;
          return local(utc);
        } finally {
          d3_date = Date;
        }
      }
      format.parse = function(string) {
        try {
          d3_date = d3_date_utc;
          var date = local.parse(string);
          return date && date._;
        } finally {
          d3_date = Date;
        }
      };
      format.toString = local.toString;
      return format;
    };
    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
    locale_periods.forEach(function(p, i) {
      d3_time_periodLookup.set(p.toLowerCase(), i);
    });
    var d3_time_formats = {
      a: function(d) {
        return locale_shortDays[d.getDay()];
      },
      A: function(d) {
        return locale_days[d.getDay()];
      },
      b: function(d) {
        return locale_shortMonths[d.getMonth()];
      },
      B: function(d) {
        return locale_months[d.getMonth()];
      },
      c: d3_time_format(locale_dateTime),
      d: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      e: function(d, p) {
        return d3_time_formatPad(d.getDate(), p, 2);
      },
      H: function(d, p) {
        return d3_time_formatPad(d.getHours(), p, 2);
      },
      I: function(d, p) {
        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
      },
      j: function(d, p) {
        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
      },
      L: function(d, p) {
        return d3_time_formatPad(d.getMilliseconds(), p, 3);
      },
      m: function(d, p) {
        return d3_time_formatPad(d.getMonth() + 1, p, 2);
      },
      M: function(d, p) {
        return d3_time_formatPad(d.getMinutes(), p, 2);
      },
      p: function(d) {
        return locale_periods[+(d.getHours() >= 12)];
      },
      S: function(d, p) {
        return d3_time_formatPad(d.getSeconds(), p, 2);
      },
      U: function(d, p) {
        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
      },
      w: function(d) {
        return d.getDay();
      },
      W: function(d, p) {
        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
      },
      x: d3_time_format(locale_date),
      X: d3_time_format(locale_time),
      y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
      },
      Y: function(d, p) {
        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
      },
      Z: d3_time_zone,
      "%": function() {
        return "%";
      }
    };
    var d3_time_parsers = {
      a: d3_time_parseWeekdayAbbrev,
      A: d3_time_parseWeekday,
      b: d3_time_parseMonthAbbrev,
      B: d3_time_parseMonth,
      c: d3_time_parseLocaleFull,
      d: d3_time_parseDay,
      e: d3_time_parseDay,
      H: d3_time_parseHour24,
      I: d3_time_parseHour24,
      j: d3_time_parseDayOfYear,
      L: d3_time_parseMilliseconds,
      m: d3_time_parseMonthNumber,
      M: d3_time_parseMinutes,
      p: d3_time_parseAmPm,
      S: d3_time_parseSeconds,
      U: d3_time_parseWeekNumberSunday,
      w: d3_time_parseWeekdayNumber,
      W: d3_time_parseWeekNumberMonday,
      x: d3_time_parseLocaleDate,
      X: d3_time_parseLocaleTime,
      y: d3_time_parseYear,
      Y: d3_time_parseFullYear,
      Z: d3_time_parseZone,
      "%": d3_time_parseLiteralPercent
    };
    function d3_time_parseWeekdayAbbrev(date, string, i) {
      d3_time_dayAbbrevRe.lastIndex = 0;
      var n = d3_time_dayAbbrevRe.exec(string.substring(i));
      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseWeekday(date, string, i) {
      d3_time_dayRe.lastIndex = 0;
      var n = d3_time_dayRe.exec(string.substring(i));
      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonthAbbrev(date, string, i) {
      d3_time_monthAbbrevRe.lastIndex = 0;
      var n = d3_time_monthAbbrevRe.exec(string.substring(i));
      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseMonth(date, string, i) {
      d3_time_monthRe.lastIndex = 0;
      var n = d3_time_monthRe.exec(string.substring(i));
      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function d3_time_parseLocaleFull(date, string, i) {
      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
    }
    function d3_time_parseLocaleDate(date, string, i) {
      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
    }
    function d3_time_parseLocaleTime(date, string, i) {
      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
    }
    function d3_time_parseAmPm(date, string, i) {
      var n = d3_time_periodLookup.get(string.substring(i, i += 2).toLowerCase());
      return n == null ? -1 : (date.p = n, i);
    }
    return d3_time_format;
  }
  var d3_time_formatPads = {
    "-": "",
    _: " ",
    "0": "0"
  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
  function d3_time_formatPad(value, fill, width) {
    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function d3_time_formatRe(names) {
    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
  }
  function d3_time_formatLookup(names) {
    var map = new d3_Map(), i = -1, n = names.length;
    while (++i < n) map.set(names[i].toLowerCase(), i);
    return map;
  }
  function d3_time_parseWeekdayNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 1));
    return n ? (date.w = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberSunday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.U = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseWeekNumberMonday(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i));
    return n ? (date.W = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseFullYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 4));
    return n ? (date.y = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
  }
  function d3_time_parseZone(date, string, i) {
    return /^[+-]\d{4}$/.test(string = string.substring(i, i + 5)) ? (date.Z = -string, 
    i + 5) : -1;
  }
  function d3_time_expandYear(d) {
    return d + (d > 68 ? 1900 : 2e3);
  }
  function d3_time_parseMonthNumber(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
  }
  function d3_time_parseDay(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.d = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseDayOfYear(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.j = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseHour24(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.H = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMinutes(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.M = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseSeconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 2));
    return n ? (date.S = +n[0], i + n[0].length) : -1;
  }
  function d3_time_parseMilliseconds(date, string, i) {
    d3_time_numberRe.lastIndex = 0;
    var n = d3_time_numberRe.exec(string.substring(i, i + 3));
    return n ? (date.L = +n[0], i + n[0].length) : -1;
  }
  function d3_time_zone(d) {
    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = ~~(abs(z) / 60), zm = abs(z) % 60;
    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
  }
  function d3_time_parseLiteralPercent(date, string, i) {
    d3_time_percentRe.lastIndex = 0;
    var n = d3_time_percentRe.exec(string.substring(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function d3_time_formatMulti(formats) {
    var n = formats.length, i = -1;
    while (++i < n) formats[i][0] = this(formats[i][0]);
    return function(date) {
      var i = 0, f = formats[i];
      while (!f[1](date)) f = formats[++i];
      return f[0](date);
    };
  }
  d3.locale = function(locale) {
    return {
      numberFormat: d3_locale_numberFormat(locale),
      timeFormat: d3_locale_timeFormat(locale)
    };
  };
  var d3_locale_enUS = d3.locale({
    decimal: ".",
    thousands: ",",
    grouping: [ 3 ],
    currency: [ "$", "" ],
    dateTime: "%a %b %e %X %Y",
    date: "%m/%d/%Y",
    time: "%H:%M:%S",
    periods: [ "AM", "PM" ],
    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
  });
  d3.format = d3_locale_enUS.numberFormat;
  d3.geo = {};
  function d3_adder() {}
  d3_adder.prototype = {
    s: 0,
    t: 0,
    add: function(y) {
      d3_adderSum(y, this.t, d3_adderTemp);
      d3_adderSum(d3_adderTemp.s, this.s, this);
      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
    },
    reset: function() {
      this.s = this.t = 0;
    },
    valueOf: function() {
      return this.s;
    }
  };
  var d3_adderTemp = new d3_adder();
  function d3_adderSum(a, b, o) {
    var x = o.s = a + b, bv = x - a, av = x - bv;
    o.t = a - av + (b - bv);
  }
  d3.geo.stream = function(object, listener) {
    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
      d3_geo_streamObjectType[object.type](object, listener);
    } else {
      d3_geo_streamGeometry(object, listener);
    }
  };
  function d3_geo_streamGeometry(geometry, listener) {
    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
      d3_geo_streamGeometryType[geometry.type](geometry, listener);
    }
  }
  var d3_geo_streamObjectType = {
    Feature: function(feature, listener) {
      d3_geo_streamGeometry(feature.geometry, listener);
    },
    FeatureCollection: function(object, listener) {
      var features = object.features, i = -1, n = features.length;
      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
    }
  };
  var d3_geo_streamGeometryType = {
    Sphere: function(object, listener) {
      listener.sphere();
    },
    Point: function(object, listener) {
      object = object.coordinates;
      listener.point(object[0], object[1], object[2]);
    },
    MultiPoint: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
    },
    LineString: function(object, listener) {
      d3_geo_streamLine(object.coordinates, listener, 0);
    },
    MultiLineString: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
    },
    Polygon: function(object, listener) {
      d3_geo_streamPolygon(object.coordinates, listener);
    },
    MultiPolygon: function(object, listener) {
      var coordinates = object.coordinates, i = -1, n = coordinates.length;
      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
    },
    GeometryCollection: function(object, listener) {
      var geometries = object.geometries, i = -1, n = geometries.length;
      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
    }
  };
  function d3_geo_streamLine(coordinates, listener, closed) {
    var i = -1, n = coordinates.length - closed, coordinate;
    listener.lineStart();
    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
    listener.lineEnd();
  }
  function d3_geo_streamPolygon(coordinates, listener) {
    var i = -1, n = coordinates.length;
    listener.polygonStart();
    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
    listener.polygonEnd();
  }
  d3.geo.area = function(object) {
    d3_geo_areaSum = 0;
    d3.geo.stream(object, d3_geo_area);
    return d3_geo_areaSum;
  };
  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
  var d3_geo_area = {
    sphere: function() {
      d3_geo_areaSum += 4 * π;
    },
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_areaRingSum.reset();
      d3_geo_area.lineStart = d3_geo_areaRingStart;
    },
    polygonEnd: function() {
      var area = 2 * d3_geo_areaRingSum;
      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
    }
  };
  function d3_geo_areaRingStart() {
    var λ00, φ00, λ0, cosφ0, sinφ0;
    d3_geo_area.point = function(λ, φ) {
      d3_geo_area.point = nextPoint;
      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
      sinφ0 = Math.sin(φ);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      φ = φ * d3_radians / 2 + π / 4;
      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
      d3_geo_areaRingSum.add(Math.atan2(v, u));
      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
    }
    d3_geo_area.lineEnd = function() {
      nextPoint(λ00, φ00);
    };
  }
  function d3_geo_cartesian(spherical) {
    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
  }
  function d3_geo_cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function d3_geo_cartesianCross(a, b) {
    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
  }
  function d3_geo_cartesianAdd(a, b) {
    a[0] += b[0];
    a[1] += b[1];
    a[2] += b[2];
  }
  function d3_geo_cartesianScale(vector, k) {
    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
  }
  function d3_geo_cartesianNormalize(d) {
    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
    d[0] /= l;
    d[1] /= l;
    d[2] /= l;
  }
  function d3_geo_spherical(cartesian) {
    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
  }
  function d3_geo_sphericalEqual(a, b) {
    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
  }
  d3.geo.bounds = function() {
    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
    var bound = {
      point: point,
      lineStart: lineStart,
      lineEnd: lineEnd,
      polygonStart: function() {
        bound.point = ringPoint;
        bound.lineStart = ringStart;
        bound.lineEnd = ringEnd;
        dλSum = 0;
        d3_geo_area.polygonStart();
      },
      polygonEnd: function() {
        d3_geo_area.polygonEnd();
        bound.point = point;
        bound.lineStart = lineStart;
        bound.lineEnd = lineEnd;
        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
        range[0] = λ0, range[1] = λ1;
      }
    };
    function point(λ, φ) {
      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
      if (φ < φ0) φ0 = φ;
      if (φ > φ1) φ1 = φ;
    }
    function linePoint(λ, φ) {
      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
      if (p0) {
        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
        d3_geo_cartesianNormalize(inflection);
        inflection = d3_geo_spherical(inflection);
        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = inflection[1] * d3_degrees;
          if (φi > φ1) φ1 = φi;
        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
          var φi = -inflection[1] * d3_degrees;
          if (φi < φ0) φ0 = φi;
        } else {
          if (φ < φ0) φ0 = φ;
          if (φ > φ1) φ1 = φ;
        }
        if (antimeridian) {
          if (λ < λ_) {
            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
          } else {
            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
          }
        } else {
          if (λ1 >= λ0) {
            if (λ < λ0) λ0 = λ;
            if (λ > λ1) λ1 = λ;
          } else {
            if (λ > λ_) {
              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
            } else {
              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
            }
          }
        }
      } else {
        point(λ, φ);
      }
      p0 = p, λ_ = λ;
    }
    function lineStart() {
      bound.point = linePoint;
    }
    function lineEnd() {
      range[0] = λ0, range[1] = λ1;
      bound.point = point;
      p0 = null;
    }
    function ringPoint(λ, φ) {
      if (p0) {
        var dλ = λ - λ_;
        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
      } else λ__ = λ, φ__ = φ;
      d3_geo_area.point(λ, φ);
      linePoint(λ, φ);
    }
    function ringStart() {
      d3_geo_area.lineStart();
    }
    function ringEnd() {
      ringPoint(λ__, φ__);
      d3_geo_area.lineEnd();
      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
      range[0] = λ0, range[1] = λ1;
      p0 = null;
    }
    function angle(λ0, λ1) {
      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
    }
    function compareRanges(a, b) {
      return a[0] - b[0];
    }
    function withinRange(x, range) {
      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    return function(feature) {
      φ1 = λ1 = -(λ0 = φ0 = Infinity);
      ranges = [];
      d3.geo.stream(feature, bound);
      var n = ranges.length;
      if (n) {
        ranges.sort(compareRanges);
        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
          b = ranges[i];
          if (withinRange(b[0], a) || withinRange(b[1], a)) {
            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
          } else {
            merged.push(a = b);
          }
        }
        var best = -Infinity, dλ;
        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
          b = merged[i];
          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
        }
      }
      ranges = range = null;
      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
    };
  }();
  d3.geo.centroid = function(object) {
    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
    d3.geo.stream(object, d3_geo_centroid);
    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
    if (m < ε2) {
      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
      m = x * x + y * y + z * z;
      if (m < ε2) return [ NaN, NaN ];
    }
    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
  };
  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
  var d3_geo_centroid = {
    sphere: d3_noop,
    point: d3_geo_centroidPoint,
    lineStart: d3_geo_centroidLineStart,
    lineEnd: d3_geo_centroidLineEnd,
    polygonStart: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
    }
  };
  function d3_geo_centroidPoint(λ, φ) {
    λ *= d3_radians;
    var cosφ = Math.cos(φ *= d3_radians);
    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
  }
  function d3_geo_centroidPointXYZ(x, y, z) {
    ++d3_geo_centroidW0;
    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
  }
  function d3_geo_centroidLineStart() {
    var x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroid.point = nextPoint;
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_geo_centroidLineEnd() {
    d3_geo_centroid.point = d3_geo_centroidPoint;
  }
  function d3_geo_centroidRingStart() {
    var λ00, φ00, x0, y0, z0;
    d3_geo_centroid.point = function(λ, φ) {
      λ00 = λ, φ00 = φ;
      d3_geo_centroid.point = nextPoint;
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians);
      x0 = cosφ * Math.cos(λ);
      y0 = cosφ * Math.sin(λ);
      z0 = Math.sin(φ);
      d3_geo_centroidPointXYZ(x0, y0, z0);
    };
    d3_geo_centroid.lineEnd = function() {
      nextPoint(λ00, φ00);
      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
      d3_geo_centroid.point = d3_geo_centroidPoint;
    };
    function nextPoint(λ, φ) {
      λ *= d3_radians;
      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
      d3_geo_centroidX2 += v * cx;
      d3_geo_centroidY2 += v * cy;
      d3_geo_centroidZ2 += v * cz;
      d3_geo_centroidW1 += w;
      d3_geo_centroidX1 += w * (x0 + (x0 = x));
      d3_geo_centroidY1 += w * (y0 + (y0 = y));
      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
      d3_geo_centroidPointXYZ(x0, y0, z0);
    }
  }
  function d3_true() {
    return true;
  }
  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
    var subject = [], clip = [];
    segments.forEach(function(segment) {
      if ((n = segment.length - 1) <= 0) return;
      var n, p0 = segment[0], p1 = segment[n];
      if (d3_geo_sphericalEqual(p0, p1)) {
        listener.lineStart();
        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
        listener.lineEnd();
        return;
      }
      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
      a.o = b;
      subject.push(a);
      clip.push(b);
      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
      a.o = b;
      subject.push(a);
      clip.push(b);
    });
    clip.sort(compare);
    d3_geo_clipPolygonLinkCircular(subject);
    d3_geo_clipPolygonLinkCircular(clip);
    if (!subject.length) return;
    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
      clip[i].e = entry = !entry;
    }
    var start = subject[0], points, point;
    while (1) {
      var current = start, isSubject = true;
      while (current.v) if ((current = current.n) === start) return;
      points = current.z;
      listener.lineStart();
      do {
        current.v = current.o.v = true;
        if (current.e) {
          if (isSubject) {
            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.n.x, 1, listener);
          }
          current = current.n;
        } else {
          if (isSubject) {
            points = current.p.z;
            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
          } else {
            interpolate(current.x, current.p.x, -1, listener);
          }
          current = current.p;
        }
        current = current.o;
        points = current.z;
        isSubject = !isSubject;
      } while (!current.v);
      listener.lineEnd();
    }
  }
  function d3_geo_clipPolygonLinkCircular(array) {
    if (!(n = array.length)) return;
    var n, i = 0, a = array[0], b;
    while (++i < n) {
      a.n = b = array[i];
      b.p = a;
      a = b;
    }
    a.n = b = array[0];
    b.p = a;
  }
  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
    this.x = point;
    this.z = points;
    this.o = other;
    this.e = entry;
    this.v = false;
    this.n = this.p = null;
  }
  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
    return function(rotate, listener) {
      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          clip.point = pointRing;
          clip.lineStart = ringStart;
          clip.lineEnd = ringEnd;
          segments = [];
          polygon = [];
        },
        polygonEnd: function() {
          clip.point = point;
          clip.lineStart = lineStart;
          clip.lineEnd = lineEnd;
          segments = d3.merge(segments);
          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
          if (segments.length) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
          } else if (clipStartInside) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            interpolate(null, null, 1, listener);
            listener.lineEnd();
          }
          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
          segments = polygon = null;
        },
        sphere: function() {
          listener.polygonStart();
          listener.lineStart();
          interpolate(null, null, 1, listener);
          listener.lineEnd();
          listener.polygonEnd();
        }
      };
      function point(λ, φ) {
        var point = rotate(λ, φ);
        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
      }
      function pointLine(λ, φ) {
        var point = rotate(λ, φ);
        line.point(point[0], point[1]);
      }
      function lineStart() {
        clip.point = pointLine;
        line.lineStart();
      }
      function lineEnd() {
        clip.point = point;
        line.lineEnd();
      }
      var segments;
      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
      function pointRing(λ, φ) {
        ring.push([ λ, φ ]);
        var point = rotate(λ, φ);
        ringListener.point(point[0], point[1]);
      }
      function ringStart() {
        ringListener.lineStart();
        ring = [];
      }
      function ringEnd() {
        pointRing(ring[0][0], ring[0][1]);
        ringListener.lineEnd();
        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
        ring.pop();
        polygon.push(ring);
        ring = null;
        if (!n) return;
        if (clean & 1) {
          segment = ringSegments[0];
          var n = segment.length - 1, i = -1, point;
          if (n > 0) {
            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
            listener.lineStart();
            while (++i < n) listener.point((point = segment[i])[0], point[1]);
            listener.lineEnd();
          }
          return;
        }
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
      }
      return clip;
    };
  }
  function d3_geo_clipSegmentLength1(segment) {
    return segment.length > 1;
  }
  function d3_geo_clipBufferListener() {
    var lines = [], line;
    return {
      lineStart: function() {
        lines.push(line = []);
      },
      point: function(λ, φ) {
        line.push([ λ, φ ]);
      },
      lineEnd: d3_noop,
      buffer: function() {
        var buffer = lines;
        lines = [];
        line = null;
        return buffer;
      },
      rejoin: function() {
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
      }
    };
  }
  function d3_geo_clipSort(a, b) {
    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
  }
  function d3_geo_pointInPolygon(point, polygon) {
    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
    d3_geo_areaRingSum.reset();
    for (var i = 0, n = polygon.length; i < n; ++i) {
      var ring = polygon[i], m = ring.length;
      if (!m) continue;
      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
      while (true) {
        if (j === m) j = 0;
        point = ring[j];
        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
          d3_geo_cartesianNormalize(arc);
          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
          d3_geo_cartesianNormalize(intersection);
          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
          }
        }
        if (!j++) break;
        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
      }
    }
    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < 0) ^ winding & 1;
  }
  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
  function d3_geo_clipAntimeridianLine(listener) {
    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
    return {
      lineStart: function() {
        listener.lineStart();
        clean = 1;
      },
      point: function(λ1, φ1) {
        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
        if (abs(dλ - π) < ε) {
          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          listener.point(λ1, φ0);
          clean = 0;
        } else if (sλ0 !== sλ1 && dλ >= π) {
          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
          listener.point(sλ0, φ0);
          listener.lineEnd();
          listener.lineStart();
          listener.point(sλ1, φ0);
          clean = 0;
        }
        listener.point(λ0 = λ1, φ0 = φ1);
        sλ0 = sλ1;
      },
      lineEnd: function() {
        listener.lineEnd();
        λ0 = φ0 = NaN;
      },
      clean: function() {
        return 2 - clean;
      }
    };
  }
  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
  }
  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
    var φ;
    if (from == null) {
      φ = direction * halfπ;
      listener.point(-π, φ);
      listener.point(0, φ);
      listener.point(π, φ);
      listener.point(π, 0);
      listener.point(π, -φ);
      listener.point(0, -φ);
      listener.point(-π, -φ);
      listener.point(-π, 0);
      listener.point(-π, φ);
    } else if (abs(from[0] - to[0]) > ε) {
      var s = from[0] < to[0] ? π : -π;
      φ = direction * s / 2;
      listener.point(-s, φ);
      listener.point(0, φ);
      listener.point(s, φ);
    } else {
      listener.point(to[0], to[1]);
    }
  }
  function d3_geo_clipCircle(radius) {
    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
    function visible(λ, φ) {
      return Math.cos(λ) * Math.cos(φ) > cr;
    }
    function clipLine(listener) {
      var point0, c0, v0, v00, clean;
      return {
        lineStart: function() {
          v00 = v0 = false;
          clean = 1;
        },
        point: function(λ, φ) {
          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
          if (!point0 && (v00 = v0 = v)) listener.lineStart();
          if (v !== v0) {
            point2 = intersect(point0, point1);
            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
              point1[0] += ε;
              point1[1] += ε;
              v = visible(point1[0], point1[1]);
            }
          }
          if (v !== v0) {
            clean = 0;
            if (v) {
              listener.lineStart();
              point2 = intersect(point1, point0);
              listener.point(point2[0], point2[1]);
            } else {
              point2 = intersect(point0, point1);
              listener.point(point2[0], point2[1]);
              listener.lineEnd();
            }
            point0 = point2;
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            var t;
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0;
              if (smallRadius) {
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
              } else {
                listener.point(t[1][0], t[1][1]);
                listener.lineEnd();
                listener.lineStart();
                listener.point(t[0][0], t[0][1]);
              }
            }
          }
          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
            listener.point(point1[0], point1[1]);
          }
          point0 = point1, v0 = v, c0 = c;
        },
        lineEnd: function() {
          if (v0) listener.lineEnd();
          point0 = null;
        },
        clean: function() {
          return clean | (v00 && v0) << 1;
        }
      };
    }
    function intersect(a, b, two) {
      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
      if (!determinant) return !two && a;
      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
      d3_geo_cartesianAdd(A, B);
      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
      if (t2 < 0) return;
      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
      d3_geo_cartesianAdd(q, A);
      q = d3_geo_spherical(q);
      if (!two) return q;
      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
        d3_geo_cartesianAdd(q1, A);
        return [ q, d3_geo_spherical(q1) ];
      }
    }
    function code(λ, φ) {
      var r = smallRadius ? radius : π - radius, code = 0;
      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
      return code;
    }
  }
  function d3_geom_clipLine(x0, y0, x1, y1) {
    return function(line) {
      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
      r = x0 - ax;
      if (!dx && r > 0) return;
      r /= dx;
      if (dx < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dx > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = x1 - ax;
      if (!dx && r < 0) return;
      r /= dx;
      if (dx < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dx > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      r = y0 - ay;
      if (!dy && r > 0) return;
      r /= dy;
      if (dy < 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      } else if (dy > 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      }
      r = y1 - ay;
      if (!dy && r < 0) return;
      r /= dy;
      if (dy < 0) {
        if (r > t1) return;
        if (r > t0) t0 = r;
      } else if (dy > 0) {
        if (r < t0) return;
        if (r < t1) t1 = r;
      }
      if (t0 > 0) line.a = {
        x: ax + t0 * dx,
        y: ay + t0 * dy
      };
      if (t1 < 1) line.b = {
        x: ax + t1 * dx,
        y: ay + t1 * dy
      };
      return line;
    };
  }
  var d3_geo_clipExtentMAX = 1e9;
  d3.geo.clipExtent = function() {
    var x0, y0, x1, y1, stream, clip, clipExtent = {
      stream: function(output) {
        if (stream) stream.valid = false;
        stream = clip(output);
        stream.valid = true;
        return stream;
      },
      extent: function(_) {
        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
        if (stream) stream.valid = false, stream = null;
        return clipExtent;
      }
    };
    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
  };
  function d3_geo_clipExtent(x0, y0, x1, y1) {
    return function(listener) {
      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          listener = bufferListener;
          segments = [];
          polygon = [];
          clean = true;
        },
        polygonEnd: function() {
          listener = listener_;
          segments = d3.merge(segments);
          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
          if (inside || visible) {
            listener.polygonStart();
            if (inside) {
              listener.lineStart();
              interpolate(null, null, 1, listener);
              listener.lineEnd();
            }
            if (visible) {
              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
            }
            listener.polygonEnd();
          }
          segments = polygon = ring = null;
        }
      };
      function insidePolygon(p) {
        var wn = 0, n = polygon.length, y = p[1];
        for (var i = 0; i < n; ++i) {
          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
            b = v[j];
            if (a[1] <= y) {
              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
            } else {
              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
            }
            a = b;
          }
        }
        return wn !== 0;
      }
      function interpolate(from, to, direction, listener) {
        var a = 0, a1 = 0;
        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
          do {
            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
          } while ((a = (a + direction + 4) % 4) !== a1);
        } else {
          listener.point(to[0], to[1]);
        }
      }
      function pointVisible(x, y) {
        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
      }
      function point(x, y) {
        if (pointVisible(x, y)) listener.point(x, y);
      }
      var x__, y__, v__, x_, y_, v_, first, clean;
      function lineStart() {
        clip.point = linePoint;
        if (polygon) polygon.push(ring = []);
        first = true;
        v_ = false;
        x_ = y_ = NaN;
      }
      function lineEnd() {
        if (segments) {
          linePoint(x__, y__);
          if (v__ && v_) bufferListener.rejoin();
          segments.push(bufferListener.buffer());
        }
        clip.point = point;
        if (v_) listener.lineEnd();
      }
      function linePoint(x, y) {
        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
        var v = pointVisible(x, y);
        if (polygon) ring.push([ x, y ]);
        if (first) {
          x__ = x, y__ = y, v__ = v;
          first = false;
          if (v) {
            listener.lineStart();
            listener.point(x, y);
          }
        } else {
          if (v && v_) listener.point(x, y); else {
            var l = {
              a: {
                x: x_,
                y: y_
              },
              b: {
                x: x,
                y: y
              }
            };
            if (clipLine(l)) {
              if (!v_) {
                listener.lineStart();
                listener.point(l.a.x, l.a.y);
              }
              listener.point(l.b.x, l.b.y);
              if (!v) listener.lineEnd();
              clean = false;
            } else if (v) {
              listener.lineStart();
              listener.point(x, y);
              clean = false;
            }
          }
        }
        x_ = x, y_ = y, v_ = v;
      }
      return clip;
    };
    function corner(p, direction) {
      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
    }
    function compare(a, b) {
      return comparePoints(a.x, b.x);
    }
    function comparePoints(a, b) {
      var ca = corner(a, 1), cb = corner(b, 1);
      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
    }
  }
  function d3_geo_compose(a, b) {
    function compose(x, y) {
      return x = a(x, y), b(x[0], x[1]);
    }
    if (a.invert && b.invert) compose.invert = function(x, y) {
      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
    };
    return compose;
  }
  function d3_geo_conic(projectAt) {
    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
    p.parallels = function(_) {
      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
    };
    return p;
  }
  function d3_geo_conicEqualArea(φ0, φ1) {
    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
    function forward(λ, φ) {
      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = ρ0 - y;
      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
    };
    return forward;
  }
  (d3.geo.conicEqualArea = function() {
    return d3_geo_conic(d3_geo_conicEqualArea);
  }).raw = d3_geo_conicEqualArea;
  d3.geo.albers = function() {
    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
  };
  d3.geo.albersUsa = function() {
    var lower48 = d3.geo.albers();
    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
    var point, pointStream = {
      point: function(x, y) {
        point = [ x, y ];
      }
    }, lower48Point, alaskaPoint, hawaiiPoint;
    function albersUsa(coordinates) {
      var x = coordinates[0], y = coordinates[1];
      point = null;
      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
      return point;
    }
    albersUsa.invert = function(coordinates) {
      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
    };
    albersUsa.stream = function(stream) {
      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
      return {
        point: function(x, y) {
          lower48Stream.point(x, y);
          alaskaStream.point(x, y);
          hawaiiStream.point(x, y);
        },
        sphere: function() {
          lower48Stream.sphere();
          alaskaStream.sphere();
          hawaiiStream.sphere();
        },
        lineStart: function() {
          lower48Stream.lineStart();
          alaskaStream.lineStart();
          hawaiiStream.lineStart();
        },
        lineEnd: function() {
          lower48Stream.lineEnd();
          alaskaStream.lineEnd();
          hawaiiStream.lineEnd();
        },
        polygonStart: function() {
          lower48Stream.polygonStart();
          alaskaStream.polygonStart();
          hawaiiStream.polygonStart();
        },
        polygonEnd: function() {
          lower48Stream.polygonEnd();
          alaskaStream.polygonEnd();
          hawaiiStream.polygonEnd();
        }
      };
    };
    albersUsa.precision = function(_) {
      if (!arguments.length) return lower48.precision();
      lower48.precision(_);
      alaska.precision(_);
      hawaii.precision(_);
      return albersUsa;
    };
    albersUsa.scale = function(_) {
      if (!arguments.length) return lower48.scale();
      lower48.scale(_);
      alaska.scale(_ * .35);
      hawaii.scale(_);
      return albersUsa.translate(lower48.translate());
    };
    albersUsa.translate = function(_) {
      if (!arguments.length) return lower48.translate();
      var k = lower48.scale(), x = +_[0], y = +_[1];
      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
      return albersUsa;
    };
    return albersUsa.scale(1070);
  };
  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
    point: d3_noop,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: function() {
      d3_geo_pathAreaPolygon = 0;
      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
    }
  };
  function d3_geo_pathAreaRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathArea.point = function(x, y) {
      d3_geo_pathArea.point = nextPoint;
      x00 = x0 = x, y00 = y0 = y;
    };
    function nextPoint(x, y) {
      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
      x0 = x, y0 = y;
    }
    d3_geo_pathArea.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
  var d3_geo_pathBounds = {
    point: d3_geo_pathBoundsPoint,
    lineStart: d3_noop,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_pathBoundsPoint(x, y) {
    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
  }
  function d3_geo_pathBuffer() {
    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointCircle = d3_geo_pathBufferCircle(_);
        return stream;
      },
      result: function() {
        if (buffer.length) {
          var result = buffer.join("");
          buffer = [];
          return result;
        }
      }
    };
    function point(x, y) {
      buffer.push("M", x, ",", y, pointCircle);
    }
    function pointLineStart(x, y) {
      buffer.push("M", x, ",", y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      buffer.push("L", x, ",", y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      buffer.push("Z");
    }
    return stream;
  }
  function d3_geo_pathBufferCircle(radius) {
    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
  }
  var d3_geo_pathCentroid = {
    point: d3_geo_pathCentroidPoint,
    lineStart: d3_geo_pathCentroidLineStart,
    lineEnd: d3_geo_pathCentroidLineEnd,
    polygonStart: function() {
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
    },
    polygonEnd: function() {
      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
    }
  };
  function d3_geo_pathCentroidPoint(x, y) {
    d3_geo_centroidX0 += x;
    d3_geo_centroidY0 += y;
    ++d3_geo_centroidZ0;
  }
  function d3_geo_pathCentroidLineStart() {
    var x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
  }
  function d3_geo_pathCentroidLineEnd() {
    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
  }
  function d3_geo_pathCentroidRingStart() {
    var x00, y00, x0, y0;
    d3_geo_pathCentroid.point = function(x, y) {
      d3_geo_pathCentroid.point = nextPoint;
      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
    };
    function nextPoint(x, y) {
      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
      d3_geo_centroidX1 += z * (x0 + x) / 2;
      d3_geo_centroidY1 += z * (y0 + y) / 2;
      d3_geo_centroidZ1 += z;
      z = y0 * x - x0 * y;
      d3_geo_centroidX2 += z * (x0 + x);
      d3_geo_centroidY2 += z * (y0 + y);
      d3_geo_centroidZ2 += z * 3;
      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
    }
    d3_geo_pathCentroid.lineEnd = function() {
      nextPoint(x00, y00);
    };
  }
  function d3_geo_pathContext(context) {
    var pointRadius = 4.5;
    var stream = {
      point: point,
      lineStart: function() {
        stream.point = pointLineStart;
      },
      lineEnd: lineEnd,
      polygonStart: function() {
        stream.lineEnd = lineEndPolygon;
      },
      polygonEnd: function() {
        stream.lineEnd = lineEnd;
        stream.point = point;
      },
      pointRadius: function(_) {
        pointRadius = _;
        return stream;
      },
      result: d3_noop
    };
    function point(x, y) {
      context.moveTo(x, y);
      context.arc(x, y, pointRadius, 0, τ);
    }
    function pointLineStart(x, y) {
      context.moveTo(x, y);
      stream.point = pointLine;
    }
    function pointLine(x, y) {
      context.lineTo(x, y);
    }
    function lineEnd() {
      stream.point = point;
    }
    function lineEndPolygon() {
      context.closePath();
    }
    return stream;
  }
  function d3_geo_resample(project) {
    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
    function resample(stream) {
      return (maxDepth ? resampleRecursive : resampleNone)(stream);
    }
    function resampleNone(stream) {
      return d3_geo_transformPoint(stream, function(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      });
    }
    function resampleRecursive(stream) {
      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
      var resample = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function() {
          stream.polygonStart();
          resample.lineStart = ringStart;
        },
        polygonEnd: function() {
          stream.polygonEnd();
          resample.lineStart = lineStart;
        }
      };
      function point(x, y) {
        x = project(x, y);
        stream.point(x[0], x[1]);
      }
      function lineStart() {
        x0 = NaN;
        resample.point = linePoint;
        stream.lineStart();
      }
      function linePoint(λ, φ) {
        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
        stream.point(x0, y0);
      }
      function lineEnd() {
        resample.point = point;
        stream.lineEnd();
      }
      function ringStart() {
        lineStart();
        resample.point = ringPoint;
        resample.lineEnd = ringEnd;
      }
      function ringPoint(λ, φ) {
        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
        resample.point = linePoint;
      }
      function ringEnd() {
        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
        resample.lineEnd = lineEnd;
        lineEnd();
      }
      return resample;
    }
    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
      if (d2 > 4 * δ2 && depth--) {
        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
          stream.point(x2, y2);
          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
        }
      }
    }
    resample.precision = function(_) {
      if (!arguments.length) return Math.sqrt(δ2);
      maxDepth = (δ2 = _ * _) > 0 && 16;
      return resample;
    };
    return resample;
  }
  d3.geo.path = function() {
    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
    function path(object) {
      if (object) {
        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
        d3.geo.stream(object, cacheStream);
      }
      return contextStream.result();
    }
    path.area = function(object) {
      d3_geo_pathAreaSum = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathArea));
      return d3_geo_pathAreaSum;
    };
    path.centroid = function(object) {
      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
    };
    path.bounds = function(object) {
      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
    };
    path.projection = function(_) {
      if (!arguments.length) return projection;
      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
      return reset();
    };
    path.context = function(_) {
      if (!arguments.length) return context;
      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
      return reset();
    };
    path.pointRadius = function(_) {
      if (!arguments.length) return pointRadius;
      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
      return path;
    };
    function reset() {
      cacheStream = null;
      return path;
    }
    return path.projection(d3.geo.albersUsa()).context(null);
  };
  function d3_geo_pathProjectStream(project) {
    var resample = d3_geo_resample(function(x, y) {
      return project([ x * d3_degrees, y * d3_degrees ]);
    });
    return function(stream) {
      return d3_geo_projectionRadians(resample(stream));
    };
  }
  d3.geo.transform = function(methods) {
    return {
      stream: function(stream) {
        var transform = new d3_geo_transform(stream);
        for (var k in methods) transform[k] = methods[k];
        return transform;
      }
    };
  };
  function d3_geo_transform(stream) {
    this.stream = stream;
  }
  d3_geo_transform.prototype = {
    point: function(x, y) {
      this.stream.point(x, y);
    },
    sphere: function() {
      this.stream.sphere();
    },
    lineStart: function() {
      this.stream.lineStart();
    },
    lineEnd: function() {
      this.stream.lineEnd();
    },
    polygonStart: function() {
      this.stream.polygonStart();
    },
    polygonEnd: function() {
      this.stream.polygonEnd();
    }
  };
  function d3_geo_transformPoint(stream, point) {
    return {
      point: point,
      sphere: function() {
        stream.sphere();
      },
      lineStart: function() {
        stream.lineStart();
      },
      lineEnd: function() {
        stream.lineEnd();
      },
      polygonStart: function() {
        stream.polygonStart();
      },
      polygonEnd: function() {
        stream.polygonEnd();
      }
    };
  }
  d3.geo.projection = d3_geo_projection;
  d3.geo.projectionMutator = d3_geo_projectionMutator;
  function d3_geo_projection(project) {
    return d3_geo_projectionMutator(function() {
      return project;
    })();
  }
  function d3_geo_projectionMutator(projectAt) {
    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
      x = project(x, y);
      return [ x[0] * k + δx, δy - x[1] * k ];
    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
    function projection(point) {
      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
      return [ point[0] * k + δx, δy - point[1] * k ];
    }
    function invert(point) {
      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
    }
    projection.stream = function(output) {
      if (stream) stream.valid = false;
      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
      stream.valid = true;
      return stream;
    };
    projection.clipAngle = function(_) {
      if (!arguments.length) return clipAngle;
      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
      return invalidate();
    };
    projection.clipExtent = function(_) {
      if (!arguments.length) return clipExtent;
      clipExtent = _;
      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
      return invalidate();
    };
    projection.scale = function(_) {
      if (!arguments.length) return k;
      k = +_;
      return reset();
    };
    projection.translate = function(_) {
      if (!arguments.length) return [ x, y ];
      x = +_[0];
      y = +_[1];
      return reset();
    };
    projection.center = function(_) {
      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
      λ = _[0] % 360 * d3_radians;
      φ = _[1] % 360 * d3_radians;
      return reset();
    };
    projection.rotate = function(_) {
      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
      δλ = _[0] % 360 * d3_radians;
      δφ = _[1] % 360 * d3_radians;
      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
      return reset();
    };
    d3.rebind(projection, projectResample, "precision");
    function reset() {
      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
      var center = project(λ, φ);
      δx = x - center[0] * k;
      δy = y + center[1] * k;
      return invalidate();
    }
    function invalidate() {
      if (stream) stream.valid = false, stream = null;
      return projection;
    }
    return function() {
      project = projectAt.apply(this, arguments);
      projection.invert = project.invert && invert;
      return reset();
    };
  }
  function d3_geo_projectionRadians(stream) {
    return d3_geo_transformPoint(stream, function(x, y) {
      stream.point(x * d3_radians, y * d3_radians);
    });
  }
  function d3_geo_equirectangular(λ, φ) {
    return [ λ, φ ];
  }
  (d3.geo.equirectangular = function() {
    return d3_geo_projection(d3_geo_equirectangular);
  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
  d3.geo.rotation = function(rotate) {
    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    }
    forward.invert = function(coordinates) {
      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
    };
    return forward;
  };
  function d3_geo_identityRotation(λ, φ) {
    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
  }
  d3_geo_identityRotation.invert = d3_geo_equirectangular;
  function d3_geo_rotation(δλ, δφ, δγ) {
    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
  }
  function d3_geo_forwardRotationλ(δλ) {
    return function(λ, φ) {
      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
    };
  }
  function d3_geo_rotationλ(δλ) {
    var rotation = d3_geo_forwardRotationλ(δλ);
    rotation.invert = d3_geo_forwardRotationλ(-δλ);
    return rotation;
  }
  function d3_geo_rotationφγ(δφ, δγ) {
    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
    function rotation(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
    }
    rotation.invert = function(λ, φ) {
      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
    };
    return rotation;
  }
  d3.geo.circle = function() {
    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
    function circle() {
      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
      interpolate(null, null, 1, {
        point: function(x, y) {
          ring.push(x = rotate(x, y));
          x[0] *= d3_degrees, x[1] *= d3_degrees;
        }
      });
      return {
        type: "Polygon",
        coordinates: [ ring ]
      };
    }
    circle.origin = function(x) {
      if (!arguments.length) return origin;
      origin = x;
      return circle;
    };
    circle.angle = function(x) {
      if (!arguments.length) return angle;
      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
      return circle;
    };
    circle.precision = function(_) {
      if (!arguments.length) return precision;
      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
      return circle;
    };
    return circle.angle(90);
  };
  function d3_geo_circleInterpolate(radius, precision) {
    var cr = Math.cos(radius), sr = Math.sin(radius);
    return function(from, to, direction, listener) {
      var step = direction * precision;
      if (from != null) {
        from = d3_geo_circleAngle(cr, from);
        to = d3_geo_circleAngle(cr, to);
        if (direction > 0 ? from < to : from > to) from += direction * τ;
      } else {
        from = radius + direction * τ;
        to = radius - .5 * step;
      }
      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
      }
    };
  }
  function d3_geo_circleAngle(cr, point) {
    var a = d3_geo_cartesian(point);
    a[0] -= cr;
    d3_geo_cartesianNormalize(a);
    var angle = d3_acos(-a[1]);
    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
  }
  d3.geo.distance = function(a, b) {
    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
  };
  d3.geo.graticule = function() {
    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
    function graticule() {
      return {
        type: "MultiLineString",
        coordinates: lines()
      };
    }
    function lines() {
      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
        return abs(x % DX) > ε;
      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
        return abs(y % DY) > ε;
      }).map(y));
    }
    graticule.lines = function() {
      return lines().map(function(coordinates) {
        return {
          type: "LineString",
          coordinates: coordinates
        };
      });
    };
    graticule.outline = function() {
      return {
        type: "Polygon",
        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
      };
    };
    graticule.extent = function(_) {
      if (!arguments.length) return graticule.minorExtent();
      return graticule.majorExtent(_).minorExtent(_);
    };
    graticule.majorExtent = function(_) {
      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
      X0 = +_[0][0], X1 = +_[1][0];
      Y0 = +_[0][1], Y1 = +_[1][1];
      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
      return graticule.precision(precision);
    };
    graticule.minorExtent = function(_) {
      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
      x0 = +_[0][0], x1 = +_[1][0];
      y0 = +_[0][1], y1 = +_[1][1];
      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
      return graticule.precision(precision);
    };
    graticule.step = function(_) {
      if (!arguments.length) return graticule.minorStep();
      return graticule.majorStep(_).minorStep(_);
    };
    graticule.majorStep = function(_) {
      if (!arguments.length) return [ DX, DY ];
      DX = +_[0], DY = +_[1];
      return graticule;
    };
    graticule.minorStep = function(_) {
      if (!arguments.length) return [ dx, dy ];
      dx = +_[0], dy = +_[1];
      return graticule;
    };
    graticule.precision = function(_) {
      if (!arguments.length) return precision;
      precision = +_;
      x = d3_geo_graticuleX(y0, y1, 90);
      y = d3_geo_graticuleY(x0, x1, precision);
      X = d3_geo_graticuleX(Y0, Y1, 90);
      Y = d3_geo_graticuleY(X0, X1, precision);
      return graticule;
    };
    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
  };
  function d3_geo_graticuleX(y0, y1, dy) {
    var y = d3.range(y0, y1 - ε, dy).concat(y1);
    return function(x) {
      return y.map(function(y) {
        return [ x, y ];
      });
    };
  }
  function d3_geo_graticuleY(x0, x1, dx) {
    var x = d3.range(x0, x1 - ε, dx).concat(x1);
    return function(y) {
      return x.map(function(x) {
        return [ x, y ];
      });
    };
  }
  function d3_source(d) {
    return d.source;
  }
  function d3_target(d) {
    return d.target;
  }
  d3.geo.greatArc = function() {
    var source = d3_source, source_, target = d3_target, target_;
    function greatArc() {
      return {
        type: "LineString",
        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
      };
    }
    greatArc.distance = function() {
      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
    };
    greatArc.source = function(_) {
      if (!arguments.length) return source;
      source = _, source_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.target = function(_) {
      if (!arguments.length) return target;
      target = _, target_ = typeof _ === "function" ? null : _;
      return greatArc;
    };
    greatArc.precision = function() {
      return arguments.length ? greatArc : 0;
    };
    return greatArc;
  };
  d3.geo.interpolate = function(source, target) {
    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
  };
  function d3_geo_interpolate(x0, y0, x1, y1) {
    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
    var interpolate = d ? function(t) {
      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
    } : function() {
      return [ x0 * d3_degrees, y0 * d3_degrees ];
    };
    interpolate.distance = d;
    return interpolate;
  }
  d3.geo.length = function(object) {
    d3_geo_lengthSum = 0;
    d3.geo.stream(object, d3_geo_length);
    return d3_geo_lengthSum;
  };
  var d3_geo_lengthSum;
  var d3_geo_length = {
    sphere: d3_noop,
    point: d3_noop,
    lineStart: d3_geo_lengthLineStart,
    lineEnd: d3_noop,
    polygonStart: d3_noop,
    polygonEnd: d3_noop
  };
  function d3_geo_lengthLineStart() {
    var λ0, sinφ0, cosφ0;
    d3_geo_length.point = function(λ, φ) {
      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
      d3_geo_length.point = nextPoint;
    };
    d3_geo_length.lineEnd = function() {
      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
    };
    function nextPoint(λ, φ) {
      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
    }
  }
  function d3_geo_azimuthal(scale, angle) {
    function azimuthal(λ, φ) {
      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
    }
    azimuthal.invert = function(x, y) {
      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
    };
    return azimuthal;
  }
  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
    return Math.sqrt(2 / (1 + cosλcosφ));
  }, function(ρ) {
    return 2 * Math.asin(ρ / 2);
  });
  (d3.geo.azimuthalEqualArea = function() {
    return d3_geo_projection(d3_geo_azimuthalEqualArea);
  }).raw = d3_geo_azimuthalEqualArea;
  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
    var c = Math.acos(cosλcosφ);
    return c && c / Math.sin(c);
  }, d3_identity);
  (d3.geo.azimuthalEquidistant = function() {
    return d3_geo_projection(d3_geo_azimuthalEquidistant);
  }).raw = d3_geo_azimuthalEquidistant;
  function d3_geo_conicConformal(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), t = function(φ) {
      return Math.tan(π / 4 + φ / 2);
    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
    if (!n) return d3_geo_mercator;
    function forward(λ, φ) {
      if (F > 0) {
        if (φ < -halfπ + ε) φ = -halfπ + ε;
      } else {
        if (φ > halfπ - ε) φ = halfπ - ε;
      }
      var ρ = F / Math.pow(t(φ), n);
      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
    };
    return forward;
  }
  (d3.geo.conicConformal = function() {
    return d3_geo_conic(d3_geo_conicConformal);
  }).raw = d3_geo_conicConformal;
  function d3_geo_conicEquidistant(φ0, φ1) {
    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
    if (abs(n) < ε) return d3_geo_equirectangular;
    function forward(λ, φ) {
      var ρ = G - φ;
      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
    }
    forward.invert = function(x, y) {
      var ρ0_y = G - y;
      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
    };
    return forward;
  }
  (d3.geo.conicEquidistant = function() {
    return d3_geo_conic(d3_geo_conicEquidistant);
  }).raw = d3_geo_conicEquidistant;
  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / cosλcosφ;
  }, Math.atan);
  (d3.geo.gnomonic = function() {
    return d3_geo_projection(d3_geo_gnomonic);
  }).raw = d3_geo_gnomonic;
  function d3_geo_mercator(λ, φ) {
    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
  }
  d3_geo_mercator.invert = function(x, y) {
    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
  };
  function d3_geo_mercatorProjection(project) {
    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
    m.scale = function() {
      var v = scale.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.translate = function() {
      var v = translate.apply(m, arguments);
      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
    };
    m.clipExtent = function(_) {
      var v = clipExtent.apply(m, arguments);
      if (v === m) {
        if (clipAuto = _ == null) {
          var k = π * scale(), t = translate();
          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
        }
      } else if (clipAuto) {
        v = null;
      }
      return v;
    };
    return m.clipExtent(null);
  }
  (d3.geo.mercator = function() {
    return d3_geo_mercatorProjection(d3_geo_mercator);
  }).raw = d3_geo_mercator;
  var d3_geo_orthographic = d3_geo_azimuthal(function() {
    return 1;
  }, Math.asin);
  (d3.geo.orthographic = function() {
    return d3_geo_projection(d3_geo_orthographic);
  }).raw = d3_geo_orthographic;
  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
    return 1 / (1 + cosλcosφ);
  }, function(ρ) {
    return 2 * Math.atan(ρ);
  });
  (d3.geo.stereographic = function() {
    return d3_geo_projection(d3_geo_stereographic);
  }).raw = d3_geo_stereographic;
  function d3_geo_transverseMercator(λ, φ) {
    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
  }
  d3_geo_transverseMercator.invert = function(x, y) {
    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
  };
  (d3.geo.transverseMercator = function() {
    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
    projection.center = function(_) {
      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ -_[1], _[0] ]);
    };
    projection.rotate = function(_) {
      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
      [ _[0], _[1], _[2] - 90 ]);
    };
    return projection.rotate([ 0, 0 ]);
  }).raw = d3_geo_transverseMercator;
  d3.geom = {};
  function d3_geom_pointX(d) {
    return d[0];
  }
  function d3_geom_pointY(d) {
    return d[1];
  }
  d3.geom.hull = function(vertices) {
    var x = d3_geom_pointX, y = d3_geom_pointY;
    if (arguments.length) return hull(vertices);
    function hull(data) {
      if (data.length < 3) return [];
      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
      for (i = 0; i < n; i++) {
        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
      }
      points.sort(d3_geom_hullOrder);
      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
      return polygon;
    }
    hull.x = function(_) {
      return arguments.length ? (x = _, hull) : x;
    };
    hull.y = function(_) {
      return arguments.length ? (y = _, hull) : y;
    };
    return hull;
  };
  function d3_geom_hullUpper(points) {
    var n = points.length, hull = [ 0, 1 ], hs = 2;
    for (var i = 2; i < n; i++) {
      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
      hull[hs++] = i;
    }
    return hull.slice(0, hs);
  }
  function d3_geom_hullOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1];
  }
  d3.geom.polygon = function(coordinates) {
    d3_subclass(coordinates, d3_geom_polygonPrototype);
    return coordinates;
  };
  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
  d3_geom_polygonPrototype.area = function() {
    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
    while (++i < n) {
      a = b;
      b = this[i];
      area += a[1] * b[0] - a[0] * b[1];
    }
    return area * .5;
  };
  d3_geom_polygonPrototype.centroid = function(k) {
    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
    if (!arguments.length) k = -1 / (6 * this.area());
    while (++i < n) {
      a = b;
      b = this[i];
      c = a[0] * b[1] - b[0] * a[1];
      x += (a[0] + b[0]) * c;
      y += (a[1] + b[1]) * c;
    }
    return [ x * k, y * k ];
  };
  d3_geom_polygonPrototype.clip = function(subject) {
    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
    while (++i < n) {
      input = subject.slice();
      subject.length = 0;
      b = this[i];
      c = input[(m = input.length - closed) - 1];
      j = -1;
      while (++j < m) {
        d = input[j];
        if (d3_geom_polygonInside(d, a, b)) {
          if (!d3_geom_polygonInside(c, a, b)) {
            subject.push(d3_geom_polygonIntersect(c, d, a, b));
          }
          subject.push(d);
        } else if (d3_geom_polygonInside(c, a, b)) {
          subject.push(d3_geom_polygonIntersect(c, d, a, b));
        }
        c = d;
      }
      if (closed) subject.push(subject[0]);
      a = b;
    }
    return subject;
  };
  function d3_geom_polygonInside(p, a, b) {
    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
  }
  function d3_geom_polygonIntersect(c, d, a, b) {
    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
    return [ x1 + ua * x21, y1 + ua * y21 ];
  }
  function d3_geom_polygonClosed(coordinates) {
    var a = coordinates[0], b = coordinates[coordinates.length - 1];
    return !(a[0] - b[0] || a[1] - b[1]);
  }
  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
  function d3_geom_voronoiBeach() {
    d3_geom_voronoiRedBlackNode(this);
    this.edge = this.site = this.circle = null;
  }
  function d3_geom_voronoiCreateBeach(site) {
    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
    beach.site = site;
    return beach;
  }
  function d3_geom_voronoiDetachBeach(beach) {
    d3_geom_voronoiDetachCircle(beach);
    d3_geom_voronoiBeaches.remove(beach);
    d3_geom_voronoiBeachPool.push(beach);
    d3_geom_voronoiRedBlackNode(beach);
  }
  function d3_geom_voronoiRemoveBeach(beach) {
    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
      x: x,
      y: y
    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
    d3_geom_voronoiDetachBeach(beach);
    var lArc = previous;
    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
      previous = lArc.P;
      disappearing.unshift(lArc);
      d3_geom_voronoiDetachBeach(lArc);
      lArc = previous;
    }
    disappearing.unshift(lArc);
    d3_geom_voronoiDetachCircle(lArc);
    var rArc = next;
    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
      next = rArc.N;
      disappearing.push(rArc);
      d3_geom_voronoiDetachBeach(rArc);
      rArc = next;
    }
    disappearing.push(rArc);
    d3_geom_voronoiDetachCircle(rArc);
    var nArcs = disappearing.length, iArc;
    for (iArc = 1; iArc < nArcs; ++iArc) {
      rArc = disappearing[iArc];
      lArc = disappearing[iArc - 1];
      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
    }
    lArc = disappearing[0];
    rArc = disappearing[nArcs - 1];
    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiAddBeach(site) {
    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
    while (node) {
      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
      if (dxl > ε) node = node.L; else {
        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
        if (dxr > ε) {
          if (!node.R) {
            lArc = node;
            break;
          }
          node = node.R;
        } else {
          if (dxl > -ε) {
            lArc = node.P;
            rArc = node;
          } else if (dxr > -ε) {
            lArc = node;
            rArc = node.N;
          } else {
            lArc = rArc = node;
          }
          break;
        }
      }
    }
    var newArc = d3_geom_voronoiCreateBeach(site);
    d3_geom_voronoiBeaches.insert(lArc, newArc);
    if (!lArc && !rArc) return;
    if (lArc === rArc) {
      d3_geom_voronoiDetachCircle(lArc);
      rArc = d3_geom_voronoiCreateBeach(lArc.site);
      d3_geom_voronoiBeaches.insert(newArc, rArc);
      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      d3_geom_voronoiAttachCircle(lArc);
      d3_geom_voronoiAttachCircle(rArc);
      return;
    }
    if (!rArc) {
      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
      return;
    }
    d3_geom_voronoiDetachCircle(lArc);
    d3_geom_voronoiDetachCircle(rArc);
    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
      x: (cy * hb - by * hc) / d + ax,
      y: (bx * hc - cx * hb) / d + ay
    };
    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
    d3_geom_voronoiAttachCircle(lArc);
    d3_geom_voronoiAttachCircle(rArc);
  }
  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
    if (!pby2) return rfocx;
    var lArc = arc.P;
    if (!lArc) return -Infinity;
    site = lArc.site;
    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
    if (!plby2) return lfocx;
    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
    return (rfocx + lfocx) / 2;
  }
  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
    var rArc = arc.N;
    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
    var site = arc.site;
    return site.y === directrix ? site.x : Infinity;
  }
  function d3_geom_voronoiCell(site) {
    this.site = site;
    this.edges = [];
  }
  d3_geom_voronoiCell.prototype.prepare = function() {
    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
    while (iHalfEdge--) {
      edge = halfEdges[iHalfEdge].edge;
      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
    }
    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
    return halfEdges.length;
  };
  function d3_geom_voronoiCloseCells(extent) {
    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
    while (iCell--) {
      cell = cells[iCell];
      if (!cell || !cell.prepare()) continue;
      halfEdges = cell.edges;
      nHalfEdges = halfEdges.length;
      iHalfEdge = 0;
      while (iHalfEdge < nHalfEdges) {
        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
            x: x0,
            y: abs(x2 - x0) < ε ? y2 : y1
          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
            x: abs(y2 - y1) < ε ? x2 : x1,
            y: y1
          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
            x: x1,
            y: abs(x2 - x1) < ε ? y2 : y0
          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
            x: abs(y2 - y0) < ε ? x2 : x0,
            y: y0
          } : null), cell.site, null));
          ++nHalfEdges;
        }
      }
    }
  }
  function d3_geom_voronoiHalfEdgeOrder(a, b) {
    return b.angle - a.angle;
  }
  function d3_geom_voronoiCircle() {
    d3_geom_voronoiRedBlackNode(this);
    this.x = this.y = this.arc = this.site = this.cy = null;
  }
  function d3_geom_voronoiAttachCircle(arc) {
    var lArc = arc.P, rArc = arc.N;
    if (!lArc || !rArc) return;
    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
    if (lSite === rSite) return;
    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
    var d = 2 * (ax * cy - ay * cx);
    if (d >= -ε2) return;
    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
    circle.arc = arc;
    circle.site = cSite;
    circle.x = x + bx;
    circle.y = cy + Math.sqrt(x * x + y * y);
    circle.cy = cy;
    arc.circle = circle;
    var before = null, node = d3_geom_voronoiCircles._;
    while (node) {
      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
        if (node.L) node = node.L; else {
          before = node.P;
          break;
        }
      } else {
        if (node.R) node = node.R; else {
          before = node;
          break;
        }
      }
    }
    d3_geom_voronoiCircles.insert(before, circle);
    if (!before) d3_geom_voronoiFirstCircle = circle;
  }
  function d3_geom_voronoiDetachCircle(arc) {
    var circle = arc.circle;
    if (circle) {
      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
      d3_geom_voronoiCircles.remove(circle);
      d3_geom_voronoiCirclePool.push(circle);
      d3_geom_voronoiRedBlackNode(circle);
      arc.circle = null;
    }
  }
  function d3_geom_voronoiClipEdges(extent) {
    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
    while (i--) {
      e = edges[i];
      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
        e.a = e.b = null;
        edges.splice(i, 1);
      }
    }
  }
  function d3_geom_voronoiConnectEdge(edge, extent) {
    var vb = edge.b;
    if (vb) return true;
    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
    if (ry === ly) {
      if (fx < x0 || fx >= x1) return;
      if (lx > rx) {
        if (!va) va = {
          x: fx,
          y: y0
        }; else if (va.y >= y1) return;
        vb = {
          x: fx,
          y: y1
        };
      } else {
        if (!va) va = {
          x: fx,
          y: y1
        }; else if (va.y < y0) return;
        vb = {
          x: fx,
          y: y0
        };
      }
    } else {
      fm = (lx - rx) / (ry - ly);
      fb = fy - fm * fx;
      if (fm < -1 || fm > 1) {
        if (lx > rx) {
          if (!va) va = {
            x: (y0 - fb) / fm,
            y: y0
          }; else if (va.y >= y1) return;
          vb = {
            x: (y1 - fb) / fm,
            y: y1
          };
        } else {
          if (!va) va = {
            x: (y1 - fb) / fm,
            y: y1
          }; else if (va.y < y0) return;
          vb = {
            x: (y0 - fb) / fm,
            y: y0
          };
        }
      } else {
        if (ly < ry) {
          if (!va) va = {
            x: x0,
            y: fm * x0 + fb
          }; else if (va.x >= x1) return;
          vb = {
            x: x1,
            y: fm * x1 + fb
          };
        } else {
          if (!va) va = {
            x: x1,
            y: fm * x1 + fb
          }; else if (va.x < x0) return;
          vb = {
            x: x0,
            y: fm * x0 + fb
          };
        }
      }
    }
    edge.a = va;
    edge.b = vb;
    return true;
  }
  function d3_geom_voronoiEdge(lSite, rSite) {
    this.l = lSite;
    this.r = rSite;
    this.a = this.b = null;
  }
  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, rSite);
    d3_geom_voronoiEdges.push(edge);
    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
    return edge;
  }
  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
    var edge = new d3_geom_voronoiEdge(lSite, null);
    edge.a = va;
    edge.b = vb;
    d3_geom_voronoiEdges.push(edge);
    return edge;
  }
  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
    if (!edge.a && !edge.b) {
      edge.a = vertex;
      edge.l = lSite;
      edge.r = rSite;
    } else if (edge.l === rSite) {
      edge.b = vertex;
    } else {
      edge.a = vertex;
    }
  }
  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
    var va = edge.a, vb = edge.b;
    this.edge = edge;
    this.site = lSite;
    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
  }
  d3_geom_voronoiHalfEdge.prototype = {
    start: function() {
      return this.edge.l === this.site ? this.edge.a : this.edge.b;
    },
    end: function() {
      return this.edge.l === this.site ? this.edge.b : this.edge.a;
    }
  };
  function d3_geom_voronoiRedBlackTree() {
    this._ = null;
  }
  function d3_geom_voronoiRedBlackNode(node) {
    node.U = node.C = node.L = node.R = node.P = node.N = null;
  }
  d3_geom_voronoiRedBlackTree.prototype = {
    insert: function(after, node) {
      var parent, grandpa, uncle;
      if (after) {
        node.P = after;
        node.N = after.N;
        if (after.N) after.N.P = node;
        after.N = node;
        if (after.R) {
          after = after.R;
          while (after.L) after = after.L;
          after.L = node;
        } else {
          after.R = node;
        }
        parent = after;
      } else if (this._) {
        after = d3_geom_voronoiRedBlackFirst(this._);
        node.P = null;
        node.N = after;
        after.P = after.L = node;
        parent = after;
      } else {
        node.P = node.N = null;
        this._ = node;
        parent = null;
      }
      node.L = node.R = null;
      node.U = parent;
      node.C = true;
      after = node;
      while (parent && parent.C) {
        grandpa = parent.U;
        if (parent === grandpa.L) {
          uncle = grandpa.R;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.R) {
              d3_geom_voronoiRedBlackRotateLeft(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
          }
        } else {
          uncle = grandpa.L;
          if (uncle && uncle.C) {
            parent.C = uncle.C = false;
            grandpa.C = true;
            after = grandpa;
          } else {
            if (after === parent.L) {
              d3_geom_voronoiRedBlackRotateRight(this, parent);
              after = parent;
              parent = after.U;
            }
            parent.C = false;
            grandpa.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
          }
        }
        parent = after.U;
      }
      this._.C = false;
    },
    remove: function(node) {
      if (node.N) node.N.P = node.P;
      if (node.P) node.P.N = node.N;
      node.N = node.P = null;
      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
      if (parent) {
        if (parent.L === node) parent.L = next; else parent.R = next;
      } else {
        this._ = next;
      }
      if (left && right) {
        red = next.C;
        next.C = node.C;
        next.L = left;
        left.U = next;
        if (next !== right) {
          parent = next.U;
          next.U = node.U;
          node = next.R;
          parent.L = node;
          next.R = right;
          right.U = next;
        } else {
          next.U = parent;
          parent = next;
          node = next.R;
        }
      } else {
        red = node.C;
        node = next;
      }
      if (node) node.U = parent;
      if (red) return;
      if (node && node.C) {
        node.C = false;
        return;
      }
      do {
        if (node === this._) break;
        if (node === parent.L) {
          sibling = parent.R;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            sibling = parent.R;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.R || !sibling.R.C) {
              sibling.L.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateRight(this, sibling);
              sibling = parent.R;
            }
            sibling.C = parent.C;
            parent.C = sibling.R.C = false;
            d3_geom_voronoiRedBlackRotateLeft(this, parent);
            node = this._;
            break;
          }
        } else {
          sibling = parent.L;
          if (sibling.C) {
            sibling.C = false;
            parent.C = true;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            sibling = parent.L;
          }
          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
            if (!sibling.L || !sibling.L.C) {
              sibling.R.C = false;
              sibling.C = true;
              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
              sibling = parent.L;
            }
            sibling.C = parent.C;
            parent.C = sibling.L.C = false;
            d3_geom_voronoiRedBlackRotateRight(this, parent);
            node = this._;
            break;
          }
        }
        sibling.C = true;
        node = parent;
        parent = parent.U;
      } while (!node.C);
      if (node) node.C = false;
    }
  };
  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
    var p = node, q = node.R, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.R = q.L;
    if (p.R) p.R.U = p;
    q.L = p;
  }
  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
    var p = node, q = node.L, parent = p.U;
    if (parent) {
      if (parent.L === p) parent.L = q; else parent.R = q;
    } else {
      tree._ = q;
    }
    q.U = parent;
    p.U = q;
    p.L = q.R;
    if (p.L) p.L.U = p;
    q.R = p;
  }
  function d3_geom_voronoiRedBlackFirst(node) {
    while (node.L) node = node.L;
    return node;
  }
  function d3_geom_voronoi(sites, bbox) {
    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
    d3_geom_voronoiEdges = [];
    d3_geom_voronoiCells = new Array(sites.length);
    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
    while (true) {
      circle = d3_geom_voronoiFirstCircle;
      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
        if (site.x !== x0 || site.y !== y0) {
          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
          d3_geom_voronoiAddBeach(site);
          x0 = site.x, y0 = site.y;
        }
        site = sites.pop();
      } else if (circle) {
        d3_geom_voronoiRemoveBeach(circle.arc);
      } else {
        break;
      }
    }
    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
    var diagram = {
      cells: d3_geom_voronoiCells,
      edges: d3_geom_voronoiEdges
    };
    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
    return diagram;
  }
  function d3_geom_voronoiVertexOrder(a, b) {
    return b.y - a.y || b.x - a.x;
  }
  d3.geom.voronoi = function(points) {
    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
    if (points) return voronoi(points);
    function voronoi(data) {
      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
          var s = e.start();
          return [ s.x, s.y ];
        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
        polygon.point = data[i];
      });
      return polygons;
    }
    function sites(data) {
      return data.map(function(d, i) {
        return {
          x: Math.round(fx(d, i) / ε) * ε,
          y: Math.round(fy(d, i) / ε) * ε,
          i: i
        };
      });
    }
    voronoi.links = function(data) {
      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
        return edge.l && edge.r;
      }).map(function(edge) {
        return {
          source: data[edge.l.i],
          target: data[edge.r.i]
        };
      });
    };
    voronoi.triangles = function(data) {
      var triangles = [];
      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
        while (++j < m) {
          e0 = e1;
          s0 = s1;
          e1 = edges[j].edge;
          s1 = e1.l === site ? e1.r : e1.l;
          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
          }
        }
      });
      return triangles;
    };
    voronoi.x = function(_) {
      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
    };
    voronoi.y = function(_) {
      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
    };
    voronoi.clipExtent = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
      return voronoi;
    };
    voronoi.size = function(_) {
      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
    };
    return voronoi;
  };
  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
  function d3_geom_voronoiTriangleArea(a, b, c) {
    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
  }
  d3.geom.delaunay = function(vertices) {
    return d3.geom.voronoi().triangles(vertices);
  };
  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
    if (compat = arguments.length) {
      x = d3_geom_quadtreeCompatX;
      y = d3_geom_quadtreeCompatY;
      if (compat === 3) {
        y2 = y1;
        x2 = x1;
        y1 = x1 = 0;
      }
      return quadtree(points);
    }
    function quadtree(data) {
      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
      if (x1 != null) {
        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
      } else {
        x2_ = y2_ = -(x1_ = y1_ = Infinity);
        xs = [], ys = [];
        n = data.length;
        if (compat) for (i = 0; i < n; ++i) {
          d = data[i];
          if (d.x < x1_) x1_ = d.x;
          if (d.y < y1_) y1_ = d.y;
          if (d.x > x2_) x2_ = d.x;
          if (d.y > y2_) y2_ = d.y;
          xs.push(d.x);
          ys.push(d.y);
        } else for (i = 0; i < n; ++i) {
          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
          if (x_ < x1_) x1_ = x_;
          if (y_ < y1_) y1_ = y_;
          if (x_ > x2_) x2_ = x_;
          if (y_ > y2_) y2_ = y_;
          xs.push(x_);
          ys.push(y_);
        }
      }
      var dx = x2_ - x1_, dy = y2_ - y1_;
      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
      function insert(n, d, x, y, x1, y1, x2, y2) {
        if (isNaN(x) || isNaN(y)) return;
        if (n.leaf) {
          var nx = n.x, ny = n.y;
          if (nx != null) {
            if (abs(nx - x) + abs(ny - y) < .01) {
              insertChild(n, d, x, y, x1, y1, x2, y2);
            } else {
              var nPoint = n.point;
              n.x = n.y = n.point = null;
              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
              insertChild(n, d, x, y, x1, y1, x2, y2);
            }
          } else {
            n.x = x, n.y = y, n.point = d;
          }
        } else {
          insertChild(n, d, x, y, x1, y1, x2, y2);
        }
      }
      function insertChild(n, d, x, y, x1, y1, x2, y2) {
        var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, right = x >= sx, bottom = y >= sy, i = (bottom << 1) + right;
        n.leaf = false;
        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
        if (right) x1 = sx; else x2 = sx;
        if (bottom) y1 = sy; else y2 = sy;
        insert(n, d, x, y, x1, y1, x2, y2);
      }
      var root = d3_geom_quadtreeNode();
      root.add = function(d) {
        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
      };
      root.visit = function(f) {
        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
      };
      i = -1;
      if (x1 == null) {
        while (++i < n) {
          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
        }
        --i;
      } else data.forEach(root.add);
      xs = ys = data = d = null;
      return root;
    }
    quadtree.x = function(_) {
      return arguments.length ? (x = _, quadtree) : x;
    };
    quadtree.y = function(_) {
      return arguments.length ? (y = _, quadtree) : y;
    };
    quadtree.extent = function(_) {
      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
      y2 = +_[1][1];
      return quadtree;
    };
    quadtree.size = function(_) {
      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
      return quadtree;
    };
    return quadtree;
  };
  function d3_geom_quadtreeCompatX(d) {
    return d.x;
  }
  function d3_geom_quadtreeCompatY(d) {
    return d.y;
  }
  function d3_geom_quadtreeNode() {
    return {
      leaf: true,
      nodes: [],
      point: null,
      x: null,
      y: null
    };
  }
  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
    if (!f(node, x1, y1, x2, y2)) {
      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
    }
  }
  d3.interpolateRgb = d3_interpolateRgb;
  function d3_interpolateRgb(a, b) {
    a = d3.rgb(a);
    b = d3.rgb(b);
    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
    return function(t) {
      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
    };
  }
  d3.interpolateObject = d3_interpolateObject;
  function d3_interpolateObject(a, b) {
    var i = {}, c = {}, k;
    for (k in a) {
      if (k in b) {
        i[k] = d3_interpolate(a[k], b[k]);
      } else {
        c[k] = a[k];
      }
    }
    for (k in b) {
      if (!(k in a)) {
        c[k] = b[k];
      }
    }
    return function(t) {
      for (k in i) c[k] = i[k](t);
      return c;
    };
  }
  d3.interpolateNumber = d3_interpolateNumber;
  function d3_interpolateNumber(a, b) {
    b -= a = +a;
    return function(t) {
      return a + b * t;
    };
  }
  d3.interpolateString = d3_interpolateString;
  function d3_interpolateString(a, b) {
    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
    a = a + "", b = b + "";
    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.substring(bi, bs);
        if (s[i]) s[i] += bs; else s[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s[i]) s[i] += bm; else s[++i] = bm;
      } else {
        s[++i] = null;
        q.push({
          i: i,
          x: d3_interpolateNumber(am, bm)
        });
      }
      bi = d3_interpolate_numberB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.substring(bi);
      if (s[i]) s[i] += bs; else s[++i] = bs;
    }
    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
      return b(t) + "";
    }) : function() {
      return b;
    } : (b = q.length, function(t) {
      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    });
  }
  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
  d3.interpolate = d3_interpolate;
  function d3_interpolate(a, b) {
    var i = d3.interpolators.length, f;
    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
    return f;
  }
  d3.interpolators = [ function(a, b) {
    var t = typeof b;
    return (t === "string" ? d3_rgb_names.has(b) || /^(#|rgb\(|hsl\()/.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
  } ];
  d3.interpolateArray = d3_interpolateArray;
  function d3_interpolateArray(a, b) {
    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
    for (;i < na; ++i) c[i] = a[i];
    for (;i < nb; ++i) c[i] = b[i];
    return function(t) {
      for (i = 0; i < n0; ++i) c[i] = x[i](t);
      return c;
    };
  }
  var d3_ease_default = function() {
    return d3_identity;
  };
  var d3_ease = d3.map({
    linear: d3_ease_default,
    poly: d3_ease_poly,
    quad: function() {
      return d3_ease_quad;
    },
    cubic: function() {
      return d3_ease_cubic;
    },
    sin: function() {
      return d3_ease_sin;
    },
    exp: function() {
      return d3_ease_exp;
    },
    circle: function() {
      return d3_ease_circle;
    },
    elastic: d3_ease_elastic,
    back: d3_ease_back,
    bounce: function() {
      return d3_ease_bounce;
    }
  });
  var d3_ease_mode = d3.map({
    "in": d3_identity,
    out: d3_ease_reverse,
    "in-out": d3_ease_reflect,
    "out-in": function(f) {
      return d3_ease_reflect(d3_ease_reverse(f));
    }
  });
  d3.ease = function(name) {
    var i = name.indexOf("-"), t = i >= 0 ? name.substring(0, i) : name, m = i >= 0 ? name.substring(i + 1) : "in";
    t = d3_ease.get(t) || d3_ease_default;
    m = d3_ease_mode.get(m) || d3_identity;
    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
  };
  function d3_ease_clamp(f) {
    return function(t) {
      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
    };
  }
  function d3_ease_reverse(f) {
    return function(t) {
      return 1 - f(1 - t);
    };
  }
  function d3_ease_reflect(f) {
    return function(t) {
      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
    };
  }
  function d3_ease_quad(t) {
    return t * t;
  }
  function d3_ease_cubic(t) {
    return t * t * t;
  }
  function d3_ease_cubicInOut(t) {
    if (t <= 0) return 0;
    if (t >= 1) return 1;
    var t2 = t * t, t3 = t2 * t;
    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
  }
  function d3_ease_poly(e) {
    return function(t) {
      return Math.pow(t, e);
    };
  }
  function d3_ease_sin(t) {
    return 1 - Math.cos(t * halfπ);
  }
  function d3_ease_exp(t) {
    return Math.pow(2, 10 * (t - 1));
  }
  function d3_ease_circle(t) {
    return 1 - Math.sqrt(1 - t * t);
  }
  function d3_ease_elastic(a, p) {
    var s;
    if (arguments.length < 2) p = .45;
    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
    return function(t) {
      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
    };
  }
  function d3_ease_back(s) {
    if (!s) s = 1.70158;
    return function(t) {
      return t * t * ((s + 1) * t - s);
    };
  }
  function d3_ease_bounce(t) {
    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
  }
  d3.interpolateHcl = d3_interpolateHcl;
  function d3_interpolateHcl(a, b) {
    a = d3.hcl(a);
    b = d3.hcl(b);
    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
    };
  }
  d3.interpolateHsl = d3_interpolateHsl;
  function d3_interpolateHsl(a, b) {
    a = d3.hsl(a);
    b = d3.hsl(b);
    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
    return function(t) {
      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
    };
  }
  d3.interpolateLab = d3_interpolateLab;
  function d3_interpolateLab(a, b) {
    a = d3.lab(a);
    b = d3.lab(b);
    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
    return function(t) {
      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
    };
  }
  d3.interpolateRound = d3_interpolateRound;
  function d3_interpolateRound(a, b) {
    b -= a;
    return function(t) {
      return Math.round(a + b * t);
    };
  }
  d3.transform = function(string) {
    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
    return (d3.transform = function(string) {
      if (string != null) {
        if(string.search('NaN') !== -1) string = string.replace('NaN', '0');
        g.setAttribute("transform", string);
        var t = g.transform.baseVal.consolidate();
      }
      return new d3_transform(t ? t.matrix : d3_transformIdentity);
    })(string);
  };
  function d3_transform(m) {
    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
    if (r0[0] * r1[1] < r1[0] * r0[1]) {
      r0[0] *= -1;
      r0[1] *= -1;
      kx *= -1;
      kz *= -1;
    }
    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
    this.translate = [ m.e, m.f ];
    this.scale = [ kx, ky ];
    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
  }
  d3_transform.prototype.toString = function() {
    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
  };
  function d3_transformDot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function d3_transformNormalize(a) {
    var k = Math.sqrt(d3_transformDot(a, a));
    if (k) {
      a[0] /= k;
      a[1] /= k;
    }
    return k;
  }
  function d3_transformCombine(a, b, k) {
    a[0] += k * b[0];
    a[1] += k * b[1];
    return a;
  }
  var d3_transformIdentity = {
    a: 1,
    b: 0,
    c: 0,
    d: 1,
    e: 0,
    f: 0
  };
  d3.interpolateTransform = d3_interpolateTransform;
  function d3_interpolateTransform(a, b) {
    var s = [], q = [], n, A = d3.transform(a), B = d3.transform(b), ta = A.translate, tb = B.translate, ra = A.rotate, rb = B.rotate, wa = A.skew, wb = B.skew, ka = A.scale, kb = B.scale;
    if (ta[0] != tb[0] || ta[1] != tb[1]) {
      s.push("translate(", null, ",", null, ")");
      q.push({
        i: 1,
        x: d3_interpolateNumber(ta[0], tb[0])
      }, {
        i: 3,
        x: d3_interpolateNumber(ta[1], tb[1])
      });
    } else if (tb[0] || tb[1]) {
      s.push("translate(" + tb + ")");
    } else {
      s.push("");
    }
    if (ra != rb) {
      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
      q.push({
        i: s.push(s.pop() + "rotate(", null, ")") - 2,
        x: d3_interpolateNumber(ra, rb)
      });
    } else if (rb) {
      s.push(s.pop() + "rotate(" + rb + ")");
    }
    if (wa != wb) {
      q.push({
        i: s.push(s.pop() + "skewX(", null, ")") - 2,
        x: d3_interpolateNumber(wa, wb)
      });
    } else if (wb) {
      s.push(s.pop() + "skewX(" + wb + ")");
    }
    if (ka[0] != kb[0] || ka[1] != kb[1]) {
      n = s.push(s.pop() + "scale(", null, ",", null, ")");
      q.push({
        i: n - 4,
        x: d3_interpolateNumber(ka[0], kb[0])
      }, {
        i: n - 2,
        x: d3_interpolateNumber(ka[1], kb[1])
      });
    } else if (kb[0] != 1 || kb[1] != 1) {
      s.push(s.pop() + "scale(" + kb + ")");
    }
    n = q.length;
    return function(t) {
      var i = -1, o;
      while (++i < n) s[(o = q[i]).i] = o.x(t);
      return s.join("");
    };
  }
  function d3_uninterpolateNumber(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function(x) {
      return (x - a) * b;
    };
  }
  function d3_uninterpolateClamp(a, b) {
    b = b - (a = +a) ? 1 / (b - a) : 0;
    return function(x) {
      return Math.max(0, Math.min(1, (x - a) * b));
    };
  }
  d3.layout = {};
  d3.layout.bundle = function() {
    return function(links) {
      var paths = [], i = -1, n = links.length;
      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
      return paths;
    };
  };
  function d3_layout_bundlePath(link) {
    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
    while (start !== lca) {
      start = start.parent;
      points.push(start);
    }
    var k = points.length;
    while (end !== lca) {
      points.splice(k, 0, end);
      end = end.parent;
    }
    return points;
  }
  function d3_layout_bundleAncestors(node) {
    var ancestors = [], parent = node.parent;
    while (parent != null) {
      ancestors.push(node);
      node = parent;
      parent = parent.parent;
    }
    ancestors.push(node);
    return ancestors;
  }
  function d3_layout_bundleLeastCommonAncestor(a, b) {
    if (a === b) return a;
    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
    while (aNode === bNode) {
      sharedNode = aNode;
      aNode = aNodes.pop();
      bNode = bNodes.pop();
    }
    return sharedNode;
  }
  d3.layout.chord = function() {
    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
    function relayout() {
      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
      chords = [];
      groups = [];
      k = 0, i = -1;
      while (++i < n) {
        x = 0, j = -1;
        while (++j < n) {
          x += matrix[i][j];
        }
        groupSums.push(x);
        subgroupIndex.push(d3.range(n));
        k += x;
      }
      if (sortGroups) {
        groupIndex.sort(function(a, b) {
          return sortGroups(groupSums[a], groupSums[b]);
        });
      }
      if (sortSubgroups) {
        subgroupIndex.forEach(function(d, i) {
          d.sort(function(a, b) {
            return sortSubgroups(matrix[i][a], matrix[i][b]);
          });
        });
      }
      k = (τ - padding * n) / k;
      x = 0, i = -1;
      while (++i < n) {
        x0 = x, j = -1;
        while (++j < n) {
          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
          subgroups[di + "-" + dj] = {
            index: di,
            subindex: dj,
            startAngle: a0,
            endAngle: a1,
            value: v
          };
        }
        groups[di] = {
          index: di,
          startAngle: x0,
          endAngle: x,
          value: (x - x0) / k
        };
        x += padding;
      }
      i = -1;
      while (++i < n) {
        j = i - 1;
        while (++j < n) {
          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
          if (source.value || target.value) {
            chords.push(source.value < target.value ? {
              source: target,
              target: source
            } : {
              source: source,
              target: target
            });
          }
        }
      }
      if (sortChords) resort();
    }
    function resort() {
      chords.sort(function(a, b) {
        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
      });
    }
    chord.matrix = function(x) {
      if (!arguments.length) return matrix;
      n = (matrix = x) && matrix.length;
      chords = groups = null;
      return chord;
    };
    chord.padding = function(x) {
      if (!arguments.length) return padding;
      padding = x;
      chords = groups = null;
      return chord;
    };
    chord.sortGroups = function(x) {
      if (!arguments.length) return sortGroups;
      sortGroups = x;
      chords = groups = null;
      return chord;
    };
    chord.sortSubgroups = function(x) {
      if (!arguments.length) return sortSubgroups;
      sortSubgroups = x;
      chords = null;
      return chord;
    };
    chord.sortChords = function(x) {
      if (!arguments.length) return sortChords;
      sortChords = x;
      if (chords) resort();
      return chord;
    };
    chord.chords = function() {
      if (!chords) relayout();
      return chords;
    };
    chord.groups = function() {
      if (!groups) relayout();
      return groups;
    };
    return chord;
  };
  d3.layout.force = function() {
    var force = {}, event = d3.dispatch("start", "tick", "end"), size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
    function repulse(node) {
      return function(quad, x1, _, x2) {
        if (quad.point !== node) {
          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
          if (dw * dw / theta2 < dn) {
            if (dn < chargeDistance2) {
              var k = quad.charge / dn;
              node.px -= dx * k;
              node.py -= dy * k;
            }
            return true;
          }
          if (quad.point && dn && dn < chargeDistance2) {
            var k = quad.pointCharge / dn;
            node.px -= dx * k;
            node.py -= dy * k;
          }
        }
        return !quad.charge;
      };
    }
    force.tick = function() {
      if ((alpha *= .99) < .005) {
        event.end({
          type: "end",
          alpha: alpha = 0
        });
        return true;
      }
      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
      for (i = 0; i < m; ++i) {
        o = links[i];
        s = o.source;
        t = o.target;
        x = t.x - s.x;
        y = t.y - s.y;
        if (l = x * x + y * y) {
          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
          x *= l;
          y *= l;
          t.x -= x * (k = s.weight / (t.weight + s.weight));
          t.y -= y * k;
          s.x += x * (k = 1 - k);
          s.y += y * k;
        }
      }
      if (k = alpha * gravity) {
        x = size[0] / 2;
        y = size[1] / 2;
        i = -1;
        if (k) while (++i < n) {
          o = nodes[i];
          o.x += (x - o.x) * k;
          o.y += (y - o.y) * k;
        }
      }
      if (charge) {
        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
        i = -1;
        while (++i < n) {
          if (!(o = nodes[i]).fixed) {
            q.visit(repulse(o));
          }
        }
      }
      i = -1;
      while (++i < n) {
        o = nodes[i];
        if (o.fixed) {
          o.x = o.px;
          o.y = o.py;
        } else {
          o.x -= (o.px - (o.px = o.x)) * friction;
          o.y -= (o.py - (o.py = o.y)) * friction;
        }
      }
      event.tick({
        type: "tick",
        alpha: alpha
      });
    };
    force.nodes = function(x) {
      if (!arguments.length) return nodes;
      nodes = x;
      return force;
    };
    force.links = function(x) {
      if (!arguments.length) return links;
      links = x;
      return force;
    };
    force.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return force;
    };
    force.linkDistance = function(x) {
      if (!arguments.length) return linkDistance;
      linkDistance = typeof x === "function" ? x : +x;
      return force;
    };
    force.distance = force.linkDistance;
    force.linkStrength = function(x) {
      if (!arguments.length) return linkStrength;
      linkStrength = typeof x === "function" ? x : +x;
      return force;
    };
    force.friction = function(x) {
      if (!arguments.length) return friction;
      friction = +x;
      return force;
    };
    force.charge = function(x) {
      if (!arguments.length) return charge;
      charge = typeof x === "function" ? x : +x;
      return force;
    };
    force.chargeDistance = function(x) {
      if (!arguments.length) return Math.sqrt(chargeDistance2);
      chargeDistance2 = x * x;
      return force;
    };
    force.gravity = function(x) {
      if (!arguments.length) return gravity;
      gravity = +x;
      return force;
    };
    force.theta = function(x) {
      if (!arguments.length) return Math.sqrt(theta2);
      theta2 = x * x;
      return force;
    };
    force.alpha = function(x) {
      if (!arguments.length) return alpha;
      x = +x;
      if (alpha) {
        if (x > 0) alpha = x; else alpha = 0;
      } else if (x > 0) {
        event.start({
          type: "start",
          alpha: alpha = x
        });
        d3.timer(force.tick);
      }
      return force;
    };
    force.start = function() {
      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
      for (i = 0; i < n; ++i) {
        (o = nodes[i]).index = i;
        o.weight = 0;
      }
      for (i = 0; i < m; ++i) {
        o = links[i];
        if (typeof o.source == "number") o.source = nodes[o.source];
        if (typeof o.target == "number") o.target = nodes[o.target];
        ++o.source.weight;
        ++o.target.weight;
      }
      for (i = 0; i < n; ++i) {
        o = nodes[i];
        if (isNaN(o.x)) o.x = position("x", w);
        if (isNaN(o.y)) o.y = position("y", h);
        if (isNaN(o.px)) o.px = o.x;
        if (isNaN(o.py)) o.py = o.y;
      }
      distances = [];
      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
      strengths = [];
      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
      charges = [];
      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
      function position(dimension, size) {
        if (!neighbors) {
          neighbors = new Array(n);
          for (j = 0; j < n; ++j) {
            neighbors[j] = [];
          }
          for (j = 0; j < m; ++j) {
            var o = links[j];
            neighbors[o.source.index].push(o.target);
            neighbors[o.target.index].push(o.source);
          }
        }
        var candidates = neighbors[i], j = -1, m = candidates.length, x;
        while (++j < m) if (!isNaN(x = candidates[j][dimension])) return x;
        return Math.random() * size;
      }
      return force.resume();
    };
    force.resume = function() {
      return force.alpha(.1);
    };
    force.stop = function() {
      return force.alpha(0);
    };
    force.drag = function() {
      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
      if (!arguments.length) return drag;
      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
    };
    function dragmove(d) {
      d.px = d3.event.x, d.py = d3.event.y;
      force.resume();
    }
    return d3.rebind(force, event, "on");
  };
  function d3_layout_forceDragstart(d) {
    d.fixed |= 2;
  }
  function d3_layout_forceDragend(d) {
    d.fixed &= ~6;
  }
  function d3_layout_forceMouseover(d) {
    d.fixed |= 4;
    d.px = d.x, d.py = d.y;
  }
  function d3_layout_forceMouseout(d) {
    d.fixed &= ~4;
  }
  function d3_layout_forceAccumulate(quad, alpha, charges) {
    var cx = 0, cy = 0;
    quad.charge = 0;
    if (!quad.leaf) {
      var nodes = quad.nodes, n = nodes.length, i = -1, c;
      while (++i < n) {
        c = nodes[i];
        if (c == null) continue;
        d3_layout_forceAccumulate(c, alpha, charges);
        quad.charge += c.charge;
        cx += c.charge * c.cx;
        cy += c.charge * c.cy;
      }
    }
    if (quad.point) {
      if (!quad.leaf) {
        quad.point.x += Math.random() - .5;
        quad.point.y += Math.random() - .5;
      }
      var k = alpha * charges[quad.point.index];
      quad.charge += quad.pointCharge = k;
      cx += k * quad.point.x;
      cy += k * quad.point.y;
    }
    quad.cx = cx / quad.charge;
    quad.cy = cy / quad.charge;
  }
  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
  d3.layout.hierarchy = function() {
    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
    function hierarchy(root) {
      var stack = [ root ], nodes = [], node;
      root.depth = 0;
      while ((node = stack.pop()) != null) {
        nodes.push(node);
        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
          var n, childs, child;
          while (--n >= 0) {
            stack.push(child = childs[n]);
            child.parent = node;
            child.depth = node.depth + 1;
          }
          if (value) node.value = 0;
          node.children = childs;
        } else {
          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
          delete node.children;
        }
      }
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var childs, parent;
        if (sort && (childs = node.children)) childs.sort(sort);
        if (value && (parent = node.parent)) parent.value += node.value;
      });
      return nodes;
    }
    hierarchy.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return hierarchy;
    };
    hierarchy.children = function(x) {
      if (!arguments.length) return children;
      children = x;
      return hierarchy;
    };
    hierarchy.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return hierarchy;
    };
    hierarchy.revalue = function(root) {
      if (value) {
        d3_layout_hierarchyVisitBefore(root, function(node) {
          if (node.children) node.value = 0;
        });
        d3_layout_hierarchyVisitAfter(root, function(node) {
          var parent;
          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
          if (parent = node.parent) parent.value += node.value;
        });
      }
      return root;
    };
    return hierarchy;
  };
  function d3_layout_hierarchyRebind(object, hierarchy) {
    d3.rebind(object, hierarchy, "sort", "children", "value");
    object.nodes = object;
    object.links = d3_layout_hierarchyLinks;
    return object;
  }
  function d3_layout_hierarchyVisitBefore(node, callback) {
    var nodes = [ node ];
    while ((node = nodes.pop()) != null) {
      callback(node);
      if ((children = node.children) && (n = children.length)) {
        var n, children;
        while (--n >= 0) nodes.push(children[n]);
      }
    }
  }
  function d3_layout_hierarchyVisitAfter(node, callback) {
    var nodes = [ node ], nodes2 = [];
    while ((node = nodes.pop()) != null) {
      nodes2.push(node);
      if ((children = node.children) && (n = children.length)) {
        var i = -1, n, children;
        while (++i < n) nodes.push(children[i]);
      }
    }
    while ((node = nodes2.pop()) != null) {
      callback(node);
    }
  }
  function d3_layout_hierarchyChildren(d) {
    return d.children;
  }
  function d3_layout_hierarchyValue(d) {
    return d.value;
  }
  function d3_layout_hierarchySort(a, b) {
    return b.value - a.value;
  }
  function d3_layout_hierarchyLinks(nodes) {
    return d3.merge(nodes.map(function(parent) {
      return (parent.children || []).map(function(child) {
        return {
          source: parent,
          target: child
        };
      });
    }));
  }
  d3.layout.partition = function() {
    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
    function position(node, x, dx, dy) {
      var children = node.children;
      node.x = x;
      node.y = node.depth * dy;
      node.dx = dx;
      node.dy = dy;
      if (children && (n = children.length)) {
        var i = -1, n, c, d;
        dx = node.value ? dx / node.value : 0;
        while (++i < n) {
          position(c = children[i], x, d = c.value * dx, dy);
          x += d;
        }
      }
    }
    function depth(node) {
      var children = node.children, d = 0;
      if (children && (n = children.length)) {
        var i = -1, n;
        while (++i < n) d = Math.max(d, depth(children[i]));
      }
      return 1 + d;
    }
    function partition(d, i) {
      var nodes = hierarchy.call(this, d, i);
      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
      return nodes;
    }
    partition.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return partition;
    };
    return d3_layout_hierarchyRebind(partition, hierarchy);
  };
  d3.layout.pie = function() {
    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ;
    function pie(data) {
      var values = data.map(function(d, i) {
        return +value.call(pie, d, i);
      });
      var a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle);
      var k = ((typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a) / d3.sum(values);
      var index = d3.range(data.length);
      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
        return values[j] - values[i];
      } : function(i, j) {
        return sort(data[i], data[j]);
      });
      var arcs = [];
      index.forEach(function(i) {
        var d;
        arcs[i] = {
          data: data[i],
          value: d = values[i],
          startAngle: a,
          endAngle: a += d * k
        };
      });
      return arcs;
    }
    pie.value = function(x) {
      if (!arguments.length) return value;
      value = x;
      return pie;
    };
    pie.sort = function(x) {
      if (!arguments.length) return sort;
      sort = x;
      return pie;
    };
    pie.startAngle = function(x) {
      if (!arguments.length) return startAngle;
      startAngle = x;
      return pie;
    };
    pie.endAngle = function(x) {
      if (!arguments.length) return endAngle;
      endAngle = x;
      return pie;
    };
    return pie;
  };
  var d3_layout_pieSortByValue = {};
  d3.layout.stack = function() {
    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
    function stack(data, index) {
      var series = data.map(function(d, i) {
        return values.call(stack, d, i);
      });
      var points = series.map(function(d) {
        return d.map(function(v, i) {
          return [ x.call(stack, v, i), y.call(stack, v, i) ];
        });
      });
      var orders = order.call(stack, points, index);
      series = d3.permute(series, orders);
      points = d3.permute(points, orders);
      var offsets = offset.call(stack, points, index);
      var n = series.length, m = series[0].length, i, j, o;
      for (j = 0; j < m; ++j) {
        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
        for (i = 1; i < n; ++i) {
          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
        }
      }
      return data;
    }
    stack.values = function(x) {
      if (!arguments.length) return values;
      values = x;
      return stack;
    };
    stack.order = function(x) {
      if (!arguments.length) return order;
      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
      return stack;
    };
    stack.offset = function(x) {
      if (!arguments.length) return offset;
      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
      return stack;
    };
    stack.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      return stack;
    };
    stack.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      return stack;
    };
    stack.out = function(z) {
      if (!arguments.length) return out;
      out = z;
      return stack;
    };
    return stack;
  };
  function d3_layout_stackX(d) {
    return d.x;
  }
  function d3_layout_stackY(d) {
    return d.y;
  }
  function d3_layout_stackOut(d, y0, y) {
    d.y0 = y0;
    d.y = y;
  }
  var d3_layout_stackOrders = d3.map({
    "inside-out": function(data) {
      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
        return max[a] - max[b];
      }), top = 0, bottom = 0, tops = [], bottoms = [];
      for (i = 0; i < n; ++i) {
        j = index[i];
        if (top < bottom) {
          top += sums[j];
          tops.push(j);
        } else {
          bottom += sums[j];
          bottoms.push(j);
        }
      }
      return bottoms.reverse().concat(tops);
    },
    reverse: function(data) {
      return d3.range(data.length).reverse();
    },
    "default": d3_layout_stackOrderDefault
  });
  var d3_layout_stackOffsets = d3.map({
    silhouette: function(data) {
      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o > max) max = o;
        sums.push(o);
      }
      for (j = 0; j < m; ++j) {
        y0[j] = (max - sums[j]) / 2;
      }
      return y0;
    },
    wiggle: function(data) {
      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
      y0[0] = o = o0 = 0;
      for (j = 1; j < m; ++j) {
        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
          }
          s2 += s3 * data[i][j][1];
        }
        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
        if (o < o0) o0 = o;
      }
      for (j = 0; j < m; ++j) y0[j] -= o0;
      return y0;
    },
    expand: function(data) {
      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
      for (j = 0; j < m; ++j) {
        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
      }
      for (j = 0; j < m; ++j) y0[j] = 0;
      return y0;
    },
    zero: d3_layout_stackOffsetZero
  });
  function d3_layout_stackOrderDefault(data) {
    return d3.range(data.length);
  }
  function d3_layout_stackOffsetZero(data) {
    var j = -1, m = data[0].length, y0 = [];
    while (++j < m) y0[j] = 0;
    return y0;
  }
  function d3_layout_stackMaxIndex(array) {
    var i = 1, j = 0, v = array[0][1], k, n = array.length;
    for (;i < n; ++i) {
      if ((k = array[i][1]) > v) {
        j = i;
        v = k;
      }
    }
    return j;
  }
  function d3_layout_stackReduceSum(d) {
    return d.reduce(d3_layout_stackSum, 0);
  }
  function d3_layout_stackSum(p, d) {
    return p + d[1];
  }
  d3.layout.histogram = function() {
    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
    function histogram(data, i) {
      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
      while (++i < m) {
        bin = bins[i] = [];
        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
        bin.y = 0;
      }
      if (m > 0) {
        i = -1;
        while (++i < n) {
          x = values[i];
          if (x >= range[0] && x <= range[1]) {
            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
            bin.y += k;
            bin.push(data[i]);
          }
        }
      }
      return bins;
    }
    histogram.value = function(x) {
      if (!arguments.length) return valuer;
      valuer = x;
      return histogram;
    };
    histogram.range = function(x) {
      if (!arguments.length) return ranger;
      ranger = d3_functor(x);
      return histogram;
    };
    histogram.bins = function(x) {
      if (!arguments.length) return binner;
      binner = typeof x === "number" ? function(range) {
        return d3_layout_histogramBinFixed(range, x);
      } : d3_functor(x);
      return histogram;
    };
    histogram.frequency = function(x) {
      if (!arguments.length) return frequency;
      frequency = !!x;
      return histogram;
    };
    return histogram;
  };
  function d3_layout_histogramBinSturges(range, values) {
    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
  }
  function d3_layout_histogramBinFixed(range, n) {
    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
    while (++x <= n) f[x] = m * x + b;
    return f;
  }
  function d3_layout_histogramRange(values) {
    return [ d3.min(values), d3.max(values) ];
  }
  d3.layout.pack = function() {
    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
    function pack(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
        return radius;
      };
      root.x = root.y = 0;
      d3_layout_hierarchyVisitAfter(root, function(d) {
        d.r = +r(d.value);
      });
      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
      if (padding) {
        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r += dr;
        });
        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
        d3_layout_hierarchyVisitAfter(root, function(d) {
          d.r -= dr;
        });
      }
      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
      return nodes;
    }
    pack.size = function(_) {
      if (!arguments.length) return size;
      size = _;
      return pack;
    };
    pack.radius = function(_) {
      if (!arguments.length) return radius;
      radius = _ == null || typeof _ === "function" ? _ : +_;
      return pack;
    };
    pack.padding = function(_) {
      if (!arguments.length) return padding;
      padding = +_;
      return pack;
    };
    return d3_layout_hierarchyRebind(pack, hierarchy);
  };
  function d3_layout_packSort(a, b) {
    return a.value - b.value;
  }
  function d3_layout_packInsert(a, b) {
    var c = a._pack_next;
    a._pack_next = b;
    b._pack_prev = a;
    b._pack_next = c;
    c._pack_prev = b;
  }
  function d3_layout_packSplice(a, b) {
    a._pack_next = b;
    b._pack_prev = a;
  }
  function d3_layout_packIntersects(a, b) {
    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
    return .999 * dr * dr > dx * dx + dy * dy;
  }
  function d3_layout_packSiblings(node) {
    if (!(nodes = node.children) || !(n = nodes.length)) return;
    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
    function bound(node) {
      xMin = Math.min(node.x - node.r, xMin);
      xMax = Math.max(node.x + node.r, xMax);
      yMin = Math.min(node.y - node.r, yMin);
      yMax = Math.max(node.y + node.r, yMax);
    }
    nodes.forEach(d3_layout_packLink);
    a = nodes[0];
    a.x = -a.r;
    a.y = 0;
    bound(a);
    if (n > 1) {
      b = nodes[1];
      b.x = b.r;
      b.y = 0;
      bound(b);
      if (n > 2) {
        c = nodes[2];
        d3_layout_packPlace(a, b, c);
        bound(c);
        d3_layout_packInsert(a, c);
        a._pack_prev = c;
        d3_layout_packInsert(c, b);
        b = a._pack_next;
        for (i = 3; i < n; i++) {
          d3_layout_packPlace(a, b, c = nodes[i]);
          var isect = 0, s1 = 1, s2 = 1;
          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
            if (d3_layout_packIntersects(j, c)) {
              isect = 1;
              break;
            }
          }
          if (isect == 1) {
            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
              if (d3_layout_packIntersects(k, c)) {
                break;
              }
            }
          }
          if (isect) {
            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
            i--;
          } else {
            d3_layout_packInsert(a, c);
            b = c;
            bound(c);
          }
        }
      }
    }
    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
    for (i = 0; i < n; i++) {
      c = nodes[i];
      c.x -= cx;
      c.y -= cy;
      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
    }
    node.r = cr;
    nodes.forEach(d3_layout_packUnlink);
  }
  function d3_layout_packLink(node) {
    node._pack_next = node._pack_prev = node;
  }
  function d3_layout_packUnlink(node) {
    delete node._pack_next;
    delete node._pack_prev;
  }
  function d3_layout_packTransform(node, x, y, k) {
    var children = node.children;
    node.x = x += k * node.x;
    node.y = y += k * node.y;
    node.r *= k;
    if (children) {
      var i = -1, n = children.length;
      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
    }
  }
  function d3_layout_packPlace(a, b, c) {
    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
    if (db && (dx || dy)) {
      var da = b.r + c.r, dc = dx * dx + dy * dy;
      da *= da;
      db *= db;
      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
      c.x = a.x + x * dx + y * dy;
      c.y = a.y + x * dy - y * dx;
    } else {
      c.x = a.x + db;
      c.y = a.y;
    }
  }
  d3.layout.tree = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
    function tree(d, i) {
      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
      d3_layout_hierarchyVisitBefore(root1, secondWalk);
      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
        var left = root0, right = root0, bottom = root0;
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          if (node.x < left.x) left = node;
          if (node.x > right.x) right = node;
          if (node.depth > bottom.depth) bottom = node;
        });
        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
        d3_layout_hierarchyVisitBefore(root0, function(node) {
          node.x = (node.x + tx) * kx;
          node.y = node.depth * ky;
        });
      }
      return nodes;
    }
    function wrapTree(root0) {
      var root1 = {
        A: null,
        children: [ root0 ]
      }, queue = [ root1 ], node1;
      while ((node1 = queue.pop()) != null) {
        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
          queue.push((children[i] = child = {
            _: children[i],
            parent: node1,
            children: (child = children[i].children) && child.slice() || [],
            A: null,
            a: null,
            z: 0,
            m: 0,
            c: 0,
            s: 0,
            t: null,
            i: i
          }).a = child);
        }
      }
      return root1.children[0];
    }
    function firstWalk(v) {
      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
      if (children.length) {
        d3_layout_treeShift(v);
        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
        if (w) {
          v.z = w.z + separation(v._, w._);
          v.m = v.z - midpoint;
        } else {
          v.z = midpoint;
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._);
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
    }
    function secondWalk(v) {
      v._.x = v.z + v.parent.m;
      v.m += v.parent.m;
    }
    function apportion(v, w, ancestor) {
      if (w) {
        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
          vom = d3_layout_treeLeft(vom);
          vop = d3_layout_treeRight(vop);
          vop.a = v;
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
          if (shift > 0) {
            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
            sip += shift;
            sop += shift;
          }
          sim += vim.m;
          sip += vip.m;
          som += vom.m;
          sop += vop.m;
        }
        if (vim && !d3_layout_treeRight(vop)) {
          vop.t = vim;
          vop.m += sim - sop;
        }
        if (vip && !d3_layout_treeLeft(vom)) {
          vom.t = vip;
          vom.m += sip - som;
          ancestor = v;
        }
      }
      return ancestor;
    }
    function sizeNode(node) {
      node.x *= size[0];
      node.y = node.depth * size[1];
    }
    tree.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return tree;
    };
    tree.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null ? sizeNode : null;
      return tree;
    };
    tree.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) == null ? null : sizeNode;
      return tree;
    };
    return d3_layout_hierarchyRebind(tree, hierarchy);
  };
  function d3_layout_treeSeparation(a, b) {
    return a.parent == b.parent ? 1 : 2;
  }
  function d3_layout_treeLeft(v) {
    var children = v.children;
    return children.length ? children[0] : v.t;
  }
  function d3_layout_treeRight(v) {
    var children = v.children, n;
    return (n = children.length) ? children[n - 1] : v.t;
  }
  function d3_layout_treeMove(wm, wp, shift) {
    var change = shift / (wp.i - wm.i);
    wp.c -= change;
    wp.s += shift;
    wm.c += change;
    wp.z += shift;
    wp.m += shift;
  }
  function d3_layout_treeShift(v) {
    var shift = 0, change = 0, children = v.children, i = children.length, w;
    while (--i >= 0) {
      w = children[i];
      w.z += shift;
      w.m += shift;
      shift += w.s + (change += w.c);
    }
  }
  function d3_layout_treeAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor;
  }
  d3.layout.cluster = function() {
    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
    function cluster(d, i) {
      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
      d3_layout_hierarchyVisitAfter(root, function(node) {
        var children = node.children;
        if (children && children.length) {
          node.x = d3_layout_clusterX(children);
          node.y = d3_layout_clusterY(children);
        } else {
          node.x = previousNode ? x += separation(node, previousNode) : 0;
          node.y = 0;
          previousNode = node;
        }
      });
      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
        node.x = (node.x - root.x) * size[0];
        node.y = (root.y - node.y) * size[1];
      } : function(node) {
        node.x = (node.x - x0) / (x1 - x0) * size[0];
        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
      });
      return nodes;
    }
    cluster.separation = function(x) {
      if (!arguments.length) return separation;
      separation = x;
      return cluster;
    };
    cluster.size = function(x) {
      if (!arguments.length) return nodeSize ? null : size;
      nodeSize = (size = x) == null;
      return cluster;
    };
    cluster.nodeSize = function(x) {
      if (!arguments.length) return nodeSize ? size : null;
      nodeSize = (size = x) != null;
      return cluster;
    };
    return d3_layout_hierarchyRebind(cluster, hierarchy);
  };
  function d3_layout_clusterY(children) {
    return 1 + d3.max(children, function(child) {
      return child.y;
    });
  }
  function d3_layout_clusterX(children) {
    return children.reduce(function(x, child) {
      return x + child.x;
    }, 0) / children.length;
  }
  function d3_layout_clusterLeft(node) {
    var children = node.children;
    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
  }
  function d3_layout_clusterRight(node) {
    var children = node.children, n;
    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
  }
  d3.layout.treemap = function() {
    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
    function scale(children, k) {
      var i = -1, n = children.length, child, area;
      while (++i < n) {
        area = (child = children[i]).value * (k < 0 ? 0 : k);
        child.area = isNaN(area) || area <= 0 ? 0 : area;
      }
    }
    function squarify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while ((n = remaining.length) > 0) {
          row.push(child = remaining[n - 1]);
          row.area += child.area;
          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
            remaining.pop();
            best = score;
          } else {
            row.area -= row.pop().area;
            position(row, u, rect, false);
            u = Math.min(rect.dx, rect.dy);
            row.length = row.area = 0;
            best = Infinity;
          }
        }
        if (row.length) {
          position(row, u, rect, true);
          row.length = row.area = 0;
        }
        children.forEach(squarify);
      }
    }
    function stickify(node) {
      var children = node.children;
      if (children && children.length) {
        var rect = pad(node), remaining = children.slice(), child, row = [];
        scale(remaining, rect.dx * rect.dy / node.value);
        row.area = 0;
        while (child = remaining.pop()) {
          row.push(child);
          row.area += child.area;
          if (child.z != null) {
            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
            row.length = row.area = 0;
          }
        }
        children.forEach(stickify);
      }
    }
    function worst(row, u) {
      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
      while (++i < n) {
        if (!(r = row[i].area)) continue;
        if (r < rmin) rmin = r;
        if (r > rmax) rmax = r;
      }
      s *= s;
      u *= u;
      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
    }
    function position(row, u, rect, flush) {
      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
      if (u == rect.dx) {
        if (flush || v > rect.dy) v = rect.dy;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dy = v;
          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
        }
        o.z = true;
        o.dx += rect.x + rect.dx - x;
        rect.y += v;
        rect.dy -= v;
      } else {
        if (flush || v > rect.dx) v = rect.dx;
        while (++i < n) {
          o = row[i];
          o.x = x;
          o.y = y;
          o.dx = v;
          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
        }
        o.z = false;
        o.dy += rect.y + rect.dy - y;
        rect.x += v;
        rect.dx -= v;
      }
    }
    function treemap(d) {
      var nodes = stickies || hierarchy(d), root = nodes[0];
      root.x = 0;
      root.y = 0;
      root.dx = size[0];
      root.dy = size[1];
      if (stickies) hierarchy.revalue(root);
      scale([ root ], root.dx * root.dy / root.value);
      (stickies ? stickify : squarify)(root);
      if (sticky) stickies = nodes;
      return nodes;
    }
    treemap.size = function(x) {
      if (!arguments.length) return size;
      size = x;
      return treemap;
    };
    treemap.padding = function(x) {
      if (!arguments.length) return padding;
      function padFunction(node) {
        var p = x.call(treemap, node, node.depth);
        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
      }
      function padConstant(node) {
        return d3_layout_treemapPad(node, x);
      }
      var type;
      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
      padConstant) : padConstant;
      return treemap;
    };
    treemap.round = function(x) {
      if (!arguments.length) return round != Number;
      round = x ? Math.round : Number;
      return treemap;
    };
    treemap.sticky = function(x) {
      if (!arguments.length) return sticky;
      sticky = x;
      stickies = null;
      return treemap;
    };
    treemap.ratio = function(x) {
      if (!arguments.length) return ratio;
      ratio = x;
      return treemap;
    };
    treemap.mode = function(x) {
      if (!arguments.length) return mode;
      mode = x + "";
      return treemap;
    };
    return d3_layout_hierarchyRebind(treemap, hierarchy);
  };
  function d3_layout_treemapPadNull(node) {
    return {
      x: node.x,
      y: node.y,
      dx: node.dx,
      dy: node.dy
    };
  }
  function d3_layout_treemapPad(node, padding) {
    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
    if (dx < 0) {
      x += dx / 2;
      dx = 0;
    }
    if (dy < 0) {
      y += dy / 2;
      dy = 0;
    }
    return {
      x: x,
      y: y,
      dx: dx,
      dy: dy
    };
  }
  d3.random = {
    normal: function(µ, σ) {
      var n = arguments.length;
      if (n < 2) σ = 1;
      if (n < 1) µ = 0;
      return function() {
        var x, y, r;
        do {
          x = Math.random() * 2 - 1;
          y = Math.random() * 2 - 1;
          r = x * x + y * y;
        } while (!r || r > 1);
        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
      };
    },
    logNormal: function() {
      var random = d3.random.normal.apply(d3, arguments);
      return function() {
        return Math.exp(random());
      };
    },
    bates: function(m) {
      var random = d3.random.irwinHall(m);
      return function() {
        return random() / m;
      };
    },
    irwinHall: function(m) {
      return function() {
        for (var s = 0, j = 0; j < m; j++) s += Math.random();
        return s;
      };
    }
  };
  d3.scale = {};
  function d3_scaleExtent(domain) {
    var start = domain[0], stop = domain[domain.length - 1];
    return start < stop ? [ start, stop ] : [ stop, start ];
  }
  function d3_scaleRange(scale) {
    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
  }
  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
    return function(x) {
      return i(u(x));
    };
  }
  function d3_scale_nice(domain, nice) {
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
    if (x1 < x0) {
      dx = i0, i0 = i1, i1 = dx;
      dx = x0, x0 = x1, x1 = dx;
    }
    domain[i0] = nice.floor(x0);
    domain[i1] = nice.ceil(x1);
    return domain;
  }
  function d3_scale_niceStep(step) {
    return step ? {
      floor: function(x) {
        return Math.floor(x / step) * step;
      },
      ceil: function(x) {
        return Math.ceil(x / step) * step;
      }
    } : d3_scale_niceIdentity;
  }
  var d3_scale_niceIdentity = {
    floor: d3_identity,
    ceil: d3_identity
  };
  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
    if (domain[k] < domain[0]) {
      domain = domain.slice().reverse();
      range = range.slice().reverse();
    }
    while (++j <= k) {
      u.push(uninterpolate(domain[j - 1], domain[j]));
      i.push(interpolate(range[j - 1], range[j]));
    }
    return function(x) {
      var j = d3.bisect(domain, x, 1, k) - 1;
      return i[j](u[j](x));
    };
  }
  d3.scale.linear = function() {
    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
  };
  function d3_scale_linear(domain, range, interpolate, clamp) {
    var output, input;
    function rescale() {
      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
      output = linear(domain, range, uninterpolate, interpolate);
      input = linear(range, domain, uninterpolate, d3_interpolate);
      return scale;
    }
    function scale(x) {
      return output(x);
    }
    scale.invert = function(y) {
      return input(y);
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(Number);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.rangeRound = function(x) {
      return scale.range(x).interpolate(d3_interpolateRound);
    };
    scale.clamp = function(x) {
      if (!arguments.length) return clamp;
      clamp = x;
      return rescale();
    };
    scale.interpolate = function(x) {
      if (!arguments.length) return interpolate;
      interpolate = x;
      return rescale();
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      d3_scale_linearNice(domain, m);
      return rescale();
    };
    scale.copy = function() {
      return d3_scale_linear(domain, range, interpolate, clamp);
    };
    return rescale();
  }
  function d3_scale_linearRebind(scale, linear) {
    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
  }
  function d3_scale_linearNice(domain, m) {
    return d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
  }
  function d3_scale_linearTickRange(domain, m) {
    if (m == null) m = 10;
    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
    extent[0] = Math.ceil(extent[0] / step) * step;
    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
    extent[2] = step;
    return extent;
  }
  function d3_scale_linearTicks(domain, m) {
    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
  }
  function d3_scale_linearTickFormat(domain, m, format) {
    var range = d3_scale_linearTickRange(domain, m);
    if (format) {
      var match = d3_format_re.exec(format);
      match.shift();
      if (match[8] === "s") {
        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
        match[8] = "f";
        format = d3.format(match.join(""));
        return function(d) {
          return format(prefix.scale(d)) + prefix.symbol;
        };
      }
      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
      format = match.join("");
    } else {
      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
    }
    return d3.format(format);
  }
  var d3_scale_linearFormatSignificant = {
    s: 1,
    g: 1,
    p: 1,
    r: 1,
    e: 1
  };
  function d3_scale_linearPrecision(value) {
    return -Math.floor(Math.log(value) / Math.LN10 + .01);
  }
  function d3_scale_linearFormatPrecision(type, range) {
    var p = d3_scale_linearPrecision(range[2]);
    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
  }
  d3.scale.log = function() {
    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
  };
  function d3_scale_log(linear, base, positive, domain) {
    function log(x) {
      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
    }
    function pow(x) {
      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
    }
    function scale(x) {
      return linear(log(x));
    }
    scale.invert = function(x) {
      return pow(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      positive = x[0] >= 0;
      linear.domain((domain = x.map(Number)).map(log));
      return scale;
    };
    scale.base = function(_) {
      if (!arguments.length) return base;
      base = +_;
      linear.domain(domain.map(log));
      return scale;
    };
    scale.nice = function() {
      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
      linear.domain(niced);
      domain = niced.map(pow);
      return scale;
    };
    scale.ticks = function() {
      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
      if (isFinite(j - i)) {
        if (positive) {
          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
          ticks.push(pow(i));
        } else {
          ticks.push(pow(i));
          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
        }
        for (i = 0; ticks[i] < u; i++) {}
        for (j = ticks.length; ticks[j - 1] > v; j--) {}
        ticks = ticks.slice(i, j);
      }
      return ticks;
    };
    scale.tickFormat = function(n, format) {
      if (!arguments.length) return d3_scale_logFormat;
      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
      var k = Math.max(.1, n / scale.ticks().length), f = positive ? (e = 1e-12, Math.ceil) : (e = -1e-12, 
      Math.floor), e;
      return function(d) {
        return d / pow(f(log(d) + e)) <= k ? format(d) : "";
      };
    };
    scale.copy = function() {
      return d3_scale_log(linear.copy(), base, positive, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
    floor: function(x) {
      return -Math.ceil(-x);
    },
    ceil: function(x) {
      return -Math.floor(-x);
    }
  };
  d3.scale.pow = function() {
    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
  };
  function d3_scale_pow(linear, exponent, domain) {
    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
    function scale(x) {
      return linear(powp(x));
    }
    scale.invert = function(x) {
      return powb(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      linear.domain((domain = x.map(Number)).map(powp));
      return scale;
    };
    scale.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    scale.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    scale.nice = function(m) {
      return scale.domain(d3_scale_linearNice(domain, m));
    };
    scale.exponent = function(x) {
      if (!arguments.length) return exponent;
      powp = d3_scale_powPow(exponent = x);
      powb = d3_scale_powPow(1 / exponent);
      linear.domain(domain.map(powp));
      return scale;
    };
    scale.copy = function() {
      return d3_scale_pow(linear.copy(), exponent, domain);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_scale_powPow(e) {
    return function(x) {
      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
    };
  }
  d3.scale.sqrt = function() {
    return d3.scale.pow().exponent(.5);
  };
  d3.scale.ordinal = function() {
    return d3_scale_ordinal([], {
      t: "range",
      a: [ [] ]
    });
  };
  function d3_scale_ordinal(domain, ranger) {
    var index, range, rangeBand;
    function scale(x) {
      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
    }
    function steps(start, step) {
      return d3.range(domain.length).map(function(i) {
        return start + step * i;
      });
    }
    scale.invert = function(x) {
      // TODO take into account current ranger
      var _range = range.concat();
      var _domain = domain.concat();
      _range.sort(function(a, b) {
        if(a > b) {
            return 1;
        } else if(a === b) {
            return 0;
        } else {
            return -1;
        }
      })
      _domain.sort(function(a, b) {
        if(a > b) {
            return 1;
        } else if(a === b) {
            return 0;
        } else {
            return -1;
        }
      })
      return _domain[d3.bisect(_range, x) - 1];
    };
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = [];
      index = new d3_Map();
      var i = -1, n = x.length, xi;
      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
      return scale[ranger.t].apply(scale, ranger.a);
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      rangeBand = 0;
      ranger = {
        t: "range",
        a: arguments
      };
      return scale;
    };
    scale.rangePoints = function(x, padding) {
      if (arguments.length < 2) padding = 0;
      var start = x[0], stop = x[1], step = (stop - start) / (Math.max(1, domain.length - 1) + padding);
      range = steps(domain.length < 2 ? (start + stop) / 2 : start + step * padding / 2, step);
      rangeBand = 0;
      ranger = {
        t: "rangePoints",
        a: arguments
      };
      return scale;
    };
    scale.rangeBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
      range = steps(start + step * outerPadding, step);
      if (reverse) range.reverse();
      rangeBand = step * (1 - padding);
      ranger = {
        t: "rangeBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeRoundBands = function(x, padding, outerPadding) {
      if (arguments.length < 2) padding = 0;
      if (arguments.length < 3) outerPadding = padding;
      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding)), error = stop - start - (domain.length - padding) * step;
      range = steps(start + Math.round(error / 2), step);
      if (reverse) range.reverse();
      rangeBand = Math.round(step * (1 - padding));
      ranger = {
        t: "rangeRoundBands",
        a: arguments
      };
      return scale;
    };
    scale.rangeBand = function() {
      return rangeBand;
    };
    scale.rangeExtent = function() {
      return d3_scaleExtent(ranger.a[0]);
    };
    scale.copy = function() {
      return d3_scale_ordinal(domain, ranger);
    };
    return scale.domain(domain);
  }
  d3.scale.category10 = function() {
    return d3.scale.ordinal().range(d3_category10);
  };
  d3.scale.category20 = function() {
    return d3.scale.ordinal().range(d3_category20);
  };
  d3.scale.category20b = function() {
    return d3.scale.ordinal().range(d3_category20b);
  };
  d3.scale.category20c = function() {
    return d3.scale.ordinal().range(d3_category20c);
  };
  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
  d3.scale.quantile = function() {
    return d3_scale_quantile([], []);
  };
  function d3_scale_quantile(domain, range) {
    var thresholds;
    function rescale() {
      var k = 0, q = range.length;
      thresholds = [];
      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
      return scale;
    }
    function scale(x) {
      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
    }
    scale.domain = function(x) {
      if (!arguments.length) return domain;
      domain = x.filter(d3_number).sort(d3_ascending);
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.quantiles = function() {
      return thresholds;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
    };
    scale.copy = function() {
      return d3_scale_quantile(domain, range);
    };
    return rescale();
  }
  d3.scale.quantize = function() {
    return d3_scale_quantize(0, 1, [ 0, 1 ]);
  };
  function d3_scale_quantize(x0, x1, range) {
    var kx, i;
    function scale(x) {
      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
    }
    function rescale() {
      kx = range.length / (x1 - x0);
      i = range.length - 1;
      return scale;
    }
    scale.domain = function(x) {
      if (!arguments.length) return [ x0, x1 ];
      x0 = +x[0];
      x1 = +x[x.length - 1];
      return rescale();
    };
    scale.range = function(x) {
      if (!arguments.length) return range;
      range = x;
      return rescale();
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      y = y < 0 ? NaN : y / kx + x0;
      return [ y, y + 1 / kx ];
    };
    scale.copy = function() {
      return d3_scale_quantize(x0, x1, range);
    };
    return rescale();
  }
  d3.scale.threshold = function() {
    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
  };
  function d3_scale_threshold(domain, range) {
    function scale(x) {
      if (x <= x) return range[d3.bisect(domain, x)];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain;
      domain = _;
      return scale;
    };
    scale.range = function(_) {
      if (!arguments.length) return range;
      range = _;
      return scale;
    };
    scale.invertExtent = function(y) {
      y = range.indexOf(y);
      return [ domain[y - 1], domain[y] ];
    };
    scale.copy = function() {
      return d3_scale_threshold(domain, range);
    };
    return scale;
  }
  d3.scale.identity = function() {
    return d3_scale_identity([ 0, 1 ]);
  };
  function d3_scale_identity(domain) {
    function identity(x) {
      return +x;
    }
    identity.invert = identity;
    identity.domain = identity.range = function(x) {
      if (!arguments.length) return domain;
      domain = x.map(identity);
      return identity;
    };
    identity.ticks = function(m) {
      return d3_scale_linearTicks(domain, m);
    };
    identity.tickFormat = function(m, format) {
      return d3_scale_linearTickFormat(domain, m, format);
    };
    identity.copy = function() {
      return d3_scale_identity(domain);
    };
    return identity;
  }
  d3.svg = {};
  d3.svg.arc = function() {
    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function arc() {
      var r0 = innerRadius.apply(this, arguments), r1 = outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) + d3_svg_arcOffset, a1 = endAngle.apply(this, arguments) + d3_svg_arcOffset, da = (a1 < a0 && (da = a0, 
      a0 = a1, a1 = da), a1 - a0), df = da < π ? "0" : "1", c0 = Math.cos(a0), s0 = Math.sin(a0), c1 = Math.cos(a1), s1 = Math.sin(a1);
      return da >= d3_svg_arcMax ? r0 ? "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "M0," + r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + -r0 + "A" + r0 + "," + r0 + " 0 1,0 0," + r0 + "Z" : "M0," + r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + -r1 + "A" + r1 + "," + r1 + " 0 1,1 0," + r1 + "Z" : r0 ? "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L" + r0 * c1 + "," + r0 * s1 + "A" + r0 + "," + r0 + " 0 " + df + ",0 " + r0 * c0 + "," + r0 * s0 + "Z" : "M" + r1 * c0 + "," + r1 * s0 + "A" + r1 + "," + r1 + " 0 " + df + ",1 " + r1 * c1 + "," + r1 * s1 + "L0,0" + "Z";
    }
    arc.innerRadius = function(v) {
      if (!arguments.length) return innerRadius;
      innerRadius = d3_functor(v);
      return arc;
    };
    arc.outerRadius = function(v) {
      if (!arguments.length) return outerRadius;
      outerRadius = d3_functor(v);
      return arc;
    };
    arc.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return arc;
    };
    arc.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return arc;
    };
    arc.centroid = function() {
      var r = (innerRadius.apply(this, arguments) + outerRadius.apply(this, arguments)) / 2, a = (startAngle.apply(this, arguments) + endAngle.apply(this, arguments)) / 2 + d3_svg_arcOffset;
      return [ Math.cos(a) * r, Math.sin(a) * r ];
    };
    return arc;
  };
  var d3_svg_arcOffset = -halfπ, d3_svg_arcMax = τ - ε;
  function d3_svg_arcInnerRadius(d) {
    return d.innerRadius;
  }
  function d3_svg_arcOuterRadius(d) {
    return d.outerRadius;
  }
  function d3_svg_arcStartAngle(d) {
    return d.startAngle;
  }
  function d3_svg_arcEndAngle(d) {
    return d.endAngle;
  }
  function d3_svg_line(projection) {
    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
    function line(data) {
      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
      function segment() {
        segments.push("M", interpolate(projection(points), tension));
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
        } else if (points.length) {
          segment();
          points = [];
        }
      }
      if (points.length) segment();
      return segments.length ? segments.join("") : null;
    }
    line.x = function(_) {
      if (!arguments.length) return x;
      x = _;
      return line;
    };
    line.y = function(_) {
      if (!arguments.length) return y;
      y = _;
      return line;
    };
    line.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return line;
    };
    line.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      return line;
    };
    line.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return line;
    };
    return line;
  }
  d3.svg.line = function() {
    return d3_svg_line(d3_identity);
  };
  var d3_svg_lineInterpolators = d3.map({
    linear: d3_svg_lineLinear,
    "linear-closed": d3_svg_lineLinearClosed,
    step: d3_svg_lineStep,
    "step-before": d3_svg_lineStepBefore,
    "step-after": d3_svg_lineStepAfter,
    basis: d3_svg_lineBasis,
    "basis-open": d3_svg_lineBasisOpen,
    "basis-closed": d3_svg_lineBasisClosed,
    bundle: d3_svg_lineBundle,
    cardinal: d3_svg_lineCardinal,
    "cardinal-open": d3_svg_lineCardinalOpen,
    "cardinal-closed": d3_svg_lineCardinalClosed,
    monotone: d3_svg_lineMonotone
  });
  d3_svg_lineInterpolators.forEach(function(key, value) {
    value.key = key;
    value.closed = /-closed$/.test(key);
  });
  function d3_svg_lineLinear(points) {
    return points.join("L");
  }
  function d3_svg_lineLinearClosed(points) {
    return d3_svg_lineLinear(points) + "Z";
  }
  function d3_svg_lineStep(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
    if (n > 1) path.push("H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepBefore(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
    return path.join("");
  }
  function d3_svg_lineStepAfter(points) {
    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
    return path.join("");
  }
  function d3_svg_lineCardinalOpen(points, tension) {
    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, points.length - 1), d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineCardinalClosed(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
  }
  function d3_svg_lineCardinal(points, tension) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
  }
  function d3_svg_lineHermite(points, tangents) {
    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
      return d3_svg_lineLinear(points);
    }
    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
    if (quad) {
      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
      p0 = points[1];
      pi = 2;
    }
    if (tangents.length > 1) {
      t = tangents[1];
      p = points[pi];
      pi++;
      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      for (var i = 2; i < tangents.length; i++, pi++) {
        p = points[pi];
        t = tangents[i];
        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
      }
    }
    if (quad) {
      var lp = points[pi];
      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
    }
    return path;
  }
  function d3_svg_lineCardinalTangents(points, tension) {
    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
    while (++i < n) {
      p0 = p1;
      p1 = p2;
      p2 = points[i];
      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
    }
    return tangents;
  }
  function d3_svg_lineBasis(points) {
    if (points.length < 3) return d3_svg_lineLinear(points);
    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    points.push(points[n - 1]);
    while (++i <= n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    points.pop();
    path.push("L", pi);
    return path.join("");
  }
  function d3_svg_lineBasisOpen(points) {
    if (points.length < 4) return d3_svg_lineLinear(points);
    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
    while (++i < 3) {
      pi = points[i];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
    --i;
    while (++i < n) {
      pi = points[i];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBasisClosed(points) {
    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
    while (++i < 4) {
      pi = points[i % n];
      px.push(pi[0]);
      py.push(pi[1]);
    }
    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
    --i;
    while (++i < m) {
      pi = points[i % n];
      px.shift();
      px.push(pi[0]);
      py.shift();
      py.push(pi[1]);
      d3_svg_lineBasisBezier(path, px, py);
    }
    return path.join("");
  }
  function d3_svg_lineBundle(points, tension) {
    var n = points.length - 1;
    if (n) {
      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
      while (++i <= n) {
        p = points[i];
        t = i / n;
        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
      }
    }
    return d3_svg_lineBasis(points);
  }
  function d3_svg_lineDot4(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
  function d3_svg_lineBasisBezier(path, x, y) {
    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
  }
  function d3_svg_lineSlope(p0, p1) {
    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
  }
  function d3_svg_lineFiniteDifferences(points) {
    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
    while (++i < j) {
      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
    }
    m[i] = d;
    return m;
  }
  function d3_svg_lineMonotoneTangents(points) {
    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
    while (++i < j) {
      d = d3_svg_lineSlope(points[i], points[i + 1]);
      if (abs(d) < ε) {
        m[i] = m[i + 1] = 0;
      } else {
        a = m[i] / d;
        b = m[i + 1] / d;
        s = a * a + b * b;
        if (s > 9) {
          s = d * 3 / Math.sqrt(s);
          m[i] = s * a;
          m[i + 1] = s * b;
        }
      }
    }
    i = -1;
    while (++i <= j) {
      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
      tangents.push([ s || 0, m[i] * s || 0 ]);
    }
    return tangents;
  }
  function d3_svg_lineMonotone(points) {
    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
  }
  d3.svg.line.radial = function() {
    var line = d3_svg_line(d3_svg_lineRadial);
    line.radius = line.x, delete line.x;
    line.angle = line.y, delete line.y;
    return line;
  };
  function d3_svg_lineRadial(points) {
    var point, i = -1, n = points.length, r, a;
    while (++i < n) {
      point = points[i];
      r = point[0];
      a = point[1] + d3_svg_arcOffset;
      point[0] = r * Math.cos(a);
      point[1] = r * Math.sin(a);
    }
    return points;
  }
  function d3_svg_area(projection) {
    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
    function area(data) {
      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
        return x;
      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
        return y;
      } : d3_functor(y1), x, y;
      function segment() {
        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
      }
      while (++i < n) {
        if (defined.call(this, d = data[i], i)) {
          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
        } else if (points0.length) {
          segment();
          points0 = [];
          points1 = [];
        }
      }
      if (points0.length) segment();
      return segments.length ? segments.join("") : null;
    }
    area.x = function(_) {
      if (!arguments.length) return x1;
      x0 = x1 = _;
      return area;
    };
    area.x0 = function(_) {
      if (!arguments.length) return x0;
      x0 = _;
      return area;
    };
    area.x1 = function(_) {
      if (!arguments.length) return x1;
      x1 = _;
      return area;
    };
    area.y = function(_) {
      if (!arguments.length) return y1;
      y0 = y1 = _;
      return area;
    };
    area.y0 = function(_) {
      if (!arguments.length) return y0;
      y0 = _;
      return area;
    };
    area.y1 = function(_) {
      if (!arguments.length) return y1;
      y1 = _;
      return area;
    };
    area.defined = function(_) {
      if (!arguments.length) return defined;
      defined = _;
      return area;
    };
    area.interpolate = function(_) {
      if (!arguments.length) return interpolateKey;
      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
      interpolateReverse = interpolate.reverse || interpolate;
      L = interpolate.closed ? "M" : "L";
      return area;
    };
    area.tension = function(_) {
      if (!arguments.length) return tension;
      tension = _;
      return area;
    };
    return area;
  }
  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
  d3.svg.area = function() {
    return d3_svg_area(d3_identity);
  };
  d3.svg.area.radial = function() {
    var area = d3_svg_area(d3_svg_lineRadial);
    area.radius = area.x, delete area.x;
    area.innerRadius = area.x0, delete area.x0;
    area.outerRadius = area.x1, delete area.x1;
    area.angle = area.y, delete area.y;
    area.startAngle = area.y0, delete area.y0;
    area.endAngle = area.y1, delete area.y1;
    return area;
  };
  d3.svg.chord = function() {
    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
    function chord(d, i) {
      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
    }
    function subgroup(self, f, d, i) {
      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) + d3_svg_arcOffset, a1 = endAngle.call(self, subgroup, i) + d3_svg_arcOffset;
      return {
        r: r,
        a0: a0,
        a1: a1,
        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
      };
    }
    function equals(a, b) {
      return a.a0 == b.a0 && a.a1 == b.a1;
    }
    function arc(r, p, a) {
      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
    }
    function curve(r0, p0, r1, p1) {
      return "Q 0,0 " + p1;
    }
    chord.radius = function(v) {
      if (!arguments.length) return radius;
      radius = d3_functor(v);
      return chord;
    };
    chord.source = function(v) {
      if (!arguments.length) return source;
      source = d3_functor(v);
      return chord;
    };
    chord.target = function(v) {
      if (!arguments.length) return target;
      target = d3_functor(v);
      return chord;
    };
    chord.startAngle = function(v) {
      if (!arguments.length) return startAngle;
      startAngle = d3_functor(v);
      return chord;
    };
    chord.endAngle = function(v) {
      if (!arguments.length) return endAngle;
      endAngle = d3_functor(v);
      return chord;
    };
    return chord;
  };
  function d3_svg_chordRadius(d) {
    return d.radius;
  }
  d3.svg.diagonal = function() {
    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
    function diagonal(d, i) {
      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
        x: p0.x,
        y: m
      }, {
        x: p3.x,
        y: m
      }, p3 ];
      p = p.map(projection);
      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
    }
    diagonal.source = function(x) {
      if (!arguments.length) return source;
      source = d3_functor(x);
      return diagonal;
    };
    diagonal.target = function(x) {
      if (!arguments.length) return target;
      target = d3_functor(x);
      return diagonal;
    };
    diagonal.projection = function(x) {
      if (!arguments.length) return projection;
      projection = x;
      return diagonal;
    };
    return diagonal;
  };
  function d3_svg_diagonalProjection(d) {
    return [ d.x, d.y ];
  }
  d3.svg.diagonal.radial = function() {
    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
    diagonal.projection = function(x) {
      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
    };
    return diagonal;
  };
  function d3_svg_diagonalRadialProjection(projection) {
    return function() {
      var d = projection.apply(this, arguments), r = d[0], a = d[1] + d3_svg_arcOffset;
      return [ r * Math.cos(a), r * Math.sin(a) ];
    };
  }
  d3.svg.symbol = function() {
    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
    function symbol(d, i) {
      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
    }
    symbol.type = function(x) {
      if (!arguments.length) return type;
      type = d3_functor(x);
      return symbol;
    };
    symbol.size = function(x) {
      if (!arguments.length) return size;
      size = d3_functor(x);
      return symbol;
    };
    return symbol;
  };
  function d3_svg_symbolSize() {
    return 64;
  }
  function d3_svg_symbolType() {
    return "circle";
  }
  function d3_svg_symbolCircle(size) {
    var r = Math.sqrt(size / π);
    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
  }
  var d3_svg_symbols = d3.map({
    circle: d3_svg_symbolCircle,
    cross: function(size) {
      var r = Math.sqrt(size / 5) / 2;
      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
    },
    diamond: function(size) {
      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
    },
    square: function(size) {
      var r = Math.sqrt(size) / 2;
      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
    },
    "triangle-down": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
    },
    "triangle-up": function(size) {
      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
    }
  });
  d3.svg.symbolTypes = d3_svg_symbols.keys();
  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
  function d3_transition(groups, id) {
    d3_subclass(groups, d3_transitionPrototype);
    groups.id = id;
    return groups;
  }
  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
  d3_transitionPrototype.call = d3_selectionPrototype.call;
  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
  d3_transitionPrototype.node = d3_selectionPrototype.node;
  d3_transitionPrototype.size = d3_selectionPrototype.size;
  d3.transition = function(selection) {
    return arguments.length ? d3_transitionInheritId ? selection.transition() : selection : d3_selectionRoot.transition();
  };
  d3.transition.prototype = d3_transitionPrototype;
  d3_transitionPrototype.select = function(selector) {
    var id = this.id, subgroups = [], subgroup, subnode, node;
    selector = d3_selection_selector(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
          if ("__data__" in node) subnode.__data__ = node.__data__;
          d3_transitionNode(subnode, i, id, node.__transition__[id]);
          subgroup.push(subnode);
        } else {
          subgroup.push(null);
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.selectAll = function(selector) {
    var id = this.id, subgroups = [], subgroup, subnodes, node, subnode, transition;
    selector = d3_selection_selectorAll(selector);
    for (var j = -1, m = this.length; ++j < m; ) {
      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
        if (node = group[i]) {
          transition = node.__transition__[id];
          subnodes = selector.call(node, node.__data__, i, j);
          subgroups.push(subgroup = []);
          for (var k = -1, o = subnodes.length; ++k < o; ) {
            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, id, transition);
            subgroup.push(subnode);
          }
        }
      }
    }
    return d3_transition(subgroups, id);
  };
  d3_transitionPrototype.filter = function(filter) {
    var subgroups = [], subgroup, group, node;
    if (typeof filter !== "function") filter = d3_selection_filter(filter);
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
          subgroup.push(node);
        }
      }
    }
    return d3_transition(subgroups, this.id);
  };
  d3_transitionPrototype.tween = function(name, tween) {
    var id = this.id;
    if (arguments.length < 2) return this.node().__transition__[id].tween.get(name);
    return d3_selection_each(this, tween == null ? function(node) {
      node.__transition__[id].tween.remove(name);
    } : function(node) {
      node.__transition__[id].tween.set(name, tween);
    });
  };
  function d3_transition_tween(groups, name, value, tween) {
    var id = groups.id;
    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
    } : (value = tween(value), function(node) {
      node.__transition__[id].tween.set(name, value);
    }));
  }
  d3_transitionPrototype.attr = function(nameNS, value) {
    if (arguments.length < 2) {
      for (value in nameNS) this.attr(value, nameNS[value]);
      return this;
    }
    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
    function attrNull() {
      this.removeAttribute(name);
    }
    function attrNullNS() {
      this.removeAttributeNS(name.space, name.local);
    }
    function attrTween(b) {
      return b == null ? attrNull : (b += "", function() {
        var a = this.getAttribute(name), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttribute(name, i(t));
        });
      });
    }
    function attrTweenNS(b) {
      return b == null ? attrNullNS : (b += "", function() {
        var a = this.getAttributeNS(name.space, name.local), i;
        return a !== b && (i = interpolate(a, b), function(t) {
          this.setAttributeNS(name.space, name.local, i(t));
        });
      });
    }
    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.attrTween = function(nameNS, tween) {
    var name = d3.ns.qualify(nameNS);
    function attrTween(d, i) {
      var f = tween.call(this, d, i, this.getAttribute(name));
      return f && function(t) {
        this.setAttribute(name, f(t));
      };
    }
    function attrTweenNS(d, i) {
      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
      return f && function(t) {
        this.setAttributeNS(name.space, name.local, f(t));
      };
    }
    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
  };
  d3_transitionPrototype.style = function(name, value, priority) {
    var n = arguments.length;
    if (n < 3) {
      if (typeof name !== "string") {
        if (n < 2) value = "";
        for (priority in name) this.style(priority, name[priority], value);
        return this;
      }
      priority = "";
    }
    function styleNull() {
      this.style.removeProperty(name);
    }
    function styleString(b) {
      return b == null ? styleNull : (b += "", function() {
        var a = d3_window.getComputedStyle(this, null).getPropertyValue(name), i;
        return a !== b && (i = d3_interpolate(a, b), function(t) {
          this.style.setProperty(name, i(t), priority);
        });
      });
    }
    return d3_transition_tween(this, "style." + name, value, styleString);
  };
  d3_transitionPrototype.styleTween = function(name, tween, priority) {
    if (arguments.length < 3) priority = "";
    function styleTween(d, i) {
      var f = tween.call(this, d, i, d3_window.getComputedStyle(this, null).getPropertyValue(name));
      return f && function(t) {
        this.style.setProperty(name, f(t), priority);
      };
    }
    return this.tween("style." + name, styleTween);
  };
  d3_transitionPrototype.text = function(value) {
    return d3_transition_tween(this, "text", value, d3_transition_text);
  };
  function d3_transition_text(b) {
    if (b == null) b = "";
    return function() {
      this.textContent = b;
    };
  }
  d3_transitionPrototype.remove = function() {
    return this.each("end.transition", function() {
      var p;
      if (this.__transition__.count < 2 && (p = this.parentNode)) p.removeChild(this);
    });
  };
  d3_transitionPrototype.ease = function(value) {
    var id = this.id;
    if (arguments.length < 1) return this.node().__transition__[id].ease;
    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
    return d3_selection_each(this, function(node) {
      node.__transition__[id].ease = value;
    });
  };
  d3_transitionPrototype.delay = function(value) {
    var id = this.id;
    if (arguments.length < 1) return this.node().__transition__[id].delay;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].delay = +value.call(node, node.__data__, i, j);
    } : (value = +value, function(node) {
      node.__transition__[id].delay = value;
    }));
  };
  d3_transitionPrototype.duration = function(value) {
    var id = this.id;
    if (arguments.length < 1) return this.node().__transition__[id].duration;
    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
      node.__transition__[id].duration = Math.max(1, value.call(node, node.__data__, i, j));
    } : (value = Math.max(1, value), function(node) {
      node.__transition__[id].duration = value;
    }));
  };
  d3_transitionPrototype.each = function(type, listener) {
    var id = this.id;
    if (arguments.length < 2) {
      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
      d3_transitionInheritId = id;
      d3_selection_each(this, function(node, i, j) {
        d3_transitionInherit = node.__transition__[id];
        type.call(node, node.__data__, i, j);
      });
      d3_transitionInherit = inherit;
      d3_transitionInheritId = inheritId;
    } else {
      d3_selection_each(this, function(node) {
        var transition = node.__transition__[id];
        (transition.event || (transition.event = d3.dispatch("start", "end"))).on(type, listener);
      });
    }
    return this;
  };
  d3_transitionPrototype.transition = function() {
    var id0 = this.id, id1 = ++d3_transitionId, subgroups = [], subgroup, group, node, transition;
    for (var j = 0, m = this.length; j < m; j++) {
      subgroups.push(subgroup = []);
      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
        if (node = group[i]) {
          transition = Object.create(node.__transition__[id0]);
          transition.delay += transition.duration;
          d3_transitionNode(node, i, id1, transition);
        }
        subgroup.push(node);
      }
    }
    return d3_transition(subgroups, id1);
  };
  function d3_transitionNode(node, i, id, inherit) {
    var lock = node.__transition__ || (node.__transition__ = {
      active: 0,
      count: 0
    }), transition = lock[id];
    if (!transition) {
      var time = inherit.time;
      transition = lock[id] = {
        tween: new d3_Map(),
        time: time,
        ease: inherit.ease,
        delay: inherit.delay,
        duration: inherit.duration
      };
      ++lock.count;
      d3.timer(function(elapsed) {
        var d = node.__data__, ease = transition.ease, delay = transition.delay, duration = transition.duration, timer = d3_timer_active, tweened = [];
        timer.t = delay + time;
        if (delay <= elapsed) return start(elapsed - delay);
        timer.c = start;
        function start(elapsed) {
          if (lock.active > id) return stop();
          lock.active = id;
          transition.event && transition.event.start.call(node, d, i);
          transition.tween.forEach(function(key, value) {
            if (value = value.call(node, d, i)) {
              tweened.push(value);
            }
          });
          d3.timer(function() {
            timer.c = tick(elapsed || 1) ? d3_true : tick;
            return 1;
          }, 0, time);
        }
        function tick(elapsed) {
          if (lock.active !== id) return stop();
          var t = elapsed / duration, e = ease(t), n = tweened.length;
          while (n > 0) {
            tweened[--n].call(node, e);
          }
          if (t >= 1) {
            transition.event && transition.event.end.call(node, d, i);
            return stop();
          }
        }
        function stop() {
          if (--lock.count) delete lock[id]; else delete node.__transition__;
          return 1;
        }
      }, 0, time);
    }
  }
  d3.svg.axis = function() {
    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
    function axis(g) {
      g.each(function() {
        var g = d3.select(this);
        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickTransform;
        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
        d3.transition(path));
        tickEnter.append("line");
        tickEnter.append("text");
        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text");
        switch (orient) {
         case "bottom":
          {
            tickTransform = d3_svg_axisX;
            lineEnter.attr("y2", innerTickSize);
            textEnter.attr("y", Math.max(innerTickSize, 0) + tickPadding);
            lineUpdate.attr("x2", 0).attr("y2", innerTickSize);
            textUpdate.attr("x", 0).attr("y", Math.max(innerTickSize, 0) + tickPadding);
            text.attr("dy", ".71em").style("text-anchor", "middle");
            pathUpdate.attr("d", "M" + range[0] + "," + outerTickSize + "V0H" + range[1] + "V" + outerTickSize);
            break;
          }

         case "top":
          {
            tickTransform = d3_svg_axisX;
            lineEnter.attr("y2", -innerTickSize);
            textEnter.attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
            lineUpdate.attr("x2", 0).attr("y2", -innerTickSize);
            textUpdate.attr("x", 0).attr("y", -(Math.max(innerTickSize, 0) + tickPadding));
            text.attr("dy", "0em").style("text-anchor", "middle");
            pathUpdate.attr("d", "M" + range[0] + "," + -outerTickSize + "V0H" + range[1] + "V" + -outerTickSize);
            break;
          }

         case "left":
          {
            tickTransform = d3_svg_axisY;
            lineEnter.attr("x2", -innerTickSize);
            textEnter.attr("x", -(Math.max(innerTickSize, 0) + tickPadding));
            lineUpdate.attr("x2", -innerTickSize).attr("y2", 0);
            textUpdate.attr("x", -(Math.max(innerTickSize, 0) + tickPadding)).attr("y", 0);
            text.attr("dy", ".32em").style("text-anchor", "end");
            pathUpdate.attr("d", "M" + -outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + -outerTickSize);
            break;
          }

         case "right":
          {
            tickTransform = d3_svg_axisY;
            lineEnter.attr("x2", innerTickSize);
            textEnter.attr("x", Math.max(innerTickSize, 0) + tickPadding);
            lineUpdate.attr("x2", innerTickSize).attr("y2", 0);
            textUpdate.attr("x", Math.max(innerTickSize, 0) + tickPadding).attr("y", 0);
            text.attr("dy", ".32em").style("text-anchor", "start");
            pathUpdate.attr("d", "M" + outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + outerTickSize);
            break;
          }
        }
        if (scale1.rangeBand) {
          var x = scale1, dx = x.rangeBand() / 2;
          scale0 = scale1 = function(d) {
            return x(d) + dx;
          };
        } else if (scale0.rangeBand) {
          scale0 = scale1;
        } else {
          tickExit.call(tickTransform, scale1);
        }
        tickEnter.call(tickTransform, scale0);
        tickUpdate.call(tickTransform, scale1);
      });
    }
    axis.scale = function(x) {
      if (!arguments.length) return scale;
      scale = x;
      return axis;
    };
    axis.orient = function(x) {
      if (!arguments.length) return orient;
      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
      return axis;
    };
    axis.ticks = function() {
      if (!arguments.length) return tickArguments_;
      tickArguments_ = arguments;
      return axis;
    };
    axis.tickValues = function(x) {
      if (!arguments.length) return tickValues;
      tickValues = x;
      return axis;
    };
    axis.tickFormat = function(x) {
      if (!arguments.length) return tickFormat_;
      tickFormat_ = x;
      return axis;
    };
    axis.tickSize = function(x) {
      var n = arguments.length;
      if (!n) return innerTickSize;
      innerTickSize = +x;
      outerTickSize = +arguments[n - 1];
      return axis;
    };
    axis.innerTickSize = function(x) {
      if (!arguments.length) return innerTickSize;
      innerTickSize = +x;
      return axis;
    };
    axis.outerTickSize = function(x) {
      if (!arguments.length) return outerTickSize;
      outerTickSize = +x;
      return axis;
    };
    axis.tickPadding = function(x) {
      if (!arguments.length) return tickPadding;
      tickPadding = +x;
      return axis;
    };
    axis.tickSubdivide = function() {
      return arguments.length && axis;
    };
    return axis;
  };
  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
    top: 1,
    right: 1,
    bottom: 1,
    left: 1
  };
  function d3_svg_axisX(selection, x) {
    selection.attr("transform", function(d) {
      return "translate(" + x(d) + ",0)";
    });
  }
  function d3_svg_axisY(selection, y) {
    selection.attr("transform", function(d) {
      return "translate(0," + y(d) + ")";
    });
  }
  d3.svg.brush = function() {
    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
    function brush(g) {
      g.each(function() {
        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
        var background = g.selectAll(".background").data([ 0 ]);
        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
        var resize = g.selectAll(".resize").data(resizes, d3_identity);
        resize.exit().remove();
        resize.enter().append("g").attr("class", function(d) {
          return "resize " + d;
        }).style("cursor", function(d) {
          return d3_svg_brushCursor[d];
        }).append("rect").attr("x", function(d) {
          return /[ew]$/.test(d) ? -3 : null;
        }).attr("y", function(d) {
          return /^[ns]/.test(d) ? -3 : null;
        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
        resize.style("display", brush.empty() ? "none" : null);
        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
        if (x) {
          range = d3_scaleRange(x);
          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
          redrawX(gUpdate);
        }
        if (y) {
          range = d3_scaleRange(y);
          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
          redrawY(gUpdate);
        }
        redraw(gUpdate);
      });
    }
    brush.event = function(g) {
      g.each(function() {
        var event_ = event.of(this, arguments), extent1 = {
          x: xExtent,
          y: yExtent,
          i: xExtentDomain,
          j: yExtentDomain
        }, extent0 = this.__chart__ || extent1;
        this.__chart__ = extent1;
        if (d3_transitionInheritId) {
          d3.select(this).transition().each("start.brush", function() {
            xExtentDomain = extent0.i;
            yExtentDomain = extent0.j;
            xExtent = extent0.x;
            yExtent = extent0.y;
            event_({
              type: "brushstart"
            });
          }).tween("brush:brush", function() {
            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
            xExtentDomain = yExtentDomain = null;
            return function(t) {
              xExtent = extent1.x = xi(t);
              yExtent = extent1.y = yi(t);
              event_({
                type: "brush",
                mode: "resize"
              });
            };
          }).each("end.brush", function() {
            xExtentDomain = extent1.i;
            yExtentDomain = extent1.j;
            event_({
              type: "brush",
              mode: "resize"
            });
            event_({
              type: "brushend"
            });
          });
        } else {
          event_({
            type: "brushstart"
          });
          event_({
            type: "brush",
            mode: "resize"
          });
          event_({
            type: "brushend"
          });
        }
      });
    };
    function redraw(g) {
      g.selectAll(".resize").attr("transform", function(d) {
        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
      });
    }
    function redrawX(g) {
      g.select(".extent").attr("x", xExtent[0]);
      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
    }
    function redrawY(g) {
      g.select(".extent").attr("y", yExtent[0]);
      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
    }
    function brushstart() {
      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(), center, origin = d3.mouse(target), offset;
      var w = d3.select(d3_window).on("keydown.brush", keydown).on("keyup.brush", keyup);
      if (d3.event.changedTouches) {
        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
      } else {
        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
      }
      g.interrupt().selectAll("*").interrupt();
      if (dragging) {
        origin[0] = xExtent[0] - origin[0];
        origin[1] = yExtent[0] - origin[1];
      } else if (resizing) {
        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
        origin[0] = xExtent[ex];
        origin[1] = yExtent[ey];
      } else if (d3.event.altKey) center = origin.slice();
      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
      d3.select("body").style("cursor", eventTarget.style("cursor"));
      event_({
        type: "brushstart"
      });
      brushmove();
      function keydown() {
        if (d3.event.keyCode == 32) {
          if (!dragging) {
            center = null;
            origin[0] -= xExtent[1];
            origin[1] -= yExtent[1];
            dragging = 2;
          }
          d3_eventPreventDefault();
        }
      }
      function keyup() {
        if (d3.event.keyCode == 32 && dragging == 2) {
          origin[0] += xExtent[1];
          origin[1] += yExtent[1];
          dragging = 0;
          d3_eventPreventDefault();
        }
      }
      function brushmove() {
        var point = d3.mouse(target), moved = false;
        if (offset) {
          point[0] += offset[0];
          point[1] += offset[1];
        }
        if (!dragging) {
          if (d3.event.altKey) {
            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
            origin[0] = xExtent[+(point[0] < center[0])];
            origin[1] = yExtent[+(point[1] < center[1])];
          } else center = null;
        }
        if (resizingX && move1(point, x, 0)) {
          redrawX(g);
          moved = true;
        }
        if (resizingY && move1(point, y, 1)) {
          redrawY(g);
          moved = true;
        }
        if (moved) {
          redraw(g);
          event_({
            type: "brush",
            mode: dragging ? "move" : "resize"
          });
        }
      }
      function move1(point, scale, i) {
        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
        if (dragging) {
          r0 -= position;
          r1 -= size + position;
        }
        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
        if (dragging) {
          max = (min += position) + size;
        } else {
          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
          if (position < min) {
            max = min;
            min = position;
          } else {
            max = position;
          }
        }
        if (extent[0] != min || extent[1] != max) {
          if (i) yExtentDomain = null; else xExtentDomain = null;
          extent[0] = min;
          extent[1] = max;
          return true;
        }
      }
      function brushend() {
        brushmove();
        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
        d3.select("body").style("cursor", null);
        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
        dragRestore();
        event_({
          type: "brushend"
        });
      }
    }
    brush.x = function(z) {
      if (!arguments.length) return x;
      x = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.y = function(z) {
      if (!arguments.length) return y;
      y = z;
      resizes = d3_svg_brushResizes[!x << 1 | !y];
      return brush;
    };
    brush.clamp = function(z) {
      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
      return brush;
    };
    brush.extent = function(z) {
      var x0, x1, y0, y1, t;
      if (!arguments.length) {
        if (x) {
          if (xExtentDomain) {
            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
          } else {
            x0 = xExtent[0], x1 = xExtent[1];
            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
            if (x1 < x0) t = x0, x0 = x1, x1 = t;
          }
        }
        if (y) {
          if (yExtentDomain) {
            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
          } else {
            y0 = yExtent[0], y1 = yExtent[1];
            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
            if (y1 < y0) t = y0, y0 = y1, y1 = t;
          }
        }
        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
      }
      if (x) {
        x0 = z[0], x1 = z[1];
        if (y) x0 = x0[0], x1 = x1[0];
        xExtentDomain = [ x0, x1 ];
        if (x.invert) x0 = x(x0), x1 = x(x1);
        if (x1 < x0) t = x0, x0 = x1, x1 = t;
        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
      }
      if (y) {
        y0 = z[0], y1 = z[1];
        if (x) y0 = y0[1], y1 = y1[1];
        yExtentDomain = [ y0, y1 ];
        if (y.invert) y0 = y(y0), y1 = y(y1);
        if (y1 < y0) t = y0, y0 = y1, y1 = t;
        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
      }
      return brush;
    };
    brush.clear = function() {
      if (!brush.empty()) {
        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
        xExtentDomain = yExtentDomain = null;
      }
      return brush;
    };
    brush.empty = function() {
      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
    };
    return d3.rebind(brush, event, "on");
  };
  var d3_svg_brushCursor = {
    n: "ns-resize",
    e: "ew-resize",
    s: "ns-resize",
    w: "ew-resize",
    nw: "nwse-resize",
    ne: "nesw-resize",
    se: "nwse-resize",
    sw: "nesw-resize"
  };
  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
  var d3_time_formatUtc = d3_time_format.utc;
  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
  function d3_time_formatIsoNative(date) {
    return date.toISOString();
  }
  d3_time_formatIsoNative.parse = function(string) {
    var date = new Date(string);
    return isNaN(date) ? null : date;
  };
  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
  d3_time.second = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 1e3) * 1e3);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
  }, function(date) {
    return date.getSeconds();
  });
  d3_time.seconds = d3_time.second.range;
  d3_time.seconds.utc = d3_time.second.utc.range;
  d3_time.minute = d3_time_interval(function(date) {
    return new d3_date(Math.floor(date / 6e4) * 6e4);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
  }, function(date) {
    return date.getMinutes();
  });
  d3_time.minutes = d3_time.minute.range;
  d3_time.minutes.utc = d3_time.minute.utc.range;
  d3_time.hour = d3_time_interval(function(date) {
    var timezone = date.getTimezoneOffset() / 60;
    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
  }, function(date, offset) {
    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
  }, function(date) {
    return date.getHours();
  });
  d3_time.hours = d3_time.hour.range;
  d3_time.hours.utc = d3_time.hour.utc.range;
  d3_time.month = d3_time_interval(function(date) {
    date = d3_time.day(date);
    date.setDate(1);
    return date;
  }, function(date, offset) {
    date.setMonth(date.getMonth() + offset);
  }, function(date) {
    return date.getMonth();
  });
  d3_time.months = d3_time.month.range;
  d3_time.months.utc = d3_time.month.utc.range;
  function d3_time_scale(linear, methods, format) {
    function scale(x) {
      return linear(x);
    }
    scale.invert = function(x) {
      return d3_time_scaleDate(linear.invert(x));
    };
    scale.domain = function(x) {
      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
      linear.domain(x);
      return scale;
    };
    function tickMethod(extent, count) {
      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
        return d / 31536e6;
      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
    }
    scale.nice = function(interval, skip) {
      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
      if (method) interval = method[0], skip = method[1];
      function skipped(date) {
        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
      }
      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
        floor: function(date) {
          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
          return date;
        },
        ceil: function(date) {
          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
          return date;
        }
      } : interval));
    };
    scale.ticks = function(interval, skip) {
      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
        range: interval
      }, skip ];
      if (method) interval = method[0], skip = method[1];
      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
    };
    scale.tickFormat = function() {
      return format;
    };
    scale.copy = function() {
      return d3_time_scale(linear.copy(), methods, format);
    };
    return d3_scale_linearRebind(scale, linear);
  }
  function d3_time_scaleDate(t) {
    return new Date(t);
  }
  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
    return d.getMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getMinutes();
  } ], [ "%I %p", function(d) {
    return d.getHours();
  } ], [ "%a %d", function(d) {
    return d.getDay() && d.getDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getDate() != 1;
  } ], [ "%B", function(d) {
    return d.getMonth();
  } ], [ "%Y", d3_true ] ]);
  var d3_time_scaleMilliseconds = {
    range: function(start, stop, step) {
      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
    },
    floor: d3_identity,
    ceil: d3_identity
  };
  d3_time_scaleLocalMethods.year = d3_time.year;
  d3_time.scale = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
  };
  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
    return [ m[0].utc, m[1] ];
  });
  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
    return d.getUTCMilliseconds();
  } ], [ ":%S", function(d) {
    return d.getUTCSeconds();
  } ], [ "%I:%M", function(d) {
    return d.getUTCMinutes();
  } ], [ "%I %p", function(d) {
    return d.getUTCHours();
  } ], [ "%a %d", function(d) {
    return d.getUTCDay() && d.getUTCDate() != 1;
  } ], [ "%b %d", function(d) {
    return d.getUTCDate() != 1;
  } ], [ "%B", function(d) {
    return d.getUTCMonth();
  } ], [ "%Y", d3_true ] ]);
  d3_time_scaleUtcMethods.year = d3_time.year.utc;
  d3_time.scale.utc = function() {
    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
  };
  d3.text = d3_xhrType(function(request) {
    return request.responseText;
  });
  d3.json = function(url, callback) {
    return d3_xhr(url, "application/json", d3_json, callback);
  };
  function d3_json(request) {
    return JSON.parse(request.responseText);
  }
  d3.html = function(url, callback) {
    return d3_xhr(url, "text/html", d3_html, callback);
  };
  function d3_html(request) {
    var range = d3_document.createRange();
    range.selectNode(d3_document.body);
    return range.createContextualFragment(request.responseText);
  }
  d3.xml = d3_xhrType(function(request) {
    return request.responseXML;
  });
  if (typeof define === "function" && define.amd) define(d3); else if (typeof module === "object" && module.exports) module.exports = d3;
  this.d3 = d3;
}();

window.Rubix = window.Rubix || {};

var RubixListeners = [];

var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
var useTable = isSafari ? 'inline' : 'table';

/**
 * @param {string} id
 * @param {?Object} opts
 * @constructor
 */
Rubix = function(id, opts) {
    this.chart_counter = 0;
    this.master_id = this.uid('master_id');
    RubixListeners.push(this.master_id);

    this.data_stack = {};
    this.chart_stack = {};

    this.area_stack_data_stack = [];
    this.column_stack_data_stack = [];

    this.root_elem = $(id);
    this.root_elem.css('position', 'relative');
    this.root_elem.addClass('rubixcc-main-chart');
    this.root_elem.append('<div class="rubixcc-tooltip"></div>');
    this.root_elem.append('<div class="rubixcc-title"></div>');
    this.root_elem.append('<div class="rubixcc-subtitle"></div>');
    this.root_elem.append('<div class="rubixcc-chart text-center"><div style="margin-top:5px">Loading...</div></div>');
    this.root_elem.append('<div class="rubixcc-legend"></div>');

    var width = opts.width || '100%';
    var height = opts.height || 150;
    this.root_elem.width(width).height(height);

    this.elem = this.root_elem.find('.rubixcc-chart');

    opts.tooltip = opts.tooltip || {};
    this.tooltip = this.root_elem.find('.rubixcc-tooltip');
    this.tooltip.hide();

    if(opts && opts.tooltip && opts.tooltip.animate) {
        this.tooltip.addClass('animate');
    }

    this.tooltip.html("");
    this.tooltip.css({
        'font-family': 'Lato, "Lucida Grande", Arial, Helvetica, sans-serif',
        'font-size': '12px',
        'position': 'absolute',
        'background': 'white',
        'color': '#89949B',
        'padding': '10px 15px',
        'display': 'none',
        'pointer-events': 'none',
        'border-radius': '5px',
        'z-index': 100,
        'min-height': 75,
        'user-select': 'none',
        'cursor': 'default',
        'border': '3px solid ' + (opts.tooltip.color ? opts.tooltip.color : '#89949B'),
        'box-shadow': 'rgba(0, 0, 0, 0.2) 2px 4px 8px',
        'background': 'white'
    });

    opts.legend = opts.legend || {};

    this.legend = this.root_elem.find('.rubixcc-legend');
    this.legend.css({
        'font-family': "Lato, 'Lucida Grande', Arial, Helvetica, sans-serif",
        'text-align': 'center',
        'margin-top': opts.legend.top || '-10px',
        'margin-bottom': opts.legend.bottom || '5px',
        'user-select': 'none',
        'display': opts.hideLegend ? 'none' : 'block'
    });

    this.title = this.root_elem.find('.rubixcc-title');
    this.subtitle = this.root_elem.find('.rubixcc-subtitle');

    this.title.css({
        'font-family': "Lato, 'Lucida Grande', Arial, Helvetica, sans-serif",
        'text-align': 'center',
        'user-select': 'none',
        'font-weight': 'bold',
        'font-size': '16px',
        'color': 'steelblue',
        'margin-top': '10px',
        'cursor': 'default'
    });

    this.subtitle.css({
        'font-family': "Lato, 'Lucida Grande', Arial, Helvetica, sans-serif",
        'text-align': 'center',
        'user-select': 'none',
        'font-size': '12px',
        'color': 'steelblue',
        'margin-top': '5px',
        'cursor': 'default',
        'opacity': 0.8,
        'font-weight': 'bold'
    });

    var self = this;
    this.tooltip.on({
        'mouseover': function(e) {
            d3.select(self.elem.find('.overlay').get(0)).node().__onmousemove(e);
        },
        'mousemove': function(e) {
            d3.select(self.elem.find('.overlay').get(0)).node().__onmousemove(e);
        },
        'mouseout': function(e) {
            $(this).hide();
        }
    });

    this.elem.css({
        'width': '100%',
        'height': parseInt(this.root_elem.get(0).style.height),
        'user-select': 'none',
        'cursor': 'default',
        'position': 'relative'
    });
    this.root_elem.css('height', '100%');
    this.opts = opts || {};

    this.data = {};
    this.charts = {};
    this.extent = [];
    this.extent_coordinates = [];
    this.is_touch_device = 'ontouchstart' in document.documentElement;
    this.d3_eventSource = function () {
        var e = d3.event, s;
        while (s = e.sourceEvent) e = s;
        return e;
    }

    this.custom_interpolations = {
        sankey: function(points) {
            var x0 = points[0][0], y0 = points[0][1], x1, y1, x2,
                path = [x0, ",", y0],
                i = 0,
                n = points.length;
            while (++i < n) {
                x1 = points[i][0], y1 = points[i][1], x2 = (x0 + x1) / 2;
                path.push("C", x2, ",", y0, " ", x2, ",", y1, " ", x1, ",", y1);
                x0 = x1, y0 = y1;
            }
            return path.join("");
        }
    };

    this.xlabelcolor = 'steelblue';
    this.ylabelcolor = 'steelblue';

    this.first_time = true;
    this.last_render = null;

    this.data_changed = false;

    this.setup();
};

Rubix.prototype.setup = function() {
    this._setupOpts();
    this._setupOnce();
    this._setupRedraw();

    this.draw();
};

Rubix.prototype.draw = function() {
    if(!this.data_changed) {
        if(this.last_render !== null)
            if(Date.now() - this.last_render < 300) return;
        this.last_render = Date.now();
    }
    this.data_changed = false;
    if(!this.root_elem.is(':visible')) return;
    this._draw($(window).width(), $(window).height());
};

Rubix.prototype.uid = function(type) {
    return 'rubixcc-' + type +'-' + Math.floor(2147483648*Math.random()).toString(36);
};

/** @private */
Rubix.prototype._setupOpts = function() {
    this.opts.theme_style = this.opts.theme_style || $('body').attr('data-theme') || 'light';
    this.opts.theme_style_color = this.opts.gridColor || ((this.opts.theme_style === 'light') ? '#C0D0E0' : '#555');
    this.opts.theme_focus_line_color = this.opts.focusLineColor || ((this.opts.theme_style === 'light') ? '#C0D0E0' : '#888');
    this.opts.tickColor = this.opts.tickColor || ((this.opts.theme_style === 'light') ? '#666' : '#999');

    this.opts.titleColor = this.opts.titleColor || 'steelblue';
    this.opts.subtitleColor = this.opts.subtitleColor || 'steelblue';

    this.opts.legend_color_brightness = this.opts.legend_color_brightness || 0.5;

    this.title.css('color', this.opts.titleColor);
    this.subtitle.css('color', this.opts.subtitleColor);

    if(this.opts.theme_style === 'dark' || this.opts.tooltip.theme_style === 'dark') {
        this.tooltip.css({
            "color": "#aaa",
            "font-weight": "bold",
            "border": "1px solid #222",
            "background-color": "#303030"
        });
    }

    this.opts.margin = this.opts.margin || {};
    this.margin = {
        top    : (this.opts.margin.top >= 0) ? this.opts.margin.top : 25,
        left   : (this.opts.margin.left >= 0) ? this.opts.margin.left : 25,
        right  : (this.opts.margin.right >= 0) ? this.opts.margin.right : 12.5,
        bottom : (this.opts.margin.bottom >= 0) ? this.opts.margin.bottom : 25
    };

    this.opts.draw = this.opts.draw || {};
    this.opts.draw = {
        grid: (this.opts.draw.grid === false) ? false : true
    };

    this.opts.invertAxes = this.opts.invertAxes || false;
    this.opts.axis = this.opts.axis || {};
    this.opts.axis.x = this.opts.axis.x || {};
    this.opts.axis.y = this.opts.axis.y || {};
    this.axis = {
        x: {
            type: this.opts.axis.x.type || 'linear',
            range: this.opts.axis.x.range || '',
            tickCount : this.opts.axis.x.tickCount,
            tickFormat: this.opts.axis.x.tickFormat || '',
            label: this.opts.axis.x.label || '',
            labelColor: this.opts.axis.x.labelColor || 'steelblue'
        },
        y: {
            type: this.opts.axis.y.type || 'linear',
            range: this.opts.axis.y.range || '',
            tickCount : this.opts.axis.y.tickCount,
            tickFormat: this.opts.axis.y.tickFormat || '',
            label: this.opts.axis.y.label || '',
            labelColor: this.opts.axis.y.labelColor || 'steelblue'
        }
    };

    this.xlabelcolor = this.opts.axis.x.labelColor;
    this.ylabelcolor = this.opts.axis.y.labelColor;

    if(this.axis.x.label.length) {
        if(this.opts.invertAxes) {
            this.margin.left += 15;
        } else {
            this.margin.bottom += 15;
        }
    }

    if(this.axis.y.label.length) {
        if(this.opts.invertAxes) {
            this.margin.bottom += 15;
        } else {
            this.margin.left += 15;
        }
    }

    this.margin.defaultLeft = this.margin.left;

    this.opts.tooltip = this.opts.tooltip || {};
    this.opts.tooltip.format = this.opts.tooltip.format || {};
    this.opts.tooltip.abs = this.opts.tooltip.abs || {};
    this.tooltipFormatter = {
        format: {
            x: this.opts.tooltip.format.x || '',
            y: this.opts.tooltip.format.y || ''
        },
        abs: {
            x: (this.opts.tooltip.abs.hasOwnProperty('x')) ? this.opts.tooltip.abs.x : false,
            y: (this.opts.tooltip.abs.hasOwnProperty('y')) ? this.opts.tooltip.abs.y : false
        }
    }

    if(this.opts.invertAxes) {
        var temp = this.axis.x;
        this.axis.x = this.axis.y;
        this.axis.y = temp;

        var temp2 = this.tooltipFormatter.format.x;
        this.tooltipFormatter.format.x = this.tooltipFormatter.format.y;
        this.tooltipFormatter.format.y = temp2;
    }

    if(this.opts.animationSpeed !== 0) {
        this.animationSpeed = this.opts.animationSpeed || 750;
    }

    this.opts.interval = this.opts.start_interval || 0;

    this.stacked = this.opts.stacked || false;
    this.grouped = this.opts.grouped || false;
    this.offset = this.opts.offset || 'zero';
    this.order  = this.opts.order || 'default';
    this.show_markers = this.opts.show_markers || false;

    this.resize = this.opts.resize || 'debounced';

    this.interpolate = this.opts.interpolate || 'linear';
    switch(this.interpolate) {
        case 'sankey':
            this.interpolate = this.custom_interpolations[this.interpolate];
        break;
        default:
            // do nothing
        break;
    }

    this.master_detail = this.opts.master_detail || false;

    this.master_detail_height = this.opts.master_detail_height || 50;
    if(this.master_detail) {
        this.master_detail_margin_bottom = this.margin.bottom;
        this.margin.bottom = (2 * this.margin.bottom) + this.master_detail_height;
    }

    this.opts.title = this.opts.title || '';
    this.opts.subtitle = this.opts.subtitle || '';

    this.title.html(this.opts.title);
    this.subtitle.html(this.opts.subtitle);
    if(this.opts.title.length || this.opts.subtitle.length) {
        this.elem.css('margin-top', '-20px');
    }
    (this.opts.title.length) ? this.title.show() : this.title.hide();
    (this.opts.subtitle.length) ? this.subtitle.show() : this.subtitle.hide();
};

/** @private */
Rubix.prototype._setupOnce = function() {
    var self = this;
    this.area_stack_data = [];
    this.area_stack = d3.layout.stack();
    this.area_stack.offset(this.offset);
    this.area_stack.order(this.order);
    this.area_stack.values(function(d) {
        return d.values;
    });
    this.area_stack.x(function(d) {
        return d.x;
    });
    this.area_stack.y(function(d) {
        return d.y;
    });
    this.area_stack.out(function(d, y0, y) {
        d.y0 = y0;
        d.y_new = y;
    });
    this.column_stack_data = [];
    this.column_stack = d3.layout.stack();
    this.column_stack.offset('zero');
    this.column_stack.order('default');
    this.column_stack.values(function(d) {
        return d.values;
    });
    this.column_stack.x(function(d) {
        return d.x;
    });
    this.column_stack.y(function(d) {
        return d.y;
    });
    this.column_stack.out(function(d, y0, y) {
        d.y0 = y0;
        d.y_new = y;
    });
};

/** @private */
Rubix.prototype._setupAxis = function(animate) {
    switch(this.axis.x.type) {
        case 'linear':
            this.x = d3.scale.linear();
            this.x.tickFormat(d3.format(this.axis.x.tickFormat));

            var range = [0, this.width];
            var masterRange = [0, this.width];
            if(this.master_detail) {
                this.x2 = d3.scale.linear();
            }

            if(this.axis.x.range === 'round') {
                this.x.rangeRound(range);

                if(this.master_detail) {
                    this.x2.rangeRound(masterRange);
                }
            } else {
                this.x.range(range);

                if(this.master_detail) {
                    this.x2.range(masterRange);
                }
            }
        break;
        case 'ordinal':
            this.x = d3.scale.ordinal();

            var range = [0, this.width];
            var masterRange = [0, this.width];
            if(this.master_detail) {
                this.canvas.select('.noData').text('Master-Detail chart only for quantitative scales.');
                throw new Error('Master-Detail chart only for quantitative scales.');
            }

            if(this.axis.x.range === 'round') {
                this.x.rangeRoundBands(range);
            } else if(this.axis.x.range == 'column' || this.axis.x.range == 'bar') {
                this.x.rangeRoundBands(range, 0.35);
            } else {
                this.x.rangePoints(range);

                if(this.master_detail) {
                    this.x2.rangePoints(range);
                }
            }
        break;
        case 'datetime':
            this.x = d3.time.scale();
            this.x.ticks(d3.time.year, 50);
            this.x.tickFormat(d3.format(this.axis.x.tickFormat));

            var range = [0, this.width];
            var masterRange = [0, this.width];
            if(this.master_detail) {
                this.x2 = d3.time.scale();
            }

            if(this.axis.x.range === 'round') {
                this.x.rangeRound(range);

                if(this.master_detail) {
                    this.x2.rangeRound(masterRange);
                }
            } else {
                this.x.range(range);

                if(this.master_detail) {
                    this.x2.range(masterRange);
                }
            }
        break;
        default:
            throw new Error('Unknown Scale for X Axis: ' + this.axis.x.type);
        break;
    }
    
    switch(this.axis.y.type) {
        case 'linear':
            this.y = d3.scale.linear();
            this.y.clamp(true);
            this.y.tickFormat(d3.format(this.axis.y.tickFormat));

            var range = [this.height, 0];
            var masterRange = [this.master_detail_height, 0];
            if(this.master_detail) {
                this.y2 = d3.scale.linear();
                this.y2.clamp(true);
            }

            if(this.axis.y.range === 'round') {
                this.y.rangeRound(range);

                if(this.master_detail) {
                    this.y2.rangeRound(masterRange);
                }
            } else {
                this.y.range(range);

                if(this.master_detail) {
                    this.y2.range(masterRange);
                }
            }
        break;
        case 'ordinal':
            this.y = d3.scale.ordinal();

            var range = [this.height, 0];
            var masterRange = [this.master_detail_height, 0];
            if(this.master_detail) {
                this.y2 = d3.scale.ordinal();
            }

            if(this.axis.y.range === 'round') {
                this.y.rangeRoundBands(range);

                if(this.master_detail) {
                    this.y2.rangeRoundBands(masterRange);
                }
            } else if(this.axis.y.range == 'column' || this.axis.y.range == 'bar') {
                this.y.rangeRoundBands(range, 0.35);
            } else {
                this.y.rangePoints(range);

                if(this.master_detail) {
                    this.y2.rangePoints(masterRange);
                }
            }
        break;
        case 'datetime':
            this.y = d3.time.scale();
            this.y.tickFormat(d3.format(this.axis.y.tickFormat));
            this.y.clamp(true);

            var range = [this.height, 0];
            var masterRange = [this.master_detail_height, 0];
            if(this.master_detail) {
                this.y2 = d3.time.scale();
                this.y2.clamp(true);
            }

            if(this.axis.y.range === 'round') {
                this.y.rangeRound(range);

                if(this.master_detail) {
                    this.y2.rangeRound(masterRange);
                }
            } else {
                this.y.range(range);

                if(this.master_detail) {
                    this.y2.range(masterRange);
                }
            }
        break;
        default:
            throw new Error('Unknown Scale for X Axis: ' + this.axis.y.type);
        break;
    }

    this.fontSize = 10;
    var yTicks = Math.floor((this.height / (this.fontSize + 3)) / 2);

    this.xAxis = d3.svg.axis();
    this.xAxis.scale(this.x).orient('bottom');

    if(this.master_detail) {
        this.xAxis2 = d3.svg.axis();
        this.xAxis2.scale(this.x2).orient('bottom');
    }

    if(this.axis.x.range === 'round' && (this.axis.x.type === 'linear' || this.axis.x.type === 'datetime')) {
        if(this.axis.x.type === 'linear') {
            this.xAxis.tickFormat(d3.format(this.axis.x.tickFormat));
        } else if(this.axis.x.type === 'datetime') {
            this.xAxis.tickFormat(d3.time.format(this.axis.x.tickFormat));
        }

        if(this.master_detail) {
            if(this.axis.x.type === 'linear') {
                this.xAxis2.tickFormat(d3.format(this.axis.x.tickFormat));
            } else {
                this.xAxis2.tickFormat(d3.time.format(this.axis.x.tickFormat));
            }
        }
    }

    if(this.axis.x.tickFormat) {
        if(this.axis.x.type === 'linear') {
            this.xAxis.tickFormat(d3.format(this.axis.x.tickFormat));
        } else if(this.axis.x.type === 'datetime') {
            this.xAxis.tickFormat(d3.time.format(this.axis.x.tickFormat));
        }

        if(this.master_detail) {
            if(this.axis.x.type === 'linear') {
                this.xAxis2.tickFormat(d3.format(this.axis.x.tickFormat));
            } else {
                this.xAxis2.tickFormat(d3.time.format(this.axis.x.tickFormat));
            }
        }
    }

    this.xGrid = d3.svg.axis();
    this.xGrid.scale(this.x).orient('bottom').ticks(5).tickSize(-this.height, 0, 0).tickFormat('');

    if(this.axis.x.tickCount !== undefined) {
        this.xGrid.ticks(this.axis.x.tickCount);
    }

    if(this.master_detail) {
        this.xGrid2 = d3.svg.axis();
        this.xGrid2.scale(this.x2).orient('bottom').ticks(5).tickSize(-this.master_detail_height, 0, 0).tickFormat('');
    }

    this.yAxis = d3.svg.axis();
    this.yAxis.scale(this.y).orient('left');

    this.yAxis.ticks(yTicks);

    if(this.axis.y.range === 'round' && (this.axis.y.type === 'linear' || this.axis.y.type === 'datetime')) {
        if(this.axis.y.type === 'linear') {
            this.yAxis.tickFormat(d3.format(this.axis.y.tickFormat));
        } else if(this.axis.y.type === 'datetime') {
            this.yAxis.tickFormat(d3.time.format(this.axis.y.tickFormat));
        }
    }

    if(this.axis.y.tickFormat) {
        if(this.axis.y.type === 'linear') {
            this.yAxis.tickFormat(d3.format(this.axis.y.tickFormat));
        } else if(this.axis.y.type === 'datetime') {
            this.yAxis.tickFormat(d3.time.format(this.axis.y.tickFormat));
        }
    }

    this.yGrid = d3.svg.axis();
    this.yGrid.scale(this.y).orient('left').ticks(5).tickSize(-this.width, 0, 0).tickFormat('');
    if(this.axis.y.tickCount !== undefined) {
        this.yGrid.ticks(this.axis.y.tickCount);
    }
    this.xAxisGroup = this.axis_group.append('g');
    this.xAxisGroup.attr('class', 'x axis');
    this.xAxisGroup.attr('transform', 'translate(0, '+this.height+')');
    this.xAxisGroup.call(this.xAxis);
    this.xAxisGroup.select('path').style('fill', 'none').style('stroke', this.opts.theme_style_color).style('shape-rendering', 'crispEdges');
    this.xAxisGroup.selectAll('line').attr('fill', 'none').attr('stroke', this.opts.theme_style_color).style('shape-rendering', 'crispEdges');

    if(this.master_detail) {
        this.xAxisGroup2 = this.md_root.append('g');
        this.xAxisGroup2.attr('class', 'x axis');
        // this.xAxisGroup2.attr('transform', 'translate(0, '+ this.master_detail_height +')');
        this.xAxisGroup2.call(this.xAxis2);
        this.xAxisGroup2.select('path').style('fill', 'none');
        this.xAxisGroup2.select('line').style('fill', 'none').style('stroke', this.opts.theme_style_color).style('shape-rendering', 'crispEdges');
        this.xAxisGroup2.selectAll('line').attr('fill', 'none').attr('stroke', this.opts.theme_style_color).style('shape-rendering', 'crispEdges');
    }

    this.yAxisGroup = this.axis_group.append('g');
    this.yAxisGroup.attr('class', 'y axis');
    this.yAxisGroup.call(this.yAxis);
    this.yAxisGroup.select('path').style('fill', 'none').style('stroke', this.opts.theme_style_color).style('shape-rendering', 'crispEdges');
    this.yAxisGroup.selectAll('line').attr('fill', 'none').attr('stroke', this.opts.theme_style_color).style('shape-rendering', 'crispEdges');

    if(this.opts.draw.grid) {
        this.xGridGroup = this.grid_group.append('g');
        this.xGridGroup.attr('class', 'x grid');
        this.xGridGroup.attr('transform', 'translate(0,'+this.height+')');
        this.xGridGroup.call(this.xGrid);
        this.xGridGroup.selectAll('path').style('stroke-width', 0);
        this.xGridGroup.selectAll('.tick').style('stroke', this.opts.theme_style_color).style('opacity', 0.7);        
    }

    if(this.master_detail) {
        this.xGridGroup2 = this.md_root.select('.md-grid').append('g');
        this.xGridGroup2.attr('class', 'x grid');
        this.xGridGroup2.attr('transform', 'translate(0,'+this.master_detail_height+')');
        this.xGridGroup2.call(this.xGrid2);
        this.xGridGroup2.selectAll('path').style('stroke-width', 0);
        this.xGridGroup2.selectAll('.tick').style('stroke', 'lightgray').style('opacity', 0.7);
    }

    if(this.opts.draw.grid) {
        this.yGridGroup = this.grid_group.append('g');
        this.yGridGroup.attr('class', 'y grid');
        this.yGridGroup.call(this.yGrid);
        this.yGridGroup.selectAll('path').style('stroke-width', 0);
        this.yGridGroup.selectAll('.tick').style('stroke', this.opts.theme_style_color).style('opacity', 0.7);        
    }

    this.resetAxis(animate);

    if(this.master_detail) {
        if(this.axis.x.type === 'ordinal') {
            this.canvas.select('.noData').text('Master-Detail chart only for quantitative scales.');
            throw new Error('Master-Detail chart only for quantitative scales.');
            return;
        }
        this.brush = d3.svg.brush();
        this.brush.x(this.x2);
        var self = this;
        if(this.axis.x.type === 'datetime') {
            this.brush.on('brushend', function() {
                if(self.is_touch_device) {
                    var coordinates = d3.touches(this, self.d3_eventSource().changedTouches)[0];
                } else {
                    var coordinates = d3.mouse(this);
                }
                var x = coordinates[0];

                if(self.brush.empty()) {
                    var current_x0 = self.x2(+new Date(self.extent[0]));
                    var current_x1 = self.x2(+new Date(self.extent[1]));

                    var distance_x0_x = current_x0 - x;

                    var final_extent = [];
                    if(distance_x0_x < 0) {
                        var start = current_x0 + Math.abs(distance_x0_x);
                        var finish = current_x1 + Math.abs(distance_x0_x);
                        var max_extent = self.x2(+new Date(self.x2.domain()[1]));
                        if(finish > max_extent) {
                            start -= (finish - max_extent);
                            finish = max_extent;
                            final_extent = [
                                self.x2.invert(start),
                                self.x2.invert(finish)
                            ];
                        } else {
                            var diff = Math.abs(start - finish);
                            final_extent = [
                                self.x2.invert(start - diff/2),
                                self.x2.invert(finish - diff/2)
                            ];
                        }
                    } else {
                        var start = current_x0 - Math.abs(distance_x0_x);
                        var finish = current_x1 - Math.abs(distance_x0_x);

                        var diff = Math.abs(start - finish);
                        var final_start = start - diff/2;
                        var final_finish = finish - diff/2;

                        var min_extent = self.x2(+new Date(self.x2.domain()[0]));

                        if(final_start < min_extent) {
                            final_finish += (min_extent - final_start);
                            final_start = min_extent;
                        }
                        final_extent = [
                            self.x2.invert(final_start),
                            self.x2.invert(final_finish)
                        ];
                    }

                    self.extent = final_extent;
                    self.brush.extent(self.extent);
                    self.brush_path.call(self.brush);
                    self._brush();
                }


                var brush_x_pos = self.brush_path.select('.extent').attr('x');
                var brush_width = self.brush_path.select('.extent').attr('width');
                var brush_height = self.brush_path.select('.extent').attr('height');

                self.brush_path.select('.left-extent').attr('height', brush_height).attr('width', brush_x_pos).attr('x', 0);
                var brush_r_x_pos = parseFloat(brush_x_pos)+parseFloat(brush_width);
                self.brush_path.select('.right-extent').attr('height', brush_height).attr('x', brush_r_x_pos).attr('width', self.md_root.attr('width') - brush_r_x_pos);
                self.brush_path.select('.left-border').attr('width', 1).attr('x', brush_x_pos);
                self.brush_path.select('.left-top-border').attr('width', brush_x_pos);
                self.brush_path.select('.right-border').attr('width', 1).attr('x', brush_r_x_pos);
                self.brush_path.select('.right-top-border').attr('x', brush_r_x_pos).attr('width', self.md_root.attr('width') - brush_r_x_pos);
                self.brush_path.select('.bottom-border').attr('x', brush_x_pos).attr('width', brush_width).attr('transform', 'translate(0, ' + (self.master_detail_height+5) + ')');
            });
        } else {
            this.brush.on('brushend', function() {
                if(self.is_touch_device) {
                    var coordinates = d3.touches(this, self.d3_eventSource().changedTouches)[0];
                } else {
                    var coordinates = d3.mouse(this);
                }
                var x = self.x2.invert(coordinates[0]);

                if(self.brush.empty()) {
                    var current_x0 = self.extent[0];
                    var current_x1 = self.extent[1];

                    var distance_x0_x = current_x0 - x;

                    var final_extent = [];
                    if(distance_x0_x < 0) {
                        var start = current_x0 + Math.abs(distance_x0_x);
                        var finish = current_x1 + Math.abs(distance_x0_x);
                        var max_extent = self.x2.domain()[1];
                        if(finish > max_extent) {
                            start -= (finish - max_extent);
                            finish = max_extent;
                            final_extent = [
                                start,
                                finish
                            ];
                        } else {
                            var diff = Math.abs(start - finish);
                            final_extent = [
                                start - diff/2,
                                finish - diff/2
                            ];
                        }
                    } else {
                        var start = current_x0 - Math.abs(distance_x0_x);
                        var finish = current_x1 - Math.abs(distance_x0_x);

                        var diff = Math.abs(start - finish);
                        var final_start = start - diff/2;
                        var final_finish = finish - diff/2;

                        var min_extent = self.x2.domain()[0];

                        if(final_start < min_extent) {
                            final_finish += (min_extent - final_start);
                            final_start = min_extent;
                        }
                        final_extent = [
                            final_start,
                            final_finish
                        ];
                    }

                    self.extent = final_extent;
                    self.brush.extent(self.extent);
                    self.brush_path.call(self.brush);
                    self._brush();
                }

                var brush_x_pos = self.brush_path.select('.extent').attr('x');
                var brush_width = self.brush_path.select('.extent').attr('width');
                var brush_height = self.brush_path.select('.extent').attr('height');

                self.brush_path.select('.left-extent').attr('height', brush_height).attr('width', brush_x_pos).attr('x', 0);
                var brush_r_x_pos = parseFloat(brush_x_pos)+parseFloat(brush_width);
                self.brush_path.select('.right-extent').attr('height', brush_height).attr('x', brush_r_x_pos).attr('width', self.md_root.attr('width') - brush_r_x_pos);
                self.brush_path.select('.left-border').attr('width', 1).attr('x', brush_x_pos);
                self.brush_path.select('.left-top-border').attr('width', brush_x_pos);
                self.brush_path.select('.right-border').attr('width', 1).attr('x', brush_r_x_pos);
                self.brush_path.select('.right-top-border').attr('x', brush_r_x_pos).attr('width', self.md_root.attr('width') - brush_r_x_pos);
                self.brush_path.select('.bottom-border').attr('x', brush_x_pos).attr('width', brush_width).attr('transform', 'translate(0, ' + (self.master_detail_height+5) + ')');
            });
        }
        this.brush.on('brush', function() {
            var type = self.d3_eventSource().type;
            if(type === 'mousemove' || type === 'touchmove') {
                $(window).trigger('rubix.sidebar.off');
                self._brush(true, 'root');
            }
            var brush_x_pos = self.brush_path.select('.extent').attr('x');
            var brush_width = self.brush_path.select('.extent').attr('width');
            var brush_height = self.brush_path.select('.extent').attr('height');

            self.brush_path.select('.left-extent').attr('height', brush_height).attr('width', brush_x_pos).attr('x', 0);
            var brush_r_x_pos = parseFloat(brush_x_pos)+parseFloat(brush_width);
            self.brush_path.select('.right-extent').attr('height', brush_height).attr('x', brush_r_x_pos).attr('width', self.md_root.attr('width') - brush_r_x_pos);
            self.brush_path.select('.left-border').attr('width', 1).attr('x', brush_x_pos);
            self.brush_path.select('.left-top-border').attr('width', brush_x_pos);
            self.brush_path.select('.right-border').attr('width', 1).attr('x', brush_r_x_pos);
            self.brush_path.select('.right-top-border').attr('x', brush_r_x_pos).attr('width', self.md_root.attr('width') - brush_r_x_pos);
            self.brush_path.select('.bottom-border').attr('x', brush_x_pos).attr('width', brush_width).attr('transform', 'translate(0, ' + (self.master_detail_height+5) + ')');
        });
        if(this.extent.length) {
            this.brush.extent(this.extent);
            if(!this.extent_coordinates.length) {
                if(this.axis.x.type === 'datetime' || this.axis.y.type === 'datetime') {
                    this.extent_coordinates = [
                        this.x2(+new Date(this.extent[0])),
                        this.x2(+new Date(this.extent[1]))
                    ];
                } else {
                    this.extent_coordinates = [
                        this.x2(this.extent[0]),
                        this.x2(this.extent[1])
                    ];
                }
            }
            this._brush();
        }
    }
};

Rubix.prototype._setupSeries = function() {
    this.grid_group = this.root.append('g').attr('class', 'grid_group');
    this.axis_group = this.root.append('g').attr('class', 'axis_group');

    if(this.opts.hideGrid) {
        this.grid_group.style('display', 'none');
    }
    if(this.opts.hideAxisAndGrid) {
        this.grid_group.style('display', 'none');
        this.axis_group.style('display', 'none');
    }

    this.root_cb_series = this.root.append('g').attr('class', 'cb_series');
    this.root_stacked_area_series = this.root.append('g').attr('class', 'stacked_area_series');
    this.root_area_series = this.root.append('g').attr('class', 'area_series');
    this.root_line_series = this.root.append('g').attr('class', 'line_series');

    this.focus_line_group = this.root.append('g').attr('class', 'focus_line_group');

    this.symbols_group = this.root.append('g').attr('class', 'symbols');
    this.focus_group = this.root.append('g').attr('class', 'focus_group');

    if(this.master_detail) {
        this.md_root_stacked_area_series = this.md_layers.append('g').attr('class', 'md_stacked_area_series');
        this.md_root_area_series = this.md_layers.append('g').attr('class', 'md_area_series');
        this.md_root_line_series = this.md_layers.append('g').attr('class', 'md_line_series');
    }
};

Rubix.prototype.resetExtent = function() {
    var curr_extent = this.brush.extent();
    if(curr_extent.length) {
        var start = this.extent_coordinates[0];
        var finish = this.extent_coordinates[1];
        if(this.axis.x.type === 'datetime' || this.axis.y.type === 'datetime') {
            this.extent = [this.x2.invert(+new Date(start)), this.x2.invert(+new Date(finish))];
        } else {
            this.extent = [this.x2.invert(start), this.x2.invert(finish)];
        }
        this.brush.extent(this.extent);
        this._brush_nochange();
    }
};

Rubix.prototype._brush_nochange = function() {
    try {
        this.x.domain(this.extent);
        this.callAxis();
        for(var i in this.charts) {
            this.charts[i].noRedraw(this);
        }    
    } catch(e) {
        // do nothing
    }
};

Rubix.prototype._brush = function(record, type) {
    var extent = this.brush.empty() ? this.x2.domain() : this.brush.extent();
    if(this.axis.x.type === 'datetime' || this.axis.y.type === 'datetime') {
        this.extent = extent;
        if(record && type === 'root') {
            this.extent_coordinates = [
                this.x2(+new Date(this.extent[0])),
                this.x2(+new Date(this.extent[1]))
            ];
        }
    } else {
        this.extent = extent;
        if(record && type === 'root') {
            this.extent_coordinates = [
                this.x2(this.extent[0]),
                this.x2(this.extent[1])
            ];
        }
    }
    this._brush_nochange();
};

Rubix.prototype._setupOrdinalAxis = function(forced) {
    var data = {}, o_data = {};
    var _data = [], _data1 = [], extentX, extentY, rdata;
    this.crosshair_data = [], _o_data = [];
    var temp = {}, others = {};
    if(this.axis.x.type === 'ordinal' || this.axis.y.type === 'ordinal') {
        for(var series in this.data) {
            rdata = this.data[series];
            var chart = this.charts[series];
            for(var i=0; i<rdata.length; i++) {
                var x = rdata[i].x;
                var y0 = 0;
                if(this.stacked) {
                    if(rdata[i].hasOwnProperty('y0')) {
                        var y0 = rdata[i].y0;
                    }
                    if(rdata[i].hasOwnProperty('y_new')) {
                        if(this.grouped && chart.type === 'column_series') {
                            var y = rdata[i].y_new;
                        } else {
                            var y = rdata[i].y_new + y0;
                        }
                    } else {
                        var y = rdata[i].y;
                    }
                } else {
                    var y = rdata[i].y;
                }
                _data1.push(y);
                if(!data.hasOwnProperty(x)) {
                    data[x] = [];
                }
                data[x].push(y);
                if(forced) {
                    if(!o_data.hasOwnProperty(y)) {
                        o_data[y] = [];
                    }
                    o_data[y].push(x);
                }

                if(!temp.hasOwnProperty(x)) {
                    temp[x] = {};
                }
                temp[x][series] = y;
                if(!others.hasOwnProperty(x)) {
                    others[x] = {};
                }
                others[x][series] = {
                    y0: y0
                };
            }
        }

        for(var point in data) {
            _data.push(point);
        }
        if(forced) {
            for(var point in o_data) {
                _o_data.push(point);
            }
        }

        if(this.stacked) {
            var _minY = d3.min(_data1, function(d) {
                if(isNaN(d)) {
                    return 0;
                }
                return d;
            });

            _minY = _minY < 0 ? _minY : 0;

            var extentY = [_minY, d3.max(_data1, function(d) {
                if(isNaN(d)) {
                    return 0;
                }
                return d;
            })];
        } else {
            var extentY = d3.extent(_data1);
        }
        var yMin = extentY[0];
        var yMax = extentY[1];

        if(this.opts.invertAxes) {
            if(this.axis.y.tickFormat.length) {
                for(var i=0; i<_data.length; i++) {
                    _data[i] = +_data[i];
                }
                _data.sort(function(a, b) {
                    if(a > b) {
                        return 1;
                    } else if(a === b) {
                        return 0
                    } else {
                        return -1;
                    }
                });
            }

            if(forced) {
                if(this.axis.x.tickFormat.length) {
                    for(var i=0; i<_o_data.length; i++) {
                        _o_data[i] = +_o_data[i];
                    }
                    _o_data.sort(function(a, b) {
                        if(a > b) {
                            return 1;
                        } else if(a === b) {
                            return 0
                        } else {
                            return -1;
                        }
                    });
                }

                this.x.domain(_o_data);
                this.y.domain(_data.reverse());

                if(this.master_detail) {
                    this.x2.domain(_o_data);
                    this.y2.domain(_data);
                }
            } else {
                this.x.domain([yMin, yMax]);
                this.y.domain(_data.reverse());

                if(this.master_detail) {
                    this.x2.domain([yMin, yMax]);
                    this.y2.domain(_data);
                }
            }
        } else {
            if(this.axis.x.tickFormat.length) {
                for(var i=0; i<_data.length; i++) {
                    _data[i] = +_data[i];
                }
                _data.sort(function(a, b) {
                    if(a > b) {
                        return 1;
                    } else if(a === b) {
                        return 0
                    } else {
                        return -1;
                    }
                });
            }

            if(forced) {
                if(this.axis.y.tickFormat.length) {
                    for(var i=0; i<_o_data.length; i++) {
                        _o_data[i] = +_o_data[i];
                    }
                    _o_data.sort(function(a, b) {
                        if(a > b) {
                            return 1;
                        } else if(a === b) {
                            return 0
                        } else {
                            return -1;
                        }
                    });
                }

                this.x.domain(_data);
                this.y.domain(_o_data);

                if(this.master_detail) {
                    this.x2.domain(_data);
                    this.y2.domain(_o_data);
                }
            } else {
                this.x.domain(_data);
                this.y.domain([yMin, yMax]);

                if(this.master_detail) {
                    this.x2.domain(_data);
                    this.y2.domain([yMin, yMax]);
                }
            }
        }

        for(var x in temp) {
            if(this.opts.invertAxes) {
                var _x = this.y(x);
                this.crosshair_data.push({
                    x: +_x,
                    y: temp[x],
                    others: others[x]
                });
            } else {
                var _x = this.x(x);
                this.crosshair_data.push({
                    x: +_x,
                    y: temp[x],
                    others: others[x]
                });
            }
        }

        this.crosshair_data.sort(function(a, b) {
            if(a.x > b.x) {
                return 1;
            } else if(a.x === b.x) {
                return 0;
            } else {
                return -1;
            }
        });
    }
};

Rubix.prototype._setupLinearAxis = function() {
    var xMin=null, xMax=null, yMin=null, yMax=null;
    var data, extentX, extentY;
    this.crosshair_data = [];
    var temp = {}, others = {};
    for(var series in this.data) {
        data = this.data[series];
        extentX = d3.extent(data, function(d) {return d.x});
        if(this.stacked) {
            var _minY = d3.min(data, function(d) {
                var val = d.y0 + d.y_new;
                if(isNaN(val)) {
                    if(d.y) return d.y;
                    return 0;
                }
                return val;
            });

            _minY = _minY < 0 ? _minY : 0;

            extentY = [_minY, d3.max(data, function(d) {
                var val = d.y0 + d.y_new;
                if(isNaN(val)) {
                    if(d.y) return d.y;
                    return 0;
                }
                return val;
            })];
        } else {
            extentY = d3.extent(data, function(d) {return d.y;});
        }

        if(xMin === null) {
            xMin = extentX[0];
            xMax = extentX[1];
        } else {
            if(xMin >= extentX[0]) xMin = extentX[0];
            if(xMax <= extentX[1]) xMax = extentX[1];
        }
        if(yMin === null) {
            yMin = extentY[0];
            yMax = extentY[1];
        } else {
            if(yMin >= extentY[0]) yMin = extentY[0];
            if(yMax <= extentY[1]) yMax = extentY[1];
        }

        for(var i=0; i<data.length; i++) {
            var x = data[i].x;
            var y0 = 0;
            if(this.stacked) {
                if(data[i].hasOwnProperty('y0')) {
                    var y0 = data[i].y0;
                }
                if(data[i].hasOwnProperty('y_new')) {
                    var y = data[i].y_new + y0;
                } else {
                    var y = data[i].y;
                }
            } else {
                var y = data[i].y;
            }

            if(!temp.hasOwnProperty(x)) {
                temp[x] = {};
            }
            temp[x][series] = y;
            if(!others.hasOwnProperty(x)) {
                others[x] = {};
            }
            others[x][series] = {
                y0: y0
            };
        }
    }

    if(this.opts.invertAxes) {
        this.x.domain([yMin, yMax]);
        this.y.domain([xMax, xMin]);
        if(this.master_detail) {
            this.x2.domain([yMin, yMax]);
            this.y2.domain([xMax, xMin]);
        }
    } else {
        this.x.domain([xMin, xMax]);
        this.y.domain([yMin, yMax]);
        if(this.master_detail) {
            this.x2.domain([xMin, xMax]);
            this.y2.domain([yMin, yMax]);
        }
    }

    for(var x in temp) {
        this.crosshair_data.push({
            x: +x,
            y: temp[x],
            others: others[x]
        });
    }

    this.crosshair_data.sort(function(a, b) {
        if(a.x > b.x) {
            return 1;
        } else if(a.x === b.x) {
            return 0;
        } else {
            return -1;
        }
    });
};

Rubix.prototype.resetAxis = function(animate) {
    try {
        if(this.axis.x.type === 'linear' && this.axis.y.type === 'linear') {
            this._setupLinearAxis();
        } else if(
            (this.axis.x.type === 'datetime' && this.axis.y.type === 'linear')
        ||  (this.axis.x.type === 'linear' && this.axis.y.type === 'datetime')
        ) {
            this._setupLinearAxis();        
        } else if(this.axis.x.type === 'ordinal' && this.axis.y.type === 'ordinal') {
            this._setupOrdinalAxis(true);
        } else if(this.axis.x.type === 'ordinal' || this.axis.y.type === 'ordinal') {
            this._setupOrdinalAxis();
        }

        this.callAxis(animate);
    } catch(e) {
        // do nothing
    }
};

Rubix.prototype.callAxis = function(animate) {
    if(animate) {
        var t = this.root.transition().duration(this.animationSpeed);
        if(this.master_detail) {
            var z = this.md_root.transition().duration(this.animationSpeed);
        }
    } else {
        var t = this.root;
        if(this.master_detail) {
            var z = this.md_root;
        }
    }

    if(this.hasData) {
        if(this.axis.x.type === 'ordinal') {
            var domain = this.x.domain();
            if((this.axis.x.tickCount !== undefined) && (domain.length > this.axis.x.tickCount)) {
                var self = this;
                var feed = d3.range(domain.length).map(function(d) {
                   if(d % self.axis.x.tickCount === 0)
                      return domain[d];
                   return null;
                });

                var cleanedFeed = [];
                for(var i=0; i<feed.length; i++) {
                    if(feed[i] === null) continue;
                    cleanedFeed.push(feed[i]);
                }
                this.xAxis.tickValues(cleanedFeed);
            }
        } else {
            if(this.axis.x.tickCount !== undefined) {
                this.xAxis.ticks(this.axis.x.tickCount);

                if(this.master_detail) {
                    this.xAxis2.ticks(this.axis.x.tickCount);
                }
            }
        }

        if(this.axis.y.type === 'ordinal' || this.axis.x.type === 'linear' || this.axis.x.type === 'datetime') {
            var domain = this.y.domain();
            if((this.axis.y.tickCount !== undefined) && (domain.length > this.axis.y.tickCount)) {
                var self = this;
                var feed = d3.range(domain.length).map(function(d) {
                   if(d % self.axis.y.tickCount === 0) {
                      return domain[d];
                   }
                   return '';
                });

                this.yAxis.tickValues(feed);
            }
        } else {
            if(this.axis.y.tickCount !== undefined) {
                this.yAxis.ticks(this.axis.y.tickCount);
            }
        }

        this.canvas.select('.noData').style('display', 'none');
        try {
            t.selectAll('.x.axis').style('display', null).call(this.xAxis);
            t.selectAll('.y.axis').style('display', null).call(this.yAxis);
            t.selectAll('.x.grid').style('display', null).call(this.xGrid);
            t.selectAll('.y.grid').style('display', null).call(this.yGrid);
        } catch(e) {
            // do nothing
        }
        this.xAxisGroup.selectAll('line').attr('fill', 'none').attr('stroke', this.opts.theme_style_color).style('shape-rendering', 'crispEdges');
        this.yAxisGroup.selectAll('line').attr('fill', 'none').attr('stroke', this.opts.theme_style_color).style('shape-rendering', 'crispEdges');

        if(this.opts.draw.grid) {
            this.xGridGroup.selectAll('path').style('stroke-width', 0);
            this.xGridGroup.selectAll('.tick').style('stroke', this.opts.theme_style_color).style('opacity', 0.7);
            this.yGridGroup.selectAll('path').style('stroke-width', 0);
            this.yGridGroup.selectAll('.tick').style('stroke', this.opts.theme_style_color).style('opacity', 0.7);            
        }
        
        this.xAxisGroup.selectAll('text').style('font', (this.fontSize+1)+'px Lato, "Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif').style('direction', 'ltr').style('fill', this.opts.tickColor).style('color', this.opts.tickColor).style('font-style', '').style('font-variant', '').style('font-weight', '').style('line-height', '');
        this.yAxisGroup.selectAll('text').style('font', (this.fontSize+1)+'px Lato, "Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif').style('direction', 'ltr').style('fill', this.opts.tickColor).style('color', this.opts.tickColor).style('font-style', '').style('font-variant', '').style('font-weight', '').style('line-height', '');
        if(this.opts.theme_style === 'dark') {
            this.xAxisGroup.selectAll('text').style('font-weight', 'bold');
            this.yAxisGroup.selectAll('text').style('font-weight', 'bold');
        }
    } else {
        this.canvas.select('.noData').style('display', null);
        t.selectAll('.x.axis').style('display', 'none');
        t.selectAll('.y.axis').style('display', 'none');
        t.selectAll('.x.grid').style('display', 'none');
        t.selectAll('.y.grid').style('display', 'none');
    }
    if(this.master_detail) {
        if(this.hasData) {
            this.canvas.select('.noData').style('display', 'none');
            z.selectAll('.x.axis').style('display', null).call(this.xAxis2);
            z.selectAll('.x.grid').style('display', null).call(this.xGrid2);
            if(this.xAxisGroup2) {
                this.xAxisGroup2.selectAll('line').attr('fill', 'none').attr('stroke', this.opts.theme_style_color).style('shape-rendering', 'crispEdges');
                this.xGridGroup2.selectAll('path').style('stroke-width', 0);
                this.xGridGroup2.selectAll('.tick').style('stroke', this.opts.theme_style_color).style('opacity', 0.7);
                this.xAxisGroup2.selectAll('text').style('font', (this.fontSize+1)+'px Lato, "Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif').style('direction', 'ltr').style('fill', this.opts.tickColor).style('color', this.opts.tickColor).style('font-style', '').style('font-variant', '').style('font-weight', '').style('line-height', '');
                if(this.opts.theme_style === 'dark') {
                    this.xAxisGroup2.selectAll('text').style('font-weight', 'bold');
                }
            }
            if(this.yAxisGroup2) {
                this.yAxisGroup2.selectAll('text').style('font', (this.fontSize+1)+'px Lato, "Lucida Grande", "Lucida Sans Unicode", Verdana, Arial, Helvetica, sans-serif').style('direction', 'ltr').style('fill', this.opts.tickColor).style('color', this.opts.tickColor).style('font-style', '').style('font-variant', '').style('font-weight', '').style('line-height', '');
                if(this.opts.theme_style === 'dark') {
                    this.yAxisGroup.selectAll('text').style('font-weight', 'bold');
                }
            }
        } else {
            this.canvas.select('.noData').style('display', null);
            z.selectAll('.x.axis').style('display', 'none');
            z.selectAll('.y.axis').style('display', 'none');
            z.selectAll('.x.grid').style('display', 'none');
            z.selectAll('.y.grid').style('display', 'none');
        }
    }


    if(this.opts.hideYAxis) {
        this.yAxisGroup.style('display', 'none');
    }
    if(this.opts.hideXAxis) {
        this.xAxisGroup.style('display', 'none');
    }
    if(this.opts.hideXAxisTickLines) {
        this.xGridGroup.style('display', 'none');
    }
    if(this.opts.hideYAxisTickLines) {
        this.yGridGroup.style('display', 'none');
    }
};

/** @private */
Rubix.prototype._setupRedraw = function() {
    var self = this;

    $(window).on('orientationchange.'+this.master_id, function() {
        self.draw();
    });

    $(window).on('rubix.redraw.'+this.master_id, function() {
        self.draw();
    });

    switch(this.resize) {
        case 'always':
            $(window).on('resize.rubix.'+this.master_id, function() {
                self.draw();
            });
        break;
        case 'debounced':
            $(window).on('debouncedresize.rubix.'+this.master_id, function() {
                self.draw();
            });
        break;
        case 'throttled':
            $(window).on('throttledresize.rubix.'+this.master_id, function() {
                self.draw();
            });
        break;
        default:
            throw new Error('Unknown resize type!');
        break;
    }
};

/**
 * @param {number} window_width
 * @param {number} window_height
 * @private 
 */
Rubix.prototype._draw = function(window_width, window_height) {
    this._cleanElement();
    this._setSize();
    this._setupCanvas();
    this._setupRoot();
    this._setupSeries();
    this._setupAxis();

    for(var i in this.charts) {
        this.charts[i].redraw(this);
    }
};

/** @private */
Rubix.prototype._cleanElement = function() {
    this.elem.children().remove();
};

/** @private */
Rubix.prototype._setSize = function() {
    this.outerWidth  = this.elem.width();
    this.outerHeight = this.elem.height();


    if(this.opts.hideYAxis) {
        this.margin.left = 0;
        this.margin.right = 0;
    }

    if(this.opts.hideAxisAndGrid) {
        this.margin.left = 0;
        this.margin.right = 0;
    }

    this.width  = this.outerWidth - this.margin.left - this.margin.right;
    this.height = this.outerHeight - this.margin.top - this.margin.bottom;
};

/** @private */
Rubix.prototype._setupCanvas = function() {
    this.elem.html('');
    this.canvas = d3.select(this.elem.get(0)).append('svg');
    this.canvas.attr('width', this.outerWidth);
    this.canvas.attr('height', this.outerHeight);

    this.canvas.append('desc').text("Powered by Rubix");

    this.defs = this.canvas.append('defs');

    this.defs.append('clipPath')
           .attr('id', this.master_id+'-clip')
         .append('rect')
           .attr('width', this.width)
           .attr('height', this.height+20)
           .attr('transform', 'translate(0, -20)');
};

/** @private */
Rubix.prototype._setupRoot = function() {
    this.root = this.canvas.append('g');
    this.root.attr('width', this.width);
    this.root.attr('height', this.height);
    if(!this.opts.hideAxisAndGrid) {
        this.root.attr('transform', 'translate('+this.margin.left+','+this.margin.top+')');
    } else {
        this.root.attr('transform', 'translate(0,'+this.margin.top+')');
    }

    if(!this.hasData) {
        this.canvas.append('text').attr('class', 'noData').attr('font-size', '30px').attr('text-anchor', 'middle').attr('transform', 'translate('+this.outerWidth/2+','+this.outerHeight/2+')').attr('font-family', 'Lato, "Lucida Grande", Arial, Helvetica, sans-serif').text("No Data");
    } else {
        this.canvas.select('.noData').style('display', 'none');
    }

    if(this.master_detail) {
        this.md_root = this.canvas.append('g');
        this.md_root.attr('width', this.width);
        this.md_root.attr('height', this.master_detail_height);
        if(!this.opts.hideAxisAndGrid) {
            this.md_root.attr('transform', 'translate('+this.margin.left+','+(this.margin.top+this.height+this.master_detail_margin_bottom)+')');
        }
        var rect = this.md_root.append('rect');
        rect.attr('width', this.md_root.attr('width'));
        rect.attr('height', this.md_root.attr('height'));
        rect.attr('fill', 'none');
        rect.attr('shape-rendering', 'crispEdges');
        this.md_root.append('g').attr('class', 'md-grid').attr('width', this.md_root.attr('width'));
        this.md_layers = this.md_root.append('g').attr('class', 'md-layers').attr('clip-path', 'url(#'+this.master_id+'-clip)');
    
        this.defs.append('clipPath')
                .attr('id', this.master_id+'-clip-symbols')
            .append('rect')
                .attr('width', this.md_root.attr('width'))
                .attr('height', this.height+20)
                .attr('transform', 'translate(0, -10)');

        this.defs.append('clipPath')
                .attr('id', this.master_id+'-clip-brush')
            .append('rect')
                .attr('width', this.md_root.attr('width')+20)
                .attr('height', this.master_detail_height)
                .attr('transform', 'translate(-10, 1)');
    }
};

Rubix.prototype.marginLeft = function(_left_) {
    if(!arguments.length) return this.margin.left;

    if(10 + _left_ + 10 < this.margin.defaultLeft) {
        this.margin.left = this.margin.defaultLeft;
    } else {
        this.margin.left = 10 + _left_ + 10;
    }
    if(this.axis.x.label.length) {
        if(this.opts.invertAxes) {
            this.margin.left += 15;
        }
    }
    if(this.axis.y.label.length) {
        if(!this.opts.invertAxes) {
            this.margin.left += 15;
        }
    }
    this.draw();
};

Rubix.prototype.forceRedraw = function() {
    try {
        this.hasData = false;
        for(var i in this.charts) {
            this.hasData = true;
            this.charts[i].forceRedraw(this);
        }
        if(this.hasData) {
            this.canvas.select('.noData').style('display', 'none');
            this.root.selectAll('.axis').style('display', null);
        } else {
            this.canvas.select('.noData').style('display', null);
            this.root.selectAll('.axis').style('display', 'none');
        }
    } catch(e) {
        // do nothing
    }
};

// flicked from crossfilter
Rubix.prototype.resizePath = function(d) {
    var e = +(d == 'e'),
        x = e ? 1 : -1,
        y = this.master_detail_height/2;
    return 'M' + (0.5 * x) + ',' + y
        + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)
        + 'V' + (2 * y - 6)
        + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)
        + 'Z'
        + 'M' + (2.5 * x) + ',' + (y + 8)
        + 'V' + (2 * y - 8)
        + 'M' + (4.5 * x) + ',' + (y + 8)
        + 'V' + (2 * y - 8);
};

Rubix.prototype._createBrushPath = function() {
    var self = this;
    if(this.brush_path) this.brush_path.remove();
    this.brush_path = this.md_root.append('g');
    this.brush_path.attr('height', this.master_detail_height+5);
    this.brush_path.attr('width', this.md_root.attr('width'));
    this.brush_path.attr('class', 'x brush');
    this.brush_path.attr('transform', 'translate(0, -4)');
    // this.brush_path.attr('clip-path', 'url(#'+this.master_id+'-clip-brush)');
    this.brush_path.call(this.brush);

    var color = 'rgb(16, 16, 16)';
    if(this.opts.theme_style === 'light') {
        color = 'white';
    }

    this.brush_path.selectAll('.extent').attr('stroke', 'none').attr('fill-opacity', 0).attr('shape-rendering', 'crispEdges');
    this.brush_path.insert('rect', '.resize').attr('class', 'left-extent').attr('fill-opacity', 0.5).attr('fill', color).style('cursor', 'crosshair');
    this.brush_path.insert('rect', '.resize').attr('class', 'right-extent').attr('fill-opacity', 0.5).attr('fill', color).style('cursor', 'crosshair');
    this.brush_path.insert('rect', '.resize').attr('class', 'left-border').attr('x', 0).style('fill', this.opts.theme_style_color);
    this.brush_path.insert('rect', '.resize').attr('class', 'left-top-border').attr('x', 0).style('fill', this.opts.theme_style_color);
    this.brush_path.insert('rect', '.resize').attr('class', 'right-border').style('fill', this.opts.theme_style_color);
    this.brush_path.insert('rect', '.resize').attr('class', 'right-top-border').style('fill', this.opts.theme_style_color);
    this.brush_path.insert('rect', '.resize').attr('class', 'bottom-border').style('fill', 'rgb(16, 16, 16)').attr('fill-opacity', 0.3);

    var brush_x_pos = this.brush_path.select('.extent').attr('x');
    var brush_width = this.brush_path.select('.extent').attr('width');
    var brush_height = this.brush_path.select('.extent').attr('height');

    this.brush_path.select('.left-extent').attr('height', brush_height).attr('width', brush_x_pos).attr('x', 0);
    var brush_r_x_pos = parseFloat(brush_x_pos)+parseFloat(brush_width);
    this.brush_path.select('.right-extent').attr('height', brush_height).attr('x', brush_r_x_pos).attr('width', this.md_root.attr('width') - brush_r_x_pos);

    this.brush_path.select('.left-border').attr('width', 1).attr('x', brush_x_pos);
    this.brush_path.select('.left-top-border').attr('width', brush_x_pos);
    this.brush_path.select('.right-border').attr('width', 1).attr('x', brush_r_x_pos);
    this.brush_path.select('.right-top-border').attr('x', brush_r_x_pos).attr('width', this.md_root.attr('width') - brush_r_x_pos);
    this.brush_path.select('.bottom-border').attr('x', brush_x_pos).attr('width', brush_width).attr('transform', 'translate(0, ' + (this.master_detail_height+5) + ')');

    this.brush_path.selectAll('.resize').append('path').attr('d', function(d) {
        return self.resizePath(d);
    }).style('fill', '#EEE').style('stroke', '#666').attr('transform', 'translate(0, -'+this.master_detail_height/5+')');

    var inner_rect = this.brush_path.selectAll('rect');
    inner_rect.attr('height', this.master_detail_height+5);

    this.brush_path.select('.left-top-border').attr('height', 1);
    this.brush_path.select('.right-top-border').attr('height', 1);
    this.brush_path.select('.bottom-border').attr('height', 1);

    if(!this.extent.length) {
        this.extent = this.x2.domain();
        this.brush.extent(this.extent);
        this._brush();
    }
};

Rubix.prototype.bisectLeft = d3.bisector(function(d) { return d.x; }).left;
Rubix.prototype.bisectRight = d3.bisector(function(d) { return d.x; }).right;

Rubix.prototype.move_tooltip_x = function(dx, ys, points) {
    var dy, mid;
    if(ys.length) {
        dy = d3.mean(ys)/ys.length;
    }

    var copy = dx;
    if(this.axis.x.range === 'column' || this.axis.x.range === 'bar') {
        dx += this.x.rangeBand()/2;
    }

    var _elem = this.root_elem;

    var tooltipPadding = (this.tooltip.outerWidth() - this.tooltip.width())/2;

    var left = dx + this.margin.left + tooltipPadding;
    var top  = dy;

    var elem_far_right = _elem.width();

    var tooltip_far_right = left + this.tooltip.outerWidth();

    if(this.axis.x.range === 'column' || this.axis.x.range === 'bar') {
        dx = copy - this.x.rangeBand()/2;
    }

    if(tooltip_far_right > elem_far_right) {
        left -= (tooltip_far_right  - dx - this.margin.left + tooltipPadding);
    }

    this.tooltip.css('display', 'inline');
    this.tooltip.css('display', useTable);
    this.tooltip.css({
        'left': left,
        'top' : top
    });

    var html = "", formatterX, formatterY;
    if(this.tooltipFormatter.format.x.length) {
        if(this.axis.x.type === 'datetime') {
            formatterX = d3.time.format(this.tooltipFormatter.format.x);
        } else {
            formatterX = d3.format(this.tooltipFormatter.format.x);
        }
    } else {
        formatterX = function(d) { return d; };
    }
    if(this.tooltipFormatter.format.y.length) {
        if(this.axis.y.type === 'datetime') {
            formatterY = d3.time.format(this.tooltipFormatter.format.y);
        } else {
            formatterY = d3.format(this.tooltipFormatter.format.y);
        }
    } else {
        formatterY = function(d) { return d; };
    }
    for(var name in points) {
        var _x, _y;
        if(this.axis.x.type === 'datetime') {
            _x = formatterX(new Date(points[name].x));
        } else {
            if(points[name].invert) {
                _x = formatterX(this.x.invert(points[name].x));
            } else {
                _x = formatterX(points[name].x);
            }
        }
        if(this.axis.y.type === 'datetime') {
            _y = (points[name].y !== null) ? formatterY(new Date(points[name].y)) : null;
        } else {
            if(points[name].invert) {
                _y = (points[name].y !== null) ? formatterY(this.y.invert(points[name].y)) : null;
            } else {
                _y = formatterY(points[name].y);
            }
        }

        _x = this.tooltipFormatter.abs.x ? Math.abs(_x) : _x;
        _y = this.tooltipFormatter.abs.y ? Math.abs(_y) : _y;
        var series = "<div style='color: "+points[name].opts.color+"; margin-bottom: 2px; line-height: 22px;'><b style='position:relative; top: -5px; left: -2px;'><span style='font-size: 22px;'>■ </span><span style='position:relative; top: -3px; left: -2px;'>"+name+"</span></b></div>";
        var x = "<div style='font-size: 10px; margin-top: -10px;'>x : " + _x + " </div>";
        var y = "<div style='font-size: 10px; margin-top: -5px;'>y : " + _y + " </div><br>";
        html = (series+x+y) + html;
    }

    html = html.slice(0, html.length-4);

    this.tooltip.html(html);

    var tooltipHeight = this.tooltip.outerHeight();
    var total_height = tooltipHeight + dy;
    if(total_height >= _elem.height()) {
        top = this.margin.top;
        this.tooltip.css('top', top);
    }
};


Rubix.prototype.move_tooltip_y = function(dy, yx, points) {
    try {
    var dx, mid;
    if(yx.length) {
        dx = d3.max(yx);
    }

    var copy = dx;
    if(this.axis.x.range === 'column' || this.axis.x.range === 'bar') {
        dx += this.y.rangeBand()/2;
    }

    var _elem = $(this.canvas.node());

    var tooltipPadding = (this.tooltip.outerWidth() - this.tooltip.width())/2;

    var left = dx + this.margin.left + tooltipPadding;
    var top  = dy;

    var elem_far_right = _elem.width();

    var tooltip_far_right = left + this.tooltip.outerWidth();

    if(this.axis.x.range === 'column' || this.axis.x.range === 'bar') {
        dx = copy - this.y.rangeBand()/2;
    }

    if(tooltip_far_right > elem_far_right) {
        left -= tooltip_far_right  - dx - this.margin.left + tooltipPadding;
    }

    var elem_far_bottom = _elem.height();
    var tooltip_far_bottom = top + this.tooltip.outerHeight() + this.margin.bottom;

    if(tooltip_far_bottom > elem_far_bottom) {
        top -= (tooltip_far_bottom - elem_far_bottom);
    }

    this.tooltip.css('display', 'inline');
    this.tooltip.css('display', useTable);
    this.tooltip.css({
        'left': left,
        'top' : top
    });


    var html = "", formatterX, formatterY;
    if(this.tooltipFormatter.format.x.length) {
        if(this.axis.x.type === 'datetime') {
            formatterX = d3.time.format(this.tooltipFormatter.format.x);
        } else {
            formatterX = d3.format(this.tooltipFormatter.format.x);
        }
    } else {
        formatterX = function(d) { return d; };
    }
    if(this.tooltipFormatter.format.y.length) {
        if(this.axis.y.type === 'datetime') {
            formatterY = d3.time.format(this.tooltipFormatter.format.y);
        } else {
            formatterY = d3.format(this.tooltipFormatter.format.y);
        }
    } else {
        formatterY = function(d) { return d; };
    }
    for(var name in points) {
        var _x, _y;
        if(this.axis.y.type === 'datetime') {
            _x = formatterY(new Date(points[name].y));
        } else {
            if(points[name].invert) {
                _x = formatterY(this.y.invert(points[name].y));
            } else {
                _x = formatterY(points[name].y);
            }
        }
        if(this.axis.x.type === 'datetime') {
            _y = formatterX(new Date(points[name].x));
        } else {
            if(points[name].invert) {
                _y = formatterX(this.x.invert(points[name].x));
            } else {
                _y = formatterX(points[name].x);
            }
        }

        _x = this.tooltipFormatter.abs.x ? Math.abs(_x) : _x;
        _y = this.tooltipFormatter.abs.y ? Math.abs(_y) : _y;
        var series = "<div style='color: "+points[name].opts.color+"; margin-bottom: 2px'><b style='position:relative; top: -5px; left: -2px;'><span style='font-size: 22px;'>■ </span><span style='position:relative; top: -3px; left: -2px;'>"+name+"</span></b></div>";
        var x = "<div style='font-size: 10px; margin-top: -10px;'>x : " + _x + " </div>";
        var y = "<div style='font-size: 10px; margin-top: -5px;'>y : " + _y + " </div><br>";
        html = (series+x+y) + html;
    }

    html = html.slice(0, html.length-4);

    this.tooltip.html(html);
    } catch(e) {
        // do nothing
    }
};

Rubix.prototype.overlayX = function(self, coordinates) {
    var ycord = coordinates[1];
    try {
        if(self.axis.x.type === 'ordinal') {
            var x0 = coordinates[0];
            if(self.axis.x.range === 'column' || self.axis.x.range === 'bar') {
                x0 = x0 - self.x.rangeBand()/2;
            }

            var i  = self.bisectLeft(self.crosshair_data, x0, 1);
        } else {
            var x0 = self.x.invert(coordinates[0]+1);
            var i  = self.bisectLeft(self.crosshair_data, x0, 1);
        }

        var d0 = self.crosshair_data[i - 1],
            d1 = self.crosshair_data[i],
            d  = x0 - d0.x > d1.x - x0 ? d1 : d0;

        var y = d.y;
        var others = d.others;
        var xpos;
        var ys = [];
        var points = {};
        var ok = [];
        for(var name in self.charts) {
            try {
                if(y.hasOwnProperty(name)) {
                    if(self.axis.x.type === 'ordinal') {
                        if(y[name] !== null && d.others[name].y0 !== null) {
                            ok.push(true);
                            var dx = d.x;
                            var dy = self.y(y[name]);
                            if(self.axis.x.range === 'column' || self.axis.x.range === 'bar') {
                                if(self.grouped && self.charts[name].hasOwnProperty('count')) {
                                    dx = d.x + ((self.x.rangeBand()/(self.charts[name].layers.length)) * (self.charts[name].count)) + self.x.rangeBand()/(2*self.charts[name].layers.length);
                                } else {
                                    dx += self.x.rangeBand()/2;
                                }
                            }

                            self.charts[name].focus.attr('transform', 'translate(' + dx + ',' + dy +')').style('display', null);
                            
                            if(self.axis.x.range === 'column' || self.axis.x.range === 'bar') {
                                if(self.grouped && self.charts[name].hasOwnProperty('count')) {
                                    xpos = d.x + self.x.rangeBand()/2;
                                } else {
                                    xpos = dx;
                                }
                            } else {
                                xpos = dx;
                            }
                            ys.push(dy);
                            points[name] = {
                                x: dx,
                                y: y[name] ? dy : null,
                                opts: self.charts[name].opts,
                                invert: true
                            };
                        }
                    } else {
                        ok.push(true);
                        var dx = self.x(d.x);
                        var dy = self.y(y[name]);
                        self.charts[name].focus.attr('transform', 'translate(' + dx + ',' + dy +')').style('display', null);

                        xpos = dx;
                        ys.push(dy);
                        points[name] = {
                            x: d.x,
                            y: y[name],
                            opts: self.charts[name].opts,
                            invert: false
                        };
                    }
                    if(ok.length) {
                        self.charts[name].on_focus(dx, dy);
                    }
                } else {
                    self.charts[name].focus.style('display', 'none');
                    self.charts[name].off_focus();
                }
            } catch(e) {
                // do nothing
            }
        }
        if(ok.length) {
            if(self.axis.x.type === 'ordinal') {
                var dx = d.x;
                if(self.axis.x.range === 'column' || self.axis.x.range === 'bar') {
                    dx += self.x.rangeBand()/2;
                }
                self.focusLine.style('display', null).attr('transform', 'translate(' + dx + ','+ '0)');
            } else {
                self.focusLine.style('display', null).attr('transform', 'translate(' + self.x(d.x) + ','+ '0)');
            }

            self.move_tooltip_x(xpos, ys, points);
        }
    } catch(e) {
        // do nothing
    }
};

Rubix.prototype.overlayY = function(self, coordinates) {
    // here .x is .y and .y should be .x due to axis inversion
    var xcord = coordinates[0];
    var y0 = coordinates[1];

    try {
        var len = 0;
        if(self.axis.y.type === 'ordinal') {
            if(self.axis.y.range === 'column' || self.axis.y.range === 'bar') {
                y0 = y0 - self.y.rangeBand()/2;
            }
        } else {
            y0 = self.y.invert(y0);
        }
        var i = self.bisectRight(self.crosshair_data, y0, 1);

        var d0 = self.crosshair_data[i - 1],
            d1 = self.crosshair_data[i],
            d  = y0 - d0.x > d1.x - y0 ? d1 : d0;

        var y = d.y;
        var others = d.others;
        var xpos;
        var ys = [];
        var points = {};
        var ok = [];
        for(var name in self.charts) {
            try {
                if(y.hasOwnProperty(name)) {
                    if(self.axis.y.type === 'ordinal') {
                        if(y[name] !== null && d.others[name].y0 !== null) {
                            ok.push(true);
                            var dx = d.x;
                            var dy = self.x(y[name]);
                            if(self.axis.y.range === 'column' || self.axis.y.range === 'bar') {
                                if(self.grouped && self.charts[name].hasOwnProperty('count')) {
                                    dx = d.x + ((self.y.rangeBand()/(self.charts[name].layers.length)) * (self.charts[name].count)) + self.y.rangeBand()/(2*self.charts[name].layers.length);
                                } else {
                                    dx += self.y.rangeBand()/2;
                                }
                            }

                            self.charts[name].focus.attr('transform', 'translate(' + dy + ',' + dx +')').style('display', null);
                            xpos = dx;
                            ys.push(dy);
                            points[name] = {
                                x: dy,
                                y: dx,
                                opts: self.charts[name].opts,
                                invert: true
                            };
                        }
                    } else {
                        ok.push(true);
                        var dx = self.y(d.x);
                        var dy = self.x(y[name]);
                        self.charts[name].focus.attr('transform', 'translate(' + dy + ',' + dx +')').style('display', null);
                        xpos = dx;
                        ys.push(dy);
                        points[name] = {
                            x: y[name],
                            y: d.x,
                            opts: self.charts[name].opts,
                            invert: false
                        };
                    }
                    if(ok.length) {
                        self.charts[name].on_focus(dy, dx);
                    }
                } else {
                    self.charts[name].focus.style('display', 'none');
                    self.charts[name].off_focus();
                }
            } catch(e) {
                // do nothing
            }
        }
        if(ok.length) {
            if(self.axis.y.type === 'ordinal') {
                var dx = d.x;
                if(self.axis.y.range === 'column' || self.axis.y.range === 'bar') {
                    dx += self.y.rangeBand()/2;
                }
                self.focusLine.style('display', null).attr('transform', 'translate(0,' + dx + ')');
            } else {
                self.focusLine.style('display', null).attr('transform', 'translate(0,'+self.y(d.x)+')');
            }

            self.move_tooltip_y(xpos, ys, points);
        }
    } catch(e) {
        // do nothing
    }
};

Rubix.prototype.resetFocus = function(forced) {
    if(!this.width) return;
    if(!this.height) return;

    if(this.focusLine) this.focusLine.remove();
    if(this.symbols) this.symbols.remove();
    if(this.overlay) this.overlay.remove();

    if(this.xlabel) this.xlabel.remove();
    if(this.ylabel) this.ylabel.remove();
    var self = this;

    if(this.axis.x.label.length) {
        this.xlabel = this.root.append('text');
        this.xlabel.style('font-size', '12px');
        this.xlabel.style('font-weight', 'bold');
        this.xlabel.style('font-family', 'Lato, "Lucida Grande", Arial, Helvetica, sans-serif');
        this.xlabel.attr('fill', this.xlabelcolor || 'steelblue');
        this.xlabel.attr('stroke', 'none');
        this.xlabel.style('text-anchor', 'middle');
        if(this.opts.invertAxes) {
            this.xlabel.attr('y', -this.margin.left+20);
            this.xlabel.attr('x', -parseInt(this.root.attr('height'))/2);
            this.xlabel.attr('transform', 'rotate(-90)');
            this.xlabel.text(this.axis.y.label);
        } else {
            this.xlabel.attr('y', (parseInt(this.root.attr('height')) + this.margin.bottom - 15));
            this.xlabel.attr('x', parseInt(this.root.attr('width'))/2);
            this.xlabel.text(this.axis.x.label);
        }
    }

    if(this.axis.y.label.length) {
        this.ylabel = this.root.append('text');
        this.ylabel.style('font-size', '12px');
        this.ylabel.style('font-weight', 'bold');
        this.ylabel.style('font-family', 'Lato, "Lucida Grande", Arial, Helvetica, sans-serif');
        this.ylabel.attr('fill', this.ylabelcolor || 'steelblue');
        this.ylabel.attr('stroke', 'none');
        this.ylabel.style('text-anchor', 'middle');
        if(this.opts.invertAxes) {
            this.ylabel.attr('y', (parseInt(this.root.attr('height')) + this.margin.bottom - 15));
            this.ylabel.attr('x', parseInt(this.root.attr('width'))/2);
            this.ylabel.text(this.axis.x.label);
        } else {
            this.ylabel.attr('y', -this.margin.left+20);
            this.ylabel.attr('x', -parseInt(this.root.attr('height'))/2);
            this.ylabel.attr('transform', 'rotate(-90)');
            this.ylabel.text(this.axis.y.label);
        }
    }

    if(this.opts.invertAxes) {
        this.focusLine = this.focus_line_group.append('line').attr('x1', 0).attr('y1', 0).attr('x2', this.width).attr('y2', 0).attr('stroke', this.opts.theme_focus_line_color).attr('stroke-width', 1).attr('shape-rendering', 'crispEdges').style('display', 'none').attr('class', 'focus-line');
    } else {
        this.focusLine = this.focus_line_group.append('line').attr('x1', 0).attr('y1', 0).attr('x2', 0).attr('y2', this.height).attr('stroke', this.opts.theme_focus_line_color).attr('stroke-width', 1).attr('shape-rendering', 'crispEdges').style('display', 'none').attr('class', 'focus-line');
    }

    this.symbols = this.symbols_group.append('g');
    for(var name in self.charts) {
        self.charts[name].on_complete_draw();
    }

    var order = [];
    for(var name in self.charts) {
        order.push(name);
    }

    if(this.axis.x.range == 'column' || this.axis.x.range == 'bar') {
        order.reverse();
    }

    for(var i=0; i<order.length; i++) {
        var name = order[i];
        self.charts[name].setupFocus();
    }

    if(this.master_detail) {
        if(!forced) {
            this._createBrushPath();
        }
    }

    this.overlay = this.root.append('rect');
    this.overlay.attr('class', 'overlay');
    this.overlay.attr('width', this.width);
    this.overlay.attr('height', this.height);
    this.overlay.attr('fill', 'none');
    this.overlay.attr('pointer-events', 'all');

    this.overlay.attr('clip-path', 'url(#'+this.master_id+'-clip)');

    var over = function() {
        $(window).trigger('rubix.sidebar.off');
        d3.event.preventDefault();
        self.focusLine.style('display', null);
        $(this).focus();
    };

    var move = function() {
        $(window).trigger('rubix.sidebar.off');
        d3.event.preventDefault();
        $(this).focus();
        if(!self.hasData) return;
        if(self.is_touch_device) {
            var coordinates = d3.touches(this)[0];
        } else {
            var coordinates = d3.mouse(this);
        }
        console.log(coordinates);
        if(self.opts.invertAxes) {
            if(coordinates[1] < 0 || coordinates[1] > self.height) return;
            self.overlayY.call(this, self, coordinates);
        } else {
            if(coordinates[0] < 0 || coordinates[0] > self.width) return;
            self.overlayX.call(this, self, coordinates);
        }
    };

    var out = function() {
        $(window).trigger('rubix.sidebar.on');
        d3.event.preventDefault();
        $(this).focus();
        self.tooltip.hide();
        for(var name in self.charts) {
            try {
                self.charts[name].focus.style('display', 'none');
                self.charts[name].off_focus();
            } catch(e) {
                // do nothing
            }
        }
        self.focusLine.style('display', 'none');
    };

    if(self.is_touch_device) {
        if(window.navigator.msPointerEnabled) {
            this.overlay.on('MSPointerDown', over);
            this.overlay.on('MSPointerMove', move);
            this.overlay.on('MSPointerUp' , out);
        } else {
            this.overlay.on('touchstart', over);
            this.overlay.on('touchmove', move);
            this.overlay.on('touchend' , out);
        }
    } else {
        this.overlay.on('mouseover', over);
        this.overlay.on('mousemove', move);
        this.overlay.on('mouseout' , out);
    }
};

Rubix.prototype.runCommand = function(cmd) {
    for(var i in this.charts) {
        try {
            this.charts[i][cmd](this);
        } catch(e) {
            // do nothing
        }
    }
};

Rubix.prototype.resetLabelHandlers = function() {
    var self = this;
    $('.'+this.master_id+'-legend-labels').css({
        'opacity': 0.9
    });

    $('.'+this.master_id+'-legend-labels').off().on({
        'hover': function(e) {
            var hasClass = $(this).hasClass('toggle');

            if(hasClass) return;

            switch(e.type) {
                case 'mouseenter':
                    $(this).css({
                        'opacity': 1
                    });
                break;
                case 'mouseleave':
                    $(this).css({
                        'opacity': 0.9
                    });
                break;
                default:
                break;
            }
        },
        'click': function(e) {
            var hasClass = $(this).hasClass('toggle');
            var name = $(this).attr('data-name');
            var type = $(this).attr('data-type') || '';

            if(!hasClass) {
                $(this).css({
                    'opacity': 0.2
                });
                $(this).addClass('toggle');

                var chart = self.charts[name];
                chart.hidden();
                delete self.charts[name];
                self.chart_stack[name] = chart;

                if(type.length) {
                    var fetchData = self.column_stack_data;
                    var pushData = self.column_stack_data_stack;
                    if(type === 'astack') {
                        fetchData = self.area_stack_data;
                        pushData = self.area_stack_data_stack;
                    }
                    var rdata, orderKey = 0;
                    for(var i=0; i<fetchData.length; i++) {
                        if(!fetchData[i]) continue;
                        var fname = fetchData[i].key;
                        if(fname === name) {
                            orderKey = fetchData[i].orderKey;
                            rdata = fetchData[i];
                            fetchData.splice(i, 1);
                            break;
                        }
                    }

                    pushData.splice(orderKey, 0, rdata);
                }

                var data = self.data[name];
                self.data_stack[name] = data;
                delete self.data[name];
            } else {
                $(this).css({
                    'opacity': 1
                });
                $(this).removeClass('toggle');

                var chart = self.chart_stack[name];
                self.charts[name] = chart;
                delete self.chart_stack[name];

                if(type.length) {
                    var pushedData = self.column_stack_data_stack;
                    var origData = self.column_stack_data;
                    if(type === 'astack') {
                        pushedData = self.area_stack_data_stack;
                        origData = self.area_stack_data;
                    }
                    var rdata, orderKey = 0;
                    for(var i=0; i<pushedData.length; i++) {
                        if(!pushedData[i]) continue;
                        var fname = pushedData[i].key;
                        if(fname === name) {
                            orderKey = pushedData[i].orderKey;
                            rdata = pushedData[i];
                            pushedData.splice(i, 1);
                            break;
                        }
                    }

                    origData.splice(orderKey, 0, rdata);
                }

                var data = self.data_stack[name];
                self.data[name] = data;
                delete self.data_stack[name];
                self.charts[name].show();
            }

            /** TODO: Investigate why draw needs to be called twice */
            self.draw();
            self.draw();
        }
    });
};

/**
 * @param {?Object} opts
 * @return {Rubix.LineSeries}
 */
Rubix.prototype.line_series = function(opts) {
    opts = opts || {};
    opts.name  = opts.name || this._generate_name();
    if(this.charts.hasOwnProperty(opts.name)) {
        throw new Error("Series exists: " + name);
    }

    var line_series = new Rubix.LineSeries(this, opts);
    this.charts[line_series.name] = line_series;
    this.legend.append("<div class='"+this.master_id+"-legend-labels' data-name='"+line_series.name+"' style='cursor: pointer; display: inline-block; font-weight: bold; margin-right: 10px; color: "+line_series.opts.color+"'><span style='font-size: 22px;'>■ </span><span style='font-size: 12px; position:relative; top: -3px; left: -2px;'>"+line_series.name+"</span></div>");
    this.resetLabelHandlers();
    return line_series;
};

/**
 * @param {?Object} opts
 * @return {Rubix.AreaSeries}
 */
Rubix.prototype.area_series = function(opts) {
    opts = opts || {};
    opts.name  = opts.name || this._generate_name();
    if(this.charts.hasOwnProperty(opts.name)) {
        throw new Error("Series exists: " + name);
    }
    if(this.stacked) {
        var stacked_area_series = new Rubix.StackedAreaSeries(this, opts);
        this.charts[stacked_area_series.name] = stacked_area_series;
        this.legend.append("<div class='"+this.master_id+"-legend-labels' data-name='"+stacked_area_series.name+"' data-type='astack' style='cursor: pointer; display: inline-block; font-weight: bold; margin-right: 10px; color: "+stacked_area_series.opts.color+"'><span style='font-size: 22px;'>■ </span><span style='font-size: 12px; position:relative; top: -3px; left: -2px;'>"+stacked_area_series.name+"</span></div>");
        this.resetLabelHandlers();
        return stacked_area_series;
    }
    var area_series = new Rubix.AreaSeries(this, opts);
    this.charts[area_series.name] = area_series;
    this.legend.append("<div class='"+this.master_id+"-legend-labels' data-name='"+area_series.name+"' style='cursor: pointer; display: inline-block; font-weight: bold; margin-right: 10px; color: "+area_series.opts.color+"'><span style='font-size: 22px;'>■ </span><span style='font-size: 12px; position:relative; top: -3px; left: -2px;'>"+area_series.name+"</span></div>");
    this.resetLabelHandlers();
    return area_series;
};

Rubix.prototype._generate_name = function() {
    return 'Series ' + (++this.chart_counter);
};

/**
 * @param {?Object} opts
 * @return {Rubix.ColumnSeries}
 */
Rubix.prototype.column_series = function(opts) {
    opts = opts || {};
    opts.name  = opts.name || this._generate_name();
    if(this.charts.hasOwnProperty(opts.name)) {
        throw new Error("Series exists: " + name);
    }
    if(this.opts.invertAxes !== false || this.opts.axis.x.range !== 'column') {
        this.opts.invertAxes = false;
        this.opts.axis.x.type = 'ordinal';
        this.opts.axis.x.range = 'column';
        this.setup()
    }
    var column_series = new Rubix.ColumnSeries(this, opts);
    this.charts[column_series.name] = column_series;
    this.legend.append("<div class='"+this.master_id+"-legend-labels' data-name='"+column_series.name+"' data-type='cstack' style='cursor: pointer; display: inline-block; font-weight: bold; margin-right: 10px; color: "+column_series.opts.color+"'><span style='font-size: 22px;'>■ </span><span style='font-size: 12px; position:relative; top: -3px; left: -2px;'>"+column_series.name+"</span></div>");
    this.resetLabelHandlers();
    return column_series;
};

/**
 * @param {?Object} opts
 * @return {Rubix.ColumnSeries}
 */
Rubix.prototype.bar_series = function(opts) {
    opts = opts || {};
    opts.name  = opts.name || this._generate_name();
    if(this.charts.hasOwnProperty(opts.name)) {
        throw new Error("Series exists: " + name);
    }
    if(this.opts.invertAxes !== true || this.opts.axis.x.range !== 'column') {
        this.opts.invertAxes = true;
        this.opts.axis.x.type = 'ordinal';
        this.opts.axis.x.range = 'column';
        this.setup()
    }
    var column_series = new Rubix.ColumnSeries(this, opts);
    this.charts[column_series.name] = column_series;
    this.legend.append("<div class='"+this.master_id+"-legend-labels' data-name='"+column_series.name+"' data-type='cstack' style='cursor: pointer; display: inline-block; font-weight: bold; margin-right: 10px; color: "+column_series.opts.color+"'><span style='font-size: 22px;'>■ </span><span style='font-size: 12px; position:relative; top: -3px; left: -2px;'>"+column_series.name+"</span></div>");
    this.resetLabelHandlers();
    return column_series;
};

window.Rubix = window.Rubix || {};
/**
 * @param {Rubix} rubix
 * @param {Object} opts
 * @constructor
 */
Rubix.StackedAreaSeries = function(rubix, opts) {
    this.opts = opts;
    this.opts.color = this.opts.color || 'steelblue';
    this.opts.marker = this.opts.marker || 'circle';
    this.opts.fillopacity = this.opts.fillopacity || 0.5;
    this.opts.strokewidth = this.opts.strokewidth || 1;
    this.opts.noshadow = this.opts.noshadow || false;
    this.show_markers = this.opts.show_markers;

    if(!this.opts.hasOwnProperty('name')) throw new Error('StackedAreaSeries should have a \'name\' property');

    this.name = this.opts.name;

    this.chart_hidden = false;
    this.temp_stack = [];

    this.setup = false;
    this.last_stack = [];
    this.last_stack_name = '';
    this.last_stack_added = false;

    this._setup(rubix);
};

/**
 * @param {Rubix} rubix
 * @private
 */
Rubix.StackedAreaSeries.prototype._setup = function(rubix) {
    this.rubix = rubix;

    this.root   = this.rubix.root;
    this.data   = this.rubix.data;
    this.width  = this.rubix.width;
    this.height = this.rubix.height;
    this.stack  = this.rubix.area_stack;
    this.offset = this.rubix.area_offset;
    this.area_stack_data = this.rubix.area_stack_data;
    this.stacked_area_series = this.rubix.root_stacked_area_series;
    this.show_markers = (this.show_markers === undefined) ? this.rubix.show_markers : this.show_markers;

    this.master_detail = this.rubix.master_detail;

    if(this.master_detail) {
        this.md_root = this.rubix.md_root;
    }

    if(!this.id) {
        this.id = this.rubix.uid('stacked-area');
    }

    /** separator */
    var self = this;
    this.line = d3.svg.line();
    this.line.defined(function(d) {
        if(self.rubix.offset === 'expand') {
            if(d.y_new === 0 && d.y0 === 1) {
                return false;
            }
            return true;
        }

        return d.y_new !== null && d.x !== null;
    });
    if(this.rubix.opts.invertAxes) {
        this.line.x(function(d) {
            var val = d.y0 + d.y_new;
            if(isNaN(val)) {
                return 0;
            }
            return self.rubix.x(val);
        });
        this.line.y(function(d) {
            if(self.rubix.axis.y.range === 'column' || self.rubix.axis.y.range === 'bar') {
                return self.rubix.y(d.x) + self.rubix.y.rangeBand()/2;
            }
            return self.rubix.y(d.x);
        });
        this.line.interpolate(this.rubix.interpolate);
    } else {
        this.line.x(function(d) {
            if(self.rubix.axis.x.range === 'column' || self.rubix.axis.x.range === 'bar') {
                return self.rubix.x(d.x) + self.rubix.x.rangeBand()/2;
            }
            return self.rubix.x(d.x);
        });
        this.line.y(function(d) {
            var val = d.y0 + d.y_new;
            if(isNaN(val)) {
                return 0;
            }
            return self.rubix.y(val);
        });
        this.line.interpolate(this.rubix.interpolate);
    }

    this.area = d3.svg.area();
    this.area.defined(this.line.defined());

    if(this.rubix.opts.invertAxes) {
        this.area.x0(function(d) {
            var val = d.y0;
            if(isNaN(val)) {
                return 0;
            }
            return self.rubix.x(val);
        });
        this.area.x1(function(d) {
            var val = d.y0 + d.y_new;
            if(isNaN(val)) {
                return 0;
            }
            return self.rubix.x(val);
        });
        this.area.y(function(d) {
            if(self.rubix.axis.y.range === 'column' || self.rubix.axis.y.range === 'bar') {
                return self.rubix.y(d.x) + self.rubix.y.rangeBand()/2;
            }
            return self.rubix.y(d.x);
        });
        this.area.interpolate(this.rubix.interpolate);
    } else {
        this.area.x(function(d) {
            if(self.rubix.axis.x.range === 'column' || self.rubix.axis.x.range === 'bar') {
                return self.rubix.x(d.x) + self.rubix.x.rangeBand()/2;
            }
            return self.rubix.x(d.x);
        });
        this.area.y0(function(d) {
            var val = d.y0;
            if(isNaN(val)) {
                return 0;
            }
            return self.rubix.y(val);
        });
        this.area.y1(function(d) {
            var val = d.y0 + d.y_new;
            if(isNaN(val)) {
                return 0;
            }
            return self.rubix.y(val);
        });
        this.area.interpolate(this.rubix.interpolate);
    }

    if(this.master_detail) {
        this.master_line = d3.svg.line();
        this.master_line.defined(function(d) {
            if(self.rubix.area_offset === 'expand') {
                if(d.y_new === 0 && d.y0 === 1) {
                    return false;
                }
                return true;
            }

            return d.y_new !== null && d.x !== null;
        });
        this.master_line.x(function(d) {
            return self.rubix.x2(d.x);
        });
        this.master_line.y(function(d) {
            var val = d.y0 + d.y_new;
            if(isNaN(val)) {
                return 0;
            }
            return self.rubix.y2(val);
        });
        this.master_line.interpolate(this.rubix.interpolate);

        this.master_area = d3.svg.area();
        this.master_area.defined(this.master_line.defined());
        this.master_area.x(function(d) {
            return self.rubix.x2(d.x);
        });
        this.master_area.y0(function(d) {
            var val = d.y0;
            if(isNaN(val)) {
                return 0;
            }
            return self.rubix.y2(val);
        });
        this.master_area.y1(function(d) {
            var val = d.y0 + d.y_new;
            if(isNaN(val)) {
                return 0;
            }
            return self.rubix.y2(val);
        });
        this.master_area.interpolate(this.rubix.interpolate);
    }
};

// Alias for draw
Rubix.StackedAreaSeries.prototype.redraw = function(rubix) {
    this._setup(rubix);
    this.draw();
};

Rubix.StackedAreaSeries.prototype.noRedraw = function(rubix) {
    this._setup(rubix);
    this.draw(true);
};

/**
 * @param {Array|Object} data
 */
Rubix.StackedAreaSeries.prototype.addData = function(data) {
    this.rubix.data_changed = true;
    if(!(data instanceof Array)) {
        if(!(data instanceof Object)) {
            throw new Error("Data must be an array or object");
        } else {
            if(!(data.hasOwnProperty('x') || data.hasOwnProperty('y'))) {
                throw new Error("Object must be in the form: {x: ..., y: ...}");
            }

            data = [data];
        }
    }

    if(!data.length) return;

    if(!this.rubix.opts.noSort) {
        data.sort(function(a, b) {
            if(a.x > b.x) {
                return 1;
            } else if(a.x === b.x) {
                return 0;
            } else {
                return -1;
            }
        });
    }

    this.data[this.name] = data;

    this.area_stack_data.push({
        key: this.name,
        color: this.opts.color,
        values: this.data[this.name],
        fillopacity: this.opts.fillopacity,
        strokewidth: this.opts.strokewidth,
        orderKey: this.area_stack_data.length
    });

    this.rubix.resetAxis(true);
    this.rubix.forceRedraw();
    this._animate_draw();
};

Rubix.StackedAreaSeries.prototype.draw = function(forced) {
    if(!this.name) return;
    if(!this.data) return;
    if(!this.data.hasOwnProperty(this.name)) return;
    if(!this.data[this.name].length) return;

    var oldLayers = this.layers;
    try {
        this.layers = this.stack(this.area_stack_data);
    } catch(e) {
        // data un-available. retaining old layer.
        this.layers = oldLayers;
    }

    var self = this;

    var isConstructed = this.stacked_area_series.selectAll('.'+this.id)[0].length;

    if(!isConstructed) {
        try {
            this.stacked_area_series.selectAll('.layer').remove();
            this.stacked_area_series.selectAll('.' + this.id + '-line').remove();

            var p = this.stacked_area_series.selectAll('.layer').data(this.layers, function(d) {
                return d.key;
            });
            
            var createdPath = p.enter().append('path');
            createdPath.attr('class', 'layer')
                        .attr('d', function(d) { return self.area(d.values); })
                        .attr('fill', function(d) { return d.color; })
                        .attr('fill-opacity', function(d) {
                            return d.fillopacity
                        })
                        .attr('stroke', 'none');

            p.exit().remove();

            if(this.master_detail) {
                createdPath.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
                createdPath.classed('clipped', true);

                if(!forced) {
                    var md_p = this.md_root.select('.md-layers > .md_stacked_area_series').selectAll('.layer').data(this.layers, function(d) {
                        return d.key;
                    });
                    
                    var createdMdPath = md_p.enter().append('path');
                    createdMdPath.attr('class', 'layer')
                                 .attr('d', function(d) { return self.master_area(d.values); })
                                 .attr('fill', function(d) { return d.color; })
                                 .attr('fill-opacity', function(d) {
                                    return d.fillopacity;
                                 })
                                 .attr('stroke', 'none');

                    createdMdPath.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');

                    createdMdPath.classed('clipped', true);

                    md_p.exit().remove();
                }
            }

            for(var i=0; i<this.layers.length; i++) {
                var name = this.layers[i].key;
                if(this.name === name) {
                    var datum = this.layers[i].values;
                    if(!this.opts.noshadow) {
                        this.strokePath1 = this.stacked_area_series.append('path').attr('class', this.id+'-line').datum(datum).attr('d', this.line).attr('stroke', 'black').attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-width', 5 * this.opts.strokewidth).attr('stroke-opacity', 0.05000000000000001).attr('transform', 'translate(1,1)');
                        this.strokePath2 = this.stacked_area_series.append('path').attr('class', this.id+'-line').datum(datum).attr('d', this.line).attr('stroke', 'black').attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-width', 3 * this.opts.strokewidth).attr('stroke-opacity', 0.1).attr('transform', 'translate(1,1)');
                        this.strokePath3 = this.stacked_area_series.append('path').attr('class', this.id+'-line').datum(datum).attr('d', this.line).attr('stroke', 'black').attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-width', 1 * this.opts.strokewidth).attr('stroke-opacity', 0.15000000000000002).attr('transform', 'translate(1,1)');
                    }
                    this.linePath = this.stacked_area_series.append('path').datum(datum).attr('class', this.id+'-line').attr('stroke', this.opts.color).attr('fill', 'none').attr('stroke-linecap', 'round').attr('d', this.line).attr('stroke-width', 2 * this.opts.strokewidth);
                    
                    if(this.master_detail) {
                        if(!forced) {
                            this.md_root.select('.md-layers > .md_stacked_area_series').selectAll('.' + this.id + '-line').remove();
                            this.masterLinePath = this.md_root.select('.md-layers > .md_stacked_area_series').append('path').datum(datum).attr('class', this.id+'-line').attr('stroke', this.opts.color).attr('fill', 'none').attr('stroke-linecap', 'round').attr('d', this.master_line).attr('stroke-width', 2 * this.opts.strokewidth);
                            this.masterLinePath.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
                            this.masterLinePath.classed('clipped', true);

                            if(this.dataChanged) {
                                this.rubix.resetExtent();
                                this.dataChanged = false;
                            }
                        }

                        if(!this.opts.noshadow) {
                            this.strokePath1.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
                            this.strokePath2.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
                            this.strokePath3.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');  
                        }
                        this.linePath.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');

                        if(!this.opts.noshadow) {
                            this.strokePath1.classed('clipped', true);
                            this.strokePath2.classed('clipped', true);
                            this.strokePath3.classed('clipped', true);
                        }
                        this.linePath.classed('clipped', true);
                    }
                    break;
                }
            }
        } catch(e) {
            // do nothing
        }
        this.setup = true;
    } else {
        this.rubix.runCommand('globalRedraw');
    }

    this.rubix.resetFocus(forced);
};

/**
 * @param {Object} data
 * @param {?Boolean} shift
 * @param {?Boolean} noRedraw
 */
Rubix.StackedAreaSeries.prototype.updatePoint = function(data, shift, noRedraw) {
    this.addPoint(data, shift, noRedraw);
};

/**
 * @param {*} ref
 * @param {?Boolean} noRedraw
 */
Rubix.StackedAreaSeries.prototype.removePoint = function(ref, noRedraw) {
    if(this.chart_hidden) {
        this.temp_stack.push({
            type: 'removePoint',
            ref: ref
        });
        return;
    }

    if(!this.data[this.name]) {
        this.data[this.name] = [];
    }

    var removed = false, pos = 0;
    for(var i=0; i<this.data[this.name].length; i++) {
        if(this.data[this.name][i].x === ref) {
            this.data[this.name][i].y = null;
            pos = i;
            removed = true;
            break;
        }
    }

    if(!removed) return;

    var found = false;
    for(var i=0; i<this.area_stack_data.length; i++) {
        var st = this.area_stack_data[i];
        try {
            if(st.values[pos].x === ref) {
                if(st.values[pos].y !== null) {
                    found = true;
                    break;
                }
            }
        } catch(e) {
            // do nothing
        }
    }

    if(!found) {
        for(var i=0; i<this.area_stack_data.length; i++) {
            this.area_stack_data[i].values.splice(pos, 1);
        }
    }

    var oldLayers = this.layers;
    try {
        this.layers = this.stack(this.area_stack_data);
    } catch(e) {
        // data un-available. retaining old layer.
        this.layers = oldLayers;
    }

    if(this.master_detail) {
        this.dataChanged = true;
    }

    if(noRedraw) return;

    if(this.setup) {
        this._animate_draw();
    } else {
        this.rubix.resetAxis(true);
        this.rubix.forceRedraw();
    }
};

/**
 * @param {Object} data
 * @param {?Boolean} shift
 * @param {?Boolean} noRedraw
 */
Rubix.StackedAreaSeries.prototype.addPoint = function(data, shift, noRedraw) {
    this.rubix.data_changed = true;
    if(!(data instanceof Object) || (data instanceof Array)) {
        throw new Error("Object required for addPoint");
    }
    if(!(data.hasOwnProperty('x') || data.hasOwnProperty('y'))) {
        throw new Error("Object must be in the form: {x: ..., y: ...}");
    }

    if(this.chart_hidden) {
        this.temp_stack.push({
            type: 'addPoint',
            data: data,
            shift: shift
        });
        return;
    }

    if(!this.data[this.name]) {
        this.data[this.name] = [];
    }

    var added = false;
    for(var i=0; i<this.data[this.name].length; i++) {
        if(this.data[this.name][i].x === data.x) {
            this.data[this.name][i].y = data.y;
            added = true;
            break;
        }
    }

    if(!added) {
        this.data[this.name].push(data);
    }

    this.data[this.name].sort(function(a, b) {
        if(a.x > b.x) {
            return 1;
        } else if(a.x === b.x) {
            return 0;
        } else {
            return -1;
        }
    });

    if(this.rubix.opts.interval) {
        if(this.rubix.opts.interval < this.data[this.name].length) {
            this.data[this.name].shift();
        }
    } else {
        if(shift) {
            this.data[this.name].shift();
        }
    }

    var max_elems = d3.max(this.area_stack_data, function(d) {
        return d.values.length;
    });

    for(var i=0; i<this.area_stack_data.length; i++) {
        var st = this.area_stack_data[i];
        if(st.values.length < max_elems) {
            st.values.push({
                x: data.x,
                y: null
            });
        }
    }

    var oldLayers = this.layers;
    try {
        this.layers = this.stack(this.area_stack_data);
    } catch(e) {
        // data un-available. retaining old layer.
        this.layers = oldLayers;
    }

    if(this.master_detail) {
        this.dataChanged = true;
    }

    if(noRedraw) return;

    if(this.setup) {
        this._animate_draw();
    } else {
        this.rubix.resetAxis(true);
        this.rubix.forceRedraw();
    }
};

Rubix.StackedAreaSeries.prototype._animate_draw = function() {
    var text = this.root.selectAll('.y.axis').selectAll('text')[0];
    var width = [];
    for(var i=0; i<text.length; i++) {
        width.push(text[i].getBBox().width);
    }
    var origMaxWidth = d3.max(width);

    this.rubix.resetAxis(true);

    this.rubix.runCommand('globalRedraw');

    text = this.root.selectAll('.y.axis').selectAll('text')[0];
    width = [];
    for(var i=0; i<text.length; i++) {
        width.push(text[i].getBBox().width);
    }

    var maxWidth = d3.max(width);

    this.rubix.marginLeft(maxWidth);
    this.rubix.resetFocus();
};

Rubix.StackedAreaSeries.prototype.hidden = function() {
    this.chart_hidden = true;
};

Rubix.StackedAreaSeries.prototype.show = function() {
    this.chart_hidden = false;
    while(this.temp_stack.length>1) {
        var rawData = this.temp_stack.shift();
        if(rawData.type === 'addPoint') {
            this.addPoint(rawData.data, rawData.shift, true);
        } else {
            this.removePoint(rawData.ref);
        }
    }
    if(this.temp_stack.length) {
        var rawData = this.temp_stack.shift();
        if(rawData.type === 'addPoint') {
            this.addPoint(rawData.data, rawData.shift, true);
        } else {
            this.removePoint(rawData.ref);
        }
    }
};

Rubix.StackedAreaSeries.prototype.globalRedraw = function(rubix) {
    this.stacked_area_series.select('.'+this.id+'-line').attr('d', this.line);
};

Rubix.StackedAreaSeries.prototype.forceRedraw = function(rubix) {
    this.redraw(rubix);
};

Rubix.StackedAreaSeries.prototype.on_complete_draw = function() {
    if(!this.setup) return;
    var self = this;
    if(this.opts.marker !== undefined && this.show_markers) {
        if(this.master_detail) {
            this.rubix.symbols.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip-symbols)');
        }
        this.markers = this.rubix.symbols.selectAll('.'+this.id+'-marker');
        switch(this.opts.marker) {
            case 'circle':
            case 'cross':
            case 'square':
            case 'diamond':
            case 'triangle-up':
            case 'triangle-down':
                var symbol = d3.svg.symbol();
                symbol.type(this.opts.marker);

                var symbolType = this.markers.data(this.data[this.name]);
                var symbolPath = symbolType.enter().append('path');
                symbolPath.attr('d', symbol)
                      .attr('class', this.id + '-marker')
                      .attr('fill', this.opts.color)
                      .style('display', function(d) {
                            if(self.rubix.area_offset === 'expand') {
                                if(d.y_new === 0 && d.y0 === 1) {
                                    return 'none';
                                }
                                return null;
                            }
                            if(d.y_new === null) {
                                return 'none';
                            }
                            return null;
                      })
                      .attr('stroke', 'white')
                      .attr('transform', function(d) {
                            var val = d.y0 + d.y_new;
                            if(isNaN(val)) {
                                val = 0;
                            }
                            if(self.rubix.opts.invertAxes) {
                                var _y = self.rubix.y(d.x);
                                var _x = self.rubix.x(val);
                                if(self.rubix.axis.y.range === 'column' || self.rubix.axis.y.range === 'bar') {
                                    _y += self.rubix.y.rangeBand()/2;
                                }
                            } else {
                                var _y = self.rubix.y(val);
                                var _x = self.rubix.x(d.x);
                                if(self.rubix.axis.x.range === 'column' || self.rubix.axis.x.range === 'bar') {
                                    _x += self.rubix.x.rangeBand()/2;
                                }
                            }
                            return 'translate('+_x+','+_y+')';
                      });
                symbolType.exit().remove();
            break;
            default:
                throw new Error('Unknown marker type : ' + this.opts.marker);
            break;
        }
    }
};

Rubix.StackedAreaSeries.prototype.setupFocus = function() {
    if(!this.setup) return;
    if(this.focus) this.focus.remove();
    this.focus = this.rubix.focus_group.append('g');
    this.focus.attr('class', 'focus');
    this.focus.style('display', 'none');
    switch(this.opts.marker) {
        case 'circle':
        case 'cross':
        case 'square':
        case 'diamond':
        case 'triangle-up':
        case 'triangle-down':
            var symbol = d3.svg.symbol();
            symbol.type(this.opts.marker);
            var path = this.focus.append('path').attr('d', symbol).attr('fill', this.opts.color).attr('stroke', 'white').attr('stroke-width', 2);
        break;
        default:
            throw new Error('Unknown marker type : ' + this.opts.marker);
        break;
    }
};

Rubix.StackedAreaSeries.prototype.on_focus = function() {
    if(!this.setup) return;
    this.linePath.attr('stroke-width', 2 * this.opts.strokewidth);
};

Rubix.StackedAreaSeries.prototype.off_focus = function() {
    if(!this.setup) return;
    this.linePath.attr('stroke-width', 2 * this.opts.strokewidth);
};
window.Rubix = window.Rubix || {};

var slugify = function(text) {
    text = text.replace(/[^-a-zA-Z0-9,&\s]+/ig, '');
    text = text.replace(/-/gi, "_");
    text = text.replace(/\s/gi, "-");
    return text;
};

/**
 * @param {string} id
 * @param {Object} opts
 * @return {Rubix.PieDonut}
 */
Rubix.Pie = function(id, opts) {
    return new Rubix.PieDonut(id, 'pie', opts);
};

/**
 * @param {string} id
 * @param {Object} opts
 * @return {Rubix.PieDonut}
 */
Rubix.Donut = function(id, opts) {
    return new Rubix.PieDonut(id, 'donut', opts);
};

/**
 * @private
 * @param {string} id
 * @param {Rubix.Pie || Rubix.Donut} type
 * @param {Object} opts
 * @constructor
 */
Rubix.PieDonut = function(id, type, opts) {
    opts = opts || {};
    this.type = type;
    this.is_touch_device = 'ontouchstart' in document.documentElement;

    this.legend_hidden = {};

    this.chart_counter = 0;
    this.master_id = this.uid('master_id');

    this.area_stack_data_stack = [];
    this.column_stack_data_stack = [];

    this.root_elem = $(id);
    this.root_elem.css('position', 'relative');
    this.root_elem.addClass('rubixccnium-main-chart');
    this.root_elem.append('<div class="rubixccnium-tooltip"></div>');
    this.root_elem.append('<div class="rubixccnium-title"></div>');
    this.root_elem.append('<div class="rubixccnium-subtitle"></div>');
    this.root_elem.append('<div class="rubixccnium-chart"><div style="margin-top:5px">Loading...</div></div>');
    this.root_elem.append('<div class="rubixccnium-legend"></div>');

    var width = opts.width || '100%';
    var height = opts.height || 150;
    this.elem_width = width, this.elem_height = height;
    this.root_elem.width(width).height(height);

    this.elem = this.root_elem.find('.rubixccnium-chart');

    this.tooltip = this.root_elem.find('.rubixccnium-tooltip');
    this.tooltip.hide();
    this.tooltip.html("");

    opts.tooltip = opts.tooltip || {};

    this.tooltip.css({
        'font-family': 'Lato, "Lucida Grande", Arial, Helvetica, sans-serif',
        'font-size': '12px',
        'position': 'absolute',
        'background': 'white',
        'color': '#89949B',
        'display': 'none',
        'padding': '5px 15px',
        'pointer-events': 'none',
        'border-radius': '5px',
        'z-index': 100,
        'min-height': 75,
        'user-select': 'none',
        'cursor': 'default',
        'border': '3px solid ' + (opts.tooltip.color ? opts.tooltip.color : '#89949B'),
        'box-shadow': 'rgba(0, 0, 0, 0.2) 2px 4px 8px',
        'background': 'white'
    });

    opts.legend = opts.legend || {};

    this.legend = this.root_elem.find('.rubixccnium-legend');
    this.legend.css({
        'font-family': "Lato, 'Lucida Grande', Arial, Helvetica, sans-serif",
        'text-align': 'center',
        'margin-top': opts.legend.top || '-10px',
        'margin-bottom': opts.legend.bottom || '5px',
        'user-select': 'none',
        'display': opts.hideLegend ? 'none' : 'block'
    });

    this.title = this.root_elem.find('.rubixccnium-title');
    this.subtitle = this.root_elem.find('.rubixccnium-subtitle');

    this.title.css({
        'font-family': "Lato, 'Lucida Grande', Arial, Helvetica, sans-serif",
        'text-align': 'center',
        'user-select': 'none',
        'font-weight': 'bold',
        'font-size': '16px',
        'color': 'steelblue',
        'margin-top': '10px',
        'cursor': 'default'
    });

    this.subtitle.css({
        'font-family': "Lato, 'Lucida Grande', Arial, Helvetica, sans-serif",
        'text-align': 'center',
        'user-select': 'none',
        'font-size': '10px',
        'color': 'steelblue',
        'margin-top': '10px',
        'cursor': 'default',
        'opacity': 0.8
    });

    var self = this;

    this.elem.css({
        'width': '100%',
        'height': parseInt(this.root_elem.get(0).style.height),
        'user-select': 'none',
        'cursor': 'default'
    });
    this.root_elem.css('height', '100%');
    this.opts = opts || {};

    this.data = [];
    this.is_touch_device = 'ontouchstart' in document.documentElement;
    this.d3_eventSource = function () {
        var e = d3.event, s;
        while (s = e.sourceEvent) e = s;
        return e;
    }

    this.last_render = null;
    this.data_changed = false;
    this.setup();
};

Rubix.PieDonut.prototype.setup = function() {
    this._setupOpts();
    this._setupOnce();
    this._setupRedraw();

    this.draw();
};


/** @private */
Rubix.PieDonut.prototype._setupOpts = function() {
    this.opts.theme_style = this.opts.theme_style || 'light';
    this.opts.theme_style_color = (this.opts.theme_style === 'light') ? '#C0D0E0' : '#555';
    this.opts.theme_focus_line_color = (this.opts.theme_style === 'light') ? '#C0D0E0' : '#888';

    this.opts.legend_color_brightness = this.opts.legend_color_brightness || 0.5;
    this.opts.global_legend_color = this.opts.global_legend_color || false;

    this.opts.titleColor = this.opts.titleColor || 'steelblue';
    this.opts.subtitleColor = this.opts.subtitleColor || 'steelblue';

    this.title.css('color', this.opts.titleColor);
    this.subtitle.css('color', this.opts.subtitleColor);

    if(this.opts.theme_style === 'dark') {
        this.tooltip.css({
            "color": "#aaa",
            "font-weight": "bold",
            "border": "1px solid #222",
            "background-color": "#303030"
        });
    }

    this.opts.margin = this.opts.margin || {};
    this.margin = {
        top    : this.opts.margin.top    || 25,
        left   : this.opts.margin.left   || 25,
        right  : this.opts.margin.right  || 25,
        bottom : this.opts.margin.bottom || 25
    };

    this.opts.tooltip = this.opts.tooltip || {};
    this.opts.tooltip.format = this.opts.tooltip.format || {};
    this.tooltipFormatter = {
        format: {
            x: this.opts.tooltip.format.x || '',
            y: this.opts.tooltip.format.y || ''
        }
    }

    this.resize = this.opts.resize || 'throttled';

    this.opts.title = this.opts.title || '';
    this.opts.subtitle = this.opts.subtitle || '';

    this.title.html(this.opts.title);
    this.subtitle.html(this.opts.subtitle);
    if(this.opts.title.length || this.opts.subtitle.length) {
        this.elem.css('margin-top', '-20px');
    }
    (this.opts.title.length) ? this.title.show() : this.title.hide();
    (this.opts.subtitle.length) ? this.subtitle.show() : this.subtitle.hide();
};

/** @private */
Rubix.PieDonut.prototype._setupOnce = function() {
    // Add Pie Stack data here.
};

Rubix.PieDonut.prototype._setupRedraw = function() {
    var self = this;

    $(window).on('orientationchange', function() {
        self.draw();
    });

    $(window).on('rubix.redraw.'+this.master_id, function() {
        self.draw();
    });

    switch(this.resize) {
        case 'always':
            $(window).on('resize', function() {
                self.draw();
            });
        break;
        case 'debounced':
            $(window).on('debouncedresize', function() {
                self.draw();
            });
        break;
        case 'throttled':
            $(window).on('throttledresize', function() {
                self.draw();
            });
        break;
        default:
            throw new Error('Unknown resize type!');
        break;
    }
};

Rubix.PieDonut.prototype.draw = function() {
    this._draw($(window).width(), $(window).height());
};

/**
 * @param {number} window_width
 * @param {number} window_height
 * @private 
 */
Rubix.PieDonut.prototype._draw = function(window_width, window_height) {
    this._cleanElement();
    this._setSize();
    this._setupCanvas();
    this._setupRoot();
    this._setupSeries();
    this.final_draw();
};

/** @private */
Rubix.PieDonut.prototype._cleanElement = function() {
    this.elem.children().remove();
};

/** @private */
Rubix.PieDonut.prototype._setSize = function() {
    this.outerWidth  = this.elem.width();
    this.outerHeight = this.elem.height();

    this.width  = this.outerWidth - this.margin.left - this.margin.right;
    this.height = this.outerHeight - this.margin.top - this.margin.bottom;

    this.innerRadius = 0;
    this.outerRadius = (Math.min(this.width, this.height) * .5) - 10;

    if(this.type === 'donut') {
        this.innerRadius = this.outerRadius * .6;
    }
};

/** @private */
Rubix.PieDonut.prototype._setupCanvas = function() {
    this.elem.html('');
    this.canvas = d3.select(this.elem.get(0)).append('svg');
    this.canvas.attr('width', this.outerWidth);
    this.canvas.attr('height', this.outerHeight);

    this.canvas.append('desc').text("Powered by RubixÆžium");
};

/** @private */
Rubix.PieDonut.prototype._setupRoot = function() {
    this.root = this.canvas.append('g');
    this.root.attr('width', this.width);
    this.root.attr('height', this.height);
    this.root.attr('transform', 'translate('+this.margin.left+','+this.margin.top+')');

    if(!this.hasData) {
        this.canvas.append('text').attr('class', 'noData').attr('font-size', '30px').attr('text-anchor', 'middle').attr('transform', 'translate('+this.outerWidth/2+','+this.outerHeight/2+')').attr('font-family', 'Lato, "Lucida Grande", Arial, Helvetica, sans-serif').text("No Data");
    } else {
        this.canvas.select('.noData').style('display', 'none');
    }
};

Rubix.PieDonut.prototype._setupSeries = function() {
    this.root_piedonut_series = this.root.append('g').attr('class', 'piedonut_series').attr('transform', "translate(" + this.width / 2 + "," + this.height / 2 + ")");
};

Rubix.PieDonut.prototype.uid = function(type) {
    return 'rubixcc-pie-donut-' + type +'-' + Math.floor(2147483648*Math.random()).toString(36);
};

Rubix.PieDonut.prototype.addData = function(data) {
    this.data_changed = true;
    data.forEach(function(d) {
        d.value = +d.value;
    });

    this.data = data;

    this._setupLegend();
    this.final_draw('launch');
};

Rubix.PieDonut.prototype._setupLegend = function() {
    var self = this;
    this.legend.children().remove();
    for(var i=0; i<this.data.length; i++) {
        var color = this.opts.global_legend_color || this.data[i].color;
        this.legend.append("<div class='"+this.master_id+"-legend-labels' data-name='"+this.data[i].name+"' style='cursor: pointer; display: inline-block; font-weight: bold; margin-right: 10px; color: "+color+"'><span style='font-size: 22px;'>■ </span><span style='font-size: 12px; position:relative; top: -3px; left: -2px;'>"+this.data[i].name+"</span></div>");
    }

    $('.'+this.master_id+'-legend-labels').css({
        'opacity': 0.9
    });

    for(var id in this.legend_hidden) {
        var name = this.legend_hidden[id];
        $('[data-name='+name+']').css({
            'opacity': 0.2
        }).addClass('toggle');
    }

    $('.'+this.master_id+'-legend-labels').off().on({
        'hover': function(e) {
            var hasClass = $(this).hasClass('toggle');
            var name = $(this).attr('data-name');
            var id = '#'+self.master_id+'-'+slugify(name);

            if(hasClass) return;

            switch(e.type) {
                case 'mouseenter':
                    $(this).css({
                        'opacity': 1
                    });
                    d3.select(id).node().__onmouseover(e);
                break;
                case 'mouseleave':
                    $(this).css({
                        'opacity': 0.9
                    });
                    d3.select(id).node().__onmouseout(e)
                break;
                default:
                break;
            }
        },
        'click': function(e) {
            var hasClass = $(this).hasClass('toggle');
            var name = $(this).attr('data-name');
            var id = '#'+self.master_id+'-'+slugify(name);

            if(!hasClass) {
                $(this).css({
                    'opacity': 0.2
                });
                $(this).addClass('toggle');
                $(id).fadeOut();
                self.legend_hidden[id] = name;
            } else {
                $(this).css({
                    'opacity': 1
                });
                $(this).removeClass('toggle');
                $(id).fadeIn();
                delete self.legend_hidden[id];
            }
        }
    });
};

Rubix.PieDonut.prototype.final_draw = function(animate) {
    var self = this;
    if(this.data.length) {
        this.canvas.select('.noData').style('display', 'none');
    }
    var arc = d3.svg.arc();
    arc.innerRadius(this.innerRadius);
    arc.outerRadius(this.outerRadius);

    var pie = d3.layout.pie();
    pie.sort(null);
    pie.value(function(d) {
        return d.value;
    });

    var main = this.root_piedonut_series.selectAll('.arc')
                .data(pie(this.data), function(d) {
                    return d.data.name;
                });

    var g = main.enter().append('g')
                .attr('class', 'arc').style('position', 'relative');

    var color = d3.scale.category20();
    var path = g.attr('id', function(d) {
        return self.master_id+'-'+slugify(d.data.name);
    }).style("fill", function(d, i) { return d.data.color; }).style('stroke', 'white').append("path").attr("d", function(d) {
        return arc({
            startAngle: 0,
            endAngle: 0
        });
    })

    if(animate === 'launch') {
        this.old_pie_data = pie(this.data);
        setTimeout(function() {
            path.transition().attrTween('d', function(d) {
                var i = d3.interpolate({
                    startAngle: 0,
                    endAngle: 0
                }, {
                    startAngle: d.startAngle,
                    endAngle: d.endAngle
                });
                return function(t) {
                    return arc(i(t));
                }
            }).duration(500);
        }, 15);
    } else if(animate === 'add') {
        var t = main.transition().duration(500).each('end', function() {
            self.old_pie_data = pie(self.data);
        });
        t.select('path').attrTween('d', function(d, k) {
            var startAngle = 0;
            var endAngle = 0;
            try {
                startAngle = self.old_pie_data[k].startAngle;
                endAngle = self.old_pie_data[k].endAngle;
            } catch(e) {
                startAngle = self.old_pie_data[self.old_pie_data.length-1].startAngle;
                endAngle = self.old_pie_data[self.old_pie_data.length-1].endAngle;
                // do nothing
            }
            var i = d3.interpolate({
                startAngle: startAngle,
                endAngle: endAngle
            }, {
                startAngle: d.startAngle,
                endAngle: d.endAngle
            });

            if(d.data.hasOwnProperty('_remove')) {
                self.data.splice(k, 1);
            }
            self._setupLegend();
            return function(t) {
                return arc(i(t));
            }
        });
    } else {
        this.old_pie_data = pie(this.data);
        path.attr('d', function(d) {
            return arc(d);
        });
    }

    var mouseover = 'mouseover',
        mousemove = 'mousemove',
        mouseout  = 'mouseout';
    if(this.is_touch_device) {
        mouseover = 'touchstart';
        mousemove = 'touchstart';
        mouseout  = 'touchend';
    }

    var timer;

    g.on(mouseover, function(d) {
        clearTimeout(timer);
        var centroid = arc.centroid(d);
        var h = Math.sqrt(Math.pow(centroid[0], 2) + Math.pow(centroid[1], 2));

        var x = centroid[0]/h * 8;
        var y = centroid[1]/h * 8;
        if(!self.is_touch_device) {
            d3.select(this).transition().duration(150).attr('transform', "translate(" + [x, y] + ")");
        }
    });

    g.on(mousemove, function(d, i) {
        clearTimeout(timer);
        if(self.is_touch_device) {
            var coordinates = d3.touches(this, self.d3_eventSource().changedTouches)[0];
        } else {
            var coordinates = d3.mouse(this);
        }
        self.tooltip.css('display', useTable);
        self.tooltip.css({
            'left': (self.width/2 - self.margin.left/2) + coordinates[0],
            'top' : (self.height/2 - self.margin.top/2) + coordinates[1]
        });
        self.tooltip.html("<div style='color: "+d.data.color+";'><b><span style='font-size: 22px;'>■ </span><span style='position:relative; top: -3px; left: -2px;'>"+d.data.name+" :</span></b> <span style='position:relative; top: -3px; left: -2px;'>"+d.data.value+"</span></div>");

        d3.select(this).style('fill', d.data.color);
    });

    g.on(mouseout, function(d, i) {
        var $this = this;
        if(self.is_touch_device) {
            timer = setTimeout(function() {
                self.tooltip.hide();
            }, 3000);

            setTimeout(function() {
                d3.select($this).style('fill', d.data.color);
            }, 3000);
        } else {
            self.tooltip.hide();
            d3.select($this).style('fill', d.data.color);
            d3.select($this).transition().duration(150).attr('transform', 'translate(0, 0)');
        }
    });

    main.exit().remove();

    for(var i in this.legend_hidden) {
        $(i).hide();
    }
};

Rubix.PieDonut.prototype.removePoint = function(ref) {
    var removed = false;
    for(var i=0; i<this.data.length; i++) {
        if(this.data[i].name === ref) {
            removed = true;
            this.data[i].value = 0;
            this.data[i]._remove = true;
            break;
        }
    }

    if(!removed) return;

    this.final_draw('add');
};

Rubix.PieDonut.prototype.updatePoint = function(data) {
    this.addPoint(data);
};

Rubix.PieDonut.prototype.addPoint = function(data) {
    this.data_changed = true;
    var updated = false;
    for(var i=0; i<this.data.length; i++) {
        if(this.data[i].name === data.name) {
            updated = true;
            this.data[i].value = +data.value;
            break;
        }
    }

    if(!updated) {
        this.data.push(data);
    }

    this.final_draw('add');
};

window.Rubix = window.Rubix || {};

/**
 * @param {Rubix} rubix
 * @param {Object} opts
 * @constructor
 */
Rubix.LineSeries = function(rubix, opts) {
    this.opts = opts;
    this.opts.color = this.opts.color || 'steelblue';
    this.opts.marker = this.opts.marker || 'circle';
    this.opts.scatter = this.opts.scatter || false;
    this.opts.noshadow = this.opts.noshadow || false;
    this.show_markers = this.opts.show_markers;
    this.opts.strokewidth = this.opts.strokewidth || 1;

    if(!this.opts.hasOwnProperty('name')) throw new Error('LineSeries should have a \'name\' property');

    this.name = this.opts.name;

    this.chart_hidden = false;
    this.temp_stack = [];

    this.setup = false;
    this._setup(rubix);
};

/**
 * @param {Rubix} rubix
 * @private
 */
Rubix.LineSeries.prototype._setup = function(rubix) {
    this.rubix = rubix;

    this.root   = this.rubix.root;
    this.data   = this.rubix.data;
    this.width  = this.rubix.width;
    this.height = this.rubix.height;
    this.line_series = this.rubix.root_line_series;
    this.show_markers = (this.show_markers === undefined) ? this.rubix.show_markers : this.show_markers;

    this.master_detail = this.rubix.master_detail;

    if(this.master_detail) {
        this.md_root = this.rubix.md_root;
    }

    if(!this.id) {
        this.id = this.rubix.uid('line');
    }

    /** separator */
    var self = this;
    this.line = d3.svg.line();
    this.line.defined(function(d) {
        return d.x !== null && d.y !== null;
    });
    this.line.x(function(d) {
        if(self.rubix.opts.invertAxes) {
            return self.rubix.x(d.y);
        }

        if(self.rubix.axis.x.range === 'column' || self.rubix.axis.x.range === 'bar') {
            return self.rubix.x(d.x) + self.rubix.x.rangeBand()/2;
        }
        return self.rubix.x(d.x);
    });
    this.line.y(function(d) {
        if(self.rubix.opts.invertAxes) {
            if(self.rubix.axis.y.range === 'column' || self.rubix.axis.y.range === 'bar') {
                return self.rubix.y(d.x) + self.rubix.y.rangeBand()/2;
            }
            return self.rubix.y(d.x);
        }
        return self.rubix.y(d.y);
    });
    this.line.interpolate(this.rubix.interpolate);

    if(this.master_detail) {
        this.master_line = d3.svg.line();
        this.master_line.defined(function(d) {
            return d.x !== null && d.y !== null;
        });
        this.master_line.x(function(d) {
            if(self.rubix.opts.invertAxes) {
                return self.rubix.x2(d.y);
            }
            return self.rubix.x2(d.x);
        });
        this.master_line.y(function(d) {
            if(self.rubix.opts.invertAxes) {
                return self.rubix.y2(d.x);
            }
            return self.rubix.y2(d.y);
        });
        this.master_line.interpolate(this.rubix.interpolate);
    }
};

// Alias for draw
Rubix.LineSeries.prototype.redraw = function(rubix) {
    this._setup(rubix);
    this.draw();
};

// Alias for draw
Rubix.LineSeries.prototype.noRedraw = function(rubix) {
    this._setup(rubix);
    this.draw(true);
};

/**
 * @param {Array|Object} data
 */
Rubix.LineSeries.prototype.addData = function(data) {
    this.rubix.data_changed = true;
    if(!(data instanceof Array)) {
        if(!(data instanceof Object)) {
            throw new Error("Data must be an array or object");
        } else {
            if(!(data.hasOwnProperty('x') || data.hasOwnProperty('y'))) {
                throw new Error("Object must be in the form: {x: ..., y: ...}");
            }

            data = [data];
        }
    }

    if(!data.length) return;

    if(!this.rubix.opts.noSort) {
        data.sort(function(a, b) {
            if(a.x > b.x) {
                return 1;
            } else if(a.x === b.x) {
                return 0;
            } else {
                return -1;
            }
        });
    }

    this.data[this.name] = data;

    this.rubix.resetAxis(false);
    this.rubix.forceRedraw();
    this._animate_draw();
};

Rubix.LineSeries.prototype.draw = function(forced) {
    if(!this.name) return;
    if(!this.data) return;
    if(!this.data.hasOwnProperty(this.name)) return;
    if(!this.data[this.name].length) return;

    var self = this;

    var isConstructed = this.line_series.selectAll('.'+this.id)[0].length;

    if(!isConstructed) {
        this.line_series.selectAll('.'+this.id+'.clipped').remove();
        if(!this.opts.scatter) {
            if(!this.opts.noshadow) {
                this.strokePath1 = this.line_series.append('path').attr('class', this.id+' line').datum(this.data[this.name]).attr('d', this.line).attr('stroke', 'black').attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-width', 5 * this.opts.strokewidth).attr('stroke-opacity', 0.05000000000000001).attr('transform', 'translate(1,1)');
                this.strokePath2 = this.line_series.append('path').attr('class', this.id+' line').datum(this.data[this.name]).attr('d', this.line).attr('stroke', 'black').attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-width', 3 * this.opts.strokewidth).attr('stroke-opacity', 0.1).attr('transform', 'translate(1,1)');
                this.strokePath3 = this.line_series.append('path').attr('class', this.id+' line').datum(this.data[this.name]).attr('d', this.line).attr('stroke', 'black').attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-width', 1 * this.opts.strokewidth).attr('stroke-opacity', 0.15000000000000002).attr('transform', 'translate(1,1)');                
            }
            this.linePath = this.line_series.append('path').datum(this.data[this.name]).attr('class', this.id+' line').attr('stroke', this.opts.color).attr('fill', 'none').attr('stroke-linecap', 'round').attr('d', this.line).attr('stroke-width', 2 * this.opts.strokewidth);
        }

        if(this.master_detail) {
            if(!this.opts.scatter) {
                this.md_root.select('.md-layers > .md_line_series').selectAll('.'+this.id+'.clipped').remove();
                this.masterLinePath = this.md_root.select('.md-layers > .md_line_series').append('path').datum(this.data[this.name]).attr('class', this.id+' line').attr('stroke', this.opts.color).attr('fill', 'none').attr('stroke-linecap', 'round').attr('d', this.master_line).attr('stroke-width', 2 * this.opts.strokewidth);
                this.masterLinePath.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
                this.masterLinePath.classed('clipped', true);                
            } else {
                this.md_root.select('.md-layers > .md_line_series').attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
                var self = this;
                var datum = this.data[this.name];
                this.markers_master = this.md_root.select('.md-layers > .md_line_series').selectAll('.'+this.id+'-marker');
                switch(this.opts.marker) {
                    case 'circle':
                    case 'cross':
                    case 'square':
                    case 'diamond':
                    case 'triangle-up':
                    case 'triangle-down':
                        var symbol = d3.svg.symbol();
                        symbol.type(this.opts.marker);

                        var symbolType = this.markers_master.data(datum);
                        symbolType.enter().append('path')
                              .attr('d', symbol)
                              .attr('class', this.id + '-marker')
                              .attr('fill', this.opts.color)
                              .style('display', function(d) {
                                    if(d.y === null) {
                                        return 'none';
                                    }
                                    return null;
                              })
                              .attr('stroke', 'none')
                              .attr('transform', function(d) {
                                    var val = d.y;
                                    if(isNaN(val)) {
                                        val = 0;
                                    }
                                    if(self.rubix.opts.invertAxes) {
                                        var _y = self.rubix.y(d.x);
                                        var _x = self.rubix.x(val);
                                        if(self.rubix.axis.y.range === 'column' || self.rubix.axis.y.range === 'bar') {
                                            _y += self.rubix.y.rangeBand()/2;
                                        }
                                    } else {
                                        var _y = self.rubix.y2(val);
                                        var _x = self.rubix.x2(d.x);
                                        if(self.rubix.axis.x.range === 'column' || self.rubix.axis.x.range === 'bar') {
                                            _x += self.rubix.x.rangeBand()/2;
                                        }
                                    }
                                    return 'translate('+_x+','+_y+')';
                              });
                        symbolType.exit().remove();
                    break;
                    default:
                        throw new Error('Unknown marker type : ' + this.opts.marker);
                    break;
                }
            }

            if(this.dataChanged) {
                this.rubix.resetExtent();
                this.dataChanged = false;
            }

            if(!this.opts.scatter) {
                if(!this.opts.noshadow) {
                    this.strokePath1.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
                    this.strokePath2.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
                    this.strokePath3.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
                }
                this.linePath.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');

                if(!this.opts.noshadow) {
                    this.strokePath1.classed('clipped', true);
                    this.strokePath2.classed('clipped', true);
                    this.strokePath3.classed('clipped', true);                    
                }
                this.linePath.classed('clipped', true);
            }
        }

        this.setup = true;
    } else {
        this.rubix.runCommand('globalRedraw');
    }

    this.rubix.resetFocus(forced);
};

/**
 * @param {Array|Object} data
 */
Rubix.LineSeries.prototype.update = function(data) {
    if(!(data instanceof Array)) {
        if(!(data instanceof Object)) {
            throw new Error("Data must be an array or object");
        } else {
            if(!(data.hasOwnProperty('x') || data.hasOwnProperty('y'))) {
                throw new Error("Object must be in the form: {x: ..., y: ...}");
            }

            data = [data];
        }
    }

    if(!this.rubix.opts.noSort) {
        data.sort(function(a, b) {
            if(a.x > b.x) {
                return 1;
            } else if(a.x === b.x) {
                return 0;
            } else {
                return -1;
            }
        });
    }

    this.data[this.name] = data;

    if(this.setup) {
        this._animate_draw();
    } else {
        this.rubix.resetAxis(false);
        this.rubix.forceRedraw();
    }
};

/**
 * Alias for addPoint
 * @param {Object} data
 * @param {?Boolean} shift
 * @param {?Boolean} noRedraw
 */
Rubix.LineSeries.prototype.updatePoint = function(data, shift, noRedraw) {
    this.addPoint(data, shift, noRedraw);
};

/**
 * @param {*} ref
 * @param {?Boolean} noRedraw
 */
Rubix.LineSeries.prototype.removePoint = function(ref, noRedraw) {
    if(this.chart_hidden) {
        this.temp_stack.push({
            type: 'removePoint',
            ref: ref
        });
        return;
    }

    if(!this.data[this.name]) {
        this.data[this.name] = [];
    }

    var removed = false;
    for(var i=0; i<this.data[this.name].length; i++) {
        if(this.data[this.name][i].x === ref) {
            this.data[this.name].splice(i, 1);
            removed = true;
            break;
        }
    }

    if(this.master_detail) {
        this.dataChanged = true;
    }

    if(noRedraw) return;

    if(this.setup) {
        this._animate_draw();
    } else {
        this.rubix.resetAxis(true);
        this.rubix.forceRedraw();
    }
};

/**
 * @param {Object} data
 * @param {?Boolean} shift
 * @param {?Boolean} noRedraw
 */
Rubix.LineSeries.prototype.addPoint = function(data, shift, noRedraw) {
    this.rubix.data_changed = true;
    if(!(data instanceof Object) || (data instanceof Array)) {
        throw new Error("Object required for addPoint");
    }
    if(!(data.hasOwnProperty('x') || data.hasOwnProperty('y'))) {
        throw new Error("Object must be in the form: {x: ..., y: ...}");
    }

    if(this.chart_hidden) {
        this.temp_stack.push({
            type: 'addPoint',
            data: data,
            shift: shift
        });
        return;
    }

    if(!this.data[this.name]) {
        this.data[this.name] = [];
    }

    var added = false;
    for(var i=0; i<this.data[this.name].length; i++) {
        if(this.data[this.name][i].x === data.x) {
            this.data[this.name][i].y = data.y;
            added = true;
            break;
        }
    }

    if(!added) {
        this.data[this.name].push(data);
    }

    this.data[this.name].sort(function(a, b) {
        if(a.x > b.x) {
            return 1;
        } else if(a.x === b.x) {
            return 0;
        } else {
            return -1;
        }
    });

    if(this.rubix.opts.interval) {
        if(this.rubix.opts.interval < this.data[this.name].length) {
            this.data[this.name].shift();
        }
    } else {
        if(shift) {
            this.data[this.name].shift();
        }
    }

    if(this.master_detail) {
        this.dataChanged = true;
    }

    if(noRedraw) return;
    if(this.setup) {
        this._animate_draw();
    } else {
        this.rubix.resetAxis(true);
        this.rubix.forceRedraw();
    }
};

Rubix.LineSeries.prototype._animate_draw = function() {
    var text = this.root.selectAll('.y.axis').selectAll('text')[0];
    var width = [];
    for(var i=0; i<text.length; i++) {
        width.push(text[i].getBBox().width);
    }
    var origMaxWidth = d3.max(width);

    this.rubix.resetAxis(true);

    this.rubix.runCommand('globalRedraw');

    text = this.root.selectAll('.y.axis').selectAll('text')[0];
    width = [];
    for(var i=0; i<text.length; i++) {
        width.push(text[i].getBBox().width);
    }

    var maxWidth = d3.max(width);

    this.rubix.marginLeft(maxWidth);
    this.rubix.resetFocus();
};

Rubix.LineSeries.prototype.hidden = function() {
    this.chart_hidden = true;
};

Rubix.LineSeries.prototype.show = function() {
    this.chart_hidden = false;
    while(this.temp_stack.length>1) {
        var rawData = this.temp_stack.shift();
        if(rawData.type === 'addPoint') {
            this.addPoint(rawData.data, rawData.shift, true);
        } else {
            this.removePoint(rawData.ref);
        }
    }
    if(this.temp_stack.length) {
        var rawData = this.temp_stack.shift();
        if(rawData.type === 'addPoint') {
            this.addPoint(rawData.data, rawData.shift, true);
        } else {
            this.removePoint(rawData.ref);
        }
    }
};

Rubix.LineSeries.prototype.globalRedraw = function(rubix) {
    this.line_series.selectAll('.'+this.id+'.line').attr('d', this.line);
};

Rubix.LineSeries.prototype.forceRedraw = function(rubix) {
    this.redraw(rubix);
};

Rubix.LineSeries.prototype.on_complete_draw = function() {
    if(!this.setup) return;
    var self = this;
    var datum = this.data[this.name];
    if(this.opts.marker !== undefined && this.show_markers) {
        if(this.master_detail) {
            this.rubix.symbols.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip-symbols)');
        }
        this.markers = this.rubix.symbols.selectAll('.'+this.id+'-marker');
        switch(this.opts.marker) {
            case 'circle':
            case 'cross':
            case 'square':
            case 'diamond':
            case 'triangle-up':
            case 'triangle-down':
                var symbol = d3.svg.symbol();
                symbol.type(this.opts.marker);

                var symbolType = this.markers.data(datum);
                symbolType.enter().append('path')
                      .attr('d', symbol)
                      .attr('class', this.id + '-marker')
                      .attr('fill', this.opts.color)
                      .style('display', function(d) {
                            if(d.y === null) {
                                return 'none';
                            }
                            return null;
                      })
                      .attr('stroke', 'white')
                      .attr('transform', function(d) {
                            var val = d.y;
                            if(isNaN(val)) {
                                val = 0;
                            }
                            if(self.rubix.opts.invertAxes) {
                                var _y = self.rubix.y(d.x);
                                var _x = self.rubix.x(val);
                                if(self.rubix.axis.y.range === 'column' || self.rubix.axis.y.range === 'bar') {
                                    _y += self.rubix.y.rangeBand()/2;
                                }
                            } else {
                                var _y = self.rubix.y(val);
                                var _x = self.rubix.x(d.x);
                                if(self.rubix.axis.x.range === 'column' || self.rubix.axis.x.range === 'bar') {
                                    _x += self.rubix.x.rangeBand()/2;
                                }
                            }
                            return 'translate('+_x+','+_y+')';
                      });
                symbolType.exit().remove();
            break;
            default:
                throw new Error('Unknown marker type : ' + this.opts.marker);
            break;
        }
    }
};

Rubix.LineSeries.prototype.setupFocus = function() {
    if(!this.setup) return;
    if(this.focus) this.focus.remove();
    this.focus = this.rubix.focus_group.append('g');
    this.focus.attr('class', 'focus');
    this.focus.style('display', 'none');
    switch(this.opts.marker) {
        case 'circle':
        case 'cross':
        case 'square':
        case 'diamond':
        case 'triangle-up':
        case 'triangle-down':
            var symbol = d3.svg.symbol();
            symbol.type(this.opts.marker);
            var path = this.focus.append('path').attr('d', symbol).attr('fill', this.opts.color).attr('stroke', 'white').attr('stroke-width', 2);
        break;
        default:
            throw new Error('Unknown marker type : ' + this.opts.marker);
        break;
    }
};

Rubix.LineSeries.prototype.on_focus = function() {
    if(!this.setup) return;
    this.linePath.attr('stroke-width', 2 * this.opts.strokewidth);
};

Rubix.LineSeries.prototype.off_focus = function() {
    if(!this.setup) return;
    this.linePath.attr('stroke-width', 2 * this.opts.strokewidth);
};
window.Rubix = window.Rubix || {};

/**
 * @param {Rubix} rubix
 * @param {Object} opts
 * @constructor
 */
Rubix.ColumnSeries = function(rubix, opts) {
    this.type = 'column_series';
    this.opts = opts;
    this.opts.color = this.opts.color || 'steelblue';
    this.opts.marker = this.opts.marker || 'circle';
    this.opts.nostroke = this.opts.nostroke || '';
    this.opts.fillopacity = this.opts.fillopacity || 0.85;
    this.show_markers = this.opts.show_markers;

    if(!this.opts.hasOwnProperty('name')) throw new Error('ColumnSeries should have a \'name\' property');

    this.name = this.opts.name;

    this.chart_hidden = false;
    this.temp_stack = [];

    this.setup = false;
    this.last_stack = [];
    this.last_stack_name = '';
    this.last_stack_added = false;

    this.count = 0;

    this._setup(rubix);
};

/**
 * @param {Rubix} rubix
 * @private
 */
Rubix.ColumnSeries.prototype._setup = function(rubix) {
    this.rubix = rubix;
    this.rubix.stacked = true;

    this.root   = this.rubix.root;
    this.data   = this.rubix.data;
    this.width  = this.rubix.width;
    this.height = this.rubix.height;
    this.stack  = this.rubix.column_stack;
    this.offset = this.rubix.column_offset;
    this.cb_series = this.rubix.root_cb_series;
    this.column_stack = this.rubix.column_stack_data;
    this.show_markers = (this.show_markers === undefined) ? this.rubix.show_markers : this.show_markers;

    this.grouped = this.rubix.grouped;

    if(!this.id) {
        this.id = this.rubix.uid('stacked-column');
    }
};

// Alias for draw
Rubix.ColumnSeries.prototype.redraw = function(rubix) {
    this._setup(rubix);
    this.draw();
};

Rubix.ColumnSeries.prototype.noRedraw = function(rubix) {
    this._setup(rubix);
    this.draw(true);
};

/**
 * @param {Array|Object} data
 */
Rubix.ColumnSeries.prototype.addData = function(data) {
    this.rubix.data_changed = true;
    if(!(data instanceof Array)) {
        if(!(data instanceof Object)) {
            throw new Error("Data must be an array or object");
        } else {
            if(!(data.hasOwnProperty('x') || data.hasOwnProperty('y'))) {
                throw new Error("Object must be in the form: {x: ..., y: ...}");
            }

            data = [data];
        }
    }

    if(!data.length) return;

    if(!this.rubix.opts.noSort) {
        data.sort(function(a, b) {
            if(a.x > b.x) {
                return 1;
            } else if(a.x === b.x) {
                return 0;
            } else {
                return -1;
            }
        });
    }

    var maxLen = 0, columns = [];
    for(var i in this.data) {
        var len = this.data[i].length;
        if(len > maxLen) {
            maxLen = len;
            columns = [];
            for(var k=0; k<maxLen; k++) {
                columns.push(this.data[i][k].x);
            }
        }
    }

    this.rubix.maxLen = maxLen;

    this.data[this.name] = data;

    for(var i in this.data) {
        var len = this.data[i].length;
        if(len < maxLen) {
            var dup_columns = columns.concat();
            for(var j=0; j<this.data[i].length; j++) {
                var column_index = dup_columns.indexOf(this.data[i][j].x);
                dup_columns.splice(column_index, 1);
            }
            for(var j=0; j<dup_columns.length; j++) {
                this.rubix.charts[i].addPoint({
                    x: dup_columns[j],
                    y: null
                });
            }
        }
    }

    this.column_stack.push({
        key: this.name,
        color: this.opts.color,
        marker: this.opts.marker,
        values: this.data[this.name],
        orderKey: this.column_stack.length
    });

    this.rubix.resetAxis();
    this.rubix.forceRedraw();
    this._animate_draw();
};

Rubix.ColumnSeries.prototype._createRect = function() {
    var self = this;
    var strokecolor = 'white';
    if(this.opts.nostroke) strokecolor = 'none';
    var rect = this.columnGroup.selectAll('rect').data(function(d) { return d.values; }).enter().append('rect').attr('stroke', strokecolor);
    if(this.grouped) {
        if(this.rubix.opts.invertAxes) {
            rect.attr('x', function(d, i, j) {
                var val = self.rubix.x(0);
                if(isNaN(val)) {
                    return null;
                }
                return val;
            });
            rect.attr('y', function(d, i, j) {
                return self.rubix.y(d.x) + self.rubix.y.rangeBand() / self.layers.length * j;
            });
            rect.attr('class', function(d, i, j) {
                return 'column-' + ((self.rubix.y(d.x) + (self.rubix.y.rangeBand()/self.layers.length) * (self.layers.length-1)) + self.rubix.y.rangeBand()/(2*self.layers.length));
            });
            rect.attr("width", function(d) {
                var val = Math.abs(self.rubix.x(d.y) - self.rubix.x(0));
                if(isNaN(val)) {
                    return null;
                }
                return val;
            });
            rect.attr('height', self.rubix.y.rangeBand() / self.layers.length);
            rect.attr('transform', function(d) {
                var val = self.rubix.x(d.y_new) - self.rubix.x(0);
                if(d.y < 0) {
                    return 'translate('+(-Math.abs(val))+',0)';
                } else {
                    return 'translate(0,0)';
                }
            });
        } else {
            rect.attr('x', function(d, i, j) {
                return self.rubix.x(d.x) + self.rubix.x.rangeBand() / self.layers.length * j;
            });
            rect.attr('y', function(d) {
                var val = self.rubix.y(0);
                if(isNaN(val)) {
                    return null;
                }
                return val;
            });
            rect.attr('class', function(d, i, j) {
                return 'column-' + ((self.rubix.x(d.x) + (self.rubix.x.rangeBand()/self.layers.length) * (self.layers.length-1)) + self.rubix.x.rangeBand()/(2*self.layers.length));
            });
            rect.attr("width", self.rubix.x.rangeBand() / self.layers.length)
            rect.attr('height', function(d) {
                var val = Math.abs(self.rubix.y(d.y) - self.rubix.y(0));
                if(isNaN(val)) {
                    return null;
                }
                return val;
            });
            rect.attr('transform', function(d) {
                var val = self.rubix.y(d.y_new) - self.rubix.y(0);
                if(d.y > 0) {
                    return 'translate(0,'+(-Math.abs(val))+')';
                } else {
                    return 'translate(0,0)';
                }
            });            
        }
    } else {
        if(this.rubix.opts.invertAxes) {
            rect.attr('x', function(d) {
                var val = self.rubix.x(d.y0);
                if(isNaN(val)) {
                    return null;
                }
                return val;
            });
            rect.attr('y', function(d) {
                return self.rubix.y(d.x) || 0;
            });
            rect.attr('class', function(d) {
                return 'column-' + (self.rubix.y(d.x) + self.rubix.y.rangeBand()/2);
            });
            rect.attr("width", function(d) {
                var val = Math.abs(self.rubix.x(d.y0)-self.rubix.x(d.y+d.y0));
                if(isNaN(val)) {
                    return null;
                }
                return val;
            });
            rect.attr('height', self.rubix.y.rangeBand());
            rect.attr('transform', function(d) {
                if(d.y < 0) {
                    var val = Math.abs(self.rubix.x(d.y0)-self.rubix.x(d.y+d.y0));
                    return 'translate('+(-val)+',0)';
                }
                return null;
            });
        } else {
            rect.attr('x', function(d) {
                return self.rubix.x(d.x);
            });
            rect.attr('y', function(d) {
                var val = self.rubix.y(d.y0);
                if(isNaN(val)) {
                    return null;
                }
                return val;
            });
            rect.attr('class', function(d) {
                return 'column-' + ((self.rubix.x(d.x) + self.rubix.x.rangeBand()/2));
            });
            rect.attr("width", self.rubix.x.rangeBand())
            rect.attr('height', function(d) {
                var val = Math.abs(self.rubix.y(d.y0)-self.rubix.y(d.y+d.y0));
                if(isNaN(val)) {
                    return null;
                }
                return val;
            });
            rect.attr('transform', function(d) {
                if(d.y > 0) {
                    var val = Math.abs(self.rubix.y(d.y0)-self.rubix.y(d.y+d.y0));
                    return 'translate(0,'+(-val)+')';
                }
                return null;
            });
        }
    }
};

Rubix.ColumnSeries.prototype.draw = function(forced) {
    try {
        if(!this.name) return;
        if(!this.data) return;
        if(!this.data.hasOwnProperty(this.name)) return;
        if(!this.data[this.name].length) return;

        var oldLayers = this.layers;

        try {
            this.layers = this.stack(this.column_stack);
        } catch(e) {
            // data un-available. retaining old layer.
            this.layers = oldLayers;
        }

        if(!this.grouped) {
            var max = this.rubix.maxLen;
            for(var i=0; i<max; i++) {
                var x = this.layers[0].values[i].x;
                var ceiling = null;
                for(var j=0; j<this.layers.length; j++) {
                    for(var k=0; k<max; k++) {
                        try {
                            if(this.layers[j].values[k].x === x) {
                                if(this.layers[j].values[k].y >= 0) {
                                    if(this.layers[j].values[k].y === null) {
                                        this.layers[j].values[k].y0 = null;
                                    } else {
                                        if(ceiling === null) ceiling = 0;
                                        this.layers[j].values[k].y0 = ceiling;
                                        ceiling += this.layers[j].values[k].y;
                                    }
                                }
                                break;
                            }
                        } catch(e) {
                            this.layers[j].values.push({
                                x: x,
                                y: null,
                                y0: null,
                                y_new: null
                            });
                        }
                    }
                }
                ceiling = null;
                for(var j=this.layers.length-1; j>=0; j--) {
                    for(var k=0; k<max; k++) {
                        try {
                            if(this.layers[j].values[k].x === x) {
                                if(this.layers[j].values[k].y < 0) {
                                    if(this.layers[j].values[k].y === null) {
                                        this.layers[j].values[k].y0 = null;
                                    } else {
                                        if(ceiling === null) ceiling = 0;
                                        this.layers[j].values[k].y0 = -ceiling;
                                        ceiling += Math.abs(this.layers[j].values[k].y);
                                    }
                                }
                                break;
                            }
                        } catch(e) {
                            this.layers[j].values.push({
                                x: x,
                                y: null,
                                y0: null,
                                y_new: null
                            });
                        }
                    }
                }
            }
        }

        var self = this;
        var isConstructed = this.cb_series.selectAll('.'+this.id)[0].length;
        if(!isConstructed) {
            try {
                this.cb_series.selectAll('.column-layer').remove();
                var p = this.cb_series.selectAll('.column-layer').data(this.layers, function(d, i) {
                    if(d.key === self.name) {
                        self.count = i;
                    }
                    return d.key;
                });
                
                this.columnGroup = p.enter().append('g');
                this.columnGroup.attr('class', 'column-layer')
                           .attr('fill', function(d) { return d.color; }).attr('fill-opacity', this.opts.fillopacity);

                this._createRect();

                p.exit().remove();
            } catch(e) {
                // do nothing
            }
            this.setup = true;
        } else {
            this.rubix.runCommand('globalRedraw');
        }

        this.rubix.resetFocus(forced);
    } catch(e) {
        // do nothing
    }
};

/**
 * @param {Array|Object} data
 */
Rubix.ColumnSeries.prototype.update = function(data) {
    if(!(data instanceof Array)) {
        if(!(data instanceof Object)) {
            throw new Error("Data must be an array or object");
        } else {
            if(!(data.hasOwnProperty('x') || data.hasOwnProperty('y'))) {
                throw new Error("Object must be in the form: {x: ..., y: ...}");
            }

            data = [data];
        }
    }

    if(!this.rubix.opts.noSort) {
        data.sort(function(a, b) {
            if(a.x > b.x) {
                return 1;
            } else if(a.x === b.x) {
                return 0;
            } else {
                return -1;
            }
        });
    }

    this.data[this.name] = data;

    if(this.setup) {
        this._animate_draw();
    } else {
        this.rubix.resetAxis(true);
        this.rubix.forceRedraw();
    }
};

/**
 * @param {Object} data
 * @param {?Boolean} shift
 * @param {?Boolean} noRedraw
 */
Rubix.ColumnSeries.prototype.updatePoint = function(data, shift, noRedraw) {
    this.addPoint(data, shift, noRedraw);
};

/**
 * @param {*} ref
 * @param {?Boolean} noRedraw
 */
Rubix.ColumnSeries.prototype.removePoint = function(ref, noRedraw) {
    if(this.chart_hidden) {
        this.temp_stack.push({
            type: 'removePoint',
            ref: ref
        });
        return;
    }

    if(!this.data[this.name]) {
        this.data[this.name] = [];
    }

    var removed = false, pos = 0;
    for(var i=0; i<this.data[this.name].length; i++) {
        if(this.data[this.name][i].x === ref) {
            this.data[this.name][i].y = null;
            this.data[this.name][i].y0 = null;
            this.data[this.name][i].y_new = null;
            pos = i;
            removed = true;
            break;
        }
    }

    if(!removed) return;

    var found = false;
    for(var i=0; i<this.column_stack.length; i++) {
        var st = this.column_stack[i];
        try {
            if(st.values[pos].x === ref) {
                if(st.values[pos].y !== null) {
                    found = true;
                    break;
                }
            }
        } catch(e) {
            // do nothing
        }
    }

    if(!found) {
        for(var i=0; i<this.column_stack.length; i++) {
            this.column_stack[i].values.splice(pos, 1);
        }
    }

    var maxLen = 0;
    for(var i in this.data) {
        var len = this.data[i].length;
        if(len > maxLen) {
            maxLen = len;
        }
    }

    this.rubix.maxLen = maxLen;

    if(noRedraw) return;

    this.rubix.resetAxis();
    this.rubix.forceRedraw();
    this._animate_draw();
};

/**
 * @param {Object} data
 * @param {?Boolean} shift
 * @param {?Boolean} noRedraw
 */
Rubix.ColumnSeries.prototype.addPoint = function(data, shift, noRedraw) {
    this.rubix.data_changed = true;
    if(!(data instanceof Object) || (data instanceof Array)) {
        throw new Error("Object required for addPoint");
    }
    if(!(data.hasOwnProperty('x') || data.hasOwnProperty('y'))) {
        throw new Error("Object must be in the form: {x: ..., y: ...}");
    }

    if(this.chart_hidden) {
        this.temp_stack.push({
            type: 'addPoint',
            data: data,
            shift: shift
        });
        return;
    }

    if(!this.data[this.name]) {
        this.data[this.name] = [];
    }

    var added = false;
    for(var i=0; i<this.data[this.name].length; i++) {
        if(this.data[this.name][i].x === data.x) {
            this.data[this.name][i].y = data.y;
            added = true;
            break;
        }
    }

    if(!added) {
        this.data[this.name].push(data);
    }

    this.data[this.name].sort(function(a, b) {
        if(a.x > b.x) {
            return 1;
        } else if(a.x === b.x) {
            return 0;
        } else {
            return -1;
        }
    });

    added = false;
    for(var i=0; i<this.column_stack.length; i++) {
        if(this.column_stack[i].key === this.name) {
            added = true;
            break;
        }
    }

    if(this.rubix.opts.interval) {
        if(this.rubix.opts.interval < this.data[this.name].length) {
            this.data[this.name].shift();
        }
    } else {
        if(shift) {
            this.data[this.name].shift();
        }
    }

    var maxLen = 0, columns = [];
    for(var i in this.data) {
        var len = this.data[i].length;
        if(len > maxLen) {
            maxLen = len;
            columns = [];
            for(var k=0; k<maxLen; k++) {
                columns.push(this.data[i][k].x);
            }
        }
    }

    this.rubix.maxLen = maxLen;

    for(var i in this.data) {
        var len = this.data[i].length;
        if(len < maxLen) {
            var dup_columns = columns.concat();
            for(var j=0; j<this.data[i].length; j++) {
                var column_index = dup_columns.indexOf(this.data[i][j].x);
                dup_columns.splice(column_index, 1);
            }
            for(var j=0; j<dup_columns.length; j++) {
                this.rubix.charts[i].addPoint({
                    x: dup_columns[j],
                    y: null
                });
            }
        }
    }

    if(noRedraw) return;

    this.rubix.resetAxis();
    this.rubix.forceRedraw();
    this._animate_draw();
};

Rubix.ColumnSeries.prototype._animate_draw = function() {
    try {
        var text = this.root.selectAll('.y.axis').selectAll('text')[0];
        var width = [];
        for(var i=0; i<text.length; i++) {
            width.push(text[i].getBBox().width);
        }
        var origMaxWidth = d3.max(width);

        this.rubix.resetAxis(true);

        this.rubix.runCommand('globalRedraw');

        text = this.root.selectAll('.y.axis').selectAll('text')[0];
        width = [];
        for(var i=0; i<text.length; i++) {
            width.push(text[i].getBBox().width);
        }

        var maxWidth = d3.max(width);

        this.rubix.marginLeft(maxWidth);
        this.rubix.resetFocus();
    } catch(e) {
        // do nothing
    }
};

Rubix.ColumnSeries.prototype.hidden = function() {
    this.chart_hidden = true;
};

Rubix.ColumnSeries.prototype.show = function() {
    this.chart_hidden = false;
    while(this.temp_stack.length>1) {
        var rawData = this.temp_stack.shift();
        if(rawData.type === 'addPoint') {
            this.addPoint(rawData.data, rawData.shift, true);
        } else {
            this.removePoint(rawData.ref);
        }
    }
    if(this.temp_stack.length) {
        var rawData = this.temp_stack.shift();
        if(rawData.type === 'addPoint') {
            this.addPoint(rawData.data, rawData.shift, true);
        } else {
            this.removePoint(rawData.ref);
        }
    }
};


Rubix.ColumnSeries.prototype.globalRedraw = function(rubix) {
    // do nothing
};

Rubix.ColumnSeries.prototype.forceRedraw = function(rubix) {
    this.redraw(rubix);
};

Rubix.ColumnSeries.prototype.on_complete_draw = function() {
    if(!this.setup) return;
    var strokecolor = 'white';
    var self = this;
    if(this.opts.marker !== undefined && this.show_markers) {
        this.markers = this.rubix.symbols;

        this.markers.selectAll('.column-symbols').remove();
        var p = this.markers.selectAll('.column-symbols').data(this.layers, function(d) {
            return d.key;
        });
        
        var symbolGroup = p.enter().append('g');
        symbolGroup.attr('class', 'column-symbols');

        switch(this.opts.marker) {
            case 'circle':
            case 'cross':
            case 'square':
            case 'diamond':
            case 'triangle-up':
            case 'triangle-down':
                var symbolPath = symbolGroup.selectAll('path').data(function(d) {
                    for(var i=0; i<d.values.length; i++) {
                        d.values[i].marker = d.marker;
                        d.values[i].color = d.color;
                    }
                    return d.values;
                }).enter().append('path');
                symbolPath
                      .attr('d', function(d) {
                            var symbol = d3.svg.symbol();
                            symbol.type(d.marker);
                            return symbol();
                      })
                      .attr('fill', function(d) {
                            return d.color;
                      })
                      .style('display', function(d) {
                            if(self.rubix.column_offset === 'expand') {
                                if(d.y_new === 0 && d.y0 === 1) {
                                    return 'none';
                                }
                                return null;
                            }
                            if(d.y_new === null) {
                                return 'none';
                            }
                            return null;
                      })
                      .attr('stroke', strokecolor)
                      if(this.rubix.opts.invertAxes) {
                          symbolPath.attr('transform', function(d, i, j) {
                                var val = d.y0 + d.y_new;
                                if(isNaN(val)) {
                                    val = 0;
                                }
                                var _y = self.rubix.x(val);
                                if(self.grouped) {
                                    _y = self.rubix.x(d.y_new);
                                }
                                var _x = self.rubix.y(d.x) + self.rubix.y.rangeBand()/2;
                                if(self.grouped) {
                                    _x = (self.rubix.y(d.x) + (self.rubix.y.rangeBand()/self.layers.length) * j) + self.rubix.y.rangeBand()/(2*self.layers.length);
                                }
                                return 'translate('+_y+','+_x+')';
                          });
                      } else {
                          symbolPath.attr('transform', function(d, i, j) {
                                var val = d.y0 + d.y_new;
                                if(isNaN(val)) {
                                    val = 0;
                                }
                                var _y = self.rubix.y(val);
                                if(self.grouped) {
                                    _y = self.rubix.y(d.y_new);
                                }
                                var _x = self.rubix.x(d.x) + self.rubix.x.rangeBand()/2;
                                if(self.grouped) {
                                    _x = (self.rubix.x(d.x) + (self.rubix.x.rangeBand()/self.layers.length) * j) + self.rubix.x.rangeBand()/(2*self.layers.length);
                                }
                                return 'translate('+_x+','+_y+')';
                          });
                      }
                p.exit().remove();
            break;
            default:
                throw new Error('Unknown marker type : ' + this.opts.marker);
            break;
        }
    }
};

Rubix.ColumnSeries.prototype.setupFocus = function() {
    if(!this.setup) return;
    if(this.focus) this.focus.remove();
    this.focus = this.rubix.focus_group.append('g');
    this.focus.attr('class', 'focus');
    this.focus.style('display', 'none');
    var strokecolor = 'white';
    switch(this.opts.marker) {
        case 'circle':
        case 'cross':
        case 'square':
        case 'diamond':
        case 'triangle-up':
        case 'triangle-down':
            var symbol = d3.svg.symbol();
            symbol.type(this.opts.marker);
            this.focus.append('path').attr('d', symbol).attr('fill', this.opts.color).attr('stroke', strokecolor).attr('stroke-width', 2);
        break;
        default:
            throw new Error('Unknown marker type : ' + this.opts.marker);
        break;
    }
};

Rubix.ColumnSeries.prototype.on_focus = function(dx, dy) {
    if(!this.setup) return;
    this.off_focus();
    if(this.rubix.opts.invertAxes) {
        dy = dy.toString().replace('.', '\\\.');
        var rects = this.cb_series.selectAll('.column-'+dy);
    } else {
        dx = dx.toString().replace('.', '\\\.');
        var rects = this.cb_series.selectAll('.column-'+dx);
    }
    rects.classed('filled', true);
    rects.attr('fill-opacity', 1);
    rects.attr('stroke-width', 2);
};

Rubix.ColumnSeries.prototype.off_focus = function() {
    if(!this.setup) return;
    var rects = this.cb_series.selectAll('.filled');
    rects.classed('filled', false);
    rects.attr('fill-opacity', 0.85);
    rects.attr('stroke-width', 1);
};

window.Rubix = window.Rubix || {};

/**
 * @param {Rubix} rubix
 * @param {Object} opts
 * @constructor
 */
Rubix.AreaSeries = function(rubix, opts) {
    this.opts = opts;
    this.opts.color = this.opts.color || 'steelblue';
    this.opts.marker = this.opts.marker || 'circle';
    this.opts.fillopacity = this.opts.fillopacity || 0.5;
    this.opts.strokewidth = this.opts.strokewidth || 1;
    this.opts.noshadow = this.opts.noshadow || false;
    this.show_markers = this.opts.show_markers;

    if(!this.opts.hasOwnProperty('name')) throw new Error('AreaSeries should have a \'name\' property');

    this.name = this.opts.name;

    this.chart_hidden = false;
    this.temp_stack = [];

    this.setup = false;
    this.animating = false;

    this._setup(rubix);
};

/**
 * @param {Rubix} rubix
 * @private
 */
Rubix.AreaSeries.prototype._setup = function(rubix) {
    this.rubix = rubix;

    this.root   = this.rubix.root;
    this.data   = this.rubix.data;
    this.width  = this.rubix.width;
    this.height = this.rubix.height;
    this.area_series = this.rubix.root_area_series;
    this.show_markers = (this.show_markers === undefined) ? this.rubix.show_markers : this.show_markers;

    this.master_detail = this.rubix.master_detail;

    if(this.master_detail) {
        this.md_root = this.rubix.md_root;
    }

    if(!this.id) {
        this.id = this.rubix.uid('area');
    }

    /** separator */
    var self = this;
    this.line = d3.svg.line();
    this.line.defined(function(d) {
        return d.x !== null && d.y !== null;
    });
    this.line.x(function(d) {
        if(self.rubix.opts.invertAxes) {
            return self.rubix.x(d.y);
        }
        if(self.rubix.axis.x.range === 'column' || self.rubix.axis.x.range === 'bar') {
            return self.rubix.x(d.x) + self.rubix.x.rangeBand()/2;
        }
        return self.rubix.x(d.x);
    });
    this.line.y(function(d) {
        if(self.rubix.opts.invertAxes) {
            if(self.rubix.axis.y.range === 'column' || self.rubix.axis.y.range === 'bar') {
                return self.rubix.y(d.x) + self.rubix.y.rangeBand()/2;
            }
            return self.rubix.y(d.x);
        }
        return self.rubix.y(d.y);
    });
    this.line.interpolate(this.rubix.interpolate);

    this.area = d3.svg.area();
    this.area.defined(this.line.defined());
    if(this.rubix.opts.invertAxes) {
        this.area.x0(function(d) {
            return self.rubix.x(0);
        });
        this.area.x1(function(d) {
            return self.rubix.x(d.y);
        });
        this.area.y(function(d) {
            if(self.rubix.axis.y.range === 'column' || self.rubix.axis.y.range === 'bar') {
                return self.rubix.y(d.x) + self.rubix.y.rangeBand()/2;
            }
            return self.rubix.y(d.x);
        });
        this.area.interpolate(this.rubix.interpolate);
    } else {
        this.area.x(function(d) {
            if(self.rubix.axis.x.range === 'column' || self.rubix.axis.x.range === 'bar') {
                return self.rubix.x(d.x) + self.rubix.x.rangeBand()/2;
            }
            return self.rubix.x(d.x);
        });
        this.area.y0(function(d) {
            return self.rubix.y(0);
        });
        this.area.y1(function(d) {
            return self.rubix.y(d.y);
        });
        this.area.interpolate(this.rubix.interpolate);
    }

    if(this.master_detail) {
        this.master_line = d3.svg.line();
        this.master_line.defined(function(d) {
            return d.x !== null && d.y !== null;
        });
        this.master_line.x(function(d) {
            if(self.rubix.opts.invertAxes) {
                return self.rubix.x2(d.y);
            }
            return self.rubix.x2(d.x);
        });
        this.master_line.y(function(d) {
            if(self.rubix.opts.invertAxes) {
                return self.rubix.y2(d.x);
            }
            return self.rubix.y2(d.y);
        });
        this.master_line.interpolate(this.rubix.interpolate);

        this.master_area = d3.svg.area();
        this.master_area.defined(this.master_line.defined());
        this.area.interpolate(this.rubix.interpolate);
        if(this.rubix.opts.invertAxes) {
            this.master_area.x0(function(d) {
                return self.rubix.x2(0);
            });
            this.master_area.x1(function(d) {
                return self.rubix.x2(d.y);
            });
            this.master_area.y(function(d) {
                return self.rubix.y2(d.x);
            });
            this.master_area.interpolate(this.rubix.interpolate);
        } else {
            this.master_area.x(function(d) {
                return self.rubix.x2(d.x);
            });
            this.master_area.y0(function(d) {
                return self.rubix.y2(0);
            });
            this.master_area.y1(function(d) {
                return self.rubix.y2(d.y);
            });
            this.master_area.interpolate(this.rubix.interpolate);
        }
    }    
};

// Alias for draw
Rubix.AreaSeries.prototype.redraw = function(rubix) {
    this._setup(rubix);
    this.draw();
};

Rubix.AreaSeries.prototype.noRedraw = function(rubix) {
    this._setup(rubix);
    this.draw(true);
};

/**
 * @param {Array|Object} data
 */
Rubix.AreaSeries.prototype.addData = function(data) {
    this.rubix.data_changed = true;
    if(!(data instanceof Array)) {
        if(!(data instanceof Object)) {
            throw new Error("Data must be an array or object");
        } else {
            if(!(data.hasOwnProperty('x') || data.hasOwnProperty('y'))) {
                throw new Error("Object must be in the form: {x: ..., y: ...}");
            }

            data = [data];
        }
    }

    if(!data.length) return;

    if(!this.rubix.opts.noSort) {
        data.sort(function(a, b) {
            if(a.x > b.x) {
                return 1;
            } else if(a.x === b.x) {
                return 0;
            } else {
                return -1;
            }
        });
    }

    this.data[this.name] = data;

    this.rubix.resetAxis(false);
    this.rubix.forceRedraw();
    this._animate_draw();
};

Rubix.AreaSeries.prototype.draw = function(forced) {
    if(!this.name) return;
    if(!this.data) return;
    if(!this.data.hasOwnProperty(this.name)) return;
    if(!this.data[this.name].length) return;
    var self = this;

    var isConstructed = this.area_series.selectAll('.'+this.id)[0].length;

    if(!isConstructed) {
        this.area_series.selectAll('.'+this.id+'.clipped').remove();
        if(!this.opts.noshadow) {
            this.strokePath1 = this.area_series.append('path').attr('class', this.id+' line').datum(this.data[this.name]).attr('d', this.line).attr('stroke', 'black').attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-width', 5 * this.opts.strokewidth).attr('stroke-opacity', 0.05000000000000001).attr('transform', 'translate(1,1)');
            this.strokePath2 = this.area_series.append('path').attr('class', this.id+' line').datum(this.data[this.name]).attr('d', this.line).attr('stroke', 'black').attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-width', 3 * this.opts.strokewidth).attr('stroke-opacity', 0.1).attr('transform', 'translate(1,1)');
            this.strokePath3 = this.area_series.append('path').attr('class', this.id+' line').datum(this.data[this.name]).attr('d', this.line).attr('stroke', 'black').attr('fill', 'none').attr('stroke-linecap', 'round').attr('stroke-width', 1 * this.opts.strokewidth).attr('stroke-opacity', 0.15000000000000002).attr('transform', 'translate(1,1)');            
        }
        this.areaPath = this.area_series.append('path').attr('class', this.id+' area').datum(this.data[this.name]).attr('d', this.area).attr('fill', this.opts.color).attr('fill-opacity', this.opts.fillopacity).attr('stroke', 'none');
        this.linePath = this.area_series.append('path').datum(this.data[this.name]).attr('class', this.id+' line').attr('stroke', this.opts.color).attr('fill', 'none').attr('stroke-linecap', 'round').attr('d', this.line).attr('stroke-width', 2 * this.opts.strokewidth);

        if(this.master_detail) {
            this.md_root.select('.md-layers > .md_area_series').selectAll('.'+this.id+'.clipped').remove();
            this.masterLinePath = this.md_root.select('.md-layers > .md_area_series').append('path').datum(this.data[this.name]).attr('class', this.id+' line').attr('stroke', this.opts.color).attr('fill', 'none').attr('stroke-linecap', 'round').attr('d', this.master_line).attr('stroke-width', 2 * this.opts.strokewidth);
            this.masterLinePath.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
            this.masterLinePath.classed('clipped', true);
            
            this.masterAreaPath = this.md_root.select('.md-layers > .md_area_series').append('path').attr('class', this.id+' area').datum(this.data[this.name]).attr('d', this.master_area).attr('fill', this.opts.color).attr('fill-opacity', this.opts.fillopacity).attr('stroke', 'none');
            this.masterAreaPath.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
            this.masterAreaPath.classed('clipped', true);

            if(this.dataChanged) {
                this.rubix.resetExtent();
                this.dataChanged = false;
            }

            if(!this.opts.noshadow) {
                this.strokePath1.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
                this.strokePath2.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');
                this.strokePath3.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');                
            }
            this.linePath.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');

            if(!this.opts.noshadow) {
                this.strokePath1.classed('clipped', true);
                this.strokePath2.classed('clipped', true);
                this.strokePath3.classed('clipped', true);                
            }
            this.linePath.classed('clipped', true);
            this.areaPath.classed('clipped', true);
        }
        this.areaPath.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip)');

        this.setup = true;
    } else {
        this.rubix.runCommand('globalRedraw');
    }

    this.rubix.resetFocus(forced);
};

/**
 * Alias for addPoint
 * @param {Object} data
 * @param {?Boolean} shift
 * @param {?Boolean} noRedraw
 */
Rubix.AreaSeries.prototype.updatePoint = function(data, shift, noRedraw) {
    this.addPoint(data, shift, noRedraw);
};

/**
 * @param {*} ref
 * @param {?Boolean} noRedraw
 */
Rubix.AreaSeries.prototype.removePoint = function(ref, noRedraw) {
    if(this.chart_hidden) {
        this.temp_stack.push({
            type: 'removePoint',
            ref: ref
        });
        return;
    }

    if(!this.data[this.name]) {
        this.data[this.name] = [];
    }

    var removed = false;
    for(var i=0; i<this.data[this.name].length; i++) {
        if(this.data[this.name][i].x === ref) {
            this.data[this.name].splice(i, 1);
            removed = true;
            break;
        }
    }

    if(this.master_detail) {
        this.dataChanged = true;
    }

    if(noRedraw) return;

    if(this.setup) {
        this._animate_draw();
    } else {
        this.rubix.resetAxis(true);
        this.rubix.forceRedraw();
    }
};

/**
 * @param {Object} data
 * @param {?Boolean} shift
 * @param {?Boolean} noRedraw
 */
Rubix.AreaSeries.prototype.addPoint = function(data, shift, noRedraw) {
    this.rubix.data_changed = true;
    if(!(data instanceof Object) || (data instanceof Array)) {
        throw new Error("Object required for addPoint");
    }
    if(!(data.hasOwnProperty('x') || data.hasOwnProperty('y'))) {
        throw new Error("Object must be in the form: {x: ..., y: ...}");
    }

    if(this.chart_hidden) {
        this.temp_stack.push({
            type: 'addPoint',
            data: data,
            shift: shift
        });
        return;
    }

    if(!this.data[this.name]) {
        this.data[this.name] = [];
    }

    var added = false;
    for(var i=0; i<this.data[this.name].length; i++) {
        if(this.data[this.name][i].x === data.x) {
            this.data[this.name][i].y = data.y;
            added = true;
            break;
        }
    }

    if(!added) {
        this.data[this.name].push(data);
    }

    this.data[this.name].sort(function(a, b) {
        if(a.x > b.x) {
            return 1;
        } else if(a.x === b.x) {
            return 0;
        } else {
            return -1;
        }
    });

    if(this.rubix.opts.interval) {
        if(this.rubix.opts.interval < this.data[this.name].length) {
            this.data[this.name].shift();
        }
    } else {
        if(shift) {
            this.data[this.name].shift();
        }
    }

    if(this.master_detail) {
        this.dataChanged = true;
    }

    if(noRedraw) return;
    if(this.setup) {
        this._animate_draw();
    } else {
        this.rubix.resetAxis(true);
        this.rubix.forceRedraw();
    }
};

Rubix.AreaSeries.prototype._animate_draw = function(local) {
    var self = this;
    var text = this.root.selectAll('.y.axis').selectAll('text')[0];
    var width = [];
    for(var i=0; i<text.length; i++) {
        width.push(text[i].getBBox().width);
    }
    var origMaxWidth = d3.max(width);

    this.rubix.resetAxis(false);

    text = this.root.selectAll('.y.axis').selectAll('text')[0];
    width = [];
    for(var i=0; i<text.length; i++) {
        width.push(text[i].getBBox().width);
    }

    var maxWidth = d3.max(width);
    this.rubix.marginLeft(maxWidth);
    this.rubix.resetFocus();
};

Rubix.AreaSeries.prototype.hidden = function() {
    this.chart_hidden = true;
};

Rubix.AreaSeries.prototype.show = function() {
    this.chart_hidden = false;
    while(this.temp_stack.length>1) {
        var rawData = this.temp_stack.shift();
        if(rawData.type === 'addPoint') {
            this.addPoint(rawData.data, rawData.shift, true);
        } else {
            this.removePoint(rawData.ref);
        }
    }
    if(this.temp_stack.length) {
        var rawData = this.temp_stack.shift();
        if(rawData.type === 'addPoint') {
            this.addPoint(rawData.data, rawData.shift, true);
        } else {
            this.removePoint(rawData.ref);
        }
    }
};

Rubix.AreaSeries.prototype.globalRedraw = function(rubix) {
    this.area_series.selectAll('.'+this.id+'.line').attr('d', this.line);
    this.area_series.selectAll('.'+this.id+'.area').attr('d', this.area);
};

Rubix.AreaSeries.prototype.forceRedraw = function(rubix) {
    this.redraw(rubix);
};

Rubix.AreaSeries.prototype.on_complete_draw = function() {
    if(!this.setup) return;
    var self = this;
    var datum = this.data[this.name];
    if(this.opts.marker !== undefined && this.show_markers) {
        if(this.master_detail) {
            this.rubix.symbols.attr('clip-path', 'url(#'+self.rubix.master_id+'-clip-symbols)');
        }
        this.markers = this.rubix.symbols.selectAll('.'+this.id+'-marker');
        switch(this.opts.marker) {
            case 'circle':
            case 'cross':
            case 'square':
            case 'diamond':
            case 'triangle-up':
            case 'triangle-down':
                var symbol = d3.svg.symbol();
                symbol.type(this.opts.marker);

                var symbolType = this.markers.data(datum);
                symbolType.enter().append('path')
                      .attr('d', symbol)
                      .attr('class', this.id + '-marker')
                      .attr('fill', this.opts.color)
                      .style('display', function(d) {
                            if(d.y === null) {
                                return 'none';
                            }
                            return null;
                      })
                      .attr('stroke', 'white')
                      .attr('transform', function(d) {
                            var val = d.y;
                            if(isNaN(val)) {
                                val = 0;
                            }
                            if(self.rubix.opts.invertAxes) {
                                var _y = self.rubix.y(d.x);
                                var _x = self.rubix.x(val);
                                if(self.rubix.axis.y.range === 'column' || self.rubix.axis.y.range === 'bar') {
                                    _y += self.rubix.y.rangeBand()/2;
                                }
                            } else {
                                var _y = self.rubix.y(val);
                                var _x = self.rubix.x(d.x);
                                if(self.rubix.axis.x.range === 'column' || self.rubix.axis.x.range === 'bar') {
                                    _x += self.rubix.x.rangeBand()/2;
                                }
                            }
                            return 'translate('+_x+','+_y+')';
                      });
                symbolType.exit().remove();
            break;
            default:
                throw new Error('Unknown marker type : ' + this.opts.marker);
            break;
        }
    }
};

Rubix.AreaSeries.prototype.setupFocus = function() {
    if(!this.setup) return;
    if(this.focus) this.focus.remove();
    this.focus = this.rubix.focus_group.append('g');
    this.focus.attr('class', 'focus');
    this.focus.style('display', 'none');
    switch(this.opts.marker) {
        case 'circle':
        case 'cross':
        case 'square':
        case 'diamond':
        case 'triangle-up':
        case 'triangle-down':
            var symbol = d3.svg.symbol();
            symbol.type(this.opts.marker);
            var path = this.focus.append('path').attr('d', symbol).attr('fill', this.opts.color).attr('stroke', 'white').attr('stroke-width', 2);
        break;
        default:
            throw new Error('Unknown marker type : ' + this.opts.marker);
        break;
    }
};

Rubix.AreaSeries.prototype.on_focus = function() {
    if(!this.setup) return;
    this.linePath.attr('stroke-width', 2 * this.opts.strokewidth);
};

Rubix.AreaSeries.prototype.off_focus = function() {
    if(!this.setup) return;
    this.linePath.attr('stroke-width', 2 * this.opts.strokewidth);
};

Rubix.Cleanup = function() {
    var master_id = null;
    for(var i=0; i<RubixListeners.length; i++) {
        master_id = RubixListeners[i];
        $(window).off('orientationchange.'+master_id);
        $(window).off('rubix.redraw.'+master_id);
        $(window).off('resize.rubix.'+master_id);
        $(window).off('debouncedresize.rubix.'+master_id);
        $(window).off('throttledresize.rubix.'+master_id);
    }
    RubixListeners = [];
};

/**
 * Created by pheadra on 6/17/15.
 */
/***
 @title:
 Drag to Select

 @version:
 1.1

 @author:
 Andreas Lagerkvist

 @date:
 2009-04-06

 @url:
 http://andreaslagerkvist.com/jquery/drag-to-select/

 @license:
 http://creativecommons.org/licenses/by/3.0/

 @copyright:
 2008 Andreas Lagerkvist (andreaslagerkvist.com)

 @requires:
 jquery, jquery.dragToSelect.css

 @does:
 Use this plug-in to allow your users to select certain elements by dragging a "select box". Works very similar to how you can drag-n-select files and folders in most OS:es.

 @howto:
 $('#my-files').dragToSelect(selectables: 'li'); would make every li in the #my-files-element selectable by dragging. The li:s will recieve a "selected"-class when they are within range of the select box when user drops.

 Make sure a parent-element of the selectables has position: relative as well as overflow: auto or scroll.

 @exampleHTML:
 <ul>
 <li><img src="http://exscale.se/__files/3d/lamp-and-mates/lamp-and-mates-01_small.jpg" alt="Lamp and Mates" /></li>
 <li><img src="http://exscale.se/__files/3d/stugan-winter_small.jpg" alt="The Cottage - Winter time" /></li>
 <li><img src="http://exscale.se/__files/3d/ps2_small.jpg" alt="PS2" /></li>
 </ul>

 @exampleJS:
 $('#jquery-drag-to-select-example').dragToSelect({
	selectables: 'li',
	onHide: function () {
		alert($('#jquery-drag-to-select-example li.selected').length + ' selected');
	}
});
 ***/
jQuery.fn.dragToSelect = function (conf) {
    var c = typeof(conf) == 'object' ? conf : {};

    // Config
    var config = jQuery.extend({
        className:		'jquery-drag-to-select',
        activeClass:	'active',
        disabledClass:	'disabled',
        selectedClass:	'selected',
        scrollTH:		10,
        percentCovered:	25,
        selectables:	false,
        autoScroll:		false,
        selectOnMove:	false,
        onShow:			function () {return true;},
        onHide:			function () {return true;},
        onEnter:        function () {return true;},
        onMove:         function () {return true;},
        onLeave:        function () {return true;},
        onRefresh:		function () {return true;}
    }, c);

    var realParent	= jQuery(this);
    var parent		= realParent;

    // do {
    // 	if (/auto|scroll|hidden/.test(parent.css('overflow'))) {
    // 		break;
    // 	}
    // 	parent = parent.parent();
    // } while (parent[0].parentNode);

    // Does user want to disable dragtoselect
    if (conf == 'disable') {
        parent.addClass(config.disabledClass);
        return this;
    }
    else if (conf == 'enable') {
        parent.removeClass(config.disabledClass);
        return this;
    }

    var getParentDim = function(){
        var parentOffset	= parent.offset();
        var parentDim		= {
            left:	parentOffset.left,
            top:	parentOffset.top,
            width:	parent.width(),
            height:	parent.height()
        };
        return parentDim;
    }

    // var parentOffset, parentDim;
    // jQuery(window).resize(function(){
    // 	parentOffset	= parent.offset();
    // 	parentDim		= {
    // 		left:	parentOffset.left,
    // 		top:	parentOffset.top,
    // 		width:	parent.width(),
    // 		height:	parent.height()
    // 	};
    // });
    // jQuery(window).trigger('resize');

    // Current origin of select box
    var selectBoxOrigin = {
        left:	0,
        top:	0
    };

    // Create select box
    var selectBox = jQuery('<div/>')
        .appendTo(parent)
        .attr('class', config.className)
        .css('position', 'absolute')
        .hide();

    // Shows the select box
    var showSelectBox = function (e) {
        if (parent.is('.' + config.disabledClass)) {
            return;
        }
        selectBox.show();
        var parentDim = getParentDim();

        selectBoxOrigin.left	= e.pageX - parentDim.left + parent[0].scrollLeft;
        selectBoxOrigin.top		= e.pageY - parentDim.top + parent[0].scrollTop;

        var css = {
            left:		selectBoxOrigin.left + 'px',
            top:		selectBoxOrigin.top + 'px',
            width:		'1px',
            height:		'1px'
        };
        selectBox.addClass(config.activeClass).css(css).show();

        config.onShow();
    };

    // Refreshes the select box dimensions and possibly position
    var refreshSelectBox = function (e) {
        if (!selectBox.is('.' + config.activeClass) || parent.is('.' + config.disabledClass)) {
            return;
        }
        var parentDim = getParentDim();

        var left		= e.pageX - parentDim.left + parent[0].scrollLeft;
        var top			= e.pageY - parentDim.top + parent[0].scrollTop;
        var newLeft		= left;
        var newTop		= top;
        var newWidth	= selectBoxOrigin.left - newLeft;
        var newHeight	= selectBoxOrigin.top - newTop;

        if (left > selectBoxOrigin.left) {
            newLeft		= selectBoxOrigin.left;
            newWidth	= left - selectBoxOrigin.left;
        }
        if(parentDim.left + parentDim.width < parentDim.left + newLeft + newWidth){
            newWidth = parentDim.width - newLeft;
        }else if(newLeft < 0){
            newLeft = 0;
            newWidth = selectBoxOrigin.left;
        }

        if (top > selectBoxOrigin.top) {
            newTop		= selectBoxOrigin.top;
            newHeight	= top - selectBoxOrigin.top;
        }
        if(parentDim.top + parentDim.height < parentDim.top + newTop + newHeight){
            newHeight = parentDim.height - newTop;
        }else if(newTop < 0){
            newTop = 0;
            newHeight = selectBoxOrigin.top;
        }

        var css = {
            left:	newLeft + 'px',
            top:	newTop + 'px',
            width:	newWidth + 'px',
            height:	newHeight + 'px'
        };
        selectBox.css(css);

        config.onRefresh();
    };

    // Hides the select box
    var hideSelectBox = function (e) {
        if (!selectBox.is('.' + config.activeClass) || parent.is('.' + config.disabledClass)) {
            return;
        }
        if(selectBox.width() >= 2 && selectBox.height() >= 2){
            if (config.onHide(selectBox) !== false) {
                selectBox.removeClass(config.activeClass);
            }
        }else{
            selectBox.hide();
        }
    };

    // Scrolls parent if needed
    var scrollPerhaps = function (e) {
        if (!selectBox.is('.' + config.activeClass) || parent.is('.' + config.disabledClass)) {
            return;
        }
        var parentDim = getParentDim();

        // Scroll down
        if ((e.pageY + config.scrollTH) > (parentDim.top + parentDim.height)) {
            parent[0].scrollTop += config.scrollTH;
        }
        // Scroll up
        if ((e.pageY - config.scrollTH) < parentDim.top) {
            parent[0].scrollTop -= config.scrollTH;
        }
        // Scroll right
        if ((e.pageX + config.scrollTH) > (parentDim.left + parentDim.width)) {
            parent[0].scrollLeft += config.scrollTH;
        }
        // Scroll left
        if ((e.pageX - config.scrollTH) < parentDim.left) {
            parent[0].scrollLeft -= config.scrollTH;
        }
    };

    // Selects all the elements in the select box's range
    var selectElementsInRange = function () {
        if (!selectBox.is('.' + config.activeClass) || parent.is('.' + config.disabledClass)) {
            return;
        }

        var selectables		= realParent.find(config.selectables);
        var selectBoxOffset	= selectBox.offset();
        var selectBoxDim	= {
            left:	selectBoxOffset.left,
            top:	selectBoxOffset.top,
            width:	selectBox.width(),
            height:	selectBox.height()
        };

        selectables.each(function (i) {
            var el			= $(this);
            var elOffset	= el.offset();
            var elDim		= {
                left:	elOffset.left,
                top:	elOffset.top,
                width:	el.width(),
                height:	el.height()
            };

            if (percentCovered(selectBoxDim, elDim) > config.percentCovered) {
                el.addClass(config.selectedClass);
            }
            else {
                el.removeClass(config.selectedClass);
            }
        });
    };

    // Returns the amount (in %) that dim1 covers dim2
    var percentCovered = function (dim1, dim2) {
        // The whole thing is covering the whole other thing
        if (
            (dim1.left <= dim2.left) &&
            (dim1.top <= dim2.top) &&
            ((dim1.left + dim1.width) >= (dim2.left + dim2.width)) &&
            ((dim1.top + dim1.height) > (dim2.top + dim2.height))
        ) {
            return 100;
        }
        // Only parts may be covered, calculate percentage
        else {
            dim1.right		= dim1.left + dim1.width;
            dim1.bottom		= dim1.top + dim1.height;
            dim2.right		= dim2.left + dim2.width;
            dim2.bottom		= dim2.top + dim2.height;

            var l = Math.max(dim1.left, dim2.left);
            var r = Math.min(dim1.right, dim2.right);
            var t = Math.max(dim1.top, dim2.top);
            var b = Math.min(dim1.bottom, dim2.bottom);

            if (b >= t && r >= l) {
                /*	$('<div/>').appendTo(document.body).css({
                 background:	'red',
                 position:	'absolute',
                 left:		l + 'px',
                 top:		t + 'px',
                 width:		(r - l) + 'px',
                 height:		(b - t) + 'px',
                 zIndex:		100
                 }); */

                var percent = (((r - l) * (b - t)) / (dim2.width * dim2.height)) * 100;

                //	alert(percent + '% covered')

                return percent;
            }
        }
        // Nothing covered, return 0
        return 0;
    };

    // Do the right stuff then return this
    // selectBox
    // 	.mousemove(function (e) {
    // 		refreshSelectBox(e);

    // 		if (config.selectables && config.selectOnMove) {
    // 			selectElementsInRange();
    // 		}

    // 		if (config.autoScroll) {
    // 			scrollPerhaps(e);
    // 		}

    // 		e.preventDefault();
    // 	})
    // 	.mouseup(function(e) {
    // 		if (config.selectables) {
    // 			selectElementsInRange();
    // 		}

    // 		hideSelectBox(e);

    // 		e.preventDefault();
    // 	});

    // if (jQuery.fn.disableTextSelect) {
    // 	parent.disableTextSelect();
    // }

    var bIsDraging = false;
    parent
        .mousedown(function (e) {
            // Make sure user isn't clicking scrollbar (or disallow clicks far to the right actually)
            if ((e.pageX + 20) > jQuery(document.body).width()) {
                return;
            }

            bIsDraging = true;

            showSelectBox(e);

            e.preventDefault();
        })
        .mouseenter(function (e) {
            config.onEnter(e);
        })
        .mousemove(function (e) {
            config.onMove(e);
        })
        .mouseleave(function (e) {
            config.onLeave(e);
        });
    jQuery(document).mousemove(function (e) {
        if(!bIsDraging) return;
        refreshSelectBox(e);

        if (config.selectables && config.selectOnMove) {
            selectElementsInRange();
        }

        if (config.autoScroll) {
            scrollPerhaps(e);
        }

        e.preventDefault();
    })
        .mouseup(function (e) {
            if(!bIsDraging) return;
            if (config.selectables) {
                selectElementsInRange();
            }

            bIsDraging = false;

            hideSelectBox(e);
            // console.log('e', e);

            e.preventDefault();
        });

    // Be nice
    return this;
};
/**
 * Created by pheadra on 6/17/15.
 */
d3.sankey = function() {
    var sankey = {},
        nodeWidth = 24,
        nodePadding = 8,
        size = [1, 1],
        nodes = [],
        links = [];

    sankey.nodeWidth = function(_) {
        if (!arguments.length) return nodeWidth;
        nodeWidth = +_;
        return sankey;
    };

    sankey.nodePadding = function(_) {
        if (!arguments.length) return nodePadding;
        nodePadding = +_;
        return sankey;
    };

    sankey.nodes = function(_) {
        if (!arguments.length) return nodes;
        nodes = _;
        return sankey;
    };

    sankey.links = function(_) {
        if (!arguments.length) return links;
        links = _;
        return sankey;
    };

    sankey.size = function(_) {
        if (!arguments.length) return size;
        size = _;
        return sankey;
    };

    sankey.layout = function(iterations) {
        computeNodeLinks();
        computeNodeValues();
        computeNodeBreadths();
        computeNodeDepths(iterations);
        computeLinkDepths();
        return sankey;
    };

    sankey.relayout = function() {
        computeLinkDepths();
        return sankey;
    };

    sankey.link = function() {
        var curvature = .5;

        function link(d) {
            var x0 = d.source.x + d.source.dx,
                x1 = d.target.x,
                xi = d3.interpolateNumber(x0, x1),
                x2 = xi(curvature),
                x3 = xi(1 - curvature),
                y0 = d.source.y + d.sy + d.dy / 2,
                y1 = d.target.y + d.ty + d.dy / 2;
            return "M" + x0 + "," + y0
                + "C" + x2 + "," + y0
                + " " + x3 + "," + y1
                + " " + x1 + "," + y1;
        }

        link.curvature = function(_) {
            if (!arguments.length) return curvature;
            curvature = +_;
            return link;
        };

        return link;
    };

    // Populate the sourceLinks and targetLinks for each node.
    // Also, if the source and target are not objects, assume they are indices.
    function computeNodeLinks() {
        nodes.forEach(function(node) {
            node.sourceLinks = [];
            node.targetLinks = [];
        });
        links.forEach(function(link) {
            var source = link.source,
                target = link.target;
            if (typeof source === "number") source = link.source = nodes[link.source];
            if (typeof target === "number") target = link.target = nodes[link.target];
            source.sourceLinks.push(link);
            target.targetLinks.push(link);
        });
    }

    // Compute the value (size) of each node by summing the associated links.
    function computeNodeValues() {
        nodes.forEach(function(node) {
            node.value = Math.max(
                d3.sum(node.sourceLinks, value),
                d3.sum(node.targetLinks, value)
            );
        });
    }

    // Iteratively assign the breadth (x-position) for each node.
    // Nodes are assigned the maximum breadth of incoming neighbors plus one;
    // nodes with no incoming links are assigned breadth zero, while
    // nodes with no outgoing links are assigned the maximum breadth.
    function computeNodeBreadths() {
        var remainingNodes = nodes,
            nextNodes,
            x = 0;

        while (remainingNodes.length) {
            nextNodes = [];
            remainingNodes.forEach(function(node) {
                node.x = x;
                node.dx = nodeWidth;
                node.sourceLinks.forEach(function(link) {
                    nextNodes.push(link.target);
                });
            });
            remainingNodes = nextNodes;
            ++x;
        }

        //
        moveSinksRight(x);
        scaleNodeBreadths((size[0] - nodeWidth) / (x - 1));
    }

    function moveSourcesRight() {
        nodes.forEach(function(node) {
            if (!node.targetLinks.length) {
                node.x = d3.min(node.sourceLinks, function(d) { return d.target.x; }) - 1;
            }
        });
    }

    function moveSinksRight(x) {
        nodes.forEach(function(node) {
            if (!node.sourceLinks.length) {
                node.x = x - 1;
            }
        });
    }

    function scaleNodeBreadths(kx) {
        nodes.forEach(function(node) {
            node.x *= kx;
        });
    }

    function computeNodeDepths(iterations) {
        var nodesByBreadth = d3.nest()
            .key(function(d) { return d.x; })
            .sortKeys(d3.ascending)
            .entries(nodes)
            .map(function(d) { return d.values; });

        //
        initializeNodeDepth();
        resolveCollisions();
        for (var alpha = 1; iterations > 0; --iterations) {
            relaxRightToLeft(alpha *= .99);
            resolveCollisions();
            relaxLeftToRight(alpha);
            resolveCollisions();
        }

        function initializeNodeDepth() {
            var ky = d3.min(nodesByBreadth, function(nodes) {
                return (size[1] - (nodes.length - 1) * nodePadding) / d3.sum(nodes, value);
            });

            nodesByBreadth.forEach(function(nodes) {
                nodes.forEach(function(node, i) {
                    node.y = i;
                    node.dy = node.value * ky;
                });
            });

            links.forEach(function(link) {
                link.dy = link.value * ky;
            });
        }

        function relaxLeftToRight(alpha) {
            nodesByBreadth.forEach(function(nodes, breadth) {
                nodes.forEach(function(node) {
                    if (node.targetLinks.length) {
                        var y = d3.sum(node.targetLinks, weightedSource) / d3.sum(node.targetLinks, value);
                        node.y += (y - center(node)) * alpha;
                    }
                });
            });

            function weightedSource(link) {
                return center(link.source) * link.value;
            }
        }

        function relaxRightToLeft(alpha) {
            nodesByBreadth.slice().reverse().forEach(function(nodes) {
                nodes.forEach(function(node) {
                    if (node.sourceLinks.length) {
                        var y = d3.sum(node.sourceLinks, weightedTarget) / d3.sum(node.sourceLinks, value);
                        node.y += (y - center(node)) * alpha;
                    }
                });
            });

            function weightedTarget(link) {
                return center(link.target) * link.value;
            }
        }

        function resolveCollisions() {
            nodesByBreadth.forEach(function(nodes) {
                var node,
                    dy,
                    y0 = 0,
                    n = nodes.length,
                    i;

                // Push any overlapping nodes down.
                nodes.sort(ascendingDepth);
                for (i = 0; i < n; ++i) {
                    node = nodes[i];
                    dy = y0 - node.y;
                    if (dy > 0) node.y += dy;
                    y0 = node.y + node.dy + nodePadding;
                }

                // If the bottommost node goes outside the bounds, push it back up.
                dy = y0 - nodePadding - size[1];
                if (dy > 0) {
                    y0 = node.y -= dy;

                    // Push any overlapping nodes back up.
                    for (i = n - 2; i >= 0; --i) {
                        node = nodes[i];
                        dy = node.y + node.dy + nodePadding - y0;
                        if (dy > 0) node.y -= dy;
                        y0 = node.y;
                    }
                }
            });
        }

        function ascendingDepth(a, b) {
            return a.y - b.y;
        }
    }

    function computeLinkDepths() {
        nodes.forEach(function(node) {
            node.sourceLinks.sort(ascendingTargetDepth);
            node.targetLinks.sort(ascendingSourceDepth);
        });
        nodes.forEach(function(node) {
            var sy = 0, ty = 0;
            node.sourceLinks.forEach(function(link) {
                link.sy = sy;
                sy += link.dy;
            });
            node.targetLinks.forEach(function(link) {
                link.ty = ty;
                ty += link.dy;
            });
        });

        function ascendingSourceDepth(a, b) {
            return a.source.y - b.source.y;
        }

        function ascendingTargetDepth(a, b) {
            return a.target.y - b.target.y;
        }
    }

    function center(node) {
        return node.y + node.dy / 2;
    }

    function value(link) {
        return link.value;
    }

    return sankey;
};
/**
 * @license AngularJS v1.3.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, document, undefined) {'use strict';

/**
 * @description
 *
 * This object provides a utility for producing rich Error messages within
 * Angular. It can be called as follows:
 *
 * var exampleMinErr = minErr('example');
 * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);
 *
 * The above creates an instance of minErr in the example namespace. The
 * resulting error will have a namespaced error code of example.one.  The
 * resulting error will replace {0} with the value of foo, and {1} with the
 * value of bar. The object is not restricted in the number of arguments it can
 * take.
 *
 * If fewer arguments are specified than necessary for interpolation, the extra
 * interpolation markers will be preserved in the final string.
 *
 * Since data will be parsed statically during a build step, some restrictions
 * are applied with respect to how minErr instances are created and called.
 * Instances should have names of the form namespaceMinErr for a minErr created
 * using minErr('namespace') . Error codes, namespaces and template strings
 * should all be static strings, not variables or general expressions.
 *
 * @param {string} module The namespace to use for the new minErr instance.
 * @param {function} ErrorConstructor Custom error constructor to be instantiated when returning
 *   error from returned function, for cases when a particular type of error is useful.
 * @returns {function(code:string, template:string, ...templateArgs): Error} minErr instance
 */

function minErr(module, ErrorConstructor) {
  ErrorConstructor = ErrorConstructor || Error;
  return function() {
    var code = arguments[0],
      prefix = '[' + (module ? module + ':' : '') + code + '] ',
      template = arguments[1],
      templateArgs = arguments,

      message, i;

    message = prefix + template.replace(/\{\d+\}/g, function(match) {
      var index = +match.slice(1, -1), arg;

      if (index + 2 < templateArgs.length) {
        return toDebugString(templateArgs[index + 2]);
      }
      return match;
    });

    message = message + '\nhttp://errors.angularjs.org/1.3.16/' +
      (module ? module + '/' : '') + code;
    for (i = 2; i < arguments.length; i++) {
      message = message + (i == 2 ? '?' : '&') + 'p' + (i - 2) + '=' +
        encodeURIComponent(toDebugString(arguments[i]));
    }
    return new ErrorConstructor(message);
  };
}

/* We need to tell jshint what variables are being exported */
/* global angular: true,
  msie: true,
  jqLite: true,
  jQuery: true,
  slice: true,
  splice: true,
  push: true,
  toString: true,
  ngMinErr: true,
  angularModule: true,
  uid: true,
  REGEX_STRING_REGEXP: true,
  VALIDITY_STATE_PROPERTY: true,

  lowercase: true,
  uppercase: true,
  manualLowercase: true,
  manualUppercase: true,
  nodeName_: true,
  isArrayLike: true,
  forEach: true,
  sortedKeys: true,
  forEachSorted: true,
  reverseParams: true,
  nextUid: true,
  setHashKey: true,
  extend: true,
  int: true,
  inherit: true,
  noop: true,
  identity: true,
  valueFn: true,
  isUndefined: true,
  isDefined: true,
  isObject: true,
  isString: true,
  isNumber: true,
  isDate: true,
  isArray: true,
  isFunction: true,
  isRegExp: true,
  isWindow: true,
  isScope: true,
  isFile: true,
  isFormData: true,
  isBlob: true,
  isBoolean: true,
  isPromiseLike: true,
  trim: true,
  escapeForRegexp: true,
  isElement: true,
  makeMap: true,
  includes: true,
  arrayRemove: true,
  copy: true,
  shallowCopy: true,
  equals: true,
  csp: true,
  concat: true,
  sliceArgs: true,
  bind: true,
  toJsonReplacer: true,
  toJson: true,
  fromJson: true,
  startingTag: true,
  tryDecodeURIComponent: true,
  parseKeyValue: true,
  toKeyValue: true,
  encodeUriSegment: true,
  encodeUriQuery: true,
  angularInit: true,
  bootstrap: true,
  getTestability: true,
  snake_case: true,
  bindJQuery: true,
  assertArg: true,
  assertArgFn: true,
  assertNotHasOwnProperty: true,
  getter: true,
  getBlockNodes: true,
  hasOwnProperty: true,
  createMap: true,

  NODE_TYPE_ELEMENT: true,
  NODE_TYPE_ATTRIBUTE: true,
  NODE_TYPE_TEXT: true,
  NODE_TYPE_COMMENT: true,
  NODE_TYPE_DOCUMENT: true,
  NODE_TYPE_DOCUMENT_FRAGMENT: true,
*/

////////////////////////////////////

/**
 * @ngdoc module
 * @name ng
 * @module ng
 * @description
 *
 * # ng (core module)
 * The ng module is loaded by default when an AngularJS application is started. The module itself
 * contains the essential components for an AngularJS application to function. The table below
 * lists a high level breakdown of each of the services/factories, filters, directives and testing
 * components available within this core module.
 *
 * <div doc-module-components="ng"></div>
 */

var REGEX_STRING_REGEXP = /^\/(.+)\/([a-z]*)$/;

// The name of a form control's ValidityState property.
// This is used so that it's possible for internal tests to create mock ValidityStates.
var VALIDITY_STATE_PROPERTY = 'validity';

/**
 * @ngdoc function
 * @name angular.lowercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to lowercase.
 * @param {string} string String to be converted to lowercase.
 * @returns {string} Lowercased string.
 */
var lowercase = function(string) {return isString(string) ? string.toLowerCase() : string;};
var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * @ngdoc function
 * @name angular.uppercase
 * @module ng
 * @kind function
 *
 * @description Converts the specified string to uppercase.
 * @param {string} string String to be converted to uppercase.
 * @returns {string} Uppercased string.
 */
var uppercase = function(string) {return isString(string) ? string.toUpperCase() : string;};


var manualLowercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
      : s;
};
var manualUppercase = function(s) {
  /* jshint bitwise: false */
  return isString(s)
      ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) & ~32);})
      : s;
};


// String#toLowerCase and String#toUpperCase don't produce correct results in browsers with Turkish
// locale, for this reason we need to detect this case and redefine lowercase/uppercase methods
// with correct but slower alternatives.
if ('i' !== 'I'.toLowerCase()) {
  lowercase = manualLowercase;
  uppercase = manualUppercase;
}


var
    msie,             // holds major version number for IE, or NaN if UA is not IE.
    jqLite,           // delay binding since jQuery could be loaded after us.
    jQuery,           // delay binding
    slice             = [].slice,
    splice            = [].splice,
    push              = [].push,
    toString          = Object.prototype.toString,
    ngMinErr          = minErr('ng'),

    /** @name angular */
    angular           = window.angular || (window.angular = {}),
    angularModule,
    uid               = 0;

/**
 * documentMode is an IE-only property
 * http://msdn.microsoft.com/en-us/library/ie/cc196988(v=vs.85).aspx
 */
msie = document.documentMode;


/**
 * @private
 * @param {*} obj
 * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,
 *                   String ...)
 */
function isArrayLike(obj) {
  if (obj == null || isWindow(obj)) {
    return false;
  }

  // Support: iOS 8.2 (not reproducible in simulator)
  // "length" in obj used to prevent JIT error (gh-11508)
  var length = "length" in Object(obj) && obj.length;

  if (obj.nodeType === NODE_TYPE_ELEMENT && length) {
    return true;
  }

  return isString(obj) || isArray(obj) || length === 0 ||
         typeof length === 'number' && length > 0 && (length - 1) in obj;
}

/**
 * @ngdoc function
 * @name angular.forEach
 * @module ng
 * @kind function
 *
 * @description
 * Invokes the `iterator` function once for each item in `obj` collection, which can be either an
 * object or an array. The `iterator` function is invoked with `iterator(value, key, obj)`, where `value`
 * is the value of an object property or an array element, `key` is the object property key or
 * array element index and obj is the `obj` itself. Specifying a `context` for the function is optional.
 *
 * It is worth noting that `.forEach` does not iterate over inherited properties because it filters
 * using the `hasOwnProperty` method.
 *
 * Unlike ES262's
 * [Array.prototype.forEach](http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.18),
 * Providing 'undefined' or 'null' values for `obj` will not throw a TypeError, but rather just
 * return the value provided.
 *
   ```js
     var values = {name: 'misko', gender: 'male'};
     var log = [];
     angular.forEach(values, function(value, key) {
       this.push(key + ': ' + value);
     }, log);
     expect(log).toEqual(['name: misko', 'gender: male']);
   ```
 *
 * @param {Object|Array} obj Object to iterate over.
 * @param {Function} iterator Iterator function.
 * @param {Object=} context Object to become context (`this`) for the iterator function.
 * @returns {Object|Array} Reference to `obj`.
 */

function forEach(obj, iterator, context) {
  var key, length;
  if (obj) {
    if (isFunction(obj)) {
      for (key in obj) {
        // Need to check if hasOwnProperty exists,
        // as on IE8 the result of querySelectorAll is an object without a hasOwnProperty function
        if (key != 'prototype' && key != 'length' && key != 'name' && (!obj.hasOwnProperty || obj.hasOwnProperty(key))) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (isArray(obj) || isArrayLike(obj)) {
      var isPrimitive = typeof obj !== 'object';
      for (key = 0, length = obj.length; key < length; key++) {
        if (isPrimitive || key in obj) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    } else if (obj.forEach && obj.forEach !== forEach) {
        obj.forEach(iterator, context, obj);
    } else {
      for (key in obj) {
        if (obj.hasOwnProperty(key)) {
          iterator.call(context, obj[key], key, obj);
        }
      }
    }
  }
  return obj;
}

function sortedKeys(obj) {
  return Object.keys(obj).sort();
}

function forEachSorted(obj, iterator, context) {
  var keys = sortedKeys(obj);
  for (var i = 0; i < keys.length; i++) {
    iterator.call(context, obj[keys[i]], keys[i]);
  }
  return keys;
}


/**
 * when using forEach the params are value, key, but it is often useful to have key, value.
 * @param {function(string, *)} iteratorFn
 * @returns {function(*, string)}
 */
function reverseParams(iteratorFn) {
  return function(value, key) { iteratorFn(key, value); };
}

/**
 * A consistent way of creating unique IDs in angular.
 *
 * Using simple numbers allows us to generate 28.6 million unique ids per second for 10 years before
 * we hit number precision issues in JavaScript.
 *
 * Math.pow(2,53) / 60 / 60 / 24 / 365 / 10 = 28.6M
 *
 * @returns {number} an unique alpha-numeric string
 */
function nextUid() {
  return ++uid;
}


/**
 * Set or clear the hashkey for an object.
 * @param obj object
 * @param h the hashkey (!truthy to delete the hashkey)
 */
function setHashKey(obj, h) {
  if (h) {
    obj.$$hashKey = h;
  } else {
    delete obj.$$hashKey;
  }
}

/**
 * @ngdoc function
 * @name angular.extend
 * @module ng
 * @kind function
 *
 * @description
 * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)
 * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so
 * by passing an empty object as the target: `var object = angular.extend({}, object1, object2)`.
 * Note: Keep in mind that `angular.extend` does not support recursive merge (deep copy).
 *
 * @param {Object} dst Destination object.
 * @param {...Object} src Source object(s).
 * @returns {Object} Reference to `dst`.
 */
function extend(dst) {
  var h = dst.$$hashKey;

  for (var i = 1, ii = arguments.length; i < ii; i++) {
    var obj = arguments[i];
    if (obj) {
      var keys = Object.keys(obj);
      for (var j = 0, jj = keys.length; j < jj; j++) {
        var key = keys[j];
        dst[key] = obj[key];
      }
    }
  }

  setHashKey(dst, h);
  return dst;
}

function int(str) {
  return parseInt(str, 10);
}


function inherit(parent, extra) {
  return extend(Object.create(parent), extra);
}

/**
 * @ngdoc function
 * @name angular.noop
 * @module ng
 * @kind function
 *
 * @description
 * A function that performs no operations. This function can be useful when writing code in the
 * functional style.
   ```js
     function foo(callback) {
       var result = calculateResult();
       (callback || angular.noop)(result);
     }
   ```
 */
function noop() {}
noop.$inject = [];


/**
 * @ngdoc function
 * @name angular.identity
 * @module ng
 * @kind function
 *
 * @description
 * A function that returns its first argument. This function is useful when writing code in the
 * functional style.
 *
   ```js
     function transformer(transformationFn, value) {
       return (transformationFn || angular.identity)(value);
     };
   ```
  * @param {*} value to be returned.
  * @returns {*} the value passed in.
 */
function identity($) {return $;}
identity.$inject = [];


function valueFn(value) {return function() {return value;};}

/**
 * @ngdoc function
 * @name angular.isUndefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is undefined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is undefined.
 */
function isUndefined(value) {return typeof value === 'undefined';}


/**
 * @ngdoc function
 * @name angular.isDefined
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is defined.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is defined.
 */
function isDefined(value) {return typeof value !== 'undefined';}


/**
 * @ngdoc function
 * @name angular.isObject
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not
 * considered to be objects. Note that JavaScript arrays are objects.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Object` but not `null`.
 */
function isObject(value) {
  // http://jsperf.com/isobject4
  return value !== null && typeof value === 'object';
}


/**
 * @ngdoc function
 * @name angular.isString
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `String`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `String`.
 */
function isString(value) {return typeof value === 'string';}


/**
 * @ngdoc function
 * @name angular.isNumber
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Number`.
 *
 * This includes the "special" numbers `NaN`, `+Infinity` and `-Infinity`.
 *
 * If you wish to exclude these then you can use the native
 * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)
 * method.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Number`.
 */
function isNumber(value) {return typeof value === 'number';}


/**
 * @ngdoc function
 * @name angular.isDate
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a value is a date.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Date`.
 */
function isDate(value) {
  return toString.call(value) === '[object Date]';
}


/**
 * @ngdoc function
 * @name angular.isArray
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is an `Array`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is an `Array`.
 */
var isArray = Array.isArray;

/**
 * @ngdoc function
 * @name angular.isFunction
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a `Function`.
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `Function`.
 */
function isFunction(value) {return typeof value === 'function';}


/**
 * Determines if a value is a regular expression object.
 *
 * @private
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a `RegExp`.
 */
function isRegExp(value) {
  return toString.call(value) === '[object RegExp]';
}


/**
 * Checks if `obj` is a window object.
 *
 * @private
 * @param {*} obj Object to check
 * @returns {boolean} True if `obj` is a window obj.
 */
function isWindow(obj) {
  return obj && obj.window === obj;
}


function isScope(obj) {
  return obj && obj.$evalAsync && obj.$watch;
}


function isFile(obj) {
  return toString.call(obj) === '[object File]';
}


function isFormData(obj) {
  return toString.call(obj) === '[object FormData]';
}


function isBlob(obj) {
  return toString.call(obj) === '[object Blob]';
}


function isBoolean(value) {
  return typeof value === 'boolean';
}


function isPromiseLike(obj) {
  return obj && isFunction(obj.then);
}


var trim = function(value) {
  return isString(value) ? value.trim() : value;
};

// Copied from:
// http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021
// Prereq: s is a string.
var escapeForRegexp = function(s) {
  return s.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
           replace(/\x08/g, '\\x08');
};


/**
 * @ngdoc function
 * @name angular.isElement
 * @module ng
 * @kind function
 *
 * @description
 * Determines if a reference is a DOM element (or wrapped jQuery element).
 *
 * @param {*} value Reference to check.
 * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).
 */
function isElement(node) {
  return !!(node &&
    (node.nodeName  // we are a direct element
    || (node.prop && node.attr && node.find)));  // we have an on and find method part of jQuery API
}

/**
 * @param str 'key1,key2,...'
 * @returns {object} in the form of {key1:true, key2:true, ...}
 */
function makeMap(str) {
  var obj = {}, items = str.split(","), i;
  for (i = 0; i < items.length; i++)
    obj[items[i]] = true;
  return obj;
}


function nodeName_(element) {
  return lowercase(element.nodeName || (element[0] && element[0].nodeName));
}

function includes(array, obj) {
  return Array.prototype.indexOf.call(array, obj) != -1;
}

function arrayRemove(array, value) {
  var index = array.indexOf(value);
  if (index >= 0)
    array.splice(index, 1);
  return value;
}

/**
 * @ngdoc function
 * @name angular.copy
 * @module ng
 * @kind function
 *
 * @description
 * Creates a deep copy of `source`, which should be an object or an array.
 *
 * * If no destination is supplied, a copy of the object or array is created.
 * * If a destination is provided, all of its elements (for arrays) or properties (for objects)
 *   are deleted and then all elements/properties from the source are copied to it.
 * * If `source` is not an object or array (inc. `null` and `undefined`), `source` is returned.
 * * If `source` is identical to 'destination' an exception will be thrown.
 *
 * @param {*} source The source that will be used to make a copy.
 *                   Can be any type, including primitives, `null`, and `undefined`.
 * @param {(Object|Array)=} destination Destination into which the source is copied. If
 *     provided, must be of the same type as `source`.
 * @returns {*} The copy or updated `destination`, if `destination` was specified.
 *
 * @example
 <example module="copyExample">
 <file name="index.html">
 <div ng-controller="ExampleController">
 <form novalidate class="simple-form">
 Name: <input type="text" ng-model="user.name" /><br />
 E-mail: <input type="email" ng-model="user.email" /><br />
 Gender: <input type="radio" ng-model="user.gender" value="male" />male
 <input type="radio" ng-model="user.gender" value="female" />female<br />
 <button ng-click="reset()">RESET</button>
 <button ng-click="update(user)">SAVE</button>
 </form>
 <pre>form = {{user | json}}</pre>
 <pre>master = {{master | json}}</pre>
 </div>

 <script>
  angular.module('copyExample', [])
    .controller('ExampleController', ['$scope', function($scope) {
      $scope.master= {};

      $scope.update = function(user) {
        // Example with 1 argument
        $scope.master= angular.copy(user);
      };

      $scope.reset = function() {
        // Example with 2 arguments
        angular.copy($scope.master, $scope.user);
      };

      $scope.reset();
    }]);
 </script>
 </file>
 </example>
 */
function copy(source, destination, stackSource, stackDest) {
  if (isWindow(source) || isScope(source)) {
    throw ngMinErr('cpws',
      "Can't copy! Making copies of Window or Scope instances is not supported.");
  }

  if (!destination) {
    destination = source;
    if (source) {
      if (isArray(source)) {
        destination = copy(source, [], stackSource, stackDest);
      } else if (isDate(source)) {
        destination = new Date(source.getTime());
      } else if (isRegExp(source)) {
        destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
        destination.lastIndex = source.lastIndex;
      } else if (isObject(source)) {
        var emptyObject = Object.create(Object.getPrototypeOf(source));
        destination = copy(source, emptyObject, stackSource, stackDest);
      }
    }
  } else {
    if (source === destination) throw ngMinErr('cpi',
      "Can't copy! Source and destination are identical.");

    stackSource = stackSource || [];
    stackDest = stackDest || [];

    if (isObject(source)) {
      var index = stackSource.indexOf(source);
      if (index !== -1) return stackDest[index];

      stackSource.push(source);
      stackDest.push(destination);
    }

    var result;
    if (isArray(source)) {
      destination.length = 0;
      for (var i = 0; i < source.length; i++) {
        result = copy(source[i], null, stackSource, stackDest);
        if (isObject(source[i])) {
          stackSource.push(source[i]);
          stackDest.push(result);
        }
        destination.push(result);
      }
    } else {
      var h = destination.$$hashKey;
      if (isArray(destination)) {
        destination.length = 0;
      } else {
        forEach(destination, function(value, key) {
          delete destination[key];
        });
      }
      for (var key in source) {
        if (source.hasOwnProperty(key)) {
          result = copy(source[key], null, stackSource, stackDest);
          if (isObject(source[key])) {
            stackSource.push(source[key]);
            stackDest.push(result);
          }
          destination[key] = result;
        }
      }
      setHashKey(destination,h);
    }

  }
  return destination;
}

/**
 * Creates a shallow copy of an object, an array or a primitive.
 *
 * Assumes that there are no proto properties for objects.
 */
function shallowCopy(src, dst) {
  if (isArray(src)) {
    dst = dst || [];

    for (var i = 0, ii = src.length; i < ii; i++) {
      dst[i] = src[i];
    }
  } else if (isObject(src)) {
    dst = dst || {};

    for (var key in src) {
      if (!(key.charAt(0) === '$' && key.charAt(1) === '$')) {
        dst[key] = src[key];
      }
    }
  }

  return dst || src;
}


/**
 * @ngdoc function
 * @name angular.equals
 * @module ng
 * @kind function
 *
 * @description
 * Determines if two objects or two values are equivalent. Supports value types, regular
 * expressions, arrays and objects.
 *
 * Two objects or values are considered equivalent if at least one of the following is true:
 *
 * * Both objects or values pass `===` comparison.
 * * Both objects or values are of the same type and all of their properties are equal by
 *   comparing them with `angular.equals`.
 * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)
 * * Both values represent the same regular expression (In JavaScript,
 *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual
 *   representation matches).
 *
 * During a property comparison, properties of `function` type and properties with names
 * that begin with `$` are ignored.
 *
 * Scope and DOMWindow objects are being compared only by identify (`===`).
 *
 * @param {*} o1 Object or value to compare.
 * @param {*} o2 Object or value to compare.
 * @returns {boolean} True if arguments are equal.
 */
function equals(o1, o2) {
  if (o1 === o2) return true;
  if (o1 === null || o2 === null) return false;
  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN
  var t1 = typeof o1, t2 = typeof o2, length, key, keySet;
  if (t1 == t2) {
    if (t1 == 'object') {
      if (isArray(o1)) {
        if (!isArray(o2)) return false;
        if ((length = o1.length) == o2.length) {
          for (key = 0; key < length; key++) {
            if (!equals(o1[key], o2[key])) return false;
          }
          return true;
        }
      } else if (isDate(o1)) {
        if (!isDate(o2)) return false;
        return equals(o1.getTime(), o2.getTime());
      } else if (isRegExp(o1)) {
        return isRegExp(o2) ? o1.toString() == o2.toString() : false;
      } else {
        if (isScope(o1) || isScope(o2) || isWindow(o1) || isWindow(o2) ||
          isArray(o2) || isDate(o2) || isRegExp(o2)) return false;
        keySet = {};
        for (key in o1) {
          if (key.charAt(0) === '$' || isFunction(o1[key])) continue;
          if (!equals(o1[key], o2[key])) return false;
          keySet[key] = true;
        }
        for (key in o2) {
          if (!keySet.hasOwnProperty(key) &&
              key.charAt(0) !== '$' &&
              o2[key] !== undefined &&
              !isFunction(o2[key])) return false;
        }
        return true;
      }
    }
  }
  return false;
}

var csp = function() {
  if (isDefined(csp.isActive_)) return csp.isActive_;

  var active = !!(document.querySelector('[ng-csp]') ||
                  document.querySelector('[data-ng-csp]'));

  if (!active) {
    try {
      /* jshint -W031, -W054 */
      new Function('');
      /* jshint +W031, +W054 */
    } catch (e) {
      active = true;
    }
  }

  return (csp.isActive_ = active);
};



function concat(array1, array2, index) {
  return array1.concat(slice.call(array2, index));
}

function sliceArgs(args, startIndex) {
  return slice.call(args, startIndex || 0);
}


/* jshint -W101 */
/**
 * @ngdoc function
 * @name angular.bind
 * @module ng
 * @kind function
 *
 * @description
 * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for
 * `fn`). You can supply optional `args` that are prebound to the function. This feature is also
 * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as
 * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).
 *
 * @param {Object} self Context which `fn` should be evaluated in.
 * @param {function()} fn Function to be bound.
 * @param {...*} args Optional arguments to be prebound to the `fn` function call.
 * @returns {function()} Function that wraps the `fn` with all the specified bindings.
 */
/* jshint +W101 */
function bind(self, fn) {
  var curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];
  if (isFunction(fn) && !(fn instanceof RegExp)) {
    return curryArgs.length
      ? function() {
          return arguments.length
            ? fn.apply(self, concat(curryArgs, arguments, 0))
            : fn.apply(self, curryArgs);
        }
      : function() {
          return arguments.length
            ? fn.apply(self, arguments)
            : fn.call(self);
        };
  } else {
    // in IE, native methods are not functions so they cannot be bound (note: they don't need to be)
    return fn;
  }
}


function toJsonReplacer(key, value) {
  var val = value;

  if (typeof key === 'string' && key.charAt(0) === '$' && key.charAt(1) === '$') {
    val = undefined;
  } else if (isWindow(value)) {
    val = '$WINDOW';
  } else if (value &&  document === value) {
    val = '$DOCUMENT';
  } else if (isScope(value)) {
    val = '$SCOPE';
  }

  return val;
}


/**
 * @ngdoc function
 * @name angular.toJson
 * @module ng
 * @kind function
 *
 * @description
 * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be
 * stripped since angular uses this notation internally.
 *
 * @param {Object|Array|Date|string|number} obj Input to be serialized into JSON.
 * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.
 *    If set to an integer, the JSON output will contain that many spaces per indentation.
 * @returns {string|undefined} JSON-ified string representing `obj`.
 */
function toJson(obj, pretty) {
  if (typeof obj === 'undefined') return undefined;
  if (!isNumber(pretty)) {
    pretty = pretty ? 2 : null;
  }
  return JSON.stringify(obj, toJsonReplacer, pretty);
}


/**
 * @ngdoc function
 * @name angular.fromJson
 * @module ng
 * @kind function
 *
 * @description
 * Deserializes a JSON string.
 *
 * @param {string} json JSON string to deserialize.
 * @returns {Object|Array|string|number} Deserialized JSON string.
 */
function fromJson(json) {
  return isString(json)
      ? JSON.parse(json)
      : json;
}


/**
 * @returns {string} Returns the string representation of the element.
 */
function startingTag(element) {
  element = jqLite(element).clone();
  try {
    // turns out IE does not let you set .html() on elements which
    // are not allowed to have children. So we just ignore it.
    element.empty();
  } catch (e) {}
  var elemHtml = jqLite('<div>').append(element).html();
  try {
    return element[0].nodeType === NODE_TYPE_TEXT ? lowercase(elemHtml) :
        elemHtml.
          match(/^(<[^>]+>)/)[1].
          replace(/^<([\w\-]+)/, function(match, nodeName) { return '<' + lowercase(nodeName); });
  } catch (e) {
    return lowercase(elemHtml);
  }

}


/////////////////////////////////////////////////

/**
 * Tries to decode the URI component without throwing an exception.
 *
 * @private
 * @param str value potential URI component to check.
 * @returns {boolean} True if `value` can be decoded
 * with the decodeURIComponent function.
 */
function tryDecodeURIComponent(value) {
  try {
    return decodeURIComponent(value);
  } catch (e) {
    // Ignore any invalid uri component
  }
}


/**
 * Parses an escaped url query string into key-value pairs.
 * @returns {Object.<string,boolean|Array>}
 */
function parseKeyValue(/**string*/keyValue) {
  var obj = {}, key_value, key;
  forEach((keyValue || "").split('&'), function(keyValue) {
    if (keyValue) {
      key_value = keyValue.replace(/\+/g,'%20').split('=');
      key = tryDecodeURIComponent(key_value[0]);
      if (isDefined(key)) {
        var val = isDefined(key_value[1]) ? tryDecodeURIComponent(key_value[1]) : true;
        if (!hasOwnProperty.call(obj, key)) {
          obj[key] = val;
        } else if (isArray(obj[key])) {
          obj[key].push(val);
        } else {
          obj[key] = [obj[key],val];
        }
      }
    }
  });
  return obj;
}

function toKeyValue(obj) {
  var parts = [];
  forEach(obj, function(value, key) {
    if (isArray(value)) {
      forEach(value, function(arrayValue) {
        parts.push(encodeUriQuery(key, true) +
                   (arrayValue === true ? '' : '=' + encodeUriQuery(arrayValue, true)));
      });
    } else {
    parts.push(encodeUriQuery(key, true) +
               (value === true ? '' : '=' + encodeUriQuery(value, true)));
    }
  });
  return parts.length ? parts.join('&') : '';
}


/**
 * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
 * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path
 * segments:
 *    segment       = *pchar
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriSegment(val) {
  return encodeUriQuery(val, true).
             replace(/%26/gi, '&').
             replace(/%3D/gi, '=').
             replace(/%2B/gi, '+');
}


/**
 * This method is intended for encoding *key* or *value* parts of query component. We need a custom
 * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be
 * encoded per http://tools.ietf.org/html/rfc3986:
 *    query       = *( pchar / "/" / "?" )
 *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
 *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 *    pct-encoded   = "%" HEXDIG HEXDIG
 *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
 *                     / "*" / "+" / "," / ";" / "="
 */
function encodeUriQuery(val, pctEncodeSpaces) {
  return encodeURIComponent(val).
             replace(/%40/gi, '@').
             replace(/%3A/gi, ':').
             replace(/%24/g, '$').
             replace(/%2C/gi, ',').
             replace(/%3B/gi, ';').
             replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
}

var ngAttrPrefixes = ['ng-', 'data-ng-', 'ng:', 'x-ng-'];

function getNgAttribute(element, ngAttr) {
  var attr, i, ii = ngAttrPrefixes.length;
  element = jqLite(element);
  for (i = 0; i < ii; ++i) {
    attr = ngAttrPrefixes[i] + ngAttr;
    if (isString(attr = element.attr(attr))) {
      return attr;
    }
  }
  return null;
}

/**
 * @ngdoc directive
 * @name ngApp
 * @module ng
 *
 * @element ANY
 * @param {angular.Module} ngApp an optional application
 *   {@link angular.module module} name to load.
 * @param {boolean=} ngStrictDi if this attribute is present on the app element, the injector will be
 *   created in "strict-di" mode. This means that the application will fail to invoke functions which
 *   do not use explicit function annotation (and are thus unsuitable for minification), as described
 *   in {@link guide/di the Dependency Injection guide}, and useful debugging info will assist in
 *   tracking down the root of these bugs.
 *
 * @description
 *
 * Use this directive to **auto-bootstrap** an AngularJS application. The `ngApp` directive
 * designates the **root element** of the application and is typically placed near the root element
 * of the page - e.g. on the `<body>` or `<html>` tags.
 *
 * Only one AngularJS application can be auto-bootstrapped per HTML document. The first `ngApp`
 * found in the document will be used to define the root element to auto-bootstrap as an
 * application. To run multiple applications in an HTML document you must manually bootstrap them using
 * {@link angular.bootstrap} instead. AngularJS applications cannot be nested within each other.
 *
 * You can specify an **AngularJS module** to be used as the root module for the application.  This
 * module will be loaded into the {@link auto.$injector} when the application is bootstrapped. It
 * should contain the application code needed or have dependencies on other modules that will
 * contain the code. See {@link angular.module} for more information.
 *
 * In the example below if the `ngApp` directive were not placed on the `html` element then the
 * document would not be compiled, the `AppController` would not be instantiated and the `{{ a+b }}`
 * would not be resolved to `3`.
 *
 * `ngApp` is the easiest, and most common way to bootstrap an application.
 *
 <example module="ngAppDemo">
   <file name="index.html">
   <div ng-controller="ngAppDemoController">
     I can add: {{a}} + {{b}} =  {{ a+b }}
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppDemo', []).controller('ngAppDemoController', function($scope) {
     $scope.a = 1;
     $scope.b = 2;
   });
   </file>
 </example>
 *
 * Using `ngStrictDi`, you would see something like this:
 *
 <example ng-app-included="true">
   <file name="index.html">
   <div ng-app="ngAppStrictDemo" ng-strict-di>
       <div ng-controller="GoodController1">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style (see
              script.js for details)
           </p>
       </div>

       <div ng-controller="GoodController2">
           Name: <input ng-model="name"><br />
           Hello, {{name}}!

           <p>This renders because the controller does not fail to
              instantiate, by using explicit annotation style
              (see script.js for details)
           </p>
       </div>

       <div ng-controller="BadController">
           I can add: {{a}} + {{b}} =  {{ a+b }}

           <p>The controller could not be instantiated, due to relying
              on automatic function annotations (which are disabled in
              strict mode). As such, the content of this section is not
              interpolated, and there should be an error in your web console.
           </p>
       </div>
   </div>
   </file>
   <file name="script.js">
   angular.module('ngAppStrictDemo', [])
     // BadController will fail to instantiate, due to relying on automatic function annotation,
     // rather than an explicit annotation
     .controller('BadController', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     })
     // Unlike BadController, GoodController1 and GoodController2 will not fail to be instantiated,
     // due to using explicit annotations using the array style and $inject property, respectively.
     .controller('GoodController1', ['$scope', function($scope) {
       $scope.a = 1;
       $scope.b = 2;
     }])
     .controller('GoodController2', GoodController2);
     function GoodController2($scope) {
       $scope.name = "World";
     }
     GoodController2.$inject = ['$scope'];
   </file>
   <file name="style.css">
   div[ng-controller] {
       margin-bottom: 1em;
       -webkit-border-radius: 4px;
       border-radius: 4px;
       border: 1px solid;
       padding: .5em;
   }
   div[ng-controller^=Good] {
       border-color: #d6e9c6;
       background-color: #dff0d8;
       color: #3c763d;
   }
   div[ng-controller^=Bad] {
       border-color: #ebccd1;
       background-color: #f2dede;
       color: #a94442;
       margin-bottom: 0;
   }
   </file>
 </example>
 */
function angularInit(element, bootstrap) {
  var appElement,
      module,
      config = {};

  // The element `element` has priority over any other element
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';

    if (!appElement && element.hasAttribute && element.hasAttribute(name)) {
      appElement = element;
      module = element.getAttribute(name);
    }
  });
  forEach(ngAttrPrefixes, function(prefix) {
    var name = prefix + 'app';
    var candidate;

    if (!appElement && (candidate = element.querySelector('[' + name.replace(':', '\\:') + ']'))) {
      appElement = candidate;
      module = candidate.getAttribute(name);
    }
  });
  if (appElement) {
    config.strictDi = getNgAttribute(appElement, "strict-di") !== null;
    bootstrap(appElement, module ? [module] : [], config);
  }
}

/**
 * @ngdoc function
 * @name angular.bootstrap
 * @module ng
 * @description
 * Use this function to manually start up angular application.
 *
 * See: {@link guide/bootstrap Bootstrap}
 *
 * Note that Protractor based end-to-end tests cannot use this function to bootstrap manually.
 * They must use {@link ng.directive:ngApp ngApp}.
 *
 * Angular will detect if it has been loaded into the browser more than once and only allow the
 * first loaded script to be bootstrapped and will report a warning to the browser console for
 * each of the subsequent scripts. This prevents strange results in applications, where otherwise
 * multiple instances of Angular try to work on the DOM.
 *
 * ```html
 * <!doctype html>
 * <html>
 * <body>
 * <div ng-controller="WelcomeController">
 *   {{greeting}}
 * </div>
 *
 * <script src="angular.js"></script>
 * <script>
 *   var app = angular.module('demo', [])
 *   .controller('WelcomeController', function($scope) {
 *       $scope.greeting = 'Welcome!';
 *   });
 *   angular.bootstrap(document, ['demo']);
 * </script>
 * </body>
 * </html>
 * ```
 *
 * @param {DOMElement} element DOM element which is the root of angular application.
 * @param {Array<String|Function|Array>=} modules an array of modules to load into the application.
 *     Each item in the array should be the name of a predefined module or a (DI annotated)
 *     function that will be invoked by the injector as a `config` block.
 *     See: {@link angular.module modules}
 * @param {Object=} config an object for defining configuration options for the application. The
 *     following keys are supported:
 *
 * * `strictDi` - disable automatic function annotation for the application. This is meant to
 *   assist in finding bugs which break minified code. Defaults to `false`.
 *
 * @returns {auto.$injector} Returns the newly created injector for this app.
 */
function bootstrap(element, modules, config) {
  if (!isObject(config)) config = {};
  var defaultConfig = {
    strictDi: false
  };
  config = extend(defaultConfig, config);
  var doBootstrap = function() {
    element = jqLite(element);

    if (element.injector()) {
      var tag = (element[0] === document) ? 'document' : startingTag(element);
      //Encode angle brackets to prevent input from being sanitized to empty string #8683
      throw ngMinErr(
          'btstrpd',
          "App Already Bootstrapped with this Element '{0}'",
          tag.replace(/</,'&lt;').replace(/>/,'&gt;'));
    }

    modules = modules || [];
    modules.unshift(['$provide', function($provide) {
      $provide.value('$rootElement', element);
    }]);

    if (config.debugInfoEnabled) {
      // Pushing so that this overrides `debugInfoEnabled` setting defined in user's `modules`.
      modules.push(['$compileProvider', function($compileProvider) {
        $compileProvider.debugInfoEnabled(true);
      }]);
    }

    modules.unshift('ng');
    var injector = createInjector(modules, config.strictDi);
    injector.invoke(['$rootScope', '$rootElement', '$compile', '$injector',
       function bootstrapApply(scope, element, compile, injector) {
        scope.$apply(function() {
          element.data('$injector', injector);
          compile(element)(scope);
        });
      }]
    );
    return injector;
  };

  var NG_ENABLE_DEBUG_INFO = /^NG_ENABLE_DEBUG_INFO!/;
  var NG_DEFER_BOOTSTRAP = /^NG_DEFER_BOOTSTRAP!/;

  if (window && NG_ENABLE_DEBUG_INFO.test(window.name)) {
    config.debugInfoEnabled = true;
    window.name = window.name.replace(NG_ENABLE_DEBUG_INFO, '');
  }

  if (window && !NG_DEFER_BOOTSTRAP.test(window.name)) {
    return doBootstrap();
  }

  window.name = window.name.replace(NG_DEFER_BOOTSTRAP, '');
  angular.resumeBootstrap = function(extraModules) {
    forEach(extraModules, function(module) {
      modules.push(module);
    });
    return doBootstrap();
  };

  if (isFunction(angular.resumeDeferredBootstrap)) {
    angular.resumeDeferredBootstrap();
  }
}

/**
 * @ngdoc function
 * @name angular.reloadWithDebugInfo
 * @module ng
 * @description
 * Use this function to reload the current application with debug information turned on.
 * This takes precedence over a call to `$compileProvider.debugInfoEnabled(false)`.
 *
 * See {@link ng.$compileProvider#debugInfoEnabled} for more.
 */
function reloadWithDebugInfo() {
  window.name = 'NG_ENABLE_DEBUG_INFO!' + window.name;
  window.location.reload();
}

/**
 * @name angular.getTestability
 * @module ng
 * @description
 * Get the testability service for the instance of Angular on the given
 * element.
 * @param {DOMElement} element DOM element which is the root of angular application.
 */
function getTestability(rootElement) {
  var injector = angular.element(rootElement).injector();
  if (!injector) {
    throw ngMinErr('test',
      'no injector found for element argument to getTestability');
  }
  return injector.get('$$testability');
}

var SNAKE_CASE_REGEXP = /[A-Z]/g;
function snake_case(name, separator) {
  separator = separator || '_';
  return name.replace(SNAKE_CASE_REGEXP, function(letter, pos) {
    return (pos ? separator : '') + letter.toLowerCase();
  });
}

var bindJQueryFired = false;
var skipDestroyOnNextJQueryCleanData;
function bindJQuery() {
  var originalCleanData;

  if (bindJQueryFired) {
    return;
  }

  // bind to jQuery if present;
  jQuery = window.jQuery;
  // Use jQuery if it exists with proper functionality, otherwise default to us.
  // Angular 1.2+ requires jQuery 1.7+ for on()/off() support.
  // Angular 1.3+ technically requires at least jQuery 2.1+ but it may work with older
  // versions. It will not work for sure with jQuery <1.7, though.
  if (jQuery && jQuery.fn.on) {
    jqLite = jQuery;
    extend(jQuery.fn, {
      scope: JQLitePrototype.scope,
      isolateScope: JQLitePrototype.isolateScope,
      controller: JQLitePrototype.controller,
      injector: JQLitePrototype.injector,
      inheritedData: JQLitePrototype.inheritedData
    });

    // All nodes removed from the DOM via various jQuery APIs like .remove()
    // are passed through jQuery.cleanData. Monkey-patch this method to fire
    // the $destroy event on all removed nodes.
    originalCleanData = jQuery.cleanData;
    jQuery.cleanData = function(elems) {
      var events;
      if (!skipDestroyOnNextJQueryCleanData) {
        for (var i = 0, elem; (elem = elems[i]) != null; i++) {
          events = jQuery._data(elem, "events");
          if (events && events.$destroy) {
            jQuery(elem).triggerHandler('$destroy');
          }
        }
      } else {
        skipDestroyOnNextJQueryCleanData = false;
      }
      originalCleanData(elems);
    };
  } else {
    jqLite = JQLite;
  }

  angular.element = jqLite;

  // Prevent double-proxying.
  bindJQueryFired = true;
}

/**
 * throw error if the argument is falsy.
 */
function assertArg(arg, name, reason) {
  if (!arg) {
    throw ngMinErr('areq', "Argument '{0}' is {1}", (name || '?'), (reason || "required"));
  }
  return arg;
}

function assertArgFn(arg, name, acceptArrayAnnotation) {
  if (acceptArrayAnnotation && isArray(arg)) {
      arg = arg[arg.length - 1];
  }

  assertArg(isFunction(arg), name, 'not a function, got ' +
      (arg && typeof arg === 'object' ? arg.constructor.name || 'Object' : typeof arg));
  return arg;
}

/**
 * throw error if the name given is hasOwnProperty
 * @param  {String} name    the name to test
 * @param  {String} context the context in which the name is used, such as module or directive
 */
function assertNotHasOwnProperty(name, context) {
  if (name === 'hasOwnProperty') {
    throw ngMinErr('badname', "hasOwnProperty is not a valid {0} name", context);
  }
}

/**
 * Return the value accessible from the object by path. Any undefined traversals are ignored
 * @param {Object} obj starting object
 * @param {String} path path to traverse
 * @param {boolean} [bindFnToScope=true]
 * @returns {Object} value as accessible by path
 */
//TODO(misko): this function needs to be removed
function getter(obj, path, bindFnToScope) {
  if (!path) return obj;
  var keys = path.split('.');
  var key;
  var lastInstance = obj;
  var len = keys.length;

  for (var i = 0; i < len; i++) {
    key = keys[i];
    if (obj) {
      obj = (lastInstance = obj)[key];
    }
  }
  if (!bindFnToScope && isFunction(obj)) {
    return bind(lastInstance, obj);
  }
  return obj;
}

/**
 * Return the DOM siblings between the first and last node in the given array.
 * @param {Array} array like object
 * @returns {jqLite} jqLite collection containing the nodes
 */
function getBlockNodes(nodes) {
  // TODO(perf): just check if all items in `nodes` are siblings and if they are return the original
  //             collection, otherwise update the original collection.
  var node = nodes[0];
  var endNode = nodes[nodes.length - 1];
  var blockNodes = [node];

  do {
    node = node.nextSibling;
    if (!node) break;
    blockNodes.push(node);
  } while (node !== endNode);

  return jqLite(blockNodes);
}


/**
 * Creates a new object without a prototype. This object is useful for lookup without having to
 * guard against prototypically inherited properties via hasOwnProperty.
 *
 * Related micro-benchmarks:
 * - http://jsperf.com/object-create2
 * - http://jsperf.com/proto-map-lookup/2
 * - http://jsperf.com/for-in-vs-object-keys2
 *
 * @returns {Object}
 */
function createMap() {
  return Object.create(null);
}

var NODE_TYPE_ELEMENT = 1;
var NODE_TYPE_ATTRIBUTE = 2;
var NODE_TYPE_TEXT = 3;
var NODE_TYPE_COMMENT = 8;
var NODE_TYPE_DOCUMENT = 9;
var NODE_TYPE_DOCUMENT_FRAGMENT = 11;

/**
 * @ngdoc type
 * @name angular.Module
 * @module ng
 * @description
 *
 * Interface for configuring angular {@link angular.module modules}.
 */

function setupModuleLoader(window) {

  var $injectorMinErr = minErr('$injector');
  var ngMinErr = minErr('ng');

  function ensure(obj, name, factory) {
    return obj[name] || (obj[name] = factory());
  }

  var angular = ensure(window, 'angular', Object);

  // We need to expose `angular.$$minErr` to modules such as `ngResource` that reference it during bootstrap
  angular.$$minErr = angular.$$minErr || minErr;

  return ensure(angular, 'module', function() {
    /** @type {Object.<string, angular.Module>} */
    var modules = {};

    /**
     * @ngdoc function
     * @name angular.module
     * @module ng
     * @description
     *
     * The `angular.module` is a global place for creating, registering and retrieving Angular
     * modules.
     * All modules (angular core or 3rd party) that should be available to an application must be
     * registered using this mechanism.
     *
     * When passed two or more arguments, a new module is created.  If passed only one argument, an
     * existing module (the name passed as the first argument to `module`) is retrieved.
     *
     *
     * # Module
     *
     * A module is a collection of services, directives, controllers, filters, and configuration information.
     * `angular.module` is used to configure the {@link auto.$injector $injector}.
     *
     * ```js
     * // Create a new module
     * var myModule = angular.module('myModule', []);
     *
     * // register a new service
     * myModule.value('appName', 'MyCoolApp');
     *
     * // configure existing services inside initialization blocks.
     * myModule.config(['$locationProvider', function($locationProvider) {
     *   // Configure existing providers
     *   $locationProvider.hashPrefix('!');
     * }]);
     * ```
     *
     * Then you can create an injector and load your modules like this:
     *
     * ```js
     * var injector = angular.injector(['ng', 'myModule'])
     * ```
     *
     * However it's more likely that you'll just use
     * {@link ng.directive:ngApp ngApp} or
     * {@link angular.bootstrap} to simplify this process for you.
     *
     * @param {!string} name The name of the module to create or retrieve.
     * @param {!Array.<string>=} requires If specified then new module is being created. If
     *        unspecified then the module is being retrieved for further configuration.
     * @param {Function=} configFn Optional configuration function for the module. Same as
     *        {@link angular.Module#config Module#config()}.
     * @returns {module} new module with the {@link angular.Module} api.
     */
    return function module(name, requires, configFn) {
      var assertNotHasOwnProperty = function(name, context) {
        if (name === 'hasOwnProperty') {
          throw ngMinErr('badname', 'hasOwnProperty is not a valid {0} name', context);
        }
      };

      assertNotHasOwnProperty(name, 'module');
      if (requires && modules.hasOwnProperty(name)) {
        modules[name] = null;
      }
      return ensure(modules, name, function() {
        if (!requires) {
          throw $injectorMinErr('nomod', "Module '{0}' is not available! You either misspelled " +
             "the module name or forgot to load it. If registering a module ensure that you " +
             "specify the dependencies as the second argument.", name);
        }

        /** @type {!Array.<Array.<*>>} */
        var invokeQueue = [];

        /** @type {!Array.<Function>} */
        var configBlocks = [];

        /** @type {!Array.<Function>} */
        var runBlocks = [];

        var config = invokeLater('$injector', 'invoke', 'push', configBlocks);

        /** @type {angular.Module} */
        var moduleInstance = {
          // Private state
          _invokeQueue: invokeQueue,
          _configBlocks: configBlocks,
          _runBlocks: runBlocks,

          /**
           * @ngdoc property
           * @name angular.Module#requires
           * @module ng
           *
           * @description
           * Holds the list of modules which the injector will load before the current module is
           * loaded.
           */
          requires: requires,

          /**
           * @ngdoc property
           * @name angular.Module#name
           * @module ng
           *
           * @description
           * Name of the module.
           */
          name: name,


          /**
           * @ngdoc method
           * @name angular.Module#provider
           * @module ng
           * @param {string} name service name
           * @param {Function} providerType Construction function for creating new instance of the
           *                                service.
           * @description
           * See {@link auto.$provide#provider $provide.provider()}.
           */
          provider: invokeLater('$provide', 'provider'),

          /**
           * @ngdoc method
           * @name angular.Module#factory
           * @module ng
           * @param {string} name service name
           * @param {Function} providerFunction Function for creating new instance of the service.
           * @description
           * See {@link auto.$provide#factory $provide.factory()}.
           */
          factory: invokeLater('$provide', 'factory'),

          /**
           * @ngdoc method
           * @name angular.Module#service
           * @module ng
           * @param {string} name service name
           * @param {Function} constructor A constructor function that will be instantiated.
           * @description
           * See {@link auto.$provide#service $provide.service()}.
           */
          service: invokeLater('$provide', 'service'),

          /**
           * @ngdoc method
           * @name angular.Module#value
           * @module ng
           * @param {string} name service name
           * @param {*} object Service instance object.
           * @description
           * See {@link auto.$provide#value $provide.value()}.
           */
          value: invokeLater('$provide', 'value'),

          /**
           * @ngdoc method
           * @name angular.Module#constant
           * @module ng
           * @param {string} name constant name
           * @param {*} object Constant value.
           * @description
           * Because the constant are fixed, they get applied before other provide methods.
           * See {@link auto.$provide#constant $provide.constant()}.
           */
          constant: invokeLater('$provide', 'constant', 'unshift'),

          /**
           * @ngdoc method
           * @name angular.Module#animation
           * @module ng
           * @param {string} name animation name
           * @param {Function} animationFactory Factory function for creating new instance of an
           *                                    animation.
           * @description
           *
           * **NOTE**: animations take effect only if the **ngAnimate** module is loaded.
           *
           *
           * Defines an animation hook that can be later used with
           * {@link ngAnimate.$animate $animate} service and directives that use this service.
           *
           * ```js
           * module.animation('.animation-name', function($inject1, $inject2) {
           *   return {
           *     eventName : function(element, done) {
           *       //code to run the animation
           *       //once complete, then run done()
           *       return function cancellationFunction(element) {
           *         //code to cancel the animation
           *       }
           *     }
           *   }
           * })
           * ```
           *
           * See {@link ng.$animateProvider#register $animateProvider.register()} and
           * {@link ngAnimate ngAnimate module} for more information.
           */
          animation: invokeLater('$animateProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#filter
           * @module ng
           * @param {string} name Filter name - this must be a valid angular expression identifier
           * @param {Function} filterFactory Factory function for creating new instance of filter.
           * @description
           * See {@link ng.$filterProvider#register $filterProvider.register()}.
           *
           * <div class="alert alert-warning">
           * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
           * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
           * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
           * (`myapp_subsection_filterx`).
           * </div>
           */
          filter: invokeLater('$filterProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#controller
           * @module ng
           * @param {string|Object} name Controller name, or an object map of controllers where the
           *    keys are the names and the values are the constructors.
           * @param {Function} constructor Controller constructor function.
           * @description
           * See {@link ng.$controllerProvider#register $controllerProvider.register()}.
           */
          controller: invokeLater('$controllerProvider', 'register'),

          /**
           * @ngdoc method
           * @name angular.Module#directive
           * @module ng
           * @param {string|Object} name Directive name, or an object map of directives where the
           *    keys are the names and the values are the factories.
           * @param {Function} directiveFactory Factory function for creating new instance of
           * directives.
           * @description
           * See {@link ng.$compileProvider#directive $compileProvider.directive()}.
           */
          directive: invokeLater('$compileProvider', 'directive'),

          /**
           * @ngdoc method
           * @name angular.Module#config
           * @module ng
           * @param {Function} configFn Execute this function on module load. Useful for service
           *    configuration.
           * @description
           * Use this method to register work which needs to be performed on module loading.
           * For more about how to configure services, see
           * {@link providers#provider-recipe Provider Recipe}.
           */
          config: config,

          /**
           * @ngdoc method
           * @name angular.Module#run
           * @module ng
           * @param {Function} initializationFn Execute this function after injector creation.
           *    Useful for application initialization.
           * @description
           * Use this method to register work which should be performed when the injector is done
           * loading all modules.
           */
          run: function(block) {
            runBlocks.push(block);
            return this;
          }
        };

        if (configFn) {
          config(configFn);
        }

        return moduleInstance;

        /**
         * @param {string} provider
         * @param {string} method
         * @param {String=} insertMethod
         * @returns {angular.Module}
         */
        function invokeLater(provider, method, insertMethod, queue) {
          if (!queue) queue = invokeQueue;
          return function() {
            queue[insertMethod || 'push']([provider, method, arguments]);
            return moduleInstance;
          };
        }
      });
    };
  });

}

/* global: toDebugString: true */

function serializeObject(obj) {
  var seen = [];

  return JSON.stringify(obj, function(key, val) {
    val = toJsonReplacer(key, val);
    if (isObject(val)) {

      if (seen.indexOf(val) >= 0) return '<<already seen>>';

      seen.push(val);
    }
    return val;
  });
}

function toDebugString(obj) {
  if (typeof obj === 'function') {
    return obj.toString().replace(/ \{[\s\S]*$/, '');
  } else if (typeof obj === 'undefined') {
    return 'undefined';
  } else if (typeof obj !== 'string') {
    return serializeObject(obj);
  }
  return obj;
}

/* global angularModule: true,
  version: true,

  $LocaleProvider,
  $CompileProvider,

  htmlAnchorDirective,
  inputDirective,
  inputDirective,
  formDirective,
  scriptDirective,
  selectDirective,
  styleDirective,
  optionDirective,
  ngBindDirective,
  ngBindHtmlDirective,
  ngBindTemplateDirective,
  ngClassDirective,
  ngClassEvenDirective,
  ngClassOddDirective,
  ngCspDirective,
  ngCloakDirective,
  ngControllerDirective,
  ngFormDirective,
  ngHideDirective,
  ngIfDirective,
  ngIncludeDirective,
  ngIncludeFillContentDirective,
  ngInitDirective,
  ngNonBindableDirective,
  ngPluralizeDirective,
  ngRepeatDirective,
  ngShowDirective,
  ngStyleDirective,
  ngSwitchDirective,
  ngSwitchWhenDirective,
  ngSwitchDefaultDirective,
  ngOptionsDirective,
  ngTranscludeDirective,
  ngModelDirective,
  ngListDirective,
  ngChangeDirective,
  patternDirective,
  patternDirective,
  requiredDirective,
  requiredDirective,
  minlengthDirective,
  minlengthDirective,
  maxlengthDirective,
  maxlengthDirective,
  ngValueDirective,
  ngModelOptionsDirective,
  ngAttributeAliasDirectives,
  ngEventDirectives,

  $AnchorScrollProvider,
  $AnimateProvider,
  $BrowserProvider,
  $CacheFactoryProvider,
  $ControllerProvider,
  $DocumentProvider,
  $ExceptionHandlerProvider,
  $FilterProvider,
  $InterpolateProvider,
  $IntervalProvider,
  $HttpProvider,
  $HttpBackendProvider,
  $LocationProvider,
  $LogProvider,
  $ParseProvider,
  $RootScopeProvider,
  $QProvider,
  $$QProvider,
  $$SanitizeUriProvider,
  $SceProvider,
  $SceDelegateProvider,
  $SnifferProvider,
  $TemplateCacheProvider,
  $TemplateRequestProvider,
  $$TestabilityProvider,
  $TimeoutProvider,
  $$RAFProvider,
  $$AsyncCallbackProvider,
  $WindowProvider,
  $$jqLiteProvider
*/


/**
 * @ngdoc object
 * @name angular.version
 * @module ng
 * @description
 * An object that contains information about the current AngularJS version. This object has the
 * following properties:
 *
 * - `full` – `{string}` – Full version string, such as "0.9.18".
 * - `major` – `{number}` – Major version number, such as "0".
 * - `minor` – `{number}` – Minor version number, such as "9".
 * - `dot` – `{number}` – Dot version number, such as "18".
 * - `codeName` – `{string}` – Code name of the release, such as "jiggling-armfat".
 */
var version = {
  full: '1.3.16',    // all of these placeholder strings will be replaced by grunt's
  major: 1,    // package task
  minor: 3,
  dot: 16,
  codeName: 'cookie-oatmealification'
};


function publishExternalAPI(angular) {
  extend(angular, {
    'bootstrap': bootstrap,
    'copy': copy,
    'extend': extend,
    'equals': equals,
    'element': jqLite,
    'forEach': forEach,
    'injector': createInjector,
    'noop': noop,
    'bind': bind,
    'toJson': toJson,
    'fromJson': fromJson,
    'identity': identity,
    'isUndefined': isUndefined,
    'isDefined': isDefined,
    'isString': isString,
    'isFunction': isFunction,
    'isObject': isObject,
    'isNumber': isNumber,
    'isElement': isElement,
    'isArray': isArray,
    'version': version,
    'isDate': isDate,
    'lowercase': lowercase,
    'uppercase': uppercase,
    'callbacks': {counter: 0},
    'getTestability': getTestability,
    '$$minErr': minErr,
    '$$csp': csp,
    'reloadWithDebugInfo': reloadWithDebugInfo
  });

  angularModule = setupModuleLoader(window);
  try {
    angularModule('ngLocale');
  } catch (e) {
    angularModule('ngLocale', []).provider('$locale', $LocaleProvider);
  }

  angularModule('ng', ['ngLocale'], ['$provide',
    function ngModule($provide) {
      // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.
      $provide.provider({
        $$sanitizeUri: $$SanitizeUriProvider
      });
      $provide.provider('$compile', $CompileProvider).
        directive({
            a: htmlAnchorDirective,
            input: inputDirective,
            textarea: inputDirective,
            form: formDirective,
            script: scriptDirective,
            select: selectDirective,
            style: styleDirective,
            option: optionDirective,
            ngBind: ngBindDirective,
            ngBindHtml: ngBindHtmlDirective,
            ngBindTemplate: ngBindTemplateDirective,
            ngClass: ngClassDirective,
            ngClassEven: ngClassEvenDirective,
            ngClassOdd: ngClassOddDirective,
            ngCloak: ngCloakDirective,
            ngController: ngControllerDirective,
            ngForm: ngFormDirective,
            ngHide: ngHideDirective,
            ngIf: ngIfDirective,
            ngInclude: ngIncludeDirective,
            ngInit: ngInitDirective,
            ngNonBindable: ngNonBindableDirective,
            ngPluralize: ngPluralizeDirective,
            ngRepeat: ngRepeatDirective,
            ngShow: ngShowDirective,
            ngStyle: ngStyleDirective,
            ngSwitch: ngSwitchDirective,
            ngSwitchWhen: ngSwitchWhenDirective,
            ngSwitchDefault: ngSwitchDefaultDirective,
            ngOptions: ngOptionsDirective,
            ngTransclude: ngTranscludeDirective,
            ngModel: ngModelDirective,
            ngList: ngListDirective,
            ngChange: ngChangeDirective,
            pattern: patternDirective,
            ngPattern: patternDirective,
            required: requiredDirective,
            ngRequired: requiredDirective,
            minlength: minlengthDirective,
            ngMinlength: minlengthDirective,
            maxlength: maxlengthDirective,
            ngMaxlength: maxlengthDirective,
            ngValue: ngValueDirective,
            ngModelOptions: ngModelOptionsDirective
        }).
        directive({
          ngInclude: ngIncludeFillContentDirective
        }).
        directive(ngAttributeAliasDirectives).
        directive(ngEventDirectives);
      $provide.provider({
        $anchorScroll: $AnchorScrollProvider,
        $animate: $AnimateProvider,
        $browser: $BrowserProvider,
        $cacheFactory: $CacheFactoryProvider,
        $controller: $ControllerProvider,
        $document: $DocumentProvider,
        $exceptionHandler: $ExceptionHandlerProvider,
        $filter: $FilterProvider,
        $interpolate: $InterpolateProvider,
        $interval: $IntervalProvider,
        $http: $HttpProvider,
        $httpBackend: $HttpBackendProvider,
        $location: $LocationProvider,
        $log: $LogProvider,
        $parse: $ParseProvider,
        $rootScope: $RootScopeProvider,
        $q: $QProvider,
        $$q: $$QProvider,
        $sce: $SceProvider,
        $sceDelegate: $SceDelegateProvider,
        $sniffer: $SnifferProvider,
        $templateCache: $TemplateCacheProvider,
        $templateRequest: $TemplateRequestProvider,
        $$testability: $$TestabilityProvider,
        $timeout: $TimeoutProvider,
        $window: $WindowProvider,
        $$rAF: $$RAFProvider,
        $$asyncCallback: $$AsyncCallbackProvider,
        $$jqLite: $$jqLiteProvider
      });
    }
  ]);
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* global JQLitePrototype: true,
  addEventListenerFn: true,
  removeEventListenerFn: true,
  BOOLEAN_ATTR: true,
  ALIASED_ATTR: true,
*/

//////////////////////////////////
//JQLite
//////////////////////////////////

/**
 * @ngdoc function
 * @name angular.element
 * @module ng
 * @kind function
 *
 * @description
 * Wraps a raw DOM element or HTML string as a [jQuery](http://jquery.com) element.
 *
 * If jQuery is available, `angular.element` is an alias for the
 * [jQuery](http://api.jquery.com/jQuery/) function. If jQuery is not available, `angular.element`
 * delegates to Angular's built-in subset of jQuery, called "jQuery lite" or "jqLite."
 *
 * <div class="alert alert-success">jqLite is a tiny, API-compatible subset of jQuery that allows
 * Angular to manipulate the DOM in a cross-browser compatible way. **jqLite** implements only the most
 * commonly needed functionality with the goal of having a very small footprint.</div>
 *
 * To use `jQuery`, simply ensure it is loaded before the `angular.js` file.
 *
 * <div class="alert">**Note:** all element references in Angular are always wrapped with jQuery or
 * jqLite; they are never raw DOM references.</div>
 *
 * ## Angular's jqLite
 * jqLite provides only the following jQuery methods:
 *
 * - [`addClass()`](http://api.jquery.com/addClass/)
 * - [`after()`](http://api.jquery.com/after/)
 * - [`append()`](http://api.jquery.com/append/)
 * - [`attr()`](http://api.jquery.com/attr/) - Does not support functions as parameters
 * - [`bind()`](http://api.jquery.com/bind/) - Does not support namespaces, selectors or eventData
 * - [`children()`](http://api.jquery.com/children/) - Does not support selectors
 * - [`clone()`](http://api.jquery.com/clone/)
 * - [`contents()`](http://api.jquery.com/contents/)
 * - [`css()`](http://api.jquery.com/css/) - Only retrieves inline-styles, does not call `getComputedStyle()`. As a setter, does not convert numbers to strings or append 'px'.
 * - [`data()`](http://api.jquery.com/data/)
 * - [`detach()`](http://api.jquery.com/detach/)
 * - [`empty()`](http://api.jquery.com/empty/)
 * - [`eq()`](http://api.jquery.com/eq/)
 * - [`find()`](http://api.jquery.com/find/) - Limited to lookups by tag name
 * - [`hasClass()`](http://api.jquery.com/hasClass/)
 * - [`html()`](http://api.jquery.com/html/)
 * - [`next()`](http://api.jquery.com/next/) - Does not support selectors
 * - [`on()`](http://api.jquery.com/on/) - Does not support namespaces, selectors or eventData
 * - [`off()`](http://api.jquery.com/off/) - Does not support namespaces or selectors
 * - [`one()`](http://api.jquery.com/one/) - Does not support namespaces or selectors
 * - [`parent()`](http://api.jquery.com/parent/) - Does not support selectors
 * - [`prepend()`](http://api.jquery.com/prepend/)
 * - [`prop()`](http://api.jquery.com/prop/)
 * - [`ready()`](http://api.jquery.com/ready/)
 * - [`remove()`](http://api.jquery.com/remove/)
 * - [`removeAttr()`](http://api.jquery.com/removeAttr/)
 * - [`removeClass()`](http://api.jquery.com/removeClass/)
 * - [`removeData()`](http://api.jquery.com/removeData/)
 * - [`replaceWith()`](http://api.jquery.com/replaceWith/)
 * - [`text()`](http://api.jquery.com/text/)
 * - [`toggleClass()`](http://api.jquery.com/toggleClass/)
 * - [`triggerHandler()`](http://api.jquery.com/triggerHandler/) - Passes a dummy event object to handlers.
 * - [`unbind()`](http://api.jquery.com/unbind/) - Does not support namespaces
 * - [`val()`](http://api.jquery.com/val/)
 * - [`wrap()`](http://api.jquery.com/wrap/)
 *
 * ## jQuery/jqLite Extras
 * Angular also provides the following additional methods and events to both jQuery and jqLite:
 *
 * ### Events
 * - `$destroy` - AngularJS intercepts all jqLite/jQuery's DOM destruction apis and fires this event
 *    on all DOM nodes being removed.  This can be used to clean up any 3rd party bindings to the DOM
 *    element before it is removed.
 *
 * ### Methods
 * - `controller(name)` - retrieves the controller of the current element or its parent. By default
 *   retrieves controller associated with the `ngController` directive. If `name` is provided as
 *   camelCase directive name, then the controller for this directive will be retrieved (e.g.
 *   `'ngModel'`).
 * - `injector()` - retrieves the injector of the current element or its parent.
 * - `scope()` - retrieves the {@link ng.$rootScope.Scope scope} of the current
 *   element or its parent. Requires {@link guide/production#disabling-debug-data Debug Data} to
 *   be enabled.
 * - `isolateScope()` - retrieves an isolate {@link ng.$rootScope.Scope scope} if one is attached directly to the
 *   current element. This getter should be used only on elements that contain a directive which starts a new isolate
 *   scope. Calling `scope()` on this element always returns the original non-isolate scope.
 *   Requires {@link guide/production#disabling-debug-data Debug Data} to be enabled.
 * - `inheritedData()` - same as `data()`, but walks up the DOM until a value is found or the top
 *   parent element is reached.
 *
 * @param {string|DOMElement} element HTML string or DOMElement to be wrapped into jQuery.
 * @returns {Object} jQuery object.
 */

JQLite.expando = 'ng339';

var jqCache = JQLite.cache = {},
    jqId = 1,
    addEventListenerFn = function(element, type, fn) {
      element.addEventListener(type, fn, false);
    },
    removeEventListenerFn = function(element, type, fn) {
      element.removeEventListener(type, fn, false);
    };

/*
 * !!! This is an undocumented "private" function !!!
 */
JQLite._data = function(node) {
  //jQuery always returns an object on cache miss
  return this.cache[node[this.expando]] || {};
};

function jqNextId() { return ++jqId; }


var SPECIAL_CHARS_REGEXP = /([\:\-\_]+(.))/g;
var MOZ_HACK_REGEXP = /^moz([A-Z])/;
var MOUSE_EVENT_MAP= { mouseleave: "mouseout", mouseenter: "mouseover"};
var jqLiteMinErr = minErr('jqLite');

/**
 * Converts snake_case to camelCase.
 * Also there is special case for Moz prefix starting with upper case letter.
 * @param name Name to normalize
 */
function camelCase(name) {
  return name.
    replace(SPECIAL_CHARS_REGEXP, function(_, separator, letter, offset) {
      return offset ? letter.toUpperCase() : letter;
    }).
    replace(MOZ_HACK_REGEXP, 'Moz$1');
}

var SINGLE_TAG_REGEXP = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
var HTML_REGEXP = /<|&#?\w+;/;
var TAG_NAME_REGEXP = /<([\w:]+)/;
var XHTML_TAG_REGEXP = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi;

var wrapMap = {
  'option': [1, '<select multiple="multiple">', '</select>'],

  'thead': [1, '<table>', '</table>'],
  'col': [2, '<table><colgroup>', '</colgroup></table>'],
  'tr': [2, '<table><tbody>', '</tbody></table>'],
  'td': [3, '<table><tbody><tr>', '</tr></tbody></table>'],
  '_default': [0, "", ""]
};

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function jqLiteIsTextNode(html) {
  return !HTML_REGEXP.test(html);
}

function jqLiteAcceptsData(node) {
  // The window object can accept data but has no nodeType
  // Otherwise we are only interested in elements (1) and documents (9)
  var nodeType = node.nodeType;
  return nodeType === NODE_TYPE_ELEMENT || !nodeType || nodeType === NODE_TYPE_DOCUMENT;
}

function jqLiteBuildFragment(html, context) {
  var tmp, tag, wrap,
      fragment = context.createDocumentFragment(),
      nodes = [], i;

  if (jqLiteIsTextNode(html)) {
    // Convert non-html into a text node
    nodes.push(context.createTextNode(html));
  } else {
    // Convert html into DOM nodes
    tmp = tmp || fragment.appendChild(context.createElement("div"));
    tag = (TAG_NAME_REGEXP.exec(html) || ["", ""])[1].toLowerCase();
    wrap = wrapMap[tag] || wrapMap._default;
    tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];

    // Descend through wrappers to the right content
    i = wrap[0];
    while (i--) {
      tmp = tmp.lastChild;
    }

    nodes = concat(nodes, tmp.childNodes);

    tmp = fragment.firstChild;
    tmp.textContent = "";
  }

  // Remove wrapper from fragment
  fragment.textContent = "";
  fragment.innerHTML = ""; // Clear inner HTML
  forEach(nodes, function(node) {
    fragment.appendChild(node);
  });

  return fragment;
}

function jqLiteParseHTML(html, context) {
  context = context || document;
  var parsed;

  if ((parsed = SINGLE_TAG_REGEXP.exec(html))) {
    return [context.createElement(parsed[1])];
  }

  if ((parsed = jqLiteBuildFragment(html, context))) {
    return parsed.childNodes;
  }

  return [];
}

/////////////////////////////////////////////
function JQLite(element) {
  if (element instanceof JQLite) {
    return element;
  }

  var argIsString;

  if (isString(element)) {
    element = trim(element);
    argIsString = true;
  }
  if (!(this instanceof JQLite)) {
    if (argIsString && element.charAt(0) != '<') {
      throw jqLiteMinErr('nosel', 'Looking up elements via selectors is not supported by jqLite! See: http://docs.angularjs.org/api/angular.element');
    }
    return new JQLite(element);
  }

  if (argIsString) {
    jqLiteAddNodes(this, jqLiteParseHTML(element));
  } else {
    jqLiteAddNodes(this, element);
  }
}

function jqLiteClone(element) {
  return element.cloneNode(true);
}

function jqLiteDealoc(element, onlyDescendants) {
  if (!onlyDescendants) jqLiteRemoveData(element);

  if (element.querySelectorAll) {
    var descendants = element.querySelectorAll('*');
    for (var i = 0, l = descendants.length; i < l; i++) {
      jqLiteRemoveData(descendants[i]);
    }
  }
}

function jqLiteOff(element, type, fn, unsupported) {
  if (isDefined(unsupported)) throw jqLiteMinErr('offargs', 'jqLite#off() does not support the `selector` argument');

  var expandoStore = jqLiteExpandoStore(element);
  var events = expandoStore && expandoStore.events;
  var handle = expandoStore && expandoStore.handle;

  if (!handle) return; //no listeners registered

  if (!type) {
    for (type in events) {
      if (type !== '$destroy') {
        removeEventListenerFn(element, type, handle);
      }
      delete events[type];
    }
  } else {
    forEach(type.split(' '), function(type) {
      if (isDefined(fn)) {
        var listenerFns = events[type];
        arrayRemove(listenerFns || [], fn);
        if (listenerFns && listenerFns.length > 0) {
          return;
        }
      }

      removeEventListenerFn(element, type, handle);
      delete events[type];
    });
  }
}

function jqLiteRemoveData(element, name) {
  var expandoId = element.ng339;
  var expandoStore = expandoId && jqCache[expandoId];

  if (expandoStore) {
    if (name) {
      delete expandoStore.data[name];
      return;
    }

    if (expandoStore.handle) {
      if (expandoStore.events.$destroy) {
        expandoStore.handle({}, '$destroy');
      }
      jqLiteOff(element);
    }
    delete jqCache[expandoId];
    element.ng339 = undefined; // don't delete DOM expandos. IE and Chrome don't like it
  }
}


function jqLiteExpandoStore(element, createIfNecessary) {
  var expandoId = element.ng339,
      expandoStore = expandoId && jqCache[expandoId];

  if (createIfNecessary && !expandoStore) {
    element.ng339 = expandoId = jqNextId();
    expandoStore = jqCache[expandoId] = {events: {}, data: {}, handle: undefined};
  }

  return expandoStore;
}


function jqLiteData(element, key, value) {
  if (jqLiteAcceptsData(element)) {

    var isSimpleSetter = isDefined(value);
    var isSimpleGetter = !isSimpleSetter && key && !isObject(key);
    var massGetter = !key;
    var expandoStore = jqLiteExpandoStore(element, !isSimpleGetter);
    var data = expandoStore && expandoStore.data;

    if (isSimpleSetter) { // data('key', value)
      data[key] = value;
    } else {
      if (massGetter) {  // data()
        return data;
      } else {
        if (isSimpleGetter) { // data('key')
          // don't force creation of expandoStore if it doesn't exist yet
          return data && data[key];
        } else { // mass-setter: data({key1: val1, key2: val2})
          extend(data, key);
        }
      }
    }
  }
}

function jqLiteHasClass(element, selector) {
  if (!element.getAttribute) return false;
  return ((" " + (element.getAttribute('class') || '') + " ").replace(/[\n\t]/g, " ").
      indexOf(" " + selector + " ") > -1);
}

function jqLiteRemoveClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    forEach(cssClasses.split(' '), function(cssClass) {
      element.setAttribute('class', trim(
          (" " + (element.getAttribute('class') || '') + " ")
          .replace(/[\n\t]/g, " ")
          .replace(" " + trim(cssClass) + " ", " "))
      );
    });
  }
}

function jqLiteAddClass(element, cssClasses) {
  if (cssClasses && element.setAttribute) {
    var existingClasses = (' ' + (element.getAttribute('class') || '') + ' ')
                            .replace(/[\n\t]/g, " ");

    forEach(cssClasses.split(' '), function(cssClass) {
      cssClass = trim(cssClass);
      if (existingClasses.indexOf(' ' + cssClass + ' ') === -1) {
        existingClasses += cssClass + ' ';
      }
    });

    element.setAttribute('class', trim(existingClasses));
  }
}


function jqLiteAddNodes(root, elements) {
  // THIS CODE IS VERY HOT. Don't make changes without benchmarking.

  if (elements) {

    // if a Node (the most common case)
    if (elements.nodeType) {
      root[root.length++] = elements;
    } else {
      var length = elements.length;

      // if an Array or NodeList and not a Window
      if (typeof length === 'number' && elements.window !== elements) {
        if (length) {
          for (var i = 0; i < length; i++) {
            root[root.length++] = elements[i];
          }
        }
      } else {
        root[root.length++] = elements;
      }
    }
  }
}


function jqLiteController(element, name) {
  return jqLiteInheritedData(element, '$' + (name || 'ngController') + 'Controller');
}

function jqLiteInheritedData(element, name, value) {
  // if element is the document object work with the html element instead
  // this makes $(document).scope() possible
  if (element.nodeType == NODE_TYPE_DOCUMENT) {
    element = element.documentElement;
  }
  var names = isArray(name) ? name : [name];

  while (element) {
    for (var i = 0, ii = names.length; i < ii; i++) {
      if ((value = jqLite.data(element, names[i])) !== undefined) return value;
    }

    // If dealing with a document fragment node with a host element, and no parent, use the host
    // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM
    // to lookup parent controllers.
    element = element.parentNode || (element.nodeType === NODE_TYPE_DOCUMENT_FRAGMENT && element.host);
  }
}

function jqLiteEmpty(element) {
  jqLiteDealoc(element, true);
  while (element.firstChild) {
    element.removeChild(element.firstChild);
  }
}

function jqLiteRemove(element, keepData) {
  if (!keepData) jqLiteDealoc(element);
  var parent = element.parentNode;
  if (parent) parent.removeChild(element);
}


function jqLiteDocumentLoaded(action, win) {
  win = win || window;
  if (win.document.readyState === 'complete') {
    // Force the action to be run async for consistent behaviour
    // from the action's point of view
    // i.e. it will definitely not be in a $apply
    win.setTimeout(action);
  } else {
    // No need to unbind this handler as load is only ever called once
    jqLite(win).on('load', action);
  }
}

//////////////////////////////////////////
// Functions which are declared directly.
//////////////////////////////////////////
var JQLitePrototype = JQLite.prototype = {
  ready: function(fn) {
    var fired = false;

    function trigger() {
      if (fired) return;
      fired = true;
      fn();
    }

    // check if document is already loaded
    if (document.readyState === 'complete') {
      setTimeout(trigger);
    } else {
      this.on('DOMContentLoaded', trigger); // works for modern browsers and IE9
      // we can not use jqLite since we are not done loading and jQuery could be loaded later.
      // jshint -W064
      JQLite(window).on('load', trigger); // fallback to window.onload for others
      // jshint +W064
    }
  },
  toString: function() {
    var value = [];
    forEach(this, function(e) { value.push('' + e);});
    return '[' + value.join(', ') + ']';
  },

  eq: function(index) {
      return (index >= 0) ? jqLite(this[index]) : jqLite(this[this.length + index]);
  },

  length: 0,
  push: push,
  sort: [].sort,
  splice: [].splice
};

//////////////////////////////////////////
// Functions iterating getter/setters.
// these functions return self on setter and
// value on get.
//////////////////////////////////////////
var BOOLEAN_ATTR = {};
forEach('multiple,selected,checked,disabled,readOnly,required,open'.split(','), function(value) {
  BOOLEAN_ATTR[lowercase(value)] = value;
});
var BOOLEAN_ELEMENTS = {};
forEach('input,select,option,textarea,button,form,details'.split(','), function(value) {
  BOOLEAN_ELEMENTS[value] = true;
});
var ALIASED_ATTR = {
  'ngMinlength': 'minlength',
  'ngMaxlength': 'maxlength',
  'ngMin': 'min',
  'ngMax': 'max',
  'ngPattern': 'pattern'
};

function getBooleanAttrName(element, name) {
  // check dom last since we will most likely fail on name
  var booleanAttr = BOOLEAN_ATTR[name.toLowerCase()];

  // booleanAttr is here twice to minimize DOM access
  return booleanAttr && BOOLEAN_ELEMENTS[nodeName_(element)] && booleanAttr;
}

function getAliasedAttrName(element, name) {
  var nodeName = element.nodeName;
  return (nodeName === 'INPUT' || nodeName === 'TEXTAREA') && ALIASED_ATTR[name];
}

forEach({
  data: jqLiteData,
  removeData: jqLiteRemoveData
}, function(fn, name) {
  JQLite[name] = fn;
});

forEach({
  data: jqLiteData,
  inheritedData: jqLiteInheritedData,

  scope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$scope') || jqLiteInheritedData(element.parentNode || element, ['$isolateScope', '$scope']);
  },

  isolateScope: function(element) {
    // Can't use jqLiteData here directly so we stay compatible with jQuery!
    return jqLite.data(element, '$isolateScope') || jqLite.data(element, '$isolateScopeNoTemplate');
  },

  controller: jqLiteController,

  injector: function(element) {
    return jqLiteInheritedData(element, '$injector');
  },

  removeAttr: function(element, name) {
    element.removeAttribute(name);
  },

  hasClass: jqLiteHasClass,

  css: function(element, name, value) {
    name = camelCase(name);

    if (isDefined(value)) {
      element.style[name] = value;
    } else {
      return element.style[name];
    }
  },

  attr: function(element, name, value) {
    var nodeType = element.nodeType;
    if (nodeType === NODE_TYPE_TEXT || nodeType === NODE_TYPE_ATTRIBUTE || nodeType === NODE_TYPE_COMMENT) {
      return;
    }
    var lowercasedName = lowercase(name);
    if (BOOLEAN_ATTR[lowercasedName]) {
      if (isDefined(value)) {
        if (!!value) {
          element[name] = true;
          element.setAttribute(name, lowercasedName);
        } else {
          element[name] = false;
          element.removeAttribute(lowercasedName);
        }
      } else {
        return (element[name] ||
                 (element.attributes.getNamedItem(name) || noop).specified)
               ? lowercasedName
               : undefined;
      }
    } else if (isDefined(value)) {
      element.setAttribute(name, value);
    } else if (element.getAttribute) {
      // the extra argument "2" is to get the right thing for a.href in IE, see jQuery code
      // some elements (e.g. Document) don't have get attribute, so return undefined
      var ret = element.getAttribute(name, 2);
      // normalize non-existing attributes to undefined (as jQuery)
      return ret === null ? undefined : ret;
    }
  },

  prop: function(element, name, value) {
    if (isDefined(value)) {
      element[name] = value;
    } else {
      return element[name];
    }
  },

  text: (function() {
    getText.$dv = '';
    return getText;

    function getText(element, value) {
      if (isUndefined(value)) {
        var nodeType = element.nodeType;
        return (nodeType === NODE_TYPE_ELEMENT || nodeType === NODE_TYPE_TEXT) ? element.textContent : '';
      }
      element.textContent = value;
    }
  })(),

  val: function(element, value) {
    if (isUndefined(value)) {
      if (element.multiple && nodeName_(element) === 'select') {
        var result = [];
        forEach(element.options, function(option) {
          if (option.selected) {
            result.push(option.value || option.text);
          }
        });
        return result.length === 0 ? null : result;
      }
      return element.value;
    }
    element.value = value;
  },

  html: function(element, value) {
    if (isUndefined(value)) {
      return element.innerHTML;
    }
    jqLiteDealoc(element, true);
    element.innerHTML = value;
  },

  empty: jqLiteEmpty
}, function(fn, name) {
  /**
   * Properties: writes return selection, reads return first value
   */
  JQLite.prototype[name] = function(arg1, arg2) {
    var i, key;
    var nodeCount = this.length;

    // jqLiteHasClass has only two arguments, but is a getter-only fn, so we need to special-case it
    // in a way that survives minification.
    // jqLiteEmpty takes no arguments but is a setter.
    if (fn !== jqLiteEmpty &&
        (((fn.length == 2 && (fn !== jqLiteHasClass && fn !== jqLiteController)) ? arg1 : arg2) === undefined)) {
      if (isObject(arg1)) {

        // we are a write, but the object properties are the key/values
        for (i = 0; i < nodeCount; i++) {
          if (fn === jqLiteData) {
            // data() takes the whole object in jQuery
            fn(this[i], arg1);
          } else {
            for (key in arg1) {
              fn(this[i], key, arg1[key]);
            }
          }
        }
        // return self for chaining
        return this;
      } else {
        // we are a read, so read the first child.
        // TODO: do we still need this?
        var value = fn.$dv;
        // Only if we have $dv do we iterate over all, otherwise it is just the first element.
        var jj = (value === undefined) ? Math.min(nodeCount, 1) : nodeCount;
        for (var j = 0; j < jj; j++) {
          var nodeValue = fn(this[j], arg1, arg2);
          value = value ? value + nodeValue : nodeValue;
        }
        return value;
      }
    } else {
      // we are a write, so apply to all children
      for (i = 0; i < nodeCount; i++) {
        fn(this[i], arg1, arg2);
      }
      // return self for chaining
      return this;
    }
  };
});

function createEventHandler(element, events) {
  var eventHandler = function(event, type) {
    // jQuery specific api
    event.isDefaultPrevented = function() {
      return event.defaultPrevented;
    };

    var eventFns = events[type || event.type];
    var eventFnsLength = eventFns ? eventFns.length : 0;

    if (!eventFnsLength) return;

    if (isUndefined(event.immediatePropagationStopped)) {
      var originalStopImmediatePropagation = event.stopImmediatePropagation;
      event.stopImmediatePropagation = function() {
        event.immediatePropagationStopped = true;

        if (event.stopPropagation) {
          event.stopPropagation();
        }

        if (originalStopImmediatePropagation) {
          originalStopImmediatePropagation.call(event);
        }
      };
    }

    event.isImmediatePropagationStopped = function() {
      return event.immediatePropagationStopped === true;
    };

    // Copy event handlers in case event handlers array is modified during execution.
    if ((eventFnsLength > 1)) {
      eventFns = shallowCopy(eventFns);
    }

    for (var i = 0; i < eventFnsLength; i++) {
      if (!event.isImmediatePropagationStopped()) {
        eventFns[i].call(element, event);
      }
    }
  };

  // TODO: this is a hack for angularMocks/clearDataCache that makes it possible to deregister all
  //       events on `element`
  eventHandler.elem = element;
  return eventHandler;
}

//////////////////////////////////////////
// Functions iterating traversal.
// These functions chain results into a single
// selector.
//////////////////////////////////////////
forEach({
  removeData: jqLiteRemoveData,

  on: function jqLiteOn(element, type, fn, unsupported) {
    if (isDefined(unsupported)) throw jqLiteMinErr('onargs', 'jqLite#on() does not support the `selector` or `eventData` parameters');

    // Do not add event handlers to non-elements because they will not be cleaned up.
    if (!jqLiteAcceptsData(element)) {
      return;
    }

    var expandoStore = jqLiteExpandoStore(element, true);
    var events = expandoStore.events;
    var handle = expandoStore.handle;

    if (!handle) {
      handle = expandoStore.handle = createEventHandler(element, events);
    }

    // http://jsperf.com/string-indexof-vs-split
    var types = type.indexOf(' ') >= 0 ? type.split(' ') : [type];
    var i = types.length;

    while (i--) {
      type = types[i];
      var eventFns = events[type];

      if (!eventFns) {
        events[type] = [];

        if (type === 'mouseenter' || type === 'mouseleave') {
          // Refer to jQuery's implementation of mouseenter & mouseleave
          // Read about mouseenter and mouseleave:
          // http://www.quirksmode.org/js/events_mouse.html#link8

          jqLiteOn(element, MOUSE_EVENT_MAP[type], function(event) {
            var target = this, related = event.relatedTarget;
            // For mousenter/leave call the handler if related is outside the target.
            // NB: No relatedTarget if the mouse left/entered the browser window
            if (!related || (related !== target && !target.contains(related))) {
              handle(event, type);
            }
          });

        } else {
          if (type !== '$destroy') {
            addEventListenerFn(element, type, handle);
          }
        }
        eventFns = events[type];
      }
      eventFns.push(fn);
    }
  },

  off: jqLiteOff,

  one: function(element, type, fn) {
    element = jqLite(element);

    //add the listener twice so that when it is called
    //you can remove the original function and still be
    //able to call element.off(ev, fn) normally
    element.on(type, function onFn() {
      element.off(type, fn);
      element.off(type, onFn);
    });
    element.on(type, fn);
  },

  replaceWith: function(element, replaceNode) {
    var index, parent = element.parentNode;
    jqLiteDealoc(element);
    forEach(new JQLite(replaceNode), function(node) {
      if (index) {
        parent.insertBefore(node, index.nextSibling);
      } else {
        parent.replaceChild(node, element);
      }
      index = node;
    });
  },

  children: function(element) {
    var children = [];
    forEach(element.childNodes, function(element) {
      if (element.nodeType === NODE_TYPE_ELEMENT)
        children.push(element);
    });
    return children;
  },

  contents: function(element) {
    return element.contentDocument || element.childNodes || [];
  },

  append: function(element, node) {
    var nodeType = element.nodeType;
    if (nodeType !== NODE_TYPE_ELEMENT && nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT) return;

    node = new JQLite(node);

    for (var i = 0, ii = node.length; i < ii; i++) {
      var child = node[i];
      element.appendChild(child);
    }
  },

  prepend: function(element, node) {
    if (element.nodeType === NODE_TYPE_ELEMENT) {
      var index = element.firstChild;
      forEach(new JQLite(node), function(child) {
        element.insertBefore(child, index);
      });
    }
  },

  wrap: function(element, wrapNode) {
    wrapNode = jqLite(wrapNode).eq(0).clone()[0];
    var parent = element.parentNode;
    if (parent) {
      parent.replaceChild(wrapNode, element);
    }
    wrapNode.appendChild(element);
  },

  remove: jqLiteRemove,

  detach: function(element) {
    jqLiteRemove(element, true);
  },

  after: function(element, newElement) {
    var index = element, parent = element.parentNode;
    newElement = new JQLite(newElement);

    for (var i = 0, ii = newElement.length; i < ii; i++) {
      var node = newElement[i];
      parent.insertBefore(node, index.nextSibling);
      index = node;
    }
  },

  addClass: jqLiteAddClass,
  removeClass: jqLiteRemoveClass,

  toggleClass: function(element, selector, condition) {
    if (selector) {
      forEach(selector.split(' '), function(className) {
        var classCondition = condition;
        if (isUndefined(classCondition)) {
          classCondition = !jqLiteHasClass(element, className);
        }
        (classCondition ? jqLiteAddClass : jqLiteRemoveClass)(element, className);
      });
    }
  },

  parent: function(element) {
    var parent = element.parentNode;
    return parent && parent.nodeType !== NODE_TYPE_DOCUMENT_FRAGMENT ? parent : null;
  },

  next: function(element) {
    return element.nextElementSibling;
  },

  find: function(element, selector) {
    if (element.getElementsByTagName) {
      return element.getElementsByTagName(selector);
    } else {
      return [];
    }
  },

  clone: jqLiteClone,

  triggerHandler: function(element, event, extraParameters) {

    var dummyEvent, eventFnsCopy, handlerArgs;
    var eventName = event.type || event;
    var expandoStore = jqLiteExpandoStore(element);
    var events = expandoStore && expandoStore.events;
    var eventFns = events && events[eventName];

    if (eventFns) {
      // Create a dummy event to pass to the handlers
      dummyEvent = {
        preventDefault: function() { this.defaultPrevented = true; },
        isDefaultPrevented: function() { return this.defaultPrevented === true; },
        stopImmediatePropagation: function() { this.immediatePropagationStopped = true; },
        isImmediatePropagationStopped: function() { return this.immediatePropagationStopped === true; },
        stopPropagation: noop,
        type: eventName,
        target: element
      };

      // If a custom event was provided then extend our dummy event with it
      if (event.type) {
        dummyEvent = extend(dummyEvent, event);
      }

      // Copy event handlers in case event handlers array is modified during execution.
      eventFnsCopy = shallowCopy(eventFns);
      handlerArgs = extraParameters ? [dummyEvent].concat(extraParameters) : [dummyEvent];

      forEach(eventFnsCopy, function(fn) {
        if (!dummyEvent.isImmediatePropagationStopped()) {
          fn.apply(element, handlerArgs);
        }
      });
    }
  }
}, function(fn, name) {
  /**
   * chaining functions
   */
  JQLite.prototype[name] = function(arg1, arg2, arg3) {
    var value;

    for (var i = 0, ii = this.length; i < ii; i++) {
      if (isUndefined(value)) {
        value = fn(this[i], arg1, arg2, arg3);
        if (isDefined(value)) {
          // any function which returns a value needs to be wrapped
          value = jqLite(value);
        }
      } else {
        jqLiteAddNodes(value, fn(this[i], arg1, arg2, arg3));
      }
    }
    return isDefined(value) ? value : this;
  };

  // bind legacy bind/unbind to on/off
  JQLite.prototype.bind = JQLite.prototype.on;
  JQLite.prototype.unbind = JQLite.prototype.off;
});


// Provider for private $$jqLite service
function $$jqLiteProvider() {
  this.$get = function $$jqLite() {
    return extend(JQLite, {
      hasClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteHasClass(node, classes);
      },
      addClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteAddClass(node, classes);
      },
      removeClass: function(node, classes) {
        if (node.attr) node = node[0];
        return jqLiteRemoveClass(node, classes);
      }
    });
  };
}

/**
 * Computes a hash of an 'obj'.
 * Hash of a:
 *  string is string
 *  number is number as string
 *  object is either result of calling $$hashKey function on the object or uniquely generated id,
 *         that is also assigned to the $$hashKey property of the object.
 *
 * @param obj
 * @returns {string} hash string such that the same input will have the same hash string.
 *         The resulting string key is in 'type:hashKey' format.
 */
function hashKey(obj, nextUidFn) {
  var key = obj && obj.$$hashKey;

  if (key) {
    if (typeof key === 'function') {
      key = obj.$$hashKey();
    }
    return key;
  }

  var objType = typeof obj;
  if (objType == 'function' || (objType == 'object' && obj !== null)) {
    key = obj.$$hashKey = objType + ':' + (nextUidFn || nextUid)();
  } else {
    key = objType + ':' + obj;
  }

  return key;
}

/**
 * HashMap which can use objects as keys
 */
function HashMap(array, isolatedUid) {
  if (isolatedUid) {
    var uid = 0;
    this.nextUid = function() {
      return ++uid;
    };
  }
  forEach(array, this.put, this);
}
HashMap.prototype = {
  /**
   * Store key value pair
   * @param key key to store can be any type
   * @param value value to store can be any type
   */
  put: function(key, value) {
    this[hashKey(key, this.nextUid)] = value;
  },

  /**
   * @param key
   * @returns {Object} the value for the key
   */
  get: function(key) {
    return this[hashKey(key, this.nextUid)];
  },

  /**
   * Remove the key/value pair
   * @param key
   */
  remove: function(key) {
    var value = this[key = hashKey(key, this.nextUid)];
    delete this[key];
    return value;
  }
};

/**
 * @ngdoc function
 * @module ng
 * @name angular.injector
 * @kind function
 *
 * @description
 * Creates an injector object that can be used for retrieving services as well as for
 * dependency injection (see {@link guide/di dependency injection}).
 *
 * @param {Array.<string|Function>} modules A list of module functions or their aliases. See
 *     {@link angular.module}. The `ng` module must be explicitly added.
 * @param {boolean=} [strictDi=false] Whether the injector should be in strict mode, which
 *     disallows argument name annotation inference.
 * @returns {injector} Injector object. See {@link auto.$injector $injector}.
 *
 * @example
 * Typical usage
 * ```js
 *   // create an injector
 *   var $injector = angular.injector(['ng']);
 *
 *   // use the injector to kick off your application
 *   // use the type inference to auto inject arguments, or use implicit injection
 *   $injector.invoke(function($rootScope, $compile, $document) {
 *     $compile($document)($rootScope);
 *     $rootScope.$digest();
 *   });
 * ```
 *
 * Sometimes you want to get access to the injector of a currently running Angular app
 * from outside Angular. Perhaps, you want to inject and compile some markup after the
 * application has been bootstrapped. You can do this using the extra `injector()` added
 * to JQuery/jqLite elements. See {@link angular.element}.
 *
 * *This is fairly rare but could be the case if a third party library is injecting the
 * markup.*
 *
 * In the following example a new block of HTML containing a `ng-controller`
 * directive is added to the end of the document body by JQuery. We then compile and link
 * it into the current AngularJS scope.
 *
 * ```js
 * var $div = $('<div ng-controller="MyCtrl">{{content.label}}</div>');
 * $(document.body).append($div);
 *
 * angular.element(document).injector().invoke(function($compile) {
 *   var scope = angular.element($div).scope();
 *   $compile($div)(scope);
 * });
 * ```
 */


/**
 * @ngdoc module
 * @name auto
 * @description
 *
 * Implicit module which gets automatically added to each {@link auto.$injector $injector}.
 */

var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
var FN_ARG_SPLIT = /,/;
var FN_ARG = /^\s*(_?)(\S+?)\1\s*$/;
var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
var $injectorMinErr = minErr('$injector');

function anonFn(fn) {
  // For anonymous functions, showing at the very least the function signature can help in
  // debugging.
  var fnText = fn.toString().replace(STRIP_COMMENTS, ''),
      args = fnText.match(FN_ARGS);
  if (args) {
    return 'function(' + (args[1] || '').replace(/[\s\r\n]+/, ' ') + ')';
  }
  return 'fn';
}

function annotate(fn, strictDi, name) {
  var $inject,
      fnText,
      argDecl,
      last;

  if (typeof fn === 'function') {
    if (!($inject = fn.$inject)) {
      $inject = [];
      if (fn.length) {
        if (strictDi) {
          if (!isString(name) || !name) {
            name = fn.name || anonFn(fn);
          }
          throw $injectorMinErr('strictdi',
            '{0} is not using explicit annotation and cannot be invoked in strict mode', name);
        }
        fnText = fn.toString().replace(STRIP_COMMENTS, '');
        argDecl = fnText.match(FN_ARGS);
        forEach(argDecl[1].split(FN_ARG_SPLIT), function(arg) {
          arg.replace(FN_ARG, function(all, underscore, name) {
            $inject.push(name);
          });
        });
      }
      fn.$inject = $inject;
    }
  } else if (isArray(fn)) {
    last = fn.length - 1;
    assertArgFn(fn[last], 'fn');
    $inject = fn.slice(0, last);
  } else {
    assertArgFn(fn, 'fn', true);
  }
  return $inject;
}

///////////////////////////////////////

/**
 * @ngdoc service
 * @name $injector
 *
 * @description
 *
 * `$injector` is used to retrieve object instances as defined by
 * {@link auto.$provide provider}, instantiate types, invoke methods,
 * and load modules.
 *
 * The following always holds true:
 *
 * ```js
 *   var $injector = angular.injector();
 *   expect($injector.get('$injector')).toBe($injector);
 *   expect($injector.invoke(function($injector) {
 *     return $injector;
 *   })).toBe($injector);
 * ```
 *
 * # Injection Function Annotation
 *
 * JavaScript does not have annotations, and annotations are needed for dependency injection. The
 * following are all valid ways of annotating function with injection arguments and are equivalent.
 *
 * ```js
 *   // inferred (only works if code not minified/obfuscated)
 *   $injector.invoke(function(serviceA){});
 *
 *   // annotated
 *   function explicit(serviceA) {};
 *   explicit.$inject = ['serviceA'];
 *   $injector.invoke(explicit);
 *
 *   // inline
 *   $injector.invoke(['serviceA', function(serviceA){}]);
 * ```
 *
 * ## Inference
 *
 * In JavaScript calling `toString()` on a function returns the function definition. The definition
 * can then be parsed and the function arguments can be extracted. This method of discovering
 * annotations is disallowed when the injector is in strict mode.
 * *NOTE:* This does not work with minification, and obfuscation tools since these tools change the
 * argument names.
 *
 * ## `$inject` Annotation
 * By adding an `$inject` property onto a function the injection parameters can be specified.
 *
 * ## Inline
 * As an array of injection names, where the last item in the array is the function to call.
 */

/**
 * @ngdoc method
 * @name $injector#get
 *
 * @description
 * Return an instance of the service.
 *
 * @param {string} name The name of the instance to retrieve.
 * @param {string=} caller An optional string to provide the origin of the function call for error messages.
 * @return {*} The instance.
 */

/**
 * @ngdoc method
 * @name $injector#invoke
 *
 * @description
 * Invoke the method and supply the method arguments from the `$injector`.
 *
 * @param {Function|Array.<string|Function>} fn The injectable function to invoke. Function parameters are
 *   injected according to the {@link guide/di $inject Annotation} rules.
 * @param {Object=} self The `this` for the invoked method.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 *                         object first, before the `$injector` is consulted.
 * @returns {*} the value returned by the invoked `fn` function.
 */

/**
 * @ngdoc method
 * @name $injector#has
 *
 * @description
 * Allows the user to query if the particular service exists.
 *
 * @param {string} name Name of the service to query.
 * @returns {boolean} `true` if injector has given service.
 */

/**
 * @ngdoc method
 * @name $injector#instantiate
 * @description
 * Create a new instance of JS type. The method takes a constructor function, invokes the new
 * operator, and supplies all of the arguments to the constructor function as specified by the
 * constructor annotation.
 *
 * @param {Function} Type Annotated constructor function.
 * @param {Object=} locals Optional object. If preset then any argument names are read from this
 * object first, before the `$injector` is consulted.
 * @returns {Object} new instance of `Type`.
 */

/**
 * @ngdoc method
 * @name $injector#annotate
 *
 * @description
 * Returns an array of service names which the function is requesting for injection. This API is
 * used by the injector to determine which services need to be injected into the function when the
 * function is invoked. There are three ways in which the function can be annotated with the needed
 * dependencies.
 *
 * # Argument names
 *
 * The simplest form is to extract the dependencies from the arguments of the function. This is done
 * by converting the function into a string using `toString()` method and extracting the argument
 * names.
 * ```js
 *   // Given
 *   function MyController($scope, $route) {
 *     // ...
 *   }
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * You can disallow this method by using strict injection mode.
 *
 * This method does not work with code minification / obfuscation. For this reason the following
 * annotation strategies are supported.
 *
 * # The `$inject` property
 *
 * If a function has an `$inject` property and its value is an array of strings, then the strings
 * represent names of services to be injected into the function.
 * ```js
 *   // Given
 *   var MyController = function(obfuscatedScope, obfuscatedRoute) {
 *     // ...
 *   }
 *   // Define function dependencies
 *   MyController['$inject'] = ['$scope', '$route'];
 *
 *   // Then
 *   expect(injector.annotate(MyController)).toEqual(['$scope', '$route']);
 * ```
 *
 * # The array notation
 *
 * It is often desirable to inline Injected functions and that's when setting the `$inject` property
 * is very inconvenient. In these situations using the array notation to specify the dependencies in
 * a way that survives minification is a better choice:
 *
 * ```js
 *   // We wish to write this (not minification / obfuscation safe)
 *   injector.invoke(function($compile, $rootScope) {
 *     // ...
 *   });
 *
 *   // We are forced to write break inlining
 *   var tmpFn = function(obfuscatedCompile, obfuscatedRootScope) {
 *     // ...
 *   };
 *   tmpFn.$inject = ['$compile', '$rootScope'];
 *   injector.invoke(tmpFn);
 *
 *   // To better support inline function the inline annotation is supported
 *   injector.invoke(['$compile', '$rootScope', function(obfCompile, obfRootScope) {
 *     // ...
 *   }]);
 *
 *   // Therefore
 *   expect(injector.annotate(
 *      ['$compile', '$rootScope', function(obfus_$compile, obfus_$rootScope) {}])
 *    ).toEqual(['$compile', '$rootScope']);
 * ```
 *
 * @param {Function|Array.<string|Function>} fn Function for which dependent service names need to
 * be retrieved as described above.
 *
 * @param {boolean=} [strictDi=false] Disallow argument name annotation inference.
 *
 * @returns {Array.<string>} The names of the services which the function requires.
 */




/**
 * @ngdoc service
 * @name $provide
 *
 * @description
 *
 * The {@link auto.$provide $provide} service has a number of methods for registering components
 * with the {@link auto.$injector $injector}. Many of these functions are also exposed on
 * {@link angular.Module}.
 *
 * An Angular **service** is a singleton object created by a **service factory**.  These **service
 * factories** are functions which, in turn, are created by a **service provider**.
 * The **service providers** are constructor functions. When instantiated they must contain a
 * property called `$get`, which holds the **service factory** function.
 *
 * When you request a service, the {@link auto.$injector $injector} is responsible for finding the
 * correct **service provider**, instantiating it and then calling its `$get` **service factory**
 * function to get the instance of the **service**.
 *
 * Often services have no configuration options and there is no need to add methods to the service
 * provider.  The provider will be no more than a constructor function with a `$get` property. For
 * these cases the {@link auto.$provide $provide} service has additional helper methods to register
 * services without specifying a provider.
 *
 * * {@link auto.$provide#provider provider(provider)} - registers a **service provider** with the
 *     {@link auto.$injector $injector}
 * * {@link auto.$provide#constant constant(obj)} - registers a value/object that can be accessed by
 *     providers and services.
 * * {@link auto.$provide#value value(obj)} - registers a value/object that can only be accessed by
 *     services, not providers.
 * * {@link auto.$provide#factory factory(fn)} - registers a service **factory function**, `fn`,
 *     that will be wrapped in a **service provider** object, whose `$get` property will contain the
 *     given factory function.
 * * {@link auto.$provide#service service(class)} - registers a **constructor function**, `class`
 *     that will be wrapped in a **service provider** object, whose `$get` property will instantiate
 *      a new object using the given constructor function.
 *
 * See the individual methods for more information and examples.
 */

/**
 * @ngdoc method
 * @name $provide#provider
 * @description
 *
 * Register a **provider function** with the {@link auto.$injector $injector}. Provider functions
 * are constructor functions, whose instances are responsible for "providing" a factory for a
 * service.
 *
 * Service provider names start with the name of the service they provide followed by `Provider`.
 * For example, the {@link ng.$log $log} service has a provider called
 * {@link ng.$logProvider $logProvider}.
 *
 * Service provider objects can have additional methods which allow configuration of the provider
 * and its service. Importantly, you can configure what kind of service is created by the `$get`
 * method, or how that service will act. For example, the {@link ng.$logProvider $logProvider} has a
 * method {@link ng.$logProvider#debugEnabled debugEnabled}
 * which lets you specify whether the {@link ng.$log $log} service will log debug messages to the
 * console or not.
 *
 * @param {string} name The name of the instance. NOTE: the provider will be available under `name +
                        'Provider'` key.
 * @param {(Object|function())} provider If the provider is:
 *
 *   - `Object`: then it should have a `$get` method. The `$get` method will be invoked using
 *     {@link auto.$injector#invoke $injector.invoke()} when an instance needs to be created.
 *   - `Constructor`: a new instance of the provider will be created using
 *     {@link auto.$injector#instantiate $injector.instantiate()}, then treated as `object`.
 *
 * @returns {Object} registered provider instance

 * @example
 *
 * The following example shows how to create a simple event tracking service and register it using
 * {@link auto.$provide#provider $provide.provider()}.
 *
 * ```js
 *  // Define the eventTracker provider
 *  function EventTrackerProvider() {
 *    var trackingUrl = '/track';
 *
 *    // A provider method for configuring where the tracked events should been saved
 *    this.setTrackingUrl = function(url) {
 *      trackingUrl = url;
 *    };
 *
 *    // The service factory function
 *    this.$get = ['$http', function($http) {
 *      var trackedEvents = {};
 *      return {
 *        // Call this to track an event
 *        event: function(event) {
 *          var count = trackedEvents[event] || 0;
 *          count += 1;
 *          trackedEvents[event] = count;
 *          return count;
 *        },
 *        // Call this to save the tracked events to the trackingUrl
 *        save: function() {
 *          $http.post(trackingUrl, trackedEvents);
 *        }
 *      };
 *    }];
 *  }
 *
 *  describe('eventTracker', function() {
 *    var postSpy;
 *
 *    beforeEach(module(function($provide) {
 *      // Register the eventTracker provider
 *      $provide.provider('eventTracker', EventTrackerProvider);
 *    }));
 *
 *    beforeEach(module(function(eventTrackerProvider) {
 *      // Configure eventTracker provider
 *      eventTrackerProvider.setTrackingUrl('/custom-track');
 *    }));
 *
 *    it('tracks events', inject(function(eventTracker) {
 *      expect(eventTracker.event('login')).toEqual(1);
 *      expect(eventTracker.event('login')).toEqual(2);
 *    }));
 *
 *    it('saves to the tracking url', inject(function(eventTracker, $http) {
 *      postSpy = spyOn($http, 'post');
 *      eventTracker.event('login');
 *      eventTracker.save();
 *      expect(postSpy).toHaveBeenCalled();
 *      expect(postSpy.mostRecentCall.args[0]).not.toEqual('/track');
 *      expect(postSpy.mostRecentCall.args[0]).toEqual('/custom-track');
 *      expect(postSpy.mostRecentCall.args[1]).toEqual({ 'login': 1 });
 *    }));
 *  });
 * ```
 */

/**
 * @ngdoc method
 * @name $provide#factory
 * @description
 *
 * Register a **service factory**, which will be called to return the service instance.
 * This is short for registering a service where its provider consists of only a `$get` property,
 * which is the given service factory function.
 * You should use {@link auto.$provide#factory $provide.factory(getFn)} if you do not need to
 * configure your service in a provider.
 *
 * @param {string} name The name of the instance.
 * @param {Function|Array.<string|Function>} $getFn The injectable $getFn for the instance creation.
 *                      Internally this is a short hand for `$provide.provider(name, {$get: $getFn})`.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service
 * ```js
 *   $provide.factory('ping', ['$http', function($http) {
 *     return function ping() {
 *       return $http.send('/ping');
 *     };
 *   }]);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#service
 * @description
 *
 * Register a **service constructor**, which will be invoked with `new` to create the service
 * instance.
 * This is short for registering a service where its provider's `$get` property is the service
 * constructor function that will be used to instantiate the service instance.
 *
 * You should use {@link auto.$provide#service $provide.service(class)} if you define your service
 * as a type/class.
 *
 * @param {string} name The name of the instance.
 * @param {Function|Array.<string|Function>} constructor An injectable class (constructor function)
 *     that will be instantiated.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here is an example of registering a service using
 * {@link auto.$provide#service $provide.service(class)}.
 * ```js
 *   var Ping = function($http) {
 *     this.$http = $http;
 *   };
 *
 *   Ping.$inject = ['$http'];
 *
 *   Ping.prototype.send = function() {
 *     return this.$http.get('/ping');
 *   };
 *   $provide.service('ping', Ping);
 * ```
 * You would then inject and use this service like this:
 * ```js
 *   someModule.controller('Ctrl', ['ping', function(ping) {
 *     ping.send();
 *   }]);
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#value
 * @description
 *
 * Register a **value service** with the {@link auto.$injector $injector}, such as a string, a
 * number, an array, an object or a function.  This is short for registering a service where its
 * provider's `$get` property is a factory function that takes no arguments and returns the **value
 * service**.
 *
 * Value services are similar to constant services, except that they cannot be injected into a
 * module configuration function (see {@link angular.Module#config}) but they can be overridden by
 * an Angular
 * {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the instance.
 * @param {*} value The value.
 * @returns {Object} registered provider instance
 *
 * @example
 * Here are some examples of creating value services.
 * ```js
 *   $provide.value('ADMIN_USER', 'admin');
 *
 *   $provide.value('RoleLookup', { admin: 0, writer: 1, reader: 2 });
 *
 *   $provide.value('halfOf', function(value) {
 *     return value / 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#constant
 * @description
 *
 * Register a **constant service**, such as a string, a number, an array, an object or a function,
 * with the {@link auto.$injector $injector}. Unlike {@link auto.$provide#value value} it can be
 * injected into a module configuration function (see {@link angular.Module#config}) and it cannot
 * be overridden by an Angular {@link auto.$provide#decorator decorator}.
 *
 * @param {string} name The name of the constant.
 * @param {*} value The constant value.
 * @returns {Object} registered instance
 *
 * @example
 * Here a some examples of creating constants:
 * ```js
 *   $provide.constant('SHARD_HEIGHT', 306);
 *
 *   $provide.constant('MY_COLOURS', ['red', 'blue', 'grey']);
 *
 *   $provide.constant('double', function(value) {
 *     return value * 2;
 *   });
 * ```
 */


/**
 * @ngdoc method
 * @name $provide#decorator
 * @description
 *
 * Register a **service decorator** with the {@link auto.$injector $injector}. A service decorator
 * intercepts the creation of a service, allowing it to override or modify the behaviour of the
 * service. The object returned by the decorator may be the original service, or a new service
 * object which replaces or wraps and delegates to the original service.
 *
 * @param {string} name The name of the service to decorate.
 * @param {Function|Array.<string|Function>} decorator This function will be invoked when the service needs to be
 *    instantiated and should return the decorated service instance. The function is called using
 *    the {@link auto.$injector#invoke injector.invoke} method and is therefore fully injectable.
 *    Local injection arguments:
 *
 *    * `$delegate` - The original service instance, which can be monkey patched, configured,
 *      decorated or delegated to.
 *
 * @example
 * Here we decorate the {@link ng.$log $log} service to convert warnings to errors by intercepting
 * calls to {@link ng.$log#error $log.warn()}.
 * ```js
 *   $provide.decorator('$log', ['$delegate', function($delegate) {
 *     $delegate.warn = $delegate.error;
 *     return $delegate;
 *   }]);
 * ```
 */


function createInjector(modulesToLoad, strictDi) {
  strictDi = (strictDi === true);
  var INSTANTIATING = {},
      providerSuffix = 'Provider',
      path = [],
      loadedModules = new HashMap([], true),
      providerCache = {
        $provide: {
            provider: supportObject(provider),
            factory: supportObject(factory),
            service: supportObject(service),
            value: supportObject(value),
            constant: supportObject(constant),
            decorator: decorator
          }
      },
      providerInjector = (providerCache.$injector =
          createInternalInjector(providerCache, function(serviceName, caller) {
            if (angular.isString(caller)) {
              path.push(caller);
            }
            throw $injectorMinErr('unpr', "Unknown provider: {0}", path.join(' <- '));
          })),
      instanceCache = {},
      instanceInjector = (instanceCache.$injector =
          createInternalInjector(instanceCache, function(serviceName, caller) {
            var provider = providerInjector.get(serviceName + providerSuffix, caller);
            return instanceInjector.invoke(provider.$get, provider, undefined, serviceName);
          }));


  forEach(loadModules(modulesToLoad), function(fn) { instanceInjector.invoke(fn || noop); });

  return instanceInjector;

  ////////////////////////////////////
  // $provider
  ////////////////////////////////////

  function supportObject(delegate) {
    return function(key, value) {
      if (isObject(key)) {
        forEach(key, reverseParams(delegate));
      } else {
        return delegate(key, value);
      }
    };
  }

  function provider(name, provider_) {
    assertNotHasOwnProperty(name, 'service');
    if (isFunction(provider_) || isArray(provider_)) {
      provider_ = providerInjector.instantiate(provider_);
    }
    if (!provider_.$get) {
      throw $injectorMinErr('pget', "Provider '{0}' must define $get factory method.", name);
    }
    return providerCache[name + providerSuffix] = provider_;
  }

  function enforceReturnValue(name, factory) {
    return function enforcedReturnValue() {
      var result = instanceInjector.invoke(factory, this);
      if (isUndefined(result)) {
        throw $injectorMinErr('undef', "Provider '{0}' must return a value from $get factory method.", name);
      }
      return result;
    };
  }

  function factory(name, factoryFn, enforce) {
    return provider(name, {
      $get: enforce !== false ? enforceReturnValue(name, factoryFn) : factoryFn
    });
  }

  function service(name, constructor) {
    return factory(name, ['$injector', function($injector) {
      return $injector.instantiate(constructor);
    }]);
  }

  function value(name, val) { return factory(name, valueFn(val), false); }

  function constant(name, value) {
    assertNotHasOwnProperty(name, 'constant');
    providerCache[name] = value;
    instanceCache[name] = value;
  }

  function decorator(serviceName, decorFn) {
    var origProvider = providerInjector.get(serviceName + providerSuffix),
        orig$get = origProvider.$get;

    origProvider.$get = function() {
      var origInstance = instanceInjector.invoke(orig$get, origProvider);
      return instanceInjector.invoke(decorFn, null, {$delegate: origInstance});
    };
  }

  ////////////////////////////////////
  // Module Loading
  ////////////////////////////////////
  function loadModules(modulesToLoad) {
    var runBlocks = [], moduleFn;
    forEach(modulesToLoad, function(module) {
      if (loadedModules.get(module)) return;
      loadedModules.put(module, true);

      function runInvokeQueue(queue) {
        var i, ii;
        for (i = 0, ii = queue.length; i < ii; i++) {
          var invokeArgs = queue[i],
              provider = providerInjector.get(invokeArgs[0]);

          provider[invokeArgs[1]].apply(provider, invokeArgs[2]);
        }
      }

      try {
        if (isString(module)) {
          moduleFn = angularModule(module);
          runBlocks = runBlocks.concat(loadModules(moduleFn.requires)).concat(moduleFn._runBlocks);
          runInvokeQueue(moduleFn._invokeQueue);
          runInvokeQueue(moduleFn._configBlocks);
        } else if (isFunction(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else if (isArray(module)) {
            runBlocks.push(providerInjector.invoke(module));
        } else {
          assertArgFn(module, 'module');
        }
      } catch (e) {
        if (isArray(module)) {
          module = module[module.length - 1];
        }
        if (e.message && e.stack && e.stack.indexOf(e.message) == -1) {
          // Safari & FF's stack traces don't contain error.message content
          // unlike those of Chrome and IE
          // So if stack doesn't contain message, we create a new string that contains both.
          // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.
          /* jshint -W022 */
          e = e.message + '\n' + e.stack;
        }
        throw $injectorMinErr('modulerr', "Failed to instantiate module {0} due to:\n{1}",
                  module, e.stack || e.message || e);
      }
    });
    return runBlocks;
  }

  ////////////////////////////////////
  // internal Injector
  ////////////////////////////////////

  function createInternalInjector(cache, factory) {

    function getService(serviceName, caller) {
      if (cache.hasOwnProperty(serviceName)) {
        if (cache[serviceName] === INSTANTIATING) {
          throw $injectorMinErr('cdep', 'Circular dependency found: {0}',
                    serviceName + ' <- ' + path.join(' <- '));
        }
        return cache[serviceName];
      } else {
        try {
          path.unshift(serviceName);
          cache[serviceName] = INSTANTIATING;
          return cache[serviceName] = factory(serviceName, caller);
        } catch (err) {
          if (cache[serviceName] === INSTANTIATING) {
            delete cache[serviceName];
          }
          throw err;
        } finally {
          path.shift();
        }
      }
    }

    function invoke(fn, self, locals, serviceName) {
      if (typeof locals === 'string') {
        serviceName = locals;
        locals = null;
      }

      var args = [],
          $inject = createInjector.$$annotate(fn, strictDi, serviceName),
          length, i,
          key;

      for (i = 0, length = $inject.length; i < length; i++) {
        key = $inject[i];
        if (typeof key !== 'string') {
          throw $injectorMinErr('itkn',
                  'Incorrect injection token! Expected service name as string, got {0}', key);
        }
        args.push(
          locals && locals.hasOwnProperty(key)
          ? locals[key]
          : getService(key, serviceName)
        );
      }
      if (isArray(fn)) {
        fn = fn[length];
      }

      // http://jsperf.com/angularjs-invoke-apply-vs-switch
      // #5388
      return fn.apply(self, args);
    }

    function instantiate(Type, locals, serviceName) {
      // Check if Type is annotated and use just the given function at n-1 as parameter
      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);
      // Object creation: http://jsperf.com/create-constructor/2
      var instance = Object.create((isArray(Type) ? Type[Type.length - 1] : Type).prototype || null);
      var returnedValue = invoke(Type, instance, locals, serviceName);

      return isObject(returnedValue) || isFunction(returnedValue) ? returnedValue : instance;
    }

    return {
      invoke: invoke,
      instantiate: instantiate,
      get: getService,
      annotate: createInjector.$$annotate,
      has: function(name) {
        return providerCache.hasOwnProperty(name + providerSuffix) || cache.hasOwnProperty(name);
      }
    };
  }
}

createInjector.$$annotate = annotate;

/**
 * @ngdoc provider
 * @name $anchorScrollProvider
 *
 * @description
 * Use `$anchorScrollProvider` to disable automatic scrolling whenever
 * {@link ng.$location#hash $location.hash()} changes.
 */
function $AnchorScrollProvider() {

  var autoScrollingEnabled = true;

  /**
   * @ngdoc method
   * @name $anchorScrollProvider#disableAutoScrolling
   *
   * @description
   * By default, {@link ng.$anchorScroll $anchorScroll()} will automatically detect changes to
   * {@link ng.$location#hash $location.hash()} and scroll to the element matching the new hash.<br />
   * Use this method to disable automatic scrolling.
   *
   * If automatic scrolling is disabled, one must explicitly call
   * {@link ng.$anchorScroll $anchorScroll()} in order to scroll to the element related to the
   * current hash.
   */
  this.disableAutoScrolling = function() {
    autoScrollingEnabled = false;
  };

  /**
   * @ngdoc service
   * @name $anchorScroll
   * @kind function
   * @requires $window
   * @requires $location
   * @requires $rootScope
   *
   * @description
   * When called, it checks the current value of {@link ng.$location#hash $location.hash()} and
   * scrolls to the related element, according to the rules specified in the
   * [Html5 spec](http://dev.w3.org/html5/spec/Overview.html#the-indicated-part-of-the-document).
   *
   * It also watches the {@link ng.$location#hash $location.hash()} and automatically scrolls to
   * match any anchor whenever it changes. This can be disabled by calling
   * {@link ng.$anchorScrollProvider#disableAutoScrolling $anchorScrollProvider.disableAutoScrolling()}.
   *
   * Additionally, you can use its {@link ng.$anchorScroll#yOffset yOffset} property to specify a
   * vertical scroll-offset (either fixed or dynamic).
   *
   * @property {(number|function|jqLite)} yOffset
   * If set, specifies a vertical scroll-offset. This is often useful when there are fixed
   * positioned elements at the top of the page, such as navbars, headers etc.
   *
   * `yOffset` can be specified in various ways:
   * - **number**: A fixed number of pixels to be used as offset.<br /><br />
   * - **function**: A getter function called everytime `$anchorScroll()` is executed. Must return
   *   a number representing the offset (in pixels).<br /><br />
   * - **jqLite**: A jqLite/jQuery element to be used for specifying the offset. The distance from
   *   the top of the page to the element's bottom will be used as offset.<br />
   *   **Note**: The element will be taken into account only as long as its `position` is set to
   *   `fixed`. This option is useful, when dealing with responsive navbars/headers that adjust
   *   their height and/or positioning according to the viewport's size.
   *
   * <br />
   * <div class="alert alert-warning">
   * In order for `yOffset` to work properly, scrolling should take place on the document's root and
   * not some child element.
   * </div>
   *
   * @example
     <example module="anchorScrollExample">
       <file name="index.html">
         <div id="scrollArea" ng-controller="ScrollController">
           <a ng-click="gotoBottom()">Go to bottom</a>
           <a id="bottom"></a> You're at the bottom!
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollExample', [])
           .controller('ScrollController', ['$scope', '$location', '$anchorScroll',
             function ($scope, $location, $anchorScroll) {
               $scope.gotoBottom = function() {
                 // set the location.hash to the id of
                 // the element you wish to scroll to.
                 $location.hash('bottom');

                 // call $anchorScroll()
                 $anchorScroll();
               };
             }]);
       </file>
       <file name="style.css">
         #scrollArea {
           height: 280px;
           overflow: auto;
         }

         #bottom {
           display: block;
           margin-top: 2000px;
         }
       </file>
     </example>
   *
   * <hr />
   * The example below illustrates the use of a vertical scroll-offset (specified as a fixed value).
   * See {@link ng.$anchorScroll#yOffset $anchorScroll.yOffset} for more details.
   *
   * @example
     <example module="anchorScrollOffsetExample">
       <file name="index.html">
         <div class="fixed-header" ng-controller="headerCtrl">
           <a href="" ng-click="gotoAnchor(x)" ng-repeat="x in [1,2,3,4,5]">
             Go to anchor {{x}}
           </a>
         </div>
         <div id="anchor{{x}}" class="anchor" ng-repeat="x in [1,2,3,4,5]">
           Anchor {{x}} of 5
         </div>
       </file>
       <file name="script.js">
         angular.module('anchorScrollOffsetExample', [])
           .run(['$anchorScroll', function($anchorScroll) {
             $anchorScroll.yOffset = 50;   // always scroll by 50 extra pixels
           }])
           .controller('headerCtrl', ['$anchorScroll', '$location', '$scope',
             function ($anchorScroll, $location, $scope) {
               $scope.gotoAnchor = function(x) {
                 var newHash = 'anchor' + x;
                 if ($location.hash() !== newHash) {
                   // set the $location.hash to `newHash` and
                   // $anchorScroll will automatically scroll to it
                   $location.hash('anchor' + x);
                 } else {
                   // call $anchorScroll() explicitly,
                   // since $location.hash hasn't changed
                   $anchorScroll();
                 }
               };
             }
           ]);
       </file>
       <file name="style.css">
         body {
           padding-top: 50px;
         }

         .anchor {
           border: 2px dashed DarkOrchid;
           padding: 10px 10px 200px 10px;
         }

         .fixed-header {
           background-color: rgba(0, 0, 0, 0.2);
           height: 50px;
           position: fixed;
           top: 0; left: 0; right: 0;
         }

         .fixed-header > a {
           display: inline-block;
           margin: 5px 15px;
         }
       </file>
     </example>
   */
  this.$get = ['$window', '$location', '$rootScope', function($window, $location, $rootScope) {
    var document = $window.document;

    // Helper function to get first anchor from a NodeList
    // (using `Array#some()` instead of `angular#forEach()` since it's more performant
    //  and working in all supported browsers.)
    function getFirstAnchor(list) {
      var result = null;
      Array.prototype.some.call(list, function(element) {
        if (nodeName_(element) === 'a') {
          result = element;
          return true;
        }
      });
      return result;
    }

    function getYOffset() {

      var offset = scroll.yOffset;

      if (isFunction(offset)) {
        offset = offset();
      } else if (isElement(offset)) {
        var elem = offset[0];
        var style = $window.getComputedStyle(elem);
        if (style.position !== 'fixed') {
          offset = 0;
        } else {
          offset = elem.getBoundingClientRect().bottom;
        }
      } else if (!isNumber(offset)) {
        offset = 0;
      }

      return offset;
    }

    function scrollTo(elem) {
      if (elem) {
        elem.scrollIntoView();

        var offset = getYOffset();

        if (offset) {
          // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.
          // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the
          // top of the viewport.
          //
          // IF the number of pixels from the top of `elem` to the end of the page's content is less
          // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some
          // way down the page.
          //
          // This is often the case for elements near the bottom of the page.
          //
          // In such cases we do not need to scroll the whole `offset` up, just the difference between
          // the top of the element and the offset, which is enough to align the top of `elem` at the
          // desired position.
          var elemTop = elem.getBoundingClientRect().top;
          $window.scrollBy(0, elemTop - offset);
        }
      } else {
        $window.scrollTo(0, 0);
      }
    }

    function scroll() {
      var hash = $location.hash(), elm;

      // empty hash, scroll to the top of the page
      if (!hash) scrollTo(null);

      // element with given id
      else if ((elm = document.getElementById(hash))) scrollTo(elm);

      // first anchor with given name :-D
      else if ((elm = getFirstAnchor(document.getElementsByName(hash)))) scrollTo(elm);

      // no element and hash == 'top', scroll to the top of the page
      else if (hash === 'top') scrollTo(null);
    }

    // does not scroll when user clicks on anchor link that is currently on
    // (no url change, no $location.hash() change), browser native does scroll
    if (autoScrollingEnabled) {
      $rootScope.$watch(function autoScrollWatch() {return $location.hash();},
        function autoScrollWatchAction(newVal, oldVal) {
          // skip the initial scroll if $location.hash is empty
          if (newVal === oldVal && newVal === '') return;

          jqLiteDocumentLoaded(function() {
            $rootScope.$evalAsync(scroll);
          });
        });
    }

    return scroll;
  }];
}

var $animateMinErr = minErr('$animate');

/**
 * @ngdoc provider
 * @name $animateProvider
 *
 * @description
 * Default implementation of $animate that doesn't perform any animations, instead just
 * synchronously performs DOM
 * updates and calls done() callbacks.
 *
 * In order to enable animations the ngAnimate module has to be loaded.
 *
 * To see the functional implementation check out src/ngAnimate/animate.js
 */
var $AnimateProvider = ['$provide', function($provide) {


  this.$$selectors = {};


  /**
   * @ngdoc method
   * @name $animateProvider#register
   *
   * @description
   * Registers a new injectable animation factory function. The factory function produces the
   * animation object which contains callback functions for each event that is expected to be
   * animated.
   *
   *   * `eventFn`: `function(Element, doneFunction)` The element to animate, the `doneFunction`
   *   must be called once the element animation is complete. If a function is returned then the
   *   animation service will use this function to cancel the animation whenever a cancel event is
   *   triggered.
   *
   *
   * ```js
   *   return {
     *     eventFn : function(element, done) {
     *       //code to run the animation
     *       //once complete, then run done()
     *       return function cancellationFunction() {
     *         //code to cancel the animation
     *       }
     *     }
     *   }
   * ```
   *
   * @param {string} name The name of the animation.
   * @param {Function} factory The factory function that will be executed to return the animation
   *                           object.
   */
  this.register = function(name, factory) {
    var key = name + '-animation';
    if (name && name.charAt(0) != '.') throw $animateMinErr('notcsel',
        "Expecting class selector starting with '.' got '{0}'.", name);
    this.$$selectors[name.substr(1)] = key;
    $provide.factory(key, factory);
  };

  /**
   * @ngdoc method
   * @name $animateProvider#classNameFilter
   *
   * @description
   * Sets and/or returns the CSS class regular expression that is checked when performing
   * an animation. Upon bootstrap the classNameFilter value is not set at all and will
   * therefore enable $animate to attempt to perform an animation on any element.
   * When setting the classNameFilter value, animations will only be performed on elements
   * that successfully match the filter expression. This in turn can boost performance
   * for low-powered devices as well as applications containing a lot of structural operations.
   * @param {RegExp=} expression The className expression which will be checked against all animations
   * @return {RegExp} The current CSS className expression value. If null then there is no expression value
   */
  this.classNameFilter = function(expression) {
    if (arguments.length === 1) {
      this.$$classNameFilter = (expression instanceof RegExp) ? expression : null;
    }
    return this.$$classNameFilter;
  };

  this.$get = ['$$q', '$$asyncCallback', '$rootScope', function($$q, $$asyncCallback, $rootScope) {

    var currentDefer;

    function runAnimationPostDigest(fn) {
      var cancelFn, defer = $$q.defer();
      defer.promise.$$cancelFn = function ngAnimateMaybeCancel() {
        cancelFn && cancelFn();
      };

      $rootScope.$$postDigest(function ngAnimatePostDigest() {
        cancelFn = fn(function ngAnimateNotifyComplete() {
          defer.resolve();
        });
      });

      return defer.promise;
    }

    function resolveElementClasses(element, classes) {
      var toAdd = [], toRemove = [];

      var hasClasses = createMap();
      forEach((element.attr('class') || '').split(/\s+/), function(className) {
        hasClasses[className] = true;
      });

      forEach(classes, function(status, className) {
        var hasClass = hasClasses[className];

        // If the most recent class manipulation (via $animate) was to remove the class, and the
        // element currently has the class, the class is scheduled for removal. Otherwise, if
        // the most recent class manipulation (via $animate) was to add the class, and the
        // element does not currently have the class, the class is scheduled to be added.
        if (status === false && hasClass) {
          toRemove.push(className);
        } else if (status === true && !hasClass) {
          toAdd.push(className);
        }
      });

      return (toAdd.length + toRemove.length) > 0 &&
        [toAdd.length ? toAdd : null, toRemove.length ? toRemove : null];
    }

    function cachedClassManipulation(cache, classes, op) {
      for (var i=0, ii = classes.length; i < ii; ++i) {
        var className = classes[i];
        cache[className] = op;
      }
    }

    function asyncPromise() {
      // only serve one instance of a promise in order to save CPU cycles
      if (!currentDefer) {
        currentDefer = $$q.defer();
        $$asyncCallback(function() {
          currentDefer.resolve();
          currentDefer = null;
        });
      }
      return currentDefer.promise;
    }

    function applyStyles(element, options) {
      if (angular.isObject(options)) {
        var styles = extend(options.from || {}, options.to || {});
        element.css(styles);
      }
    }

    /**
     *
     * @ngdoc service
     * @name $animate
     * @description The $animate service provides rudimentary DOM manipulation functions to
     * insert, remove and move elements within the DOM, as well as adding and removing classes.
     * This service is the core service used by the ngAnimate $animator service which provides
     * high-level animation hooks for CSS and JavaScript.
     *
     * $animate is available in the AngularJS core, however, the ngAnimate module must be included
     * to enable full out animation support. Otherwise, $animate will only perform simple DOM
     * manipulation operations.
     *
     * To learn more about enabling animation support, click here to visit the {@link ngAnimate
     * ngAnimate module page} as well as the {@link ngAnimate.$animate ngAnimate $animate service
     * page}.
     */
    return {
      animate: function(element, from, to) {
        applyStyles(element, { from: from, to: to });
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#enter
       * @kind function
       * @description Inserts the element into the DOM either after the `after` element or
       * as the first child within the `parent` element. When the function is called a promise
       * is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will be inserted into the DOM
       * @param {DOMElement} parent the parent element which will append the element as
       *   a child (if the after element is not present)
       * @param {DOMElement} after the sibling element which will append the element
       *   after itself
       * @param {object=} options an optional collection of styles that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      enter: function(element, parent, after, options) {
        applyStyles(element, options);
        after ? after.after(element)
              : parent.prepend(element);
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#leave
       * @kind function
       * @description Removes the element from the DOM. When the function is called a promise
       * is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will be removed from the DOM
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      leave: function(element, options) {
        applyStyles(element, options);
        element.remove();
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#move
       * @kind function
       * @description Moves the position of the provided element within the DOM to be placed
       * either after the `after` element or inside of the `parent` element. When the function
       * is called a promise is returned that will be resolved at a later time.
       *
       * @param {DOMElement} element the element which will be moved around within the
       *   DOM
       * @param {DOMElement} parent the parent element where the element will be
       *   inserted into (if the after element is not present)
       * @param {DOMElement} after the sibling element where the element will be
       *   positioned next to
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      move: function(element, parent, after, options) {
        // Do not remove element before insert. Removing will cause data associated with the
        // element to be dropped. Insert will implicitly do the remove.
        return this.enter(element, parent, after, options);
      },

      /**
       *
       * @ngdoc method
       * @name $animate#addClass
       * @kind function
       * @description Adds the provided className CSS class value to the provided element.
       * When the function is called a promise is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will have the className value
       *   added to it
       * @param {string} className the CSS class which will be added to the element
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      addClass: function(element, className, options) {
        return this.setClass(element, className, [], options);
      },

      $$addClassImmediately: function(element, className, options) {
        element = jqLite(element);
        className = !isString(className)
                        ? (isArray(className) ? className.join(' ') : '')
                        : className;
        forEach(element, function(element) {
          jqLiteAddClass(element, className);
        });
        applyStyles(element, options);
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#removeClass
       * @kind function
       * @description Removes the provided className CSS class value from the provided element.
       * When the function is called a promise is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will have the className value
       *   removed from it
       * @param {string} className the CSS class which will be removed from the element
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      removeClass: function(element, className, options) {
        return this.setClass(element, [], className, options);
      },

      $$removeClassImmediately: function(element, className, options) {
        element = jqLite(element);
        className = !isString(className)
                        ? (isArray(className) ? className.join(' ') : '')
                        : className;
        forEach(element, function(element) {
          jqLiteRemoveClass(element, className);
        });
        applyStyles(element, options);
        return asyncPromise();
      },

      /**
       *
       * @ngdoc method
       * @name $animate#setClass
       * @kind function
       * @description Adds and/or removes the given CSS classes to and from the element.
       * When the function is called a promise is returned that will be resolved at a later time.
       * @param {DOMElement} element the element which will have its CSS classes changed
       *   removed from it
       * @param {string} add the CSS classes which will be added to the element
       * @param {string} remove the CSS class which will be removed from the element
       * @param {object=} options an optional collection of options that will be applied to the element.
       * @return {Promise} the animation callback promise
       */
      setClass: function(element, add, remove, options) {
        var self = this;
        var STORAGE_KEY = '$$animateClasses';
        var createdCache = false;
        element = jqLite(element);

        var cache = element.data(STORAGE_KEY);
        if (!cache) {
          cache = {
            classes: {},
            options: options
          };
          createdCache = true;
        } else if (options && cache.options) {
          cache.options = angular.extend(cache.options || {}, options);
        }

        var classes = cache.classes;

        add = isArray(add) ? add : add.split(' ');
        remove = isArray(remove) ? remove : remove.split(' ');
        cachedClassManipulation(classes, add, true);
        cachedClassManipulation(classes, remove, false);

        if (createdCache) {
          cache.promise = runAnimationPostDigest(function(done) {
            var cache = element.data(STORAGE_KEY);
            element.removeData(STORAGE_KEY);

            // in the event that the element is removed before postDigest
            // is run then the cache will be undefined and there will be
            // no need anymore to add or remove and of the element classes
            if (cache) {
              var classes = resolveElementClasses(element, cache.classes);
              if (classes) {
                self.$$setClassImmediately(element, classes[0], classes[1], cache.options);
              }
            }

            done();
          });
          element.data(STORAGE_KEY, cache);
        }

        return cache.promise;
      },

      $$setClassImmediately: function(element, add, remove, options) {
        add && this.$$addClassImmediately(element, add);
        remove && this.$$removeClassImmediately(element, remove);
        applyStyles(element, options);
        return asyncPromise();
      },

      enabled: noop,
      cancel: noop
    };
  }];
}];

function $$AsyncCallbackProvider() {
  this.$get = ['$$rAF', '$timeout', function($$rAF, $timeout) {
    return $$rAF.supported
      ? function(fn) { return $$rAF(fn); }
      : function(fn) {
        return $timeout(fn, 0, false);
      };
  }];
}

/* global stripHash: true */

/**
 * ! This is a private undocumented service !
 *
 * @name $browser
 * @requires $log
 * @description
 * This object has two goals:
 *
 * - hide all the global state in the browser caused by the window object
 * - abstract away all the browser specific features and inconsistencies
 *
 * For tests we provide {@link ngMock.$browser mock implementation} of the `$browser`
 * service, which can be used for convenient testing of the application without the interaction with
 * the real browser apis.
 */
/**
 * @param {object} window The global window object.
 * @param {object} document jQuery wrapped document.
 * @param {object} $log window.console or an object with the same interface.
 * @param {object} $sniffer $sniffer service
 */
function Browser(window, document, $log, $sniffer) {
  var self = this,
      rawDocument = document[0],
      location = window.location,
      history = window.history,
      setTimeout = window.setTimeout,
      clearTimeout = window.clearTimeout,
      pendingDeferIds = {};

  self.isMock = false;

  var outstandingRequestCount = 0;
  var outstandingRequestCallbacks = [];

  // TODO(vojta): remove this temporary api
  self.$$completeOutstandingRequest = completeOutstandingRequest;
  self.$$incOutstandingRequestCount = function() { outstandingRequestCount++; };

  /**
   * Executes the `fn` function(supports currying) and decrements the `outstandingRequestCallbacks`
   * counter. If the counter reaches 0, all the `outstandingRequestCallbacks` are executed.
   */
  function completeOutstandingRequest(fn) {
    try {
      fn.apply(null, sliceArgs(arguments, 1));
    } finally {
      outstandingRequestCount--;
      if (outstandingRequestCount === 0) {
        while (outstandingRequestCallbacks.length) {
          try {
            outstandingRequestCallbacks.pop()();
          } catch (e) {
            $log.error(e);
          }
        }
      }
    }
  }

  function getHash(url) {
    var index = url.indexOf('#');
    return index === -1 ? '' : url.substr(index + 1);
  }

  /**
   * @private
   * Note: this method is used only by scenario runner
   * TODO(vojta): prefix this method with $$ ?
   * @param {function()} callback Function that will be called when no outstanding request
   */
  self.notifyWhenNoOutstandingRequests = function(callback) {
    // force browser to execute all pollFns - this is needed so that cookies and other pollers fire
    // at some deterministic time in respect to the test runner's actions. Leaving things up to the
    // regular poller would result in flaky tests.
    forEach(pollFns, function(pollFn) { pollFn(); });

    if (outstandingRequestCount === 0) {
      callback();
    } else {
      outstandingRequestCallbacks.push(callback);
    }
  };

  //////////////////////////////////////////////////////////////
  // Poll Watcher API
  //////////////////////////////////////////////////////////////
  var pollFns = [],
      pollTimeout;

  /**
   * @name $browser#addPollFn
   *
   * @param {function()} fn Poll function to add
   *
   * @description
   * Adds a function to the list of functions that poller periodically executes,
   * and starts polling if not started yet.
   *
   * @returns {function()} the added function
   */
  self.addPollFn = function(fn) {
    if (isUndefined(pollTimeout)) startPoller(100, setTimeout);
    pollFns.push(fn);
    return fn;
  };

  /**
   * @param {number} interval How often should browser call poll functions (ms)
   * @param {function()} setTimeout Reference to a real or fake `setTimeout` function.
   *
   * @description
   * Configures the poller to run in the specified intervals, using the specified
   * setTimeout fn and kicks it off.
   */
  function startPoller(interval, setTimeout) {
    (function check() {
      forEach(pollFns, function(pollFn) { pollFn(); });
      pollTimeout = setTimeout(check, interval);
    })();
  }

  //////////////////////////////////////////////////////////////
  // URL API
  //////////////////////////////////////////////////////////////

  var cachedState, lastHistoryState,
      lastBrowserUrl = location.href,
      baseElement = document.find('base'),
      reloadLocation = null;

  cacheState();
  lastHistoryState = cachedState;

  /**
   * @name $browser#url
   *
   * @description
   * GETTER:
   * Without any argument, this method just returns current value of location.href.
   *
   * SETTER:
   * With at least one argument, this method sets url to new value.
   * If html5 history api supported, pushState/replaceState is used, otherwise
   * location.href/location.replace is used.
   * Returns its own instance to allow chaining
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to change url.
   *
   * @param {string} url New url (when used as setter)
   * @param {boolean=} replace Should new url replace current history record?
   * @param {object=} state object to use with pushState/replaceState
   */
  self.url = function(url, replace, state) {
    // In modern browsers `history.state` is `null` by default; treating it separately
    // from `undefined` would cause `$browser.url('/foo')` to change `history.state`
    // to undefined via `pushState`. Instead, let's change `undefined` to `null` here.
    if (isUndefined(state)) {
      state = null;
    }

    // Android Browser BFCache causes location, history reference to become stale.
    if (location !== window.location) location = window.location;
    if (history !== window.history) history = window.history;

    // setter
    if (url) {
      var sameState = lastHistoryState === state;

      // Don't change anything if previous and current URLs and states match. This also prevents
      // IE<10 from getting into redirect loop when in LocationHashbangInHtml5Url mode.
      // See https://github.com/angular/angular.js/commit/ffb2701
      if (lastBrowserUrl === url && (!$sniffer.history || sameState)) {
        return self;
      }
      var sameBase = lastBrowserUrl && stripHash(lastBrowserUrl) === stripHash(url);
      lastBrowserUrl = url;
      lastHistoryState = state;
      // Don't use history API if only the hash changed
      // due to a bug in IE10/IE11 which leads
      // to not firing a `hashchange` nor `popstate` event
      // in some cases (see #9143).
      if ($sniffer.history && (!sameBase || !sameState)) {
        history[replace ? 'replaceState' : 'pushState'](state, '', url);
        cacheState();
        // Do the assignment again so that those two variables are referentially identical.
        lastHistoryState = cachedState;
      } else {
        if (!sameBase) {
          reloadLocation = url;
        }
        if (replace) {
          location.replace(url);
        } else if (!sameBase) {
          location.href = url;
        } else {
          location.hash = getHash(url);
        }
      }
      return self;
    // getter
    } else {
      // - reloadLocation is needed as browsers don't allow to read out
      //   the new location.href if a reload happened.
      // - the replacement is a workaround for https://bugzilla.mozilla.org/show_bug.cgi?id=407172
      return reloadLocation || location.href.replace(/%27/g,"'");
    }
  };

  /**
   * @name $browser#state
   *
   * @description
   * This method is a getter.
   *
   * Return history.state or null if history.state is undefined.
   *
   * @returns {object} state
   */
  self.state = function() {
    return cachedState;
  };

  var urlChangeListeners = [],
      urlChangeInit = false;

  function cacheStateAndFireUrlChange() {
    cacheState();
    fireUrlChange();
  }

  function getCurrentState() {
    try {
      return history.state;
    } catch (e) {
      // MSIE can reportedly throw when there is no state (UNCONFIRMED).
    }
  }

  // This variable should be used *only* inside the cacheState function.
  var lastCachedState = null;
  function cacheState() {
    // This should be the only place in $browser where `history.state` is read.
    cachedState = getCurrentState();
    cachedState = isUndefined(cachedState) ? null : cachedState;

    // Prevent callbacks fo fire twice if both hashchange & popstate were fired.
    if (equals(cachedState, lastCachedState)) {
      cachedState = lastCachedState;
    }
    lastCachedState = cachedState;
  }

  function fireUrlChange() {
    if (lastBrowserUrl === self.url() && lastHistoryState === cachedState) {
      return;
    }

    lastBrowserUrl = self.url();
    lastHistoryState = cachedState;
    forEach(urlChangeListeners, function(listener) {
      listener(self.url(), cachedState);
    });
  }

  /**
   * @name $browser#onUrlChange
   *
   * @description
   * Register callback function that will be called, when url changes.
   *
   * It's only called when the url is changed from outside of angular:
   * - user types different url into address bar
   * - user clicks on history (forward/back) button
   * - user clicks on a link
   *
   * It's not called when url is changed by $browser.url() method
   *
   * The listener gets called with new url as parameter.
   *
   * NOTE: this api is intended for use only by the $location service. Please use the
   * {@link ng.$location $location service} to monitor url changes in angular apps.
   *
   * @param {function(string)} listener Listener function to be called when url changes.
   * @return {function(string)} Returns the registered listener fn - handy if the fn is anonymous.
   */
  self.onUrlChange = function(callback) {
    // TODO(vojta): refactor to use node's syntax for events
    if (!urlChangeInit) {
      // We listen on both (hashchange/popstate) when available, as some browsers (e.g. Opera)
      // don't fire popstate when user change the address bar and don't fire hashchange when url
      // changed by push/replaceState

      // html5 history api - popstate event
      if ($sniffer.history) jqLite(window).on('popstate', cacheStateAndFireUrlChange);
      // hashchange event
      jqLite(window).on('hashchange', cacheStateAndFireUrlChange);

      urlChangeInit = true;
    }

    urlChangeListeners.push(callback);
    return callback;
  };

  /**
   * Checks whether the url has changed outside of Angular.
   * Needs to be exported to be able to check for changes that have been done in sync,
   * as hashchange/popstate events fire in async.
   */
  self.$$checkUrlChange = fireUrlChange;

  //////////////////////////////////////////////////////////////
  // Misc API
  //////////////////////////////////////////////////////////////

  /**
   * @name $browser#baseHref
   *
   * @description
   * Returns current <base href>
   * (always relative - without domain)
   *
   * @returns {string} The current base href
   */
  self.baseHref = function() {
    var href = baseElement.attr('href');
    return href ? href.replace(/^(https?\:)?\/\/[^\/]*/, '') : '';
  };

  //////////////////////////////////////////////////////////////
  // Cookies API
  //////////////////////////////////////////////////////////////
  var lastCookies = {};
  var lastCookieString = '';
  var cookiePath = self.baseHref();

  function safeDecodeURIComponent(str) {
    try {
      return decodeURIComponent(str);
    } catch (e) {
      return str;
    }
  }

  /**
   * @name $browser#cookies
   *
   * @param {string=} name Cookie name
   * @param {string=} value Cookie value
   *
   * @description
   * The cookies method provides a 'private' low level access to browser cookies.
   * It is not meant to be used directly, use the $cookie service instead.
   *
   * The return values vary depending on the arguments that the method was called with as follows:
   *
   * - cookies() -> hash of all cookies, this is NOT a copy of the internal state, so do not modify
   *   it
   * - cookies(name, value) -> set name to value, if value is undefined delete the cookie
   * - cookies(name) -> the same as (name, undefined) == DELETES (no one calls it right now that
   *   way)
   *
   * @returns {Object} Hash of all cookies (if called without any parameter)
   */
  self.cookies = function(name, value) {
    var cookieLength, cookieArray, cookie, i, index;

    if (name) {
      if (value === undefined) {
        rawDocument.cookie = encodeURIComponent(name) + "=;path=" + cookiePath +
                                ";expires=Thu, 01 Jan 1970 00:00:00 GMT";
      } else {
        if (isString(value)) {
          cookieLength = (rawDocument.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) +
                                ';path=' + cookiePath).length + 1;

          // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:
          // - 300 cookies
          // - 20 cookies per unique domain
          // - 4096 bytes per cookie
          if (cookieLength > 4096) {
            $log.warn("Cookie '" + name +
              "' possibly not set or overflowed because it was too large (" +
              cookieLength + " > 4096 bytes)!");
          }
        }
      }
    } else {
      if (rawDocument.cookie !== lastCookieString) {
        lastCookieString = rawDocument.cookie;
        cookieArray = lastCookieString.split("; ");
        lastCookies = {};

        for (i = 0; i < cookieArray.length; i++) {
          cookie = cookieArray[i];
          index = cookie.indexOf('=');
          if (index > 0) { //ignore nameless cookies
            name = safeDecodeURIComponent(cookie.substring(0, index));
            // the first value that is seen for a cookie is the most
            // specific one.  values for the same cookie name that
            // follow are for less specific paths.
            if (lastCookies[name] === undefined) {
              lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));
            }
          }
        }
      }
      return lastCookies;
    }
  };


  /**
   * @name $browser#defer
   * @param {function()} fn A function, who's execution should be deferred.
   * @param {number=} [delay=0] of milliseconds to defer the function execution.
   * @returns {*} DeferId that can be used to cancel the task via `$browser.defer.cancel()`.
   *
   * @description
   * Executes a fn asynchronously via `setTimeout(fn, delay)`.
   *
   * Unlike when calling `setTimeout` directly, in test this function is mocked and instead of using
   * `setTimeout` in tests, the fns are queued in an array, which can be programmatically flushed
   * via `$browser.defer.flush()`.
   *
   */
  self.defer = function(fn, delay) {
    var timeoutId;
    outstandingRequestCount++;
    timeoutId = setTimeout(function() {
      delete pendingDeferIds[timeoutId];
      completeOutstandingRequest(fn);
    }, delay || 0);
    pendingDeferIds[timeoutId] = true;
    return timeoutId;
  };


  /**
   * @name $browser#defer.cancel
   *
   * @description
   * Cancels a deferred task identified with `deferId`.
   *
   * @param {*} deferId Token returned by the `$browser.defer` function.
   * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
   *                    canceled.
   */
  self.defer.cancel = function(deferId) {
    if (pendingDeferIds[deferId]) {
      delete pendingDeferIds[deferId];
      clearTimeout(deferId);
      completeOutstandingRequest(noop);
      return true;
    }
    return false;
  };

}

function $BrowserProvider() {
  this.$get = ['$window', '$log', '$sniffer', '$document',
      function($window, $log, $sniffer, $document) {
        return new Browser($window, $document, $log, $sniffer);
      }];
}

/**
 * @ngdoc service
 * @name $cacheFactory
 *
 * @description
 * Factory that constructs {@link $cacheFactory.Cache Cache} objects and gives access to
 * them.
 *
 * ```js
 *
 *  var cache = $cacheFactory('cacheId');
 *  expect($cacheFactory.get('cacheId')).toBe(cache);
 *  expect($cacheFactory.get('noSuchCacheId')).not.toBeDefined();
 *
 *  cache.put("key", "value");
 *  cache.put("another key", "another value");
 *
 *  // We've specified no options on creation
 *  expect(cache.info()).toEqual({id: 'cacheId', size: 2});
 *
 * ```
 *
 *
 * @param {string} cacheId Name or id of the newly created cache.
 * @param {object=} options Options object that specifies the cache behavior. Properties:
 *
 *   - `{number=}` `capacity` — turns the cache into LRU cache.
 *
 * @returns {object} Newly created cache object with the following set of methods:
 *
 * - `{object}` `info()` — Returns id, size, and options of cache.
 * - `{{*}}` `put({string} key, {*} value)` — Puts a new key-value pair into the cache and returns
 *   it.
 * - `{{*}}` `get({string} key)` — Returns cached value for `key` or undefined for cache miss.
 * - `{void}` `remove({string} key)` — Removes a key-value pair from the cache.
 * - `{void}` `removeAll()` — Removes all cached values.
 * - `{void}` `destroy()` — Removes references to this cache from $cacheFactory.
 *
 * @example
   <example module="cacheExampleApp">
     <file name="index.html">
       <div ng-controller="CacheController">
         <input ng-model="newCacheKey" placeholder="Key">
         <input ng-model="newCacheValue" placeholder="Value">
         <button ng-click="put(newCacheKey, newCacheValue)">Cache</button>

         <p ng-if="keys.length">Cached Values</p>
         <div ng-repeat="key in keys">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="cache.get(key)"></b>
         </div>

         <p>Cache Info</p>
         <div ng-repeat="(key, value) in cache.info()">
           <span ng-bind="key"></span>
           <span>: </span>
           <b ng-bind="value"></b>
         </div>
       </div>
     </file>
     <file name="script.js">
       angular.module('cacheExampleApp', []).
         controller('CacheController', ['$scope', '$cacheFactory', function($scope, $cacheFactory) {
           $scope.keys = [];
           $scope.cache = $cacheFactory('cacheId');
           $scope.put = function(key, value) {
             if ($scope.cache.get(key) === undefined) {
               $scope.keys.push(key);
             }
             $scope.cache.put(key, value === undefined ? null : value);
           };
         }]);
     </file>
     <file name="style.css">
       p {
         margin: 10px 0 3px;
       }
     </file>
   </example>
 */
function $CacheFactoryProvider() {

  this.$get = function() {
    var caches = {};

    function cacheFactory(cacheId, options) {
      if (cacheId in caches) {
        throw minErr('$cacheFactory')('iid', "CacheId '{0}' is already taken!", cacheId);
      }

      var size = 0,
          stats = extend({}, options, {id: cacheId}),
          data = {},
          capacity = (options && options.capacity) || Number.MAX_VALUE,
          lruHash = {},
          freshEnd = null,
          staleEnd = null;

      /**
       * @ngdoc type
       * @name $cacheFactory.Cache
       *
       * @description
       * A cache object used to store and retrieve data, primarily used by
       * {@link $http $http} and the {@link ng.directive:script script} directive to cache
       * templates and other data.
       *
       * ```js
       *  angular.module('superCache')
       *    .factory('superCache', ['$cacheFactory', function($cacheFactory) {
       *      return $cacheFactory('super-cache');
       *    }]);
       * ```
       *
       * Example test:
       *
       * ```js
       *  it('should behave like a cache', inject(function(superCache) {
       *    superCache.put('key', 'value');
       *    superCache.put('another key', 'another value');
       *
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 2
       *    });
       *
       *    superCache.remove('another key');
       *    expect(superCache.get('another key')).toBeUndefined();
       *
       *    superCache.removeAll();
       *    expect(superCache.info()).toEqual({
       *      id: 'super-cache',
       *      size: 0
       *    });
       *  }));
       * ```
       */
      return caches[cacheId] = {

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#put
         * @kind function
         *
         * @description
         * Inserts a named entry into the {@link $cacheFactory.Cache Cache} object to be
         * retrieved later, and incrementing the size of the cache if the key was not already
         * present in the cache. If behaving like an LRU cache, it will also remove stale
         * entries from the set.
         *
         * It will not insert undefined values into the cache.
         *
         * @param {string} key the key under which the cached data is stored.
         * @param {*} value the value to store alongside the key. If it is undefined, the key
         *    will not be stored.
         * @returns {*} the value stored.
         */
        put: function(key, value) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key] || (lruHash[key] = {key: key});

            refresh(lruEntry);
          }

          if (isUndefined(value)) return;
          if (!(key in data)) size++;
          data[key] = value;

          if (size > capacity) {
            this.remove(staleEnd.key);
          }

          return value;
        },

        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#get
         * @kind function
         *
         * @description
         * Retrieves named data stored in the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the data to be retrieved
         * @returns {*} the value stored.
         */
        get: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            refresh(lruEntry);
          }

          return data[key];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#remove
         * @kind function
         *
         * @description
         * Removes an entry from the {@link $cacheFactory.Cache Cache} object.
         *
         * @param {string} key the key of the entry to be removed
         */
        remove: function(key) {
          if (capacity < Number.MAX_VALUE) {
            var lruEntry = lruHash[key];

            if (!lruEntry) return;

            if (lruEntry == freshEnd) freshEnd = lruEntry.p;
            if (lruEntry == staleEnd) staleEnd = lruEntry.n;
            link(lruEntry.n,lruEntry.p);

            delete lruHash[key];
          }

          delete data[key];
          size--;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#removeAll
         * @kind function
         *
         * @description
         * Clears the cache object of any entries.
         */
        removeAll: function() {
          data = {};
          size = 0;
          lruHash = {};
          freshEnd = staleEnd = null;
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#destroy
         * @kind function
         *
         * @description
         * Destroys the {@link $cacheFactory.Cache Cache} object entirely,
         * removing it from the {@link $cacheFactory $cacheFactory} set.
         */
        destroy: function() {
          data = null;
          stats = null;
          lruHash = null;
          delete caches[cacheId];
        },


        /**
         * @ngdoc method
         * @name $cacheFactory.Cache#info
         * @kind function
         *
         * @description
         * Retrieve information regarding a particular {@link $cacheFactory.Cache Cache}.
         *
         * @returns {object} an object with the following properties:
         *   <ul>
         *     <li>**id**: the id of the cache instance</li>
         *     <li>**size**: the number of entries kept in the cache instance</li>
         *     <li>**...**: any additional properties from the options object when creating the
         *       cache.</li>
         *   </ul>
         */
        info: function() {
          return extend({}, stats, {size: size});
        }
      };


      /**
       * makes the `entry` the freshEnd of the LRU linked list
       */
      function refresh(entry) {
        if (entry != freshEnd) {
          if (!staleEnd) {
            staleEnd = entry;
          } else if (staleEnd == entry) {
            staleEnd = entry.n;
          }

          link(entry.n, entry.p);
          link(entry, freshEnd);
          freshEnd = entry;
          freshEnd.n = null;
        }
      }


      /**
       * bidirectionally links two entries of the LRU linked list
       */
      function link(nextEntry, prevEntry) {
        if (nextEntry != prevEntry) {
          if (nextEntry) nextEntry.p = prevEntry; //p stands for previous, 'prev' didn't minify
          if (prevEntry) prevEntry.n = nextEntry; //n stands for next, 'next' didn't minify
        }
      }
    }


  /**
   * @ngdoc method
   * @name $cacheFactory#info
   *
   * @description
   * Get information about all the caches that have been created
   *
   * @returns {Object} - key-value map of `cacheId` to the result of calling `cache#info`
   */
    cacheFactory.info = function() {
      var info = {};
      forEach(caches, function(cache, cacheId) {
        info[cacheId] = cache.info();
      });
      return info;
    };


  /**
   * @ngdoc method
   * @name $cacheFactory#get
   *
   * @description
   * Get access to a cache object by the `cacheId` used when it was created.
   *
   * @param {string} cacheId Name or id of a cache to access.
   * @returns {object} Cache object identified by the cacheId or undefined if no such cache.
   */
    cacheFactory.get = function(cacheId) {
      return caches[cacheId];
    };


    return cacheFactory;
  };
}

/**
 * @ngdoc service
 * @name $templateCache
 *
 * @description
 * The first time a template is used, it is loaded in the template cache for quick retrieval. You
 * can load templates directly into the cache in a `script` tag, or by consuming the
 * `$templateCache` service directly.
 *
 * Adding via the `script` tag:
 *
 * ```html
 *   <script type="text/ng-template" id="templateId.html">
 *     <p>This is the content of the template</p>
 *   </script>
 * ```
 *
 * **Note:** the `script` tag containing the template does not need to be included in the `head` of
 * the document, but it must be a descendent of the {@link ng.$rootElement $rootElement} (IE,
 * element with ng-app attribute), otherwise the template will be ignored.
 *
 * Adding via the `$templateCache` service:
 *
 * ```js
 * var myApp = angular.module('myApp', []);
 * myApp.run(function($templateCache) {
 *   $templateCache.put('templateId.html', 'This is the content of the template');
 * });
 * ```
 *
 * To retrieve the template later, simply use it in your HTML:
 * ```html
 * <div ng-include=" 'templateId.html' "></div>
 * ```
 *
 * or get it via Javascript:
 * ```js
 * $templateCache.get('templateId.html')
 * ```
 *
 * See {@link ng.$cacheFactory $cacheFactory}.
 *
 */
function $TemplateCacheProvider() {
  this.$get = ['$cacheFactory', function($cacheFactory) {
    return $cacheFactory('templates');
  }];
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* ! VARIABLE/FUNCTION NAMING CONVENTIONS THAT APPLY TO THIS FILE!
 *
 * DOM-related variables:
 *
 * - "node" - DOM Node
 * - "element" - DOM Element or Node
 * - "$node" or "$element" - jqLite-wrapped node or element
 *
 *
 * Compiler related stuff:
 *
 * - "linkFn" - linking fn of a single directive
 * - "nodeLinkFn" - function that aggregates all linking fns for a particular node
 * - "childLinkFn" -  function that aggregates all linking fns for child nodes of a particular node
 * - "compositeLinkFn" - function that aggregates all linking fns for a compilation root (nodeList)
 */


/**
 * @ngdoc service
 * @name $compile
 * @kind function
 *
 * @description
 * Compiles an HTML string or DOM into a template and produces a template function, which
 * can then be used to link {@link ng.$rootScope.Scope `scope`} and the template together.
 *
 * The compilation is a process of walking the DOM tree and matching DOM elements to
 * {@link ng.$compileProvider#directive directives}.
 *
 * <div class="alert alert-warning">
 * **Note:** This document is an in-depth reference of all directive options.
 * For a gentle introduction to directives with examples of common use cases,
 * see the {@link guide/directive directive guide}.
 * </div>
 *
 * ## Comprehensive Directive API
 *
 * There are many different options for a directive.
 *
 * The difference resides in the return value of the factory function.
 * You can either return a "Directive Definition Object" (see below) that defines the directive properties,
 * or just the `postLink` function (all other properties will have the default values).
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's recommended to use the "directive definition object" form.
 * </div>
 *
 * Here's an example directive declared with a Directive Definition Object:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       priority: 0,
 *       template: '<div></div>', // or // function(tElement, tAttrs) { ... },
 *       // or
 *       // templateUrl: 'directive.html', // or // function(tElement, tAttrs) { ... },
 *       transclude: false,
 *       restrict: 'A',
 *       templateNamespace: 'html',
 *       scope: false,
 *       controller: function($scope, $element, $attrs, $transclude, otherInjectables) { ... },
 *       controllerAs: 'stringIdentifier',
 *       bindToController: false,
 *       require: 'siblingDirectiveName', // or // ['^parentDirectiveName', '?optionalDirectiveName', '?^optionalParent'],
 *       compile: function compile(tElement, tAttrs, transclude) {
 *         return {
 *           pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *           post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *         }
 *         // or
 *         // return function postLink( ... ) { ... }
 *       },
 *       // or
 *       // link: {
 *       //  pre: function preLink(scope, iElement, iAttrs, controller) { ... },
 *       //  post: function postLink(scope, iElement, iAttrs, controller) { ... }
 *       // }
 *       // or
 *       // link: function postLink( ... ) { ... }
 *     };
 *     return directiveDefinitionObject;
 *   });
 * ```
 *
 * <div class="alert alert-warning">
 * **Note:** Any unspecified options will use the default value. You can see the default values below.
 * </div>
 *
 * Therefore the above can be simplified as:
 *
 * ```js
 *   var myModule = angular.module(...);
 *
 *   myModule.directive('directiveName', function factory(injectables) {
 *     var directiveDefinitionObject = {
 *       link: function postLink(scope, iElement, iAttrs) { ... }
 *     };
 *     return directiveDefinitionObject;
 *     // or
 *     // return function postLink(scope, iElement, iAttrs) { ... }
 *   });
 * ```
 *
 *
 *
 * ### Directive Definition Object
 *
 * The directive definition object provides instructions to the {@link ng.$compile
 * compiler}. The attributes are:
 *
 * #### `multiElement`
 * When this property is set to true, the HTML compiler will collect DOM nodes between
 * nodes with the attributes `directive-name-start` and `directive-name-end`, and group them
 * together as the directive elements. It is recommended that this feature be used on directives
 * which are not strictly behavioural (such as {@link ngClick}), and which
 * do not manipulate or replace child nodes (such as {@link ngInclude}).
 *
 * #### `priority`
 * When there are multiple directives defined on a single DOM element, sometimes it
 * is necessary to specify the order in which the directives are applied. The `priority` is used
 * to sort the directives before their `compile` functions get called. Priority is defined as a
 * number. Directives with greater numerical `priority` are compiled first. Pre-link functions
 * are also run in priority order, but post-link functions are run in reverse order. The order
 * of directives with the same priority is undefined. The default priority is `0`.
 *
 * #### `terminal`
 * If set to true then the current `priority` will be the last set of directives
 * which will execute (any directives at the current priority will still execute
 * as the order of execution on same `priority` is undefined). Note that expressions
 * and other directives used in the directive's template will also be excluded from execution.
 *
 * #### `scope`
 * **If set to `true`,** then a new scope will be created for this directive. If multiple directives on the
 * same element request a new scope, only one new scope is created. The new scope rule does not
 * apply for the root of the template since the root of the template always gets a new scope.
 *
 * **If set to `{}` (object hash),** then a new "isolate" scope is created. The 'isolate' scope differs from
 * normal scope in that it does not prototypically inherit from the parent scope. This is useful
 * when creating reusable components, which should not accidentally read or modify data in the
 * parent scope.
 *
 * The 'isolate' scope takes an object hash which defines a set of local scope properties
 * derived from the parent scope. These local properties are useful for aliasing values for
 * templates. Locals definition is a hash of local scope property to its source:
 *
 * * `@` or `@attr` - bind a local scope property to the value of DOM attribute. The result is
 *   always a string since DOM attributes are strings. If no `attr` name is specified  then the
 *   attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="hello {{name}}">` and widget definition
 *   of `scope: { localName:'@myAttr' }`, then widget scope property `localName` will reflect
 *   the interpolated value of `hello {{name}}`. As the `name` attribute changes so will the
 *   `localName` property on the widget scope. The `name` is read from the parent scope (not
 *   component scope).
 *
 * * `=` or `=attr` - set up bi-directional binding between a local scope property and the
 *   parent scope property of name defined via the value of the `attr` attribute. If no `attr`
 *   name is specified then the attribute name is assumed to be the same as the local name.
 *   Given `<widget my-attr="parentModel">` and widget definition of
 *   `scope: { localModel:'=myAttr' }`, then widget scope property `localModel` will reflect the
 *   value of `parentModel` on the parent scope. Any changes to `parentModel` will be reflected
 *   in `localModel` and any changes in `localModel` will reflect in `parentModel`. If the parent
 *   scope property doesn't exist, it will throw a NON_ASSIGNABLE_MODEL_EXPRESSION exception. You
 *   can avoid this behavior using `=?` or `=?attr` in order to flag the property as optional. If
 *   you want to shallow watch for changes (i.e. $watchCollection instead of $watch) you can use
 *   `=*` or `=*attr` (`=*?` or `=*?attr` if the property is optional).
 *
 * * `&` or `&attr` - provides a way to execute an expression in the context of the parent scope.
 *   If no `attr` name is specified then the attribute name is assumed to be the same as the
 *   local name. Given `<widget my-attr="count = count + value">` and widget definition of
 *   `scope: { localFn:'&myAttr' }`, then isolate scope property `localFn` will point to
 *   a function wrapper for the `count = count + value` expression. Often it's desirable to
 *   pass data from the isolated scope via an expression to the parent scope, this can be
 *   done by passing a map of local variable names and values into the expression wrapper fn.
 *   For example, if the expression is `increment(amount)` then we can specify the amount value
 *   by calling the `localFn` as `localFn({amount: 22})`.
 *
 *
 * #### `bindToController`
 * When an isolate scope is used for a component (see above), and `controllerAs` is used, `bindToController: true` will
 * allow a component to have its properties bound to the controller, rather than to scope. When the controller
 * is instantiated, the initial values of the isolate scope bindings are already available.
 *
 * #### `controller`
 * Controller constructor function. The controller is instantiated before the
 * pre-linking phase and it is shared with other directives (see
 * `require` attribute). This allows the directives to communicate with each other and augment
 * each other's behavior. The controller is injectable (and supports bracket notation) with the following locals:
 *
 * * `$scope` - Current scope associated with the element
 * * `$element` - Current element
 * * `$attrs` - Current attributes object for the element
 * * `$transclude` - A transclude linking function pre-bound to the correct transclusion scope:
 *   `function([scope], cloneLinkingFn, futureParentElement)`.
 *    * `scope`: optional argument to override the scope.
 *    * `cloneLinkingFn`: optional argument to create clones of the original transcluded content.
 *    * `futureParentElement`:
 *        * defines the parent to which the `cloneLinkingFn` will add the cloned elements.
 *        * default: `$element.parent()` resp. `$element` for `transclude:'element'` resp. `transclude:true`.
 *        * only needed for transcludes that are allowed to contain non html elements (e.g. SVG elements)
 *          and when the `cloneLinkinFn` is passed,
 *          as those elements need to created and cloned in a special way when they are defined outside their
 *          usual containers (e.g. like `<svg>`).
 *        * See also the `directive.templateNamespace` property.
 *
 *
 * #### `require`
 * Require another directive and inject its controller as the fourth argument to the linking function. The
 * `require` takes a string name (or array of strings) of the directive(s) to pass in. If an array is used, the
 * injected argument will be an array in corresponding order. If no such directive can be
 * found, or if the directive does not have a controller, then an error is raised (unless no link function
 * is specified, in which case error checking is skipped). The name can be prefixed with:
 *
 * * (no prefix) - Locate the required controller on the current element. Throw an error if not found.
 * * `?` - Attempt to locate the required controller or pass `null` to the `link` fn if not found.
 * * `^` - Locate the required controller by searching the element and its parents. Throw an error if not found.
 * * `^^` - Locate the required controller by searching the element's parents. Throw an error if not found.
 * * `?^` - Attempt to locate the required controller by searching the element and its parents or pass
 *   `null` to the `link` fn if not found.
 * * `?^^` - Attempt to locate the required controller by searching the element's parents, or pass
 *   `null` to the `link` fn if not found.
 *
 *
 * #### `controllerAs`
 * Controller alias at the directive scope. An alias for the controller so it
 * can be referenced at the directive template. The directive needs to define a scope for this
 * configuration to be used. Useful in the case when directive is used as component.
 *
 *
 * #### `restrict`
 * String of subset of `EACM` which restricts the directive to a specific directive
 * declaration style. If omitted, the defaults (elements and attributes) are used.
 *
 * * `E` - Element name (default): `<my-directive></my-directive>`
 * * `A` - Attribute (default): `<div my-directive="exp"></div>`
 * * `C` - Class: `<div class="my-directive: exp;"></div>`
 * * `M` - Comment: `<!-- directive: my-directive exp -->`
 *
 *
 * #### `templateNamespace`
 * String representing the document type used by the markup in the template.
 * AngularJS needs this information as those elements need to be created and cloned
 * in a special way when they are defined outside their usual containers like `<svg>` and `<math>`.
 *
 * * `html` - All root nodes in the template are HTML. Root nodes may also be
 *   top-level elements such as `<svg>` or `<math>`.
 * * `svg` - The root nodes in the template are SVG elements (excluding `<math>`).
 * * `math` - The root nodes in the template are MathML elements (excluding `<svg>`).
 *
 * If no `templateNamespace` is specified, then the namespace is considered to be `html`.
 *
 * #### `template`
 * HTML markup that may:
 * * Replace the contents of the directive's element (default).
 * * Replace the directive's element itself (if `replace` is true - DEPRECATED).
 * * Wrap the contents of the directive's element (if `transclude` is true).
 *
 * Value may be:
 *
 * * A string. For example `<div red-on-hover>{{delete_str}}</div>`.
 * * A function which takes two arguments `tElement` and `tAttrs` (described in the `compile`
 *   function api below) and returns a string value.
 *
 *
 * #### `templateUrl`
 * This is similar to `template` but the template is loaded from the specified URL, asynchronously.
 *
 * Because template loading is asynchronous the compiler will suspend compilation of directives on that element
 * for later when the template has been resolved.  In the meantime it will continue to compile and link
 * sibling and parent elements as though this element had not contained any directives.
 *
 * The compiler does not suspend the entire compilation to wait for templates to be loaded because this
 * would result in the whole app "stalling" until all templates are loaded asynchronously - even in the
 * case when only one deeply nested directive has `templateUrl`.
 *
 * Template loading is asynchronous even if the template has been preloaded into the {@link $templateCache}
 *
 * You can specify `templateUrl` as a string representing the URL or as a function which takes two
 * arguments `tElement` and `tAttrs` (described in the `compile` function api below) and returns
 * a string value representing the url.  In either case, the template URL is passed through {@link
 * $sce#getTrustedResourceUrl $sce.getTrustedResourceUrl}.
 *
 *
 * #### `replace` ([*DEPRECATED*!], will be removed in next major release - i.e. v2.0)
 * specify what the template should replace. Defaults to `false`.
 *
 * * `true` - the template will replace the directive's element.
 * * `false` - the template will replace the contents of the directive's element.
 *
 * The replacement process migrates all of the attributes / classes from the old element to the new
 * one. See the {@link guide/directive#template-expanding-directive
 * Directives Guide} for an example.
 *
 * There are very few scenarios where element replacement is required for the application function,
 * the main one being reusable custom components that are used within SVG contexts
 * (because SVG doesn't work with custom elements in the DOM tree).
 *
 * #### `transclude`
 * Extract the contents of the element where the directive appears and make it available to the directive.
 * The contents are compiled and provided to the directive as a **transclusion function**. See the
 * {@link $compile#transclusion Transclusion} section below.
 *
 * There are two kinds of transclusion depending upon whether you want to transclude just the contents of the
 * directive's element or the entire element:
 *
 * * `true` - transclude the content (i.e. the child nodes) of the directive's element.
 * * `'element'` - transclude the whole of the directive's element including any directives on this
 *   element that defined at a lower priority than this directive. When used, the `template`
 *   property is ignored.
 *
 *
 * #### `compile`
 *
 * ```js
 *   function compile(tElement, tAttrs, transclude) { ... }
 * ```
 *
 * The compile function deals with transforming the template DOM. Since most directives do not do
 * template transformation, it is not used often. The compile function takes the following arguments:
 *
 *   * `tElement` - template element - The element where the directive has been declared. It is
 *     safe to do template transformation on the element and child elements only.
 *
 *   * `tAttrs` - template attributes - Normalized list of attributes declared on this element shared
 *     between all directive compile functions.
 *
 *   * `transclude` -  [*DEPRECATED*!] A transclude linking function: `function(scope, cloneLinkingFn)`
 *
 * <div class="alert alert-warning">
 * **Note:** The template instance and the link instance may be different objects if the template has
 * been cloned. For this reason it is **not** safe to do anything other than DOM transformations that
 * apply to all cloned DOM nodes within the compile function. Specifically, DOM listener registration
 * should be done in a linking function rather than in a compile function.
 * </div>

 * <div class="alert alert-warning">
 * **Note:** The compile function cannot handle directives that recursively use themselves in their
 * own templates or compile functions. Compiling these directives results in an infinite loop and a
 * stack overflow errors.
 *
 * This can be avoided by manually using $compile in the postLink function to imperatively compile
 * a directive's template instead of relying on automatic template compilation via `template` or
 * `templateUrl` declaration or manual compilation inside the compile function.
 * </div>
 *
 * <div class="alert alert-error">
 * **Note:** The `transclude` function that is passed to the compile function is deprecated, as it
 *   e.g. does not know about the right outer scope. Please use the transclude function that is passed
 *   to the link function instead.
 * </div>

 * A compile function can have a return value which can be either a function or an object.
 *
 * * returning a (post-link) function - is equivalent to registering the linking function via the
 *   `link` property of the config object when the compile function is empty.
 *
 * * returning an object with function(s) registered via `pre` and `post` properties - allows you to
 *   control when a linking function should be called during the linking phase. See info about
 *   pre-linking and post-linking functions below.
 *
 *
 * #### `link`
 * This property is used only if the `compile` property is not defined.
 *
 * ```js
 *   function link(scope, iElement, iAttrs, controller, transcludeFn) { ... }
 * ```
 *
 * The link function is responsible for registering DOM listeners as well as updating the DOM. It is
 * executed after the template has been cloned. This is where most of the directive logic will be
 * put.
 *
 *   * `scope` - {@link ng.$rootScope.Scope Scope} - The scope to be used by the
 *     directive for registering {@link ng.$rootScope.Scope#$watch watches}.
 *
 *   * `iElement` - instance element - The element where the directive is to be used. It is safe to
 *     manipulate the children of the element only in `postLink` function since the children have
 *     already been linked.
 *
 *   * `iAttrs` - instance attributes - Normalized list of attributes declared on this element shared
 *     between all directive linking functions.
 *
 *   * `controller` - the directive's required controller instance(s) - Instances are shared
 *     among all directives, which allows the directives to use the controllers as a communication
 *     channel. The exact value depends on the directive's `require` property:
 *       * `string`: the controller instance
 *       * `array`: array of controller instances
 *       * no controller(s) required: `undefined`
 *
 *     If a required controller cannot be found, and it is optional, the instance is `null`,
 *     otherwise the {@link error:$compile:ctreq Missing Required Controller} error is thrown.
 *
 *   * `transcludeFn` - A transclude linking function pre-bound to the correct transclusion scope.
 *     This is the same as the `$transclude`
 *     parameter of directive controllers, see there for details.
 *     `function([scope], cloneLinkingFn, futureParentElement)`.
 *
 * #### Pre-linking function
 *
 * Executed before the child elements are linked. Not safe to do DOM transformation since the
 * compiler linking function will fail to locate the correct elements for linking.
 *
 * #### Post-linking function
 *
 * Executed after the child elements are linked.
 *
 * Note that child elements that contain `templateUrl` directives will not have been compiled
 * and linked since they are waiting for their template to load asynchronously and their own
 * compilation and linking has been suspended until that occurs.
 *
 * It is safe to do DOM transformation in the post-linking function on elements that are not waiting
 * for their async templates to be resolved.
 *
 *
 * ### Transclusion
 *
 * Transclusion is the process of extracting a collection of DOM element from one part of the DOM and
 * copying them to another part of the DOM, while maintaining their connection to the original AngularJS
 * scope from where they were taken.
 *
 * Transclusion is used (often with {@link ngTransclude}) to insert the
 * original contents of a directive's element into a specified place in the template of the directive.
 * The benefit of transclusion, over simply moving the DOM elements manually, is that the transcluded
 * content has access to the properties on the scope from which it was taken, even if the directive
 * has isolated scope.
 * See the {@link guide/directive#creating-a-directive-that-wraps-other-elements Directives Guide}.
 *
 * This makes it possible for the widget to have private state for its template, while the transcluded
 * content has access to its originating scope.
 *
 * <div class="alert alert-warning">
 * **Note:** When testing an element transclude directive you must not place the directive at the root of the
 * DOM fragment that is being compiled. See {@link guide/unit-testing#testing-transclusion-directives
 * Testing Transclusion Directives}.
 * </div>
 *
 * #### Transclusion Functions
 *
 * When a directive requests transclusion, the compiler extracts its contents and provides a **transclusion
 * function** to the directive's `link` function and `controller`. This transclusion function is a special
 * **linking function** that will return the compiled contents linked to a new transclusion scope.
 *
 * <div class="alert alert-info">
 * If you are just using {@link ngTransclude} then you don't need to worry about this function, since
 * ngTransclude will deal with it for us.
 * </div>
 *
 * If you want to manually control the insertion and removal of the transcluded content in your directive
 * then you must use this transclude function. When you call a transclude function it returns a a jqLite/JQuery
 * object that contains the compiled DOM, which is linked to the correct transclusion scope.
 *
 * When you call a transclusion function you can pass in a **clone attach function**. This function accepts
 * two parameters, `function(clone, scope) { ... }`, where the `clone` is a fresh compiled copy of your transcluded
 * content and the `scope` is the newly created transclusion scope, to which the clone is bound.
 *
 * <div class="alert alert-info">
 * **Best Practice**: Always provide a `cloneFn` (clone attach function) when you call a translude function
 * since you then get a fresh clone of the original DOM and also have access to the new transclusion scope.
 * </div>
 *
 * It is normal practice to attach your transcluded content (`clone`) to the DOM inside your **clone
 * attach function**:
 *
 * ```js
 * var transcludedContent, transclusionScope;
 *
 * $transclude(function(clone, scope) {
 *   element.append(clone);
 *   transcludedContent = clone;
 *   transclusionScope = scope;
 * });
 * ```
 *
 * Later, if you want to remove the transcluded content from your DOM then you should also destroy the
 * associated transclusion scope:
 *
 * ```js
 * transcludedContent.remove();
 * transclusionScope.$destroy();
 * ```
 *
 * <div class="alert alert-info">
 * **Best Practice**: if you intend to add and remove transcluded content manually in your directive
 * (by calling the transclude function to get the DOM and and calling `element.remove()` to remove it),
 * then you are also responsible for calling `$destroy` on the transclusion scope.
 * </div>
 *
 * The built-in DOM manipulation directives, such as {@link ngIf}, {@link ngSwitch} and {@link ngRepeat}
 * automatically destroy their transluded clones as necessary so you do not need to worry about this if
 * you are simply using {@link ngTransclude} to inject the transclusion into your directive.
 *
 *
 * #### Transclusion Scopes
 *
 * When you call a transclude function it returns a DOM fragment that is pre-bound to a **transclusion
 * scope**. This scope is special, in that it is a child of the directive's scope (and so gets destroyed
 * when the directive's scope gets destroyed) but it inherits the properties of the scope from which it
 * was taken.
 *
 * For example consider a directive that uses transclusion and isolated scope. The DOM hierarchy might look
 * like this:
 *
 * ```html
 * <div ng-app>
 *   <div isolate>
 *     <div transclusion>
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * The `$parent` scope hierarchy will look like this:
 *
 * ```
 * - $rootScope
 *   - isolate
 *     - transclusion
 * ```
 *
 * but the scopes will inherit prototypically from different scopes to their `$parent`.
 *
 * ```
 * - $rootScope
 *   - transclusion
 * - isolate
 * ```
 *
 *
 * ### Attributes
 *
 * The {@link ng.$compile.directive.Attributes Attributes} object - passed as a parameter in the
 * `link()` or `compile()` functions. It has a variety of uses.
 *
 * accessing *Normalized attribute names:*
 * Directives like 'ngBind' can be expressed in many ways: 'ng:bind', `data-ng-bind`, or 'x-ng-bind'.
 * the attributes object allows for normalized access to
 *   the attributes.
 *
 * * *Directive inter-communication:* All directives share the same instance of the attributes
 *   object which allows the directives to use the attributes object as inter directive
 *   communication.
 *
 * * *Supports interpolation:* Interpolation attributes are assigned to the attribute object
 *   allowing other directives to read the interpolated value.
 *
 * * *Observing interpolated attributes:* Use `$observe` to observe the value changes of attributes
 *   that contain interpolation (e.g. `src="{{bar}}"`). Not only is this very efficient but it's also
 *   the only way to easily get the actual value because during the linking phase the interpolation
 *   hasn't been evaluated yet and so the value is at this time set to `undefined`.
 *
 * ```js
 * function linkingFn(scope, elm, attrs, ctrl) {
 *   // get the attribute value
 *   console.log(attrs.ngModel);
 *
 *   // change the attribute
 *   attrs.$set('ngModel', 'new value');
 *
 *   // observe changes to interpolated attribute
 *   attrs.$observe('ngModel', function(value) {
 *     console.log('ngModel has changed value to ' + value);
 *   });
 * }
 * ```
 *
 * ## Example
 *
 * <div class="alert alert-warning">
 * **Note**: Typically directives are registered with `module.directive`. The example below is
 * to illustrate how `$compile` works.
 * </div>
 *
 <example module="compileExample">
   <file name="index.html">
    <script>
      angular.module('compileExample', [], function($compileProvider) {
        // configure new 'compile' directive by passing a directive
        // factory function. The factory function injects the '$compile'
        $compileProvider.directive('compile', function($compile) {
          // directive factory creates a link function
          return function(scope, element, attrs) {
            scope.$watch(
              function(scope) {
                 // watch the 'compile' expression for changes
                return scope.$eval(attrs.compile);
              },
              function(value) {
                // when the 'compile' expression changes
                // assign it into the current DOM
                element.html(value);

                // compile the new DOM and link it to the current
                // scope.
                // NOTE: we only compile .childNodes so that
                // we don't get into infinite loop compiling ourselves
                $compile(element.contents())(scope);
              }
            );
          };
        });
      })
      .controller('GreeterController', ['$scope', function($scope) {
        $scope.name = 'Angular';
        $scope.html = 'Hello {{name}}';
      }]);
    </script>
    <div ng-controller="GreeterController">
      <input ng-model="name"> <br>
      <textarea ng-model="html"></textarea> <br>
      <div compile="html"></div>
    </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should auto compile', function() {
       var textarea = $('textarea');
       var output = $('div[compile]');
       // The initial state reads 'Hello Angular'.
       expect(output.getText()).toBe('Hello Angular');
       textarea.clear();
       textarea.sendKeys('{{name}}!');
       expect(output.getText()).toBe('Angular!');
     });
   </file>
 </example>

 *
 *
 * @param {string|DOMElement} element Element or HTML string to compile into a template function.
 * @param {function(angular.Scope, cloneAttachFn=)} transclude function available to directives - DEPRECATED.
 *
 * <div class="alert alert-error">
 * **Note:** Passing a `transclude` function to the $compile function is deprecated, as it
 *   e.g. will not use the right outer scope. Please pass the transclude function as a
 *   `parentBoundTranscludeFn` to the link function instead.
 * </div>
 *
 * @param {number} maxPriority only apply directives lower than given priority (Only effects the
 *                 root element(s), not their children)
 * @returns {function(scope, cloneAttachFn=, options=)} a link function which is used to bind template
 * (a DOM element/tree) to a scope. Where:
 *
 *  * `scope` - A {@link ng.$rootScope.Scope Scope} to bind to.
 *  * `cloneAttachFn` - If `cloneAttachFn` is provided, then the link function will clone the
 *  `template` and call the `cloneAttachFn` function allowing the caller to attach the
 *  cloned elements to the DOM document at the appropriate place. The `cloneAttachFn` is
 *  called as: <br> `cloneAttachFn(clonedElement, scope)` where:
 *
 *      * `clonedElement` - is a clone of the original `element` passed into the compiler.
 *      * `scope` - is the current scope with which the linking function is working with.
 *
 *  * `options` - An optional object hash with linking options. If `options` is provided, then the following
 *  keys may be used to control linking behavior:
 *
 *      * `parentBoundTranscludeFn` - the transclude function made available to
 *        directives; if given, it will be passed through to the link functions of
 *        directives found in `element` during compilation.
 *      * `transcludeControllers` - an object hash with keys that map controller names
 *        to controller instances; if given, it will make the controllers
 *        available to directives.
 *      * `futureParentElement` - defines the parent to which the `cloneAttachFn` will add
 *        the cloned elements; only needed for transcludes that are allowed to contain non html
 *        elements (e.g. SVG elements). See also the directive.controller property.
 *
 * Calling the linking function returns the element of the template. It is either the original
 * element passed in, or the clone of the element if the `cloneAttachFn` is provided.
 *
 * After linking the view is not updated until after a call to $digest which typically is done by
 * Angular automatically.
 *
 * If you need access to the bound view, there are two ways to do it:
 *
 * - If you are not asking the linking function to clone the template, create the DOM element(s)
 *   before you send them to the compiler and keep this reference around.
 *   ```js
 *     var element = $compile('<p>{{total}}</p>')(scope);
 *   ```
 *
 * - if on the other hand, you need the element to be cloned, the view reference from the original
 *   example would not point to the clone, but rather to the original template that was cloned. In
 *   this case, you can access the clone via the cloneAttachFn:
 *   ```js
 *     var templateElement = angular.element('<p>{{total}}</p>'),
 *         scope = ....;
 *
 *     var clonedElement = $compile(templateElement)(scope, function(clonedElement, scope) {
 *       //attach the clone to DOM document at the right place
 *     });
 *
 *     //now we have reference to the cloned DOM via `clonedElement`
 *   ```
 *
 *
 * For information on how the compiler works, see the
 * {@link guide/compiler Angular HTML Compiler} section of the Developer Guide.
 */

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc provider
 * @name $compileProvider
 *
 * @description
 */
$CompileProvider.$inject = ['$provide', '$$sanitizeUriProvider'];
function $CompileProvider($provide, $$sanitizeUriProvider) {
  var hasDirectives = {},
      Suffix = 'Directive',
      COMMENT_DIRECTIVE_REGEXP = /^\s*directive\:\s*([\w\-]+)\s+(.*)$/,
      CLASS_DIRECTIVE_REGEXP = /(([\w\-]+)(?:\:([^;]+))?;?)/,
      ALL_OR_NOTHING_ATTRS = makeMap('ngSrc,ngSrcset,src,srcset'),
      REQUIRE_PREFIX_REGEXP = /^(?:(\^\^?)?(\?)?(\^\^?)?)?/;

  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes
  // The assumption is that future DOM event attribute names will begin with
  // 'on' and be composed of only English letters.
  var EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;

  function parseIsolateBindings(scope, directiveName) {
    var LOCAL_REGEXP = /^\s*([@&]|=(\*?))(\??)\s*(\w*)\s*$/;

    var bindings = {};

    forEach(scope, function(definition, scopeName) {
      var match = definition.match(LOCAL_REGEXP);

      if (!match) {
        throw $compileMinErr('iscp',
            "Invalid isolate scope definition for directive '{0}'." +
            " Definition: {... {1}: '{2}' ...}",
            directiveName, scopeName, definition);
      }

      bindings[scopeName] = {
        mode: match[1][0],
        collection: match[2] === '*',
        optional: match[3] === '?',
        attrName: match[4] || scopeName
      };
    });

    return bindings;
  }

  function assertValidDirectiveName(name) {
    var letter = name.charAt(0);
    if (!letter || letter !== lowercase(letter)) {
      throw $compileMinErr('baddir', "Directive name '{0}' is invalid. The first character must be a lowercase letter", name);
    }
    return name;
  }

  /**
   * @ngdoc method
   * @name $compileProvider#directive
   * @kind function
   *
   * @description
   * Register a new directive with the compiler.
   *
   * @param {string|Object} name Name of the directive in camel-case (i.e. <code>ngBind</code> which
   *    will match as <code>ng-bind</code>), or an object map of directives where the keys are the
   *    names and the values are the factories.
   * @param {Function|Array} directiveFactory An injectable directive factory function. See
   *    {@link guide/directive} for more info.
   * @returns {ng.$compileProvider} Self for chaining.
   */
   this.directive = function registerDirective(name, directiveFactory) {
    assertNotHasOwnProperty(name, 'directive');
    if (isString(name)) {
      assertValidDirectiveName(name);
      assertArg(directiveFactory, 'directiveFactory');
      if (!hasDirectives.hasOwnProperty(name)) {
        hasDirectives[name] = [];
        $provide.factory(name + Suffix, ['$injector', '$exceptionHandler',
          function($injector, $exceptionHandler) {
            var directives = [];
            forEach(hasDirectives[name], function(directiveFactory, index) {
              try {
                var directive = $injector.invoke(directiveFactory);
                if (isFunction(directive)) {
                  directive = { compile: valueFn(directive) };
                } else if (!directive.compile && directive.link) {
                  directive.compile = valueFn(directive.link);
                }
                directive.priority = directive.priority || 0;
                directive.index = index;
                directive.name = directive.name || name;
                directive.require = directive.require || (directive.controller && directive.name);
                directive.restrict = directive.restrict || 'EA';
                if (isObject(directive.scope)) {
                  directive.$$isolateBindings = parseIsolateBindings(directive.scope, directive.name);
                }
                directives.push(directive);
              } catch (e) {
                $exceptionHandler(e);
              }
            });
            return directives;
          }]);
      }
      hasDirectives[name].push(directiveFactory);
    } else {
      forEach(name, reverseParams(registerDirective));
    }
    return this;
  };


  /**
   * @ngdoc method
   * @name $compileProvider#aHrefSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at preventing XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.aHrefSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.aHrefSanitizationWhitelist();
    }
  };


  /**
   * @ngdoc method
   * @name $compileProvider#imgSrcSanitizationWhitelist
   * @kind function
   *
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      $$sanitizeUriProvider.imgSrcSanitizationWhitelist(regexp);
      return this;
    } else {
      return $$sanitizeUriProvider.imgSrcSanitizationWhitelist();
    }
  };

  /**
   * @ngdoc method
   * @name  $compileProvider#debugInfoEnabled
   *
   * @param {boolean=} enabled update the debugInfoEnabled state if provided, otherwise just return the
   * current debugInfoEnabled state
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   *
   * @kind function
   *
   * @description
   * Call this method to enable/disable various debug runtime information in the compiler such as adding
   * binding information and a reference to the current scope on to DOM elements.
   * If enabled, the compiler will add the following to DOM elements that have been bound to the scope
   * * `ng-binding` CSS class
   * * `$binding` data property containing an array of the binding expressions
   *
   * You may want to disable this in production for a significant performance boost. See
   * {@link guide/production#disabling-debug-data Disabling Debug Data} for more.
   *
   * The default value is true.
   */
  var debugInfoEnabled = true;
  this.debugInfoEnabled = function(enabled) {
    if (isDefined(enabled)) {
      debugInfoEnabled = enabled;
      return this;
    }
    return debugInfoEnabled;
  };

  this.$get = [
            '$injector', '$interpolate', '$exceptionHandler', '$templateRequest', '$parse',
            '$controller', '$rootScope', '$document', '$sce', '$animate', '$$sanitizeUri',
    function($injector,   $interpolate,   $exceptionHandler,   $templateRequest,   $parse,
             $controller,   $rootScope,   $document,   $sce,   $animate,   $$sanitizeUri) {

    var Attributes = function(element, attributesToCopy) {
      if (attributesToCopy) {
        var keys = Object.keys(attributesToCopy);
        var i, l, key;

        for (i = 0, l = keys.length; i < l; i++) {
          key = keys[i];
          this[key] = attributesToCopy[key];
        }
      } else {
        this.$attr = {};
      }

      this.$$element = element;
    };

    Attributes.prototype = {
      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$normalize
       * @kind function
       *
       * @description
       * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or
       * `data-`) to its normalized, camelCase form.
       *
       * Also there is special case for Moz prefix starting with upper case letter.
       *
       * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}
       *
       * @param {string} name Name to normalize
       */
      $normalize: directiveNormalize,


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$addClass
       * @kind function
       *
       * @description
       * Adds the CSS class value specified by the classVal parameter to the element. If animations
       * are enabled then an animation will be triggered for the class addition.
       *
       * @param {string} classVal The className value that will be added to the element
       */
      $addClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.addClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$removeClass
       * @kind function
       *
       * @description
       * Removes the CSS class value specified by the classVal parameter from the element. If
       * animations are enabled then an animation will be triggered for the class removal.
       *
       * @param {string} classVal The className value that will be removed from the element
       */
      $removeClass: function(classVal) {
        if (classVal && classVal.length > 0) {
          $animate.removeClass(this.$$element, classVal);
        }
      },

      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$updateClass
       * @kind function
       *
       * @description
       * Adds and removes the appropriate CSS class values to the element based on the difference
       * between the new and old CSS class values (specified as newClasses and oldClasses).
       *
       * @param {string} newClasses The current CSS className value
       * @param {string} oldClasses The former CSS className value
       */
      $updateClass: function(newClasses, oldClasses) {
        var toAdd = tokenDifference(newClasses, oldClasses);
        if (toAdd && toAdd.length) {
          $animate.addClass(this.$$element, toAdd);
        }

        var toRemove = tokenDifference(oldClasses, newClasses);
        if (toRemove && toRemove.length) {
          $animate.removeClass(this.$$element, toRemove);
        }
      },

      /**
       * Set a normalized attribute on the element in a way such that all directives
       * can share the attribute. This function properly handles boolean attributes.
       * @param {string} key Normalized key. (ie ngAttribute)
       * @param {string|boolean} value The value to set. If `null` attribute will be deleted.
       * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.
       *     Defaults to true.
       * @param {string=} attrName Optional none normalized name. Defaults to key.
       */
      $set: function(key, value, writeAttr, attrName) {
        // TODO: decide whether or not to throw an error if "class"
        //is set through this function since it may cause $updateClass to
        //become unstable.

        var node = this.$$element[0],
            booleanKey = getBooleanAttrName(node, key),
            aliasedKey = getAliasedAttrName(node, key),
            observer = key,
            nodeName;

        if (booleanKey) {
          this.$$element.prop(key, value);
          attrName = booleanKey;
        } else if (aliasedKey) {
          this[aliasedKey] = value;
          observer = aliasedKey;
        }

        this[key] = value;

        // translate normalized key to actual key
        if (attrName) {
          this.$attr[key] = attrName;
        } else {
          attrName = this.$attr[key];
          if (!attrName) {
            this.$attr[key] = attrName = snake_case(key, '-');
          }
        }

        nodeName = nodeName_(this.$$element);

        if ((nodeName === 'a' && key === 'href') ||
            (nodeName === 'img' && key === 'src')) {
          // sanitize a[href] and img[src] values
          this[key] = value = $$sanitizeUri(value, key === 'src');
        } else if (nodeName === 'img' && key === 'srcset') {
          // sanitize img[srcset] values
          var result = "";

          // first check if there are spaces because it's not the same pattern
          var trimmedSrcset = trim(value);
          //                (   999x   ,|   999w   ,|   ,|,   )
          var srcPattern = /(\s+\d+x\s*,|\s+\d+w\s*,|\s+,|,\s+)/;
          var pattern = /\s/.test(trimmedSrcset) ? srcPattern : /(,)/;

          // split srcset into tuple of uri and descriptor except for the last item
          var rawUris = trimmedSrcset.split(pattern);

          // for each tuples
          var nbrUrisWith2parts = Math.floor(rawUris.length / 2);
          for (var i = 0; i < nbrUrisWith2parts; i++) {
            var innerIdx = i * 2;
            // sanitize the uri
            result += $$sanitizeUri(trim(rawUris[innerIdx]), true);
            // add the descriptor
            result += (" " + trim(rawUris[innerIdx + 1]));
          }

          // split the last item into uri and descriptor
          var lastTuple = trim(rawUris[i * 2]).split(/\s/);

          // sanitize the last uri
          result += $$sanitizeUri(trim(lastTuple[0]), true);

          // and add the last descriptor if any
          if (lastTuple.length === 2) {
            result += (" " + trim(lastTuple[1]));
          }
          this[key] = value = result;
        }

        if (writeAttr !== false) {
          if (value === null || value === undefined) {
            this.$$element.removeAttr(attrName);
          } else {
            this.$$element.attr(attrName, value);
          }
        }

        // fire observers
        var $$observers = this.$$observers;
        $$observers && forEach($$observers[observer], function(fn) {
          try {
            fn(value);
          } catch (e) {
            $exceptionHandler(e);
          }
        });
      },


      /**
       * @ngdoc method
       * @name $compile.directive.Attributes#$observe
       * @kind function
       *
       * @description
       * Observes an interpolated attribute.
       *
       * The observer function will be invoked once during the next `$digest` following
       * compilation. The observer is then invoked whenever the interpolated value
       * changes.
       *
       * @param {string} key Normalized key. (ie ngAttribute) .
       * @param {function(interpolatedValue)} fn Function that will be called whenever
                the interpolated value of the attribute changes.
       *        See the {@link guide/directive#text-and-attribute-bindings Directives} guide for more info.
       * @returns {function()} Returns a deregistration function for this observer.
       */
      $observe: function(key, fn) {
        var attrs = this,
            $$observers = (attrs.$$observers || (attrs.$$observers = createMap())),
            listeners = ($$observers[key] || ($$observers[key] = []));

        listeners.push(fn);
        $rootScope.$evalAsync(function() {
          if (!listeners.$$inter && attrs.hasOwnProperty(key)) {
            // no one registered attribute interpolation function, so lets call it manually
            fn(attrs[key]);
          }
        });

        return function() {
          arrayRemove(listeners, fn);
        };
      }
    };


    function safeAddClass($element, className) {
      try {
        $element.addClass(className);
      } catch (e) {
        // ignore, since it means that we are trying to set class on
        // SVG element, where class name is read-only.
      }
    }


    var startSymbol = $interpolate.startSymbol(),
        endSymbol = $interpolate.endSymbol(),
        denormalizeTemplate = (startSymbol == '{{' || endSymbol  == '}}')
            ? identity
            : function denormalizeTemplate(template) {
              return template.replace(/\{\{/g, startSymbol).replace(/}}/g, endSymbol);
        },
        NG_ATTR_BINDING = /^ngAttr[A-Z]/;

    compile.$$addBindingInfo = debugInfoEnabled ? function $$addBindingInfo($element, binding) {
      var bindings = $element.data('$binding') || [];

      if (isArray(binding)) {
        bindings = bindings.concat(binding);
      } else {
        bindings.push(binding);
      }

      $element.data('$binding', bindings);
    } : noop;

    compile.$$addBindingClass = debugInfoEnabled ? function $$addBindingClass($element) {
      safeAddClass($element, 'ng-binding');
    } : noop;

    compile.$$addScopeInfo = debugInfoEnabled ? function $$addScopeInfo($element, scope, isolated, noTemplate) {
      var dataName = isolated ? (noTemplate ? '$isolateScopeNoTemplate' : '$isolateScope') : '$scope';
      $element.data(dataName, scope);
    } : noop;

    compile.$$addScopeClass = debugInfoEnabled ? function $$addScopeClass($element, isolated) {
      safeAddClass($element, isolated ? 'ng-isolate-scope' : 'ng-scope');
    } : noop;

    return compile;

    //================================

    function compile($compileNodes, transcludeFn, maxPriority, ignoreDirective,
                        previousCompileContext) {
      if (!($compileNodes instanceof jqLite)) {
        // jquery always rewraps, whereas we need to preserve the original selector so that we can
        // modify it.
        $compileNodes = jqLite($compileNodes);
      }
      // We can not compile top level text elements since text nodes can be merged and we will
      // not be able to attach scope data to them, so we will wrap them in <span>
      forEach($compileNodes, function(node, index) {
        if (node.nodeType == NODE_TYPE_TEXT && node.nodeValue.match(/\S+/) /* non-empty */ ) {
          $compileNodes[index] = jqLite(node).wrap('<span></span>').parent()[0];
        }
      });
      var compositeLinkFn =
              compileNodes($compileNodes, transcludeFn, $compileNodes,
                           maxPriority, ignoreDirective, previousCompileContext);
      compile.$$addScopeClass($compileNodes);
      var namespace = null;
      return function publicLinkFn(scope, cloneConnectFn, options) {
        assertArg(scope, 'scope');

        options = options || {};
        var parentBoundTranscludeFn = options.parentBoundTranscludeFn,
          transcludeControllers = options.transcludeControllers,
          futureParentElement = options.futureParentElement;

        // When `parentBoundTranscludeFn` is passed, it is a
        // `controllersBoundTransclude` function (it was previously passed
        // as `transclude` to directive.link) so we must unwrap it to get
        // its `boundTranscludeFn`
        if (parentBoundTranscludeFn && parentBoundTranscludeFn.$$boundTransclude) {
          parentBoundTranscludeFn = parentBoundTranscludeFn.$$boundTransclude;
        }

        if (!namespace) {
          namespace = detectNamespaceForChildElements(futureParentElement);
        }
        var $linkNode;
        if (namespace !== 'html') {
          // When using a directive with replace:true and templateUrl the $compileNodes
          // (or a child element inside of them)
          // might change, so we need to recreate the namespace adapted compileNodes
          // for call to the link function.
          // Note: This will already clone the nodes...
          $linkNode = jqLite(
            wrapTemplate(namespace, jqLite('<div>').append($compileNodes).html())
          );
        } else if (cloneConnectFn) {
          // important!!: we must call our jqLite.clone() since the jQuery one is trying to be smart
          // and sometimes changes the structure of the DOM.
          $linkNode = JQLitePrototype.clone.call($compileNodes);
        } else {
          $linkNode = $compileNodes;
        }

        if (transcludeControllers) {
          for (var controllerName in transcludeControllers) {
            $linkNode.data('$' + controllerName + 'Controller', transcludeControllers[controllerName].instance);
          }
        }

        compile.$$addScopeInfo($linkNode, scope);

        if (cloneConnectFn) cloneConnectFn($linkNode, scope);
        if (compositeLinkFn) compositeLinkFn(scope, $linkNode, $linkNode, parentBoundTranscludeFn);
        return $linkNode;
      };
    }

    function detectNamespaceForChildElements(parentElement) {
      // TODO: Make this detect MathML as well...
      var node = parentElement && parentElement[0];
      if (!node) {
        return 'html';
      } else {
        return nodeName_(node) !== 'foreignobject' && node.toString().match(/SVG/) ? 'svg' : 'html';
      }
    }

    /**
     * Compile function matches each node in nodeList against the directives. Once all directives
     * for a particular node are collected their compile functions are executed. The compile
     * functions return values - the linking functions - are combined into a composite linking
     * function, which is the a linking function for the node.
     *
     * @param {NodeList} nodeList an array of nodes or NodeList to compile
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *        scope argument is auto-generated to the new child of the transcluded parent scope.
     * @param {DOMElement=} $rootElement If the nodeList is the root of the compilation tree then
     *        the rootElement must be set the jqLite collection of the compile root. This is
     *        needed so that the jqLite collection items can be replaced with widgets.
     * @param {number=} maxPriority Max directive priority.
     * @returns {Function} A composite linking function of all of the matched directives or null.
     */
    function compileNodes(nodeList, transcludeFn, $rootElement, maxPriority, ignoreDirective,
                            previousCompileContext) {
      var linkFns = [],
          attrs, directives, nodeLinkFn, childNodes, childLinkFn, linkFnFound, nodeLinkFnFound;

      for (var i = 0; i < nodeList.length; i++) {
        attrs = new Attributes();

        // we must always refer to nodeList[i] since the nodes can be replaced underneath us.
        directives = collectDirectives(nodeList[i], [], attrs, i === 0 ? maxPriority : undefined,
                                        ignoreDirective);

        nodeLinkFn = (directives.length)
            ? applyDirectivesToNode(directives, nodeList[i], attrs, transcludeFn, $rootElement,
                                      null, [], [], previousCompileContext)
            : null;

        if (nodeLinkFn && nodeLinkFn.scope) {
          compile.$$addScopeClass(attrs.$$element);
        }

        childLinkFn = (nodeLinkFn && nodeLinkFn.terminal ||
                      !(childNodes = nodeList[i].childNodes) ||
                      !childNodes.length)
            ? null
            : compileNodes(childNodes,
                 nodeLinkFn ? (
                  (nodeLinkFn.transcludeOnThisElement || !nodeLinkFn.templateOnThisElement)
                     && nodeLinkFn.transclude) : transcludeFn);

        if (nodeLinkFn || childLinkFn) {
          linkFns.push(i, nodeLinkFn, childLinkFn);
          linkFnFound = true;
          nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;
        }

        //use the previous context only for the first element in the virtual group
        previousCompileContext = null;
      }

      // return a linking function if we have found anything, null otherwise
      return linkFnFound ? compositeLinkFn : null;

      function compositeLinkFn(scope, nodeList, $rootElement, parentBoundTranscludeFn) {
        var nodeLinkFn, childLinkFn, node, childScope, i, ii, idx, childBoundTranscludeFn;
        var stableNodeList;


        if (nodeLinkFnFound) {
          // copy nodeList so that if a nodeLinkFn removes or adds an element at this DOM level our
          // offsets don't get screwed up
          var nodeListLength = nodeList.length;
          stableNodeList = new Array(nodeListLength);

          // create a sparse array by only copying the elements which have a linkFn
          for (i = 0; i < linkFns.length; i+=3) {
            idx = linkFns[i];
            stableNodeList[idx] = nodeList[idx];
          }
        } else {
          stableNodeList = nodeList;
        }

        for (i = 0, ii = linkFns.length; i < ii;) {
          node = stableNodeList[linkFns[i++]];
          nodeLinkFn = linkFns[i++];
          childLinkFn = linkFns[i++];

          if (nodeLinkFn) {
            if (nodeLinkFn.scope) {
              childScope = scope.$new();
              compile.$$addScopeInfo(jqLite(node), childScope);
            } else {
              childScope = scope;
            }

            if (nodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(
                  scope, nodeLinkFn.transclude, parentBoundTranscludeFn,
                  nodeLinkFn.elementTranscludeOnThisElement);

            } else if (!nodeLinkFn.templateOnThisElement && parentBoundTranscludeFn) {
              childBoundTranscludeFn = parentBoundTranscludeFn;

            } else if (!parentBoundTranscludeFn && transcludeFn) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, transcludeFn);

            } else {
              childBoundTranscludeFn = null;
            }

            nodeLinkFn(childLinkFn, childScope, node, $rootElement, childBoundTranscludeFn);

          } else if (childLinkFn) {
            childLinkFn(scope, node.childNodes, undefined, parentBoundTranscludeFn);
          }
        }
      }
    }

    function createBoundTranscludeFn(scope, transcludeFn, previousBoundTranscludeFn, elementTransclusion) {

      var boundTranscludeFn = function(transcludedScope, cloneFn, controllers, futureParentElement, containingScope) {

        if (!transcludedScope) {
          transcludedScope = scope.$new(false, containingScope);
          transcludedScope.$$transcluded = true;
        }

        return transcludeFn(transcludedScope, cloneFn, {
          parentBoundTranscludeFn: previousBoundTranscludeFn,
          transcludeControllers: controllers,
          futureParentElement: futureParentElement
        });
      };

      return boundTranscludeFn;
    }

    /**
     * Looks for directives on the given node and adds them to the directive collection which is
     * sorted.
     *
     * @param node Node to search.
     * @param directives An array to which the directives are added to. This array is sorted before
     *        the function returns.
     * @param attrs The shared attrs object which is used to populate the normalized attributes.
     * @param {number=} maxPriority Max directive priority.
     */
    function collectDirectives(node, directives, attrs, maxPriority, ignoreDirective) {
      var nodeType = node.nodeType,
          attrsMap = attrs.$attr,
          match,
          className;

      switch (nodeType) {
        case NODE_TYPE_ELEMENT: /* Element */
          // use the node name: <directive>
          addDirective(directives,
              directiveNormalize(nodeName_(node)), 'E', maxPriority, ignoreDirective);

          // iterate over the attributes
          for (var attr, name, nName, ngAttrName, value, isNgAttr, nAttrs = node.attributes,
                   j = 0, jj = nAttrs && nAttrs.length; j < jj; j++) {
            var attrStartName = false;
            var attrEndName = false;

            attr = nAttrs[j];
            name = attr.name;
            value = trim(attr.value);

            // support ngAttr attribute binding
            ngAttrName = directiveNormalize(name);
            if (isNgAttr = NG_ATTR_BINDING.test(ngAttrName)) {
              name = name.replace(PREFIX_REGEXP, '')
                .substr(8).replace(/_(.)/g, function(match, letter) {
                  return letter.toUpperCase();
                });
            }

            var directiveNName = ngAttrName.replace(/(Start|End)$/, '');
            if (directiveIsMultiElement(directiveNName)) {
              if (ngAttrName === directiveNName + 'Start') {
                attrStartName = name;
                attrEndName = name.substr(0, name.length - 5) + 'end';
                name = name.substr(0, name.length - 6);
              }
            }

            nName = directiveNormalize(name.toLowerCase());
            attrsMap[nName] = name;
            if (isNgAttr || !attrs.hasOwnProperty(nName)) {
                attrs[nName] = value;
                if (getBooleanAttrName(node, nName)) {
                  attrs[nName] = true; // presence means true
                }
            }
            addAttrInterpolateDirective(node, directives, value, nName, isNgAttr);
            addDirective(directives, nName, 'A', maxPriority, ignoreDirective, attrStartName,
                          attrEndName);
          }

          // use class as directive
          className = node.className;
          if (isObject(className)) {
              // Maybe SVGAnimatedString
              className = className.animVal;
          }
          if (isString(className) && className !== '') {
            while (match = CLASS_DIRECTIVE_REGEXP.exec(className)) {
              nName = directiveNormalize(match[2]);
              if (addDirective(directives, nName, 'C', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[3]);
              }
              className = className.substr(match.index + match[0].length);
            }
          }
          break;
        case NODE_TYPE_TEXT: /* Text Node */
          addTextInterpolateDirective(directives, node.nodeValue);
          break;
        case NODE_TYPE_COMMENT: /* Comment */
          try {
            match = COMMENT_DIRECTIVE_REGEXP.exec(node.nodeValue);
            if (match) {
              nName = directiveNormalize(match[1]);
              if (addDirective(directives, nName, 'M', maxPriority, ignoreDirective)) {
                attrs[nName] = trim(match[2]);
              }
            }
          } catch (e) {
            // turns out that under some circumstances IE9 throws errors when one attempts to read
            // comment's node value.
            // Just ignore it and continue. (Can't seem to reproduce in test case.)
          }
          break;
      }

      directives.sort(byPriority);
      return directives;
    }

    /**
     * Given a node with an directive-start it collects all of the siblings until it finds
     * directive-end.
     * @param node
     * @param attrStart
     * @param attrEnd
     * @returns {*}
     */
    function groupScan(node, attrStart, attrEnd) {
      var nodes = [];
      var depth = 0;
      if (attrStart && node.hasAttribute && node.hasAttribute(attrStart)) {
        do {
          if (!node) {
            throw $compileMinErr('uterdir',
                      "Unterminated attribute, found '{0}' but no matching '{1}' found.",
                      attrStart, attrEnd);
          }
          if (node.nodeType == NODE_TYPE_ELEMENT) {
            if (node.hasAttribute(attrStart)) depth++;
            if (node.hasAttribute(attrEnd)) depth--;
          }
          nodes.push(node);
          node = node.nextSibling;
        } while (depth > 0);
      } else {
        nodes.push(node);
      }

      return jqLite(nodes);
    }

    /**
     * Wrapper for linking function which converts normal linking function into a grouped
     * linking function.
     * @param linkFn
     * @param attrStart
     * @param attrEnd
     * @returns {Function}
     */
    function groupElementsLinkFnWrapper(linkFn, attrStart, attrEnd) {
      return function(scope, element, attrs, controllers, transcludeFn) {
        element = groupScan(element[0], attrStart, attrEnd);
        return linkFn(scope, element, attrs, controllers, transcludeFn);
      };
    }

    /**
     * Once the directives have been collected, their compile functions are executed. This method
     * is responsible for inlining directive templates as well as terminating the application
     * of the directives if the terminal directive has been reached.
     *
     * @param {Array} directives Array of collected directives to execute their compile function.
     *        this needs to be pre-sorted by priority order.
     * @param {Node} compileNode The raw DOM node to apply the compile functions to
     * @param {Object} templateAttrs The shared attribute function
     * @param {function(angular.Scope, cloneAttachFn=)} transcludeFn A linking function, where the
     *                                                  scope argument is auto-generated to the new
     *                                                  child of the transcluded parent scope.
     * @param {JQLite} jqCollection If we are working on the root of the compile tree then this
     *                              argument has the root jqLite array so that we can replace nodes
     *                              on it.
     * @param {Object=} originalReplaceDirective An optional directive that will be ignored when
     *                                           compiling the transclusion.
     * @param {Array.<Function>} preLinkFns
     * @param {Array.<Function>} postLinkFns
     * @param {Object} previousCompileContext Context used for previous compilation of the current
     *                                        node
     * @returns {Function} linkFn
     */
    function applyDirectivesToNode(directives, compileNode, templateAttrs, transcludeFn,
                                   jqCollection, originalReplaceDirective, preLinkFns, postLinkFns,
                                   previousCompileContext) {
      previousCompileContext = previousCompileContext || {};

      var terminalPriority = -Number.MAX_VALUE,
          newScopeDirective,
          controllerDirectives = previousCompileContext.controllerDirectives,
          controllers,
          newIsolateScopeDirective = previousCompileContext.newIsolateScopeDirective,
          templateDirective = previousCompileContext.templateDirective,
          nonTlbTranscludeDirective = previousCompileContext.nonTlbTranscludeDirective,
          hasTranscludeDirective = false,
          hasTemplate = false,
          hasElementTranscludeDirective = previousCompileContext.hasElementTranscludeDirective,
          $compileNode = templateAttrs.$$element = jqLite(compileNode),
          directive,
          directiveName,
          $template,
          replaceDirective = originalReplaceDirective,
          childTranscludeFn = transcludeFn,
          linkFn,
          directiveValue;

      // executes all directives on the current element
      for (var i = 0, ii = directives.length; i < ii; i++) {
        directive = directives[i];
        var attrStart = directive.$$start;
        var attrEnd = directive.$$end;

        // collect multiblock sections
        if (attrStart) {
          $compileNode = groupScan(compileNode, attrStart, attrEnd);
        }
        $template = undefined;

        if (terminalPriority > directive.priority) {
          break; // prevent further processing of directives
        }

        if (directiveValue = directive.scope) {

          // skip the check for directives with async templates, we'll check the derived sync
          // directive when the template arrives
          if (!directive.templateUrl) {
            if (isObject(directiveValue)) {
              // This directive is trying to add an isolated scope.
              // Check that there is no scope of any kind already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective || newScopeDirective,
                                directive, $compileNode);
              newIsolateScopeDirective = directive;
            } else {
              // This directive is trying to add a child scope.
              // Check that there is no isolated scope already
              assertNoDuplicate('new/isolated scope', newIsolateScopeDirective, directive,
                                $compileNode);
            }
          }

          newScopeDirective = newScopeDirective || directive;
        }

        directiveName = directive.name;

        if (!directive.templateUrl && directive.controller) {
          directiveValue = directive.controller;
          controllerDirectives = controllerDirectives || {};
          assertNoDuplicate("'" + directiveName + "' controller",
              controllerDirectives[directiveName], directive, $compileNode);
          controllerDirectives[directiveName] = directive;
        }

        if (directiveValue = directive.transclude) {
          hasTranscludeDirective = true;

          // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.
          // This option should only be used by directives that know how to safely handle element transclusion,
          // where the transcluded nodes are added or replaced after linking.
          if (!directive.$$tlb) {
            assertNoDuplicate('transclusion', nonTlbTranscludeDirective, directive, $compileNode);
            nonTlbTranscludeDirective = directive;
          }

          if (directiveValue == 'element') {
            hasElementTranscludeDirective = true;
            terminalPriority = directive.priority;
            $template = $compileNode;
            $compileNode = templateAttrs.$$element =
                jqLite(document.createComment(' ' + directiveName + ': ' +
                                              templateAttrs[directiveName] + ' '));
            compileNode = $compileNode[0];
            replaceWith(jqCollection, sliceArgs($template), compileNode);

            childTranscludeFn = compile($template, transcludeFn, terminalPriority,
                                        replaceDirective && replaceDirective.name, {
                                          // Don't pass in:
                                          // - controllerDirectives - otherwise we'll create duplicates controllers
                                          // - newIsolateScopeDirective or templateDirective - combining templates with
                                          //   element transclusion doesn't make sense.
                                          //
                                          // We need only nonTlbTranscludeDirective so that we prevent putting transclusion
                                          // on the same element more than once.
                                          nonTlbTranscludeDirective: nonTlbTranscludeDirective
                                        });
          } else {
            $template = jqLite(jqLiteClone(compileNode)).contents();
            $compileNode.empty(); // clear contents
            childTranscludeFn = compile($template, transcludeFn);
          }
        }

        if (directive.template) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          directiveValue = (isFunction(directive.template))
              ? directive.template($compileNode, templateAttrs)
              : directive.template;

          directiveValue = denormalizeTemplate(directiveValue);

          if (directive.replace) {
            replaceDirective = directive;
            if (jqLiteIsTextNode(directiveValue)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(directive.templateNamespace, trim(directiveValue)));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  directiveName, '');
            }

            replaceWith(jqCollection, $compileNode, compileNode);

            var newTemplateAttrs = {$attr: {}};

            // combine directives from the original node and from the template:
            // - take the array of directives for this element
            // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)
            // - collect directives from the template and sort them by priority
            // - combine directives as: processed + template + unprocessed
            var templateDirectives = collectDirectives(compileNode, [], newTemplateAttrs);
            var unprocessedDirectives = directives.splice(i + 1, directives.length - (i + 1));

            if (newIsolateScopeDirective) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = directives.concat(templateDirectives).concat(unprocessedDirectives);
            mergeTemplateAttributes(templateAttrs, newTemplateAttrs);

            ii = directives.length;
          } else {
            $compileNode.html(directiveValue);
          }
        }

        if (directive.templateUrl) {
          hasTemplate = true;
          assertNoDuplicate('template', templateDirective, directive, $compileNode);
          templateDirective = directive;

          if (directive.replace) {
            replaceDirective = directive;
          }

          nodeLinkFn = compileTemplateUrl(directives.splice(i, directives.length - i), $compileNode,
              templateAttrs, jqCollection, hasTranscludeDirective && childTranscludeFn, preLinkFns, postLinkFns, {
                controllerDirectives: controllerDirectives,
                newIsolateScopeDirective: newIsolateScopeDirective,
                templateDirective: templateDirective,
                nonTlbTranscludeDirective: nonTlbTranscludeDirective
              });
          ii = directives.length;
        } else if (directive.compile) {
          try {
            linkFn = directive.compile($compileNode, templateAttrs, childTranscludeFn);
            if (isFunction(linkFn)) {
              addLinkFns(null, linkFn, attrStart, attrEnd);
            } else if (linkFn) {
              addLinkFns(linkFn.pre, linkFn.post, attrStart, attrEnd);
            }
          } catch (e) {
            $exceptionHandler(e, startingTag($compileNode));
          }
        }

        if (directive.terminal) {
          nodeLinkFn.terminal = true;
          terminalPriority = Math.max(terminalPriority, directive.priority);
        }

      }

      nodeLinkFn.scope = newScopeDirective && newScopeDirective.scope === true;
      nodeLinkFn.transcludeOnThisElement = hasTranscludeDirective;
      nodeLinkFn.elementTranscludeOnThisElement = hasElementTranscludeDirective;
      nodeLinkFn.templateOnThisElement = hasTemplate;
      nodeLinkFn.transclude = childTranscludeFn;

      previousCompileContext.hasElementTranscludeDirective = hasElementTranscludeDirective;

      // might be normal or delayed nodeLinkFn depending on if templateUrl is present
      return nodeLinkFn;

      ////////////////////

      function addLinkFns(pre, post, attrStart, attrEnd) {
        if (pre) {
          if (attrStart) pre = groupElementsLinkFnWrapper(pre, attrStart, attrEnd);
          pre.require = directive.require;
          pre.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            pre = cloneAndAnnotateFn(pre, {isolateScope: true});
          }
          preLinkFns.push(pre);
        }
        if (post) {
          if (attrStart) post = groupElementsLinkFnWrapper(post, attrStart, attrEnd);
          post.require = directive.require;
          post.directiveName = directiveName;
          if (newIsolateScopeDirective === directive || directive.$$isolateScope) {
            post = cloneAndAnnotateFn(post, {isolateScope: true});
          }
          postLinkFns.push(post);
        }
      }


      function getControllers(directiveName, require, $element, elementControllers) {
        var value, retrievalMethod = 'data', optional = false;
        var $searchElement = $element;
        var match;
        if (isString(require)) {
          match = require.match(REQUIRE_PREFIX_REGEXP);
          require = require.substring(match[0].length);

          if (match[3]) {
            if (match[1]) match[3] = null;
            else match[1] = match[3];
          }
          if (match[1] === '^') {
            retrievalMethod = 'inheritedData';
          } else if (match[1] === '^^') {
            retrievalMethod = 'inheritedData';
            $searchElement = $element.parent();
          }
          if (match[2] === '?') {
            optional = true;
          }

          value = null;

          if (elementControllers && retrievalMethod === 'data') {
            if (value = elementControllers[require]) {
              value = value.instance;
            }
          }
          value = value || $searchElement[retrievalMethod]('$' + require + 'Controller');

          if (!value && !optional) {
            throw $compileMinErr('ctreq',
                "Controller '{0}', required by directive '{1}', can't be found!",
                require, directiveName);
          }
          return value || null;
        } else if (isArray(require)) {
          value = [];
          forEach(require, function(require) {
            value.push(getControllers(directiveName, require, $element, elementControllers));
          });
        }
        return value;
      }


      function nodeLinkFn(childLinkFn, scope, linkNode, $rootElement, boundTranscludeFn) {
        var i, ii, linkFn, controller, isolateScope, elementControllers, transcludeFn, $element,
            attrs;

        if (compileNode === linkNode) {
          attrs = templateAttrs;
          $element = templateAttrs.$$element;
        } else {
          $element = jqLite(linkNode);
          attrs = new Attributes($element, templateAttrs);
        }

        if (newIsolateScopeDirective) {
          isolateScope = scope.$new(true);
        }

        if (boundTranscludeFn) {
          // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`
          // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`
          transcludeFn = controllersBoundTransclude;
          transcludeFn.$$boundTransclude = boundTranscludeFn;
        }

        if (controllerDirectives) {
          // TODO: merge `controllers` and `elementControllers` into single object.
          controllers = {};
          elementControllers = {};
          forEach(controllerDirectives, function(directive) {
            var locals = {
              $scope: directive === newIsolateScopeDirective || directive.$$isolateScope ? isolateScope : scope,
              $element: $element,
              $attrs: attrs,
              $transclude: transcludeFn
            }, controllerInstance;

            controller = directive.controller;
            if (controller == '@') {
              controller = attrs[directive.name];
            }

            controllerInstance = $controller(controller, locals, true, directive.controllerAs);

            // For directives with element transclusion the element is a comment,
            // but jQuery .data doesn't support attaching data to comment nodes as it's hard to
            // clean up (http://bugs.jquery.com/ticket/8335).
            // Instead, we save the controllers for the element in a local hash and attach to .data
            // later, once we have the actual element.
            elementControllers[directive.name] = controllerInstance;
            if (!hasElementTranscludeDirective) {
              $element.data('$' + directive.name + 'Controller', controllerInstance.instance);
            }

            controllers[directive.name] = controllerInstance;
          });
        }

        if (newIsolateScopeDirective) {
          compile.$$addScopeInfo($element, isolateScope, true, !(templateDirective && (templateDirective === newIsolateScopeDirective ||
              templateDirective === newIsolateScopeDirective.$$originalDirective)));
          compile.$$addScopeClass($element, true);

          var isolateScopeController = controllers && controllers[newIsolateScopeDirective.name];
          var isolateBindingContext = isolateScope;
          if (isolateScopeController && isolateScopeController.identifier &&
              newIsolateScopeDirective.bindToController === true) {
            isolateBindingContext = isolateScopeController.instance;
          }

          forEach(isolateScope.$$isolateBindings = newIsolateScopeDirective.$$isolateBindings, function(definition, scopeName) {
            var attrName = definition.attrName,
                optional = definition.optional,
                mode = definition.mode, // @, =, or &
                lastValue,
                parentGet, parentSet, compare;

            switch (mode) {

              case '@':
                attrs.$observe(attrName, function(value) {
                  isolateBindingContext[scopeName] = value;
                });
                attrs.$$observers[attrName].$$scope = scope;
                if (attrs[attrName]) {
                  // If the attribute has been provided then we trigger an interpolation to ensure
                  // the value is there for use in the link fn
                  isolateBindingContext[scopeName] = $interpolate(attrs[attrName])(scope);
                }
                break;

              case '=':
                if (optional && !attrs[attrName]) {
                  return;
                }
                parentGet = $parse(attrs[attrName]);
                if (parentGet.literal) {
                  compare = equals;
                } else {
                  compare = function(a, b) { return a === b || (a !== a && b !== b); };
                }
                parentSet = parentGet.assign || function() {
                  // reset the change, or we will throw this exception on every $digest
                  lastValue = isolateBindingContext[scopeName] = parentGet(scope);
                  throw $compileMinErr('nonassign',
                      "Expression '{0}' used with directive '{1}' is non-assignable!",
                      attrs[attrName], newIsolateScopeDirective.name);
                };
                lastValue = isolateBindingContext[scopeName] = parentGet(scope);
                var parentValueWatch = function parentValueWatch(parentValue) {
                  if (!compare(parentValue, isolateBindingContext[scopeName])) {
                    // we are out of sync and need to copy
                    if (!compare(parentValue, lastValue)) {
                      // parent changed and it has precedence
                      isolateBindingContext[scopeName] = parentValue;
                    } else {
                      // if the parent can be assigned then do so
                      parentSet(scope, parentValue = isolateBindingContext[scopeName]);
                    }
                  }
                  return lastValue = parentValue;
                };
                parentValueWatch.$stateful = true;
                var unwatch;
                if (definition.collection) {
                  unwatch = scope.$watchCollection(attrs[attrName], parentValueWatch);
                } else {
                  unwatch = scope.$watch($parse(attrs[attrName], parentValueWatch), null, parentGet.literal);
                }
                isolateScope.$on('$destroy', unwatch);
                break;

              case '&':
                parentGet = $parse(attrs[attrName]);
                isolateBindingContext[scopeName] = function(locals) {
                  return parentGet(scope, locals);
                };
                break;
            }
          });
        }
        if (controllers) {
          forEach(controllers, function(controller) {
            controller();
          });
          controllers = null;
        }

        // PRELINKING
        for (i = 0, ii = preLinkFns.length; i < ii; i++) {
          linkFn = preLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // RECURSION
        // We only pass the isolate scope, if the isolate directive has a template,
        // otherwise the child elements do not belong to the isolate directive.
        var scopeToChild = scope;
        if (newIsolateScopeDirective && (newIsolateScopeDirective.template || newIsolateScopeDirective.templateUrl === null)) {
          scopeToChild = isolateScope;
        }
        childLinkFn && childLinkFn(scopeToChild, linkNode.childNodes, undefined, boundTranscludeFn);

        // POSTLINKING
        for (i = postLinkFns.length - 1; i >= 0; i--) {
          linkFn = postLinkFns[i];
          invokeLinkFn(linkFn,
              linkFn.isolateScope ? isolateScope : scope,
              $element,
              attrs,
              linkFn.require && getControllers(linkFn.directiveName, linkFn.require, $element, elementControllers),
              transcludeFn
          );
        }

        // This is the function that is injected as `$transclude`.
        // Note: all arguments are optional!
        function controllersBoundTransclude(scope, cloneAttachFn, futureParentElement) {
          var transcludeControllers;

          // No scope passed in:
          if (!isScope(scope)) {
            futureParentElement = cloneAttachFn;
            cloneAttachFn = scope;
            scope = undefined;
          }

          if (hasElementTranscludeDirective) {
            transcludeControllers = elementControllers;
          }
          if (!futureParentElement) {
            futureParentElement = hasElementTranscludeDirective ? $element.parent() : $element;
          }
          return boundTranscludeFn(scope, cloneAttachFn, transcludeControllers, futureParentElement, scopeToChild);
        }
      }
    }

    function markDirectivesAsIsolate(directives) {
      // mark all directives as needing isolate scope.
      for (var j = 0, jj = directives.length; j < jj; j++) {
        directives[j] = inherit(directives[j], {$$isolateScope: true});
      }
    }

    /**
     * looks up the directive and decorates it with exception handling and proper parameters. We
     * call this the boundDirective.
     *
     * @param {string} name name of the directive to look up.
     * @param {string} location The directive must be found in specific format.
     *   String containing any of theses characters:
     *
     *   * `E`: element name
     *   * `A': attribute
     *   * `C`: class
     *   * `M`: comment
     * @returns {boolean} true if directive was added.
     */
    function addDirective(tDirectives, name, location, maxPriority, ignoreDirective, startAttrName,
                          endAttrName) {
      if (name === ignoreDirective) return null;
      var match = null;
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          try {
            directive = directives[i];
            if ((maxPriority === undefined || maxPriority > directive.priority) &&
                 directive.restrict.indexOf(location) != -1) {
              if (startAttrName) {
                directive = inherit(directive, {$$start: startAttrName, $$end: endAttrName});
              }
              tDirectives.push(directive);
              match = directive;
            }
          } catch (e) { $exceptionHandler(e); }
        }
      }
      return match;
    }


    /**
     * looks up the directive and returns true if it is a multi-element directive,
     * and therefore requires DOM nodes between -start and -end markers to be grouped
     * together.
     *
     * @param {string} name name of the directive to look up.
     * @returns true if directive was registered as multi-element.
     */
    function directiveIsMultiElement(name) {
      if (hasDirectives.hasOwnProperty(name)) {
        for (var directive, directives = $injector.get(name + Suffix),
            i = 0, ii = directives.length; i < ii; i++) {
          directive = directives[i];
          if (directive.multiElement) {
            return true;
          }
        }
      }
      return false;
    }

    /**
     * When the element is replaced with HTML template then the new attributes
     * on the template need to be merged with the existing attributes in the DOM.
     * The desired effect is to have both of the attributes present.
     *
     * @param {object} dst destination attributes (original DOM)
     * @param {object} src source attributes (from the directive template)
     */
    function mergeTemplateAttributes(dst, src) {
      var srcAttr = src.$attr,
          dstAttr = dst.$attr,
          $element = dst.$$element;

      // reapply the old attributes to the new element
      forEach(dst, function(value, key) {
        if (key.charAt(0) != '$') {
          if (src[key] && src[key] !== value) {
            value += (key === 'style' ? ';' : ' ') + src[key];
          }
          dst.$set(key, value, true, srcAttr[key]);
        }
      });

      // copy the new attributes on the old attrs object
      forEach(src, function(value, key) {
        if (key == 'class') {
          safeAddClass($element, value);
          dst['class'] = (dst['class'] ? dst['class'] + ' ' : '') + value;
        } else if (key == 'style') {
          $element.attr('style', $element.attr('style') + ';' + value);
          dst['style'] = (dst['style'] ? dst['style'] + ';' : '') + value;
          // `dst` will never contain hasOwnProperty as DOM parser won't let it.
          // You will get an "InvalidCharacterError: DOM Exception 5" error if you
          // have an attribute like "has-own-property" or "data-has-own-property", etc.
        } else if (key.charAt(0) != '$' && !dst.hasOwnProperty(key)) {
          dst[key] = value;
          dstAttr[key] = srcAttr[key];
        }
      });
    }


    function compileTemplateUrl(directives, $compileNode, tAttrs,
        $rootElement, childTranscludeFn, preLinkFns, postLinkFns, previousCompileContext) {
      var linkQueue = [],
          afterTemplateNodeLinkFn,
          afterTemplateChildLinkFn,
          beforeTemplateCompileNode = $compileNode[0],
          origAsyncDirective = directives.shift(),
          derivedSyncDirective = inherit(origAsyncDirective, {
            templateUrl: null, transclude: null, replace: null, $$originalDirective: origAsyncDirective
          }),
          templateUrl = (isFunction(origAsyncDirective.templateUrl))
              ? origAsyncDirective.templateUrl($compileNode, tAttrs)
              : origAsyncDirective.templateUrl,
          templateNamespace = origAsyncDirective.templateNamespace;

      $compileNode.empty();

      $templateRequest($sce.getTrustedResourceUrl(templateUrl))
        .then(function(content) {
          var compileNode, tempTemplateAttrs, $template, childBoundTranscludeFn;

          content = denormalizeTemplate(content);

          if (origAsyncDirective.replace) {
            if (jqLiteIsTextNode(content)) {
              $template = [];
            } else {
              $template = removeComments(wrapTemplate(templateNamespace, trim(content)));
            }
            compileNode = $template[0];

            if ($template.length != 1 || compileNode.nodeType !== NODE_TYPE_ELEMENT) {
              throw $compileMinErr('tplrt',
                  "Template for directive '{0}' must have exactly one root element. {1}",
                  origAsyncDirective.name, templateUrl);
            }

            tempTemplateAttrs = {$attr: {}};
            replaceWith($rootElement, $compileNode, compileNode);
            var templateDirectives = collectDirectives(compileNode, [], tempTemplateAttrs);

            if (isObject(origAsyncDirective.scope)) {
              markDirectivesAsIsolate(templateDirectives);
            }
            directives = templateDirectives.concat(directives);
            mergeTemplateAttributes(tAttrs, tempTemplateAttrs);
          } else {
            compileNode = beforeTemplateCompileNode;
            $compileNode.html(content);
          }

          directives.unshift(derivedSyncDirective);

          afterTemplateNodeLinkFn = applyDirectivesToNode(directives, compileNode, tAttrs,
              childTranscludeFn, $compileNode, origAsyncDirective, preLinkFns, postLinkFns,
              previousCompileContext);
          forEach($rootElement, function(node, i) {
            if (node == compileNode) {
              $rootElement[i] = $compileNode[0];
            }
          });
          afterTemplateChildLinkFn = compileNodes($compileNode[0].childNodes, childTranscludeFn);

          while (linkQueue.length) {
            var scope = linkQueue.shift(),
                beforeTemplateLinkNode = linkQueue.shift(),
                linkRootElement = linkQueue.shift(),
                boundTranscludeFn = linkQueue.shift(),
                linkNode = $compileNode[0];

            if (scope.$$destroyed) continue;

            if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {
              var oldClasses = beforeTemplateLinkNode.className;

              if (!(previousCompileContext.hasElementTranscludeDirective &&
                  origAsyncDirective.replace)) {
                // it was cloned therefore we have to clone as well.
                linkNode = jqLiteClone(compileNode);
              }
              replaceWith(linkRootElement, jqLite(beforeTemplateLinkNode), linkNode);

              // Copy in CSS classes from original node
              safeAddClass(jqLite(linkNode), oldClasses);
            }
            if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
              childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
            } else {
              childBoundTranscludeFn = boundTranscludeFn;
            }
            afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, linkNode, $rootElement,
              childBoundTranscludeFn);
          }
          linkQueue = null;
        });

      return function delayedNodeLinkFn(ignoreChildLinkFn, scope, node, rootElement, boundTranscludeFn) {
        var childBoundTranscludeFn = boundTranscludeFn;
        if (scope.$$destroyed) return;
        if (linkQueue) {
          linkQueue.push(scope,
                         node,
                         rootElement,
                         childBoundTranscludeFn);
        } else {
          if (afterTemplateNodeLinkFn.transcludeOnThisElement) {
            childBoundTranscludeFn = createBoundTranscludeFn(scope, afterTemplateNodeLinkFn.transclude, boundTranscludeFn);
          }
          afterTemplateNodeLinkFn(afterTemplateChildLinkFn, scope, node, rootElement, childBoundTranscludeFn);
        }
      };
    }


    /**
     * Sorting function for bound directives.
     */
    function byPriority(a, b) {
      var diff = b.priority - a.priority;
      if (diff !== 0) return diff;
      if (a.name !== b.name) return (a.name < b.name) ? -1 : 1;
      return a.index - b.index;
    }


    function assertNoDuplicate(what, previousDirective, directive, element) {
      if (previousDirective) {
        throw $compileMinErr('multidir', 'Multiple directives [{0}, {1}] asking for {2} on: {3}',
            previousDirective.name, directive.name, what, startingTag(element));
      }
    }


    function addTextInterpolateDirective(directives, text) {
      var interpolateFn = $interpolate(text, true);
      if (interpolateFn) {
        directives.push({
          priority: 0,
          compile: function textInterpolateCompileFn(templateNode) {
            var templateNodeParent = templateNode.parent(),
                hasCompileParent = !!templateNodeParent.length;

            // When transcluding a template that has bindings in the root
            // we don't have a parent and thus need to add the class during linking fn.
            if (hasCompileParent) compile.$$addBindingClass(templateNodeParent);

            return function textInterpolateLinkFn(scope, node) {
              var parent = node.parent();
              if (!hasCompileParent) compile.$$addBindingClass(parent);
              compile.$$addBindingInfo(parent, interpolateFn.expressions);
              scope.$watch(interpolateFn, function interpolateFnWatchAction(value) {
                node[0].nodeValue = value;
              });
            };
          }
        });
      }
    }


    function wrapTemplate(type, template) {
      type = lowercase(type || 'html');
      switch (type) {
      case 'svg':
      case 'math':
        var wrapper = document.createElement('div');
        wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
        return wrapper.childNodes[0].childNodes;
      default:
        return template;
      }
    }


    function getTrustedContext(node, attrNormalizedName) {
      if (attrNormalizedName == "srcdoc") {
        return $sce.HTML;
      }
      var tag = nodeName_(node);
      // maction[xlink:href] can source SVG.  It's not limited to <maction>.
      if (attrNormalizedName == "xlinkHref" ||
          (tag == "form" && attrNormalizedName == "action") ||
          (tag != "img" && (attrNormalizedName == "src" ||
                            attrNormalizedName == "ngSrc"))) {
        return $sce.RESOURCE_URL;
      }
    }


    function addAttrInterpolateDirective(node, directives, value, name, allOrNothing) {
      var trustedContext = getTrustedContext(node, name);
      allOrNothing = ALL_OR_NOTHING_ATTRS[name] || allOrNothing;

      var interpolateFn = $interpolate(value, true, trustedContext, allOrNothing);

      // no interpolation found -> ignore
      if (!interpolateFn) return;


      if (name === "multiple" && nodeName_(node) === "select") {
        throw $compileMinErr("selmulti",
            "Binding to the 'multiple' attribute is not supported. Element: {0}",
            startingTag(node));
      }

      directives.push({
        priority: 100,
        compile: function() {
            return {
              pre: function attrInterpolatePreLinkFn(scope, element, attr) {
                var $$observers = (attr.$$observers || (attr.$$observers = {}));

                if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {
                  throw $compileMinErr('nodomevents',
                      "Interpolations for HTML DOM event attributes are disallowed.  Please use the " +
                          "ng- versions (such as ng-click instead of onclick) instead.");
                }

                // If the attribute has changed since last $interpolate()ed
                var newValue = attr[name];
                if (newValue !== value) {
                  // we need to interpolate again since the attribute value has been updated
                  // (e.g. by another directive's compile function)
                  // ensure unset/empty values make interpolateFn falsy
                  interpolateFn = newValue && $interpolate(newValue, true, trustedContext, allOrNothing);
                  value = newValue;
                }

                // if attribute was updated so that there is no interpolation going on we don't want to
                // register any observers
                if (!interpolateFn) return;

                // initialize attr object so that it's ready in case we need the value for isolate
                // scope initialization, otherwise the value would not be available from isolate
                // directive's linking fn during linking phase
                attr[name] = interpolateFn(scope);

                ($$observers[name] || ($$observers[name] = [])).$$inter = true;
                (attr.$$observers && attr.$$observers[name].$$scope || scope).
                  $watch(interpolateFn, function interpolateFnWatchAction(newValue, oldValue) {
                    //special case for class attribute addition + removal
                    //so that class changes can tap into the animation
                    //hooks provided by the $animate service. Be sure to
                    //skip animations when the first digest occurs (when
                    //both the new and the old values are the same) since
                    //the CSS classes are the non-interpolated values
                    if (name === 'class' && newValue != oldValue) {
                      attr.$updateClass(newValue, oldValue);
                    } else {
                      attr.$set(name, newValue);
                    }
                  });
              }
            };
          }
      });
    }


    /**
     * This is a special jqLite.replaceWith, which can replace items which
     * have no parents, provided that the containing jqLite collection is provided.
     *
     * @param {JqLite=} $rootElement The root of the compile tree. Used so that we can replace nodes
     *                               in the root of the tree.
     * @param {JqLite} elementsToRemove The jqLite element which we are going to replace. We keep
     *                                  the shell, but replace its DOM node reference.
     * @param {Node} newNode The new DOM node.
     */
    function replaceWith($rootElement, elementsToRemove, newNode) {
      var firstElementToRemove = elementsToRemove[0],
          removeCount = elementsToRemove.length,
          parent = firstElementToRemove.parentNode,
          i, ii;

      if ($rootElement) {
        for (i = 0, ii = $rootElement.length; i < ii; i++) {
          if ($rootElement[i] == firstElementToRemove) {
            $rootElement[i++] = newNode;
            for (var j = i, j2 = j + removeCount - 1,
                     jj = $rootElement.length;
                 j < jj; j++, j2++) {
              if (j2 < jj) {
                $rootElement[j] = $rootElement[j2];
              } else {
                delete $rootElement[j];
              }
            }
            $rootElement.length -= removeCount - 1;

            // If the replaced element is also the jQuery .context then replace it
            // .context is a deprecated jQuery api, so we should set it only when jQuery set it
            // http://api.jquery.com/context/
            if ($rootElement.context === firstElementToRemove) {
              $rootElement.context = newNode;
            }
            break;
          }
        }
      }

      if (parent) {
        parent.replaceChild(newNode, firstElementToRemove);
      }

      // TODO(perf): what's this document fragment for? is it needed? can we at least reuse it?
      var fragment = document.createDocumentFragment();
      fragment.appendChild(firstElementToRemove);

      // Copy over user data (that includes Angular's $scope etc.). Don't copy private
      // data here because there's no public interface in jQuery to do that and copying over
      // event listeners (which is the main use of private data) wouldn't work anyway.
      jqLite(newNode).data(jqLite(firstElementToRemove).data());

      // Remove data of the replaced element. We cannot just call .remove()
      // on the element it since that would deallocate scope that is needed
      // for the new node. Instead, remove the data "manually".
      if (!jQuery) {
        delete jqLite.cache[firstElementToRemove[jqLite.expando]];
      } else {
        // jQuery 2.x doesn't expose the data storage. Use jQuery.cleanData to clean up after
        // the replaced element. The cleanData version monkey-patched by Angular would cause
        // the scope to be trashed and we do need the very same scope to work with the new
        // element. However, we cannot just cache the non-patched version and use it here as
        // that would break if another library patches the method after Angular does (one
        // example is jQuery UI). Instead, set a flag indicating scope destroying should be
        // skipped this one time.
        skipDestroyOnNextJQueryCleanData = true;
        jQuery.cleanData([firstElementToRemove]);
      }

      for (var k = 1, kk = elementsToRemove.length; k < kk; k++) {
        var element = elementsToRemove[k];
        jqLite(element).remove(); // must do this way to clean up expando
        fragment.appendChild(element);
        delete elementsToRemove[k];
      }

      elementsToRemove[0] = newNode;
      elementsToRemove.length = 1;
    }


    function cloneAndAnnotateFn(fn, annotation) {
      return extend(function() { return fn.apply(null, arguments); }, fn, annotation);
    }


    function invokeLinkFn(linkFn, scope, $element, attrs, controllers, transcludeFn) {
      try {
        linkFn(scope, $element, attrs, controllers, transcludeFn);
      } catch (e) {
        $exceptionHandler(e, startingTag($element));
      }
    }
  }];
}

var PREFIX_REGEXP = /^((?:x|data)[\:\-_])/i;
/**
 * Converts all accepted directives format into proper directive name.
 * @param name Name to normalize
 */
function directiveNormalize(name) {
  return camelCase(name.replace(PREFIX_REGEXP, ''));
}

/**
 * @ngdoc type
 * @name $compile.directive.Attributes
 *
 * @description
 * A shared object between directive compile / linking functions which contains normalized DOM
 * element attributes. The values reflect current binding state `{{ }}`. The normalization is
 * needed since all of these are treated as equivalent in Angular:
 *
 * ```
 *    <span ng:bind="a" ng-bind="a" data-ng-bind="a" x-ng-bind="a">
 * ```
 */

/**
 * @ngdoc property
 * @name $compile.directive.Attributes#$attr
 *
 * @description
 * A map of DOM element attribute names to the normalized name. This is
 * needed to do reverse lookup from normalized name back to actual name.
 */


/**
 * @ngdoc method
 * @name $compile.directive.Attributes#$set
 * @kind function
 *
 * @description
 * Set DOM element attribute value.
 *
 *
 * @param {string} name Normalized element attribute name of the property to modify. The name is
 *          reverse-translated using the {@link ng.$compile.directive.Attributes#$attr $attr}
 *          property to the original name.
 * @param {string} value Value to set the attribute to. The value can be an interpolated string.
 */



/**
 * Closure compiler type information
 */

function nodesetLinkingFn(
  /* angular.Scope */ scope,
  /* NodeList */ nodeList,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function directiveLinkingFn(
  /* nodesetLinkingFn */ nodesetLinkingFn,
  /* angular.Scope */ scope,
  /* Node */ node,
  /* Element */ rootElement,
  /* function(Function) */ boundTranscludeFn
) {}

function tokenDifference(str1, str2) {
  var values = '',
      tokens1 = str1.split(/\s+/),
      tokens2 = str2.split(/\s+/);

  outer:
  for (var i = 0; i < tokens1.length; i++) {
    var token = tokens1[i];
    for (var j = 0; j < tokens2.length; j++) {
      if (token == tokens2[j]) continue outer;
    }
    values += (values.length > 0 ? ' ' : '') + token;
  }
  return values;
}

function removeComments(jqNodes) {
  jqNodes = jqLite(jqNodes);
  var i = jqNodes.length;

  if (i <= 1) {
    return jqNodes;
  }

  while (i--) {
    var node = jqNodes[i];
    if (node.nodeType === NODE_TYPE_COMMENT) {
      splice.call(jqNodes, i, 1);
    }
  }
  return jqNodes;
}

var $controllerMinErr = minErr('$controller');

/**
 * @ngdoc provider
 * @name $controllerProvider
 * @description
 * The {@link ng.$controller $controller service} is used by Angular to create new
 * controllers.
 *
 * This provider allows controller registration via the
 * {@link ng.$controllerProvider#register register} method.
 */
function $ControllerProvider() {
  var controllers = {},
      globals = false,
      CNTRL_REG = /^(\S+)(\s+as\s+(\w+))?$/;


  /**
   * @ngdoc method
   * @name $controllerProvider#register
   * @param {string|Object} name Controller name, or an object map of controllers where the keys are
   *    the names and the values are the constructors.
   * @param {Function|Array} constructor Controller constructor fn (optionally decorated with DI
   *    annotations in the array notation).
   */
  this.register = function(name, constructor) {
    assertNotHasOwnProperty(name, 'controller');
    if (isObject(name)) {
      extend(controllers, name);
    } else {
      controllers[name] = constructor;
    }
  };

  /**
   * @ngdoc method
   * @name $controllerProvider#allowGlobals
   * @description If called, allows `$controller` to find controller constructors on `window`
   */
  this.allowGlobals = function() {
    globals = true;
  };


  this.$get = ['$injector', '$window', function($injector, $window) {

    /**
     * @ngdoc service
     * @name $controller
     * @requires $injector
     *
     * @param {Function|string} constructor If called with a function then it's considered to be the
     *    controller constructor function. Otherwise it's considered to be a string which is used
     *    to retrieve the controller constructor using the following steps:
     *
     *    * check if a controller with given name is registered via `$controllerProvider`
     *    * check if evaluating the string on the current scope returns a constructor
     *    * if $controllerProvider#allowGlobals, check `window[constructor]` on the global
     *      `window` object (not recommended)
     *
     *    The string can use the `controller as property` syntax, where the controller instance is published
     *    as the specified property on the `scope`; the `scope` must be injected into `locals` param for this
     *    to work correctly.
     *
     * @param {Object} locals Injection locals for Controller.
     * @return {Object} Instance of given controller.
     *
     * @description
     * `$controller` service is responsible for instantiating controllers.
     *
     * It's just a simple call to {@link auto.$injector $injector}, but extracted into
     * a service, so that one can override this service with [BC version](https://gist.github.com/1649788).
     */
    return function(expression, locals, later, ident) {
      // PRIVATE API:
      //   param `later` --- indicates that the controller's constructor is invoked at a later time.
      //                     If true, $controller will allocate the object with the correct
      //                     prototype chain, but will not invoke the controller until a returned
      //                     callback is invoked.
      //   param `ident` --- An optional label which overrides the label parsed from the controller
      //                     expression, if any.
      var instance, match, constructor, identifier;
      later = later === true;
      if (ident && isString(ident)) {
        identifier = ident;
      }

      if (isString(expression)) {
        match = expression.match(CNTRL_REG);
        if (!match) {
          throw $controllerMinErr('ctrlfmt',
            "Badly formed controller string '{0}'. " +
            "Must match `__name__ as __id__` or `__name__`.", expression);
        }
        constructor = match[1],
        identifier = identifier || match[3];
        expression = controllers.hasOwnProperty(constructor)
            ? controllers[constructor]
            : getter(locals.$scope, constructor, true) ||
                (globals ? getter($window, constructor, true) : undefined);

        assertArgFn(expression, constructor, true);
      }

      if (later) {
        // Instantiate controller later:
        // This machinery is used to create an instance of the object before calling the
        // controller's constructor itself.
        //
        // This allows properties to be added to the controller before the constructor is
        // invoked. Primarily, this is used for isolate scope bindings in $compile.
        //
        // This feature is not intended for use by applications, and is thus not documented
        // publicly.
        // Object creation: http://jsperf.com/create-constructor/2
        var controllerPrototype = (isArray(expression) ?
          expression[expression.length - 1] : expression).prototype;
        instance = Object.create(controllerPrototype || null);

        if (identifier) {
          addIdentifier(locals, identifier, instance, constructor || expression.name);
        }

        return extend(function() {
          $injector.invoke(expression, instance, locals, constructor);
          return instance;
        }, {
          instance: instance,
          identifier: identifier
        });
      }

      instance = $injector.instantiate(expression, locals, constructor);

      if (identifier) {
        addIdentifier(locals, identifier, instance, constructor || expression.name);
      }

      return instance;
    };

    function addIdentifier(locals, identifier, instance, name) {
      if (!(locals && isObject(locals.$scope))) {
        throw minErr('$controller')('noscp',
          "Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.",
          name, identifier);
      }

      locals.$scope[identifier] = instance;
    }
  }];
}

/**
 * @ngdoc service
 * @name $document
 * @requires $window
 *
 * @description
 * A {@link angular.element jQuery or jqLite} wrapper for the browser's `window.document` object.
 *
 * @example
   <example module="documentExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <p>$document title: <b ng-bind="title"></b></p>
         <p>window.document title: <b ng-bind="windowTitle"></b></p>
       </div>
     </file>
     <file name="script.js">
       angular.module('documentExample', [])
         .controller('ExampleController', ['$scope', '$document', function($scope, $document) {
           $scope.title = $document[0].title;
           $scope.windowTitle = angular.element(window.document)[0].title;
         }]);
     </file>
   </example>
 */
function $DocumentProvider() {
  this.$get = ['$window', function(window) {
    return jqLite(window.document);
  }];
}

/**
 * @ngdoc service
 * @name $exceptionHandler
 * @requires ng.$log
 *
 * @description
 * Any uncaught exception in angular expressions is delegated to this service.
 * The default implementation simply delegates to `$log.error` which logs it into
 * the browser console.
 *
 * In unit tests, if `angular-mocks.js` is loaded, this service is overridden by
 * {@link ngMock.$exceptionHandler mock $exceptionHandler} which aids in testing.
 *
 * ## Example:
 *
 * ```js
 *   angular.module('exceptionOverride', []).factory('$exceptionHandler', function() {
 *     return function(exception, cause) {
 *       exception.message += ' (caused by "' + cause + '")';
 *       throw exception;
 *     };
 *   });
 * ```
 *
 * This example will override the normal action of `$exceptionHandler`, to make angular
 * exceptions fail hard when they happen, instead of just logging to the console.
 *
 * <hr />
 * Note, that code executed in event-listeners (even those registered using jqLite's `on`/`bind`
 * methods) does not delegate exceptions to the {@link ng.$exceptionHandler $exceptionHandler}
 * (unless executed during a digest).
 *
 * If you wish, you can manually delegate exceptions, e.g.
 * `try { ... } catch(e) { $exceptionHandler(e); }`
 *
 * @param {Error} exception Exception associated with the error.
 * @param {string=} cause optional information about the context in which
 *       the error was thrown.
 *
 */
function $ExceptionHandlerProvider() {
  this.$get = ['$log', function($log) {
    return function(exception, cause) {
      $log.error.apply($log, arguments);
    };
  }];
}

var APPLICATION_JSON = 'application/json';
var CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': APPLICATION_JSON + ';charset=utf-8'};
var JSON_START = /^\[|^\{(?!\{)/;
var JSON_ENDS = {
  '[': /]$/,
  '{': /}$/
};
var JSON_PROTECTION_PREFIX = /^\)\]\}',?\n/;

function defaultHttpResponseTransform(data, headers) {
  if (isString(data)) {
    // Strip json vulnerability protection prefix and trim whitespace
    var tempData = data.replace(JSON_PROTECTION_PREFIX, '').trim();

    if (tempData) {
      var contentType = headers('Content-Type');
      if ((contentType && (contentType.indexOf(APPLICATION_JSON) === 0)) || isJsonLike(tempData)) {
        data = fromJson(tempData);
      }
    }
  }

  return data;
}

function isJsonLike(str) {
    var jsonStart = str.match(JSON_START);
    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);
}

/**
 * Parse headers into key value object
 *
 * @param {string} headers Raw headers as a string
 * @returns {Object} Parsed headers as key value object
 */
function parseHeaders(headers) {
  var parsed = createMap(), key, val, i;

  if (!headers) return parsed;

  forEach(headers.split('\n'), function(line) {
    i = line.indexOf(':');
    key = lowercase(trim(line.substr(0, i)));
    val = trim(line.substr(i + 1));

    if (key) {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });

  return parsed;
}


/**
 * Returns a function that provides access to parsed headers.
 *
 * Headers are lazy parsed when first requested.
 * @see parseHeaders
 *
 * @param {(string|Object)} headers Headers to provide access to.
 * @returns {function(string=)} Returns a getter function which if called with:
 *
 *   - if called with single an argument returns a single header value or null
 *   - if called with no arguments returns an object containing all headers.
 */
function headersGetter(headers) {
  var headersObj = isObject(headers) ? headers : undefined;

  return function(name) {
    if (!headersObj) headersObj =  parseHeaders(headers);

    if (name) {
      var value = headersObj[lowercase(name)];
      if (value === void 0) {
        value = null;
      }
      return value;
    }

    return headersObj;
  };
}


/**
 * Chain all given functions
 *
 * This function is used for both request and response transforming
 *
 * @param {*} data Data to transform.
 * @param {function(string=)} headers HTTP headers getter fn.
 * @param {number} status HTTP status code of the response.
 * @param {(Function|Array.<Function>)} fns Function or an array of functions.
 * @returns {*} Transformed data.
 */
function transformData(data, headers, status, fns) {
  if (isFunction(fns))
    return fns(data, headers, status);

  forEach(fns, function(fn) {
    data = fn(data, headers, status);
  });

  return data;
}


function isSuccess(status) {
  return 200 <= status && status < 300;
}


/**
 * @ngdoc provider
 * @name $httpProvider
 * @description
 * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.
 * */
function $HttpProvider() {
  /**
   * @ngdoc property
   * @name $httpProvider#defaults
   * @description
   *
   * Object containing default values for all {@link ng.$http $http} requests.
   *
   * - **`defaults.cache`** - {Object} - an object built with {@link ng.$cacheFactory `$cacheFactory`}
   * that will provide the cache for all requests who set their `cache` property to `true`.
   * If you set the `default.cache = false` then only requests that specify their own custom
   * cache object will be cached. See {@link $http#caching $http Caching} for more information.
   *
   * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.
   * Defaults value is `'XSRF-TOKEN'`.
   *
   * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the
   * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.
   *
   * - **`defaults.headers`** - {Object} - Default headers for all $http requests.
   * Refer to {@link ng.$http#setting-http-headers $http} for documentation on
   * setting default headers.
   *     - **`defaults.headers.common`**
   *     - **`defaults.headers.post`**
   *     - **`defaults.headers.put`**
   *     - **`defaults.headers.patch`**
   *
   **/
  var defaults = this.defaults = {
    // transform incoming response data
    transformResponse: [defaultHttpResponseTransform],

    // transform outgoing request data
    transformRequest: [function(d) {
      return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d) ? toJson(d) : d;
    }],

    // default headers
    headers: {
      common: {
        'Accept': 'application/json, text/plain, */*'
      },
      post:   shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      put:    shallowCopy(CONTENT_TYPE_APPLICATION_JSON),
      patch:  shallowCopy(CONTENT_TYPE_APPLICATION_JSON)
    },

    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN'
  };

  var useApplyAsync = false;
  /**
   * @ngdoc method
   * @name $httpProvider#useApplyAsync
   * @description
   *
   * Configure $http service to combine processing of multiple http responses received at around
   * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in
   * significant performance improvement for bigger applications that make many HTTP requests
   * concurrently (common during application bootstrap).
   *
   * Defaults to false. If no value is specifed, returns the current configured value.
   *
   * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred
   *    "apply" on the next tick, giving time for subsequent requests in a roughly ~10ms window
   *    to load and share the same digest cycle.
   *
   * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.
   *    otherwise, returns the current configured value.
   **/
  this.useApplyAsync = function(value) {
    if (isDefined(value)) {
      useApplyAsync = !!value;
      return this;
    }
    return useApplyAsync;
  };

  /**
   * @ngdoc property
   * @name $httpProvider#interceptors
   * @description
   *
   * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}
   * pre-processing of request or postprocessing of responses.
   *
   * These service factories are ordered by request, i.e. they are applied in the same order as the
   * array, on request, but reverse order, on response.
   *
   * {@link ng.$http#interceptors Interceptors detailed info}
   **/
  var interceptorFactories = this.interceptors = [];

  this.$get = ['$httpBackend', '$browser', '$cacheFactory', '$rootScope', '$q', '$injector',
      function($httpBackend, $browser, $cacheFactory, $rootScope, $q, $injector) {

    var defaultCache = $cacheFactory('$http');

    /**
     * Interceptors stored in reverse order. Inner interceptors before outer interceptors.
     * The reversal is needed so that we can build up the interception chain around the
     * server request.
     */
    var reversedInterceptors = [];

    forEach(interceptorFactories, function(interceptorFactory) {
      reversedInterceptors.unshift(isString(interceptorFactory)
          ? $injector.get(interceptorFactory) : $injector.invoke(interceptorFactory));
    });

    /**
     * @ngdoc service
     * @kind function
     * @name $http
     * @requires ng.$httpBackend
     * @requires $cacheFactory
     * @requires $rootScope
     * @requires $q
     * @requires $injector
     *
     * @description
     * The `$http` service is a core Angular service that facilitates communication with the remote
     * HTTP servers via the browser's [XMLHttpRequest](https://developer.mozilla.org/en/xmlhttprequest)
     * object or via [JSONP](http://en.wikipedia.org/wiki/JSONP).
     *
     * For unit testing applications that use `$http` service, see
     * {@link ngMock.$httpBackend $httpBackend mock}.
     *
     * For a higher level of abstraction, please check out the {@link ngResource.$resource
     * $resource} service.
     *
     * The $http API is based on the {@link ng.$q deferred/promise APIs} exposed by
     * the $q service. While for simple usage patterns this doesn't matter much, for advanced usage
     * it is important to familiarize yourself with these APIs and the guarantees they provide.
     *
     *
     * ## General usage
     * The `$http` service is a function which takes a single argument — a configuration object —
     * that is used to generate an HTTP request and returns  a {@link ng.$q promise}
     * with two $http specific methods: `success` and `error`.
     *
     * ```js
     *   // Simple GET request example :
     *   $http.get('/someUrl').
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     * ```js
     *   // Simple POST request example (passing data) :
     *   $http.post('/someUrl', {msg:'hello word!'}).
     *     success(function(data, status, headers, config) {
     *       // this callback will be called asynchronously
     *       // when the response is available
     *     }).
     *     error(function(data, status, headers, config) {
     *       // called asynchronously if an error occurs
     *       // or server returns response with an error status.
     *     });
     * ```
     *
     *
     * Since the returned value of calling the $http function is a `promise`, you can also use
     * the `then` method to register callbacks, and these callbacks will receive a single argument –
     * an object representing the response. See the API signature and type info below for more
     * details.
     *
     * A response status code between 200 and 299 is considered a success status and
     * will result in the success callback being called. Note that if the response is a redirect,
     * XMLHttpRequest will transparently follow it, meaning that the error callback will not be
     * called for such responses.
     *
     * ## Writing Unit Tests that use $http
     * When unit testing (using {@link ngMock ngMock}), it is necessary to call
     * {@link ngMock.$httpBackend#flush $httpBackend.flush()} to flush each pending
     * request using trained responses.
     *
     * ```
     * $httpBackend.expectGET(...);
     * $http.get(...);
     * $httpBackend.flush();
     * ```
     *
     * ## Shortcut methods
     *
     * Shortcut methods are also available. All shortcut methods require passing in the URL, and
     * request data must be passed in for POST/PUT requests.
     *
     * ```js
     *   $http.get('/someUrl').success(successCallback);
     *   $http.post('/someUrl', data).success(successCallback);
     * ```
     *
     * Complete list of shortcut methods:
     *
     * - {@link ng.$http#get $http.get}
     * - {@link ng.$http#head $http.head}
     * - {@link ng.$http#post $http.post}
     * - {@link ng.$http#put $http.put}
     * - {@link ng.$http#delete $http.delete}
     * - {@link ng.$http#jsonp $http.jsonp}
     * - {@link ng.$http#patch $http.patch}
     *
     *
     * ## Setting HTTP Headers
     *
     * The $http service will automatically add certain HTTP headers to all requests. These defaults
     * can be fully configured by accessing the `$httpProvider.defaults.headers` configuration
     * object, which currently contains this default configuration:
     *
     * - `$httpProvider.defaults.headers.common` (headers that are common for all requests):
     *   - `Accept: application/json, text/plain, * / *`
     * - `$httpProvider.defaults.headers.post`: (header defaults for POST requests)
     *   - `Content-Type: application/json`
     * - `$httpProvider.defaults.headers.put` (header defaults for PUT requests)
     *   - `Content-Type: application/json`
     *
     * To add or overwrite these defaults, simply add or remove a property from these configuration
     * objects. To add headers for an HTTP method other than POST or PUT, simply add a new object
     * with the lowercased HTTP method name as the key, e.g.
     * `$httpProvider.defaults.headers.get = { 'My-Header' : 'value' }.
     *
     * The defaults can also be set at runtime via the `$http.defaults` object in the same
     * fashion. For example:
     *
     * ```
     * module.run(function($http) {
     *   $http.defaults.headers.common.Authorization = 'Basic YmVlcDpib29w'
     * });
     * ```
     *
     * In addition, you can supply a `headers` property in the config object passed when
     * calling `$http(config)`, which overrides the defaults without changing them globally.
     *
     * To explicitly remove a header automatically added via $httpProvider.defaults.headers on a per request basis,
     * Use the `headers` property, setting the desired header to `undefined`. For example:
     *
     * ```js
     * var req = {
     *  method: 'POST',
     *  url: 'http://example.com',
     *  headers: {
     *    'Content-Type': undefined
     *  },
     *  data: { test: 'test' }
     * }
     *
     * $http(req).success(function(){...}).error(function(){...});
     * ```
     *
     * ## Transforming Requests and Responses
     *
     * Both requests and responses can be transformed using transformation functions: `transformRequest`
     * and `transformResponse`. These properties can be a single function that returns
     * the transformed value (`function(data, headersGetter, status)`) or an array of such transformation functions,
     * which allows you to `push` or `unshift` a new transformation function into the transformation chain.
     *
     * ### Default Transformations
     *
     * The `$httpProvider` provider and `$http` service expose `defaults.transformRequest` and
     * `defaults.transformResponse` properties. If a request does not provide its own transformations
     * then these will be applied.
     *
     * You can augment or replace the default transformations by modifying these properties by adding to or
     * replacing the array.
     *
     * Angular provides the following default transformations:
     *
     * Request transformations (`$httpProvider.defaults.transformRequest` and `$http.defaults.transformRequest`):
     *
     * - If the `data` property of the request configuration object contains an object, serialize it
     *   into JSON format.
     *
     * Response transformations (`$httpProvider.defaults.transformResponse` and `$http.defaults.transformResponse`):
     *
     *  - If XSRF prefix is detected, strip it (see Security Considerations section below).
     *  - If JSON response is detected, deserialize it using a JSON parser.
     *
     *
     * ### Overriding the Default Transformations Per Request
     *
     * If you wish override the request/response transformations only for a single request then provide
     * `transformRequest` and/or `transformResponse` properties on the configuration object passed
     * into `$http`.
     *
     * Note that if you provide these properties on the config object the default transformations will be
     * overwritten. If you wish to augment the default transformations then you must include them in your
     * local transformation array.
     *
     * The following code demonstrates adding a new response transformation to be run after the default response
     * transformations have been run.
     *
     * ```js
     * function appendTransform(defaults, transform) {
     *
     *   // We can't guarantee that the default transformation is an array
     *   defaults = angular.isArray(defaults) ? defaults : [defaults];
     *
     *   // Append the new transformation to the defaults
     *   return defaults.concat(transform);
     * }
     *
     * $http({
     *   url: '...',
     *   method: 'GET',
     *   transformResponse: appendTransform($http.defaults.transformResponse, function(value) {
     *     return doTransform(value);
     *   })
     * });
     * ```
     *
     *
     * ## Caching
     *
     * To enable caching, set the request configuration `cache` property to `true` (to use default
     * cache) or to a custom cache object (built with {@link ng.$cacheFactory `$cacheFactory`}).
     * When the cache is enabled, `$http` stores the response from the server in the specified
     * cache. The next time the same request is made, the response is served from the cache without
     * sending a request to the server.
     *
     * Note that even if the response is served from cache, delivery of the data is asynchronous in
     * the same way that real requests are.
     *
     * If there are multiple GET requests for the same URL that should be cached using the same
     * cache, but the cache is not populated yet, only one request to the server will be made and
     * the remaining requests will be fulfilled using the response from the first request.
     *
     * You can change the default cache to a new object (built with
     * {@link ng.$cacheFactory `$cacheFactory`}) by updating the
     * {@link ng.$http#defaults `$http.defaults.cache`} property. All requests who set
     * their `cache` property to `true` will now use this cache object.
     *
     * If you set the default cache to `false` then only requests that specify their own custom
     * cache object will be cached.
     *
     * ## Interceptors
     *
     * Before you start creating interceptors, be sure to understand the
     * {@link ng.$q $q and deferred/promise APIs}.
     *
     * For purposes of global error handling, authentication, or any kind of synchronous or
     * asynchronous pre-processing of request or postprocessing of responses, it is desirable to be
     * able to intercept requests before they are handed to the server and
     * responses before they are handed over to the application code that
     * initiated these requests. The interceptors leverage the {@link ng.$q
     * promise APIs} to fulfill this need for both synchronous and asynchronous pre-processing.
     *
     * The interceptors are service factories that are registered with the `$httpProvider` by
     * adding them to the `$httpProvider.interceptors` array. The factory is called and
     * injected with dependencies (if specified) and returns the interceptor.
     *
     * There are two kinds of interceptors (and two kinds of rejection interceptors):
     *
     *   * `request`: interceptors get called with a http `config` object. The function is free to
     *     modify the `config` object or create a new one. The function needs to return the `config`
     *     object directly, or a promise containing the `config` or a new `config` object.
     *   * `requestError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *   * `response`: interceptors get called with http `response` object. The function is free to
     *     modify the `response` object or create a new one. The function needs to return the `response`
     *     object directly, or as a promise containing the `response` or a new `response` object.
     *   * `responseError`: interceptor gets called when a previous interceptor threw an error or
     *     resolved with a rejection.
     *
     *
     * ```js
     *   // register the interceptor as a service
     *   $provide.factory('myHttpInterceptor', function($q, dependency1, dependency2) {
     *     return {
     *       // optional method
     *       'request': function(config) {
     *         // do something on success
     *         return config;
     *       },
     *
     *       // optional method
     *      'requestError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       },
     *
     *
     *
     *       // optional method
     *       'response': function(response) {
     *         // do something on success
     *         return response;
     *       },
     *
     *       // optional method
     *      'responseError': function(rejection) {
     *         // do something on error
     *         if (canRecover(rejection)) {
     *           return responseOrNewPromise
     *         }
     *         return $q.reject(rejection);
     *       }
     *     };
     *   });
     *
     *   $httpProvider.interceptors.push('myHttpInterceptor');
     *
     *
     *   // alternatively, register the interceptor via an anonymous factory
     *   $httpProvider.interceptors.push(function($q, dependency1, dependency2) {
     *     return {
     *      'request': function(config) {
     *          // same as above
     *       },
     *
     *       'response': function(response) {
     *          // same as above
     *       }
     *     };
     *   });
     * ```
     *
     * ## Security Considerations
     *
     * When designing web applications, consider security threats from:
     *
     * - [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * - [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)
     *
     * Both server and the client must cooperate in order to eliminate these threats. Angular comes
     * pre-configured with strategies that address these issues, but for this to work backend server
     * cooperation is required.
     *
     * ### JSON Vulnerability Protection
     *
     * A [JSON vulnerability](http://haacked.com/archive/2008/11/20/anatomy-of-a-subtle-json-vulnerability.aspx)
     * allows third party website to turn your JSON resource URL into
     * [JSONP](http://en.wikipedia.org/wiki/JSONP) request under some conditions. To
     * counter this your server can prefix all JSON requests with following string `")]}',\n"`.
     * Angular will automatically strip the prefix before processing it as JSON.
     *
     * For example if your server needs to return:
     * ```js
     * ['one','two']
     * ```
     *
     * which is vulnerable to attack, your server can return:
     * ```js
     * )]}',
     * ['one','two']
     * ```
     *
     * Angular will strip the prefix, before processing the JSON.
     *
     *
     * ### Cross Site Request Forgery (XSRF) Protection
     *
     * [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery) is a technique by which
     * an unauthorized site can gain your user's private data. Angular provides a mechanism
     * to counter XSRF. When performing XHR requests, the $http service reads a token from a cookie
     * (by default, `XSRF-TOKEN`) and sets it as an HTTP header (`X-XSRF-TOKEN`). Since only
     * JavaScript that runs on your domain could read the cookie, your server can be assured that
     * the XHR came from JavaScript running on your domain. The header will not be set for
     * cross-domain requests.
     *
     * To take advantage of this, your server needs to set a token in a JavaScript readable session
     * cookie called `XSRF-TOKEN` on the first HTTP GET request. On subsequent XHR requests the
     * server can verify that the cookie matches `X-XSRF-TOKEN` HTTP header, and therefore be sure
     * that only JavaScript running on your domain could have sent the request. The token must be
     * unique for each user and must be verifiable by the server (to prevent the JavaScript from
     * making up its own tokens). We recommend that the token is a digest of your site's
     * authentication cookie with a [salt](https://en.wikipedia.org/wiki/Salt_(cryptography&#41;)
     * for added security.
     *
     * The name of the headers can be specified using the xsrfHeaderName and xsrfCookieName
     * properties of either $httpProvider.defaults at config-time, $http.defaults at run-time,
     * or the per-request config object.
     *
     *
     * @param {object} config Object describing the request to be made and how it should be
     *    processed. The object has following properties:
     *
     *    - **method** – `{string}` – HTTP method (e.g. 'GET', 'POST', etc)
     *    - **url** – `{string}` – Absolute or relative URL of the resource that is being requested.
     *    - **params** – `{Object.<string|Object>}` – Map of strings or objects which will be turned
     *      to `?key1=value1&key2=value2` after the url. If the value is not a string, it will be
     *      JSONified.
     *    - **data** – `{string|Object}` – Data to be sent as the request message data.
     *    - **headers** – `{Object}` – Map of strings or functions which return strings representing
     *      HTTP headers to send to the server. If the return value of a function is null, the
     *      header will not be sent.
     *    - **xsrfHeaderName** – `{string}` – Name of HTTP header to populate with the XSRF token.
     *    - **xsrfCookieName** – `{string}` – Name of cookie containing the XSRF token.
     *    - **transformRequest** –
     *      `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      request body and headers and returns its transformed (typically serialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **transformResponse** –
     *      `{function(data, headersGetter, status)|Array.<function(data, headersGetter, status)>}` –
     *      transform function or an array of such functions. The transform function takes the http
     *      response body, headers and status and returns its transformed (typically deserialized) version.
     *      See {@link ng.$http#overriding-the-default-transformations-per-request
     *      Overriding the Default Transformations}
     *    - **cache** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
     *      GET request, otherwise if a cache instance built with
     *      {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
     *      caching.
     *    - **timeout** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise}
     *      that should abort the request when resolved.
     *    - **withCredentials** - `{boolean}` - whether to set the `withCredentials` flag on the
     *      XHR object. See [requests with credentials](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS#Requests_with_credentials)
     *      for more information.
     *    - **responseType** - `{string}` - see
     *      [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
     *
     * @returns {HttpPromise} Returns a {@link ng.$q promise} object with the
     *   standard `then` method and two http specific methods: `success` and `error`. The `then`
     *   method takes two arguments a success and an error callback which will be called with a
     *   response object. The `success` and `error` methods take a single argument - a function that
     *   will be called when the request succeeds or fails respectively. The arguments passed into
     *   these functions are destructured representation of the response object passed into the
     *   `then` method. The response object has these properties:
     *
     *   - **data** – `{string|Object}` – The response body transformed with the transform
     *     functions.
     *   - **status** – `{number}` – HTTP status code of the response.
     *   - **headers** – `{function([headerName])}` – Header getter function.
     *   - **config** – `{Object}` – The configuration object that was used to generate the request.
     *   - **statusText** – `{string}` – HTTP status text of the response.
     *
     * @property {Array.<Object>} pendingRequests Array of config objects for currently pending
     *   requests. This is primarily meant to be used for debugging purposes.
     *
     *
     * @example
<example module="httpExample">
<file name="index.html">
  <div ng-controller="FetchController">
    <select ng-model="method">
      <option>GET</option>
      <option>JSONP</option>
    </select>
    <input type="text" ng-model="url" size="80"/>
    <button id="fetchbtn" ng-click="fetch()">fetch</button><br>
    <button id="samplegetbtn" ng-click="updateModel('GET', 'http-hello.html')">Sample GET</button>
    <button id="samplejsonpbtn"
      ng-click="updateModel('JSONP',
                    'https://angularjs.org/greet.php?callback=JSON_CALLBACK&name=Super%20Hero')">
      Sample JSONP
    </button>
    <button id="invalidjsonpbtn"
      ng-click="updateModel('JSONP', 'https://angularjs.org/doesntexist&callback=JSON_CALLBACK')">
        Invalid JSONP
      </button>
    <pre>http status code: {{status}}</pre>
    <pre>http response data: {{data}}</pre>
  </div>
</file>
<file name="script.js">
  angular.module('httpExample', [])
    .controller('FetchController', ['$scope', '$http', '$templateCache',
      function($scope, $http, $templateCache) {
        $scope.method = 'GET';
        $scope.url = 'http-hello.html';

        $scope.fetch = function() {
          $scope.code = null;
          $scope.response = null;

          $http({method: $scope.method, url: $scope.url, cache: $templateCache}).
            success(function(data, status) {
              $scope.status = status;
              $scope.data = data;
            }).
            error(function(data, status) {
              $scope.data = data || "Request failed";
              $scope.status = status;
          });
        };

        $scope.updateModel = function(method, url) {
          $scope.method = method;
          $scope.url = url;
        };
      }]);
</file>
<file name="http-hello.html">
  Hello, $http!
</file>
<file name="protractor.js" type="protractor">
  var status = element(by.binding('status'));
  var data = element(by.binding('data'));
  var fetchBtn = element(by.id('fetchbtn'));
  var sampleGetBtn = element(by.id('samplegetbtn'));
  var sampleJsonpBtn = element(by.id('samplejsonpbtn'));
  var invalidJsonpBtn = element(by.id('invalidjsonpbtn'));

  it('should make an xhr GET request', function() {
    sampleGetBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('200');
    expect(data.getText()).toMatch(/Hello, \$http!/);
  });

// Commented out due to flakes. See https://github.com/angular/angular.js/issues/9185
// it('should make a JSONP request to angularjs.org', function() {
//   sampleJsonpBtn.click();
//   fetchBtn.click();
//   expect(status.getText()).toMatch('200');
//   expect(data.getText()).toMatch(/Super Hero!/);
// });

  it('should make JSONP request to invalid URL and invoke the error handler',
      function() {
    invalidJsonpBtn.click();
    fetchBtn.click();
    expect(status.getText()).toMatch('0');
    expect(data.getText()).toMatch('Request failed');
  });
</file>
</example>
     */
    function $http(requestConfig) {

      if (!angular.isObject(requestConfig)) {
        throw minErr('$http')('badreq', 'Http request configuration must be an object.  Received: {0}', requestConfig);
      }

      var config = extend({
        method: 'get',
        transformRequest: defaults.transformRequest,
        transformResponse: defaults.transformResponse
      }, requestConfig);

      config.headers = mergeHeaders(requestConfig);
      config.method = uppercase(config.method);

      var serverRequest = function(config) {
        var headers = config.headers;
        var reqData = transformData(config.data, headersGetter(headers), undefined, config.transformRequest);

        // strip content-type if data is undefined
        if (isUndefined(reqData)) {
          forEach(headers, function(value, header) {
            if (lowercase(header) === 'content-type') {
                delete headers[header];
            }
          });
        }

        if (isUndefined(config.withCredentials) && !isUndefined(defaults.withCredentials)) {
          config.withCredentials = defaults.withCredentials;
        }

        // send request
        return sendReq(config, reqData).then(transformResponse, transformResponse);
      };

      var chain = [serverRequest, undefined];
      var promise = $q.when(config);

      // apply interceptors
      forEach(reversedInterceptors, function(interceptor) {
        if (interceptor.request || interceptor.requestError) {
          chain.unshift(interceptor.request, interceptor.requestError);
        }
        if (interceptor.response || interceptor.responseError) {
          chain.push(interceptor.response, interceptor.responseError);
        }
      });

      while (chain.length) {
        var thenFn = chain.shift();
        var rejectFn = chain.shift();

        promise = promise.then(thenFn, rejectFn);
      }

      promise.success = function(fn) {
        assertArgFn(fn, 'fn');

        promise.then(function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      promise.error = function(fn) {
        assertArgFn(fn, 'fn');

        promise.then(null, function(response) {
          fn(response.data, response.status, response.headers, config);
        });
        return promise;
      };

      return promise;

      function transformResponse(response) {
        // make a copy since the response must be cacheable
        var resp = extend({}, response);
        if (!response.data) {
          resp.data = response.data;
        } else {
          resp.data = transformData(response.data, response.headers, response.status, config.transformResponse);
        }
        return (isSuccess(response.status))
          ? resp
          : $q.reject(resp);
      }

      function executeHeaderFns(headers) {
        var headerContent, processedHeaders = {};

        forEach(headers, function(headerFn, header) {
          if (isFunction(headerFn)) {
            headerContent = headerFn();
            if (headerContent != null) {
              processedHeaders[header] = headerContent;
            }
          } else {
            processedHeaders[header] = headerFn;
          }
        });

        return processedHeaders;
      }

      function mergeHeaders(config) {
        var defHeaders = defaults.headers,
            reqHeaders = extend({}, config.headers),
            defHeaderName, lowercaseDefHeaderName, reqHeaderName;

        defHeaders = extend({}, defHeaders.common, defHeaders[lowercase(config.method)]);

        // using for-in instead of forEach to avoid unecessary iteration after header has been found
        defaultHeadersIteration:
        for (defHeaderName in defHeaders) {
          lowercaseDefHeaderName = lowercase(defHeaderName);

          for (reqHeaderName in reqHeaders) {
            if (lowercase(reqHeaderName) === lowercaseDefHeaderName) {
              continue defaultHeadersIteration;
            }
          }

          reqHeaders[defHeaderName] = defHeaders[defHeaderName];
        }

        // execute if header value is a function for merged headers
        return executeHeaderFns(reqHeaders);
      }
    }

    $http.pendingRequests = [];

    /**
     * @ngdoc method
     * @name $http#get
     *
     * @description
     * Shortcut method to perform `GET` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#delete
     *
     * @description
     * Shortcut method to perform `DELETE` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#head
     *
     * @description
     * Shortcut method to perform `HEAD` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#jsonp
     *
     * @description
     * Shortcut method to perform `JSONP` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request.
     *                     The name of the callback should be the string `JSON_CALLBACK`.
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */
    createShortMethods('get', 'delete', 'head', 'jsonp');

    /**
     * @ngdoc method
     * @name $http#post
     *
     * @description
     * Shortcut method to perform `POST` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

    /**
     * @ngdoc method
     * @name $http#put
     *
     * @description
     * Shortcut method to perform `PUT` request.
     *
     * @param {string} url Relative or absolute URL specifying the destination of the request
     * @param {*} data Request content
     * @param {Object=} config Optional configuration object
     * @returns {HttpPromise} Future object
     */

     /**
      * @ngdoc method
      * @name $http#patch
      *
      * @description
      * Shortcut method to perform `PATCH` request.
      *
      * @param {string} url Relative or absolute URL specifying the destination of the request
      * @param {*} data Request content
      * @param {Object=} config Optional configuration object
      * @returns {HttpPromise} Future object
      */
    createShortMethodsWithData('post', 'put', 'patch');

        /**
         * @ngdoc property
         * @name $http#defaults
         *
         * @description
         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of
         * default headers, withCredentials as well as request and response transformations.
         *
         * See "Setting HTTP Headers" and "Transforming Requests and Responses" sections above.
         */
    $http.defaults = defaults;


    return $http;


    function createShortMethods(names) {
      forEach(arguments, function(name) {
        $http[name] = function(url, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url
          }));
        };
      });
    }


    function createShortMethodsWithData(name) {
      forEach(arguments, function(name) {
        $http[name] = function(url, data, config) {
          return $http(extend(config || {}, {
            method: name,
            url: url,
            data: data
          }));
        };
      });
    }


    /**
     * Makes the request.
     *
     * !!! ACCESSES CLOSURE VARS:
     * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests
     */
    function sendReq(config, reqData) {
      var deferred = $q.defer(),
          promise = deferred.promise,
          cache,
          cachedResp,
          reqHeaders = config.headers,
          url = buildUrl(config.url, config.params);

      $http.pendingRequests.push(config);
      promise.then(removePendingReq, removePendingReq);


      if ((config.cache || defaults.cache) && config.cache !== false &&
          (config.method === 'GET' || config.method === 'JSONP')) {
        cache = isObject(config.cache) ? config.cache
              : isObject(defaults.cache) ? defaults.cache
              : defaultCache;
      }

      if (cache) {
        cachedResp = cache.get(url);
        if (isDefined(cachedResp)) {
          if (isPromiseLike(cachedResp)) {
            // cached request has already been sent, but there is no response yet
            cachedResp.then(resolvePromiseWithResult, resolvePromiseWithResult);
          } else {
            // serving from cache
            if (isArray(cachedResp)) {
              resolvePromise(cachedResp[1], cachedResp[0], shallowCopy(cachedResp[2]), cachedResp[3]);
            } else {
              resolvePromise(cachedResp, 200, {}, 'OK');
            }
          }
        } else {
          // put the promise for the non-transformed response into cache as a placeholder
          cache.put(url, promise);
        }
      }


      // if we won't have the response in cache, set the xsrf headers and
      // send the request to the backend
      if (isUndefined(cachedResp)) {
        var xsrfValue = urlIsSameOrigin(config.url)
            ? $browser.cookies()[config.xsrfCookieName || defaults.xsrfCookieName]
            : undefined;
        if (xsrfValue) {
          reqHeaders[(config.xsrfHeaderName || defaults.xsrfHeaderName)] = xsrfValue;
        }

        $httpBackend(config.method, url, reqData, done, reqHeaders, config.timeout,
            config.withCredentials, config.responseType);
      }

      return promise;


      /**
       * Callback registered to $httpBackend():
       *  - caches the response if desired
       *  - resolves the raw $http promise
       *  - calls $apply
       */
      function done(status, response, headersString, statusText) {
        if (cache) {
          if (isSuccess(status)) {
            cache.put(url, [status, response, parseHeaders(headersString), statusText]);
          } else {
            // remove promise from the cache
            cache.remove(url);
          }
        }

        function resolveHttpPromise() {
          resolvePromise(response, status, headersString, statusText);
        }

        if (useApplyAsync) {
          $rootScope.$applyAsync(resolveHttpPromise);
        } else {
          resolveHttpPromise();
          if (!$rootScope.$$phase) $rootScope.$apply();
        }
      }


      /**
       * Resolves the raw $http promise.
       */
      function resolvePromise(response, status, headers, statusText) {
        // normalize internal statuses to 0
        status = Math.max(status, 0);

        (isSuccess(status) ? deferred.resolve : deferred.reject)({
          data: response,
          status: status,
          headers: headersGetter(headers),
          config: config,
          statusText: statusText
        });
      }

      function resolvePromiseWithResult(result) {
        resolvePromise(result.data, result.status, shallowCopy(result.headers()), result.statusText);
      }

      function removePendingReq() {
        var idx = $http.pendingRequests.indexOf(config);
        if (idx !== -1) $http.pendingRequests.splice(idx, 1);
      }
    }


    function buildUrl(url, params) {
      if (!params) return url;
      var parts = [];
      forEachSorted(params, function(value, key) {
        if (value === null || isUndefined(value)) return;
        if (!isArray(value)) value = [value];

        forEach(value, function(v) {
          if (isObject(v)) {
            if (isDate(v)) {
              v = v.toISOString();
            } else {
              v = toJson(v);
            }
          }
          parts.push(encodeUriQuery(key) + '=' +
                     encodeUriQuery(v));
        });
      });
      if (parts.length > 0) {
        url += ((url.indexOf('?') == -1) ? '?' : '&') + parts.join('&');
      }
      return url;
    }
  }];
}

function createXhr() {
    return new window.XMLHttpRequest();
}

/**
 * @ngdoc service
 * @name $httpBackend
 * @requires $window
 * @requires $document
 *
 * @description
 * HTTP backend used by the {@link ng.$http service} that delegates to
 * XMLHttpRequest object or JSONP and deals with browser incompatibilities.
 *
 * You should never need to use this service directly, instead use the higher-level abstractions:
 * {@link ng.$http $http} or {@link ngResource.$resource $resource}.
 *
 * During testing this implementation is swapped with {@link ngMock.$httpBackend mock
 * $httpBackend} which can be trained with responses.
 */
function $HttpBackendProvider() {
  this.$get = ['$browser', '$window', '$document', function($browser, $window, $document) {
    return createHttpBackend($browser, createXhr, $browser.defer, $window.angular.callbacks, $document[0]);
  }];
}

function createHttpBackend($browser, createXhr, $browserDefer, callbacks, rawDocument) {
  // TODO(vojta): fix the signature
  return function(method, url, post, callback, headers, timeout, withCredentials, responseType) {
    $browser.$$incOutstandingRequestCount();
    url = url || $browser.url();

    if (lowercase(method) == 'jsonp') {
      var callbackId = '_' + (callbacks.counter++).toString(36);
      callbacks[callbackId] = function(data) {
        callbacks[callbackId].data = data;
        callbacks[callbackId].called = true;
      };

      var jsonpDone = jsonpReq(url.replace('JSON_CALLBACK', 'angular.callbacks.' + callbackId),
          callbackId, function(status, text) {
        completeRequest(callback, status, callbacks[callbackId].data, "", text);
        callbacks[callbackId] = noop;
      });
    } else {

      var xhr = createXhr();

      xhr.open(method, url, true);
      forEach(headers, function(value, key) {
        if (isDefined(value)) {
            xhr.setRequestHeader(key, value);
        }
      });

      xhr.onload = function requestLoaded() {
        var statusText = xhr.statusText || '';

        // responseText is the old-school way of retrieving response (supported by IE8 & 9)
        // response/responseType properties were introduced in XHR Level2 spec (supported by IE10)
        var response = ('response' in xhr) ? xhr.response : xhr.responseText;

        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
        var status = xhr.status === 1223 ? 204 : xhr.status;

        // fix status code when it is 0 (0 status is undocumented).
        // Occurs when accessing file resources or on Android 4.1 stock browser
        // while retrieving files from application cache.
        if (status === 0) {
          status = response ? 200 : urlResolve(url).protocol == 'file' ? 404 : 0;
        }

        completeRequest(callback,
            status,
            response,
            xhr.getAllResponseHeaders(),
            statusText);
      };

      var requestError = function() {
        // The response is always empty
        // See https://xhr.spec.whatwg.org/#request-error-steps and https://fetch.spec.whatwg.org/#concept-network-error
        completeRequest(callback, -1, null, null, '');
      };

      xhr.onerror = requestError;
      xhr.onabort = requestError;

      if (withCredentials) {
        xhr.withCredentials = true;
      }

      if (responseType) {
        try {
          xhr.responseType = responseType;
        } catch (e) {
          // WebKit added support for the json responseType value on 09/03/2013
          // https://bugs.webkit.org/show_bug.cgi?id=73648. Versions of Safari prior to 7 are
          // known to throw when setting the value "json" as the response type. Other older
          // browsers implementing the responseType
          //
          // The json response type can be ignored if not supported, because JSON payloads are
          // parsed on the client-side regardless.
          if (responseType !== 'json') {
            throw e;
          }
        }
      }

      xhr.send(post || null);
    }

    if (timeout > 0) {
      var timeoutId = $browserDefer(timeoutRequest, timeout);
    } else if (isPromiseLike(timeout)) {
      timeout.then(timeoutRequest);
    }


    function timeoutRequest() {
      jsonpDone && jsonpDone();
      xhr && xhr.abort();
    }

    function completeRequest(callback, status, response, headersString, statusText) {
      // cancel timeout and subsequent timeout promise resolution
      if (timeoutId !== undefined) {
        $browserDefer.cancel(timeoutId);
      }
      jsonpDone = xhr = null;

      callback(status, response, headersString, statusText);
      $browser.$$completeOutstandingRequest(noop);
    }
  };

  function jsonpReq(url, callbackId, done) {
    // we can't use jQuery/jqLite here because jQuery does crazy stuff with script elements, e.g.:
    // - fetches local scripts via XHR and evals them
    // - adds and immediately removes script elements from the document
    var script = rawDocument.createElement('script'), callback = null;
    script.type = "text/javascript";
    script.src = url;
    script.async = true;

    callback = function(event) {
      removeEventListenerFn(script, "load", callback);
      removeEventListenerFn(script, "error", callback);
      rawDocument.body.removeChild(script);
      script = null;
      var status = -1;
      var text = "unknown";

      if (event) {
        if (event.type === "load" && !callbacks[callbackId].called) {
          event = { type: "error" };
        }
        text = event.type;
        status = event.type === "error" ? 404 : 200;
      }

      if (done) {
        done(status, text);
      }
    };

    addEventListenerFn(script, "load", callback);
    addEventListenerFn(script, "error", callback);
    rawDocument.body.appendChild(script);
    return callback;
  }
}

var $interpolateMinErr = minErr('$interpolate');

/**
 * @ngdoc provider
 * @name $interpolateProvider
 *
 * @description
 *
 * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.
 *
 * @example
<example module="customInterpolationApp">
<file name="index.html">
<script>
  var customInterpolationApp = angular.module('customInterpolationApp', []);

  customInterpolationApp.config(function($interpolateProvider) {
    $interpolateProvider.startSymbol('//');
    $interpolateProvider.endSymbol('//');
  });


  customInterpolationApp.controller('DemoController', function() {
      this.label = "This binding is brought you by // interpolation symbols.";
  });
</script>
<div ng-app="App" ng-controller="DemoController as demo">
    //demo.label//
</div>
</file>
<file name="protractor.js" type="protractor">
  it('should interpolate binding with custom symbols', function() {
    expect(element(by.binding('demo.label')).getText()).toBe('This binding is brought you by // interpolation symbols.');
  });
</file>
</example>
 */
function $InterpolateProvider() {
  var startSymbol = '{{';
  var endSymbol = '}}';

  /**
   * @ngdoc method
   * @name $interpolateProvider#startSymbol
   * @description
   * Symbol to denote start of expression in the interpolated string. Defaults to `{{`.
   *
   * @param {string=} value new value to set the starting symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.startSymbol = function(value) {
    if (value) {
      startSymbol = value;
      return this;
    } else {
      return startSymbol;
    }
  };

  /**
   * @ngdoc method
   * @name $interpolateProvider#endSymbol
   * @description
   * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
   *
   * @param {string=} value new value to set the ending symbol to.
   * @returns {string|self} Returns the symbol when used as getter and self if used as setter.
   */
  this.endSymbol = function(value) {
    if (value) {
      endSymbol = value;
      return this;
    } else {
      return endSymbol;
    }
  };


  this.$get = ['$parse', '$exceptionHandler', '$sce', function($parse, $exceptionHandler, $sce) {
    var startSymbolLength = startSymbol.length,
        endSymbolLength = endSymbol.length,
        escapedStartRegexp = new RegExp(startSymbol.replace(/./g, escape), 'g'),
        escapedEndRegexp = new RegExp(endSymbol.replace(/./g, escape), 'g');

    function escape(ch) {
      return '\\\\\\' + ch;
    }

    /**
     * @ngdoc service
     * @name $interpolate
     * @kind function
     *
     * @requires $parse
     * @requires $sce
     *
     * @description
     *
     * Compiles a string with markup into an interpolation function. This service is used by the
     * HTML {@link ng.$compile $compile} service for data binding. See
     * {@link ng.$interpolateProvider $interpolateProvider} for configuring the
     * interpolation markup.
     *
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var exp = $interpolate('Hello {{name | uppercase}}!');
     *   expect(exp({name:'Angular'}).toEqual('Hello ANGULAR!');
     * ```
     *
     * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is
     * `true`, the interpolation function will return `undefined` unless all embedded expressions
     * evaluate to a value other than `undefined`.
     *
     * ```js
     *   var $interpolate = ...; // injected
     *   var context = {greeting: 'Hello', name: undefined };
     *
     *   // default "forgiving" mode
     *   var exp = $interpolate('{{greeting}} {{name}}!');
     *   expect(exp(context)).toEqual('Hello !');
     *
     *   // "allOrNothing" mode
     *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);
     *   expect(exp(context)).toBeUndefined();
     *   context.name = 'Angular';
     *   expect(exp(context)).toEqual('Hello Angular!');
     * ```
     *
     * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.
     *
     * ####Escaped Interpolation
     * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers
     * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).
     * It will be rendered as a regular start/end marker, and will not be interpreted as an expression
     * or binding.
     *
     * This enables web-servers to prevent script injection attacks and defacing attacks, to some
     * degree, while also enabling code examples to work without relying on the
     * {@link ng.directive:ngNonBindable ngNonBindable} directive.
     *
     * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,
     * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all
     * interpolation start/end markers with their escaped counterparts.**
     *
     * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered
     * output when the $interpolate service processes the text. So, for HTML elements interpolated
     * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter
     * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,
     * this is typically useful only when user-data is used in rendering a template from the server, or
     * when otherwise untrusted data is used by a directive.
     *
     * <example>
     *  <file name="index.html">
     *    <div ng-init="username='A user'">
     *      <p ng-init="apptitle='Escaping demo'">{{apptitle}}: \{\{ username = "defaced value"; \}\}
     *        </p>
     *      <p><strong>{{username}}</strong> attempts to inject code which will deface the
     *        application, but fails to accomplish their task, because the server has correctly
     *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)
     *        characters.</p>
     *      <p>Instead, the result of the attempted script injection is visible, and can be removed
     *        from the database by an administrator.</p>
     *    </div>
     *  </file>
     * </example>
     *
     * @param {string} text The text with markup to interpolate.
     * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have
     *    embedded expression in order to return an interpolation function. Strings with no
     *    embedded expression will return null for the interpolation function.
     * @param {string=} trustedContext when provided, the returned function passes the interpolated
     *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,
     *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that
     *    provides Strict Contextual Escaping for details.
     * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined
     *    unless all embedded expressions evaluate to a value other than `undefined`.
     * @returns {function(context)} an interpolation function which is used to compute the
     *    interpolated string. The function has these parameters:
     *
     * - `context`: evaluation context for all expressions embedded in the interpolated text
     */
    function $interpolate(text, mustHaveExpression, trustedContext, allOrNothing) {
      allOrNothing = !!allOrNothing;
      var startIndex,
          endIndex,
          index = 0,
          expressions = [],
          parseFns = [],
          textLength = text.length,
          exp,
          concat = [],
          expressionPositions = [];

      while (index < textLength) {
        if (((startIndex = text.indexOf(startSymbol, index)) != -1) &&
             ((endIndex = text.indexOf(endSymbol, startIndex + startSymbolLength)) != -1)) {
          if (index !== startIndex) {
            concat.push(unescapeText(text.substring(index, startIndex)));
          }
          exp = text.substring(startIndex + startSymbolLength, endIndex);
          expressions.push(exp);
          parseFns.push($parse(exp, parseStringifyInterceptor));
          index = endIndex + endSymbolLength;
          expressionPositions.push(concat.length);
          concat.push('');
        } else {
          // we did not find an interpolation, so we have to add the remainder to the separators array
          if (index !== textLength) {
            concat.push(unescapeText(text.substring(index)));
          }
          break;
        }
      }

      // Concatenating expressions makes it hard to reason about whether some combination of
      // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a
      // single expression be used for iframe[src], object[src], etc., we ensure that the value
      // that's used is assigned or constructed by some JS code somewhere that is more testable or
      // make it obvious that you bound the value to some user controlled value.  This helps reduce
      // the load when auditing for XSS issues.
      if (trustedContext && concat.length > 1) {
          throw $interpolateMinErr('noconcat',
              "Error while interpolating: {0}\nStrict Contextual Escaping disallows " +
              "interpolations that concatenate multiple expressions when a trusted value is " +
              "required.  See http://docs.angularjs.org/api/ng.$sce", text);
      }

      if (!mustHaveExpression || expressions.length) {
        var compute = function(values) {
          for (var i = 0, ii = expressions.length; i < ii; i++) {
            if (allOrNothing && isUndefined(values[i])) return;
            concat[expressionPositions[i]] = values[i];
          }
          return concat.join('');
        };

        var getValue = function(value) {
          return trustedContext ?
            $sce.getTrusted(trustedContext, value) :
            $sce.valueOf(value);
        };

        var stringify = function(value) {
          if (value == null) { // null || undefined
            return '';
          }
          switch (typeof value) {
            case 'string':
              break;
            case 'number':
              value = '' + value;
              break;
            default:
              value = toJson(value);
          }

          return value;
        };

        return extend(function interpolationFn(context) {
            var i = 0;
            var ii = expressions.length;
            var values = new Array(ii);

            try {
              for (; i < ii; i++) {
                values[i] = parseFns[i](context);
              }

              return compute(values);
            } catch (err) {
              var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
                  err.toString());
              $exceptionHandler(newErr);
            }

          }, {
          // all of these properties are undocumented for now
          exp: text, //just for compatibility with regular watchers created via $watch
          expressions: expressions,
          $$watchDelegate: function(scope, listener, objectEquality) {
            var lastValue;
            return scope.$watchGroup(parseFns, function interpolateFnWatcher(values, oldValues) {
              var currValue = compute(values);
              if (isFunction(listener)) {
                listener.call(this, currValue, values !== oldValues ? lastValue : currValue, scope);
              }
              lastValue = currValue;
            }, objectEquality);
          }
        });
      }

      function unescapeText(text) {
        return text.replace(escapedStartRegexp, startSymbol).
          replace(escapedEndRegexp, endSymbol);
      }

      function parseStringifyInterceptor(value) {
        try {
          value = getValue(value);
          return allOrNothing && !isDefined(value) ? value : stringify(value);
        } catch (err) {
          var newErr = $interpolateMinErr('interr', "Can't interpolate: {0}\n{1}", text,
            err.toString());
          $exceptionHandler(newErr);
        }
      }
    }


    /**
     * @ngdoc method
     * @name $interpolate#startSymbol
     * @description
     * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.
     *
     * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change
     * the symbol.
     *
     * @returns {string} start symbol.
     */
    $interpolate.startSymbol = function() {
      return startSymbol;
    };


    /**
     * @ngdoc method
     * @name $interpolate#endSymbol
     * @description
     * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.
     *
     * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change
     * the symbol.
     *
     * @returns {string} end symbol.
     */
    $interpolate.endSymbol = function() {
      return endSymbol;
    };

    return $interpolate;
  }];
}

function $IntervalProvider() {
  this.$get = ['$rootScope', '$window', '$q', '$$q',
       function($rootScope,   $window,   $q,   $$q) {
    var intervals = {};


     /**
      * @ngdoc service
      * @name $interval
      *
      * @description
      * Angular's wrapper for `window.setInterval`. The `fn` function is executed every `delay`
      * milliseconds.
      *
      * The return value of registering an interval function is a promise. This promise will be
      * notified upon each tick of the interval, and will be resolved after `count` iterations, or
      * run indefinitely if `count` is not defined. The value of the notification will be the
      * number of iterations that have run.
      * To cancel an interval, call `$interval.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$interval#flush `$interval.flush(millis)`} to
      * move forward by `millis` milliseconds and trigger any functions scheduled to run in that
      * time.
      *
      * <div class="alert alert-warning">
      * **Note**: Intervals created by this service must be explicitly destroyed when you are finished
      * with them.  In particular they are not automatically destroyed when a controller's scope or a
      * directive's element are destroyed.
      * You should take this into consideration and make sure to always cancel the interval at the
      * appropriate moment.  See the example below for more details on how and when to do this.
      * </div>
      *
      * @param {function()} fn A function that should be called repeatedly.
      * @param {number} delay Number of milliseconds between each function call.
      * @param {number=} [count=0] Number of times to repeat. If not set, or 0, will repeat
      *   indefinitely.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {promise} A promise which will be notified on each iteration.
      *
      * @example
      * <example module="intervalExample">
      * <file name="index.html">
      *   <script>
      *     angular.module('intervalExample', [])
      *       .controller('ExampleController', ['$scope', '$interval',
      *         function($scope, $interval) {
      *           $scope.format = 'M/d/yy h:mm:ss a';
      *           $scope.blood_1 = 100;
      *           $scope.blood_2 = 120;
      *
      *           var stop;
      *           $scope.fight = function() {
      *             // Don't start a new fight if we are already fighting
      *             if ( angular.isDefined(stop) ) return;
      *
      *             stop = $interval(function() {
      *               if ($scope.blood_1 > 0 && $scope.blood_2 > 0) {
      *                 $scope.blood_1 = $scope.blood_1 - 3;
      *                 $scope.blood_2 = $scope.blood_2 - 4;
      *               } else {
      *                 $scope.stopFight();
      *               }
      *             }, 100);
      *           };
      *
      *           $scope.stopFight = function() {
      *             if (angular.isDefined(stop)) {
      *               $interval.cancel(stop);
      *               stop = undefined;
      *             }
      *           };
      *
      *           $scope.resetFight = function() {
      *             $scope.blood_1 = 100;
      *             $scope.blood_2 = 120;
      *           };
      *
      *           $scope.$on('$destroy', function() {
      *             // Make sure that the interval is destroyed too
      *             $scope.stopFight();
      *           });
      *         }])
      *       // Register the 'myCurrentTime' directive factory method.
      *       // We inject $interval and dateFilter service since the factory method is DI.
      *       .directive('myCurrentTime', ['$interval', 'dateFilter',
      *         function($interval, dateFilter) {
      *           // return the directive link function. (compile function not needed)
      *           return function(scope, element, attrs) {
      *             var format,  // date format
      *                 stopTime; // so that we can cancel the time updates
      *
      *             // used to update the UI
      *             function updateTime() {
      *               element.text(dateFilter(new Date(), format));
      *             }
      *
      *             // watch the expression, and update the UI on change.
      *             scope.$watch(attrs.myCurrentTime, function(value) {
      *               format = value;
      *               updateTime();
      *             });
      *
      *             stopTime = $interval(updateTime, 1000);
      *
      *             // listen on DOM destroy (removal) event, and cancel the next UI update
      *             // to prevent updating time after the DOM element was removed.
      *             element.on('$destroy', function() {
      *               $interval.cancel(stopTime);
      *             });
      *           }
      *         }]);
      *   </script>
      *
      *   <div>
      *     <div ng-controller="ExampleController">
      *       Date format: <input ng-model="format"> <hr/>
      *       Current time is: <span my-current-time="format"></span>
      *       <hr/>
      *       Blood 1 : <font color='red'>{{blood_1}}</font>
      *       Blood 2 : <font color='red'>{{blood_2}}</font>
      *       <button type="button" data-ng-click="fight()">Fight</button>
      *       <button type="button" data-ng-click="stopFight()">StopFight</button>
      *       <button type="button" data-ng-click="resetFight()">resetFight</button>
      *     </div>
      *   </div>
      *
      * </file>
      * </example>
      */
    function interval(fn, delay, count, invokeApply) {
      var setInterval = $window.setInterval,
          clearInterval = $window.clearInterval,
          iteration = 0,
          skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise;

      count = isDefined(count) ? count : 0;

      promise.then(null, null, fn);

      promise.$$intervalId = setInterval(function tick() {
        deferred.notify(iteration++);

        if (count > 0 && iteration >= count) {
          deferred.resolve(iteration);
          clearInterval(promise.$$intervalId);
          delete intervals[promise.$$intervalId];
        }

        if (!skipApply) $rootScope.$apply();

      }, delay);

      intervals[promise.$$intervalId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $interval#cancel
      *
      * @description
      * Cancels a task associated with the `promise`.
      *
      * @param {promise} promise returned by the `$interval` function.
      * @returns {boolean} Returns `true` if the task was successfully canceled.
      */
    interval.cancel = function(promise) {
      if (promise && promise.$$intervalId in intervals) {
        intervals[promise.$$intervalId].reject('canceled');
        $window.clearInterval(promise.$$intervalId);
        delete intervals[promise.$$intervalId];
        return true;
      }
      return false;
    };

    return interval;
  }];
}

/**
 * @ngdoc service
 * @name $locale
 *
 * @description
 * $locale service provides localization rules for various Angular components. As of right now the
 * only public api is:
 *
 * * `id` – `{string}` – locale id formatted as `languageId-countryId` (e.g. `en-us`)
 */
function $LocaleProvider() {
  this.$get = function() {
    return {
      id: 'en-us',

      NUMBER_FORMATS: {
        DECIMAL_SEP: '.',
        GROUP_SEP: ',',
        PATTERNS: [
          { // Decimal Pattern
            minInt: 1,
            minFrac: 0,
            maxFrac: 3,
            posPre: '',
            posSuf: '',
            negPre: '-',
            negSuf: '',
            gSize: 3,
            lgSize: 3
          },{ //Currency Pattern
            minInt: 1,
            minFrac: 2,
            maxFrac: 2,
            posPre: '\u00A4',
            posSuf: '',
            negPre: '(\u00A4',
            negSuf: ')',
            gSize: 3,
            lgSize: 3
          }
        ],
        CURRENCY_SYM: '$'
      },

      DATETIME_FORMATS: {
        MONTH:
            'January,February,March,April,May,June,July,August,September,October,November,December'
            .split(','),
        SHORTMONTH:  'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
        DAY: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
        SHORTDAY: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
        AMPMS: ['AM','PM'],
        medium: 'MMM d, y h:mm:ss a',
        'short': 'M/d/yy h:mm a',
        fullDate: 'EEEE, MMMM d, y',
        longDate: 'MMMM d, y',
        mediumDate: 'MMM d, y',
        shortDate: 'M/d/yy',
        mediumTime: 'h:mm:ss a',
        shortTime: 'h:mm a',
        ERANAMES: [
          "Before Christ",
          "Anno Domini"
        ],
        ERAS: [
          "BC",
          "AD"
        ]
      },

      pluralCat: function(num) {
        if (num === 1) {
          return 'one';
        }
        return 'other';
      }
    };
  };
}

var PATH_MATCH = /^([^\?#]*)(\?([^#]*))?(#(.*))?$/,
    DEFAULT_PORTS = {'http': 80, 'https': 443, 'ftp': 21};
var $locationMinErr = minErr('$location');


/**
 * Encode path using encodeUriSegment, ignoring forward slashes
 *
 * @param {string} path Path to encode
 * @returns {string}
 */
function encodePath(path) {
  var segments = path.split('/'),
      i = segments.length;

  while (i--) {
    segments[i] = encodeUriSegment(segments[i]);
  }

  return segments.join('/');
}

function parseAbsoluteUrl(absoluteUrl, locationObj) {
  var parsedUrl = urlResolve(absoluteUrl);

  locationObj.$$protocol = parsedUrl.protocol;
  locationObj.$$host = parsedUrl.hostname;
  locationObj.$$port = int(parsedUrl.port) || DEFAULT_PORTS[parsedUrl.protocol] || null;
}


function parseAppUrl(relativeUrl, locationObj) {
  var prefixed = (relativeUrl.charAt(0) !== '/');
  if (prefixed) {
    relativeUrl = '/' + relativeUrl;
  }
  var match = urlResolve(relativeUrl);
  locationObj.$$path = decodeURIComponent(prefixed && match.pathname.charAt(0) === '/' ?
      match.pathname.substring(1) : match.pathname);
  locationObj.$$search = parseKeyValue(match.search);
  locationObj.$$hash = decodeURIComponent(match.hash);

  // make sure path starts with '/';
  if (locationObj.$$path && locationObj.$$path.charAt(0) != '/') {
    locationObj.$$path = '/' + locationObj.$$path;
  }
}


/**
 *
 * @param {string} begin
 * @param {string} whole
 * @returns {string} returns text from whole after begin or undefined if it does not begin with
 *                   expected string.
 */
function beginsWith(begin, whole) {
  if (whole.indexOf(begin) === 0) {
    return whole.substr(begin.length);
  }
}


function stripHash(url) {
  var index = url.indexOf('#');
  return index == -1 ? url : url.substr(0, index);
}

function trimEmptyHash(url) {
  return url.replace(/(#.+)|#$/, '$1');
}


function stripFile(url) {
  return url.substr(0, stripHash(url).lastIndexOf('/') + 1);
}

/* return the server only (scheme://host:port) */
function serverBase(url) {
  return url.substring(0, url.indexOf('/', url.indexOf('//') + 2));
}


/**
 * LocationHtml5Url represents an url
 * This object is exposed as $location service when HTML5 mode is enabled and supported
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} basePrefix url path prefix
 */
function LocationHtml5Url(appBase, basePrefix) {
  this.$$html5 = true;
  basePrefix = basePrefix || '';
  var appBaseNoFile = stripFile(appBase);
  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given html5 (regular) url string into properties
   * @param {string} url HTML5 url
   * @private
   */
  this.$$parse = function(url) {
    var pathUrl = beginsWith(appBaseNoFile, url);
    if (!isString(pathUrl)) {
      throw $locationMinErr('ipthprfx', 'Invalid url "{0}", missing path prefix "{1}".', url,
          appBaseNoFile);
    }

    parseAppUrl(pathUrl, this);

    if (!this.$$path) {
      this.$$path = '/';
    }

    this.$$compose();
  };

  /**
   * Compose url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBaseNoFile + this.$$url.substr(1); // first char is always '/'
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }
    var appUrl, prevAppUrl;
    var rewrittenUrl;

    if ((appUrl = beginsWith(appBase, url)) !== undefined) {
      prevAppUrl = appUrl;
      if ((appUrl = beginsWith(basePrefix, appUrl)) !== undefined) {
        rewrittenUrl = appBaseNoFile + (beginsWith('/', appUrl) || appUrl);
      } else {
        rewrittenUrl = appBase + prevAppUrl;
      }
    } else if ((appUrl = beginsWith(appBaseNoFile, url)) !== undefined) {
      rewrittenUrl = appBaseNoFile + appUrl;
    } else if (appBaseNoFile == url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when developer doesn't opt into html5 mode.
 * It also serves as the base class for html5 mode fallback on legacy browsers.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangUrl(appBase, hashPrefix) {
  var appBaseNoFile = stripFile(appBase);

  parseAbsoluteUrl(appBase, this);


  /**
   * Parse given hashbang url into properties
   * @param {string} url Hashbang url
   * @private
   */
  this.$$parse = function(url) {
    var withoutBaseUrl = beginsWith(appBase, url) || beginsWith(appBaseNoFile, url);
    var withoutHashUrl;

    if (withoutBaseUrl.charAt(0) === '#') {

      // The rest of the url starts with a hash so we have
      // got either a hashbang path or a plain hash fragment
      withoutHashUrl = beginsWith(hashPrefix, withoutBaseUrl);
      if (isUndefined(withoutHashUrl)) {
        // There was no hashbang prefix so we just have a hash fragment
        withoutHashUrl = withoutBaseUrl;
      }

    } else {
      // There was no hashbang path nor hash fragment:
      // If we are in HTML5 mode we use what is left as the path;
      // Otherwise we ignore what is left
      withoutHashUrl = this.$$html5 ? withoutBaseUrl : '';
    }

    parseAppUrl(withoutHashUrl, this);

    this.$$path = removeWindowsDriveName(this.$$path, withoutHashUrl, appBase);

    this.$$compose();

    /*
     * In Windows, on an anchor node on documents loaded from
     * the filesystem, the browser will return a pathname
     * prefixed with the drive name ('/C:/path') when a
     * pathname without a drive is set:
     *  * a.setAttribute('href', '/foo')
     *   * a.pathname === '/C:/foo' //true
     *
     * Inside of Angular, we're always using pathnames that
     * do not include drive names for routing.
     */
    function removeWindowsDriveName(path, url, base) {
      /*
      Matches paths for file protocol on windows,
      such as /C:/foo/bar, and captures only /foo/bar.
      */
      var windowsFilePathExp = /^\/[A-Z]:(\/.*)/;

      var firstPathSegmentMatch;

      //Get the relative path from the input URL.
      if (url.indexOf(base) === 0) {
        url = url.replace(base, '');
      }

      // The input URL intentionally contains a first path segment that ends with a colon.
      if (windowsFilePathExp.exec(url)) {
        return path;
      }

      firstPathSegmentMatch = windowsFilePathExp.exec(path);
      return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;
    }
  };

  /**
   * Compose hashbang url and update `absUrl` property
   * @private
   */
  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    this.$$absUrl = appBase + (this.$$url ? hashPrefix + this.$$url : '');
  };

  this.$$parseLinkUrl = function(url, relHref) {
    if (stripHash(appBase) == stripHash(url)) {
      this.$$parse(url);
      return true;
    }
    return false;
  };
}


/**
 * LocationHashbangUrl represents url
 * This object is exposed as $location service when html5 history api is enabled but the browser
 * does not support it.
 *
 * @constructor
 * @param {string} appBase application base URL
 * @param {string} hashPrefix hashbang prefix
 */
function LocationHashbangInHtml5Url(appBase, hashPrefix) {
  this.$$html5 = true;
  LocationHashbangUrl.apply(this, arguments);

  var appBaseNoFile = stripFile(appBase);

  this.$$parseLinkUrl = function(url, relHref) {
    if (relHref && relHref[0] === '#') {
      // special case for links to hash fragments:
      // keep the old url and only replace the hash fragment
      this.hash(relHref.slice(1));
      return true;
    }

    var rewrittenUrl;
    var appUrl;

    if (appBase == stripHash(url)) {
      rewrittenUrl = url;
    } else if ((appUrl = beginsWith(appBaseNoFile, url))) {
      rewrittenUrl = appBase + hashPrefix + appUrl;
    } else if (appBaseNoFile === url + '/') {
      rewrittenUrl = appBaseNoFile;
    }
    if (rewrittenUrl) {
      this.$$parse(rewrittenUrl);
    }
    return !!rewrittenUrl;
  };

  this.$$compose = function() {
    var search = toKeyValue(this.$$search),
        hash = this.$$hash ? '#' + encodeUriSegment(this.$$hash) : '';

    this.$$url = encodePath(this.$$path) + (search ? '?' + search : '') + hash;
    // include hashPrefix in $$absUrl when $$url is empty so IE8 & 9 do not reload page because of removal of '#'
    this.$$absUrl = appBase + hashPrefix + this.$$url;
  };

}


var locationPrototype = {

  /**
   * Are we in html5 mode?
   * @private
   */
  $$html5: false,

  /**
   * Has any change been replacing?
   * @private
   */
  $$replace: false,

  /**
   * @ngdoc method
   * @name $location#absUrl
   *
   * @description
   * This method is getter only.
   *
   * Return full url representation with all segments encoded according to rules specified in
   * [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var absUrl = $location.absUrl();
   * // => "http://example.com/#/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @return {string} full url
   */
  absUrl: locationGetter('$$absUrl'),

  /**
   * @ngdoc method
   * @name $location#url
   *
   * @description
   * This method is getter / setter.
   *
   * Return url (e.g. `/path?a=b#hash`) when called without any parameter.
   *
   * Change path, search and hash, when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var url = $location.url();
   * // => "/some/path?foo=bar&baz=xoxo"
   * ```
   *
   * @param {string=} url New url without base prefix (e.g. `/path?a=b#hash`)
   * @return {string} url
   */
  url: function(url) {
    if (isUndefined(url))
      return this.$$url;

    var match = PATH_MATCH.exec(url);
    if (match[1] || url === '') this.path(decodeURIComponent(match[1]));
    if (match[2] || match[1] || url === '') this.search(match[3] || '');
    this.hash(match[5] || '');

    return this;
  },

  /**
   * @ngdoc method
   * @name $location#protocol
   *
   * @description
   * This method is getter only.
   *
   * Return protocol of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var protocol = $location.protocol();
   * // => "http"
   * ```
   *
   * @return {string} protocol of current url
   */
  protocol: locationGetter('$$protocol'),

  /**
   * @ngdoc method
   * @name $location#host
   *
   * @description
   * This method is getter only.
   *
   * Return host of current url.
   *
   * Note: compared to the non-angular version `location.host` which returns `hostname:port`, this returns the `hostname` portion only.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var host = $location.host();
   * // => "example.com"
   *
   * // given url http://user:password@example.com:8080/#/some/path?foo=bar&baz=xoxo
   * host = $location.host();
   * // => "example.com"
   * host = location.host;
   * // => "example.com:8080"
   * ```
   *
   * @return {string} host of current url.
   */
  host: locationGetter('$$host'),

  /**
   * @ngdoc method
   * @name $location#port
   *
   * @description
   * This method is getter only.
   *
   * Return port of current url.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var port = $location.port();
   * // => 80
   * ```
   *
   * @return {Number} port
   */
  port: locationGetter('$$port'),

  /**
   * @ngdoc method
   * @name $location#path
   *
   * @description
   * This method is getter / setter.
   *
   * Return path of current url when called without any parameter.
   *
   * Change path when called with parameter and return `$location`.
   *
   * Note: Path should always begin with forward slash (/), this method will add the forward slash
   * if it is missing.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var path = $location.path();
   * // => "/some/path"
   * ```
   *
   * @param {(string|number)=} path New path
   * @return {string} path
   */
  path: locationGetterSetter('$$path', function(path) {
    path = path !== null ? path.toString() : '';
    return path.charAt(0) == '/' ? path : '/' + path;
  }),

  /**
   * @ngdoc method
   * @name $location#search
   *
   * @description
   * This method is getter / setter.
   *
   * Return search part (as object) of current url when called without any parameter.
   *
   * Change search part when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo
   * var searchObject = $location.search();
   * // => {foo: 'bar', baz: 'xoxo'}
   *
   * // set foo to 'yipee'
   * $location.search('foo', 'yipee');
   * // $location.search() => {foo: 'yipee', baz: 'xoxo'}
   * ```
   *
   * @param {string|Object.<string>|Object.<Array.<string>>} search New search params - string or
   * hash object.
   *
   * When called with a single argument the method acts as a setter, setting the `search` component
   * of `$location` to the specified value.
   *
   * If the argument is a hash object containing an array of values, these values will be encoded
   * as duplicate search parameters in the url.
   *
   * @param {(string|Number|Array<string>|boolean)=} paramValue If `search` is a string or number, then `paramValue`
   * will override only a single search property.
   *
   * If `paramValue` is an array, it will override the property of the `search` component of
   * `$location` specified via the first argument.
   *
   * If `paramValue` is `null`, the property specified via the first argument will be deleted.
   *
   * If `paramValue` is `true`, the property specified via the first argument will be added with no
   * value nor trailing equal sign.
   *
   * @return {Object} If called with no arguments returns the parsed `search` object. If called with
   * one or more arguments returns `$location` object itself.
   */
  search: function(search, paramValue) {
    switch (arguments.length) {
      case 0:
        return this.$$search;
      case 1:
        if (isString(search) || isNumber(search)) {
          search = search.toString();
          this.$$search = parseKeyValue(search);
        } else if (isObject(search)) {
          search = copy(search, {});
          // remove object undefined or null properties
          forEach(search, function(value, key) {
            if (value == null) delete search[key];
          });

          this.$$search = search;
        } else {
          throw $locationMinErr('isrcharg',
              'The first argument of the `$location#search()` call must be a string or an object.');
        }
        break;
      default:
        if (isUndefined(paramValue) || paramValue === null) {
          delete this.$$search[search];
        } else {
          this.$$search[search] = paramValue;
        }
    }

    this.$$compose();
    return this;
  },

  /**
   * @ngdoc method
   * @name $location#hash
   *
   * @description
   * This method is getter / setter.
   *
   * Return hash fragment when called without any parameter.
   *
   * Change hash fragment when called with parameter and return `$location`.
   *
   *
   * ```js
   * // given url http://example.com/#/some/path?foo=bar&baz=xoxo#hashValue
   * var hash = $location.hash();
   * // => "hashValue"
   * ```
   *
   * @param {(string|number)=} hash New hash fragment
   * @return {string} hash
   */
  hash: locationGetterSetter('$$hash', function(hash) {
    return hash !== null ? hash.toString() : '';
  }),

  /**
   * @ngdoc method
   * @name $location#replace
   *
   * @description
   * If called, all changes to $location during current `$digest` will be replacing current history
   * record, instead of adding new one.
   */
  replace: function() {
    this.$$replace = true;
    return this;
  }
};

forEach([LocationHashbangInHtml5Url, LocationHashbangUrl, LocationHtml5Url], function(Location) {
  Location.prototype = Object.create(locationPrototype);

  /**
   * @ngdoc method
   * @name $location#state
   *
   * @description
   * This method is getter / setter.
   *
   * Return the history state object when called without any parameter.
   *
   * Change the history state object when called with one parameter and return `$location`.
   * The state object is later passed to `pushState` or `replaceState`.
   *
   * NOTE: This method is supported only in HTML5 mode and only in browsers supporting
   * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support
   * older browsers (like IE9 or Android < 4.0), don't use this method.
   *
   * @param {object=} state State object for pushState or replaceState
   * @return {object} state
   */
  Location.prototype.state = function(state) {
    if (!arguments.length)
      return this.$$state;

    if (Location !== LocationHtml5Url || !this.$$html5) {
      throw $locationMinErr('nostate', 'History API state support is available only ' +
        'in HTML5 mode and only in browsers supporting HTML5 History API');
    }
    // The user might modify `stateObject` after invoking `$location.state(stateObject)`
    // but we're changing the $$state reference to $browser.state() during the $digest
    // so the modification window is narrow.
    this.$$state = isUndefined(state) ? null : state;

    return this;
  };
});


function locationGetter(property) {
  return function() {
    return this[property];
  };
}


function locationGetterSetter(property, preprocess) {
  return function(value) {
    if (isUndefined(value))
      return this[property];

    this[property] = preprocess(value);
    this.$$compose();

    return this;
  };
}


/**
 * @ngdoc service
 * @name $location
 *
 * @requires $rootElement
 *
 * @description
 * The $location service parses the URL in the browser address bar (based on the
 * [window.location](https://developer.mozilla.org/en/window.location)) and makes the URL
 * available to your application. Changes to the URL in the address bar are reflected into
 * $location service and changes to $location are reflected into the browser address bar.
 *
 * **The $location service:**
 *
 * - Exposes the current URL in the browser address bar, so you can
 *   - Watch and observe the URL.
 *   - Change the URL.
 * - Synchronizes the URL with the browser when the user
 *   - Changes the address bar.
 *   - Clicks the back or forward button (or clicks a History link).
 *   - Clicks on a link.
 * - Represents the URL object as a set of methods (protocol, host, port, path, search, hash).
 *
 * For more information see {@link guide/$location Developer Guide: Using $location}
 */

/**
 * @ngdoc provider
 * @name $locationProvider
 * @description
 * Use the `$locationProvider` to configure how the application deep linking paths are stored.
 */
function $LocationProvider() {
  var hashPrefix = '',
      html5Mode = {
        enabled: false,
        requireBase: true,
        rewriteLinks: true
      };

  /**
   * @ngdoc method
   * @name $locationProvider#hashPrefix
   * @description
   * @param {string=} prefix Prefix for hash part (containing path and search)
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.hashPrefix = function(prefix) {
    if (isDefined(prefix)) {
      hashPrefix = prefix;
      return this;
    } else {
      return hashPrefix;
    }
  };

  /**
   * @ngdoc method
   * @name $locationProvider#html5Mode
   * @description
   * @param {(boolean|Object)=} mode If boolean, sets `html5Mode.enabled` to value.
   *   If object, sets `enabled`, `requireBase` and `rewriteLinks` to respective values. Supported
   *   properties:
   *   - **enabled** – `{boolean}` – (default: false) If true, will rely on `history.pushState` to
   *     change urls where supported. Will fall back to hash-prefixed paths in browsers that do not
   *     support `pushState`.
   *   - **requireBase** - `{boolean}` - (default: `true`) When html5Mode is enabled, specifies
   *     whether or not a <base> tag is required to be present. If `enabled` and `requireBase` are
   *     true, and a base tag is not present, an error will be thrown when `$location` is injected.
   *     See the {@link guide/$location $location guide for more information}
   *   - **rewriteLinks** - `{boolean}` - (default: `true`) When html5Mode is enabled,
   *     enables/disables url rewriting for relative links.
   *
   * @returns {Object} html5Mode object if used as getter or itself (chaining) if used as setter
   */
  this.html5Mode = function(mode) {
    if (isBoolean(mode)) {
      html5Mode.enabled = mode;
      return this;
    } else if (isObject(mode)) {

      if (isBoolean(mode.enabled)) {
        html5Mode.enabled = mode.enabled;
      }

      if (isBoolean(mode.requireBase)) {
        html5Mode.requireBase = mode.requireBase;
      }

      if (isBoolean(mode.rewriteLinks)) {
        html5Mode.rewriteLinks = mode.rewriteLinks;
      }

      return this;
    } else {
      return html5Mode;
    }
  };

  /**
   * @ngdoc event
   * @name $location#$locationChangeStart
   * @eventType broadcast on root scope
   * @description
   * Broadcasted before a URL will change.
   *
   * This change can be prevented by calling
   * `preventDefault` method of the event. See {@link ng.$rootScope.Scope#$on} for more
   * details about event object. Upon successful change
   * {@link ng.$location#$locationChangeSuccess $locationChangeSuccess} is fired.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  /**
   * @ngdoc event
   * @name $location#$locationChangeSuccess
   * @eventType broadcast on root scope
   * @description
   * Broadcasted after a URL was changed.
   *
   * The `newState` and `oldState` parameters may be defined only in HTML5 mode and when
   * the browser supports the HTML5 History API.
   *
   * @param {Object} angularEvent Synthetic event object.
   * @param {string} newUrl New URL
   * @param {string=} oldUrl URL that was before it was changed.
   * @param {string=} newState New history state object
   * @param {string=} oldState History state object that was before it was changed.
   */

  this.$get = ['$rootScope', '$browser', '$sniffer', '$rootElement', '$window',
      function($rootScope, $browser, $sniffer, $rootElement, $window) {
    var $location,
        LocationMode,
        baseHref = $browser.baseHref(), // if base[href] is undefined, it defaults to ''
        initialUrl = $browser.url(),
        appBase;

    if (html5Mode.enabled) {
      if (!baseHref && html5Mode.requireBase) {
        throw $locationMinErr('nobase',
          "$location in HTML5 mode requires a <base> tag to be present!");
      }
      appBase = serverBase(initialUrl) + (baseHref || '/');
      LocationMode = $sniffer.history ? LocationHtml5Url : LocationHashbangInHtml5Url;
    } else {
      appBase = stripHash(initialUrl);
      LocationMode = LocationHashbangUrl;
    }
    $location = new LocationMode(appBase, '#' + hashPrefix);
    $location.$$parseLinkUrl(initialUrl, initialUrl);

    $location.$$state = $browser.state();

    var IGNORE_URI_REGEXP = /^\s*(javascript|mailto):/i;

    function setBrowserUrlWithFallback(url, replace, state) {
      var oldUrl = $location.url();
      var oldState = $location.$$state;
      try {
        $browser.url(url, replace, state);

        // Make sure $location.state() returns referentially identical (not just deeply equal)
        // state object; this makes possible quick checking if the state changed in the digest
        // loop. Checking deep equality would be too expensive.
        $location.$$state = $browser.state();
      } catch (e) {
        // Restore old values if pushState fails
        $location.url(oldUrl);
        $location.$$state = oldState;

        throw e;
      }
    }

    $rootElement.on('click', function(event) {
      // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)
      // currently we open nice url link and redirect then

      if (!html5Mode.rewriteLinks || event.ctrlKey || event.metaKey || event.shiftKey || event.which == 2 || event.button == 2) return;

      var elm = jqLite(event.target);

      // traverse the DOM up to find first A tag
      while (nodeName_(elm[0]) !== 'a') {
        // ignore rewriting if no A tag (reached root element, or no parent - removed from document)
        if (elm[0] === $rootElement[0] || !(elm = elm.parent())[0]) return;
      }

      var absHref = elm.prop('href');
      // get the actual href attribute - see
      // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx
      var relHref = elm.attr('href') || elm.attr('xlink:href');

      if (isObject(absHref) && absHref.toString() === '[object SVGAnimatedString]') {
        // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during
        // an animation.
        absHref = urlResolve(absHref.animVal).href;
      }

      // Ignore when url is started with javascript: or mailto:
      if (IGNORE_URI_REGEXP.test(absHref)) return;

      if (absHref && !elm.attr('target') && !event.isDefaultPrevented()) {
        if ($location.$$parseLinkUrl(absHref, relHref)) {
          // We do a preventDefault for all urls that are part of the angular application,
          // in html5mode and also without, so that we are able to abort navigation without
          // getting double entries in the location history.
          event.preventDefault();
          // update location manually
          if ($location.absUrl() != $browser.url()) {
            $rootScope.$apply();
            // hack to work around FF6 bug 684208 when scenario runner clicks on links
            $window.angular['ff-684208-preventDefault'] = true;
          }
        }
      }
    });


    // rewrite hashbang url <> html5 url
    if (trimEmptyHash($location.absUrl()) != trimEmptyHash(initialUrl)) {
      $browser.url($location.absUrl(), true);
    }

    var initializing = true;

    // update $location when $browser url changes
    $browser.onUrlChange(function(newUrl, newState) {
      $rootScope.$evalAsync(function() {
        var oldUrl = $location.absUrl();
        var oldState = $location.$$state;
        var defaultPrevented;

        $location.$$parse(newUrl);
        $location.$$state = newState;

        defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
            newState, oldState).defaultPrevented;

        // if the location was changed by a `$locationChangeStart` handler then stop
        // processing this location change
        if ($location.absUrl() !== newUrl) return;

        if (defaultPrevented) {
          $location.$$parse(oldUrl);
          $location.$$state = oldState;
          setBrowserUrlWithFallback(oldUrl, false, oldState);
        } else {
          initializing = false;
          afterLocationChange(oldUrl, oldState);
        }
      });
      if (!$rootScope.$$phase) $rootScope.$digest();
    });

    // update browser
    $rootScope.$watch(function $locationWatch() {
      var oldUrl = trimEmptyHash($browser.url());
      var newUrl = trimEmptyHash($location.absUrl());
      var oldState = $browser.state();
      var currentReplace = $location.$$replace;
      var urlOrStateChanged = oldUrl !== newUrl ||
        ($location.$$html5 && $sniffer.history && oldState !== $location.$$state);

      if (initializing || urlOrStateChanged) {
        initializing = false;

        $rootScope.$evalAsync(function() {
          var newUrl = $location.absUrl();
          var defaultPrevented = $rootScope.$broadcast('$locationChangeStart', newUrl, oldUrl,
              $location.$$state, oldState).defaultPrevented;

          // if the location was changed by a `$locationChangeStart` handler then stop
          // processing this location change
          if ($location.absUrl() !== newUrl) return;

          if (defaultPrevented) {
            $location.$$parse(oldUrl);
            $location.$$state = oldState;
          } else {
            if (urlOrStateChanged) {
              setBrowserUrlWithFallback(newUrl, currentReplace,
                                        oldState === $location.$$state ? null : $location.$$state);
            }
            afterLocationChange(oldUrl, oldState);
          }
        });
      }

      $location.$$replace = false;

      // we don't need to return anything because $evalAsync will make the digest loop dirty when
      // there is a change
    });

    return $location;

    function afterLocationChange(oldUrl, oldState) {
      $rootScope.$broadcast('$locationChangeSuccess', $location.absUrl(), oldUrl,
        $location.$$state, oldState);
    }
}];
}

/**
 * @ngdoc service
 * @name $log
 * @requires $window
 *
 * @description
 * Simple service for logging. Default implementation safely writes the message
 * into the browser's console (if present).
 *
 * The main purpose of this service is to simplify debugging and troubleshooting.
 *
 * The default is to log `debug` messages. You can use
 * {@link ng.$logProvider ng.$logProvider#debugEnabled} to change this.
 *
 * @example
   <example module="logExample">
     <file name="script.js">
       angular.module('logExample', [])
         .controller('LogController', ['$scope', '$log', function($scope, $log) {
           $scope.$log = $log;
           $scope.message = 'Hello World!';
         }]);
     </file>
     <file name="index.html">
       <div ng-controller="LogController">
         <p>Reload this page with open console, enter text and hit the log button...</p>
         Message:
         <input type="text" ng-model="message"/>
         <button ng-click="$log.log(message)">log</button>
         <button ng-click="$log.warn(message)">warn</button>
         <button ng-click="$log.info(message)">info</button>
         <button ng-click="$log.error(message)">error</button>
         <button ng-click="$log.debug(message)">debug</button>
       </div>
     </file>
   </example>
 */

/**
 * @ngdoc provider
 * @name $logProvider
 * @description
 * Use the `$logProvider` to configure how the application logs messages
 */
function $LogProvider() {
  var debug = true,
      self = this;

  /**
   * @ngdoc method
   * @name $logProvider#debugEnabled
   * @description
   * @param {boolean=} flag enable or disable debug level messages
   * @returns {*} current value if used as getter or itself (chaining) if used as setter
   */
  this.debugEnabled = function(flag) {
    if (isDefined(flag)) {
      debug = flag;
    return this;
    } else {
      return debug;
    }
  };

  this.$get = ['$window', function($window) {
    return {
      /**
       * @ngdoc method
       * @name $log#log
       *
       * @description
       * Write a log message
       */
      log: consoleLog('log'),

      /**
       * @ngdoc method
       * @name $log#info
       *
       * @description
       * Write an information message
       */
      info: consoleLog('info'),

      /**
       * @ngdoc method
       * @name $log#warn
       *
       * @description
       * Write a warning message
       */
      warn: consoleLog('warn'),

      /**
       * @ngdoc method
       * @name $log#error
       *
       * @description
       * Write an error message
       */
      error: consoleLog('error'),

      /**
       * @ngdoc method
       * @name $log#debug
       *
       * @description
       * Write a debug message
       */
      debug: (function() {
        var fn = consoleLog('debug');

        return function() {
          if (debug) {
            fn.apply(self, arguments);
          }
        };
      }())
    };

    function formatError(arg) {
      if (arg instanceof Error) {
        if (arg.stack) {
          arg = (arg.message && arg.stack.indexOf(arg.message) === -1)
              ? 'Error: ' + arg.message + '\n' + arg.stack
              : arg.stack;
        } else if (arg.sourceURL) {
          arg = arg.message + '\n' + arg.sourceURL + ':' + arg.line;
        }
      }
      return arg;
    }

    function consoleLog(type) {
      var console = $window.console || {},
          logFn = console[type] || console.log || noop,
          hasApply = false;

      // Note: reading logFn.apply throws an error in IE11 in IE8 document mode.
      // The reason behind this is that console.log has type "object" in IE8...
      try {
        hasApply = !!logFn.apply;
      } catch (e) {}

      if (hasApply) {
        return function() {
          var args = [];
          forEach(arguments, function(arg) {
            args.push(formatError(arg));
          });
          return logFn.apply(console, args);
        };
      }

      // we are IE which either doesn't have window.console => this is noop and we do nothing,
      // or we are IE where console.log doesn't have apply so we log at least first 2 args
      return function(arg1, arg2) {
        logFn(arg1, arg2 == null ? '' : arg2);
      };
    }
  }];
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $parseMinErr = minErr('$parse');

// Sandboxing Angular Expressions
// ------------------------------
// Angular expressions are generally considered safe because these expressions only have direct
// access to `$scope` and locals. However, one can obtain the ability to execute arbitrary JS code by
// obtaining a reference to native JS functions such as the Function constructor.
//
// As an example, consider the following Angular expression:
//
//   {}.toString.constructor('alert("evil JS code")')
//
// This sandboxing technique is not perfect and doesn't aim to be. The goal is to prevent exploits
// against the expression language, but not to prevent exploits that were enabled by exposing
// sensitive JavaScript or browser APIs on Scope. Exposing such objects on a Scope is never a good
// practice and therefore we are not even trying to protect against interaction with an object
// explicitly exposed in this way.
//
// In general, it is not possible to access a Window object from an angular expression unless a
// window or some DOM object that has a reference to window is published onto a Scope.
// Similarly we prevent invocations of function known to be dangerous, as well as assignments to
// native objects.
//
// See https://docs.angularjs.org/guide/security


function ensureSafeMemberName(name, fullExpression) {
  if (name === "__defineGetter__" || name === "__defineSetter__"
      || name === "__lookupGetter__" || name === "__lookupSetter__"
      || name === "__proto__") {
    throw $parseMinErr('isecfld',
        'Attempting to access a disallowed field in Angular expressions! '
        + 'Expression: {0}', fullExpression);
  }
  return name;
}

function ensureSafeObject(obj, fullExpression) {
  // nifty check if obj is Function that is fast and works across iframes and other contexts
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
          'Referencing Function in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isWindow(obj)
        obj.window === obj) {
      throw $parseMinErr('isecwindow',
          'Referencing the Window in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// isElement(obj)
        obj.children && (obj.nodeName || (obj.prop && obj.attr && obj.find))) {
      throw $parseMinErr('isecdom',
          'Referencing DOM nodes in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    } else if (// block Object so that we can't get hold of dangerous Object.* methods
        obj === Object) {
      throw $parseMinErr('isecobj',
          'Referencing Object in Angular expressions is disallowed! Expression: {0}',
          fullExpression);
    }
  }
  return obj;
}

var CALL = Function.prototype.call;
var APPLY = Function.prototype.apply;
var BIND = Function.prototype.bind;

function ensureSafeFunction(obj, fullExpression) {
  if (obj) {
    if (obj.constructor === obj) {
      throw $parseMinErr('isecfn',
        'Referencing Function in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    } else if (obj === CALL || obj === APPLY || obj === BIND) {
      throw $parseMinErr('isecff',
        'Referencing call, apply or bind in Angular expressions is disallowed! Expression: {0}',
        fullExpression);
    }
  }
}

//Keyword constants
var CONSTANTS = createMap();
forEach({
  'null': function() { return null; },
  'true': function() { return true; },
  'false': function() { return false; },
  'undefined': function() {}
}, function(constantGetter, name) {
  constantGetter.constant = constantGetter.literal = constantGetter.sharedGetter = true;
  CONSTANTS[name] = constantGetter;
});

//Not quite a constant, but can be lex/parsed the same
CONSTANTS['this'] = function(self) { return self; };
CONSTANTS['this'].sharedGetter = true;


//Operators - will be wrapped by binaryFn/unaryFn/assignment/filter
var OPERATORS = extend(createMap(), {
    '+':function(self, locals, a, b) {
      a=a(self, locals); b=b(self, locals);
      if (isDefined(a)) {
        if (isDefined(b)) {
          return a + b;
        }
        return a;
      }
      return isDefined(b) ? b : undefined;},
    '-':function(self, locals, a, b) {
          a=a(self, locals); b=b(self, locals);
          return (isDefined(a) ? a : 0) - (isDefined(b) ? b : 0);
        },
    '*':function(self, locals, a, b) {return a(self, locals) * b(self, locals);},
    '/':function(self, locals, a, b) {return a(self, locals) / b(self, locals);},
    '%':function(self, locals, a, b) {return a(self, locals) % b(self, locals);},
    '===':function(self, locals, a, b) {return a(self, locals) === b(self, locals);},
    '!==':function(self, locals, a, b) {return a(self, locals) !== b(self, locals);},
    '==':function(self, locals, a, b) {return a(self, locals) == b(self, locals);},
    '!=':function(self, locals, a, b) {return a(self, locals) != b(self, locals);},
    '<':function(self, locals, a, b) {return a(self, locals) < b(self, locals);},
    '>':function(self, locals, a, b) {return a(self, locals) > b(self, locals);},
    '<=':function(self, locals, a, b) {return a(self, locals) <= b(self, locals);},
    '>=':function(self, locals, a, b) {return a(self, locals) >= b(self, locals);},
    '&&':function(self, locals, a, b) {return a(self, locals) && b(self, locals);},
    '||':function(self, locals, a, b) {return a(self, locals) || b(self, locals);},
    '!':function(self, locals, a) {return !a(self, locals);},

    //Tokenized as operators but parsed as assignment/filters
    '=':true,
    '|':true
});
var ESCAPE = {"n":"\n", "f":"\f", "r":"\r", "t":"\t", "v":"\v", "'":"'", '"':'"'};


/////////////////////////////////////////


/**
 * @constructor
 */
var Lexer = function(options) {
  this.options = options;
};

Lexer.prototype = {
  constructor: Lexer,

  lex: function(text) {
    this.text = text;
    this.index = 0;
    this.tokens = [];

    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      if (ch === '"' || ch === "'") {
        this.readString(ch);
      } else if (this.isNumber(ch) || ch === '.' && this.isNumber(this.peek())) {
        this.readNumber();
      } else if (this.isIdent(ch)) {
        this.readIdent();
      } else if (this.is(ch, '(){}[].,;:?')) {
        this.tokens.push({index: this.index, text: ch});
        this.index++;
      } else if (this.isWhitespace(ch)) {
        this.index++;
      } else {
        var ch2 = ch + this.peek();
        var ch3 = ch2 + this.peek(2);
        var op1 = OPERATORS[ch];
        var op2 = OPERATORS[ch2];
        var op3 = OPERATORS[ch3];
        if (op1 || op2 || op3) {
          var token = op3 ? ch3 : (op2 ? ch2 : ch);
          this.tokens.push({index: this.index, text: token, operator: true});
          this.index += token.length;
        } else {
          this.throwError('Unexpected next character ', this.index, this.index + 1);
        }
      }
    }
    return this.tokens;
  },

  is: function(ch, chars) {
    return chars.indexOf(ch) !== -1;
  },

  peek: function(i) {
    var num = i || 1;
    return (this.index + num < this.text.length) ? this.text.charAt(this.index + num) : false;
  },

  isNumber: function(ch) {
    return ('0' <= ch && ch <= '9') && typeof ch === "string";
  },

  isWhitespace: function(ch) {
    // IE treats non-breaking space as \u00A0
    return (ch === ' ' || ch === '\r' || ch === '\t' ||
            ch === '\n' || ch === '\v' || ch === '\u00A0');
  },

  isIdent: function(ch) {
    return ('a' <= ch && ch <= 'z' ||
            'A' <= ch && ch <= 'Z' ||
            '_' === ch || ch === '$');
  },

  isExpOperator: function(ch) {
    return (ch === '-' || ch === '+' || this.isNumber(ch));
  },

  throwError: function(error, start, end) {
    end = end || this.index;
    var colStr = (isDefined(start)
            ? 's ' + start +  '-' + this.index + ' [' + this.text.substring(start, end) + ']'
            : ' ' + end);
    throw $parseMinErr('lexerr', 'Lexer Error: {0} at column{1} in expression [{2}].',
        error, colStr, this.text);
  },

  readNumber: function() {
    var number = '';
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = lowercase(this.text.charAt(this.index));
      if (ch == '.' || this.isNumber(ch)) {
        number += ch;
      } else {
        var peekCh = this.peek();
        if (ch == 'e' && this.isExpOperator(peekCh)) {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            peekCh && this.isNumber(peekCh) &&
            number.charAt(number.length - 1) == 'e') {
          number += ch;
        } else if (this.isExpOperator(ch) &&
            (!peekCh || !this.isNumber(peekCh)) &&
            number.charAt(number.length - 1) == 'e') {
          this.throwError('Invalid exponent');
        } else {
          break;
        }
      }
      this.index++;
    }
    this.tokens.push({
      index: start,
      text: number,
      constant: true,
      value: Number(number)
    });
  },

  readIdent: function() {
    var start = this.index;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      if (!(this.isIdent(ch) || this.isNumber(ch))) {
        break;
      }
      this.index++;
    }
    this.tokens.push({
      index: start,
      text: this.text.slice(start, this.index),
      identifier: true
    });
  },

  readString: function(quote) {
    var start = this.index;
    this.index++;
    var string = '';
    var rawString = quote;
    var escape = false;
    while (this.index < this.text.length) {
      var ch = this.text.charAt(this.index);
      rawString += ch;
      if (escape) {
        if (ch === 'u') {
          var hex = this.text.substring(this.index + 1, this.index + 5);
          if (!hex.match(/[\da-f]{4}/i))
            this.throwError('Invalid unicode escape [\\u' + hex + ']');
          this.index += 4;
          string += String.fromCharCode(parseInt(hex, 16));
        } else {
          var rep = ESCAPE[ch];
          string = string + (rep || ch);
        }
        escape = false;
      } else if (ch === '\\') {
        escape = true;
      } else if (ch === quote) {
        this.index++;
        this.tokens.push({
          index: start,
          text: rawString,
          constant: true,
          value: string
        });
        return;
      } else {
        string += ch;
      }
      this.index++;
    }
    this.throwError('Unterminated quote', start);
  }
};


function isConstant(exp) {
  return exp.constant;
}

/**
 * @constructor
 */
var Parser = function(lexer, $filter, options) {
  this.lexer = lexer;
  this.$filter = $filter;
  this.options = options;
};

Parser.ZERO = extend(function() {
  return 0;
}, {
  sharedGetter: true,
  constant: true
});

Parser.prototype = {
  constructor: Parser,

  parse: function(text) {
    this.text = text;
    this.tokens = this.lexer.lex(text);

    var value = this.statements();

    if (this.tokens.length !== 0) {
      this.throwError('is an unexpected token', this.tokens[0]);
    }

    value.literal = !!value.literal;
    value.constant = !!value.constant;

    return value;
  },

  primary: function() {
    var primary;
    if (this.expect('(')) {
      primary = this.filterChain();
      this.consume(')');
    } else if (this.expect('[')) {
      primary = this.arrayDeclaration();
    } else if (this.expect('{')) {
      primary = this.object();
    } else if (this.peek().identifier && this.peek().text in CONSTANTS) {
      primary = CONSTANTS[this.consume().text];
    } else if (this.peek().identifier) {
      primary = this.identifier();
    } else if (this.peek().constant) {
      primary = this.constant();
    } else {
      this.throwError('not a primary expression', this.peek());
    }

    var next, context;
    while ((next = this.expect('(', '[', '.'))) {
      if (next.text === '(') {
        primary = this.functionCall(primary, context);
        context = null;
      } else if (next.text === '[') {
        context = primary;
        primary = this.objectIndex(primary);
      } else if (next.text === '.') {
        context = primary;
        primary = this.fieldAccess(primary);
      } else {
        this.throwError('IMPOSSIBLE');
      }
    }
    return primary;
  },

  throwError: function(msg, token) {
    throw $parseMinErr('syntax',
        'Syntax Error: Token \'{0}\' {1} at column {2} of the expression [{3}] starting at [{4}].',
          token.text, msg, (token.index + 1), this.text, this.text.substring(token.index));
  },

  peekToken: function() {
    if (this.tokens.length === 0)
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    return this.tokens[0];
  },

  peek: function(e1, e2, e3, e4) {
    return this.peekAhead(0, e1, e2, e3, e4);
  },
  peekAhead: function(i, e1, e2, e3, e4) {
    if (this.tokens.length > i) {
      var token = this.tokens[i];
      var t = token.text;
      if (t === e1 || t === e2 || t === e3 || t === e4 ||
          (!e1 && !e2 && !e3 && !e4)) {
        return token;
      }
    }
    return false;
  },

  expect: function(e1, e2, e3, e4) {
    var token = this.peek(e1, e2, e3, e4);
    if (token) {
      this.tokens.shift();
      return token;
    }
    return false;
  },

  consume: function(e1) {
    if (this.tokens.length === 0) {
      throw $parseMinErr('ueoe', 'Unexpected end of expression: {0}', this.text);
    }

    var token = this.expect(e1);
    if (!token) {
      this.throwError('is unexpected, expecting [' + e1 + ']', this.peek());
    }
    return token;
  },

  unaryFn: function(op, right) {
    var fn = OPERATORS[op];
    return extend(function $parseUnaryFn(self, locals) {
      return fn(self, locals, right);
    }, {
      constant:right.constant,
      inputs: [right]
    });
  },

  binaryFn: function(left, op, right, isBranching) {
    var fn = OPERATORS[op];
    return extend(function $parseBinaryFn(self, locals) {
      return fn(self, locals, left, right);
    }, {
      constant: left.constant && right.constant,
      inputs: !isBranching && [left, right]
    });
  },

  identifier: function() {
    var id = this.consume().text;

    //Continue reading each `.identifier` unless it is a method invocation
    while (this.peek('.') && this.peekAhead(1).identifier && !this.peekAhead(2, '(')) {
      id += this.consume().text + this.consume().text;
    }

    return getterFn(id, this.options, this.text);
  },

  constant: function() {
    var value = this.consume().value;

    return extend(function $parseConstant() {
      return value;
    }, {
      constant: true,
      literal: true
    });
  },

  statements: function() {
    var statements = [];
    while (true) {
      if (this.tokens.length > 0 && !this.peek('}', ')', ';', ']'))
        statements.push(this.filterChain());
      if (!this.expect(';')) {
        // optimize for the common case where there is only one statement.
        // TODO(size): maybe we should not support multiple statements?
        return (statements.length === 1)
            ? statements[0]
            : function $parseStatements(self, locals) {
                var value;
                for (var i = 0, ii = statements.length; i < ii; i++) {
                  value = statements[i](self, locals);
                }
                return value;
              };
      }
    }
  },

  filterChain: function() {
    var left = this.expression();
    var token;
    while ((token = this.expect('|'))) {
      left = this.filter(left);
    }
    return left;
  },

  filter: function(inputFn) {
    var fn = this.$filter(this.consume().text);
    var argsFn;
    var args;

    if (this.peek(':')) {
      argsFn = [];
      args = []; // we can safely reuse the array
      while (this.expect(':')) {
        argsFn.push(this.expression());
      }
    }

    var inputs = [inputFn].concat(argsFn || []);

    return extend(function $parseFilter(self, locals) {
      var input = inputFn(self, locals);
      if (args) {
        args[0] = input;

        var i = argsFn.length;
        while (i--) {
          args[i + 1] = argsFn[i](self, locals);
        }

        return fn.apply(undefined, args);
      }

      return fn(input);
    }, {
      constant: !fn.$stateful && inputs.every(isConstant),
      inputs: !fn.$stateful && inputs
    });
  },

  expression: function() {
    return this.assignment();
  },

  assignment: function() {
    var left = this.ternary();
    var right;
    var token;
    if ((token = this.expect('='))) {
      if (!left.assign) {
        this.throwError('implies assignment but [' +
            this.text.substring(0, token.index) + '] can not be assigned to', token);
      }
      right = this.ternary();
      return extend(function $parseAssignment(scope, locals) {
        return left.assign(scope, right(scope, locals), locals);
      }, {
        inputs: [left, right]
      });
    }
    return left;
  },

  ternary: function() {
    var left = this.logicalOR();
    var middle;
    var token;
    if ((token = this.expect('?'))) {
      middle = this.assignment();
      if (this.consume(':')) {
        var right = this.assignment();

        return extend(function $parseTernary(self, locals) {
          return left(self, locals) ? middle(self, locals) : right(self, locals);
        }, {
          constant: left.constant && middle.constant && right.constant
        });
      }
    }

    return left;
  },

  logicalOR: function() {
    var left = this.logicalAND();
    var token;
    while ((token = this.expect('||'))) {
      left = this.binaryFn(left, token.text, this.logicalAND(), true);
    }
    return left;
  },

  logicalAND: function() {
    var left = this.equality();
    var token;
    while ((token = this.expect('&&'))) {
      left = this.binaryFn(left, token.text, this.equality(), true);
    }
    return left;
  },

  equality: function() {
    var left = this.relational();
    var token;
    while ((token = this.expect('==','!=','===','!=='))) {
      left = this.binaryFn(left, token.text, this.relational());
    }
    return left;
  },

  relational: function() {
    var left = this.additive();
    var token;
    while ((token = this.expect('<', '>', '<=', '>='))) {
      left = this.binaryFn(left, token.text, this.additive());
    }
    return left;
  },

  additive: function() {
    var left = this.multiplicative();
    var token;
    while ((token = this.expect('+','-'))) {
      left = this.binaryFn(left, token.text, this.multiplicative());
    }
    return left;
  },

  multiplicative: function() {
    var left = this.unary();
    var token;
    while ((token = this.expect('*','/','%'))) {
      left = this.binaryFn(left, token.text, this.unary());
    }
    return left;
  },

  unary: function() {
    var token;
    if (this.expect('+')) {
      return this.primary();
    } else if ((token = this.expect('-'))) {
      return this.binaryFn(Parser.ZERO, token.text, this.unary());
    } else if ((token = this.expect('!'))) {
      return this.unaryFn(token.text, this.unary());
    } else {
      return this.primary();
    }
  },

  fieldAccess: function(object) {
    var getter = this.identifier();

    return extend(function $parseFieldAccess(scope, locals, self) {
      var o = self || object(scope, locals);
      return (o == null) ? undefined : getter(o);
    }, {
      assign: function(scope, value, locals) {
        var o = object(scope, locals);
        if (!o) object.assign(scope, o = {}, locals);
        return getter.assign(o, value);
      }
    });
  },

  objectIndex: function(obj) {
    var expression = this.text;

    var indexFn = this.expression();
    this.consume(']');

    return extend(function $parseObjectIndex(self, locals) {
      var o = obj(self, locals),
          i = indexFn(self, locals),
          v;

      ensureSafeMemberName(i, expression);
      if (!o) return undefined;
      v = ensureSafeObject(o[i], expression);
      return v;
    }, {
      assign: function(self, value, locals) {
        var key = ensureSafeMemberName(indexFn(self, locals), expression);
        // prevent overwriting of Function.constructor which would break ensureSafeObject check
        var o = ensureSafeObject(obj(self, locals), expression);
        if (!o) obj.assign(self, o = {}, locals);
        return o[key] = value;
      }
    });
  },

  functionCall: function(fnGetter, contextGetter) {
    var argsFn = [];
    if (this.peekToken().text !== ')') {
      do {
        argsFn.push(this.expression());
      } while (this.expect(','));
    }
    this.consume(')');

    var expressionText = this.text;
    // we can safely reuse the array across invocations
    var args = argsFn.length ? [] : null;

    return function $parseFunctionCall(scope, locals) {
      var context = contextGetter ? contextGetter(scope, locals) : isDefined(contextGetter) ? undefined : scope;
      var fn = fnGetter(scope, locals, context) || noop;

      if (args) {
        var i = argsFn.length;
        while (i--) {
          args[i] = ensureSafeObject(argsFn[i](scope, locals), expressionText);
        }
      }

      ensureSafeObject(context, expressionText);
      ensureSafeFunction(fn, expressionText);

      // IE doesn't have apply for some native functions
      var v = fn.apply
            ? fn.apply(context, args)
            : fn(args[0], args[1], args[2], args[3], args[4]);

      if (args) {
        // Free-up the memory (arguments of the last function call).
        args.length = 0;
      }

      return ensureSafeObject(v, expressionText);
      };
  },

  // This is used with json array declaration
  arrayDeclaration: function() {
    var elementFns = [];
    if (this.peekToken().text !== ']') {
      do {
        if (this.peek(']')) {
          // Support trailing commas per ES5.1.
          break;
        }
        elementFns.push(this.expression());
      } while (this.expect(','));
    }
    this.consume(']');

    return extend(function $parseArrayLiteral(self, locals) {
      var array = [];
      for (var i = 0, ii = elementFns.length; i < ii; i++) {
        array.push(elementFns[i](self, locals));
      }
      return array;
    }, {
      literal: true,
      constant: elementFns.every(isConstant),
      inputs: elementFns
    });
  },

  object: function() {
    var keys = [], valueFns = [];
    if (this.peekToken().text !== '}') {
      do {
        if (this.peek('}')) {
          // Support trailing commas per ES5.1.
          break;
        }
        var token = this.consume();
        if (token.constant) {
          keys.push(token.value);
        } else if (token.identifier) {
          keys.push(token.text);
        } else {
          this.throwError("invalid key", token);
        }
        this.consume(':');
        valueFns.push(this.expression());
      } while (this.expect(','));
    }
    this.consume('}');

    return extend(function $parseObjectLiteral(self, locals) {
      var object = {};
      for (var i = 0, ii = valueFns.length; i < ii; i++) {
        object[keys[i]] = valueFns[i](self, locals);
      }
      return object;
    }, {
      literal: true,
      constant: valueFns.every(isConstant),
      inputs: valueFns
    });
  }
};


//////////////////////////////////////////////////
// Parser helper functions
//////////////////////////////////////////////////

function setter(obj, locals, path, setValue, fullExp) {
  ensureSafeObject(obj, fullExp);
  ensureSafeObject(locals, fullExp);

  var element = path.split('.'), key;
  for (var i = 0; element.length > 1; i++) {
    key = ensureSafeMemberName(element.shift(), fullExp);
    var propertyObj = (i === 0 && locals && locals[key]) || obj[key];
    if (!propertyObj) {
      propertyObj = {};
      obj[key] = propertyObj;
    }
    obj = ensureSafeObject(propertyObj, fullExp);
  }
  key = ensureSafeMemberName(element.shift(), fullExp);
  ensureSafeObject(obj[key], fullExp);
  obj[key] = setValue;
  return setValue;
}

var getterFnCacheDefault = createMap();
var getterFnCacheExpensive = createMap();

function isPossiblyDangerousMemberName(name) {
  return name == 'constructor';
}

/**
 * Implementation of the "Black Hole" variant from:
 * - http://jsperf.com/angularjs-parse-getter/4
 * - http://jsperf.com/path-evaluation-simplified/7
 */
function cspSafeGetterFn(key0, key1, key2, key3, key4, fullExp, expensiveChecks) {
  ensureSafeMemberName(key0, fullExp);
  ensureSafeMemberName(key1, fullExp);
  ensureSafeMemberName(key2, fullExp);
  ensureSafeMemberName(key3, fullExp);
  ensureSafeMemberName(key4, fullExp);
  var eso = function(o) {
    return ensureSafeObject(o, fullExp);
  };
  var eso0 = (expensiveChecks || isPossiblyDangerousMemberName(key0)) ? eso : identity;
  var eso1 = (expensiveChecks || isPossiblyDangerousMemberName(key1)) ? eso : identity;
  var eso2 = (expensiveChecks || isPossiblyDangerousMemberName(key2)) ? eso : identity;
  var eso3 = (expensiveChecks || isPossiblyDangerousMemberName(key3)) ? eso : identity;
  var eso4 = (expensiveChecks || isPossiblyDangerousMemberName(key4)) ? eso : identity;

  return function cspSafeGetter(scope, locals) {
    var pathVal = (locals && locals.hasOwnProperty(key0)) ? locals : scope;

    if (pathVal == null) return pathVal;
    pathVal = eso0(pathVal[key0]);

    if (!key1) return pathVal;
    if (pathVal == null) return undefined;
    pathVal = eso1(pathVal[key1]);

    if (!key2) return pathVal;
    if (pathVal == null) return undefined;
    pathVal = eso2(pathVal[key2]);

    if (!key3) return pathVal;
    if (pathVal == null) return undefined;
    pathVal = eso3(pathVal[key3]);

    if (!key4) return pathVal;
    if (pathVal == null) return undefined;
    pathVal = eso4(pathVal[key4]);

    return pathVal;
  };
}

function getterFnWithEnsureSafeObject(fn, fullExpression) {
  return function(s, l) {
    return fn(s, l, ensureSafeObject, fullExpression);
  };
}

function getterFn(path, options, fullExp) {
  var expensiveChecks = options.expensiveChecks;
  var getterFnCache = (expensiveChecks ? getterFnCacheExpensive : getterFnCacheDefault);
  var fn = getterFnCache[path];
  if (fn) return fn;


  var pathKeys = path.split('.'),
      pathKeysLength = pathKeys.length;

  // http://jsperf.com/angularjs-parse-getter/6
  if (options.csp) {
    if (pathKeysLength < 6) {
      fn = cspSafeGetterFn(pathKeys[0], pathKeys[1], pathKeys[2], pathKeys[3], pathKeys[4], fullExp, expensiveChecks);
    } else {
      fn = function cspSafeGetter(scope, locals) {
        var i = 0, val;
        do {
          val = cspSafeGetterFn(pathKeys[i++], pathKeys[i++], pathKeys[i++], pathKeys[i++],
                                pathKeys[i++], fullExp, expensiveChecks)(scope, locals);

          locals = undefined; // clear after first iteration
          scope = val;
        } while (i < pathKeysLength);
        return val;
      };
    }
  } else {
    var code = '';
    if (expensiveChecks) {
      code += 's = eso(s, fe);\nl = eso(l, fe);\n';
    }
    var needsEnsureSafeObject = expensiveChecks;
    forEach(pathKeys, function(key, index) {
      ensureSafeMemberName(key, fullExp);
      var lookupJs = (index
                      // we simply dereference 's' on any .dot notation
                      ? 's'
                      // but if we are first then we check locals first, and if so read it first
                      : '((l&&l.hasOwnProperty("' + key + '"))?l:s)') + '.' + key;
      if (expensiveChecks || isPossiblyDangerousMemberName(key)) {
        lookupJs = 'eso(' + lookupJs + ', fe)';
        needsEnsureSafeObject = true;
      }
      code += 'if(s == null) return undefined;\n' +
              's=' + lookupJs + ';\n';
    });
    code += 'return s;';

    /* jshint -W054 */
    var evaledFnGetter = new Function('s', 'l', 'eso', 'fe', code); // s=scope, l=locals, eso=ensureSafeObject
    /* jshint +W054 */
    evaledFnGetter.toString = valueFn(code);
    if (needsEnsureSafeObject) {
      evaledFnGetter = getterFnWithEnsureSafeObject(evaledFnGetter, fullExp);
    }
    fn = evaledFnGetter;
  }

  fn.sharedGetter = true;
  fn.assign = function(self, value, locals) {
    return setter(self, locals, path, value, path);
  };
  getterFnCache[path] = fn;
  return fn;
}

var objectValueOf = Object.prototype.valueOf;

function getValueOf(value) {
  return isFunction(value.valueOf) ? value.valueOf() : objectValueOf.call(value);
}

///////////////////////////////////

/**
 * @ngdoc service
 * @name $parse
 * @kind function
 *
 * @description
 *
 * Converts Angular {@link guide/expression expression} into a function.
 *
 * ```js
 *   var getter = $parse('user.name');
 *   var setter = getter.assign;
 *   var context = {user:{name:'angular'}};
 *   var locals = {user:{name:'local'}};
 *
 *   expect(getter(context)).toEqual('angular');
 *   setter(context, 'newValue');
 *   expect(context.user.name).toEqual('newValue');
 *   expect(getter(context, locals)).toEqual('local');
 * ```
 *
 *
 * @param {string} expression String expression to compile.
 * @returns {function(context, locals)} a function which represents the compiled expression:
 *
 *    * `context` – `{object}` – an object against which any expressions embedded in the strings
 *      are evaluated against (typically a scope object).
 *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
 *      `context`.
 *
 *    The returned function also has the following properties:
 *      * `literal` – `{boolean}` – whether the expression's top-level node is a JavaScript
 *        literal.
 *      * `constant` – `{boolean}` – whether the expression is made entirely of JavaScript
 *        constant literals.
 *      * `assign` – `{?function(context, value)}` – if the expression is assignable, this will be
 *        set to a function to change its value on the given context.
 *
 */


/**
 * @ngdoc provider
 * @name $parseProvider
 *
 * @description
 * `$parseProvider` can be used for configuring the default behavior of the {@link ng.$parse $parse}
 *  service.
 */
function $ParseProvider() {
  var cacheDefault = createMap();
  var cacheExpensive = createMap();



  this.$get = ['$filter', '$sniffer', function($filter, $sniffer) {
    var $parseOptions = {
          csp: $sniffer.csp,
          expensiveChecks: false
        },
        $parseOptionsExpensive = {
          csp: $sniffer.csp,
          expensiveChecks: true
        };

    function wrapSharedExpression(exp) {
      var wrapped = exp;

      if (exp.sharedGetter) {
        wrapped = function $parseWrapper(self, locals) {
          return exp(self, locals);
        };
        wrapped.literal = exp.literal;
        wrapped.constant = exp.constant;
        wrapped.assign = exp.assign;
      }

      return wrapped;
    }

    return function $parse(exp, interceptorFn, expensiveChecks) {
      var parsedExpression, oneTime, cacheKey;

      switch (typeof exp) {
        case 'string':
          cacheKey = exp = exp.trim();

          var cache = (expensiveChecks ? cacheExpensive : cacheDefault);
          parsedExpression = cache[cacheKey];

          if (!parsedExpression) {
            if (exp.charAt(0) === ':' && exp.charAt(1) === ':') {
              oneTime = true;
              exp = exp.substring(2);
            }

            var parseOptions = expensiveChecks ? $parseOptionsExpensive : $parseOptions;
            var lexer = new Lexer(parseOptions);
            var parser = new Parser(lexer, $filter, parseOptions);
            parsedExpression = parser.parse(exp);

            if (parsedExpression.constant) {
              parsedExpression.$$watchDelegate = constantWatchDelegate;
            } else if (oneTime) {
              //oneTime is not part of the exp passed to the Parser so we may have to
              //wrap the parsedExpression before adding a $$watchDelegate
              parsedExpression = wrapSharedExpression(parsedExpression);
              parsedExpression.$$watchDelegate = parsedExpression.literal ?
                oneTimeLiteralWatchDelegate : oneTimeWatchDelegate;
            } else if (parsedExpression.inputs) {
              parsedExpression.$$watchDelegate = inputsWatchDelegate;
            }

            cache[cacheKey] = parsedExpression;
          }
          return addInterceptor(parsedExpression, interceptorFn);

        case 'function':
          return addInterceptor(exp, interceptorFn);

        default:
          return addInterceptor(noop, interceptorFn);
      }
    };

    function collectExpressionInputs(inputs, list) {
      for (var i = 0, ii = inputs.length; i < ii; i++) {
        var input = inputs[i];
        if (!input.constant) {
          if (input.inputs) {
            collectExpressionInputs(input.inputs, list);
          } else if (list.indexOf(input) === -1) { // TODO(perf) can we do better?
            list.push(input);
          }
        }
      }

      return list;
    }

    function expressionInputDirtyCheck(newValue, oldValueOfValue) {

      if (newValue == null || oldValueOfValue == null) { // null/undefined
        return newValue === oldValueOfValue;
      }

      if (typeof newValue === 'object') {

        // attempt to convert the value to a primitive type
        // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can
        //             be cheaply dirty-checked
        newValue = getValueOf(newValue);

        if (typeof newValue === 'object') {
          // objects/arrays are not supported - deep-watching them would be too expensive
          return false;
        }

        // fall-through to the primitive equality check
      }

      //Primitive or NaN
      return newValue === oldValueOfValue || (newValue !== newValue && oldValueOfValue !== oldValueOfValue);
    }

    function inputsWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var inputExpressions = parsedExpression.$$inputs ||
                    (parsedExpression.$$inputs = collectExpressionInputs(parsedExpression.inputs, []));

      var lastResult;

      if (inputExpressions.length === 1) {
        var oldInputValue = expressionInputDirtyCheck; // init to something unique so that equals check fails
        inputExpressions = inputExpressions[0];
        return scope.$watch(function expressionInputWatch(scope) {
          var newInputValue = inputExpressions(scope);
          if (!expressionInputDirtyCheck(newInputValue, oldInputValue)) {
            lastResult = parsedExpression(scope);
            oldInputValue = newInputValue && getValueOf(newInputValue);
          }
          return lastResult;
        }, listener, objectEquality);
      }

      var oldInputValueOfValues = [];
      for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails
      }

      return scope.$watch(function expressionInputsWatch(scope) {
        var changed = false;

        for (var i = 0, ii = inputExpressions.length; i < ii; i++) {
          var newInputValue = inputExpressions[i](scope);
          if (changed || (changed = !expressionInputDirtyCheck(newInputValue, oldInputValueOfValues[i]))) {
            oldInputValueOfValues[i] = newInputValue && getValueOf(newInputValue);
          }
        }

        if (changed) {
          lastResult = parsedExpression(scope);
        }

        return lastResult;
      }, listener, objectEquality);
    }

    function oneTimeWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch, lastValue;
      return unwatch = scope.$watch(function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }, function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener.apply(this, arguments);
        }
        if (isDefined(value)) {
          scope.$$postDigest(function() {
            if (isDefined(lastValue)) {
              unwatch();
            }
          });
        }
      }, objectEquality);
    }

    function oneTimeLiteralWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch, lastValue;
      return unwatch = scope.$watch(function oneTimeWatch(scope) {
        return parsedExpression(scope);
      }, function oneTimeListener(value, old, scope) {
        lastValue = value;
        if (isFunction(listener)) {
          listener.call(this, value, old, scope);
        }
        if (isAllDefined(value)) {
          scope.$$postDigest(function() {
            if (isAllDefined(lastValue)) unwatch();
          });
        }
      }, objectEquality);

      function isAllDefined(value) {
        var allDefined = true;
        forEach(value, function(val) {
          if (!isDefined(val)) allDefined = false;
        });
        return allDefined;
      }
    }

    function constantWatchDelegate(scope, listener, objectEquality, parsedExpression) {
      var unwatch;
      return unwatch = scope.$watch(function constantWatch(scope) {
        return parsedExpression(scope);
      }, function constantListener(value, old, scope) {
        if (isFunction(listener)) {
          listener.apply(this, arguments);
        }
        unwatch();
      }, objectEquality);
    }

    function addInterceptor(parsedExpression, interceptorFn) {
      if (!interceptorFn) return parsedExpression;
      var watchDelegate = parsedExpression.$$watchDelegate;

      var regularWatch =
          watchDelegate !== oneTimeLiteralWatchDelegate &&
          watchDelegate !== oneTimeWatchDelegate;

      var fn = regularWatch ? function regularInterceptedExpression(scope, locals) {
        var value = parsedExpression(scope, locals);
        return interceptorFn(value, scope, locals);
      } : function oneTimeInterceptedExpression(scope, locals) {
        var value = parsedExpression(scope, locals);
        var result = interceptorFn(value, scope, locals);
        // we only return the interceptor's result if the
        // initial value is defined (for bind-once)
        return isDefined(value) ? result : value;
      };

      // Propagate $$watchDelegates other then inputsWatchDelegate
      if (parsedExpression.$$watchDelegate &&
          parsedExpression.$$watchDelegate !== inputsWatchDelegate) {
        fn.$$watchDelegate = parsedExpression.$$watchDelegate;
      } else if (!interceptorFn.$stateful) {
        // If there is an interceptor, but no watchDelegate then treat the interceptor like
        // we treat filters - it is assumed to be a pure function unless flagged with $stateful
        fn.$$watchDelegate = inputsWatchDelegate;
        fn.inputs = [parsedExpression];
      }

      return fn;
    }
  }];
}

/**
 * @ngdoc service
 * @name $q
 * @requires $rootScope
 *
 * @description
 * A service that helps you run functions asynchronously, and use their return values (or exceptions)
 * when they are done processing.
 *
 * This is an implementation of promises/deferred objects inspired by
 * [Kris Kowal's Q](https://github.com/kriskowal/q).
 *
 * $q can be used in two fashions --- one which is more similar to Kris Kowal's Q or jQuery's Deferred
 * implementations, and the other which resembles ES6 promises to some degree.
 *
 * # $q constructor
 *
 * The streamlined ES6 style promise is essentially just using $q as a constructor which takes a `resolver`
 * function as the first argument. This is similar to the native Promise implementation from ES6 Harmony,
 * see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).
 *
 * While the constructor-style use is supported, not all of the supporting methods from ES6 Harmony promises are
 * available yet.
 *
 * It can be used like so:
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     // perform some asynchronous operation, resolve or reject the promise when appropriate.
 *     return $q(function(resolve, reject) {
 *       setTimeout(function() {
 *         if (okToGreet(name)) {
 *           resolve('Hello, ' + name + '!');
 *         } else {
 *           reject('Greeting ' + name + ' is not allowed.');
 *         }
 *       }, 1000);
 *     });
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   });
 * ```
 *
 * Note: progress/notify callbacks are not currently supported via the ES6-style interface.
 *
 * However, the more traditional CommonJS-style usage is still available, and documented below.
 *
 * [The CommonJS Promise proposal](http://wiki.commonjs.org/wiki/Promises) describes a promise as an
 * interface for interacting with an object that represents the result of an action that is
 * performed asynchronously, and may or may not be finished at any given point in time.
 *
 * From the perspective of dealing with error handling, deferred and promise APIs are to
 * asynchronous programming what `try`, `catch` and `throw` keywords are to synchronous programming.
 *
 * ```js
 *   // for the purpose of this example let's assume that variables `$q` and `okToGreet`
 *   // are available in the current lexical scope (they could have been injected or passed in).
 *
 *   function asyncGreet(name) {
 *     var deferred = $q.defer();
 *
 *     setTimeout(function() {
 *       deferred.notify('About to greet ' + name + '.');
 *
 *       if (okToGreet(name)) {
 *         deferred.resolve('Hello, ' + name + '!');
 *       } else {
 *         deferred.reject('Greeting ' + name + ' is not allowed.');
 *       }
 *     }, 1000);
 *
 *     return deferred.promise;
 *   }
 *
 *   var promise = asyncGreet('Robin Hood');
 *   promise.then(function(greeting) {
 *     alert('Success: ' + greeting);
 *   }, function(reason) {
 *     alert('Failed: ' + reason);
 *   }, function(update) {
 *     alert('Got notification: ' + update);
 *   });
 * ```
 *
 * At first it might not be obvious why this extra complexity is worth the trouble. The payoff
 * comes in the way of guarantees that promise and deferred APIs make, see
 * https://github.com/kriskowal/uncommonjs/blob/master/promises/specification.md.
 *
 * Additionally the promise api allows for composition that is very hard to do with the
 * traditional callback ([CPS](http://en.wikipedia.org/wiki/Continuation-passing_style)) approach.
 * For more on this please see the [Q documentation](https://github.com/kriskowal/q) especially the
 * section on serial or parallel joining of promises.
 *
 * # The Deferred API
 *
 * A new instance of deferred is constructed by calling `$q.defer()`.
 *
 * The purpose of the deferred object is to expose the associated Promise instance as well as APIs
 * that can be used for signaling the successful or unsuccessful completion, as well as the status
 * of the task.
 *
 * **Methods**
 *
 * - `resolve(value)` – resolves the derived promise with the `value`. If the value is a rejection
 *   constructed via `$q.reject`, the promise will be rejected instead.
 * - `reject(reason)` – rejects the derived promise with the `reason`. This is equivalent to
 *   resolving it with a rejection constructed via `$q.reject`.
 * - `notify(value)` - provides updates on the status of the promise's execution. This may be called
 *   multiple times before the promise is either resolved or rejected.
 *
 * **Properties**
 *
 * - promise – `{Promise}` – promise object associated with this deferred.
 *
 *
 * # The Promise API
 *
 * A new promise instance is created when a deferred instance is created and can be retrieved by
 * calling `deferred.promise`.
 *
 * The purpose of the promise object is to allow for interested parties to get access to the result
 * of the deferred task when it completes.
 *
 * **Methods**
 *
 * - `then(successCallback, errorCallback, notifyCallback)` – regardless of when the promise was or
 *   will be resolved or rejected, `then` calls one of the success or error callbacks asynchronously
 *   as soon as the result is available. The callbacks are called with a single argument: the result
 *   or rejection reason. Additionally, the notify callback may be called zero or more times to
 *   provide a progress indication, before the promise is resolved or rejected.
 *
 *   This method *returns a new promise* which is resolved or rejected via the return value of the
 *   `successCallback`, `errorCallback`. It also notifies via the return value of the
 *   `notifyCallback` method. The promise cannot be resolved or rejected from the notifyCallback
 *   method.
 *
 * - `catch(errorCallback)` – shorthand for `promise.then(null, errorCallback)`
 *
 * - `finally(callback, notifyCallback)` – allows you to observe either the fulfillment or rejection of a promise,
 *   but to do so without modifying the final value. This is useful to release resources or do some
 *   clean-up that needs to be done whether the promise was rejected or resolved. See the [full
 *   specification](https://github.com/kriskowal/q/wiki/API-Reference#promisefinallycallback) for
 *   more information.
 *
 * # Chaining promises
 *
 * Because calling the `then` method of a promise returns a new derived promise, it is easily
 * possible to create a chain of promises:
 *
 * ```js
 *   promiseB = promiseA.then(function(result) {
 *     return result + 1;
 *   });
 *
 *   // promiseB will be resolved immediately after promiseA is resolved and its value
 *   // will be the result of promiseA incremented by 1
 * ```
 *
 * It is possible to create chains of any length and since a promise can be resolved with another
 * promise (which will defer its resolution further), it is possible to pause/defer resolution of
 * the promises at any point in the chain. This makes it possible to implement powerful APIs like
 * $http's response interceptors.
 *
 *
 * # Differences between Kris Kowal's Q and $q
 *
 *  There are two main differences:
 *
 * - $q is integrated with the {@link ng.$rootScope.Scope} Scope model observation
 *   mechanism in angular, which means faster propagation of resolution or rejection into your
 *   models and avoiding unnecessary browser repaints, which would result in flickering UI.
 * - Q has many more features than $q, but that comes at a cost of bytes. $q is tiny, but contains
 *   all the important functionality needed for common async tasks.
 *
 *  # Testing
 *
 *  ```js
 *    it('should simulate promise', inject(function($q, $rootScope) {
 *      var deferred = $q.defer();
 *      var promise = deferred.promise;
 *      var resolvedValue;
 *
 *      promise.then(function(value) { resolvedValue = value; });
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Simulate resolving of promise
 *      deferred.resolve(123);
 *      // Note that the 'then' function does not get called synchronously.
 *      // This is because we want the promise API to always be async, whether or not
 *      // it got called synchronously or asynchronously.
 *      expect(resolvedValue).toBeUndefined();
 *
 *      // Propagate promise resolution to 'then' functions using $apply().
 *      $rootScope.$apply();
 *      expect(resolvedValue).toEqual(123);
 *    }));
 *  ```
 *
 * @param {function(function, function)} resolver Function which is responsible for resolving or
 *   rejecting the newly created promise. The first parameter is a function which resolves the
 *   promise, the second parameter is a function which rejects the promise.
 *
 * @returns {Promise} The newly created promise.
 */
function $QProvider() {

  this.$get = ['$rootScope', '$exceptionHandler', function($rootScope, $exceptionHandler) {
    return qFactory(function(callback) {
      $rootScope.$evalAsync(callback);
    }, $exceptionHandler);
  }];
}

function $$QProvider() {
  this.$get = ['$browser', '$exceptionHandler', function($browser, $exceptionHandler) {
    return qFactory(function(callback) {
      $browser.defer(callback);
    }, $exceptionHandler);
  }];
}

/**
 * Constructs a promise manager.
 *
 * @param {function(function)} nextTick Function for executing functions in the next turn.
 * @param {function(...*)} exceptionHandler Function into which unexpected exceptions are passed for
 *     debugging purposes.
 * @returns {object} Promise manager.
 */
function qFactory(nextTick, exceptionHandler) {
  var $qMinErr = minErr('$q', TypeError);
  function callOnce(self, resolveFn, rejectFn) {
    var called = false;
    function wrap(fn) {
      return function(value) {
        if (called) return;
        called = true;
        fn.call(self, value);
      };
    }

    return [wrap(resolveFn), wrap(rejectFn)];
  }

  /**
   * @ngdoc method
   * @name ng.$q#defer
   * @kind function
   *
   * @description
   * Creates a `Deferred` object which represents a task which will finish in the future.
   *
   * @returns {Deferred} Returns a new instance of deferred.
   */
  var defer = function() {
    return new Deferred();
  };

  function Promise() {
    this.$$state = { status: 0 };
  }

  Promise.prototype = {
    then: function(onFulfilled, onRejected, progressBack) {
      var result = new Deferred();

      this.$$state.pending = this.$$state.pending || [];
      this.$$state.pending.push([result, onFulfilled, onRejected, progressBack]);
      if (this.$$state.status > 0) scheduleProcessQueue(this.$$state);

      return result.promise;
    },

    "catch": function(callback) {
      return this.then(null, callback);
    },

    "finally": function(callback, progressBack) {
      return this.then(function(value) {
        return handleCallback(value, true, callback);
      }, function(error) {
        return handleCallback(error, false, callback);
      }, progressBack);
    }
  };

  //Faster, more basic than angular.bind http://jsperf.com/angular-bind-vs-custom-vs-native
  function simpleBind(context, fn) {
    return function(value) {
      fn.call(context, value);
    };
  }

  function processQueue(state) {
    var fn, promise, pending;

    pending = state.pending;
    state.processScheduled = false;
    state.pending = undefined;
    for (var i = 0, ii = pending.length; i < ii; ++i) {
      promise = pending[i][0];
      fn = pending[i][state.status];
      try {
        if (isFunction(fn)) {
          promise.resolve(fn(state.value));
        } else if (state.status === 1) {
          promise.resolve(state.value);
        } else {
          promise.reject(state.value);
        }
      } catch (e) {
        promise.reject(e);
        exceptionHandler(e);
      }
    }
  }

  function scheduleProcessQueue(state) {
    if (state.processScheduled || !state.pending) return;
    state.processScheduled = true;
    nextTick(function() { processQueue(state); });
  }

  function Deferred() {
    this.promise = new Promise();
    //Necessary to support unbound execution :/
    this.resolve = simpleBind(this, this.resolve);
    this.reject = simpleBind(this, this.reject);
    this.notify = simpleBind(this, this.notify);
  }

  Deferred.prototype = {
    resolve: function(val) {
      if (this.promise.$$state.status) return;
      if (val === this.promise) {
        this.$$reject($qMinErr(
          'qcycle',
          "Expected promise to be resolved with value other than itself '{0}'",
          val));
      } else {
        this.$$resolve(val);
      }

    },

    $$resolve: function(val) {
      var then, fns;

      fns = callOnce(this, this.$$resolve, this.$$reject);
      try {
        if ((isObject(val) || isFunction(val))) then = val && val.then;
        if (isFunction(then)) {
          this.promise.$$state.status = -1;
          then.call(val, fns[0], fns[1], this.notify);
        } else {
          this.promise.$$state.value = val;
          this.promise.$$state.status = 1;
          scheduleProcessQueue(this.promise.$$state);
        }
      } catch (e) {
        fns[1](e);
        exceptionHandler(e);
      }
    },

    reject: function(reason) {
      if (this.promise.$$state.status) return;
      this.$$reject(reason);
    },

    $$reject: function(reason) {
      this.promise.$$state.value = reason;
      this.promise.$$state.status = 2;
      scheduleProcessQueue(this.promise.$$state);
    },

    notify: function(progress) {
      var callbacks = this.promise.$$state.pending;

      if ((this.promise.$$state.status <= 0) && callbacks && callbacks.length) {
        nextTick(function() {
          var callback, result;
          for (var i = 0, ii = callbacks.length; i < ii; i++) {
            result = callbacks[i][0];
            callback = callbacks[i][3];
            try {
              result.notify(isFunction(callback) ? callback(progress) : progress);
            } catch (e) {
              exceptionHandler(e);
            }
          }
        });
      }
    }
  };

  /**
   * @ngdoc method
   * @name $q#reject
   * @kind function
   *
   * @description
   * Creates a promise that is resolved as rejected with the specified `reason`. This api should be
   * used to forward rejection in a chain of promises. If you are dealing with the last promise in
   * a promise chain, you don't need to worry about it.
   *
   * When comparing deferreds/promises to the familiar behavior of try/catch/throw, think of
   * `reject` as the `throw` keyword in JavaScript. This also means that if you "catch" an error via
   * a promise error callback and you want to forward the error to the promise derived from the
   * current promise, you have to "rethrow" the error by returning a rejection constructed via
   * `reject`.
   *
   * ```js
   *   promiseB = promiseA.then(function(result) {
   *     // success: do something and resolve promiseB
   *     //          with the old or a new result
   *     return result;
   *   }, function(reason) {
   *     // error: handle the error if possible and
   *     //        resolve promiseB with newPromiseOrValue,
   *     //        otherwise forward the rejection to promiseB
   *     if (canHandle(reason)) {
   *      // handle the error and recover
   *      return newPromiseOrValue;
   *     }
   *     return $q.reject(reason);
   *   });
   * ```
   *
   * @param {*} reason Constant, message, exception or an object representing the rejection reason.
   * @returns {Promise} Returns a promise that was already resolved as rejected with the `reason`.
   */
  var reject = function(reason) {
    var result = new Deferred();
    result.reject(reason);
    return result.promise;
  };

  var makePromise = function makePromise(value, resolved) {
    var result = new Deferred();
    if (resolved) {
      result.resolve(value);
    } else {
      result.reject(value);
    }
    return result.promise;
  };

  var handleCallback = function handleCallback(value, isResolved, callback) {
    var callbackOutput = null;
    try {
      if (isFunction(callback)) callbackOutput = callback();
    } catch (e) {
      return makePromise(e, false);
    }
    if (isPromiseLike(callbackOutput)) {
      return callbackOutput.then(function() {
        return makePromise(value, isResolved);
      }, function(error) {
        return makePromise(error, false);
      });
    } else {
      return makePromise(value, isResolved);
    }
  };

  /**
   * @ngdoc method
   * @name $q#when
   * @kind function
   *
   * @description
   * Wraps an object that might be a value or a (3rd party) then-able promise into a $q promise.
   * This is useful when you are dealing with an object that might or might not be a promise, or if
   * the promise comes from a source that can't be trusted.
   *
   * @param {*} value Value or a promise
   * @returns {Promise} Returns a promise of the passed value or promise
   */


  var when = function(value, callback, errback, progressBack) {
    var result = new Deferred();
    result.resolve(value);
    return result.promise.then(callback, errback, progressBack);
  };

  /**
   * @ngdoc method
   * @name $q#all
   * @kind function
   *
   * @description
   * Combines multiple promises into a single promise that is resolved when all of the input
   * promises are resolved.
   *
   * @param {Array.<Promise>|Object.<Promise>} promises An array or hash of promises.
   * @returns {Promise} Returns a single promise that will be resolved with an array/hash of values,
   *   each value corresponding to the promise at the same index/key in the `promises` array/hash.
   *   If any of the promises is resolved with a rejection, this resulting promise will be rejected
   *   with the same rejection value.
   */

  function all(promises) {
    var deferred = new Deferred(),
        counter = 0,
        results = isArray(promises) ? [] : {};

    forEach(promises, function(promise, key) {
      counter++;
      when(promise).then(function(value) {
        if (results.hasOwnProperty(key)) return;
        results[key] = value;
        if (!(--counter)) deferred.resolve(results);
      }, function(reason) {
        if (results.hasOwnProperty(key)) return;
        deferred.reject(reason);
      });
    });

    if (counter === 0) {
      deferred.resolve(results);
    }

    return deferred.promise;
  }

  var $Q = function Q(resolver) {
    if (!isFunction(resolver)) {
      throw $qMinErr('norslvr', "Expected resolverFn, got '{0}'", resolver);
    }

    if (!(this instanceof Q)) {
      // More useful when $Q is the Promise itself.
      return new Q(resolver);
    }

    var deferred = new Deferred();

    function resolveFn(value) {
      deferred.resolve(value);
    }

    function rejectFn(reason) {
      deferred.reject(reason);
    }

    resolver(resolveFn, rejectFn);

    return deferred.promise;
  };

  $Q.defer = defer;
  $Q.reject = reject;
  $Q.when = when;
  $Q.all = all;

  return $Q;
}

function $$RAFProvider() { //rAF
  this.$get = ['$window', '$timeout', function($window, $timeout) {
    var requestAnimationFrame = $window.requestAnimationFrame ||
                                $window.webkitRequestAnimationFrame;

    var cancelAnimationFrame = $window.cancelAnimationFrame ||
                               $window.webkitCancelAnimationFrame ||
                               $window.webkitCancelRequestAnimationFrame;

    var rafSupported = !!requestAnimationFrame;
    var rafFn = rafSupported
      ? function(fn) {
          var id = requestAnimationFrame(fn);
          return function() {
            cancelAnimationFrame(id);
          };
        }
      : function(fn) {
          var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666
          return function() {
            $timeout.cancel(timer);
          };
        };

    queueFn.supported = rafSupported;

    var cancelLastRAF;
    var taskCount = 0;
    var taskQueue = [];
    return queueFn;

    function flush() {
      for (var i = 0; i < taskQueue.length; i++) {
        var task = taskQueue[i];
        if (task) {
          taskQueue[i] = null;
          task();
        }
      }
      taskCount = taskQueue.length = 0;
    }

    function queueFn(asyncFn) {
      var index = taskQueue.length;

      taskCount++;
      taskQueue.push(asyncFn);

      if (index === 0) {
        cancelLastRAF = rafFn(flush);
      }

      return function cancelQueueFn() {
        if (index >= 0) {
          taskQueue[index] = null;
          index = null;

          if (--taskCount === 0 && cancelLastRAF) {
            cancelLastRAF();
            cancelLastRAF = null;
            taskQueue.length = 0;
          }
        }
      };
    }
  }];
}

/**
 * DESIGN NOTES
 *
 * The design decisions behind the scope are heavily favored for speed and memory consumption.
 *
 * The typical use of scope is to watch the expressions, which most of the time return the same
 * value as last time so we optimize the operation.
 *
 * Closures construction is expensive in terms of speed as well as memory:
 *   - No closures, instead use prototypical inheritance for API
 *   - Internal state needs to be stored on scope directly, which means that private state is
 *     exposed as $$____ properties
 *
 * Loop operations are optimized by using while(count--) { ... }
 *   - this means that in order to keep the same order of execution as addition we have to add
 *     items to the array at the beginning (unshift) instead of at the end (push)
 *
 * Child scopes are created and removed often
 *   - Using an array would be slow since inserts in middle are expensive so we use linked list
 *
 * There are few watches then a lot of observers. This is why you don't want the observer to be
 * implemented in the same way as watch. Watch requires return of initialization function which
 * are expensive to construct.
 */


/**
 * @ngdoc provider
 * @name $rootScopeProvider
 * @description
 *
 * Provider for the $rootScope service.
 */

/**
 * @ngdoc method
 * @name $rootScopeProvider#digestTtl
 * @description
 *
 * Sets the number of `$digest` iterations the scope should attempt to execute before giving up and
 * assuming that the model is unstable.
 *
 * The current default is 10 iterations.
 *
 * In complex applications it's possible that the dependencies between `$watch`s will result in
 * several digest iterations. However if an application needs more than the default 10 digest
 * iterations for its model to stabilize then you should investigate what is causing the model to
 * continuously change during the digest.
 *
 * Increasing the TTL could have performance implications, so you should not change it without
 * proper justification.
 *
 * @param {number} limit The number of digest iterations.
 */


/**
 * @ngdoc service
 * @name $rootScope
 * @description
 *
 * Every application has a single root {@link ng.$rootScope.Scope scope}.
 * All other scopes are descendant scopes of the root scope. Scopes provide separation
 * between the model and the view, via a mechanism for watching the model for changes.
 * They also provide an event emission/broadcast and subscription facility. See the
 * {@link guide/scope developer guide on scopes}.
 */
function $RootScopeProvider() {
  var TTL = 10;
  var $rootScopeMinErr = minErr('$rootScope');
  var lastDirtyWatch = null;
  var applyAsyncId = null;

  this.digestTtl = function(value) {
    if (arguments.length) {
      TTL = value;
    }
    return TTL;
  };

  function createChildScopeClass(parent) {
    function ChildScope() {
      this.$$watchers = this.$$nextSibling =
          this.$$childHead = this.$$childTail = null;
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$id = nextUid();
      this.$$ChildScope = null;
    }
    ChildScope.prototype = parent;
    return ChildScope;
  }

  this.$get = ['$injector', '$exceptionHandler', '$parse', '$browser',
      function($injector, $exceptionHandler, $parse, $browser) {

    function destroyChildScope($event) {
        $event.currentScope.$$destroyed = true;
    }

    /**
     * @ngdoc type
     * @name $rootScope.Scope
     *
     * @description
     * A root scope can be retrieved using the {@link ng.$rootScope $rootScope} key from the
     * {@link auto.$injector $injector}. Child scopes are created using the
     * {@link ng.$rootScope.Scope#$new $new()} method. (Most scopes are created automatically when
     * compiled HTML template is executed.)
     *
     * Here is a simple scope snippet to show how you can interact with the scope.
     * ```html
     * <file src="./test/ng/rootScopeSpec.js" tag="docs1" />
     * ```
     *
     * # Inheritance
     * A scope can inherit from a parent scope, as in this example:
     * ```js
         var parent = $rootScope;
         var child = parent.$new();

         parent.salutation = "Hello";
         expect(child.salutation).toEqual('Hello');

         child.salutation = "Welcome";
         expect(child.salutation).toEqual('Welcome');
         expect(parent.salutation).toEqual('Hello');
     * ```
     *
     * When interacting with `Scope` in tests, additional helper methods are available on the
     * instances of `Scope` type. See {@link ngMock.$rootScope.Scope ngMock Scope} for additional
     * details.
     *
     *
     * @param {Object.<string, function()>=} providers Map of service factory which need to be
     *                                       provided for the current scope. Defaults to {@link ng}.
     * @param {Object.<string, *>=} instanceCache Provides pre-instantiated services which should
     *                              append/override services provided by `providers`. This is handy
     *                              when unit-testing and having the need to override a default
     *                              service.
     * @returns {Object} Newly created scope.
     *
     */
    function Scope() {
      this.$id = nextUid();
      this.$$phase = this.$parent = this.$$watchers =
                     this.$$nextSibling = this.$$prevSibling =
                     this.$$childHead = this.$$childTail = null;
      this.$root = this;
      this.$$destroyed = false;
      this.$$listeners = {};
      this.$$listenerCount = {};
      this.$$isolateBindings = null;
    }

    /**
     * @ngdoc property
     * @name $rootScope.Scope#$id
     *
     * @description
     * Unique scope ID (monotonically increasing) useful for debugging.
     */

     /**
      * @ngdoc property
      * @name $rootScope.Scope#$parent
      *
      * @description
      * Reference to the parent scope.
      */

      /**
       * @ngdoc property
       * @name $rootScope.Scope#$root
       *
       * @description
       * Reference to the root scope.
       */

    Scope.prototype = {
      constructor: Scope,
      /**
       * @ngdoc method
       * @name $rootScope.Scope#$new
       * @kind function
       *
       * @description
       * Creates a new child {@link ng.$rootScope.Scope scope}.
       *
       * The parent scope will propagate the {@link ng.$rootScope.Scope#$digest $digest()} event.
       * The scope can be removed from the scope hierarchy using {@link ng.$rootScope.Scope#$destroy $destroy()}.
       *
       * {@link ng.$rootScope.Scope#$destroy $destroy()} must be called on a scope when it is
       * desired for the scope and its child scopes to be permanently detached from the parent and
       * thus stop participating in model change detection and listener notification by invoking.
       *
       * @param {boolean} isolate If true, then the scope does not prototypically inherit from the
       *         parent scope. The scope is isolated, as it can not see parent scope properties.
       *         When creating widgets, it is useful for the widget to not accidentally read parent
       *         state.
       *
       * @param {Scope} [parent=this] The {@link ng.$rootScope.Scope `Scope`} that will be the `$parent`
       *                              of the newly created scope. Defaults to `this` scope if not provided.
       *                              This is used when creating a transclude scope to correctly place it
       *                              in the scope hierarchy while maintaining the correct prototypical
       *                              inheritance.
       *
       * @returns {Object} The newly created child scope.
       *
       */
      $new: function(isolate, parent) {
        var child;

        parent = parent || this;

        if (isolate) {
          child = new Scope();
          child.$root = this.$root;
        } else {
          // Only create a child scope class if somebody asks for one,
          // but cache it to allow the VM to optimize lookups.
          if (!this.$$ChildScope) {
            this.$$ChildScope = createChildScopeClass(this);
          }
          child = new this.$$ChildScope();
        }
        child.$parent = parent;
        child.$$prevSibling = parent.$$childTail;
        if (parent.$$childHead) {
          parent.$$childTail.$$nextSibling = child;
          parent.$$childTail = child;
        } else {
          parent.$$childHead = parent.$$childTail = child;
        }

        // When the new scope is not isolated or we inherit from `this`, and
        // the parent scope is destroyed, the property `$$destroyed` is inherited
        // prototypically. In all other cases, this property needs to be set
        // when the parent scope is destroyed.
        // The listener needs to be added after the parent is set
        if (isolate || parent != this) child.$on('$destroy', destroyChildScope);

        return child;
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watch
       * @kind function
       *
       * @description
       * Registers a `listener` callback to be executed whenever the `watchExpression` changes.
       *
       * - The `watchExpression` is called on every call to {@link ng.$rootScope.Scope#$digest
       *   $digest()} and should return the value that will be watched. (Since
       *   {@link ng.$rootScope.Scope#$digest $digest()} reruns when it detects changes the
       *   `watchExpression` can execute multiple times per
       *   {@link ng.$rootScope.Scope#$digest $digest()} and should be idempotent.)
       * - The `listener` is called only when the value from the current `watchExpression` and the
       *   previous call to `watchExpression` are not equal (with the exception of the initial run,
       *   see below). Inequality is determined according to reference inequality,
       *   [strict comparison](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comparison_Operators)
       *    via the `!==` Javascript operator, unless `objectEquality == true`
       *   (see next point)
       * - When `objectEquality == true`, inequality of the `watchExpression` is determined
       *   according to the {@link angular.equals} function. To save the value of the object for
       *   later comparison, the {@link angular.copy} function is used. This therefore means that
       *   watching complex objects will have adverse memory and performance implications.
       * - The watch `listener` may change the model, which may trigger other `listener`s to fire.
       *   This is achieved by rerunning the watchers until no changes are detected. The rerun
       *   iteration limit is 10 to prevent an infinite loop deadlock.
       *
       *
       * If you want to be notified whenever {@link ng.$rootScope.Scope#$digest $digest} is called,
       * you can register a `watchExpression` function with no `listener`. (Since `watchExpression`
       * can execute multiple times per {@link ng.$rootScope.Scope#$digest $digest} cycle when a
       * change is detected, be prepared for multiple calls to your listener.)
       *
       * After a watcher is registered with the scope, the `listener` fn is called asynchronously
       * (via {@link ng.$rootScope.Scope#$evalAsync $evalAsync}) to initialize the
       * watcher. In rare cases, this is undesirable because the listener is called when the result
       * of `watchExpression` didn't change. To detect this scenario within the `listener` fn, you
       * can compare the `newVal` and `oldVal`. If these two values are identical (`===`) then the
       * listener was called due to initialization.
       *
       *
       *
       * # Example
       * ```js
           // let's assume that scope was dependency injected as the $rootScope
           var scope = $rootScope;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);



           // Using a function as a watchExpression
           var food;
           scope.foodCounter = 0;
           expect(scope.foodCounter).toEqual(0);
           scope.$watch(
             // This function returns the value being watched. It is called for each turn of the $digest loop
             function() { return food; },
             // This is the change listener, called when the value returned from the above function changes
             function(newValue, oldValue) {
               if ( newValue !== oldValue ) {
                 // Only increment the counter if the value changed
                 scope.foodCounter = scope.foodCounter + 1;
               }
             }
           );
           // No digest has been run so the counter will be zero
           expect(scope.foodCounter).toEqual(0);

           // Run the digest but since food has not changed count will still be zero
           scope.$digest();
           expect(scope.foodCounter).toEqual(0);

           // Update food and run digest.  Now the counter will increment
           food = 'cheeseburger';
           scope.$digest();
           expect(scope.foodCounter).toEqual(1);

       * ```
       *
       *
       *
       * @param {(function()|string)} watchExpression Expression that is evaluated on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. A change in the return value triggers
       *    a call to the `listener`.
       *
       *    - `string`: Evaluated as {@link guide/expression expression}
       *    - `function(scope)`: called with current `scope` as a parameter.
       * @param {function(newVal, oldVal, scope)} listener Callback called whenever the value
       *    of `watchExpression` changes.
       *
       *    - `newVal` contains the current value of the `watchExpression`
       *    - `oldVal` contains the previous value of the `watchExpression`
       *    - `scope` refers to the current scope
       * @param {boolean=} objectEquality Compare for object equality using {@link angular.equals} instead of
       *     comparing for reference equality.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $watch: function(watchExp, listener, objectEquality) {
        var get = $parse(watchExp);

        if (get.$$watchDelegate) {
          return get.$$watchDelegate(this, listener, objectEquality, get);
        }
        var scope = this,
            array = scope.$$watchers,
            watcher = {
              fn: listener,
              last: initWatchVal,
              get: get,
              exp: watchExp,
              eq: !!objectEquality
            };

        lastDirtyWatch = null;

        if (!isFunction(listener)) {
          watcher.fn = noop;
        }

        if (!array) {
          array = scope.$$watchers = [];
        }
        // we use unshift since we use a while loop in $digest for speed.
        // the while loop reads in reverse order.
        array.unshift(watcher);

        return function deregisterWatch() {
          arrayRemove(array, watcher);
          lastDirtyWatch = null;
        };
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchGroup
       * @kind function
       *
       * @description
       * A variant of {@link ng.$rootScope.Scope#$watch $watch()} where it watches an array of `watchExpressions`.
       * If any one expression in the collection changes the `listener` is executed.
       *
       * - The items in the `watchExpressions` array are observed via standard $watch operation and are examined on every
       *   call to $digest() to see if any items changes.
       * - The `listener` is called whenever any expression in the `watchExpressions` array changes.
       *
       * @param {Array.<string|Function(scope)>} watchExpressions Array of expressions that will be individually
       * watched using {@link ng.$rootScope.Scope#$watch $watch()}
       *
       * @param {function(newValues, oldValues, scope)} listener Callback called whenever the return value of any
       *    expression in `watchExpressions` changes
       *    The `newValues` array contains the current values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    and the `oldValues` array contains the previous values of the `watchExpressions`, with the indexes matching
       *    those of `watchExpression`
       *    The `scope` refers to the current scope.
       * @returns {function()} Returns a de-registration function for all listeners.
       */
      $watchGroup: function(watchExpressions, listener) {
        var oldValues = new Array(watchExpressions.length);
        var newValues = new Array(watchExpressions.length);
        var deregisterFns = [];
        var self = this;
        var changeReactionScheduled = false;
        var firstRun = true;

        if (!watchExpressions.length) {
          // No expressions means we call the listener ASAP
          var shouldCall = true;
          self.$evalAsync(function() {
            if (shouldCall) listener(newValues, newValues, self);
          });
          return function deregisterWatchGroup() {
            shouldCall = false;
          };
        }

        if (watchExpressions.length === 1) {
          // Special case size of one
          return this.$watch(watchExpressions[0], function watchGroupAction(value, oldValue, scope) {
            newValues[0] = value;
            oldValues[0] = oldValue;
            listener(newValues, (value === oldValue) ? newValues : oldValues, scope);
          });
        }

        forEach(watchExpressions, function(expr, i) {
          var unwatchFn = self.$watch(expr, function watchGroupSubAction(value, oldValue) {
            newValues[i] = value;
            oldValues[i] = oldValue;
            if (!changeReactionScheduled) {
              changeReactionScheduled = true;
              self.$evalAsync(watchGroupAction);
            }
          });
          deregisterFns.push(unwatchFn);
        });

        function watchGroupAction() {
          changeReactionScheduled = false;

          if (firstRun) {
            firstRun = false;
            listener(newValues, newValues, self);
          } else {
            listener(newValues, oldValues, self);
          }
        }

        return function deregisterWatchGroup() {
          while (deregisterFns.length) {
            deregisterFns.shift()();
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$watchCollection
       * @kind function
       *
       * @description
       * Shallow watches the properties of an object and fires whenever any of the properties change
       * (for arrays, this implies watching the array items; for object maps, this implies watching
       * the properties). If a change is detected, the `listener` callback is fired.
       *
       * - The `obj` collection is observed via standard $watch operation and is examined on every
       *   call to $digest() to see if any items have been added, removed, or moved.
       * - The `listener` is called whenever anything within the `obj` has changed. Examples include
       *   adding, removing, and moving items belonging to an object or array.
       *
       *
       * # Example
       * ```js
          $scope.names = ['igor', 'matias', 'misko', 'james'];
          $scope.dataCount = 4;

          $scope.$watchCollection('names', function(newNames, oldNames) {
            $scope.dataCount = newNames.length;
          });

          expect($scope.dataCount).toEqual(4);
          $scope.$digest();

          //still at 4 ... no changes
          expect($scope.dataCount).toEqual(4);

          $scope.names.pop();
          $scope.$digest();

          //now there's been a change
          expect($scope.dataCount).toEqual(3);
       * ```
       *
       *
       * @param {string|function(scope)} obj Evaluated as {@link guide/expression expression}. The
       *    expression value should evaluate to an object or an array which is observed on each
       *    {@link ng.$rootScope.Scope#$digest $digest} cycle. Any shallow change within the
       *    collection will trigger a call to the `listener`.
       *
       * @param {function(newCollection, oldCollection, scope)} listener a callback function called
       *    when a change is detected.
       *    - The `newCollection` object is the newly modified data obtained from the `obj` expression
       *    - The `oldCollection` object is a copy of the former collection data.
       *      Due to performance considerations, the`oldCollection` value is computed only if the
       *      `listener` function declares two or more arguments.
       *    - The `scope` argument refers to the current scope.
       *
       * @returns {function()} Returns a de-registration function for this listener. When the
       *    de-registration function is executed, the internal watch operation is terminated.
       */
      $watchCollection: function(obj, listener) {
        $watchCollectionInterceptor.$stateful = true;

        var self = this;
        // the current value, updated on each dirty-check run
        var newValue;
        // a shallow copy of the newValue from the last dirty-check run,
        // updated to match newValue during dirty-check run
        var oldValue;
        // a shallow copy of the newValue from when the last change happened
        var veryOldValue;
        // only track veryOldValue if the listener is asking for it
        var trackVeryOldValue = (listener.length > 1);
        var changeDetected = 0;
        var changeDetector = $parse(obj, $watchCollectionInterceptor);
        var internalArray = [];
        var internalObject = {};
        var initRun = true;
        var oldLength = 0;

        function $watchCollectionInterceptor(_value) {
          newValue = _value;
          var newLength, key, bothNaN, newItem, oldItem;

          // If the new value is undefined, then return undefined as the watch may be a one-time watch
          if (isUndefined(newValue)) return;

          if (!isObject(newValue)) { // if primitive
            if (oldValue !== newValue) {
              oldValue = newValue;
              changeDetected++;
            }
          } else if (isArrayLike(newValue)) {
            if (oldValue !== internalArray) {
              // we are transitioning from something which was not an array into array.
              oldValue = internalArray;
              oldLength = oldValue.length = 0;
              changeDetected++;
            }

            newLength = newValue.length;

            if (oldLength !== newLength) {
              // if lengths do not match we need to trigger change notification
              changeDetected++;
              oldValue.length = oldLength = newLength;
            }
            // copy the items to oldValue and look for changes.
            for (var i = 0; i < newLength; i++) {
              oldItem = oldValue[i];
              newItem = newValue[i];

              bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
              if (!bothNaN && (oldItem !== newItem)) {
                changeDetected++;
                oldValue[i] = newItem;
              }
            }
          } else {
            if (oldValue !== internalObject) {
              // we are transitioning from something which was not an object into object.
              oldValue = internalObject = {};
              oldLength = 0;
              changeDetected++;
            }
            // copy the items to oldValue and look for changes.
            newLength = 0;
            for (key in newValue) {
              if (newValue.hasOwnProperty(key)) {
                newLength++;
                newItem = newValue[key];
                oldItem = oldValue[key];

                if (key in oldValue) {
                  bothNaN = (oldItem !== oldItem) && (newItem !== newItem);
                  if (!bothNaN && (oldItem !== newItem)) {
                    changeDetected++;
                    oldValue[key] = newItem;
                  }
                } else {
                  oldLength++;
                  oldValue[key] = newItem;
                  changeDetected++;
                }
              }
            }
            if (oldLength > newLength) {
              // we used to have more keys, need to find them and destroy them.
              changeDetected++;
              for (key in oldValue) {
                if (!newValue.hasOwnProperty(key)) {
                  oldLength--;
                  delete oldValue[key];
                }
              }
            }
          }
          return changeDetected;
        }

        function $watchCollectionAction() {
          if (initRun) {
            initRun = false;
            listener(newValue, newValue, self);
          } else {
            listener(newValue, veryOldValue, self);
          }

          // make a copy for the next time a collection is changed
          if (trackVeryOldValue) {
            if (!isObject(newValue)) {
              //primitive
              veryOldValue = newValue;
            } else if (isArrayLike(newValue)) {
              veryOldValue = new Array(newValue.length);
              for (var i = 0; i < newValue.length; i++) {
                veryOldValue[i] = newValue[i];
              }
            } else { // if object
              veryOldValue = {};
              for (var key in newValue) {
                if (hasOwnProperty.call(newValue, key)) {
                  veryOldValue[key] = newValue[key];
                }
              }
            }
          }
        }

        return this.$watch(changeDetector, $watchCollectionAction);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$digest
       * @kind function
       *
       * @description
       * Processes all of the {@link ng.$rootScope.Scope#$watch watchers} of the current scope and
       * its children. Because a {@link ng.$rootScope.Scope#$watch watcher}'s listener can change
       * the model, the `$digest()` keeps calling the {@link ng.$rootScope.Scope#$watch watchers}
       * until no more listeners are firing. This means that it is possible to get into an infinite
       * loop. This function will throw `'Maximum iteration limit exceeded.'` if the number of
       * iterations exceeds 10.
       *
       * Usually, you don't call `$digest()` directly in
       * {@link ng.directive:ngController controllers} or in
       * {@link ng.$compileProvider#directive directives}.
       * Instead, you should call {@link ng.$rootScope.Scope#$apply $apply()} (typically from within
       * a {@link ng.$compileProvider#directive directive}), which will force a `$digest()`.
       *
       * If you want to be notified whenever `$digest()` is called,
       * you can register a `watchExpression` function with
       * {@link ng.$rootScope.Scope#$watch $watch()} with no `listener`.
       *
       * In unit tests, you may need to call `$digest()` to simulate the scope life cycle.
       *
       * # Example
       * ```js
           var scope = ...;
           scope.name = 'misko';
           scope.counter = 0;

           expect(scope.counter).toEqual(0);
           scope.$watch('name', function(newValue, oldValue) {
             scope.counter = scope.counter + 1;
           });
           expect(scope.counter).toEqual(0);

           scope.$digest();
           // the listener is always called during the first $digest loop after it was registered
           expect(scope.counter).toEqual(1);

           scope.$digest();
           // but now it will not be called unless the value changes
           expect(scope.counter).toEqual(1);

           scope.name = 'adam';
           scope.$digest();
           expect(scope.counter).toEqual(2);
       * ```
       *
       */
      $digest: function() {
        var watch, value, last,
            watchers,
            length,
            dirty, ttl = TTL,
            next, current, target = this,
            watchLog = [],
            logIdx, logMsg, asyncTask;

        beginPhase('$digest');
        // Check for changes to browser url that happened in sync before the call to $digest
        $browser.$$checkUrlChange();

        if (this === $rootScope && applyAsyncId !== null) {
          // If this is the root scope, and $applyAsync has scheduled a deferred $apply(), then
          // cancel the scheduled $apply and flush the queue of expressions to be evaluated.
          $browser.defer.cancel(applyAsyncId);
          flushApplyAsync();
        }

        lastDirtyWatch = null;

        do { // "while dirty" loop
          dirty = false;
          current = target;

          while (asyncQueue.length) {
            try {
              asyncTask = asyncQueue.shift();
              asyncTask.scope.$eval(asyncTask.expression, asyncTask.locals);
            } catch (e) {
              $exceptionHandler(e);
            }
            lastDirtyWatch = null;
          }

          traverseScopesLoop:
          do { // "traverse the scopes" loop
            if ((watchers = current.$$watchers)) {
              // process our watches
              length = watchers.length;
              while (length--) {
                try {
                  watch = watchers[length];
                  // Most common watches are on primitives, in which case we can short
                  // circuit it with === operator, only when === fails do we use .equals
                  if (watch) {
                    if ((value = watch.get(current)) !== (last = watch.last) &&
                        !(watch.eq
                            ? equals(value, last)
                            : (typeof value === 'number' && typeof last === 'number'
                               && isNaN(value) && isNaN(last)))) {
                      dirty = true;
                      lastDirtyWatch = watch;
                      watch.last = watch.eq ? copy(value, null) : value;
                      watch.fn(value, ((last === initWatchVal) ? value : last), current);
                      if (ttl < 5) {
                        logIdx = 4 - ttl;
                        if (!watchLog[logIdx]) watchLog[logIdx] = [];
                        watchLog[logIdx].push({
                          msg: isFunction(watch.exp) ? 'fn: ' + (watch.exp.name || watch.exp.toString()) : watch.exp,
                          newVal: value,
                          oldVal: last
                        });
                      }
                    } else if (watch === lastDirtyWatch) {
                      // If the most recently dirty watcher is now clean, short circuit since the remaining watchers
                      // have already been tested.
                      dirty = false;
                      break traverseScopesLoop;
                    }
                  }
                } catch (e) {
                  $exceptionHandler(e);
                }
              }
            }

            // Insanity Warning: scope depth-first traversal
            // yes, this code is a bit crazy, but it works and we have tests to prove it!
            // this piece should be kept in sync with the traversal in $broadcast
            if (!(next = (current.$$childHead ||
                (current !== target && current.$$nextSibling)))) {
              while (current !== target && !(next = current.$$nextSibling)) {
                current = current.$parent;
              }
            }
          } while ((current = next));

          // `break traverseScopesLoop;` takes us to here

          if ((dirty || asyncQueue.length) && !(ttl--)) {
            clearPhase();
            throw $rootScopeMinErr('infdig',
                '{0} $digest() iterations reached. Aborting!\n' +
                'Watchers fired in the last 5 iterations: {1}',
                TTL, watchLog);
          }

        } while (dirty || asyncQueue.length);

        clearPhase();

        while (postDigestQueue.length) {
          try {
            postDigestQueue.shift()();
          } catch (e) {
            $exceptionHandler(e);
          }
        }
      },


      /**
       * @ngdoc event
       * @name $rootScope.Scope#$destroy
       * @eventType broadcast on scope being destroyed
       *
       * @description
       * Broadcasted when a scope and its children are being destroyed.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$destroy
       * @kind function
       *
       * @description
       * Removes the current scope (and all of its children) from the parent scope. Removal implies
       * that calls to {@link ng.$rootScope.Scope#$digest $digest()} will no longer
       * propagate to the current scope and its children. Removal also implies that the current
       * scope is eligible for garbage collection.
       *
       * The `$destroy()` is usually used by directives such as
       * {@link ng.directive:ngRepeat ngRepeat} for managing the
       * unrolling of the loop.
       *
       * Just before a scope is destroyed, a `$destroy` event is broadcasted on this scope.
       * Application code can register a `$destroy` event handler that will give it a chance to
       * perform any necessary cleanup.
       *
       * Note that, in AngularJS, there is also a `$destroy` jQuery event, which can be used to
       * clean up DOM bindings before an element is removed from the DOM.
       */
      $destroy: function() {
        // we can't destroy the root scope or a scope that has been already destroyed
        if (this.$$destroyed) return;
        var parent = this.$parent;

        this.$broadcast('$destroy');
        this.$$destroyed = true;
        if (this === $rootScope) return;

        for (var eventName in this.$$listenerCount) {
          decrementListenerCount(this, this.$$listenerCount[eventName], eventName);
        }

        // sever all the references to parent scopes (after this cleanup, the current scope should
        // not be retained by any of our references and should be eligible for garbage collection)
        if (parent.$$childHead == this) parent.$$childHead = this.$$nextSibling;
        if (parent.$$childTail == this) parent.$$childTail = this.$$prevSibling;
        if (this.$$prevSibling) this.$$prevSibling.$$nextSibling = this.$$nextSibling;
        if (this.$$nextSibling) this.$$nextSibling.$$prevSibling = this.$$prevSibling;

        // Disable listeners, watchers and apply/digest methods
        this.$destroy = this.$digest = this.$apply = this.$evalAsync = this.$applyAsync = noop;
        this.$on = this.$watch = this.$watchGroup = function() { return noop; };
        this.$$listeners = {};

        // All of the code below is bogus code that works around V8's memory leak via optimized code
        // and inline caches.
        //
        // see:
        // - https://code.google.com/p/v8/issues/detail?id=2073#c26
        // - https://github.com/angular/angular.js/issues/6794#issuecomment-38648909
        // - https://github.com/angular/angular.js/issues/1313#issuecomment-10378451

        this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead =
            this.$$childTail = this.$root = this.$$watchers = null;
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$eval
       * @kind function
       *
       * @description
       * Executes the `expression` on the current scope and returns the result. Any exceptions in
       * the expression are propagated (uncaught). This is useful when evaluating Angular
       * expressions.
       *
       * # Example
       * ```js
           var scope = ng.$rootScope.Scope();
           scope.a = 1;
           scope.b = 2;

           expect(scope.$eval('a+b')).toEqual(3);
           expect(scope.$eval(function(scope){ return scope.a + scope.b; })).toEqual(3);
       * ```
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in  {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       * @returns {*} The result of evaluating the expression.
       */
      $eval: function(expr, locals) {
        return $parse(expr)(this, locals);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$evalAsync
       * @kind function
       *
       * @description
       * Executes the expression on the current scope at a later point in time.
       *
       * The `$evalAsync` makes no guarantees as to when the `expression` will be executed, only
       * that:
       *
       *   - it will execute after the function that scheduled the evaluation (preferably before DOM
       *     rendering).
       *   - at least one {@link ng.$rootScope.Scope#$digest $digest cycle} will be performed after
       *     `expression` execution.
       *
       * Any exceptions from the execution of the expression are forwarded to the
       * {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * __Note:__ if this function is called outside of a `$digest` cycle, a new `$digest` cycle
       * will be scheduled. However, it is encouraged to always call code that changes the model
       * from within an `$apply` call. That includes code evaluated via `$evalAsync`.
       *
       * @param {(string|function())=} expression An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with the current `scope` parameter.
       *
       * @param {(object)=} locals Local variables object, useful for overriding values in scope.
       */
      $evalAsync: function(expr, locals) {
        // if we are outside of an $digest loop and this is the first time we are scheduling async
        // task also schedule async auto-flush
        if (!$rootScope.$$phase && !asyncQueue.length) {
          $browser.defer(function() {
            if (asyncQueue.length) {
              $rootScope.$digest();
            }
          });
        }

        asyncQueue.push({scope: this, expression: expr, locals: locals});
      },

      $$postDigest: function(fn) {
        postDigestQueue.push(fn);
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$apply
       * @kind function
       *
       * @description
       * `$apply()` is used to execute an expression in angular from outside of the angular
       * framework. (For example from browser DOM events, setTimeout, XHR or third party libraries).
       * Because we are calling into the angular framework we need to perform proper scope life
       * cycle of {@link ng.$exceptionHandler exception handling},
       * {@link ng.$rootScope.Scope#$digest executing watches}.
       *
       * ## Life cycle
       *
       * # Pseudo-Code of `$apply()`
       * ```js
           function $apply(expr) {
             try {
               return $eval(expr);
             } catch (e) {
               $exceptionHandler(e);
             } finally {
               $root.$digest();
             }
           }
       * ```
       *
       *
       * Scope's `$apply()` method transitions through the following stages:
       *
       * 1. The {@link guide/expression expression} is executed using the
       *    {@link ng.$rootScope.Scope#$eval $eval()} method.
       * 2. Any exceptions from the execution of the expression are forwarded to the
       *    {@link ng.$exceptionHandler $exceptionHandler} service.
       * 3. The {@link ng.$rootScope.Scope#$watch watch} listeners are fired immediately after the
       *    expression was executed using the {@link ng.$rootScope.Scope#$digest $digest()} method.
       *
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       *
       * @returns {*} The result of evaluating the expression.
       */
      $apply: function(expr) {
        try {
          beginPhase('$apply');
          return this.$eval(expr);
        } catch (e) {
          $exceptionHandler(e);
        } finally {
          clearPhase();
          try {
            $rootScope.$digest();
          } catch (e) {
            $exceptionHandler(e);
            throw e;
          }
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$applyAsync
       * @kind function
       *
       * @description
       * Schedule the invocation of $apply to occur at a later time. The actual time difference
       * varies across browsers, but is typically around ~10 milliseconds.
       *
       * This can be used to queue up multiple expressions which need to be evaluated in the same
       * digest.
       *
       * @param {(string|function())=} exp An angular expression to be executed.
       *
       *    - `string`: execute using the rules as defined in {@link guide/expression expression}.
       *    - `function(scope)`: execute the function with current `scope` parameter.
       */
      $applyAsync: function(expr) {
        var scope = this;
        expr && applyAsyncQueue.push($applyAsyncExpression);
        scheduleApplyAsync();

        function $applyAsyncExpression() {
          scope.$eval(expr);
        }
      },

      /**
       * @ngdoc method
       * @name $rootScope.Scope#$on
       * @kind function
       *
       * @description
       * Listens on events of a given type. See {@link ng.$rootScope.Scope#$emit $emit} for
       * discussion of event life cycle.
       *
       * The event listener function format is: `function(event, args...)`. The `event` object
       * passed into the listener has the following attributes:
       *
       *   - `targetScope` - `{Scope}`: the scope on which the event was `$emit`-ed or
       *     `$broadcast`-ed.
       *   - `currentScope` - `{Scope}`: the scope that is currently handling the event. Once the
       *     event propagates through the scope hierarchy, this property is set to null.
       *   - `name` - `{string}`: name of the event.
       *   - `stopPropagation` - `{function=}`: calling `stopPropagation` function will cancel
       *     further event propagation (available only for events that were `$emit`-ed).
       *   - `preventDefault` - `{function}`: calling `preventDefault` sets `defaultPrevented` flag
       *     to true.
       *   - `defaultPrevented` - `{boolean}`: true if `preventDefault` was called.
       *
       * @param {string} name Event name to listen on.
       * @param {function(event, ...args)} listener Function to call when the event is emitted.
       * @returns {function()} Returns a deregistration function for this listener.
       */
      $on: function(name, listener) {
        var namedListeners = this.$$listeners[name];
        if (!namedListeners) {
          this.$$listeners[name] = namedListeners = [];
        }
        namedListeners.push(listener);

        var current = this;
        do {
          if (!current.$$listenerCount[name]) {
            current.$$listenerCount[name] = 0;
          }
          current.$$listenerCount[name]++;
        } while ((current = current.$parent));

        var self = this;
        return function() {
          var indexOfListener = namedListeners.indexOf(listener);
          if (indexOfListener !== -1) {
            namedListeners[indexOfListener] = null;
            decrementListenerCount(self, 1, name);
          }
        };
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$emit
       * @kind function
       *
       * @description
       * Dispatches an event `name` upwards through the scope hierarchy notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$emit` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event traverses upwards toward the root scope and calls all
       * registered listeners along the way. The event will stop propagating if one of the listeners
       * cancels it.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to emit.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object (see {@link ng.$rootScope.Scope#$on}).
       */
      $emit: function(name, args) {
        var empty = [],
            namedListeners,
            scope = this,
            stopPropagation = false,
            event = {
              name: name,
              targetScope: scope,
              stopPropagation: function() {stopPropagation = true;},
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            },
            listenerArgs = concat([event], arguments, 1),
            i, length;

        do {
          namedListeners = scope.$$listeners[name] || empty;
          event.currentScope = scope;
          for (i = 0, length = namedListeners.length; i < length; i++) {

            // if listeners were deregistered, defragment the array
            if (!namedListeners[i]) {
              namedListeners.splice(i, 1);
              i--;
              length--;
              continue;
            }
            try {
              //allow all listeners attached to the current scope to run
              namedListeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }
          //if any listener on the current scope stops propagation, prevent bubbling
          if (stopPropagation) {
            event.currentScope = null;
            return event;
          }
          //traverse upwards
          scope = scope.$parent;
        } while (scope);

        event.currentScope = null;

        return event;
      },


      /**
       * @ngdoc method
       * @name $rootScope.Scope#$broadcast
       * @kind function
       *
       * @description
       * Dispatches an event `name` downwards to all child scopes (and their children) notifying the
       * registered {@link ng.$rootScope.Scope#$on} listeners.
       *
       * The event life cycle starts at the scope on which `$broadcast` was called. All
       * {@link ng.$rootScope.Scope#$on listeners} listening for `name` event on this scope get
       * notified. Afterwards, the event propagates to all direct and indirect scopes of the current
       * scope and calls all registered listeners along the way. The event cannot be canceled.
       *
       * Any exception emitted from the {@link ng.$rootScope.Scope#$on listeners} will be passed
       * onto the {@link ng.$exceptionHandler $exceptionHandler} service.
       *
       * @param {string} name Event name to broadcast.
       * @param {...*} args Optional one or more arguments which will be passed onto the event listeners.
       * @return {Object} Event object, see {@link ng.$rootScope.Scope#$on}
       */
      $broadcast: function(name, args) {
        var target = this,
            current = target,
            next = target,
            event = {
              name: name,
              targetScope: target,
              preventDefault: function() {
                event.defaultPrevented = true;
              },
              defaultPrevented: false
            };

        if (!target.$$listenerCount[name]) return event;

        var listenerArgs = concat([event], arguments, 1),
            listeners, i, length;

        //down while you can, then up and next sibling or up and next sibling until back at root
        while ((current = next)) {
          event.currentScope = current;
          listeners = current.$$listeners[name] || [];
          for (i = 0, length = listeners.length; i < length; i++) {
            // if listeners were deregistered, defragment the array
            if (!listeners[i]) {
              listeners.splice(i, 1);
              i--;
              length--;
              continue;
            }

            try {
              listeners[i].apply(null, listenerArgs);
            } catch (e) {
              $exceptionHandler(e);
            }
          }

          // Insanity Warning: scope depth-first traversal
          // yes, this code is a bit crazy, but it works and we have tests to prove it!
          // this piece should be kept in sync with the traversal in $digest
          // (though it differs due to having the extra check for $$listenerCount)
          if (!(next = ((current.$$listenerCount[name] && current.$$childHead) ||
              (current !== target && current.$$nextSibling)))) {
            while (current !== target && !(next = current.$$nextSibling)) {
              current = current.$parent;
            }
          }
        }

        event.currentScope = null;
        return event;
      }
    };

    var $rootScope = new Scope();

    //The internal queues. Expose them on the $rootScope for debugging/testing purposes.
    var asyncQueue = $rootScope.$$asyncQueue = [];
    var postDigestQueue = $rootScope.$$postDigestQueue = [];
    var applyAsyncQueue = $rootScope.$$applyAsyncQueue = [];

    return $rootScope;


    function beginPhase(phase) {
      if ($rootScope.$$phase) {
        throw $rootScopeMinErr('inprog', '{0} already in progress', $rootScope.$$phase);
      }

      $rootScope.$$phase = phase;
    }

    function clearPhase() {
      $rootScope.$$phase = null;
    }


    function decrementListenerCount(current, count, name) {
      do {
        current.$$listenerCount[name] -= count;

        if (current.$$listenerCount[name] === 0) {
          delete current.$$listenerCount[name];
        }
      } while ((current = current.$parent));
    }

    /**
     * function used as an initial value for watchers.
     * because it's unique we can easily tell it apart from other values
     */
    function initWatchVal() {}

    function flushApplyAsync() {
      while (applyAsyncQueue.length) {
        try {
          applyAsyncQueue.shift()();
        } catch (e) {
          $exceptionHandler(e);
        }
      }
      applyAsyncId = null;
    }

    function scheduleApplyAsync() {
      if (applyAsyncId === null) {
        applyAsyncId = $browser.defer(function() {
          $rootScope.$apply(flushApplyAsync);
        });
      }
    }
  }];
}

/**
 * @description
 * Private service to sanitize uris for links and images. Used by $compile and $sanitize.
 */
function $$SanitizeUriProvider() {
  var aHrefSanitizationWhitelist = /^\s*(https?|ftp|mailto|tel|file):/,
    imgSrcSanitizationWhitelist = /^\s*((https?|ftp|file|blob):|data:image\/)/;

  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during a[href] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to a[href] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.aHrefSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      aHrefSanitizationWhitelist = regexp;
      return this;
    }
    return aHrefSanitizationWhitelist;
  };


  /**
   * @description
   * Retrieves or overrides the default regular expression that is used for whitelisting of safe
   * urls during img[src] sanitization.
   *
   * The sanitization is a security measure aimed at prevent XSS attacks via html links.
   *
   * Any url about to be assigned to img[src] via data-binding is first normalized and turned into
   * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationWhitelist`
   * regular expression. If a match is found, the original url is written into the dom. Otherwise,
   * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.
   *
   * @param {RegExp=} regexp New regexp to whitelist urls with.
   * @returns {RegExp|ng.$compileProvider} Current RegExp if called without value or self for
   *    chaining otherwise.
   */
  this.imgSrcSanitizationWhitelist = function(regexp) {
    if (isDefined(regexp)) {
      imgSrcSanitizationWhitelist = regexp;
      return this;
    }
    return imgSrcSanitizationWhitelist;
  };

  this.$get = function() {
    return function sanitizeUri(uri, isImage) {
      var regex = isImage ? imgSrcSanitizationWhitelist : aHrefSanitizationWhitelist;
      var normalizedVal;
      normalizedVal = urlResolve(uri).href;
      if (normalizedVal !== '' && !normalizedVal.match(regex)) {
        return 'unsafe:' + normalizedVal;
      }
      return uri;
    };
  };
}

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $sceMinErr = minErr('$sce');

var SCE_CONTEXTS = {
  HTML: 'html',
  CSS: 'css',
  URL: 'url',
  // RESOURCE_URL is a subtype of URL used in contexts where a privileged resource is sourced from a
  // url.  (e.g. ng-include, script src, templateUrl)
  RESOURCE_URL: 'resourceUrl',
  JS: 'js'
};

// Helper functions follow.

function adjustMatcher(matcher) {
  if (matcher === 'self') {
    return matcher;
  } else if (isString(matcher)) {
    // Strings match exactly except for 2 wildcards - '*' and '**'.
    // '*' matches any character except those from the set ':/.?&'.
    // '**' matches any character (like .* in a RegExp).
    // More than 2 *'s raises an error as it's ill defined.
    if (matcher.indexOf('***') > -1) {
      throw $sceMinErr('iwcard',
          'Illegal sequence *** in string matcher.  String: {0}', matcher);
    }
    matcher = escapeForRegexp(matcher).
                  replace('\\*\\*', '.*').
                  replace('\\*', '[^:/.?&;]*');
    return new RegExp('^' + matcher + '$');
  } else if (isRegExp(matcher)) {
    // The only other type of matcher allowed is a Regexp.
    // Match entire URL / disallow partial matches.
    // Flags are reset (i.e. no global, ignoreCase or multiline)
    return new RegExp('^' + matcher.source + '$');
  } else {
    throw $sceMinErr('imatcher',
        'Matchers may only be "self", string patterns or RegExp objects');
  }
}


function adjustMatchers(matchers) {
  var adjustedMatchers = [];
  if (isDefined(matchers)) {
    forEach(matchers, function(matcher) {
      adjustedMatchers.push(adjustMatcher(matcher));
    });
  }
  return adjustedMatchers;
}


/**
 * @ngdoc service
 * @name $sceDelegate
 * @kind function
 *
 * @description
 *
 * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict
 * Contextual Escaping (SCE)} services to AngularJS.
 *
 * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of
 * the `$sce` service to customize the way Strict Contextual Escaping works in AngularJS.  This is
 * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to
 * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things
 * work because `$sce` delegates to `$sceDelegate` for these operations.
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.
 *
 * The default instance of `$sceDelegate` should work out of the box with little pain.  While you
 * can override it completely to change the behavior of `$sce`, the common case would
 * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting
 * your own whitelists and blacklists for trusting URLs used for loading AngularJS resources such as
 * templates.  Refer {@link ng.$sceDelegateProvider#resourceUrlWhitelist
 * $sceDelegateProvider.resourceUrlWhitelist} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 */

/**
 * @ngdoc provider
 * @name $sceDelegateProvider
 * @description
 *
 * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate
 * $sceDelegate} service.  This allows one to get/set the whitelists and blacklists used to ensure
 * that the URLs used for sourcing Angular templates are safe.  Refer {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist $sceDelegateProvider.resourceUrlWhitelist} and
 * {@link ng.$sceDelegateProvider#resourceUrlBlacklist $sceDelegateProvider.resourceUrlBlacklist}
 *
 * For the general details about this service in Angular, read the main page for {@link ng.$sce
 * Strict Contextual Escaping (SCE)}.
 *
 * **Example**:  Consider the following case. <a name="example"></a>
 *
 * - your app is hosted at url `http://myapp.example.com/`
 * - but some of your templates are hosted on other domains you control such as
 *   `http://srv01.assets.example.com/`,  `http://srv02.assets.example.com/`, etc.
 * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.
 *
 * Here is what a secure configuration for this scenario might look like:
 *
 * ```
 *  angular.module('myApp', []).config(function($sceDelegateProvider) {
 *    $sceDelegateProvider.resourceUrlWhitelist([
 *      // Allow same origin resource loads.
 *      'self',
 *      // Allow loading from our assets domain.  Notice the difference between * and **.
 *      'http://srv*.assets.example.com/**'
 *    ]);
 *
 *    // The blacklist overrides the whitelist so the open redirect here is blocked.
 *    $sceDelegateProvider.resourceUrlBlacklist([
 *      'http://myapp.example.com/clickThru**'
 *    ]);
 *  });
 * ```
 */

function $SceDelegateProvider() {
  this.SCE_CONTEXTS = SCE_CONTEXTS;

  // Resource URLs can also be trusted by policy.
  var resourceUrlWhitelist = ['self'],
      resourceUrlBlacklist = [];

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlWhitelist
   * @kind function
   *
   * @param {Array=} whitelist When provided, replaces the resourceUrlWhitelist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     Note: **an empty whitelist array will block all URLs**!
   *
   * @return {Array} the currently set whitelist array.
   *
   * The **default value** when no whitelist has been explicitly set is `['self']` allowing only
   * same origin resource requests.
   *
   * @description
   * Sets/Gets the whitelist of trusted resource URLs.
   */
  this.resourceUrlWhitelist = function(value) {
    if (arguments.length) {
      resourceUrlWhitelist = adjustMatchers(value);
    }
    return resourceUrlWhitelist;
  };

  /**
   * @ngdoc method
   * @name $sceDelegateProvider#resourceUrlBlacklist
   * @kind function
   *
   * @param {Array=} blacklist When provided, replaces the resourceUrlBlacklist with the value
   *     provided.  This must be an array or null.  A snapshot of this array is used so further
   *     changes to the array are ignored.
   *
   *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items
   *     allowed in this array.
   *
   *     The typical usage for the blacklist is to **block
   *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as
   *     these would otherwise be trusted but actually return content from the redirected domain.
   *
   *     Finally, **the blacklist overrides the whitelist** and has the final say.
   *
   * @return {Array} the currently set blacklist array.
   *
   * The **default value** when no whitelist has been explicitly set is the empty array (i.e. there
   * is no blacklist.)
   *
   * @description
   * Sets/Gets the blacklist of trusted resource URLs.
   */

  this.resourceUrlBlacklist = function(value) {
    if (arguments.length) {
      resourceUrlBlacklist = adjustMatchers(value);
    }
    return resourceUrlBlacklist;
  };

  this.$get = ['$injector', function($injector) {

    var htmlSanitizer = function htmlSanitizer(html) {
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    };

    if ($injector.has('$sanitize')) {
      htmlSanitizer = $injector.get('$sanitize');
    }


    function matchUrl(matcher, parsedUrl) {
      if (matcher === 'self') {
        return urlIsSameOrigin(parsedUrl);
      } else {
        // definitely a regex.  See adjustMatchers()
        return !!matcher.exec(parsedUrl.href);
      }
    }

    function isResourceUrlAllowedByPolicy(url) {
      var parsedUrl = urlResolve(url.toString());
      var i, n, allowed = false;
      // Ensure that at least one item from the whitelist allows this url.
      for (i = 0, n = resourceUrlWhitelist.length; i < n; i++) {
        if (matchUrl(resourceUrlWhitelist[i], parsedUrl)) {
          allowed = true;
          break;
        }
      }
      if (allowed) {
        // Ensure that no item from the blacklist blocked this url.
        for (i = 0, n = resourceUrlBlacklist.length; i < n; i++) {
          if (matchUrl(resourceUrlBlacklist[i], parsedUrl)) {
            allowed = false;
            break;
          }
        }
      }
      return allowed;
    }

    function generateHolderType(Base) {
      var holderType = function TrustedValueHolderType(trustedValue) {
        this.$$unwrapTrustedValue = function() {
          return trustedValue;
        };
      };
      if (Base) {
        holderType.prototype = new Base();
      }
      holderType.prototype.valueOf = function sceValueOf() {
        return this.$$unwrapTrustedValue();
      };
      holderType.prototype.toString = function sceToString() {
        return this.$$unwrapTrustedValue().toString();
      };
      return holderType;
    }

    var trustedValueHolderBase = generateHolderType(),
        byType = {};

    byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.URL] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);
    byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(byType[SCE_CONTEXTS.URL]);

    /**
     * @ngdoc method
     * @name $sceDelegate#trustAs
     *
     * @description
     * Returns an object that is trusted by angular for use in specified strict
     * contextual escaping contexts (such as ng-bind-html, ng-include, any src
     * attribute interpolation, any dom event binding attribute interpolation
     * such as for onclick,  etc.) that uses the provided value.
     * See {@link ng.$sce $sce} for enabling strict contextual escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resourceUrl, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */
    function trustAs(type, trustedValue) {
      var Constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (!Constructor) {
        throw $sceMinErr('icontext',
            'Attempted to trust a value in invalid context. Context: {0}; Value: {1}',
            type, trustedValue);
      }
      if (trustedValue === null || trustedValue === undefined || trustedValue === '') {
        return trustedValue;
      }
      // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting
      // mutable objects, we ensure here that the value passed in is actually a string.
      if (typeof trustedValue !== 'string') {
        throw $sceMinErr('itype',
            'Attempted to trust a non-string value in a content requiring a string: Context: {0}',
            type);
      }
      return new Constructor(trustedValue);
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#valueOf
     *
     * @description
     * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs
     * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.
     *
     * If the passed parameter is not a value that had been returned by {@link
     * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, returns it as-is.
     *
     * @param {*} value The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}
     *      call or anything else.
     * @returns {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns
     *     `value` unchanged.
     */
    function valueOf(maybeTrusted) {
      if (maybeTrusted instanceof trustedValueHolderBase) {
        return maybeTrusted.$$unwrapTrustedValue();
      } else {
        return maybeTrusted;
      }
    }

    /**
     * @ngdoc method
     * @name $sceDelegate#getTrusted
     *
     * @description
     * Takes the result of a {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`} call and
     * returns the originally supplied value if the queried context type is a supertype of the
     * created type.  If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} call.
     * @returns {*} The value the was originally provided to {@link ng.$sceDelegate#trustAs
     *     `$sceDelegate.trustAs`} if valid in this context.  Otherwise, throws an exception.
     */
    function getTrusted(type, maybeTrusted) {
      if (maybeTrusted === null || maybeTrusted === undefined || maybeTrusted === '') {
        return maybeTrusted;
      }
      var constructor = (byType.hasOwnProperty(type) ? byType[type] : null);
      if (constructor && maybeTrusted instanceof constructor) {
        return maybeTrusted.$$unwrapTrustedValue();
      }
      // If we get here, then we may only take one of two actions.
      // 1. sanitize the value for the requested type, or
      // 2. throw an exception.
      if (type === SCE_CONTEXTS.RESOURCE_URL) {
        if (isResourceUrlAllowedByPolicy(maybeTrusted)) {
          return maybeTrusted;
        } else {
          throw $sceMinErr('insecurl',
              'Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}',
              maybeTrusted.toString());
        }
      } else if (type === SCE_CONTEXTS.HTML) {
        return htmlSanitizer(maybeTrusted);
      }
      throw $sceMinErr('unsafe', 'Attempting to use an unsafe value in a safe context.');
    }

    return { trustAs: trustAs,
             getTrusted: getTrusted,
             valueOf: valueOf };
  }];
}


/**
 * @ngdoc provider
 * @name $sceProvider
 * @description
 *
 * The $sceProvider provider allows developers to configure the {@link ng.$sce $sce} service.
 * -   enable/disable Strict Contextual Escaping (SCE) in a module
 * -   override the default implementation with a custom delegate
 *
 * Read more about {@link ng.$sce Strict Contextual Escaping (SCE)}.
 */

/* jshint maxlen: false*/

/**
 * @ngdoc service
 * @name $sce
 * @kind function
 *
 * @description
 *
 * `$sce` is a service that provides Strict Contextual Escaping services to AngularJS.
 *
 * # Strict Contextual Escaping
 *
 * Strict Contextual Escaping (SCE) is a mode in which AngularJS requires bindings in certain
 * contexts to result in a value that is marked as safe to use for that context.  One example of
 * such a context is binding arbitrary html controlled by the user via `ng-bind-html`.  We refer
 * to these contexts as privileged or SCE contexts.
 *
 * As of version 1.2, Angular ships with SCE enabled by default.
 *
 * Note:  When enabled (the default), IE<11 in quirks mode is not supported.  In this mode, IE<11 allow
 * one to execute arbitrary javascript by the use of the expression() syntax.  Refer
 * <http://blogs.msdn.com/b/ie/archive/2008/10/16/ending-expressions.aspx> to learn more about them.
 * You can ensure your document is in standards mode and not quirks mode by adding `<!doctype html>`
 * to the top of your HTML document.
 *
 * SCE assists in writing code in way that (a) is secure by default and (b) makes auditing for
 * security vulnerabilities such as XSS, clickjacking, etc. a lot easier.
 *
 * Here's an example of a binding in a privileged context:
 *
 * ```
 * <input ng-model="userHtml">
 * <div ng-bind-html="userHtml"></div>
 * ```
 *
 * Notice that `ng-bind-html` is bound to `userHtml` controlled by the user.  With SCE
 * disabled, this application allows the user to render arbitrary HTML into the DIV.
 * In a more realistic example, one may be rendering user comments, blog articles, etc. via
 * bindings.  (HTML is just one example of a context where rendering user controlled input creates
 * security vulnerabilities.)
 *
 * For the case of HTML, you might use a library, either on the client side, or on the server side,
 * to sanitize unsafe HTML before binding to the value and rendering it in the document.
 *
 * How would you ensure that every place that used these types of bindings was bound to a value that
 * was sanitized by your library (or returned as safe for rendering by your server?)  How can you
 * ensure that you didn't accidentally delete the line that sanitized the value, or renamed some
 * properties/fields and forgot to update the binding to the sanitized value?
 *
 * To be secure by default, you want to ensure that any such bindings are disallowed unless you can
 * determine that something explicitly says it's safe to use a value for binding in that
 * context.  You can then audit your code (a simple grep would do) to ensure that this is only done
 * for those values that you can easily tell are safe - because they were received from your server,
 * sanitized by your library, etc.  You can organize your codebase to help with this - perhaps
 * allowing only the files in a specific directory to do this.  Ensuring that the internal API
 * exposed by that code doesn't markup arbitrary values as safe then becomes a more manageable task.
 *
 * In the case of AngularJS' SCE service, one uses {@link ng.$sce#trustAs $sce.trustAs}
 * (and shorthand methods such as {@link ng.$sce#trustAsHtml $sce.trustAsHtml}, etc.) to
 * obtain values that will be accepted by SCE / privileged contexts.
 *
 *
 * ## How does it work?
 *
 * In privileged contexts, directives and code will bind to the result of {@link ng.$sce#getTrusted
 * $sce.getTrusted(context, value)} rather than to the value directly.  Directives use {@link
 * ng.$sce#parseAs $sce.parseAs} rather than `$parse` to watch attribute bindings, which performs the
 * {@link ng.$sce#getTrusted $sce.getTrusted} behind the scenes on non-constant literals.
 *
 * As an example, {@link ng.directive:ngBindHtml ngBindHtml} uses {@link
 * ng.$sce#parseAsHtml $sce.parseAsHtml(binding expression)}.  Here's the actual code (slightly
 * simplified):
 *
 * ```
 * var ngBindHtmlDirective = ['$sce', function($sce) {
 *   return function(scope, element, attr) {
 *     scope.$watch($sce.parseAsHtml(attr.ngBindHtml), function(value) {
 *       element.html(value || '');
 *     });
 *   };
 * }];
 * ```
 *
 * ## Impact on loading templates
 *
 * This applies both to the {@link ng.directive:ngInclude `ng-include`} directive as well as
 * `templateUrl`'s specified by {@link guide/directive directives}.
 *
 * By default, Angular only loads templates from the same domain and protocol as the application
 * document.  This is done by calling {@link ng.$sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on the template URL.  To load templates from other domains and/or
 * protocols, you may either either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist
 * them} or {@link ng.$sce#trustAsResourceUrl wrap it} into a trusted value.
 *
 * *Please note*:
 * The browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy apply in addition to this and may further restrict whether the template is successfully
 * loaded.  This means that without the right CORS policy, loading templates from a different domain
 * won't work on all browsers.  Also, loading templates from `file://` URL does not work on some
 * browsers.
 *
 * ## This feels like too much overhead
 *
 * It's important to remember that SCE only applies to interpolation expressions.
 *
 * If your expressions are constant literals, they're automatically trusted and you don't need to
 * call `$sce.trustAs` on them (remember to include the `ngSanitize` module) (e.g.
 * `<div ng-bind-html="'<b>implicitly trusted</b>'"></div>`) just works.
 *
 * Additionally, `a[href]` and `img[src]` automatically sanitize their URLs and do not pass them
 * through {@link ng.$sce#getTrusted $sce.getTrusted}.  SCE doesn't play a role here.
 *
 * The included {@link ng.$sceDelegate $sceDelegate} comes with sane defaults to allow you to load
 * templates in `ng-include` from your application's domain without having to even know about SCE.
 * It blocks loading templates from other domains or loading templates over http from an https
 * served document.  You can change these by setting your own custom {@link
 * ng.$sceDelegateProvider#resourceUrlWhitelist whitelists} and {@link
 * ng.$sceDelegateProvider#resourceUrlBlacklist blacklists} for matching such URLs.
 *
 * This significantly reduces the overhead.  It is far easier to pay the small overhead and have an
 * application that's secure and can be audited to verify that with much more ease than bolting
 * security onto an application later.
 *
 * <a name="contexts"></a>
 * ## What trusted context types are supported?
 *
 * | Context             | Notes          |
 * |---------------------|----------------|
 * | `$sce.HTML`         | For HTML that's safe to source into the application.  The {@link ng.directive:ngBindHtml ngBindHtml} directive uses this context for bindings. If an unsafe value is encountered and the {@link ngSanitize $sanitize} module is present this will sanitize the value instead of throwing an error. |
 * | `$sce.CSS`          | For CSS that's safe to source into the application.  Currently unused.  Feel free to use it in your own directives. |
 * | `$sce.URL`          | For URLs that are safe to follow as links.  Currently unused (`<a href=` and `<img src=` sanitize their urls and don't constitute an SCE context. |
 * | `$sce.RESOURCE_URL` | For URLs that are not only safe to follow as links, but whose contents are also safe to include in your application.  Examples include `ng-include`, `src` / `ngSrc` bindings for tags other than `IMG` (e.g. `IFRAME`, `OBJECT`, etc.)  <br><br>Note that `$sce.RESOURCE_URL` makes a stronger statement about the URL than `$sce.URL` does and therefore contexts requiring values trusted for `$sce.RESOURCE_URL` can be used anywhere that values trusted for `$sce.URL` are required. |
 * | `$sce.JS`           | For JavaScript that is safe to execute in your application's context.  Currently unused.  Feel free to use it in your own directives. |
 *
 * ## Format of items in {@link ng.$sceDelegateProvider#resourceUrlWhitelist resourceUrlWhitelist}/{@link ng.$sceDelegateProvider#resourceUrlBlacklist Blacklist} <a name="resourceUrlPatternItem"></a>
 *
 *  Each element in these arrays must be one of the following:
 *
 *  - **'self'**
 *    - The special **string**, `'self'`, can be used to match against all URLs of the **same
 *      domain** as the application document using the **same protocol**.
 *  - **String** (except the special value `'self'`)
 *    - The string is matched against the full *normalized / absolute URL* of the resource
 *      being tested (substring matches are not good enough.)
 *    - There are exactly **two wildcard sequences** - `*` and `**`.  All other characters
 *      match themselves.
 *    - `*`: matches zero or more occurrences of any character other than one of the following 6
 *      characters: '`:`', '`/`', '`.`', '`?`', '`&`' and ';'.  It's a useful wildcard for use
 *      in a whitelist.
 *    - `**`: matches zero or more occurrences of *any* character.  As such, it's not
 *      not appropriate to use in for a scheme, domain, etc. as it would match too much.  (e.g.
 *      http://**.example.com/ would match http://evil.com/?ignore=.example.com/ and that might
 *      not have been the intention.)  Its usage at the very end of the path is ok.  (e.g.
 *      http://foo.example.com/templates/**).
 *  - **RegExp** (*see caveat below*)
 *    - *Caveat*:  While regular expressions are powerful and offer great flexibility,  their syntax
 *      (and all the inevitable escaping) makes them *harder to maintain*.  It's easy to
 *      accidentally introduce a bug when one updates a complex expression (imho, all regexes should
 *      have good test coverage.).  For instance, the use of `.` in the regex is correct only in a
 *      small number of cases.  A `.` character in the regex used when matching the scheme or a
 *      subdomain could be matched against a `:` or literal `.` that was likely not intended.   It
 *      is highly recommended to use the string patterns and only fall back to regular expressions
 *      if they as a last resort.
 *    - The regular expression must be an instance of RegExp (i.e. not a string.)  It is
 *      matched against the **entire** *normalized / absolute URL* of the resource being tested
 *      (even when the RegExp did not have the `^` and `$` codes.)  In addition, any flags
 *      present on the RegExp (such as multiline, global, ignoreCase) are ignored.
 *    - If you are generating your JavaScript from some other templating engine (not
 *      recommended, e.g. in issue [#4006](https://github.com/angular/angular.js/issues/4006)),
 *      remember to escape your regular expression (and be aware that you might need more than
 *      one level of escaping depending on your templating engine and the way you interpolated
 *      the value.)  Do make use of your platform's escaping mechanism as it might be good
 *      enough before coding your own.  e.g. Ruby has
 *      [Regexp.escape(str)](http://www.ruby-doc.org/core-2.0.0/Regexp.html#method-c-escape)
 *      and Python has [re.escape](http://docs.python.org/library/re.html#re.escape).
 *      Javascript lacks a similar built in function for escaping.  Take a look at Google
 *      Closure library's [goog.string.regExpEscape(s)](
 *      http://docs.closure-library.googlecode.com/git/closure_goog_string_string.js.source.html#line962).
 *
 * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} for an example.
 *
 * ## Show me an example using SCE.
 *
 * <example module="mySceApp" deps="angular-sanitize.js">
 * <file name="index.html">
 *   <div ng-controller="AppController as myCtrl">
 *     <i ng-bind-html="myCtrl.explicitlyTrustedHtml" id="explicitlyTrustedHtml"></i><br><br>
 *     <b>User comments</b><br>
 *     By default, HTML that isn't explicitly trusted (e.g. Alice's comment) is sanitized when
 *     $sanitize is available.  If $sanitize isn't available, this results in an error instead of an
 *     exploit.
 *     <div class="well">
 *       <div ng-repeat="userComment in myCtrl.userComments">
 *         <b>{{userComment.name}}</b>:
 *         <span ng-bind-html="userComment.htmlComment" class="htmlComment"></span>
 *         <br>
 *       </div>
 *     </div>
 *   </div>
 * </file>
 *
 * <file name="script.js">
 *   angular.module('mySceApp', ['ngSanitize'])
 *     .controller('AppController', ['$http', '$templateCache', '$sce',
 *       function($http, $templateCache, $sce) {
 *         var self = this;
 *         $http.get("test_data.json", {cache: $templateCache}).success(function(userComments) {
 *           self.userComments = userComments;
 *         });
 *         self.explicitlyTrustedHtml = $sce.trustAsHtml(
 *             '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *             'sanitization.&quot;">Hover over this text.</span>');
 *       }]);
 * </file>
 *
 * <file name="test_data.json">
 * [
 *   { "name": "Alice",
 *     "htmlComment":
 *         "<span onmouseover='this.textContent=\"PWN3D!\"'>Is <i>anyone</i> reading this?</span>"
 *   },
 *   { "name": "Bob",
 *     "htmlComment": "<i>Yes!</i>  Am I the only other one?"
 *   }
 * ]
 * </file>
 *
 * <file name="protractor.js" type="protractor">
 *   describe('SCE doc demo', function() {
 *     it('should sanitize untrusted values', function() {
 *       expect(element.all(by.css('.htmlComment')).first().getInnerHtml())
 *           .toBe('<span>Is <i>anyone</i> reading this?</span>');
 *     });
 *
 *     it('should NOT sanitize explicitly trusted values', function() {
 *       expect(element(by.id('explicitlyTrustedHtml')).getInnerHtml()).toBe(
 *           '<span onmouseover="this.textContent=&quot;Explicitly trusted HTML bypasses ' +
 *           'sanitization.&quot;">Hover over this text.</span>');
 *     });
 *   });
 * </file>
 * </example>
 *
 *
 *
 * ## Can I disable SCE completely?
 *
 * Yes, you can.  However, this is strongly discouraged.  SCE gives you a lot of security benefits
 * for little coding overhead.  It will be much harder to take an SCE disabled application and
 * either secure it on your own or enable SCE at a later stage.  It might make sense to disable SCE
 * for cases where you have a lot of existing code that was written before SCE was introduced and
 * you're migrating them a module at a time.
 *
 * That said, here's how you can completely disable SCE:
 *
 * ```
 * angular.module('myAppWithSceDisabledmyApp', []).config(function($sceProvider) {
 *   // Completely disable SCE.  For demonstration purposes only!
 *   // Do not use in new projects.
 *   $sceProvider.enabled(false);
 * });
 * ```
 *
 */
/* jshint maxlen: 100 */

function $SceProvider() {
  var enabled = true;

  /**
   * @ngdoc method
   * @name $sceProvider#enabled
   * @kind function
   *
   * @param {boolean=} value If provided, then enables/disables SCE.
   * @return {boolean} true if SCE is enabled, false otherwise.
   *
   * @description
   * Enables/disables SCE and returns the current value.
   */
  this.enabled = function(value) {
    if (arguments.length) {
      enabled = !!value;
    }
    return enabled;
  };


  /* Design notes on the default implementation for SCE.
   *
   * The API contract for the SCE delegate
   * -------------------------------------
   * The SCE delegate object must provide the following 3 methods:
   *
   * - trustAs(contextEnum, value)
   *     This method is used to tell the SCE service that the provided value is OK to use in the
   *     contexts specified by contextEnum.  It must return an object that will be accepted by
   *     getTrusted() for a compatible contextEnum and return this value.
   *
   * - valueOf(value)
   *     For values that were not produced by trustAs(), return them as is.  For values that were
   *     produced by trustAs(), return the corresponding input value to trustAs.  Basically, if
   *     trustAs is wrapping the given values into some type, this operation unwraps it when given
   *     such a value.
   *
   * - getTrusted(contextEnum, value)
   *     This function should return the a value that is safe to use in the context specified by
   *     contextEnum or throw and exception otherwise.
   *
   * NOTE: This contract deliberately does NOT state that values returned by trustAs() must be
   * opaque or wrapped in some holder object.  That happens to be an implementation detail.  For
   * instance, an implementation could maintain a registry of all trusted objects by context.  In
   * such a case, trustAs() would return the same object that was passed in.  getTrusted() would
   * return the same object passed in if it was found in the registry under a compatible context or
   * throw an exception otherwise.  An implementation might only wrap values some of the time based
   * on some criteria.  getTrusted() might return a value and not throw an exception for special
   * constants or objects even if not wrapped.  All such implementations fulfill this contract.
   *
   *
   * A note on the inheritance model for SCE contexts
   * ------------------------------------------------
   * I've used inheritance and made RESOURCE_URL wrapped types a subtype of URL wrapped types.  This
   * is purely an implementation details.
   *
   * The contract is simply this:
   *
   *     getTrusted($sce.RESOURCE_URL, value) succeeding implies that getTrusted($sce.URL, value)
   *     will also succeed.
   *
   * Inheritance happens to capture this in a natural way.  In some future, we
   * may not use inheritance anymore.  That is OK because no code outside of
   * sce.js and sceSpecs.js would need to be aware of this detail.
   */

  this.$get = ['$parse', '$sceDelegate', function(
                $parse,   $sceDelegate) {
    // Prereq: Ensure that we're not running in IE<11 quirks mode.  In that mode, IE < 11 allow
    // the "expression(javascript expression)" syntax which is insecure.
    if (enabled && msie < 8) {
      throw $sceMinErr('iequirks',
        'Strict Contextual Escaping does not support Internet Explorer version < 11 in quirks ' +
        'mode.  You can fix this by adding the text <!doctype html> to the top of your HTML ' +
        'document.  See http://docs.angularjs.org/api/ng.$sce for more information.');
    }

    var sce = shallowCopy(SCE_CONTEXTS);

    /**
     * @ngdoc method
     * @name $sce#isEnabled
     * @kind function
     *
     * @return {Boolean} true if SCE is enabled, false otherwise.  If you want to set the value, you
     * have to do it at module config time on {@link ng.$sceProvider $sceProvider}.
     *
     * @description
     * Returns a boolean indicating if SCE is enabled.
     */
    sce.isEnabled = function() {
      return enabled;
    };
    sce.trustAs = $sceDelegate.trustAs;
    sce.getTrusted = $sceDelegate.getTrusted;
    sce.valueOf = $sceDelegate.valueOf;

    if (!enabled) {
      sce.trustAs = sce.getTrusted = function(type, value) { return value; };
      sce.valueOf = identity;
    }

    /**
     * @ngdoc method
     * @name $sce#parseAs
     *
     * @description
     * Converts Angular {@link guide/expression expression} into a function.  This is like {@link
     * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it
     * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,
     * *result*)}
     *
     * @param {string} type The kind of SCE context in which this result will be used.
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */
    sce.parseAs = function sceParseAs(type, expr) {
      var parsed = $parse(expr);
      if (parsed.literal && parsed.constant) {
        return parsed;
      } else {
        return $parse(expr, function(value) {
          return sce.getTrusted(type, value);
        });
      }
    };

    /**
     * @ngdoc method
     * @name $sce#trustAs
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.  As such,
     * returns an object that is trusted by angular for use in specified strict contextual
     * escaping contexts (such as ng-bind-html, ng-include, any src attribute
     * interpolation, any dom event binding attribute interpolation such as for onclick,  etc.)
     * that uses the provided value.  See * {@link ng.$sce $sce} for enabling strict contextual
     * escaping.
     *
     * @param {string} type The kind of context in which this value is safe for use.  e.g. url,
     *   resource_url, html, js and css.
     * @param {*} value The value that that should be considered trusted/safe.
     * @returns {*} A value that can be used to stand in for the provided `value` in places
     * where Angular expects a $sce.trustAs() return value.
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsHtml
     *
     * @description
     * Shorthand method.  `$sce.trustAsHtml(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedHtml
     *     $sce.getTrustedHtml(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedUrl
     *     $sce.getTrustedUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.trustAsResourceUrl(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedResourceUrl
     *     $sce.getTrustedResourceUrl(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the return
     *     value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#trustAsJs
     *
     * @description
     * Shorthand method.  `$sce.trustAsJs(value)` →
     *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}
     *
     * @param {*} value The value to trustAs.
     * @returns {*} An object that can be passed to {@link ng.$sce#getTrustedJs
     *     $sce.getTrustedJs(value)} to obtain the original value.  (privileged directives
     *     only accept expressions that are either literal constants or are the
     *     return value of {@link ng.$sce#trustAs $sce.trustAs}.)
     */

    /**
     * @ngdoc method
     * @name $sce#getTrusted
     *
     * @description
     * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,
     * takes the result of a {@link ng.$sce#trustAs `$sce.trustAs`}() call and returns the
     * originally supplied value if the queried context type is a supertype of the created type.
     * If this condition isn't satisfied, throws an exception.
     *
     * @param {string} type The kind of context in which this value is to be used.
     * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs `$sce.trustAs`}
     *                         call.
     * @returns {*} The value the was originally provided to
     *              {@link ng.$sce#trustAs `$sce.trustAs`} if valid in this context.
     *              Otherwise, throws an exception.
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedHtml
     *
     * @description
     * Shorthand method.  `$sce.getTrustedHtml(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.HTML, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedCss
     *
     * @description
     * Shorthand method.  `$sce.getTrustedCss(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.CSS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}
     *
     * @param {*} value The value to pass to `$sceDelegate.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#getTrustedJs
     *
     * @description
     * Shorthand method.  `$sce.getTrustedJs(value)` →
     *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}
     *
     * @param {*} value The value to pass to `$sce.getTrusted`.
     * @returns {*} The return value of `$sce.getTrusted($sce.JS, value)`
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsHtml
     *
     * @description
     * Shorthand method.  `$sce.parseAsHtml(expression string)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.HTML, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsCss
     *
     * @description
     * Shorthand method.  `$sce.parseAsCss(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.CSS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsResourceUrl
     *
     * @description
     * Shorthand method.  `$sce.parseAsResourceUrl(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    /**
     * @ngdoc method
     * @name $sce#parseAsJs
     *
     * @description
     * Shorthand method.  `$sce.parseAsJs(value)` →
     *     {@link ng.$sce#parseAs `$sce.parseAs($sce.JS, value)`}
     *
     * @param {string} expression String expression to compile.
     * @returns {function(context, locals)} a function which represents the compiled expression:
     *
     *    * `context` – `{object}` – an object against which any expressions embedded in the strings
     *      are evaluated against (typically a scope object).
     *    * `locals` – `{object=}` – local variables context object, useful for overriding values in
     *      `context`.
     */

    // Shorthand delegations.
    var parse = sce.parseAs,
        getTrusted = sce.getTrusted,
        trustAs = sce.trustAs;

    forEach(SCE_CONTEXTS, function(enumValue, name) {
      var lName = lowercase(name);
      sce[camelCase("parse_as_" + lName)] = function(expr) {
        return parse(enumValue, expr);
      };
      sce[camelCase("get_trusted_" + lName)] = function(value) {
        return getTrusted(enumValue, value);
      };
      sce[camelCase("trust_as_" + lName)] = function(value) {
        return trustAs(enumValue, value);
      };
    });

    return sce;
  }];
}

/**
 * !!! This is an undocumented "private" service !!!
 *
 * @name $sniffer
 * @requires $window
 * @requires $document
 *
 * @property {boolean} history Does the browser support html5 history api ?
 * @property {boolean} transitions Does the browser support CSS transition events ?
 * @property {boolean} animations Does the browser support CSS animation events ?
 *
 * @description
 * This is very simple implementation of testing browser's features.
 */
function $SnifferProvider() {
  this.$get = ['$window', '$document', function($window, $document) {
    var eventSupport = {},
        android =
          int((/android (\d+)/.exec(lowercase(($window.navigator || {}).userAgent)) || [])[1]),
        boxee = /Boxee/i.test(($window.navigator || {}).userAgent),
        document = $document[0] || {},
        vendorPrefix,
        vendorRegex = /^(Moz|webkit|ms)(?=[A-Z])/,
        bodyStyle = document.body && document.body.style,
        transitions = false,
        animations = false,
        match;

    if (bodyStyle) {
      for (var prop in bodyStyle) {
        if (match = vendorRegex.exec(prop)) {
          vendorPrefix = match[0];
          vendorPrefix = vendorPrefix.substr(0, 1).toUpperCase() + vendorPrefix.substr(1);
          break;
        }
      }

      if (!vendorPrefix) {
        vendorPrefix = ('WebkitOpacity' in bodyStyle) && 'webkit';
      }

      transitions = !!(('transition' in bodyStyle) || (vendorPrefix + 'Transition' in bodyStyle));
      animations  = !!(('animation' in bodyStyle) || (vendorPrefix + 'Animation' in bodyStyle));

      if (android && (!transitions ||  !animations)) {
        transitions = isString(document.body.style.webkitTransition);
        animations = isString(document.body.style.webkitAnimation);
      }
    }


    return {
      // Android has history.pushState, but it does not update location correctly
      // so let's not use the history API at all.
      // http://code.google.com/p/android/issues/detail?id=17471
      // https://github.com/angular/angular.js/issues/904

      // older webkit browser (533.9) on Boxee box has exactly the same problem as Android has
      // so let's not use the history API also
      // We are purposefully using `!(android < 4)` to cover the case when `android` is undefined
      // jshint -W018
      history: !!($window.history && $window.history.pushState && !(android < 4) && !boxee),
      // jshint +W018
      hasEvent: function(event) {
        // IE9 implements 'input' event it's so fubared that we rather pretend that it doesn't have
        // it. In particular the event is not fired when backspace or delete key are pressed or
        // when cut operation is performed.
        // IE10+ implements 'input' event but it erroneously fires under various situations,
        // e.g. when placeholder changes, or a form is focused.
        if (event === 'input' && msie <= 11) return false;

        if (isUndefined(eventSupport[event])) {
          var divElm = document.createElement('div');
          eventSupport[event] = 'on' + event in divElm;
        }

        return eventSupport[event];
      },
      csp: csp(),
      vendorPrefix: vendorPrefix,
      transitions: transitions,
      animations: animations,
      android: android
    };
  }];
}

var $compileMinErr = minErr('$compile');

/**
 * @ngdoc service
 * @name $templateRequest
 *
 * @description
 * The `$templateRequest` service downloads the provided template using `$http` and, upon success,
 * stores the contents inside of `$templateCache`. If the HTTP request fails or the response data
 * of the HTTP request is empty, a `$compile` error will be thrown (the exception can be thwarted
 * by setting the 2nd parameter of the function to true).
 *
 * @param {string} tpl The HTTP request template URL
 * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty
 *
 * @return {Promise} the HTTP Promise for the given.
 *
 * @property {number} totalPendingRequests total amount of pending template requests being downloaded.
 */
function $TemplateRequestProvider() {
  this.$get = ['$templateCache', '$http', '$q', function($templateCache, $http, $q) {
    function handleRequestFn(tpl, ignoreRequestError) {
      handleRequestFn.totalPendingRequests++;

      var transformResponse = $http.defaults && $http.defaults.transformResponse;

      if (isArray(transformResponse)) {
        transformResponse = transformResponse.filter(function(transformer) {
          return transformer !== defaultHttpResponseTransform;
        });
      } else if (transformResponse === defaultHttpResponseTransform) {
        transformResponse = null;
      }

      var httpOptions = {
        cache: $templateCache,
        transformResponse: transformResponse
      };

      return $http.get(tpl, httpOptions)
        ['finally'](function() {
          handleRequestFn.totalPendingRequests--;
        })
        .then(function(response) {
          return response.data;
        }, handleError);

      function handleError(resp) {
        if (!ignoreRequestError) {
          throw $compileMinErr('tpload', 'Failed to load template: {0}', tpl);
        }
        return $q.reject(resp);
      }
    }

    handleRequestFn.totalPendingRequests = 0;

    return handleRequestFn;
  }];
}

function $$TestabilityProvider() {
  this.$get = ['$rootScope', '$browser', '$location',
       function($rootScope,   $browser,   $location) {

    /**
     * @name $testability
     *
     * @description
     * The private $$testability service provides a collection of methods for use when debugging
     * or by automated test and debugging tools.
     */
    var testability = {};

    /**
     * @name $$testability#findBindings
     *
     * @description
     * Returns an array of elements that are bound (via ng-bind or {{}})
     * to expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The binding expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression. Filters and whitespace are ignored.
     */
    testability.findBindings = function(element, expression, opt_exactMatch) {
      var bindings = element.getElementsByClassName('ng-binding');
      var matches = [];
      forEach(bindings, function(binding) {
        var dataBinding = angular.element(binding).data('$binding');
        if (dataBinding) {
          forEach(dataBinding, function(bindingName) {
            if (opt_exactMatch) {
              var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
              if (matcher.test(bindingName)) {
                matches.push(binding);
              }
            } else {
              if (bindingName.indexOf(expression) != -1) {
                matches.push(binding);
              }
            }
          });
        }
      });
      return matches;
    };

    /**
     * @name $$testability#findModels
     *
     * @description
     * Returns an array of elements that are two-way found via ng-model to
     * expressions matching the input.
     *
     * @param {Element} element The element root to search from.
     * @param {string} expression The model expression to match.
     * @param {boolean} opt_exactMatch If true, only returns exact matches
     *     for the expression.
     */
    testability.findModels = function(element, expression, opt_exactMatch) {
      var prefixes = ['ng-', 'data-ng-', 'ng\\:'];
      for (var p = 0; p < prefixes.length; ++p) {
        var attributeEquals = opt_exactMatch ? '=' : '*=';
        var selector = '[' + prefixes[p] + 'model' + attributeEquals + '"' + expression + '"]';
        var elements = element.querySelectorAll(selector);
        if (elements.length) {
          return elements;
        }
      }
    };

    /**
     * @name $$testability#getLocation
     *
     * @description
     * Shortcut for getting the location in a browser agnostic way. Returns
     *     the path, search, and hash. (e.g. /path?a=b#hash)
     */
    testability.getLocation = function() {
      return $location.url();
    };

    /**
     * @name $$testability#setLocation
     *
     * @description
     * Shortcut for navigating to a location without doing a full page reload.
     *
     * @param {string} url The location url (path, search and hash,
     *     e.g. /path?a=b#hash) to go to.
     */
    testability.setLocation = function(url) {
      if (url !== $location.url()) {
        $location.url(url);
        $rootScope.$digest();
      }
    };

    /**
     * @name $$testability#whenStable
     *
     * @description
     * Calls the callback when $timeout and $http requests are completed.
     *
     * @param {function} callback
     */
    testability.whenStable = function(callback) {
      $browser.notifyWhenNoOutstandingRequests(callback);
    };

    return testability;
  }];
}

function $TimeoutProvider() {
  this.$get = ['$rootScope', '$browser', '$q', '$$q', '$exceptionHandler',
       function($rootScope,   $browser,   $q,   $$q,   $exceptionHandler) {
    var deferreds = {};


     /**
      * @ngdoc service
      * @name $timeout
      *
      * @description
      * Angular's wrapper for `window.setTimeout`. The `fn` function is wrapped into a try/catch
      * block and delegates any exceptions to
      * {@link ng.$exceptionHandler $exceptionHandler} service.
      *
      * The return value of registering a timeout function is a promise, which will be resolved when
      * the timeout is reached and the timeout function is executed.
      *
      * To cancel a timeout request, call `$timeout.cancel(promise)`.
      *
      * In tests you can use {@link ngMock.$timeout `$timeout.flush()`} to
      * synchronously flush the queue of deferred functions.
      *
      * @param {function()} fn A function, whose execution should be delayed.
      * @param {number=} [delay=0] Delay in milliseconds.
      * @param {boolean=} [invokeApply=true] If set to `false` skips model dirty checking, otherwise
      *   will invoke `fn` within the {@link ng.$rootScope.Scope#$apply $apply} block.
      * @returns {Promise} Promise that will be resolved when the timeout is reached. The value this
      *   promise will be resolved with is the return value of the `fn` function.
      *
      */
    function timeout(fn, delay, invokeApply) {
      var skipApply = (isDefined(invokeApply) && !invokeApply),
          deferred = (skipApply ? $$q : $q).defer(),
          promise = deferred.promise,
          timeoutId;

      timeoutId = $browser.defer(function() {
        try {
          deferred.resolve(fn());
        } catch (e) {
          deferred.reject(e);
          $exceptionHandler(e);
        }
        finally {
          delete deferreds[promise.$$timeoutId];
        }

        if (!skipApply) $rootScope.$apply();
      }, delay);

      promise.$$timeoutId = timeoutId;
      deferreds[timeoutId] = deferred;

      return promise;
    }


     /**
      * @ngdoc method
      * @name $timeout#cancel
      *
      * @description
      * Cancels a task associated with the `promise`. As a result of this, the promise will be
      * resolved with a rejection.
      *
      * @param {Promise=} promise Promise returned by the `$timeout` function.
      * @returns {boolean} Returns `true` if the task hasn't executed yet and was successfully
      *   canceled.
      */
    timeout.cancel = function(promise) {
      if (promise && promise.$$timeoutId in deferreds) {
        deferreds[promise.$$timeoutId].reject('canceled');
        delete deferreds[promise.$$timeoutId];
        return $browser.defer.cancel(promise.$$timeoutId);
      }
      return false;
    };

    return timeout;
  }];
}

// NOTE:  The usage of window and document instead of $window and $document here is
// deliberate.  This service depends on the specific behavior of anchor nodes created by the
// browser (resolving and parsing URLs) that is unlikely to be provided by mock objects and
// cause us to break tests.  In addition, when the browser resolves a URL for XHR, it
// doesn't know about mocked locations and resolves URLs to the real document - which is
// exactly the behavior needed here.  There is little value is mocking these out for this
// service.
var urlParsingNode = document.createElement("a");
var originUrl = urlResolve(window.location.href);


/**
 *
 * Implementation Notes for non-IE browsers
 * ----------------------------------------
 * Assigning a URL to the href property of an anchor DOM node, even one attached to the DOM,
 * results both in the normalizing and parsing of the URL.  Normalizing means that a relative
 * URL will be resolved into an absolute URL in the context of the application document.
 * Parsing means that the anchor node's host, hostname, protocol, port, pathname and related
 * properties are all populated to reflect the normalized URL.  This approach has wide
 * compatibility - Safari 1+, Mozilla 1+, Opera 7+,e etc.  See
 * http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *
 * Implementation Notes for IE
 * ---------------------------
 * IE >= 8 and <= 10 normalizes the URL when assigned to the anchor node similar to the other
 * browsers.  However, the parsed components will not be set if the URL assigned did not specify
 * them.  (e.g. if you assign a.href = "foo", then a.protocol, a.host, etc. will be empty.)  We
 * work around that by performing the parsing in a 2nd step by taking a previously normalized
 * URL (e.g. by assigning to a.href) and assigning it a.href again.  This correctly populates the
 * properties such as protocol, hostname, port, etc.
 *
 * IE7 does not normalize the URL when assigned to an anchor node.  (Apparently, it does, if one
 * uses the inner HTML approach to assign the URL as part of an HTML snippet -
 * http://stackoverflow.com/a/472729)  However, setting img[src] does normalize the URL.
 * Unfortunately, setting img[src] to something like "javascript:foo" on IE throws an exception.
 * Since the primary usage for normalizing URLs is to sanitize such URLs, we can't use that
 * method and IE < 8 is unsupported.
 *
 * References:
 *   http://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement
 *   http://www.aptana.com/reference/html/api/HTMLAnchorElement.html
 *   http://url.spec.whatwg.org/#urlutils
 *   https://github.com/angular/angular.js/pull/2902
 *   http://james.padolsey.com/javascript/parsing-urls-with-the-dom/
 *
 * @kind function
 * @param {string} url The URL to be parsed.
 * @description Normalizes and parses a URL.
 * @returns {object} Returns the normalized URL as a dictionary.
 *
 *   | member name   | Description    |
 *   |---------------|----------------|
 *   | href          | A normalized version of the provided URL if it was not an absolute URL |
 *   | protocol      | The protocol including the trailing colon                              |
 *   | host          | The host and port (if the port is non-default) of the normalizedUrl    |
 *   | search        | The search params, minus the question mark                             |
 *   | hash          | The hash string, minus the hash symbol
 *   | hostname      | The hostname
 *   | port          | The port, without ":"
 *   | pathname      | The pathname, beginning with "/"
 *
 */
function urlResolve(url) {
  var href = url;

  if (msie) {
    // Normalize before parse.  Refer Implementation Notes on why this is
    // done in two steps on IE.
    urlParsingNode.setAttribute("href", href);
    href = urlParsingNode.href;
  }

  urlParsingNode.setAttribute('href', href);

  // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
  return {
    href: urlParsingNode.href,
    protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
    host: urlParsingNode.host,
    search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
    hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
    hostname: urlParsingNode.hostname,
    port: urlParsingNode.port,
    pathname: (urlParsingNode.pathname.charAt(0) === '/')
      ? urlParsingNode.pathname
      : '/' + urlParsingNode.pathname
  };
}

/**
 * Parse a request URL and determine whether this is a same-origin request as the application document.
 *
 * @param {string|object} requestUrl The url of the request as a string that will be resolved
 * or a parsed URL object.
 * @returns {boolean} Whether the request is for the same origin as the application document.
 */
function urlIsSameOrigin(requestUrl) {
  var parsed = (isString(requestUrl)) ? urlResolve(requestUrl) : requestUrl;
  return (parsed.protocol === originUrl.protocol &&
          parsed.host === originUrl.host);
}

/**
 * @ngdoc service
 * @name $window
 *
 * @description
 * A reference to the browser's `window` object. While `window`
 * is globally available in JavaScript, it causes testability problems, because
 * it is a global variable. In angular we always refer to it through the
 * `$window` service, so it may be overridden, removed or mocked for testing.
 *
 * Expressions, like the one defined for the `ngClick` directive in the example
 * below, are evaluated with respect to the current scope.  Therefore, there is
 * no risk of inadvertently coding in a dependency on a global value in such an
 * expression.
 *
 * @example
   <example module="windowExample">
     <file name="index.html">
       <script>
         angular.module('windowExample', [])
           .controller('ExampleController', ['$scope', '$window', function($scope, $window) {
             $scope.greeting = 'Hello, World!';
             $scope.doGreeting = function(greeting) {
               $window.alert(greeting);
             };
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="text" ng-model="greeting" />
         <button ng-click="doGreeting(greeting)">ALERT</button>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
      it('should display the greeting in the input box', function() {
       element(by.model('greeting')).sendKeys('Hello, E2E Tests');
       // If we click the button it will block the test runner
       // element(':button').click();
      });
     </file>
   </example>
 */
function $WindowProvider() {
  this.$get = valueFn(window);
}

/* global currencyFilter: true,
 dateFilter: true,
 filterFilter: true,
 jsonFilter: true,
 limitToFilter: true,
 lowercaseFilter: true,
 numberFilter: true,
 orderByFilter: true,
 uppercaseFilter: true,
 */

/**
 * @ngdoc provider
 * @name $filterProvider
 * @description
 *
 * Filters are just functions which transform input to an output. However filters need to be
 * Dependency Injected. To achieve this a filter definition consists of a factory function which is
 * annotated with dependencies and is responsible for creating a filter function.
 *
 * <div class="alert alert-warning">
 * **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
 * Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
 * your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
 * (`myapp_subsection_filterx`).
 * </div>
 *
 * ```js
 *   // Filter registration
 *   function MyModule($provide, $filterProvider) {
 *     // create a service to demonstrate injection (not always needed)
 *     $provide.value('greet', function(name){
 *       return 'Hello ' + name + '!';
 *     });
 *
 *     // register a filter factory which uses the
 *     // greet service to demonstrate DI.
 *     $filterProvider.register('greet', function(greet){
 *       // return the filter function which uses the greet service
 *       // to generate salutation
 *       return function(text) {
 *         // filters need to be forgiving so check input validity
 *         return text && greet(text) || text;
 *       };
 *     });
 *   }
 * ```
 *
 * The filter function is registered with the `$injector` under the filter name suffix with
 * `Filter`.
 *
 * ```js
 *   it('should be the same instance', inject(
 *     function($filterProvider) {
 *       $filterProvider.register('reverse', function(){
 *         return ...;
 *       });
 *     },
 *     function($filter, reverseFilter) {
 *       expect($filter('reverse')).toBe(reverseFilter);
 *     });
 * ```
 *
 *
 * For more information about how angular filters work, and how to create your own filters, see
 * {@link guide/filter Filters} in the Angular Developer Guide.
 */

/**
 * @ngdoc service
 * @name $filter
 * @kind function
 * @description
 * Filters are used for formatting data displayed to the user.
 *
 * The general syntax in templates is as follows:
 *
 *         {{ expression [| filter_name[:parameter_value] ... ] }}
 *
 * @param {String} name Name of the filter function to retrieve
 * @return {Function} the filter function
 * @example
   <example name="$filter" module="filterExample">
     <file name="index.html">
       <div ng-controller="MainCtrl">
        <h3>{{ originalText }}</h3>
        <h3>{{ filteredText }}</h3>
       </div>
     </file>

     <file name="script.js">
      angular.module('filterExample', [])
      .controller('MainCtrl', function($scope, $filter) {
        $scope.originalText = 'hello';
        $scope.filteredText = $filter('uppercase')($scope.originalText);
      });
     </file>
   </example>
  */
$FilterProvider.$inject = ['$provide'];
function $FilterProvider($provide) {
  var suffix = 'Filter';

  /**
   * @ngdoc method
   * @name $filterProvider#register
   * @param {string|Object} name Name of the filter function, or an object map of filters where
   *    the keys are the filter names and the values are the filter factories.
   *
   *    <div class="alert alert-warning">
   *    **Note:** Filter names must be valid angular {@link expression} identifiers, such as `uppercase` or `orderBy`.
   *    Names with special characters, such as hyphens and dots, are not allowed. If you wish to namespace
   *    your filters, then you can use capitalization (`myappSubsectionFilterx`) or underscores
   *    (`myapp_subsection_filterx`).
   *    </div>
   * @returns {Object} Registered filter instance, or if a map of filters was provided then a map
   *    of the registered filter instances.
   */
  function register(name, factory) {
    if (isObject(name)) {
      var filters = {};
      forEach(name, function(filter, key) {
        filters[key] = register(key, filter);
      });
      return filters;
    } else {
      return $provide.factory(name + suffix, factory);
    }
  }
  this.register = register;

  this.$get = ['$injector', function($injector) {
    return function(name) {
      return $injector.get(name + suffix);
    };
  }];

  ////////////////////////////////////////

  /* global
    currencyFilter: false,
    dateFilter: false,
    filterFilter: false,
    jsonFilter: false,
    limitToFilter: false,
    lowercaseFilter: false,
    numberFilter: false,
    orderByFilter: false,
    uppercaseFilter: false,
  */

  register('currency', currencyFilter);
  register('date', dateFilter);
  register('filter', filterFilter);
  register('json', jsonFilter);
  register('limitTo', limitToFilter);
  register('lowercase', lowercaseFilter);
  register('number', numberFilter);
  register('orderBy', orderByFilter);
  register('uppercase', uppercaseFilter);
}

/**
 * @ngdoc filter
 * @name filter
 * @kind function
 *
 * @description
 * Selects a subset of items from `array` and returns it as a new array.
 *
 * @param {Array} array The source array.
 * @param {string|Object|function()} expression The predicate to be used for selecting items from
 *   `array`.
 *
 *   Can be one of:
 *
 *   - `string`: The string is used for matching against the contents of the `array`. All strings or
 *     objects with string properties in `array` that match this string will be returned. This also
 *     applies to nested object properties.
 *     The predicate can be negated by prefixing the string with `!`.
 *
 *   - `Object`: A pattern object can be used to filter specific properties on objects contained
 *     by `array`. For example `{name:"M", phone:"1"}` predicate will return an array of items
 *     which have property `name` containing "M" and property `phone` containing "1". A special
 *     property name `$` can be used (as in `{$:"text"}`) to accept a match against any
 *     property of the object or its nested object properties. That's equivalent to the simple
 *     substring match with a `string` as described above. The predicate can be negated by prefixing
 *     the string with `!`.
 *     For example `{name: "!M"}` predicate will return an array of items which have property `name`
 *     not containing "M".
 *
 *     Note that a named property will match properties on the same level only, while the special
 *     `$` property will match properties on the same level or deeper. E.g. an array item like
 *     `{name: {first: 'John', last: 'Doe'}}` will **not** be matched by `{name: 'John'}`, but
 *     **will** be matched by `{$: 'John'}`.
 *
 *   - `function(value, index)`: A predicate function can be used to write arbitrary filters. The
 *     function is called for each element of `array`. The final result is an array of those
 *     elements that the predicate returned true for.
 *
 * @param {function(actual, expected)|true|undefined} comparator Comparator which is used in
 *     determining if the expected value (from the filter expression) and actual value (from
 *     the object in the array) should be considered a match.
 *
 *   Can be one of:
 *
 *   - `function(actual, expected)`:
 *     The function will be given the object value and the predicate value to compare and
 *     should return true if both values should be considered equal.
 *
 *   - `true`: A shorthand for `function(actual, expected) { return angular.equals(actual, expected)}`.
 *     This is essentially strict comparison of expected and actual.
 *
 *   - `false|undefined`: A short hand for a function which will look for a substring match in case
 *     insensitive way.
 *
 * @example
   <example>
     <file name="index.html">
       <div ng-init="friends = [{name:'John', phone:'555-1276'},
                                {name:'Mary', phone:'800-BIG-MARY'},
                                {name:'Mike', phone:'555-4321'},
                                {name:'Adam', phone:'555-5678'},
                                {name:'Julie', phone:'555-8765'},
                                {name:'Juliette', phone:'555-5678'}]"></div>

       Search: <input ng-model="searchText">
       <table id="searchTextResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friend in friends | filter:searchText">
           <td>{{friend.name}}</td>
           <td>{{friend.phone}}</td>
         </tr>
       </table>
       <hr>
       Any: <input ng-model="search.$"> <br>
       Name only <input ng-model="search.name"><br>
       Phone only <input ng-model="search.phone"><br>
       Equality <input type="checkbox" ng-model="strict"><br>
       <table id="searchObjResults">
         <tr><th>Name</th><th>Phone</th></tr>
         <tr ng-repeat="friendObj in friends | filter:search:strict">
           <td>{{friendObj.name}}</td>
           <td>{{friendObj.phone}}</td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       var expectFriendNames = function(expectedNames, key) {
         element.all(by.repeater(key + ' in friends').column(key + '.name')).then(function(arr) {
           arr.forEach(function(wd, i) {
             expect(wd.getText()).toMatch(expectedNames[i]);
           });
         });
       };

       it('should search across all fields when filtering with a string', function() {
         var searchText = element(by.model('searchText'));
         searchText.clear();
         searchText.sendKeys('m');
         expectFriendNames(['Mary', 'Mike', 'Adam'], 'friend');

         searchText.clear();
         searchText.sendKeys('76');
         expectFriendNames(['John', 'Julie'], 'friend');
       });

       it('should search in specific fields when filtering with a predicate object', function() {
         var searchAny = element(by.model('search.$'));
         searchAny.clear();
         searchAny.sendKeys('i');
         expectFriendNames(['Mary', 'Mike', 'Julie', 'Juliette'], 'friendObj');
       });
       it('should use a equal comparison when comparator is true', function() {
         var searchName = element(by.model('search.name'));
         var strict = element(by.model('strict'));
         searchName.clear();
         searchName.sendKeys('Julie');
         strict.click();
         expectFriendNames(['Julie'], 'friendObj');
       });
     </file>
   </example>
 */
function filterFilter() {
  return function(array, expression, comparator) {
    if (!isArray(array)) return array;

    var expressionType = (expression !== null) ? typeof expression : 'null';
    var predicateFn;
    var matchAgainstAnyProp;

    switch (expressionType) {
      case 'function':
        predicateFn = expression;
        break;
      case 'boolean':
      case 'null':
      case 'number':
      case 'string':
        matchAgainstAnyProp = true;
        //jshint -W086
      case 'object':
        //jshint +W086
        predicateFn = createPredicateFn(expression, comparator, matchAgainstAnyProp);
        break;
      default:
        return array;
    }

    return array.filter(predicateFn);
  };
}

// Helper functions for `filterFilter`
function createPredicateFn(expression, comparator, matchAgainstAnyProp) {
  var shouldMatchPrimitives = isObject(expression) && ('$' in expression);
  var predicateFn;

  if (comparator === true) {
    comparator = equals;
  } else if (!isFunction(comparator)) {
    comparator = function(actual, expected) {
      if (isUndefined(actual)) {
        // No substring matching against `undefined`
        return false;
      }
      if ((actual === null) || (expected === null)) {
        // No substring matching against `null`; only match against `null`
        return actual === expected;
      }
      if (isObject(actual) || isObject(expected)) {
        // Prevent an object to be considered equal to a string like `'[object'`
        return false;
      }

      actual = lowercase('' + actual);
      expected = lowercase('' + expected);
      return actual.indexOf(expected) !== -1;
    };
  }

  predicateFn = function(item) {
    if (shouldMatchPrimitives && !isObject(item)) {
      return deepCompare(item, expression.$, comparator, false);
    }
    return deepCompare(item, expression, comparator, matchAgainstAnyProp);
  };

  return predicateFn;
}

function deepCompare(actual, expected, comparator, matchAgainstAnyProp, dontMatchWholeObject) {
  var actualType = (actual !== null) ? typeof actual : 'null';
  var expectedType = (expected !== null) ? typeof expected : 'null';

  if ((expectedType === 'string') && (expected.charAt(0) === '!')) {
    return !deepCompare(actual, expected.substring(1), comparator, matchAgainstAnyProp);
  } else if (isArray(actual)) {
    // In case `actual` is an array, consider it a match
    // if ANY of it's items matches `expected`
    return actual.some(function(item) {
      return deepCompare(item, expected, comparator, matchAgainstAnyProp);
    });
  }

  switch (actualType) {
    case 'object':
      var key;
      if (matchAgainstAnyProp) {
        for (key in actual) {
          if ((key.charAt(0) !== '$') && deepCompare(actual[key], expected, comparator, true)) {
            return true;
          }
        }
        return dontMatchWholeObject ? false : deepCompare(actual, expected, comparator, false);
      } else if (expectedType === 'object') {
        for (key in expected) {
          var expectedVal = expected[key];
          if (isFunction(expectedVal) || isUndefined(expectedVal)) {
            continue;
          }

          var matchAnyProperty = key === '$';
          var actualVal = matchAnyProperty ? actual : actual[key];
          if (!deepCompare(actualVal, expectedVal, comparator, matchAnyProperty, matchAnyProperty)) {
            return false;
          }
        }
        return true;
      } else {
        return comparator(actual, expected);
      }
      break;
    case 'function':
      return false;
    default:
      return comparator(actual, expected);
  }
}

/**
 * @ngdoc filter
 * @name currency
 * @kind function
 *
 * @description
 * Formats a number as a currency (ie $1,234.56). When no currency symbol is provided, default
 * symbol for current locale is used.
 *
 * @param {number} amount Input to filter.
 * @param {string=} symbol Currency symbol or identifier to be displayed.
 * @param {number=} fractionSize Number of decimal places to round the amount to, defaults to default max fraction size for current locale
 * @returns {string} Formatted number.
 *
 *
 * @example
   <example module="currencyExample">
     <file name="index.html">
       <script>
         angular.module('currencyExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.amount = 1234.56;
           }]);
       </script>
       <div ng-controller="ExampleController">
         <input type="number" ng-model="amount"> <br>
         default currency symbol ($): <span id="currency-default">{{amount | currency}}</span><br>
         custom currency identifier (USD$): <span id="currency-custom">{{amount | currency:"USD$"}}</span>
         no fractions (0): <span id="currency-no-fractions">{{amount | currency:"USD$":0}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should init with 1234.56', function() {
         expect(element(by.id('currency-default')).getText()).toBe('$1,234.56');
         expect(element(by.id('currency-custom')).getText()).toBe('USD$1,234.56');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('USD$1,235');
       });
       it('should update', function() {
         if (browser.params.browser == 'safari') {
           // Safari does not understand the minus key. See
           // https://github.com/angular/protractor/issues/481
           return;
         }
         element(by.model('amount')).clear();
         element(by.model('amount')).sendKeys('-1234');
         expect(element(by.id('currency-default')).getText()).toBe('($1,234.00)');
         expect(element(by.id('currency-custom')).getText()).toBe('(USD$1,234.00)');
         expect(element(by.id('currency-no-fractions')).getText()).toBe('(USD$1,234)');
       });
     </file>
   </example>
 */
currencyFilter.$inject = ['$locale'];
function currencyFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(amount, currencySymbol, fractionSize) {
    if (isUndefined(currencySymbol)) {
      currencySymbol = formats.CURRENCY_SYM;
    }

    if (isUndefined(fractionSize)) {
      fractionSize = formats.PATTERNS[1].maxFrac;
    }

    // if null or undefined pass it through
    return (amount == null)
        ? amount
        : formatNumber(amount, formats.PATTERNS[1], formats.GROUP_SEP, formats.DECIMAL_SEP, fractionSize).
            replace(/\u00A4/g, currencySymbol);
  };
}

/**
 * @ngdoc filter
 * @name number
 * @kind function
 *
 * @description
 * Formats a number as text.
 *
 * If the input is null or undefined, it will just be returned.
 * If the input is infinite (Infinity/-Infinity) the Infinity symbol '∞' is returned.
 * If the input is not a number an empty string is returned.
 *
 * @param {number|string} number Number to format.
 * @param {(number|string)=} fractionSize Number of decimal places to round the number to.
 * If this is not provided then the fraction size is computed from the current locale's number
 * formatting pattern. In the case of the default locale, it will be 3.
 * @returns {string} Number rounded to decimalPlaces and places a “,” after each third digit.
 *
 * @example
   <example module="numberFilterExample">
     <file name="index.html">
       <script>
         angular.module('numberFilterExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.val = 1234.56789;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter number: <input ng-model='val'><br>
         Default formatting: <span id='number-default'>{{val | number}}</span><br>
         No fractions: <span>{{val | number:0}}</span><br>
         Negative number: <span>{{-val | number:4}}</span>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format numbers', function() {
         expect(element(by.id('number-default')).getText()).toBe('1,234.568');
         expect(element(by.binding('val | number:0')).getText()).toBe('1,235');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-1,234.5679');
       });

       it('should update', function() {
         element(by.model('val')).clear();
         element(by.model('val')).sendKeys('3374.333');
         expect(element(by.id('number-default')).getText()).toBe('3,374.333');
         expect(element(by.binding('val | number:0')).getText()).toBe('3,374');
         expect(element(by.binding('-val | number:4')).getText()).toBe('-3,374.3330');
      });
     </file>
   </example>
 */


numberFilter.$inject = ['$locale'];
function numberFilter($locale) {
  var formats = $locale.NUMBER_FORMATS;
  return function(number, fractionSize) {

    // if null or undefined pass it through
    return (number == null)
        ? number
        : formatNumber(number, formats.PATTERNS[0], formats.GROUP_SEP, formats.DECIMAL_SEP,
                       fractionSize);
  };
}

var DECIMAL_SEP = '.';
function formatNumber(number, pattern, groupSep, decimalSep, fractionSize) {
  if (!isFinite(number) || isObject(number)) return '';

  var isNegative = number < 0;
  number = Math.abs(number);
  var numStr = number + '',
      formatedText = '',
      parts = [];

  var hasExponent = false;
  if (numStr.indexOf('e') !== -1) {
    var match = numStr.match(/([\d\.]+)e(-?)(\d+)/);
    if (match && match[2] == '-' && match[3] > fractionSize + 1) {
      number = 0;
    } else {
      formatedText = numStr;
      hasExponent = true;
    }
  }

  if (!hasExponent) {
    var fractionLen = (numStr.split(DECIMAL_SEP)[1] || '').length;

    // determine fractionSize if it is not specified
    if (isUndefined(fractionSize)) {
      fractionSize = Math.min(Math.max(pattern.minFrac, fractionLen), pattern.maxFrac);
    }

    // safely round numbers in JS without hitting imprecisions of floating-point arithmetics
    // inspired by:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round
    number = +(Math.round(+(number.toString() + 'e' + fractionSize)).toString() + 'e' + -fractionSize);

    var fraction = ('' + number).split(DECIMAL_SEP);
    var whole = fraction[0];
    fraction = fraction[1] || '';

    var i, pos = 0,
        lgroup = pattern.lgSize,
        group = pattern.gSize;

    if (whole.length >= (lgroup + group)) {
      pos = whole.length - lgroup;
      for (i = 0; i < pos; i++) {
        if ((pos - i) % group === 0 && i !== 0) {
          formatedText += groupSep;
        }
        formatedText += whole.charAt(i);
      }
    }

    for (i = pos; i < whole.length; i++) {
      if ((whole.length - i) % lgroup === 0 && i !== 0) {
        formatedText += groupSep;
      }
      formatedText += whole.charAt(i);
    }

    // format fraction part.
    while (fraction.length < fractionSize) {
      fraction += '0';
    }

    if (fractionSize && fractionSize !== "0") formatedText += decimalSep + fraction.substr(0, fractionSize);
  } else {
    if (fractionSize > 0 && number < 1) {
      formatedText = number.toFixed(fractionSize);
      number = parseFloat(formatedText);
    }
  }

  if (number === 0) {
    isNegative = false;
  }

  parts.push(isNegative ? pattern.negPre : pattern.posPre,
             formatedText,
             isNegative ? pattern.negSuf : pattern.posSuf);
  return parts.join('');
}

function padNumber(num, digits, trim) {
  var neg = '';
  if (num < 0) {
    neg =  '-';
    num = -num;
  }
  num = '' + num;
  while (num.length < digits) num = '0' + num;
  if (trim)
    num = num.substr(num.length - digits);
  return neg + num;
}


function dateGetter(name, size, offset, trim) {
  offset = offset || 0;
  return function(date) {
    var value = date['get' + name]();
    if (offset > 0 || value > -offset)
      value += offset;
    if (value === 0 && offset == -12) value = 12;
    return padNumber(value, size, trim);
  };
}

function dateStrGetter(name, shortForm) {
  return function(date, formats) {
    var value = date['get' + name]();
    var get = uppercase(shortForm ? ('SHORT' + name) : name);

    return formats[get][value];
  };
}

function timeZoneGetter(date) {
  var zone = -1 * date.getTimezoneOffset();
  var paddedZone = (zone >= 0) ? "+" : "";

  paddedZone += padNumber(Math[zone > 0 ? 'floor' : 'ceil'](zone / 60), 2) +
                padNumber(Math.abs(zone % 60), 2);

  return paddedZone;
}

function getFirstThursdayOfYear(year) {
    // 0 = index of January
    var dayOfWeekOnFirst = (new Date(year, 0, 1)).getDay();
    // 4 = index of Thursday (+1 to account for 1st = 5)
    // 11 = index of *next* Thursday (+1 account for 1st = 12)
    return new Date(year, 0, ((dayOfWeekOnFirst <= 4) ? 5 : 12) - dayOfWeekOnFirst);
}

function getThursdayThisWeek(datetime) {
    return new Date(datetime.getFullYear(), datetime.getMonth(),
      // 4 = index of Thursday
      datetime.getDate() + (4 - datetime.getDay()));
}

function weekGetter(size) {
   return function(date) {
      var firstThurs = getFirstThursdayOfYear(date.getFullYear()),
         thisThurs = getThursdayThisWeek(date);

      var diff = +thisThurs - +firstThurs,
         result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week

      return padNumber(result, size);
   };
}

function ampmGetter(date, formats) {
  return date.getHours() < 12 ? formats.AMPMS[0] : formats.AMPMS[1];
}

function eraGetter(date, formats) {
  return date.getFullYear() <= 0 ? formats.ERAS[0] : formats.ERAS[1];
}

function longEraGetter(date, formats) {
  return date.getFullYear() <= 0 ? formats.ERANAMES[0] : formats.ERANAMES[1];
}

var DATE_FORMATS = {
  yyyy: dateGetter('FullYear', 4),
    yy: dateGetter('FullYear', 2, 0, true),
     y: dateGetter('FullYear', 1),
  MMMM: dateStrGetter('Month'),
   MMM: dateStrGetter('Month', true),
    MM: dateGetter('Month', 2, 1),
     M: dateGetter('Month', 1, 1),
    dd: dateGetter('Date', 2),
     d: dateGetter('Date', 1),
    HH: dateGetter('Hours', 2),
     H: dateGetter('Hours', 1),
    hh: dateGetter('Hours', 2, -12),
     h: dateGetter('Hours', 1, -12),
    mm: dateGetter('Minutes', 2),
     m: dateGetter('Minutes', 1),
    ss: dateGetter('Seconds', 2),
     s: dateGetter('Seconds', 1),
     // while ISO 8601 requires fractions to be prefixed with `.` or `,`
     // we can be just safely rely on using `sss` since we currently don't support single or two digit fractions
   sss: dateGetter('Milliseconds', 3),
  EEEE: dateStrGetter('Day'),
   EEE: dateStrGetter('Day', true),
     a: ampmGetter,
     Z: timeZoneGetter,
    ww: weekGetter(2),
     w: weekGetter(1),
     G: eraGetter,
     GG: eraGetter,
     GGG: eraGetter,
     GGGG: longEraGetter
};

var DATE_FORMATS_SPLIT = /((?:[^yMdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|d+|H+|h+|m+|s+|a|Z|G+|w+))(.*)/,
    NUMBER_STRING = /^\-?\d+$/;

/**
 * @ngdoc filter
 * @name date
 * @kind function
 *
 * @description
 *   Formats `date` to a string based on the requested `format`.
 *
 *   `format` string can be composed of the following elements:
 *
 *   * `'yyyy'`: 4 digit representation of year (e.g. AD 1 => 0001, AD 2010 => 2010)
 *   * `'yy'`: 2 digit representation of year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
 *   * `'y'`: 1 digit representation of year, e.g. (AD 1 => 1, AD 199 => 199)
 *   * `'MMMM'`: Month in year (January-December)
 *   * `'MMM'`: Month in year (Jan-Dec)
 *   * `'MM'`: Month in year, padded (01-12)
 *   * `'M'`: Month in year (1-12)
 *   * `'dd'`: Day in month, padded (01-31)
 *   * `'d'`: Day in month (1-31)
 *   * `'EEEE'`: Day in Week,(Sunday-Saturday)
 *   * `'EEE'`: Day in Week, (Sun-Sat)
 *   * `'HH'`: Hour in day, padded (00-23)
 *   * `'H'`: Hour in day (0-23)
 *   * `'hh'`: Hour in AM/PM, padded (01-12)
 *   * `'h'`: Hour in AM/PM, (1-12)
 *   * `'mm'`: Minute in hour, padded (00-59)
 *   * `'m'`: Minute in hour (0-59)
 *   * `'ss'`: Second in minute, padded (00-59)
 *   * `'s'`: Second in minute (0-59)
 *   * `'sss'`: Millisecond in second, padded (000-999)
 *   * `'a'`: AM/PM marker
 *   * `'Z'`: 4 digit (+sign) representation of the timezone offset (-1200-+1200)
 *   * `'ww'`: Week of year, padded (00-53). Week 01 is the week with the first Thursday of the year
 *   * `'w'`: Week of year (0-53). Week 1 is the week with the first Thursday of the year
 *   * `'G'`, `'GG'`, `'GGG'`: The abbreviated form of the era string (e.g. 'AD')
 *   * `'GGGG'`: The long form of the era string (e.g. 'Anno Domini')
 *
 *   `format` string can also be one of the following predefined
 *   {@link guide/i18n localizable formats}:
 *
 *   * `'medium'`: equivalent to `'MMM d, y h:mm:ss a'` for en_US locale
 *     (e.g. Sep 3, 2010 12:05:08 PM)
 *   * `'short'`: equivalent to `'M/d/yy h:mm a'` for en_US  locale (e.g. 9/3/10 12:05 PM)
 *   * `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` for en_US  locale
 *     (e.g. Friday, September 3, 2010)
 *   * `'longDate'`: equivalent to `'MMMM d, y'` for en_US  locale (e.g. September 3, 2010)
 *   * `'mediumDate'`: equivalent to `'MMM d, y'` for en_US  locale (e.g. Sep 3, 2010)
 *   * `'shortDate'`: equivalent to `'M/d/yy'` for en_US locale (e.g. 9/3/10)
 *   * `'mediumTime'`: equivalent to `'h:mm:ss a'` for en_US locale (e.g. 12:05:08 PM)
 *   * `'shortTime'`: equivalent to `'h:mm a'` for en_US locale (e.g. 12:05 PM)
 *
 *   `format` string can contain literal values. These need to be escaped by surrounding with single quotes (e.g.
 *   `"h 'in the morning'"`). In order to output a single quote, escape it - i.e., two single quotes in a sequence
 *   (e.g. `"h 'o''clock'"`).
 *
 * @param {(Date|number|string)} date Date to format either as Date object, milliseconds (string or
 *    number) or various ISO 8601 datetime string formats (e.g. yyyy-MM-ddTHH:mm:ss.sssZ and its
 *    shorter versions like yyyy-MM-ddTHH:mmZ, yyyy-MM-dd or yyyyMMddTHHmmssZ). If no timezone is
 *    specified in the string input, the time is considered to be in the local timezone.
 * @param {string=} format Formatting rules (see Description). If not specified,
 *    `mediumDate` is used.
 * @param {string=} timezone Timezone to be used for formatting. Right now, only `'UTC'` is supported.
 *    If not specified, the timezone of the browser will be used.
 * @returns {string} Formatted string or the input if input is not recognized as date/millis.
 *
 * @example
   <example>
     <file name="index.html">
       <span ng-non-bindable>{{1288323623006 | date:'medium'}}</span>:
           <span>{{1288323623006 | date:'medium'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span>:
          <span>{{1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:'MM/dd/yyyy @ h:mma'}}</span>:
          <span>{{'1288323623006' | date:'MM/dd/yyyy @ h:mma'}}</span><br>
       <span ng-non-bindable>{{1288323623006 | date:"MM/dd/yyyy 'at' h:mma"}}</span>:
          <span>{{'1288323623006' | date:"MM/dd/yyyy 'at' h:mma"}}</span><br>
     </file>
     <file name="protractor.js" type="protractor">
       it('should format date', function() {
         expect(element(by.binding("1288323623006 | date:'medium'")).getText()).
            toMatch(/Oct 2\d, 2010 \d{1,2}:\d{2}:\d{2} (AM|PM)/);
         expect(element(by.binding("1288323623006 | date:'yyyy-MM-dd HH:mm:ss Z'")).getText()).
            toMatch(/2010\-10\-2\d \d{2}:\d{2}:\d{2} (\-|\+)?\d{4}/);
         expect(element(by.binding("'1288323623006' | date:'MM/dd/yyyy @ h:mma'")).getText()).
            toMatch(/10\/2\d\/2010 @ \d{1,2}:\d{2}(AM|PM)/);
         expect(element(by.binding("'1288323623006' | date:\"MM/dd/yyyy 'at' h:mma\"")).getText()).
            toMatch(/10\/2\d\/2010 at \d{1,2}:\d{2}(AM|PM)/);
       });
     </file>
   </example>
 */
dateFilter.$inject = ['$locale'];
function dateFilter($locale) {


  var R_ISO8601_STR = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
                     // 1        2       3         4          5          6          7          8  9     10      11
  function jsonStringToDate(string) {
    var match;
    if (match = string.match(R_ISO8601_STR)) {
      var date = new Date(0),
          tzHour = 0,
          tzMin  = 0,
          dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear,
          timeSetter = match[8] ? date.setUTCHours : date.setHours;

      if (match[9]) {
        tzHour = int(match[9] + match[10]);
        tzMin = int(match[9] + match[11]);
      }
      dateSetter.call(date, int(match[1]), int(match[2]) - 1, int(match[3]));
      var h = int(match[4] || 0) - tzHour;
      var m = int(match[5] || 0) - tzMin;
      var s = int(match[6] || 0);
      var ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
      timeSetter.call(date, h, m, s, ms);
      return date;
    }
    return string;
  }


  return function(date, format, timezone) {
    var text = '',
        parts = [],
        fn, match;

    format = format || 'mediumDate';
    format = $locale.DATETIME_FORMATS[format] || format;
    if (isString(date)) {
      date = NUMBER_STRING.test(date) ? int(date) : jsonStringToDate(date);
    }

    if (isNumber(date)) {
      date = new Date(date);
    }

    if (!isDate(date)) {
      return date;
    }

    while (format) {
      match = DATE_FORMATS_SPLIT.exec(format);
      if (match) {
        parts = concat(parts, match, 1);
        format = parts.pop();
      } else {
        parts.push(format);
        format = null;
      }
    }

    if (timezone && timezone === 'UTC') {
      date = new Date(date.getTime());
      date.setMinutes(date.getMinutes() + date.getTimezoneOffset());
    }
    forEach(parts, function(value) {
      fn = DATE_FORMATS[value];
      text += fn ? fn(date, $locale.DATETIME_FORMATS)
                 : value.replace(/(^'|'$)/g, '').replace(/''/g, "'");
    });

    return text;
  };
}


/**
 * @ngdoc filter
 * @name json
 * @kind function
 *
 * @description
 *   Allows you to convert a JavaScript object into JSON string.
 *
 *   This filter is mostly useful for debugging. When using the double curly {{value}} notation
 *   the binding is automatically converted to JSON.
 *
 * @param {*} object Any JavaScript object (including arrays and primitive types) to filter.
 * @param {number=} spacing The number of spaces to use per indentation, defaults to 2.
 * @returns {string} JSON string.
 *
 *
 * @example
   <example>
     <file name="index.html">
       <pre id="default-spacing">{{ {'name':'value'} | json }}</pre>
       <pre id="custom-spacing">{{ {'name':'value'} | json:4 }}</pre>
     </file>
     <file name="protractor.js" type="protractor">
       it('should jsonify filtered objects', function() {
         expect(element(by.id('default-spacing')).getText()).toMatch(/\{\n  "name": ?"value"\n}/);
         expect(element(by.id('custom-spacing')).getText()).toMatch(/\{\n    "name": ?"value"\n}/);
       });
     </file>
   </example>
 *
 */
function jsonFilter() {
  return function(object, spacing) {
    if (isUndefined(spacing)) {
        spacing = 2;
    }
    return toJson(object, spacing);
  };
}


/**
 * @ngdoc filter
 * @name lowercase
 * @kind function
 * @description
 * Converts string to lowercase.
 * @see angular.lowercase
 */
var lowercaseFilter = valueFn(lowercase);


/**
 * @ngdoc filter
 * @name uppercase
 * @kind function
 * @description
 * Converts string to uppercase.
 * @see angular.uppercase
 */
var uppercaseFilter = valueFn(uppercase);

/**
 * @ngdoc filter
 * @name limitTo
 * @kind function
 *
 * @description
 * Creates a new array or string containing only a specified number of elements. The elements
 * are taken from either the beginning or the end of the source array, string or number, as specified by
 * the value and sign (positive or negative) of `limit`. If a number is used as input, it is
 * converted to a string.
 *
 * @param {Array|string|number} input Source array, string or number to be limited.
 * @param {string|number} limit The length of the returned array or string. If the `limit` number
 *     is positive, `limit` number of items from the beginning of the source array/string are copied.
 *     If the number is negative, `limit` number  of items from the end of the source array/string
 *     are copied. The `limit` will be trimmed if it exceeds `array.length`
 * @returns {Array|string} A new sub-array or substring of length `limit` or less if input array
 *     had less than `limit` elements.
 *
 * @example
   <example module="limitToExample">
     <file name="index.html">
       <script>
         angular.module('limitToExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.numbers = [1,2,3,4,5,6,7,8,9];
             $scope.letters = "abcdefghi";
             $scope.longNumber = 2345432342;
             $scope.numLimit = 3;
             $scope.letterLimit = 3;
             $scope.longNumberLimit = 3;
           }]);
       </script>
       <div ng-controller="ExampleController">
         Limit {{numbers}} to: <input type="number" step="1" ng-model="numLimit">
         <p>Output numbers: {{ numbers | limitTo:numLimit }}</p>
         Limit {{letters}} to: <input type="number" step="1" ng-model="letterLimit">
         <p>Output letters: {{ letters | limitTo:letterLimit }}</p>
         Limit {{longNumber}} to: <input type="number" step="1" ng-model="longNumberLimit">
         <p>Output long number: {{ longNumber | limitTo:longNumberLimit }}</p>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       var numLimitInput = element(by.model('numLimit'));
       var letterLimitInput = element(by.model('letterLimit'));
       var longNumberLimitInput = element(by.model('longNumberLimit'));
       var limitedNumbers = element(by.binding('numbers | limitTo:numLimit'));
       var limitedLetters = element(by.binding('letters | limitTo:letterLimit'));
       var limitedLongNumber = element(by.binding('longNumber | limitTo:longNumberLimit'));

       it('should limit the number array to first three items', function() {
         expect(numLimitInput.getAttribute('value')).toBe('3');
         expect(letterLimitInput.getAttribute('value')).toBe('3');
         expect(longNumberLimitInput.getAttribute('value')).toBe('3');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3]');
         expect(limitedLetters.getText()).toEqual('Output letters: abc');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 234');
       });

       // There is a bug in safari and protractor that doesn't like the minus key
       // it('should update the output when -3 is entered', function() {
       //   numLimitInput.clear();
       //   numLimitInput.sendKeys('-3');
       //   letterLimitInput.clear();
       //   letterLimitInput.sendKeys('-3');
       //   longNumberLimitInput.clear();
       //   longNumberLimitInput.sendKeys('-3');
       //   expect(limitedNumbers.getText()).toEqual('Output numbers: [7,8,9]');
       //   expect(limitedLetters.getText()).toEqual('Output letters: ghi');
       //   expect(limitedLongNumber.getText()).toEqual('Output long number: 342');
       // });

       it('should not exceed the maximum size of input array', function() {
         numLimitInput.clear();
         numLimitInput.sendKeys('100');
         letterLimitInput.clear();
         letterLimitInput.sendKeys('100');
         longNumberLimitInput.clear();
         longNumberLimitInput.sendKeys('100');
         expect(limitedNumbers.getText()).toEqual('Output numbers: [1,2,3,4,5,6,7,8,9]');
         expect(limitedLetters.getText()).toEqual('Output letters: abcdefghi');
         expect(limitedLongNumber.getText()).toEqual('Output long number: 2345432342');
       });
     </file>
   </example>
*/
function limitToFilter() {
  return function(input, limit) {
    if (isNumber(input)) input = input.toString();
    if (!isArray(input) && !isString(input)) return input;

    if (Math.abs(Number(limit)) === Infinity) {
      limit = Number(limit);
    } else {
      limit = int(limit);
    }

    //NaN check on limit
    if (limit) {
      return limit > 0 ? input.slice(0, limit) : input.slice(limit);
    } else {
      return isString(input) ? "" : [];
    }
  };
}

/**
 * @ngdoc filter
 * @name orderBy
 * @kind function
 *
 * @description
 * Orders a specified `array` by the `expression` predicate. It is ordered alphabetically
 * for strings and numerically for numbers. Note: if you notice numbers are not being sorted
 * correctly, make sure they are actually being saved as numbers and not strings.
 *
 * @param {Array} array The array to sort.
 * @param {function(*)|string|Array.<(function(*)|string)>=} expression A predicate to be
 *    used by the comparator to determine the order of elements.
 *
 *    Can be one of:
 *
 *    - `function`: Getter function. The result of this function will be sorted using the
 *      `<`, `===`, `>` operator.
 *    - `string`: An Angular expression. The result of this expression is used to compare elements
 *      (for example `name` to sort by a property called `name` or `name.substr(0, 3)` to sort by
 *      3 first characters of a property called `name`). The result of a constant expression
 *      is interpreted as a property name to be used in comparisons (for example `"special name"`
 *      to sort object by the value of their `special name` property). An expression can be
 *      optionally prefixed with `+` or `-` to control ascending or descending sort order
 *      (for example, `+name` or `-name`). If no property is provided, (e.g. `'+'`) then the array
 *      element itself is used to compare where sorting.
 *    - `Array`: An array of function or string predicates. The first predicate in the array
 *      is used for sorting, but when two items are equivalent, the next predicate is used.
 *
 *    If the predicate is missing or empty then it defaults to `'+'`.
 *
 * @param {boolean=} reverse Reverse the order of the array.
 * @returns {Array} Sorted copy of the source array.
 *
 *
 * @example
 * The example below demonstrates a simple ngRepeat, where the data is sorted
 * by age in descending order (predicate is set to `'-age'`).
 * `reverse` is not set, which means it defaults to `false`.
   <example module="orderByExample">
     <file name="index.html">
       <script>
         angular.module('orderByExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.friends =
                 [{name:'John', phone:'555-1212', age:10},
                  {name:'Mary', phone:'555-9876', age:19},
                  {name:'Mike', phone:'555-4321', age:21},
                  {name:'Adam', phone:'555-5678', age:35},
                  {name:'Julie', phone:'555-8765', age:29}];
           }]);
       </script>
       <div ng-controller="ExampleController">
         <table class="friend">
           <tr>
             <th>Name</th>
             <th>Phone Number</th>
             <th>Age</th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:'-age'">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
   </example>
 *
 * The predicate and reverse parameters can be controlled dynamically through scope properties,
 * as shown in the next example.
 * @example
   <example module="orderByExample">
     <file name="index.html">
       <script>
         angular.module('orderByExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.friends =
                 [{name:'John', phone:'555-1212', age:10},
                  {name:'Mary', phone:'555-9876', age:19},
                  {name:'Mike', phone:'555-4321', age:21},
                  {name:'Adam', phone:'555-5678', age:35},
                  {name:'Julie', phone:'555-8765', age:29}];
             $scope.predicate = '-age';
           }]);
       </script>
       <div ng-controller="ExampleController">
         <pre>Sorting predicate = {{predicate}}; reverse = {{reverse}}</pre>
         <hr/>
         [ <a href="" ng-click="predicate=''">unsorted</a> ]
         <table class="friend">
           <tr>
             <th><a href="" ng-click="predicate = 'name'; reverse=false">Name</a>
                 (<a href="" ng-click="predicate = '-name'; reverse=false">^</a>)</th>
             <th><a href="" ng-click="predicate = 'phone'; reverse=!reverse">Phone Number</a></th>
             <th><a href="" ng-click="predicate = 'age'; reverse=!reverse">Age</a></th>
           </tr>
           <tr ng-repeat="friend in friends | orderBy:predicate:reverse">
             <td>{{friend.name}}</td>
             <td>{{friend.phone}}</td>
             <td>{{friend.age}}</td>
           </tr>
         </table>
       </div>
     </file>
   </example>
 *
 * It's also possible to call the orderBy filter manually, by injecting `$filter`, retrieving the
 * filter routine with `$filter('orderBy')`, and calling the returned filter routine with the
 * desired parameters.
 *
 * Example:
 *
 * @example
  <example module="orderByExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <table class="friend">
          <tr>
            <th><a href="" ng-click="reverse=false;order('name', false)">Name</a>
              (<a href="" ng-click="order('-name',false)">^</a>)</th>
            <th><a href="" ng-click="reverse=!reverse;order('phone', reverse)">Phone Number</a></th>
            <th><a href="" ng-click="reverse=!reverse;order('age',reverse)">Age</a></th>
          </tr>
          <tr ng-repeat="friend in friends">
            <td>{{friend.name}}</td>
            <td>{{friend.phone}}</td>
            <td>{{friend.age}}</td>
          </tr>
        </table>
      </div>
    </file>

    <file name="script.js">
      angular.module('orderByExample', [])
        .controller('ExampleController', ['$scope', '$filter', function($scope, $filter) {
          var orderBy = $filter('orderBy');
          $scope.friends = [
            { name: 'John',    phone: '555-1212',    age: 10 },
            { name: 'Mary',    phone: '555-9876',    age: 19 },
            { name: 'Mike',    phone: '555-4321',    age: 21 },
            { name: 'Adam',    phone: '555-5678',    age: 35 },
            { name: 'Julie',   phone: '555-8765',    age: 29 }
          ];
          $scope.order = function(predicate, reverse) {
            $scope.friends = orderBy($scope.friends, predicate, reverse);
          };
          $scope.order('-age',false);
        }]);
    </file>
</example>
 */
orderByFilter.$inject = ['$parse'];
function orderByFilter($parse) {
  return function(array, sortPredicate, reverseOrder) {
    if (!(isArrayLike(array))) return array;
    sortPredicate = isArray(sortPredicate) ? sortPredicate : [sortPredicate];
    if (sortPredicate.length === 0) { sortPredicate = ['+']; }
    sortPredicate = sortPredicate.map(function(predicate) {
      var descending = false, get = predicate || identity;
      if (isString(predicate)) {
        if ((predicate.charAt(0) == '+' || predicate.charAt(0) == '-')) {
          descending = predicate.charAt(0) == '-';
          predicate = predicate.substring(1);
        }
        if (predicate === '') {
          // Effectively no predicate was passed so we compare identity
          return reverseComparator(compare, descending);
        }
        get = $parse(predicate);
        if (get.constant) {
          var key = get();
          return reverseComparator(function(a, b) {
            return compare(a[key], b[key]);
          }, descending);
        }
      }
      return reverseComparator(function(a, b) {
        return compare(get(a),get(b));
      }, descending);
    });
    return slice.call(array).sort(reverseComparator(comparator, reverseOrder));

    function comparator(o1, o2) {
      for (var i = 0; i < sortPredicate.length; i++) {
        var comp = sortPredicate[i](o1, o2);
        if (comp !== 0) return comp;
      }
      return 0;
    }
    function reverseComparator(comp, descending) {
      return descending
          ? function(a, b) {return comp(b,a);}
          : comp;
    }

    function isPrimitive(value) {
      switch (typeof value) {
        case 'number': /* falls through */
        case 'boolean': /* falls through */
        case 'string':
          return true;
        default:
          return false;
      }
    }

    function objectToString(value) {
      if (value === null) return 'null';
      if (typeof value.valueOf === 'function') {
        value = value.valueOf();
        if (isPrimitive(value)) return value;
      }
      if (typeof value.toString === 'function') {
        value = value.toString();
        if (isPrimitive(value)) return value;
      }
      return '';
    }

    function compare(v1, v2) {
      var t1 = typeof v1;
      var t2 = typeof v2;
      if (t1 === t2 && t1 === "object") {
        v1 = objectToString(v1);
        v2 = objectToString(v2);
      }
      if (t1 === t2) {
        if (t1 === "string") {
           v1 = v1.toLowerCase();
           v2 = v2.toLowerCase();
        }
        if (v1 === v2) return 0;
        return v1 < v2 ? -1 : 1;
      } else {
        return t1 < t2 ? -1 : 1;
      }
    }
  };
}

function ngDirective(directive) {
  if (isFunction(directive)) {
    directive = {
      link: directive
    };
  }
  directive.restrict = directive.restrict || 'AC';
  return valueFn(directive);
}

/**
 * @ngdoc directive
 * @name a
 * @restrict E
 *
 * @description
 * Modifies the default behavior of the html A tag so that the default action is prevented when
 * the href attribute is empty.
 *
 * This change permits the easy creation of action links with the `ngClick` directive
 * without changing the location or causing page reloads, e.g.:
 * `<a href="" ng-click="list.addItem()">Add Item</a>`
 */
var htmlAnchorDirective = valueFn({
  restrict: 'E',
  compile: function(element, attr) {
    if (!attr.href && !attr.xlinkHref && !attr.name) {
      return function(scope, element) {
        // If the linked element is not an anchor tag anymore, do nothing
        if (element[0].nodeName.toLowerCase() !== 'a') return;

        // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
        var href = toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
                   'xlink:href' : 'href';
        element.on('click', function(event) {
          // if we have no href url, then don't navigate anywhere.
          if (!element.attr(href)) {
            event.preventDefault();
          }
        });
      };
    }
  }
});

/**
 * @ngdoc directive
 * @name ngHref
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in an href attribute will
 * make the link go to the wrong URL if the user clicks it before
 * Angular has a chance to replace the `{{hash}}` markup with its
 * value. Until Angular replaces the markup the link will be broken
 * and will most likely return a 404 error. The `ngHref` directive
 * solves this problem.
 *
 * The wrong way to write it:
 * ```html
 * <a href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <a ng-href="http://www.gravatar.com/avatar/{{hash}}">link1</a>
 * ```
 *
 * @element A
 * @param {template} ngHref any string which can contain `{{}}` markup.
 *
 * @example
 * This example shows various combinations of `href`, `ng-href` and `ng-click` attributes
 * in links and their different behaviors:
    <example>
      <file name="index.html">
        <input ng-model="value" /><br />
        <a id="link-1" href ng-click="value = 1">link 1</a> (link, don't reload)<br />
        <a id="link-2" href="" ng-click="value = 2">link 2</a> (link, don't reload)<br />
        <a id="link-3" ng-href="/{{'123'}}">link 3</a> (link, reload!)<br />
        <a id="link-4" href="" name="xx" ng-click="value = 4">anchor</a> (link, don't reload)<br />
        <a id="link-5" name="xxx" ng-click="value = 5">anchor</a> (no link)<br />
        <a id="link-6" ng-href="{{value}}">link</a> (link, change location)
      </file>
      <file name="protractor.js" type="protractor">
        it('should execute ng-click but not reload when href without value', function() {
          element(by.id('link-1')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('1');
          expect(element(by.id('link-1')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when href empty string', function() {
          element(by.id('link-2')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('2');
          expect(element(by.id('link-2')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click and change url when ng-href specified', function() {
          expect(element(by.id('link-3')).getAttribute('href')).toMatch(/\/123$/);

          element(by.id('link-3')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.

          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/123$/);
            });
          }, 5000, 'page should navigate to /123');
        });

        xit('should execute ng-click but not reload when href empty string and name specified', function() {
          element(by.id('link-4')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('4');
          expect(element(by.id('link-4')).getAttribute('href')).toBe('');
        });

        it('should execute ng-click but not reload when no href but name specified', function() {
          element(by.id('link-5')).click();
          expect(element(by.model('value')).getAttribute('value')).toEqual('5');
          expect(element(by.id('link-5')).getAttribute('href')).toBe(null);
        });

        it('should only change url when only ng-href', function() {
          element(by.model('value')).clear();
          element(by.model('value')).sendKeys('6');
          expect(element(by.id('link-6')).getAttribute('href')).toMatch(/\/6$/);

          element(by.id('link-6')).click();

          // At this point, we navigate away from an Angular page, so we need
          // to use browser.driver to get the base webdriver.
          browser.wait(function() {
            return browser.driver.getCurrentUrl().then(function(url) {
              return url.match(/\/6$/);
            });
          }, 5000, 'page should navigate to /6');
        });
      </file>
    </example>
 */

/**
 * @ngdoc directive
 * @name ngSrc
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `src` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrc` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-src="http://www.gravatar.com/avatar/{{hash}}"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrc any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngSrcset
 * @restrict A
 * @priority 99
 *
 * @description
 * Using Angular markup like `{{hash}}` in a `srcset` attribute doesn't
 * work right: The browser will fetch from the URL with the literal
 * text `{{hash}}` until Angular replaces the expression inside
 * `{{hash}}`. The `ngSrcset` directive solves this problem.
 *
 * The buggy way to write it:
 * ```html
 * <img srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * The correct way to write it:
 * ```html
 * <img ng-srcset="http://www.gravatar.com/avatar/{{hash}} 2x"/>
 * ```
 *
 * @element IMG
 * @param {template} ngSrcset any string which can contain `{{}}` markup.
 */

/**
 * @ngdoc directive
 * @name ngDisabled
 * @restrict A
 * @priority 100
 *
 * @description
 *
 * This directive sets the `disabled` attribute on the element if the
 * {@link guide/expression expression} inside `ngDisabled` evaluates to truthy.
 *
 * A special directive is necessary because we cannot use interpolation inside the `disabled`
 * attribute.  The following example would make the button enabled on Chrome/Firefox
 * but not on older IEs:
 *
 * ```html
 * <!-- See below for an example of ng-disabled being used correctly -->
 * <div ng-init="isDisabled = false">
 *  <button disabled="{{isDisabled}}">Disabled</button>
 * </div>
 * ```
 *
 * This is because the HTML specification does not require browsers to preserve the values of
 * boolean attributes such as `disabled` (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 *
 * @example
    <example>
      <file name="index.html">
        Click me to toggle: <input type="checkbox" ng-model="checked"><br/>
        <button ng-model="button" ng-disabled="checked">Button</button>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle button', function() {
          expect(element(by.css('button')).getAttribute('disabled')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('button')).getAttribute('disabled')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngDisabled If the {@link guide/expression expression} is truthy,
 *     then the `disabled` attribute will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngChecked
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as checked. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngChecked` directive solves this problem for the `checked` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to check both: <input type="checkbox" ng-model="master"><br/>
        <input id="checkSlave" type="checkbox" ng-checked="master">
      </file>
      <file name="protractor.js" type="protractor">
        it('should check both checkBoxes', function() {
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeFalsy();
          element(by.model('master')).click();
          expect(element(by.id('checkSlave')).getAttribute('checked')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngChecked If the {@link guide/expression expression} is truthy,
 *     then special attribute "checked" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngReadonly
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as readonly. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngReadonly` directive solves this problem for the `readonly` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
    <example>
      <file name="index.html">
        Check me to make text readonly: <input type="checkbox" ng-model="checked"><br/>
        <input type="text" ng-readonly="checked" value="I'm Angular"/>
      </file>
      <file name="protractor.js" type="protractor">
        it('should toggle readonly attr', function() {
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeFalsy();
          element(by.model('checked')).click();
          expect(element(by.css('[type="text"]')).getAttribute('readonly')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element INPUT
 * @param {expression} ngReadonly If the {@link guide/expression expression} is truthy,
 *     then special attribute "readonly" will be set on the element
 */


/**
 * @ngdoc directive
 * @name ngSelected
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as selected. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngSelected` directive solves this problem for the `selected` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 *
 * @example
    <example>
      <file name="index.html">
        Check me to select: <input type="checkbox" ng-model="selected"><br/>
        <select>
          <option>Hello!</option>
          <option id="greet" ng-selected="selected">Greetings!</option>
        </select>
      </file>
      <file name="protractor.js" type="protractor">
        it('should select Greetings!', function() {
          expect(element(by.id('greet')).getAttribute('selected')).toBeFalsy();
          element(by.model('selected')).click();
          expect(element(by.id('greet')).getAttribute('selected')).toBeTruthy();
        });
      </file>
    </example>
 *
 * @element OPTION
 * @param {expression} ngSelected If the {@link guide/expression expression} is truthy,
 *     then special attribute "selected" will be set on the element
 */

/**
 * @ngdoc directive
 * @name ngOpen
 * @restrict A
 * @priority 100
 *
 * @description
 * The HTML specification does not require browsers to preserve the values of boolean attributes
 * such as open. (Their presence means true and their absence means false.)
 * If we put an Angular interpolation expression into such an attribute then the
 * binding information would be lost when the browser removes the attribute.
 * The `ngOpen` directive solves this problem for the `open` attribute.
 * This complementary directive is not removed by the browser and so provides
 * a permanent reliable place to store the binding information.
 * @example
     <example>
       <file name="index.html">
         Check me check multiple: <input type="checkbox" ng-model="open"><br/>
         <details id="details" ng-open="open">
            <summary>Show/Hide me</summary>
         </details>
       </file>
       <file name="protractor.js" type="protractor">
         it('should toggle open', function() {
           expect(element(by.id('details')).getAttribute('open')).toBeFalsy();
           element(by.model('open')).click();
           expect(element(by.id('details')).getAttribute('open')).toBeTruthy();
         });
       </file>
     </example>
 *
 * @element DETAILS
 * @param {expression} ngOpen If the {@link guide/expression expression} is truthy,
 *     then special attribute "open" will be set on the element
 */

var ngAttributeAliasDirectives = {};


// boolean attrs are evaluated
forEach(BOOLEAN_ATTR, function(propName, attrName) {
  // binding to multiple is not supported
  if (propName == "multiple") return;

  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      restrict: 'A',
      priority: 100,
      link: function(scope, element, attr) {
        scope.$watch(attr[normalized], function ngBooleanAttrWatchAction(value) {
          attr.$set(attrName, !!value);
        });
      }
    };
  };
});

// aliased input attrs are evaluated
forEach(ALIASED_ATTR, function(htmlAttr, ngAttr) {
  ngAttributeAliasDirectives[ngAttr] = function() {
    return {
      priority: 100,
      link: function(scope, element, attr) {
        //special case ngPattern when a literal regular expression value
        //is used as the expression (this way we don't have to watch anything).
        if (ngAttr === "ngPattern" && attr.ngPattern.charAt(0) == "/") {
          var match = attr.ngPattern.match(REGEX_STRING_REGEXP);
          if (match) {
            attr.$set("ngPattern", new RegExp(match[1], match[2]));
            return;
          }
        }

        scope.$watch(attr[ngAttr], function ngAttrAliasWatchAction(value) {
          attr.$set(ngAttr, value);
        });
      }
    };
  };
});

// ng-src, ng-srcset, ng-href are interpolated
forEach(['src', 'srcset', 'href'], function(attrName) {
  var normalized = directiveNormalize('ng-' + attrName);
  ngAttributeAliasDirectives[normalized] = function() {
    return {
      priority: 99, // it needs to run after the attributes are interpolated
      link: function(scope, element, attr) {
        var propName = attrName,
            name = attrName;

        if (attrName === 'href' &&
            toString.call(element.prop('href')) === '[object SVGAnimatedString]') {
          name = 'xlinkHref';
          attr.$attr[name] = 'xlink:href';
          propName = null;
        }

        attr.$observe(normalized, function(value) {
          if (!value) {
            if (attrName === 'href') {
              attr.$set(name, null);
            }
            return;
          }

          attr.$set(name, value);

          // on IE, if "ng:src" directive declaration is used and "src" attribute doesn't exist
          // then calling element.setAttribute('src', 'foo') doesn't do anything, so we need
          // to set the property as well to achieve the desired effect.
          // we use attr[attrName] value since $set can sanitize the url.
          if (msie && propName) element.prop(propName, attr[name]);
        });
      }
    };
  };
});

/* global -nullFormCtrl, -SUBMITTED_CLASS, addSetValidityMethod: true
 */
var nullFormCtrl = {
  $addControl: noop,
  $$renameControl: nullFormRenameControl,
  $removeControl: noop,
  $setValidity: noop,
  $setDirty: noop,
  $setPristine: noop,
  $setSubmitted: noop
},
SUBMITTED_CLASS = 'ng-submitted';

function nullFormRenameControl(control, name) {
  control.$name = name;
}

/**
 * @ngdoc type
 * @name form.FormController
 *
 * @property {boolean} $pristine True if user has not interacted with the form yet.
 * @property {boolean} $dirty True if user has already interacted with the form.
 * @property {boolean} $valid True if all of the containing forms and controls are valid.
 * @property {boolean} $invalid True if at least one containing control or form is invalid.
 * @property {boolean} $submitted True if user has submitted the form even if its invalid.
 *
 * @property {Object} $error Is an object hash, containing references to controls or
 *  forms with failing validators, where:
 *
 *  - keys are validation tokens (error names),
 *  - values are arrays of controls or forms that have a failing validator for given error name.
 *
 *  Built-in validation tokens:
 *
 *  - `email`
 *  - `max`
 *  - `maxlength`
 *  - `min`
 *  - `minlength`
 *  - `number`
 *  - `pattern`
 *  - `required`
 *  - `url`
 *  - `date`
 *  - `datetimelocal`
 *  - `time`
 *  - `week`
 *  - `month`
 *
 * @description
 * `FormController` keeps track of all its controls and nested forms as well as the state of them,
 * such as being valid/invalid or dirty/pristine.
 *
 * Each {@link ng.directive:form form} directive creates an instance
 * of `FormController`.
 *
 */
//asks for $scope to fool the BC controller module
FormController.$inject = ['$element', '$attrs', '$scope', '$animate', '$interpolate'];
function FormController(element, attrs, $scope, $animate, $interpolate) {
  var form = this,
      controls = [];

  var parentForm = form.$$parentForm = element.parent().controller('form') || nullFormCtrl;

  // init state
  form.$error = {};
  form.$$success = {};
  form.$pending = undefined;
  form.$name = $interpolate(attrs.name || attrs.ngForm || '')($scope);
  form.$dirty = false;
  form.$pristine = true;
  form.$valid = true;
  form.$invalid = false;
  form.$submitted = false;

  parentForm.$addControl(form);

  /**
   * @ngdoc method
   * @name form.FormController#$rollbackViewValue
   *
   * @description
   * Rollback all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is typically needed by the reset button of
   * a form that uses `ng-model-options` to pend updates.
   */
  form.$rollbackViewValue = function() {
    forEach(controls, function(control) {
      control.$rollbackViewValue();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$commitViewValue
   *
   * @description
   * Commit all form controls pending updates to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  form.$commitViewValue = function() {
    forEach(controls, function(control) {
      control.$commitViewValue();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$addControl
   *
   * @description
   * Register a control with the form.
   *
   * Input elements using ngModelController do this automatically when they are linked.
   */
  form.$addControl = function(control) {
    // Breaking change - before, inputs whose name was "hasOwnProperty" were quietly ignored
    // and not added to the scope.  Now we throw an error.
    assertNotHasOwnProperty(control.$name, 'input');
    controls.push(control);

    if (control.$name) {
      form[control.$name] = control;
    }
  };

  // Private API: rename a form control
  form.$$renameControl = function(control, newName) {
    var oldName = control.$name;

    if (form[oldName] === control) {
      delete form[oldName];
    }
    form[newName] = control;
    control.$name = newName;
  };

  /**
   * @ngdoc method
   * @name form.FormController#$removeControl
   *
   * @description
   * Deregister a control from the form.
   *
   * Input elements using ngModelController do this automatically when they are destroyed.
   */
  form.$removeControl = function(control) {
    if (control.$name && form[control.$name] === control) {
      delete form[control.$name];
    }
    forEach(form.$pending, function(value, name) {
      form.$setValidity(name, null, control);
    });
    forEach(form.$error, function(value, name) {
      form.$setValidity(name, null, control);
    });
    forEach(form.$$success, function(value, name) {
      form.$setValidity(name, null, control);
    });

    arrayRemove(controls, control);
  };


  /**
   * @ngdoc method
   * @name form.FormController#$setValidity
   *
   * @description
   * Sets the validity of a form control.
   *
   * This method will also propagate to parent forms.
   */
  addSetValidityMethod({
    ctrl: this,
    $element: element,
    set: function(object, property, controller) {
      var list = object[property];
      if (!list) {
        object[property] = [controller];
      } else {
        var index = list.indexOf(controller);
        if (index === -1) {
          list.push(controller);
        }
      }
    },
    unset: function(object, property, controller) {
      var list = object[property];
      if (!list) {
        return;
      }
      arrayRemove(list, controller);
      if (list.length === 0) {
        delete object[property];
      }
    },
    parentForm: parentForm,
    $animate: $animate
  });

  /**
   * @ngdoc method
   * @name form.FormController#$setDirty
   *
   * @description
   * Sets the form to a dirty state.
   *
   * This method can be called to add the 'ng-dirty' class and set the form to a dirty
   * state (ng-dirty class). This method will also propagate to parent forms.
   */
  form.$setDirty = function() {
    $animate.removeClass(element, PRISTINE_CLASS);
    $animate.addClass(element, DIRTY_CLASS);
    form.$dirty = true;
    form.$pristine = false;
    parentForm.$setDirty();
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setPristine
   *
   * @description
   * Sets the form to its pristine state.
   *
   * This method can be called to remove the 'ng-dirty' class and set the form to its pristine
   * state (ng-pristine class). This method will also propagate to all the controls contained
   * in this form.
   *
   * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after
   * saving or resetting it.
   */
  form.$setPristine = function() {
    $animate.setClass(element, PRISTINE_CLASS, DIRTY_CLASS + ' ' + SUBMITTED_CLASS);
    form.$dirty = false;
    form.$pristine = true;
    form.$submitted = false;
    forEach(controls, function(control) {
      control.$setPristine();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setUntouched
   *
   * @description
   * Sets the form to its untouched state.
   *
   * This method can be called to remove the 'ng-touched' class and set the form controls to their
   * untouched state (ng-untouched class).
   *
   * Setting a form controls back to their untouched state is often useful when setting the form
   * back to its pristine state.
   */
  form.$setUntouched = function() {
    forEach(controls, function(control) {
      control.$setUntouched();
    });
  };

  /**
   * @ngdoc method
   * @name form.FormController#$setSubmitted
   *
   * @description
   * Sets the form to its submitted state.
   */
  form.$setSubmitted = function() {
    $animate.addClass(element, SUBMITTED_CLASS);
    form.$submitted = true;
    parentForm.$setSubmitted();
  };
}

/**
 * @ngdoc directive
 * @name ngForm
 * @restrict EAC
 *
 * @description
 * Nestable alias of {@link ng.directive:form `form`} directive. HTML
 * does not allow nesting of form elements. It is useful to nest forms, for example if the validity of a
 * sub-group of controls needs to be determined.
 *
 * Note: the purpose of `ngForm` is to group controls,
 * but not to be a replacement for the `<form>` tag with all of its capabilities
 * (e.g. posting to the server, ...).
 *
 * @param {string=} ngForm|name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 *
 */

 /**
 * @ngdoc directive
 * @name form
 * @restrict E
 *
 * @description
 * Directive that instantiates
 * {@link form.FormController FormController}.
 *
 * If the `name` attribute is specified, the form controller is published onto the current scope under
 * this name.
 *
 * # Alias: {@link ng.directive:ngForm `ngForm`}
 *
 * In Angular, forms can be nested. This means that the outer form is valid when all of the child
 * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so
 * Angular provides the {@link ng.directive:ngForm `ngForm`} directive which behaves identically to
 * `<form>` but can be nested.  This allows you to have nested forms, which is very useful when
 * using Angular validation directives in forms that are dynamically generated using the
 * {@link ng.directive:ngRepeat `ngRepeat`} directive. Since you cannot dynamically generate the `name`
 * attribute of input elements using interpolation, you have to wrap each set of repeated inputs in an
 * `ngForm` directive and nest these in an outer `form` element.
 *
 *
 * # CSS classes
 *  - `ng-valid` is set if the form is valid.
 *  - `ng-invalid` is set if the form is invalid.
 *  - `ng-pristine` is set if the form is pristine.
 *  - `ng-dirty` is set if the form is dirty.
 *  - `ng-submitted` is set if the form was submitted.
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 *
 * # Submitting a form and preventing the default action
 *
 * Since the role of forms in client-side Angular applications is different than in classical
 * roundtrip apps, it is desirable for the browser not to translate the form submission into a full
 * page reload that sends the data to the server. Instead some javascript logic should be triggered
 * to handle the form submission in an application-specific way.
 *
 * For this reason, Angular prevents the default action (form submission to the server) unless the
 * `<form>` element has an `action` attribute specified.
 *
 * You can use one of the following two ways to specify what javascript method should be called when
 * a form is submitted:
 *
 * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element
 * - {@link ng.directive:ngClick ngClick} directive on the first
  *  button or input field of type submit (input[type=submit])
 *
 * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}
 * or {@link ng.directive:ngClick ngClick} directives.
 * This is because of the following form submission rules in the HTML specification:
 *
 * - If a form has only one input field then hitting enter in this field triggers form submit
 * (`ngSubmit`)
 * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter
 * doesn't trigger submit
 * - if a form has one or more input fields and one or more buttons or input[type=submit] then
 * hitting enter in any of the input fields will trigger the click handler on the *first* button or
 * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)
 *
 * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is
 * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * ## Animation Hooks
 *
 * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.
 * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any
 * other validations that are performed within the form. Animations in ngForm are similar to how
 * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well
 * as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style a form element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-form {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-form.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
    <example deps="angular-animate.js" animations="true" fixBase="true" module="formExample">
      <file name="index.html">
       <script>
         angular.module('formExample', [])
           .controller('FormController', ['$scope', function($scope) {
             $scope.userType = 'guest';
           }]);
       </script>
       <style>
        .my-form {
          -webkit-transition:all linear 0.5s;
          transition:all linear 0.5s;
          background: transparent;
        }
        .my-form.ng-invalid {
          background: red;
        }
       </style>
       <form name="myForm" ng-controller="FormController" class="my-form">
         userType: <input name="input" ng-model="userType" required>
         <span class="error" ng-show="myForm.input.$error.required">Required!</span><br>
         <code>userType = {{userType}}</code><br>
         <code>myForm.input.$valid = {{myForm.input.$valid}}</code><br>
         <code>myForm.input.$error = {{myForm.input.$error}}</code><br>
         <code>myForm.$valid = {{myForm.$valid}}</code><br>
         <code>myForm.$error.required = {{!!myForm.$error.required}}</code><br>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        it('should initialize to model', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));

          expect(userType.getText()).toContain('guest');
          expect(valid.getText()).toContain('true');
        });

        it('should be invalid if empty', function() {
          var userType = element(by.binding('userType'));
          var valid = element(by.binding('myForm.input.$valid'));
          var userInput = element(by.model('userType'));

          userInput.clear();
          userInput.sendKeys('');

          expect(userType.getText()).toEqual('userType =');
          expect(valid.getText()).toContain('false');
        });
      </file>
    </example>
 *
 * @param {string=} name Name of the form. If specified, the form controller will be published into
 *                       related scope, under this name.
 */
var formDirectiveFactory = function(isNgForm) {
  return ['$timeout', function($timeout) {
    var formDirective = {
      name: 'form',
      restrict: isNgForm ? 'EAC' : 'E',
      controller: FormController,
      compile: function ngFormCompile(formElement, attr) {
        // Setup initial state of the control
        formElement.addClass(PRISTINE_CLASS).addClass(VALID_CLASS);

        var nameAttr = attr.name ? 'name' : (isNgForm && attr.ngForm ? 'ngForm' : false);

        return {
          pre: function ngFormPreLink(scope, formElement, attr, controller) {
            // if `action` attr is not present on the form, prevent the default action (submission)
            if (!('action' in attr)) {
              // we can't use jq events because if a form is destroyed during submission the default
              // action is not prevented. see #1238
              //
              // IE 9 is not affected because it doesn't fire a submit event and try to do a full
              // page reload if the form was destroyed by submission of the form via a click handler
              // on a button in the form. Looks like an IE9 specific bug.
              var handleFormSubmission = function(event) {
                scope.$apply(function() {
                  controller.$commitViewValue();
                  controller.$setSubmitted();
                });

                event.preventDefault();
              };

              addEventListenerFn(formElement[0], 'submit', handleFormSubmission);

              // unregister the preventDefault listener so that we don't not leak memory but in a
              // way that will achieve the prevention of the default action.
              formElement.on('$destroy', function() {
                $timeout(function() {
                  removeEventListenerFn(formElement[0], 'submit', handleFormSubmission);
                }, 0, false);
              });
            }

            var parentFormCtrl = controller.$$parentForm;

            if (nameAttr) {
              setter(scope, null, controller.$name, controller, controller.$name);
              attr.$observe(nameAttr, function(newValue) {
                if (controller.$name === newValue) return;
                setter(scope, null, controller.$name, undefined, controller.$name);
                parentFormCtrl.$$renameControl(controller, newValue);
                setter(scope, null, controller.$name, controller, controller.$name);
              });
            }
            formElement.on('$destroy', function() {
              parentFormCtrl.$removeControl(controller);
              if (nameAttr) {
                setter(scope, null, attr[nameAttr], undefined, controller.$name);
              }
              extend(controller, nullFormCtrl); //stop propagating child destruction handlers upwards
            });
          }
        };
      }
    };

    return formDirective;
  }];
};

var formDirective = formDirectiveFactory();
var ngFormDirective = formDirectiveFactory(true);

/* global VALID_CLASS: false,
  INVALID_CLASS: false,
  PRISTINE_CLASS: false,
  DIRTY_CLASS: false,
  UNTOUCHED_CLASS: false,
  TOUCHED_CLASS: false,
  $ngModelMinErr: false,
*/

// Regex code is obtained from SO: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231
var ISO_DATE_REGEXP = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/;
var URL_REGEXP = /^(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;
var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
var NUMBER_REGEXP = /^\s*(\-|\+)?(\d+|(\d*(\.\d*)))\s*$/;
var DATE_REGEXP = /^(\d{4})-(\d{2})-(\d{2})$/;
var DATETIMELOCAL_REGEXP = /^(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;
var WEEK_REGEXP = /^(\d{4})-W(\d\d)$/;
var MONTH_REGEXP = /^(\d{4})-(\d\d)$/;
var TIME_REGEXP = /^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/;

var inputType = {

  /**
   * @ngdoc input
   * @name input[text]
   *
   * @description
   * Standard HTML text input with angular data binding, inherited by most of the `input` elements.
   *
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Adds `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
   *    This parameter is ignored for input[type=password] controls, which will never trim the
   *    input.
   *
   * @example
      <example name="text-input-directive" module="textInputExample">
        <file name="index.html">
         <script>
           angular.module('textInputExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 text: 'guest',
                 word: /^\s*\w*\s*$/
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Single word: <input type="text" name="input" ng-model="example.text"
                               ng-pattern="example.word" required ng-trim="false">
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.pattern">
             Single word only!</span>

           <tt>text = {{example.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('example.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('guest');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if multi word', function() {
            input.clear();
            input.sendKeys('hello world');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'text': textInputType,

    /**
     * @ngdoc input
     * @name input[date]
     *
     * @description
     * Input with date validation and transformation. In browsers that do not yet support
     * the HTML5 date input, a text element will be used. In that case, text must be entered in a valid ISO-8601
     * date format (yyyy-MM-dd), for example: `2009-01-06`. Since many
     * modern browsers do not yet support this input type, it is important to provide cues to users on the
     * expected input format via a placeholder or label.
     *
     * The model must always be a Date object, otherwise Angular will throw an error.
     * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
     *
     * The timezone to be used to read/write the `Date` instance in the model can be defined using
     * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
     *
     * @param {string} ngModel Assignable angular expression to data-bind to.
     * @param {string=} name Property name of the form under which the control is published.
     * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
     * valid ISO date string (yyyy-MM-dd).
     * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
     * a valid ISO date string (yyyy-MM-dd).
     * @param {string=} required Sets `required` validation error key if the value is not entered.
     * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
     *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
     *    `required` when you want to data-bind to the `required` attribute.
     * @param {string=} ngChange Angular expression to be executed when input changes due to user
     *    interaction with the input element.
     *
     * @example
     <example name="date-input-directive" module="dateInputExample">
     <file name="index.html">
       <script>
          angular.module('dateInputExample', [])
            .controller('DateController', ['$scope', function($scope) {
              $scope.example = {
                value: new Date(2013, 9, 22)
              };
            }]);
       </script>
       <form name="myForm" ng-controller="DateController as dateCtrl">
          Pick a date in 2013:
          <input type="date" id="exampleInput" name="input" ng-model="example.value"
              placeholder="yyyy-MM-dd" min="2013-01-01" max="2013-12-31" required />
          <span class="error" ng-show="myForm.input.$error.required">
              Required!</span>
          <span class="error" ng-show="myForm.input.$error.date">
              Not a valid date!</span>
           <tt>value = {{example.value | date: "yyyy-MM-dd"}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
       </form>
     </file>
     <file name="protractor.js" type="protractor">
        var value = element(by.binding('example.value | date: "yyyy-MM-dd"'));
        var valid = element(by.binding('myForm.input.$valid'));
        var input = element(by.model('example.value'));

        // currently protractor/webdriver does not support
        // sending keys to all known HTML5 input controls
        // for various browsers (see https://github.com/angular/protractor/issues/562).
        function setInput(val) {
          // set the value of the element and force validation.
          var scr = "var ipt = document.getElementById('exampleInput'); " +
          "ipt.value = '" + val + "';" +
          "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
          browser.executeScript(scr);
        }

        it('should initialize to model', function() {
          expect(value.getText()).toContain('2013-10-22');
          expect(valid.getText()).toContain('myForm.input.$valid = true');
        });

        it('should be invalid if empty', function() {
          setInput('');
          expect(value.getText()).toEqual('value =');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });

        it('should be invalid if over max', function() {
          setInput('2015-01-01');
          expect(value.getText()).toContain('');
          expect(valid.getText()).toContain('myForm.input.$valid = false');
        });
     </file>
     </example>
     */
  'date': createDateInputType('date', DATE_REGEXP,
         createDateParser(DATE_REGEXP, ['yyyy', 'MM', 'dd']),
         'yyyy-MM-dd'),

   /**
    * @ngdoc input
    * @name input[datetime-local]
    *
    * @description
    * Input with datetime validation and transformation. In browsers that do not yet support
    * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * local datetime format (yyyy-MM-ddTHH:mm:ss), for example: `2010-12-28T14:57:00`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
    * valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
    * a valid ISO datetime format (yyyy-MM-ddTHH:mm:ss).
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="datetimelocal-input-directive" module="dateExample">
    <file name="index.html">
      <script>
        angular.module('dateExample', [])
          .controller('DateController', ['$scope', function($scope) {
            $scope.example = {
              value: new Date(2010, 11, 28, 14, 57)
            };
          }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        Pick a date between in 2013:
        <input type="datetime-local" id="exampleInput" name="input" ng-model="example.value"
            placeholder="yyyy-MM-ddTHH:mm:ss" min="2001-01-01T00:00:00" max="2013-12-31T00:00:00" required />
        <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
        <span class="error" ng-show="myForm.input.$error.datetimelocal">
            Not a valid date!</span>
        <tt>value = {{example.value | date: "yyyy-MM-ddTHH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM-ddTHH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2010-12-28T14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01-01T23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'datetime-local': createDateInputType('datetimelocal', DATETIMELOCAL_REGEXP,
      createDateParser(DATETIMELOCAL_REGEXP, ['yyyy', 'MM', 'dd', 'HH', 'mm', 'ss', 'sss']),
      'yyyy-MM-ddTHH:mm:ss.sss'),

  /**
   * @ngdoc input
   * @name input[time]
   *
   * @description
   * Input with time validation and transformation. In browsers that do not yet support
   * the HTML5 date input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * local time format (HH:mm:ss), for example: `14:57:00`. Model must be a Date object. This binding will always output a
   * Date object to the model of January 1, 1970, or local date `new Date(1970, 0, 1, HH, mm, ss)`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
   * valid ISO time format (HH:mm:ss).
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be a
   * valid ISO time format (HH:mm:ss).
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="time-input-directive" module="timeExample">
   <file name="index.html">
     <script>
      angular.module('timeExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(1970, 0, 1, 14, 57, 0)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
        Pick a between 8am and 5pm:
        <input type="time" id="exampleInput" name="input" ng-model="example.value"
            placeholder="HH:mm:ss" min="08:00:00" max="17:00:00" required />
        <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
        <span class="error" ng-show="myForm.input.$error.time">
            Not a valid date!</span>
        <tt>value = {{example.value | date: "HH:mm:ss"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "HH:mm:ss"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('14:57:00');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('23:59:00');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'time': createDateInputType('time', TIME_REGEXP,
      createDateParser(TIME_REGEXP, ['HH', 'mm', 'ss', 'sss']),
     'HH:mm:ss.sss'),

   /**
    * @ngdoc input
    * @name input[week]
    *
    * @description
    * Input with week-of-the-year validation and transformation to Date. In browsers that do not yet support
    * the HTML5 week input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
    * week format (yyyy-W##), for example: `2013-W02`.
    *
    * The model must always be a Date object, otherwise Angular will throw an error.
    * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
    *
    * The timezone to be used to read/write the `Date` instance in the model can be defined using
    * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
    *
    * @param {string} ngModel Assignable angular expression to data-bind to.
    * @param {string=} name Property name of the form under which the control is published.
    * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be a
    * valid ISO week format (yyyy-W##).
    * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must be
    * a valid ISO week format (yyyy-W##).
    * @param {string=} required Sets `required` validation error key if the value is not entered.
    * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
    *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
    *    `required` when you want to data-bind to the `required` attribute.
    * @param {string=} ngChange Angular expression to be executed when input changes due to user
    *    interaction with the input element.
    *
    * @example
    <example name="week-input-directive" module="weekExample">
    <file name="index.html">
      <script>
      angular.module('weekExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 0, 3)
          };
        }]);
      </script>
      <form name="myForm" ng-controller="DateController as dateCtrl">
        Pick a date between in 2013:
        <input id="exampleInput" type="week" name="input" ng-model="example.value"
            placeholder="YYYY-W##" min="2012-W32" max="2013-W52" required />
        <span class="error" ng-show="myForm.input.$error.required">
            Required!</span>
        <span class="error" ng-show="myForm.input.$error.week">
            Not a valid date!</span>
        <tt>value = {{example.value | date: "yyyy-Www"}}</tt><br/>
        <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
        <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
        <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
        <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-Www"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-W01');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-W01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
    </file>
    </example>
    */
  'week': createDateInputType('week', WEEK_REGEXP, weekParser, 'yyyy-Www'),

  /**
   * @ngdoc input
   * @name input[month]
   *
   * @description
   * Input with month validation and transformation. In browsers that do not yet support
   * the HTML5 month input, a text element will be used. In that case, the text must be entered in a valid ISO-8601
   * month format (yyyy-MM), for example: `2009-01`.
   *
   * The model must always be a Date object, otherwise Angular will throw an error.
   * Invalid `Date` objects (dates whose `getTime()` is `NaN`) will be rendered as an empty string.
   * If the model is not set to the first of the month, the next view to model update will set it
   * to the first of the month.
   *
   * The timezone to be used to read/write the `Date` instance in the model can be defined using
   * {@link ng.directive:ngModelOptions ngModelOptions}. By default, this is the timezone of the browser.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`. This must be
   * a valid ISO month format (yyyy-MM).
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`. This must
   * be a valid ISO month format (yyyy-MM).
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
   <example name="month-input-directive" module="monthExample">
   <file name="index.html">
     <script>
      angular.module('monthExample', [])
        .controller('DateController', ['$scope', function($scope) {
          $scope.example = {
            value: new Date(2013, 9, 1)
          };
        }]);
     </script>
     <form name="myForm" ng-controller="DateController as dateCtrl">
       Pick a month in 2013:
       <input id="exampleInput" type="month" name="input" ng-model="example.value"
          placeholder="yyyy-MM" min="2013-01" max="2013-12" required />
       <span class="error" ng-show="myForm.input.$error.required">
          Required!</span>
       <span class="error" ng-show="myForm.input.$error.month">
          Not a valid month!</span>
       <tt>value = {{example.value | date: "yyyy-MM"}}</tt><br/>
       <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
       <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
       <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
       <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
     </form>
   </file>
   <file name="protractor.js" type="protractor">
      var value = element(by.binding('example.value | date: "yyyy-MM"'));
      var valid = element(by.binding('myForm.input.$valid'));
      var input = element(by.model('example.value'));

      // currently protractor/webdriver does not support
      // sending keys to all known HTML5 input controls
      // for various browsers (https://github.com/angular/protractor/issues/562).
      function setInput(val) {
        // set the value of the element and force validation.
        var scr = "var ipt = document.getElementById('exampleInput'); " +
        "ipt.value = '" + val + "';" +
        "angular.element(ipt).scope().$apply(function(s) { s.myForm[ipt.name].$setViewValue('" + val + "'); });";
        browser.executeScript(scr);
      }

      it('should initialize to model', function() {
        expect(value.getText()).toContain('2013-10');
        expect(valid.getText()).toContain('myForm.input.$valid = true');
      });

      it('should be invalid if empty', function() {
        setInput('');
        expect(value.getText()).toEqual('value =');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });

      it('should be invalid if over max', function() {
        setInput('2015-01');
        expect(value.getText()).toContain('');
        expect(valid.getText()).toContain('myForm.input.$valid = false');
      });
   </file>
   </example>
   */
  'month': createDateInputType('month', MONTH_REGEXP,
     createDateParser(MONTH_REGEXP, ['yyyy', 'MM']),
     'yyyy-MM'),

  /**
   * @ngdoc input
   * @name input[number]
   *
   * @description
   * Text input with number validation and transformation. Sets the `number` validation
   * error if not a valid number.
   *
   * <div class="alert alert-warning">
   * The model must always be of type `number` otherwise Angular will throw an error.
   * Be aware that a string containing a number is not enough. See the {@link ngModel:numfmt}
   * error docs for more information and an example of how to convert your model if necessary.
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} min Sets the `min` validation error key if the value entered is less than `min`.
   * @param {string=} max Sets the `max` validation error key if the value entered is greater than `max`.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="number-input-directive" module="numberExample">
        <file name="index.html">
         <script>
           angular.module('numberExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.example = {
                 value: 12
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Number: <input type="number" name="input" ng-model="example.value"
                          min="0" max="99" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.number">
             Not valid number!</span>
           <tt>value = {{example.value}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var value = element(by.binding('example.value'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('example.value'));

          it('should initialize to model', function() {
            expect(value.getText()).toContain('12');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if over max', function() {
            input.clear();
            input.sendKeys('123');
            expect(value.getText()).toEqual('value =');
            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'number': numberInputType,


  /**
   * @ngdoc input
   * @name input[url]
   *
   * @description
   * Text input with URL validation. Sets the `url` validation error key if the content is not a
   * valid URL.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[url]` uses a regex to validate urls that is derived from the regex
   * used in Chromium. If you need stricter validation, you can use `ng-pattern` or modify
   * the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="url-input-directive" module="urlExample">
        <file name="index.html">
         <script>
           angular.module('urlExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.url = {
                 text: 'http://google.com'
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           URL: <input type="url" name="input" ng-model="url.text" required>
           <span class="error" ng-show="myForm.input.$error.required">
             Required!</span>
           <span class="error" ng-show="myForm.input.$error.url">
             Not valid url!</span>
           <tt>text = {{url.text}}</tt><br/>
           <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
           <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
           <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
           <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
           <tt>myForm.$error.url = {{!!myForm.$error.url}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('url.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('url.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('http://google.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');

            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not url', function() {
            input.clear();
            input.sendKeys('box');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'url': urlInputType,


  /**
   * @ngdoc input
   * @name input[email]
   *
   * @description
   * Text input with email validation. Sets the `email` validation error key if not a valid email
   * address.
   *
   * <div class="alert alert-warning">
   * **Note:** `input[email]` uses a regex to validate email addresses that is derived from the regex
   * used in Chromium. If you need stricter validation (e.g. requiring a top-level domain), you can
   * use `ng-pattern` or modify the built-in validators (see the {@link guide/forms Forms guide})
   * </div>
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} required Sets `required` validation error key if the value is not entered.
   * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
   *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
   *    `required` when you want to data-bind to the `required` attribute.
   * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
   *    minlength.
   * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
   *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of
   *    any length.
   * @param {string=} pattern Similar to `ngPattern` except that the attribute value is the actual string
   *    that contains the regular expression body that will be converted to a regular expression
   *    as in the ngPattern directive.
   * @param {string=} ngPattern Sets `pattern` validation error key if the ngModel value does not match
   *    a RegExp found by evaluating the Angular expression given in the attribute value.
   *    If the expression evaluates to a RegExp object then this is used directly.
   *    If the expression is a string then it will be converted to a RegExp after wrapping it in `^` and `$`
   *    characters. For instance, `"abc"` will be converted to `new RegExp('^abc$')`.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="email-input-directive" module="emailExample">
        <file name="index.html">
         <script>
           angular.module('emailExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.email = {
                 text: 'me@example.com'
               };
             }]);
         </script>
           <form name="myForm" ng-controller="ExampleController">
             Email: <input type="email" name="input" ng-model="email.text" required>
             <span class="error" ng-show="myForm.input.$error.required">
               Required!</span>
             <span class="error" ng-show="myForm.input.$error.email">
               Not valid email!</span>
             <tt>text = {{email.text}}</tt><br/>
             <tt>myForm.input.$valid = {{myForm.input.$valid}}</tt><br/>
             <tt>myForm.input.$error = {{myForm.input.$error}}</tt><br/>
             <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
             <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
             <tt>myForm.$error.email = {{!!myForm.$error.email}}</tt><br/>
           </form>
         </file>
        <file name="protractor.js" type="protractor">
          var text = element(by.binding('email.text'));
          var valid = element(by.binding('myForm.input.$valid'));
          var input = element(by.model('email.text'));

          it('should initialize to model', function() {
            expect(text.getText()).toContain('me@example.com');
            expect(valid.getText()).toContain('true');
          });

          it('should be invalid if empty', function() {
            input.clear();
            input.sendKeys('');
            expect(text.getText()).toEqual('text =');
            expect(valid.getText()).toContain('false');
          });

          it('should be invalid if not email', function() {
            input.clear();
            input.sendKeys('xxx');

            expect(valid.getText()).toContain('false');
          });
        </file>
      </example>
   */
  'email': emailInputType,


  /**
   * @ngdoc input
   * @name input[radio]
   *
   * @description
   * HTML radio button.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string} value The value to which the expression should be set when selected.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   * @param {string} ngValue Angular expression which sets the value to which the expression should
   *    be set when selected.
   *
   * @example
      <example name="radio-input-directive" module="radioExample">
        <file name="index.html">
         <script>
           angular.module('radioExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.color = {
                 name: 'blue'
               };
               $scope.specialValue = {
                 "id": "12345",
                 "value": "green"
               };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           <input type="radio" ng-model="color.name" value="red">  Red <br/>
           <input type="radio" ng-model="color.name" ng-value="specialValue"> Green <br/>
           <input type="radio" ng-model="color.name" value="blue"> Blue <br/>
           <tt>color = {{color.name | json}}</tt><br/>
          </form>
          Note that `ng-value="specialValue"` sets radio item's value to be the value of `$scope.specialValue`.
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var color = element(by.binding('color.name'));

            expect(color.getText()).toContain('blue');

            element.all(by.model('color.name')).get(0).click();

            expect(color.getText()).toContain('red');
          });
        </file>
      </example>
   */
  'radio': radioInputType,


  /**
   * @ngdoc input
   * @name input[checkbox]
   *
   * @description
   * HTML checkbox.
   *
   * @param {string} ngModel Assignable angular expression to data-bind to.
   * @param {string=} name Property name of the form under which the control is published.
   * @param {expression=} ngTrueValue The value to which the expression should be set when selected.
   * @param {expression=} ngFalseValue The value to which the expression should be set when not selected.
   * @param {string=} ngChange Angular expression to be executed when input changes due to user
   *    interaction with the input element.
   *
   * @example
      <example name="checkbox-input-directive" module="checkboxExample">
        <file name="index.html">
         <script>
           angular.module('checkboxExample', [])
             .controller('ExampleController', ['$scope', function($scope) {
               $scope.checkboxModel = {
                value1 : true,
                value2 : 'YES'
              };
             }]);
         </script>
         <form name="myForm" ng-controller="ExampleController">
           Value1: <input type="checkbox" ng-model="checkboxModel.value1"> <br/>
           Value2: <input type="checkbox" ng-model="checkboxModel.value2"
                          ng-true-value="'YES'" ng-false-value="'NO'"> <br/>
           <tt>value1 = {{checkboxModel.value1}}</tt><br/>
           <tt>value2 = {{checkboxModel.value2}}</tt><br/>
          </form>
        </file>
        <file name="protractor.js" type="protractor">
          it('should change state', function() {
            var value1 = element(by.binding('checkboxModel.value1'));
            var value2 = element(by.binding('checkboxModel.value2'));

            expect(value1.getText()).toContain('true');
            expect(value2.getText()).toContain('YES');

            element(by.model('checkboxModel.value1')).click();
            element(by.model('checkboxModel.value2')).click();

            expect(value1.getText()).toContain('false');
            expect(value2.getText()).toContain('NO');
          });
        </file>
      </example>
   */
  'checkbox': checkboxInputType,

  'hidden': noop,
  'button': noop,
  'submit': noop,
  'reset': noop,
  'file': noop
};

function stringBasedInputType(ctrl) {
  ctrl.$formatters.push(function(value) {
    return ctrl.$isEmpty(value) ? value : value.toString();
  });
}

function textInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);
}

function baseInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  var type = lowercase(element[0].type);

  // In composition mode, users are still inputing intermediate text buffer,
  // hold the listener until composition is done.
  // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent
  if (!$sniffer.android) {
    var composing = false;

    element.on('compositionstart', function(data) {
      composing = true;
    });

    element.on('compositionend', function() {
      composing = false;
      listener();
    });
  }

  var listener = function(ev) {
    if (timeout) {
      $browser.defer.cancel(timeout);
      timeout = null;
    }
    if (composing) return;
    var value = element.val(),
        event = ev && ev.type;

    // By default we will trim the value
    // If the attribute ng-trim exists we will avoid trimming
    // If input type is 'password', the value is never trimmed
    if (type !== 'password' && (!attr.ngTrim || attr.ngTrim !== 'false')) {
      value = trim(value);
    }

    // If a control is suffering from bad input (due to native validators), browsers discard its
    // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the
    // control's value is the same empty value twice in a row.
    if (ctrl.$viewValue !== value || (value === '' && ctrl.$$hasNativeValidators)) {
      ctrl.$setViewValue(value, event);
    }
  };

  // if the browser does support "input" event, we are fine - except on IE9 which doesn't fire the
  // input event on backspace, delete or cut
  if ($sniffer.hasEvent('input')) {
    element.on('input', listener);
  } else {
    var timeout;

    var deferListener = function(ev, input, origValue) {
      if (!timeout) {
        timeout = $browser.defer(function() {
          timeout = null;
          if (!input || input.value !== origValue) {
            listener(ev);
          }
        });
      }
    };

    element.on('keydown', function(event) {
      var key = event.keyCode;

      // ignore
      //    command            modifiers                   arrows
      if (key === 91 || (15 < key && key < 19) || (37 <= key && key <= 40)) return;

      deferListener(event, this, this.value);
    });

    // if user modifies input value using context menu in IE, we need "paste" and "cut" events to catch it
    if ($sniffer.hasEvent('paste')) {
      element.on('paste cut', deferListener);
    }
  }

  // if user paste into input using mouse on older browser
  // or form autocomplete on newer browser, we need "change" event to catch it
  element.on('change', listener);

  ctrl.$render = function() {
    element.val(ctrl.$isEmpty(ctrl.$viewValue) ? '' : ctrl.$viewValue);
  };
}

function weekParser(isoWeek, existingDate) {
  if (isDate(isoWeek)) {
    return isoWeek;
  }

  if (isString(isoWeek)) {
    WEEK_REGEXP.lastIndex = 0;
    var parts = WEEK_REGEXP.exec(isoWeek);
    if (parts) {
      var year = +parts[1],
          week = +parts[2],
          hours = 0,
          minutes = 0,
          seconds = 0,
          milliseconds = 0,
          firstThurs = getFirstThursdayOfYear(year),
          addDays = (week - 1) * 7;

      if (existingDate) {
        hours = existingDate.getHours();
        minutes = existingDate.getMinutes();
        seconds = existingDate.getSeconds();
        milliseconds = existingDate.getMilliseconds();
      }

      return new Date(year, 0, firstThurs.getDate() + addDays, hours, minutes, seconds, milliseconds);
    }
  }

  return NaN;
}

function createDateParser(regexp, mapping) {
  return function(iso, date) {
    var parts, map;

    if (isDate(iso)) {
      return iso;
    }

    if (isString(iso)) {
      // When a date is JSON'ified to wraps itself inside of an extra
      // set of double quotes. This makes the date parsing code unable
      // to match the date string and parse it as a date.
      if (iso.charAt(0) == '"' && iso.charAt(iso.length - 1) == '"') {
        iso = iso.substring(1, iso.length - 1);
      }
      if (ISO_DATE_REGEXP.test(iso)) {
        return new Date(iso);
      }
      regexp.lastIndex = 0;
      parts = regexp.exec(iso);

      if (parts) {
        parts.shift();
        if (date) {
          map = {
            yyyy: date.getFullYear(),
            MM: date.getMonth() + 1,
            dd: date.getDate(),
            HH: date.getHours(),
            mm: date.getMinutes(),
            ss: date.getSeconds(),
            sss: date.getMilliseconds() / 1000
          };
        } else {
          map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };
        }

        forEach(parts, function(part, index) {
          if (index < mapping.length) {
            map[mapping[index]] = +part;
          }
        });
        return new Date(map.yyyy, map.MM - 1, map.dd, map.HH, map.mm, map.ss || 0, map.sss * 1000 || 0);
      }
    }

    return NaN;
  };
}

function createDateInputType(type, regexp, parseDate, format) {
  return function dynamicDateInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter) {
    badInputChecker(scope, element, attr, ctrl);
    baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
    var timezone = ctrl && ctrl.$options && ctrl.$options.timezone;
    var previousDate;

    ctrl.$$parserName = type;
    ctrl.$parsers.push(function(value) {
      if (ctrl.$isEmpty(value)) return null;
      if (regexp.test(value)) {
        // Note: We cannot read ctrl.$modelValue, as there might be a different
        // parser/formatter in the processing chain so that the model
        // contains some different data format!
        var parsedDate = parseDate(value, previousDate);
        if (timezone === 'UTC') {
          parsedDate.setMinutes(parsedDate.getMinutes() - parsedDate.getTimezoneOffset());
        }
        return parsedDate;
      }
      return undefined;
    });

    ctrl.$formatters.push(function(value) {
      if (value && !isDate(value)) {
        throw $ngModelMinErr('datefmt', 'Expected `{0}` to be a date', value);
      }
      if (isValidDate(value)) {
        previousDate = value;
        if (previousDate && timezone === 'UTC') {
          var timezoneOffset = 60000 * previousDate.getTimezoneOffset();
          previousDate = new Date(previousDate.getTime() + timezoneOffset);
        }
        return $filter('date')(value, format, timezone);
      } else {
        previousDate = null;
        return '';
      }
    });

    if (isDefined(attr.min) || attr.ngMin) {
      var minVal;
      ctrl.$validators.min = function(value) {
        return !isValidDate(value) || isUndefined(minVal) || parseDate(value) >= minVal;
      };
      attr.$observe('min', function(val) {
        minVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    if (isDefined(attr.max) || attr.ngMax) {
      var maxVal;
      ctrl.$validators.max = function(value) {
        return !isValidDate(value) || isUndefined(maxVal) || parseDate(value) <= maxVal;
      };
      attr.$observe('max', function(val) {
        maxVal = parseObservedDateValue(val);
        ctrl.$validate();
      });
    }

    function isValidDate(value) {
      // Invalid Date: getTime() returns NaN
      return value && !(value.getTime && value.getTime() !== value.getTime());
    }

    function parseObservedDateValue(val) {
      return isDefined(val) ? (isDate(val) ? val : parseDate(val)) : undefined;
    }
  };
}

function badInputChecker(scope, element, attr, ctrl) {
  var node = element[0];
  var nativeValidation = ctrl.$$hasNativeValidators = isObject(node.validity);
  if (nativeValidation) {
    ctrl.$parsers.push(function(value) {
      var validity = element.prop(VALIDITY_STATE_PROPERTY) || {};
      // Detect bug in FF35 for input[email] (https://bugzilla.mozilla.org/show_bug.cgi?id=1064430):
      // - also sets validity.badInput (should only be validity.typeMismatch).
      // - see http://www.whatwg.org/specs/web-apps/current-work/multipage/forms.html#e-mail-state-(type=email)
      // - can ignore this case as we can still read out the erroneous email...
      return validity.badInput && !validity.typeMismatch ? undefined : value;
    });
  }
}

function numberInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  badInputChecker(scope, element, attr, ctrl);
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);

  ctrl.$$parserName = 'number';
  ctrl.$parsers.push(function(value) {
    if (ctrl.$isEmpty(value))      return null;
    if (NUMBER_REGEXP.test(value)) return parseFloat(value);
    return undefined;
  });

  ctrl.$formatters.push(function(value) {
    if (!ctrl.$isEmpty(value)) {
      if (!isNumber(value)) {
        throw $ngModelMinErr('numfmt', 'Expected `{0}` to be a number', value);
      }
      value = value.toString();
    }
    return value;
  });

  if (isDefined(attr.min) || attr.ngMin) {
    var minVal;
    ctrl.$validators.min = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;
    };

    attr.$observe('min', function(val) {
      if (isDefined(val) && !isNumber(val)) {
        val = parseFloat(val, 10);
      }
      minVal = isNumber(val) && !isNaN(val) ? val : undefined;
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }

  if (isDefined(attr.max) || attr.ngMax) {
    var maxVal;
    ctrl.$validators.max = function(value) {
      return ctrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;
    };

    attr.$observe('max', function(val) {
      if (isDefined(val) && !isNumber(val)) {
        val = parseFloat(val, 10);
      }
      maxVal = isNumber(val) && !isNaN(val) ? val : undefined;
      // TODO(matsko): implement validateLater to reduce number of validations
      ctrl.$validate();
    });
  }
}

function urlInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'url';
  ctrl.$validators.url = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || URL_REGEXP.test(value);
  };
}

function emailInputType(scope, element, attr, ctrl, $sniffer, $browser) {
  // Note: no badInputChecker here by purpose as `url` is only a validation
  // in browsers, i.e. we can always read out input.value even if it is not valid!
  baseInputType(scope, element, attr, ctrl, $sniffer, $browser);
  stringBasedInputType(ctrl);

  ctrl.$$parserName = 'email';
  ctrl.$validators.email = function(modelValue, viewValue) {
    var value = modelValue || viewValue;
    return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);
  };
}

function radioInputType(scope, element, attr, ctrl) {
  // make the name unique, if not defined
  if (isUndefined(attr.name)) {
    element.attr('name', nextUid());
  }

  var listener = function(ev) {
    if (element[0].checked) {
      ctrl.$setViewValue(attr.value, ev && ev.type);
    }
  };

  element.on('click', listener);

  ctrl.$render = function() {
    var value = attr.value;
    element[0].checked = (value == ctrl.$viewValue);
  };

  attr.$observe('value', ctrl.$render);
}

function parseConstantExpr($parse, context, name, expression, fallback) {
  var parseFn;
  if (isDefined(expression)) {
    parseFn = $parse(expression);
    if (!parseFn.constant) {
      throw minErr('ngModel')('constexpr', 'Expected constant expression for `{0}`, but saw ' +
                                   '`{1}`.', name, expression);
    }
    return parseFn(context);
  }
  return fallback;
}

function checkboxInputType(scope, element, attr, ctrl, $sniffer, $browser, $filter, $parse) {
  var trueValue = parseConstantExpr($parse, scope, 'ngTrueValue', attr.ngTrueValue, true);
  var falseValue = parseConstantExpr($parse, scope, 'ngFalseValue', attr.ngFalseValue, false);

  var listener = function(ev) {
    ctrl.$setViewValue(element[0].checked, ev && ev.type);
  };

  element.on('click', listener);

  ctrl.$render = function() {
    element[0].checked = ctrl.$viewValue;
  };

  // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`
  // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert
  // it to a boolean.
  ctrl.$isEmpty = function(value) {
    return value === false;
  };

  ctrl.$formatters.push(function(value) {
    return equals(value, trueValue);
  });

  ctrl.$parsers.push(function(value) {
    return value ? trueValue : falseValue;
  });
}


/**
 * @ngdoc directive
 * @name textarea
 * @restrict E
 *
 * @description
 * HTML textarea element control with angular data-binding. The data-binding and validation
 * properties of this element are exactly the same as those of the
 * {@link ng.directive:input input element}.
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 */


/**
 * @ngdoc directive
 * @name input
 * @restrict E
 *
 * @description
 * HTML input element control. When used together with {@link ngModel `ngModel`}, it provides data-binding,
 * input state control, and validation.
 * Input control follows HTML5 input types and polyfills the HTML5 validation behavior for older browsers.
 *
 * <div class="alert alert-warning">
 * **Note:** Not every feature offered is available for all input types.
 * Specifically, data binding and event handling via `ng-model` is unsupported for `input[file]`.
 * </div>
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required Sets `required` validation error key if the value is not entered.
 * @param {boolean=} ngRequired Sets `required` attribute if set to true
 * @param {number=} ngMinlength Sets `minlength` validation error key if the value is shorter than
 *    minlength.
 * @param {number=} ngMaxlength Sets `maxlength` validation error key if the value is longer than
 *    maxlength. Setting the attribute to a negative or non-numeric value, allows view values of any
 *    length.
 * @param {string=} ngPattern Sets `pattern` validation error key if the value does not match the
 *    RegExp pattern expression. Expected value is `/regexp/` for inline patterns or `regexp` for
 *    patterns defined as scope expressions.
 * @param {string=} ngChange Angular expression to be executed when input changes due to user
 *    interaction with the input element.
 * @param {boolean=} [ngTrim=true] If set to false Angular will not automatically trim the input.
 *    This parameter is ignored for input[type=password] controls, which will never trim the
 *    input.
 *
 * @example
    <example name="input-directive" module="inputExample">
      <file name="index.html">
       <script>
          angular.module('inputExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.user = {name: 'guest', last: 'visitor'};
            }]);
       </script>
       <div ng-controller="ExampleController">
         <form name="myForm">
           User name: <input type="text" name="userName" ng-model="user.name" required>
           <span class="error" ng-show="myForm.userName.$error.required">
             Required!</span><br>
           Last name: <input type="text" name="lastName" ng-model="user.last"
             ng-minlength="3" ng-maxlength="10">
           <span class="error" ng-show="myForm.lastName.$error.minlength">
             Too short!</span>
           <span class="error" ng-show="myForm.lastName.$error.maxlength">
             Too long!</span><br>
         </form>
         <hr>
         <tt>user = {{user}}</tt><br/>
         <tt>myForm.userName.$valid = {{myForm.userName.$valid}}</tt><br>
         <tt>myForm.userName.$error = {{myForm.userName.$error}}</tt><br>
         <tt>myForm.lastName.$valid = {{myForm.lastName.$valid}}</tt><br>
         <tt>myForm.lastName.$error = {{myForm.lastName.$error}}</tt><br>
         <tt>myForm.$valid = {{myForm.$valid}}</tt><br>
         <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br>
         <tt>myForm.$error.minlength = {{!!myForm.$error.minlength}}</tt><br>
         <tt>myForm.$error.maxlength = {{!!myForm.$error.maxlength}}</tt><br>
       </div>
      </file>
      <file name="protractor.js" type="protractor">
        var user = element(by.exactBinding('user'));
        var userNameValid = element(by.binding('myForm.userName.$valid'));
        var lastNameValid = element(by.binding('myForm.lastName.$valid'));
        var lastNameError = element(by.binding('myForm.lastName.$error'));
        var formValid = element(by.binding('myForm.$valid'));
        var userNameInput = element(by.model('user.name'));
        var userLastInput = element(by.model('user.last'));

        it('should initialize to model', function() {
          expect(user.getText()).toContain('{"name":"guest","last":"visitor"}');
          expect(userNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if empty when required', function() {
          userNameInput.clear();
          userNameInput.sendKeys('');

          expect(user.getText()).toContain('{"last":"visitor"}');
          expect(userNameValid.getText()).toContain('false');
          expect(formValid.getText()).toContain('false');
        });

        it('should be valid if empty when min length is set', function() {
          userLastInput.clear();
          userLastInput.sendKeys('');

          expect(user.getText()).toContain('{"name":"guest","last":""}');
          expect(lastNameValid.getText()).toContain('true');
          expect(formValid.getText()).toContain('true');
        });

        it('should be invalid if less than required min length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('xx');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('minlength');
          expect(formValid.getText()).toContain('false');
        });

        it('should be invalid if longer than max length', function() {
          userLastInput.clear();
          userLastInput.sendKeys('some ridiculously long name');

          expect(user.getText()).toContain('{"name":"guest"}');
          expect(lastNameValid.getText()).toContain('false');
          expect(lastNameError.getText()).toContain('maxlength');
          expect(formValid.getText()).toContain('false');
        });
      </file>
    </example>
 */
var inputDirective = ['$browser', '$sniffer', '$filter', '$parse',
    function($browser, $sniffer, $filter, $parse) {
  return {
    restrict: 'E',
    require: ['?ngModel'],
    link: {
      pre: function(scope, element, attr, ctrls) {
        if (ctrls[0]) {
          (inputType[lowercase(attr.type)] || inputType.text)(scope, element, attr, ctrls[0], $sniffer,
                                                              $browser, $filter, $parse);
        }
      }
    }
  };
}];



var CONSTANT_VALUE_REGEXP = /^(true|false|\d+)$/;
/**
 * @ngdoc directive
 * @name ngValue
 *
 * @description
 * Binds the given expression to the value of `<option>` or {@link input[radio] `input[radio]`},
 * so that when the element is selected, the {@link ngModel `ngModel`} of that element is set to
 * the bound value.
 *
 * `ngValue` is useful when dynamically generating lists of radio buttons using
 * {@link ngRepeat `ngRepeat`}, as shown below.
 *
 * Likewise, `ngValue` can be used to generate `<option>` elements for
 * the {@link select `select`} element. In that case however, only strings are supported
 * for the `value `attribute, so the resulting `ngModel` will always be a string.
 * Support for `select` models with non-string values is available via `ngOptions`.
 *
 * @element input
 * @param {string=} ngValue angular expression, whose value will be bound to the `value` attribute
 *   of the `input` element
 *
 * @example
    <example name="ngValue-directive" module="valueExample">
      <file name="index.html">
       <script>
          angular.module('valueExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.names = ['pizza', 'unicorns', 'robots'];
              $scope.my = { favorite: 'unicorns' };
            }]);
       </script>
        <form ng-controller="ExampleController">
          <h2>Which is your favorite?</h2>
            <label ng-repeat="name in names" for="{{name}}">
              {{name}}
              <input type="radio"
                     ng-model="my.favorite"
                     ng-value="name"
                     id="{{name}}"
                     name="favorite">
            </label>
          <div>You chose {{my.favorite}}</div>
        </form>
      </file>
      <file name="protractor.js" type="protractor">
        var favorite = element(by.binding('my.favorite'));

        it('should initialize to model', function() {
          expect(favorite.getText()).toContain('unicorns');
        });
        it('should bind the values to the inputs', function() {
          element.all(by.model('my.favorite')).get(0).click();
          expect(favorite.getText()).toContain('pizza');
        });
      </file>
    </example>
 */
var ngValueDirective = function() {
  return {
    restrict: 'A',
    priority: 100,
    compile: function(tpl, tplAttr) {
      if (CONSTANT_VALUE_REGEXP.test(tplAttr.ngValue)) {
        return function ngValueConstantLink(scope, elm, attr) {
          attr.$set('value', scope.$eval(attr.ngValue));
        };
      } else {
        return function ngValueLink(scope, elm, attr) {
          scope.$watch(attr.ngValue, function valueWatchAction(value) {
            attr.$set('value', value);
          });
        };
      }
    }
  };
};

/**
 * @ngdoc directive
 * @name ngBind
 * @restrict AC
 *
 * @description
 * The `ngBind` attribute tells Angular to replace the text content of the specified HTML element
 * with the value of a given expression, and to update the text content when the value of that
 * expression changes.
 *
 * Typically, you don't use `ngBind` directly, but instead you use the double curly markup like
 * `{{ expression }}` which is similar but less verbose.
 *
 * It is preferable to use `ngBind` instead of `{{ expression }}` if a template is momentarily
 * displayed by the browser in its raw state before Angular compiles it. Since `ngBind` is an
 * element attribute, it makes the bindings invisible to the user while the page is loading.
 *
 * An alternative solution to this problem would be using the
 * {@link ng.directive:ngCloak ngCloak} directive.
 *
 *
 * @element ANY
 * @param {expression} ngBind {@link guide/expression Expression} to evaluate.
 *
 * @example
 * Enter a name in the Live Preview text box; the greeting below the text box changes instantly.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.name = 'Whirled';
           }]);
       </script>
       <div ng-controller="ExampleController">
         Enter name: <input type="text" ng-model="name"><br>
         Hello <span ng-bind="name"></span>!
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var nameInput = element(by.model('name'));

         expect(element(by.binding('name')).getText()).toBe('Whirled');
         nameInput.clear();
         nameInput.sendKeys('world');
         expect(element(by.binding('name')).getText()).toBe('world');
       });
     </file>
   </example>
 */
var ngBindDirective = ['$compile', function($compile) {
  return {
    restrict: 'AC',
    compile: function ngBindCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBind);
        element = element[0];
        scope.$watch(attr.ngBind, function ngBindWatchAction(value) {
          element.textContent = value === undefined ? '' : value;
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindTemplate
 *
 * @description
 * The `ngBindTemplate` directive specifies that the element
 * text content should be replaced with the interpolation of the template
 * in the `ngBindTemplate` attribute.
 * Unlike `ngBind`, the `ngBindTemplate` can contain multiple `{{` `}}`
 * expressions. This directive is needed since some HTML elements
 * (such as TITLE and OPTION) cannot contain SPAN elements.
 *
 * @element ANY
 * @param {string} ngBindTemplate template of form
 *   <tt>{{</tt> <tt>expression</tt> <tt>}}</tt> to eval.
 *
 * @example
 * Try it here: enter text in text box and watch the greeting change.
   <example module="bindExample">
     <file name="index.html">
       <script>
         angular.module('bindExample', [])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.salutation = 'Hello';
             $scope.name = 'World';
           }]);
       </script>
       <div ng-controller="ExampleController">
        Salutation: <input type="text" ng-model="salutation"><br>
        Name: <input type="text" ng-model="name"><br>
        <pre ng-bind-template="{{salutation}} {{name}}!"></pre>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-bind', function() {
         var salutationElem = element(by.binding('salutation'));
         var salutationInput = element(by.model('salutation'));
         var nameInput = element(by.model('name'));

         expect(salutationElem.getText()).toBe('Hello World!');

         salutationInput.clear();
         salutationInput.sendKeys('Greetings');
         nameInput.clear();
         nameInput.sendKeys('user');

         expect(salutationElem.getText()).toBe('Greetings user!');
       });
     </file>
   </example>
 */
var ngBindTemplateDirective = ['$interpolate', '$compile', function($interpolate, $compile) {
  return {
    compile: function ngBindTemplateCompile(templateElement) {
      $compile.$$addBindingClass(templateElement);
      return function ngBindTemplateLink(scope, element, attr) {
        var interpolateFn = $interpolate(element.attr(attr.$attr.ngBindTemplate));
        $compile.$$addBindingInfo(element, interpolateFn.expressions);
        element = element[0];
        attr.$observe('ngBindTemplate', function(value) {
          element.textContent = value === undefined ? '' : value;
        });
      };
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngBindHtml
 *
 * @description
 * Evaluates the expression and inserts the resulting HTML into the element in a secure way. By default,
 * the resulting HTML content will be sanitized using the {@link ngSanitize.$sanitize $sanitize} service.
 * To utilize this functionality, ensure that `$sanitize` is available, for example, by including {@link
 * ngSanitize} in your module's dependencies (not in core Angular). In order to use {@link ngSanitize}
 * in your module's dependencies, you need to include "angular-sanitize.js" in your application.
 *
 * You may also bypass sanitization for values you know are safe. To do so, bind to
 * an explicitly trusted value via {@link ng.$sce#trustAsHtml $sce.trustAsHtml}.  See the example
 * under {@link ng.$sce#show-me-an-example-using-sce- Strict Contextual Escaping (SCE)}.
 *
 * Note: If a `$sanitize` service is unavailable and the bound value isn't explicitly trusted, you
 * will have an exception (instead of an exploit.)
 *
 * @element ANY
 * @param {expression} ngBindHtml {@link guide/expression Expression} to evaluate.
 *
 * @example

   <example module="bindHtmlExample" deps="angular-sanitize.js">
     <file name="index.html">
       <div ng-controller="ExampleController">
        <p ng-bind-html="myHTML"></p>
       </div>
     </file>

     <file name="script.js">
       angular.module('bindHtmlExample', ['ngSanitize'])
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.myHTML =
              'I am an <code>HTML</code>string with ' +
              '<a href="#">links!</a> and other <em>stuff</em>';
         }]);
     </file>

     <file name="protractor.js" type="protractor">
       it('should check ng-bind-html', function() {
         expect(element(by.binding('myHTML')).getText()).toBe(
             'I am an HTMLstring with links! and other stuff');
       });
     </file>
   </example>
 */
var ngBindHtmlDirective = ['$sce', '$parse', '$compile', function($sce, $parse, $compile) {
  return {
    restrict: 'A',
    compile: function ngBindHtmlCompile(tElement, tAttrs) {
      var ngBindHtmlGetter = $parse(tAttrs.ngBindHtml);
      var ngBindHtmlWatch = $parse(tAttrs.ngBindHtml, function getStringValue(value) {
        return (value || '').toString();
      });
      $compile.$$addBindingClass(tElement);

      return function ngBindHtmlLink(scope, element, attr) {
        $compile.$$addBindingInfo(element, attr.ngBindHtml);

        scope.$watch(ngBindHtmlWatch, function ngBindHtmlWatchAction() {
          // we re-evaluate the expr because we want a TrustedValueHolderType
          // for $sce, not a string
          element.html($sce.getTrustedHtml(ngBindHtmlGetter(scope)) || '');
        });
      };
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngChange
 *
 * @description
 * Evaluate the given expression when the user changes the input.
 * The expression is evaluated immediately, unlike the JavaScript onchange event
 * which only triggers at the end of a change (usually, when the user leaves the
 * form element or presses the return key).
 *
 * The `ngChange` expression is only evaluated when a change in the input value causes
 * a new value to be committed to the model.
 *
 * It will not be evaluated:
 * * if the value returned from the `$parsers` transformation pipeline has not changed
 * * if the input has continued to be invalid since the model will stay `null`
 * * if the model is changed programmatically and not by a change to the input value
 *
 *
 * Note, this directive requires `ngModel` to be present.
 *
 * @element input
 * @param {expression} ngChange {@link guide/expression Expression} to evaluate upon change
 * in input value.
 *
 * @example
 * <example name="ngChange-directive" module="changeExample">
 *   <file name="index.html">
 *     <script>
 *       angular.module('changeExample', [])
 *         .controller('ExampleController', ['$scope', function($scope) {
 *           $scope.counter = 0;
 *           $scope.change = function() {
 *             $scope.counter++;
 *           };
 *         }]);
 *     </script>
 *     <div ng-controller="ExampleController">
 *       <input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
 *       <input type="checkbox" ng-model="confirmed" id="ng-change-example2" />
 *       <label for="ng-change-example2">Confirmed</label><br />
 *       <tt>debug = {{confirmed}}</tt><br/>
 *       <tt>counter = {{counter}}</tt><br/>
 *     </div>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var counter = element(by.binding('counter'));
 *     var debug = element(by.binding('confirmed'));
 *
 *     it('should evaluate the expression if changing from view', function() {
 *       expect(counter.getText()).toContain('0');
 *
 *       element(by.id('ng-change-example1')).click();
 *
 *       expect(counter.getText()).toContain('1');
 *       expect(debug.getText()).toContain('true');
 *     });
 *
 *     it('should not evaluate the expression if changing from model', function() {
 *       element(by.id('ng-change-example2')).click();

 *       expect(counter.getText()).toContain('0');
 *       expect(debug.getText()).toContain('true');
 *     });
 *   </file>
 * </example>
 */
var ngChangeDirective = valueFn({
  restrict: 'A',
  require: 'ngModel',
  link: function(scope, element, attr, ctrl) {
    ctrl.$viewChangeListeners.push(function() {
      scope.$eval(attr.ngChange);
    });
  }
});

function classDirective(name, selector) {
  name = 'ngClass' + name;
  return ['$animate', function($animate) {
    return {
      restrict: 'AC',
      link: function(scope, element, attr) {
        var oldVal;

        scope.$watch(attr[name], ngClassWatchAction, true);

        attr.$observe('class', function(value) {
          ngClassWatchAction(scope.$eval(attr[name]));
        });


        if (name !== 'ngClass') {
          scope.$watch('$index', function($index, old$index) {
            // jshint bitwise: false
            var mod = $index & 1;
            if (mod !== (old$index & 1)) {
              var classes = arrayClasses(scope.$eval(attr[name]));
              mod === selector ?
                addClasses(classes) :
                removeClasses(classes);
            }
          });
        }

        function addClasses(classes) {
          var newClasses = digestClassCounts(classes, 1);
          attr.$addClass(newClasses);
        }

        function removeClasses(classes) {
          var newClasses = digestClassCounts(classes, -1);
          attr.$removeClass(newClasses);
        }

        function digestClassCounts(classes, count) {
          var classCounts = element.data('$classCounts') || {};
          var classesToUpdate = [];
          forEach(classes, function(className) {
            if (count > 0 || classCounts[className]) {
              classCounts[className] = (classCounts[className] || 0) + count;
              if (classCounts[className] === +(count > 0)) {
                classesToUpdate.push(className);
              }
            }
          });
          element.data('$classCounts', classCounts);
          return classesToUpdate.join(' ');
        }

        function updateClasses(oldClasses, newClasses) {
          var toAdd = arrayDifference(newClasses, oldClasses);
          var toRemove = arrayDifference(oldClasses, newClasses);
          toAdd = digestClassCounts(toAdd, 1);
          toRemove = digestClassCounts(toRemove, -1);
          if (toAdd && toAdd.length) {
            $animate.addClass(element, toAdd);
          }
          if (toRemove && toRemove.length) {
            $animate.removeClass(element, toRemove);
          }
        }

        function ngClassWatchAction(newVal) {
          if (selector === true || scope.$index % 2 === selector) {
            var newClasses = arrayClasses(newVal || []);
            if (!oldVal) {
              addClasses(newClasses);
            } else if (!equals(newVal,oldVal)) {
              var oldClasses = arrayClasses(oldVal);
              updateClasses(oldClasses, newClasses);
            }
          }
          oldVal = shallowCopy(newVal);
        }
      }
    };

    function arrayDifference(tokens1, tokens2) {
      var values = [];

      outer:
      for (var i = 0; i < tokens1.length; i++) {
        var token = tokens1[i];
        for (var j = 0; j < tokens2.length; j++) {
          if (token == tokens2[j]) continue outer;
        }
        values.push(token);
      }
      return values;
    }

    function arrayClasses(classVal) {
      if (isArray(classVal)) {
        return classVal;
      } else if (isString(classVal)) {
        return classVal.split(' ');
      } else if (isObject(classVal)) {
        var classes = [];
        forEach(classVal, function(v, k) {
          if (v) {
            classes = classes.concat(k.split(' '));
          }
        });
        return classes;
      }
      return classVal;
    }
  }];
}

/**
 * @ngdoc directive
 * @name ngClass
 * @restrict AC
 *
 * @description
 * The `ngClass` directive allows you to dynamically set CSS classes on an HTML element by databinding
 * an expression that represents all classes to be added.
 *
 * The directive operates in three different ways, depending on which of three types the expression
 * evaluates to:
 *
 * 1. If the expression evaluates to a string, the string should be one or more space-delimited class
 * names.
 *
 * 2. If the expression evaluates to an array, each element of the array should be a string that is
 * one or more space-delimited class names.
 *
 * 3. If the expression evaluates to an object, then for each key-value pair of the
 * object with a truthy value the corresponding key is used as a class name.
 *
 * The directive won't add duplicate classes if a particular class was already set.
 *
 * When the expression changes, the previously added classes are removed and only then the
 * new classes are added.
 *
 * @animations
 * **add** - happens just before the class is applied to the elements
 *
 * **remove** - happens just before the class is removed from the element
 *
 * @element ANY
 * @param {expression} ngClass {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class
 *   names, an array, or a map of class names to boolean values. In the case of a map, the
 *   names of the properties whose values are truthy will be added as css classes to the
 *   element.
 *
 * @example Example that demonstrates basic bindings via ngClass directive.
   <example>
     <file name="index.html">
       <p ng-class="{strike: deleted, bold: important, red: error}">Map Syntax Example</p>
       <input type="checkbox" ng-model="deleted"> deleted (apply "strike" class)<br>
       <input type="checkbox" ng-model="important"> important (apply "bold" class)<br>
       <input type="checkbox" ng-model="error"> error (apply "red" class)
       <hr>
       <p ng-class="style">Using String Syntax</p>
       <input type="text" ng-model="style" placeholder="Type: bold strike red">
       <hr>
       <p ng-class="[style1, style2, style3]">Using Array Syntax</p>
       <input ng-model="style1" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style2" placeholder="Type: bold, strike or red"><br>
       <input ng-model="style3" placeholder="Type: bold, strike or red"><br>
     </file>
     <file name="style.css">
       .strike {
         text-decoration: line-through;
       }
       .bold {
           font-weight: bold;
       }
       .red {
           color: red;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var ps = element.all(by.css('p'));

       it('should let you toggle the class', function() {

         expect(ps.first().getAttribute('class')).not.toMatch(/bold/);
         expect(ps.first().getAttribute('class')).not.toMatch(/red/);

         element(by.model('important')).click();
         expect(ps.first().getAttribute('class')).toMatch(/bold/);

         element(by.model('error')).click();
         expect(ps.first().getAttribute('class')).toMatch(/red/);
       });

       it('should let you toggle string example', function() {
         expect(ps.get(1).getAttribute('class')).toBe('');
         element(by.model('style')).clear();
         element(by.model('style')).sendKeys('red');
         expect(ps.get(1).getAttribute('class')).toBe('red');
       });

       it('array example should have 3 classes', function() {
         expect(ps.last().getAttribute('class')).toBe('');
         element(by.model('style1')).sendKeys('bold');
         element(by.model('style2')).sendKeys('strike');
         element(by.model('style3')).sendKeys('red');
         expect(ps.last().getAttribute('class')).toBe('bold strike red');
       });
     </file>
   </example>

   ## Animations

   The example below demonstrates how to perform animations using ngClass.

   <example module="ngAnimate" deps="angular-animate.js" animations="true">
     <file name="index.html">
      <input id="setbtn" type="button" value="set" ng-click="myVar='my-class'">
      <input id="clearbtn" type="button" value="clear" ng-click="myVar=''">
      <br>
      <span class="base-class" ng-class="myVar">Sample Text</span>
     </file>
     <file name="style.css">
       .base-class {
         -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
         transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
       }

       .base-class.my-class {
         color: red;
         font-size:3em;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class', function() {
         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);

         element(by.id('setbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).
           toMatch(/my-class/);

         element(by.id('clearbtn')).click();

         expect(element(by.css('.base-class')).getAttribute('class')).not.
           toMatch(/my-class/);
       });
     </file>
   </example>


   ## ngClass and pre-existing CSS3 Transitions/Animations
   The ngClass directive still supports CSS3 Transitions/Animations even if they do not follow the ngAnimate CSS naming structure.
   Upon animation ngAnimate will apply supplementary CSS classes to track the start and end of an animation, but this will not hinder
   any pre-existing CSS transitions already on the element. To get an idea of what happens during a class-based animation, be sure
   to view the step by step details of {@link ng.$animate#addClass $animate.addClass} and
   {@link ng.$animate#removeClass $animate.removeClass}.
 */
var ngClassDirective = classDirective('', true);

/**
 * @ngdoc directive
 * @name ngClassOdd
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassOdd {@link guide/expression Expression} to eval. The result
 *   of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}}
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassOddDirective = classDirective('Odd', 0);

/**
 * @ngdoc directive
 * @name ngClassEven
 * @restrict AC
 *
 * @description
 * The `ngClassOdd` and `ngClassEven` directives work exactly as
 * {@link ng.directive:ngClass ngClass}, except they work in
 * conjunction with `ngRepeat` and take effect only on odd (even) rows.
 *
 * This directive can be applied only within the scope of an
 * {@link ng.directive:ngRepeat ngRepeat}.
 *
 * @element ANY
 * @param {expression} ngClassEven {@link guide/expression Expression} to eval. The
 *   result of the evaluation can be a string representing space delimited class names or an array.
 *
 * @example
   <example>
     <file name="index.html">
        <ol ng-init="names=['John', 'Mary', 'Cate', 'Suz']">
          <li ng-repeat="name in names">
           <span ng-class-odd="'odd'" ng-class-even="'even'">
             {{name}} &nbsp; &nbsp; &nbsp;
           </span>
          </li>
        </ol>
     </file>
     <file name="style.css">
       .odd {
         color: red;
       }
       .even {
         color: blue;
       }
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-class-odd and ng-class-even', function() {
         expect(element(by.repeater('name in names').row(0).column('name')).getAttribute('class')).
           toMatch(/odd/);
         expect(element(by.repeater('name in names').row(1).column('name')).getAttribute('class')).
           toMatch(/even/);
       });
     </file>
   </example>
 */
var ngClassEvenDirective = classDirective('Even', 1);

/**
 * @ngdoc directive
 * @name ngCloak
 * @restrict AC
 *
 * @description
 * The `ngCloak` directive is used to prevent the Angular html template from being briefly
 * displayed by the browser in its raw (uncompiled) form while your application is loading. Use this
 * directive to avoid the undesirable flicker effect caused by the html template display.
 *
 * The directive can be applied to the `<body>` element, but the preferred usage is to apply
 * multiple `ngCloak` directives to small portions of the page to permit progressive rendering
 * of the browser view.
 *
 * `ngCloak` works in cooperation with the following css rule embedded within `angular.js` and
 * `angular.min.js`.
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```css
 * [ng\:cloak], [ng-cloak], [data-ng-cloak], [x-ng-cloak], .ng-cloak, .x-ng-cloak {
 *   display: none !important;
 * }
 * ```
 *
 * When this css rule is loaded by the browser, all html elements (including their children) that
 * are tagged with the `ngCloak` directive are hidden. When Angular encounters this directive
 * during the compilation of the template it deletes the `ngCloak` element attribute, making
 * the compiled element visible.
 *
 * For the best result, the `angular.js` script must be loaded in the head section of the html
 * document; alternatively, the css rule above must be included in the external stylesheet of the
 * application.
 *
 * @element ANY
 *
 * @example
   <example>
     <file name="index.html">
        <div id="template1" ng-cloak>{{ 'hello' }}</div>
        <div id="template2" class="ng-cloak">{{ 'world' }}</div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should remove the template directive and css class', function() {
         expect($('#template1').getAttribute('ng-cloak')).
           toBeNull();
         expect($('#template2').getAttribute('ng-cloak')).
           toBeNull();
       });
     </file>
   </example>
 *
 */
var ngCloakDirective = ngDirective({
  compile: function(element, attr) {
    attr.$set('ngCloak', undefined);
    element.removeClass('ng-cloak');
  }
});

/**
 * @ngdoc directive
 * @name ngController
 *
 * @description
 * The `ngController` directive attaches a controller class to the view. This is a key aspect of how angular
 * supports the principles behind the Model-View-Controller design pattern.
 *
 * MVC components in angular:
 *
 * * Model — Models are the properties of a scope; scopes are attached to the DOM where scope properties
 *   are accessed through bindings.
 * * View — The template (HTML with data bindings) that is rendered into the View.
 * * Controller — The `ngController` directive specifies a Controller class; the class contains business
 *   logic behind the application to decorate the scope with functions and values
 *
 * Note that you can also attach controllers to the DOM by declaring it in a route definition
 * via the {@link ngRoute.$route $route} service. A common mistake is to declare the controller
 * again using `ng-controller` in the template itself.  This will cause the controller to be attached
 * and executed twice.
 *
 * @element ANY
 * @scope
 * @priority 500
 * @param {expression} ngController Name of a constructor function registered with the current
 * {@link ng.$controllerProvider $controllerProvider} or an {@link guide/expression expression}
 * that on the current scope evaluates to a constructor function.
 *
 * The controller instance can be published into a scope property by specifying
 * `ng-controller="as propertyName"`.
 *
 * If the current `$controllerProvider` is configured to use globals (via
 * {@link ng.$controllerProvider#allowGlobals `$controllerProvider.allowGlobals()` }), this may
 * also be the name of a globally accessible constructor function (not recommended).
 *
 * @example
 * Here is a simple form for editing user contact information. Adding, removing, clearing, and
 * greeting are methods declared on the controller (see source tab). These methods can
 * easily be called from the angular markup. Any changes to the data are automatically reflected
 * in the View without the need for a manual update.
 *
 * Two different declaration styles are included below:
 *
 * * one binds methods and properties directly onto the controller using `this`:
 * `ng-controller="SettingsController1 as settings"`
 * * one injects `$scope` into the controller:
 * `ng-controller="SettingsController2"`
 *
 * The second option is more common in the Angular community, and is generally used in boilerplates
 * and in this guide. However, there are advantages to binding properties directly to the controller
 * and avoiding scope.
 *
 * * Using `controller as` makes it obvious which controller you are accessing in the template when
 * multiple controllers apply to an element.
 * * If you are writing your controllers as classes you have easier access to the properties and
 * methods, which will appear on the scope, from inside the controller code.
 * * Since there is always a `.` in the bindings, you don't have to worry about prototypal
 * inheritance masking primitives.
 *
 * This example demonstrates the `controller as` syntax.
 *
 * <example name="ngControllerAs" module="controllerAsExample">
 *   <file name="index.html">
 *    <div id="ctrl-as-exmpl" ng-controller="SettingsController1 as settings">
 *      Name: <input type="text" ng-model="settings.name"/>
 *      [ <a href="" ng-click="settings.greet()">greet</a> ]<br/>
 *      Contact:
 *      <ul>
 *        <li ng-repeat="contact in settings.contacts">
 *          <select ng-model="contact.type">
 *             <option>phone</option>
 *             <option>email</option>
 *          </select>
 *          <input type="text" ng-model="contact.value"/>
 *          [ <a href="" ng-click="settings.clearContact(contact)">clear</a>
 *          | <a href="" ng-click="settings.removeContact(contact)">X</a> ]
 *        </li>
 *        <li>[ <a href="" ng-click="settings.addContact()">add</a> ]</li>
 *     </ul>
 *    </div>
 *   </file>
 *   <file name="app.js">
 *    angular.module('controllerAsExample', [])
 *      .controller('SettingsController1', SettingsController1);
 *
 *    function SettingsController1() {
 *      this.name = "John Smith";
 *      this.contacts = [
 *        {type: 'phone', value: '408 555 1212'},
 *        {type: 'email', value: 'john.smith@example.org'} ];
 *    }
 *
 *    SettingsController1.prototype.greet = function() {
 *      alert(this.name);
 *    };
 *
 *    SettingsController1.prototype.addContact = function() {
 *      this.contacts.push({type: 'email', value: 'yourname@example.org'});
 *    };
 *
 *    SettingsController1.prototype.removeContact = function(contactToRemove) {
 *     var index = this.contacts.indexOf(contactToRemove);
 *      this.contacts.splice(index, 1);
 *    };
 *
 *    SettingsController1.prototype.clearContact = function(contact) {
 *      contact.type = 'phone';
 *      contact.value = '';
 *    };
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it('should check controller as', function() {
 *       var container = element(by.id('ctrl-as-exmpl'));
 *         expect(container.element(by.model('settings.name'))
 *           .getAttribute('value')).toBe('John Smith');
 *
 *       var firstRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(0));
 *       var secondRepeat =
 *           container.element(by.repeater('contact in settings.contacts').row(1));
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('408 555 1212');
 *
 *       expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('john.smith@example.org');
 *
 *       firstRepeat.element(by.linkText('clear')).click();
 *
 *       expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *           .toBe('');
 *
 *       container.element(by.linkText('add')).click();
 *
 *       expect(container.element(by.repeater('contact in settings.contacts').row(2))
 *           .element(by.model('contact.value'))
 *           .getAttribute('value'))
 *           .toBe('yourname@example.org');
 *     });
 *   </file>
 * </example>
 *
 * This example demonstrates the "attach to `$scope`" style of controller.
 *
 * <example name="ngController" module="controllerExample">
 *  <file name="index.html">
 *   <div id="ctrl-exmpl" ng-controller="SettingsController2">
 *     Name: <input type="text" ng-model="name"/>
 *     [ <a href="" ng-click="greet()">greet</a> ]<br/>
 *     Contact:
 *     <ul>
 *       <li ng-repeat="contact in contacts">
 *         <select ng-model="contact.type">
 *            <option>phone</option>
 *            <option>email</option>
 *         </select>
 *         <input type="text" ng-model="contact.value"/>
 *         [ <a href="" ng-click="clearContact(contact)">clear</a>
 *         | <a href="" ng-click="removeContact(contact)">X</a> ]
 *       </li>
 *       <li>[ <a href="" ng-click="addContact()">add</a> ]</li>
 *    </ul>
 *   </div>
 *  </file>
 *  <file name="app.js">
 *   angular.module('controllerExample', [])
 *     .controller('SettingsController2', ['$scope', SettingsController2]);
 *
 *   function SettingsController2($scope) {
 *     $scope.name = "John Smith";
 *     $scope.contacts = [
 *       {type:'phone', value:'408 555 1212'},
 *       {type:'email', value:'john.smith@example.org'} ];
 *
 *     $scope.greet = function() {
 *       alert($scope.name);
 *     };
 *
 *     $scope.addContact = function() {
 *       $scope.contacts.push({type:'email', value:'yourname@example.org'});
 *     };
 *
 *     $scope.removeContact = function(contactToRemove) {
 *       var index = $scope.contacts.indexOf(contactToRemove);
 *       $scope.contacts.splice(index, 1);
 *     };
 *
 *     $scope.clearContact = function(contact) {
 *       contact.type = 'phone';
 *       contact.value = '';
 *     };
 *   }
 *  </file>
 *  <file name="protractor.js" type="protractor">
 *    it('should check controller', function() {
 *      var container = element(by.id('ctrl-exmpl'));
 *
 *      expect(container.element(by.model('name'))
 *          .getAttribute('value')).toBe('John Smith');
 *
 *      var firstRepeat =
 *          container.element(by.repeater('contact in contacts').row(0));
 *      var secondRepeat =
 *          container.element(by.repeater('contact in contacts').row(1));
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('408 555 1212');
 *      expect(secondRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('john.smith@example.org');
 *
 *      firstRepeat.element(by.linkText('clear')).click();
 *
 *      expect(firstRepeat.element(by.model('contact.value')).getAttribute('value'))
 *          .toBe('');
 *
 *      container.element(by.linkText('add')).click();
 *
 *      expect(container.element(by.repeater('contact in contacts').row(2))
 *          .element(by.model('contact.value'))
 *          .getAttribute('value'))
 *          .toBe('yourname@example.org');
 *    });
 *  </file>
 *</example>

 */
var ngControllerDirective = [function() {
  return {
    restrict: 'A',
    scope: true,
    controller: '@',
    priority: 500
  };
}];

/**
 * @ngdoc directive
 * @name ngCsp
 *
 * @element html
 * @description
 * Enables [CSP (Content Security Policy)](https://developer.mozilla.org/en/Security/CSP) support.
 *
 * This is necessary when developing things like Google Chrome Extensions or Universal Windows Apps.
 *
 * CSP forbids apps to use `eval` or `Function(string)` generated functions (among other things).
 * For Angular to be CSP compatible there are only two things that we need to do differently:
 *
 * - don't use `Function` constructor to generate optimized value getters
 * - don't inject custom stylesheet into the document
 *
 * AngularJS uses `Function(string)` generated functions as a speed optimization. Applying the `ngCsp`
 * directive will cause Angular to use CSP compatibility mode. When this mode is on AngularJS will
 * evaluate all expressions up to 30% slower than in non-CSP mode, but no security violations will
 * be raised.
 *
 * CSP forbids JavaScript to inline stylesheet rules. In non CSP mode Angular automatically
 * includes some CSS rules (e.g. {@link ng.directive:ngCloak ngCloak}).
 * To make those directives work in CSP mode, include the `angular-csp.css` manually.
 *
 * Angular tries to autodetect if CSP is active and automatically turn on the CSP-safe mode. This
 * autodetection however triggers a CSP error to be logged in the console:
 *
 * ```
 * Refused to evaluate a string as JavaScript because 'unsafe-eval' is not an allowed source of
 * script in the following Content Security Policy directive: "default-src 'self'". Note that
 * 'script-src' was not explicitly set, so 'default-src' is used as a fallback.
 * ```
 *
 * This error is harmless but annoying. To prevent the error from showing up, put the `ngCsp`
 * directive on the root element of the application or on the `angular.js` script tag, whichever
 * appears first in the html document.
 *
 * *Note: This directive is only available in the `ng-csp` and `data-ng-csp` attribute form.*
 *
 * @example
 * This example shows how to apply the `ngCsp` directive to the `html` tag.
   ```html
     <!doctype html>
     <html ng-app ng-csp>
     ...
     ...
     </html>
   ```
  * @example
      // Note: the suffix `.csp` in the example name triggers
      // csp mode in our http server!
      <example name="example.csp" module="cspExample" ng-csp="true">
        <file name="index.html">
          <div ng-controller="MainController as ctrl">
            <div>
              <button ng-click="ctrl.inc()" id="inc">Increment</button>
              <span id="counter">
                {{ctrl.counter}}
              </span>
            </div>

            <div>
              <button ng-click="ctrl.evil()" id="evil">Evil</button>
              <span id="evilError">
                {{ctrl.evilError}}
              </span>
            </div>
          </div>
        </file>
        <file name="script.js">
           angular.module('cspExample', [])
             .controller('MainController', function() {
                this.counter = 0;
                this.inc = function() {
                  this.counter++;
                };
                this.evil = function() {
                  // jshint evil:true
                  try {
                    eval('1+2');
                  } catch (e) {
                    this.evilError = e.message;
                  }
                };
              });
        </file>
        <file name="protractor.js" type="protractor">
          var util, webdriver;

          var incBtn = element(by.id('inc'));
          var counter = element(by.id('counter'));
          var evilBtn = element(by.id('evil'));
          var evilError = element(by.id('evilError'));

          function getAndClearSevereErrors() {
            return browser.manage().logs().get('browser').then(function(browserLog) {
              return browserLog.filter(function(logEntry) {
                return logEntry.level.value > webdriver.logging.Level.WARNING.value;
              });
            });
          }

          function clearErrors() {
            getAndClearSevereErrors();
          }

          function expectNoErrors() {
            getAndClearSevereErrors().then(function(filteredLog) {
              expect(filteredLog.length).toEqual(0);
              if (filteredLog.length) {
                console.log('browser console errors: ' + util.inspect(filteredLog));
              }
            });
          }

          function expectError(regex) {
            getAndClearSevereErrors().then(function(filteredLog) {
              var found = false;
              filteredLog.forEach(function(log) {
                if (log.message.match(regex)) {
                  found = true;
                }
              });
              if (!found) {
                throw new Error('expected an error that matches ' + regex);
              }
            });
          }

          beforeEach(function() {
            util = require('util');
            webdriver = require('protractor/node_modules/selenium-webdriver');
          });

          // For now, we only test on Chrome,
          // as Safari does not load the page with Protractor's injected scripts,
          // and Firefox webdriver always disables content security policy (#6358)
          if (browser.params.browser !== 'chrome') {
            return;
          }

          it('should not report errors when the page is loaded', function() {
            // clear errors so we are not dependent on previous tests
            clearErrors();
            // Need to reload the page as the page is already loaded when
            // we come here
            browser.driver.getCurrentUrl().then(function(url) {
              browser.get(url);
            });
            expectNoErrors();
          });

          it('should evaluate expressions', function() {
            expect(counter.getText()).toEqual('0');
            incBtn.click();
            expect(counter.getText()).toEqual('1');
            expectNoErrors();
          });

          it('should throw and report an error when using "eval"', function() {
            evilBtn.click();
            expect(evilError.getText()).toMatch(/Content Security Policy/);
            expectError(/Content Security Policy/);
          });
        </file>
      </example>
  */

// ngCsp is not implemented as a proper directive any more, because we need it be processed while we
// bootstrap the system (before $parse is instantiated), for this reason we just have
// the csp.isActive() fn that looks for ng-csp attribute anywhere in the current doc

/**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * The ngClick directive allows you to specify custom behavior when
 * an element is clicked.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate upon
 * click. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-click="count = count + 1" ng-init="count=0">
        Increment
      </button>
      <span>
        count: {{count}}
      </span>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-click', function() {
         expect(element(by.binding('count')).getText()).toMatch('0');
         element(by.css('button')).click();
         expect(element(by.binding('count')).getText()).toMatch('1');
       });
     </file>
   </example>
 */
/*
 * A collection of directives that allows creation of custom event handlers that are defined as
 * angular expressions and are compiled and executed within the current scope.
 */
var ngEventDirectives = {};

// For events that might fire synchronously during DOM manipulation
// we need to execute their event handlers asynchronously using $evalAsync,
// so that they are not executed in an inconsistent state.
var forceAsyncEvents = {
  'blur': true,
  'focus': true
};
forEach(
  'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'.split(' '),
  function(eventName) {
    var directiveName = directiveNormalize('ng-' + eventName);
    ngEventDirectives[directiveName] = ['$parse', '$rootScope', function($parse, $rootScope) {
      return {
        restrict: 'A',
        compile: function($element, attr) {
          // We expose the powerful $event object on the scope that provides access to the Window,
          // etc. that isn't protected by the fast paths in $parse.  We explicitly request better
          // checks at the cost of speed since event handler expressions are not executed as
          // frequently as regular change detection.
          var fn = $parse(attr[directiveName], /* interceptorFn */ null, /* expensiveChecks */ true);
          return function ngEventHandler(scope, element) {
            element.on(eventName, function(event) {
              var callback = function() {
                fn(scope, {$event:event});
              };
              if (forceAsyncEvents[eventName] && $rootScope.$$phase) {
                scope.$evalAsync(callback);
              } else {
                scope.$apply(callback);
              }
            });
          };
        }
      };
    }];
  }
);

/**
 * @ngdoc directive
 * @name ngDblclick
 *
 * @description
 * The `ngDblclick` directive allows you to specify custom behavior on a dblclick event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngDblclick {@link guide/expression Expression} to evaluate upon
 * a dblclick. (The Event object is available as `$event`)
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-dblclick="count = count + 1" ng-init="count=0">
        Increment (on double click)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousedown
 *
 * @description
 * The ngMousedown directive allows you to specify custom behavior on mousedown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousedown {@link guide/expression Expression} to evaluate upon
 * mousedown. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousedown="count = count + 1" ng-init="count=0">
        Increment (on mouse down)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseup
 *
 * @description
 * Specify custom behavior on mouseup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseup {@link guide/expression Expression} to evaluate upon
 * mouseup. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseup="count = count + 1" ng-init="count=0">
        Increment (on mouse up)
      </button>
      count: {{count}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngMouseover
 *
 * @description
 * Specify custom behavior on mouseover event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseover {@link guide/expression Expression} to evaluate upon
 * mouseover. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseover="count = count + 1" ng-init="count=0">
        Increment (when mouse is over)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseenter
 *
 * @description
 * Specify custom behavior on mouseenter event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseenter {@link guide/expression Expression} to evaluate upon
 * mouseenter. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseenter="count = count + 1" ng-init="count=0">
        Increment (when mouse enters)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMouseleave
 *
 * @description
 * Specify custom behavior on mouseleave event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMouseleave {@link guide/expression Expression} to evaluate upon
 * mouseleave. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mouseleave="count = count + 1" ng-init="count=0">
        Increment (when mouse leaves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngMousemove
 *
 * @description
 * Specify custom behavior on mousemove event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngMousemove {@link guide/expression Expression} to evaluate upon
 * mousemove. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <button ng-mousemove="count = count + 1" ng-init="count=0">
        Increment (when mouse moves)
      </button>
      count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeydown
 *
 * @description
 * Specify custom behavior on keydown event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeydown {@link guide/expression Expression} to evaluate upon
 * keydown. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keydown="count = count + 1" ng-init="count=0">
      key down count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeyup
 *
 * @description
 * Specify custom behavior on keyup event.
 *
 * @element ANY
 * @priority 0
 * @param {expression} ngKeyup {@link guide/expression Expression} to evaluate upon
 * keyup. (Event object is available as `$event` and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
       <p>Typing in the input box below updates the key count</p>
       <input ng-keyup="count = count + 1" ng-init="count=0"> key up count: {{count}}

       <p>Typing in the input box below updates the keycode</p>
       <input ng-keyup="event=$event">
       <p>event keyCode: {{ event.keyCode }}</p>
       <p>event altKey: {{ event.altKey }}</p>
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngKeypress
 *
 * @description
 * Specify custom behavior on keypress event.
 *
 * @element ANY
 * @param {expression} ngKeypress {@link guide/expression Expression} to evaluate upon
 * keypress. ({@link guide/expression#-event- Event object is available as `$event`}
 * and can be interrogated for keyCode, altKey, etc.)
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-keypress="count = count + 1" ng-init="count=0">
      key press count: {{count}}
     </file>
   </example>
 */


/**
 * @ngdoc directive
 * @name ngSubmit
 *
 * @description
 * Enables binding angular expressions to onsubmit events.
 *
 * Additionally it prevents the default action (which for form means sending the request to the
 * server and reloading the current page), but only if the form does not contain `action`,
 * `data-action`, or `x-action` attributes.
 *
 * <div class="alert alert-warning">
 * **Warning:** Be careful not to cause "double-submission" by using both the `ngClick` and
 * `ngSubmit` handlers together. See the
 * {@link form#submitting-a-form-and-preventing-the-default-action `form` directive documentation}
 * for a detailed discussion of when `ngSubmit` may be triggered.
 * </div>
 *
 * @element form
 * @priority 0
 * @param {expression} ngSubmit {@link guide/expression Expression} to eval.
 * ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example module="submitExample">
     <file name="index.html">
      <script>
        angular.module('submitExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.list = [];
            $scope.text = 'hello';
            $scope.submit = function() {
              if ($scope.text) {
                $scope.list.push(this.text);
                $scope.text = '';
              }
            };
          }]);
      </script>
      <form ng-submit="submit()" ng-controller="ExampleController">
        Enter text and hit enter:
        <input type="text" ng-model="text" name="text" />
        <input type="submit" id="submit" value="Submit" />
        <pre>list={{list}}</pre>
      </form>
     </file>
     <file name="protractor.js" type="protractor">
       it('should check ng-submit', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
         expect(element(by.model('text')).getAttribute('value')).toBe('');
       });
       it('should ignore empty strings', function() {
         expect(element(by.binding('list')).getText()).toBe('list=[]');
         element(by.css('#submit')).click();
         element(by.css('#submit')).click();
         expect(element(by.binding('list')).getText()).toContain('hello');
        });
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngFocus
 *
 * @description
 * Specify custom behavior on focus event.
 *
 * Note: As the `focus` event is executed synchronously when calling `input.focus()`
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngFocus {@link guide/expression Expression} to evaluate upon
 * focus. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngBlur
 *
 * @description
 * Specify custom behavior on blur event.
 *
 * A [blur event](https://developer.mozilla.org/en-US/docs/Web/Events/blur) fires when
 * an element has lost focus.
 *
 * Note: As the `blur` event is executed synchronously also during DOM manipulations
 * (e.g. removing a focussed input),
 * AngularJS executes the expression using `scope.$evalAsync` if the event is fired
 * during an `$apply` to ensure a consistent state.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngBlur {@link guide/expression Expression} to evaluate upon
 * blur. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
 * See {@link ng.directive:ngClick ngClick}
 */

/**
 * @ngdoc directive
 * @name ngCopy
 *
 * @description
 * Specify custom behavior on copy event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCopy {@link guide/expression Expression} to evaluate upon
 * copy. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-copy="copied=true" ng-init="copied=false; value='copy me'" ng-model="value">
      copied: {{copied}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngCut
 *
 * @description
 * Specify custom behavior on cut event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngCut {@link guide/expression Expression} to evaluate upon
 * cut. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-cut="cut=true" ng-init="cut=false; value='cut me'" ng-model="value">
      cut: {{cut}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngPaste
 *
 * @description
 * Specify custom behavior on paste event.
 *
 * @element window, input, select, textarea, a
 * @priority 0
 * @param {expression} ngPaste {@link guide/expression Expression} to evaluate upon
 * paste. ({@link guide/expression#-event- Event object is available as `$event`})
 *
 * @example
   <example>
     <file name="index.html">
      <input ng-paste="paste=true" ng-init="paste=false" placeholder='paste here'>
      pasted: {{paste}}
     </file>
   </example>
 */

/**
 * @ngdoc directive
 * @name ngIf
 * @restrict A
 *
 * @description
 * The `ngIf` directive removes or recreates a portion of the DOM tree based on an
 * {expression}. If the expression assigned to `ngIf` evaluates to a false
 * value then the element is removed from the DOM, otherwise a clone of the
 * element is reinserted into the DOM.
 *
 * `ngIf` differs from `ngShow` and `ngHide` in that `ngIf` completely removes and recreates the
 * element in the DOM rather than changing its visibility via the `display` css property.  A common
 * case when this difference is significant is when using css selectors that rely on an element's
 * position within the DOM, such as the `:first-child` or `:last-child` pseudo-classes.
 *
 * Note that when an element is removed using `ngIf` its scope is destroyed and a new scope
 * is created when the element is restored.  The scope created within `ngIf` inherits from
 * its parent scope using
 * [prototypal inheritance](https://github.com/angular/angular.js/wiki/Understanding-Scopes#javascript-prototypal-inheritance).
 * An important implication of this is if `ngModel` is used within `ngIf` to bind to
 * a javascript primitive defined in the parent scope. In this case any modifications made to the
 * variable within the child scope will override (hide) the value in the parent scope.
 *
 * Also, `ngIf` recreates elements using their compiled state. An example of this behavior
 * is if an element's class attribute is directly modified after it's compiled, using something like
 * jQuery's `.addClass()` method, and the element is later removed. When `ngIf` recreates the element
 * the added class will be lost because the original compiled state is used to regenerate the element.
 *
 * Additionally, you can provide animations via the `ngAnimate` module to animate the `enter`
 * and `leave` effects.
 *
 * @animations
 * enter - happens just after the `ngIf` contents change and a new DOM element is created and injected into the `ngIf` container
 * leave - happens just before the `ngIf` contents are removed from the DOM
 *
 * @element ANY
 * @scope
 * @priority 600
 * @param {expression} ngIf If the {@link guide/expression expression} is falsy then
 *     the element is removed from the DOM tree. If it is truthy a copy of the compiled
 *     element is added to the DOM tree.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked" ng-init="checked=true" /><br/>
      Show when checked:
      <span ng-if="checked" class="animate-if">
        This is removed when the checkbox is unchecked.
      </span>
    </file>
    <file name="animations.css">
      .animate-if {
        background:white;
        border:1px solid black;
        padding:10px;
      }

      .animate-if.ng-enter, .animate-if.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
      }

      .animate-if.ng-enter,
      .animate-if.ng-leave.ng-leave-active {
        opacity:0;
      }

      .animate-if.ng-leave,
      .animate-if.ng-enter.ng-enter-active {
        opacity:1;
      }
    </file>
  </example>
 */
var ngIfDirective = ['$animate', function($animate) {
  return {
    multiElement: true,
    transclude: 'element',
    priority: 600,
    terminal: true,
    restrict: 'A',
    $$tlb: true,
    link: function($scope, $element, $attr, ctrl, $transclude) {
        var block, childScope, previousElements;
        $scope.$watch($attr.ngIf, function ngIfWatchAction(value) {

          if (value) {
            if (!childScope) {
              $transclude(function(clone, newScope) {
                childScope = newScope;
                clone[clone.length++] = document.createComment(' end ngIf: ' + $attr.ngIf + ' ');
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block = {
                  clone: clone
                };
                $animate.enter(clone, $element.parent(), $element);
              });
            }
          } else {
            if (previousElements) {
              previousElements.remove();
              previousElements = null;
            }
            if (childScope) {
              childScope.$destroy();
              childScope = null;
            }
            if (block) {
              previousElements = getBlockNodes(block.clone);
              $animate.leave(previousElements).then(function() {
                previousElements = null;
              });
              block = null;
            }
          }
        });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngInclude
 * @restrict ECA
 *
 * @description
 * Fetches, compiles and includes an external HTML fragment.
 *
 * By default, the template URL is restricted to the same domain and protocol as the
 * application document. This is done by calling {@link $sce#getTrustedResourceUrl
 * $sce.getTrustedResourceUrl} on it. To load templates from other domains or protocols
 * you may either {@link ng.$sceDelegateProvider#resourceUrlWhitelist whitelist them} or
 * {@link $sce#trustAsResourceUrl wrap them} as trusted values. Refer to Angular's {@link
 * ng.$sce Strict Contextual Escaping}.
 *
 * In addition, the browser's
 * [Same Origin Policy](https://code.google.com/p/browsersec/wiki/Part2#Same-origin_policy_for_XMLHttpRequest)
 * and [Cross-Origin Resource Sharing (CORS)](http://www.w3.org/TR/cors/)
 * policy may further restrict whether the template is successfully loaded.
 * For example, `ngInclude` won't work for cross-domain requests on all browsers and for `file://`
 * access on some browsers.
 *
 * @animations
 * enter - animation is used to bring new content into the browser.
 * leave - animation is used to animate existing content away.
 *
 * The enter and leave animation occur concurrently.
 *
 * @scope
 * @priority 400
 *
 * @param {string} ngInclude|src angular expression evaluating to URL. If the source is a string constant,
 *                 make sure you wrap it in **single** quotes, e.g. `src="'myPartialTemplate.html'"`.
 * @param {string=} onload Expression to evaluate when a new partial is loaded.
 *
 * @param {string=} autoscroll Whether `ngInclude` should call {@link ng.$anchorScroll
 *                  $anchorScroll} to scroll the viewport after the content is loaded.
 *
 *                  - If the attribute is not set, disable scrolling.
 *                  - If the attribute is set without value, enable scrolling.
 *                  - Otherwise enable scrolling only if the expression evaluates to truthy value.
 *
 * @example
  <example module="includeExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
     <div ng-controller="ExampleController">
       <select ng-model="template" ng-options="t.name for t in templates">
        <option value="">(blank)</option>
       </select>
       url of the template: <code>{{template.url}}</code>
       <hr/>
       <div class="slide-animate-container">
         <div class="slide-animate" ng-include="template.url"></div>
       </div>
     </div>
    </file>
    <file name="script.js">
      angular.module('includeExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.templates =
            [ { name: 'template1.html', url: 'template1.html'},
              { name: 'template2.html', url: 'template2.html'} ];
          $scope.template = $scope.templates[0];
        }]);
     </file>
    <file name="template1.html">
      Content of template1.html
    </file>
    <file name="template2.html">
      Content of template2.html
    </file>
    <file name="animations.css">
      .slide-animate-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .slide-animate {
        padding:10px;
      }

      .slide-animate.ng-enter, .slide-animate.ng-leave {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
        display:block;
        padding:10px;
      }

      .slide-animate.ng-enter {
        top:-50px;
      }
      .slide-animate.ng-enter.ng-enter-active {
        top:0;
      }

      .slide-animate.ng-leave {
        top:0;
      }
      .slide-animate.ng-leave.ng-leave-active {
        top:50px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var templateSelect = element(by.model('template'));
      var includeElem = element(by.css('[ng-include]'));

      it('should load template1.html', function() {
        expect(includeElem.getText()).toMatch(/Content of template1.html/);
      });

      it('should load template2.html', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          // See https://github.com/angular/protractor/issues/480
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(2).click();
        expect(includeElem.getText()).toMatch(/Content of template2.html/);
      });

      it('should change to blank', function() {
        if (browser.params.browser == 'firefox') {
          // Firefox can't handle using selects
          return;
        }
        templateSelect.click();
        templateSelect.all(by.css('option')).get(0).click();
        expect(includeElem.isPresent()).toBe(false);
      });
    </file>
  </example>
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentRequested
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted every time the ngInclude content is requested.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentLoaded
 * @eventType emit on the current ngInclude scope
 * @description
 * Emitted every time the ngInclude content is reloaded.
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */


/**
 * @ngdoc event
 * @name ngInclude#$includeContentError
 * @eventType emit on the scope ngInclude was declared in
 * @description
 * Emitted when a template HTTP request yields an erroneous response (status < 200 || status > 299)
 *
 * @param {Object} angularEvent Synthetic event object.
 * @param {String} src URL of content to load.
 */
var ngIncludeDirective = ['$templateRequest', '$anchorScroll', '$animate', '$sce',
                  function($templateRequest,   $anchorScroll,   $animate,   $sce) {
  return {
    restrict: 'ECA',
    priority: 400,
    terminal: true,
    transclude: 'element',
    controller: angular.noop,
    compile: function(element, attr) {
      var srcExp = attr.ngInclude || attr.src,
          onloadExp = attr.onload || '',
          autoScrollExp = attr.autoscroll;

      return function(scope, $element, $attr, ctrl, $transclude) {
        var changeCounter = 0,
            currentScope,
            previousElement,
            currentElement;

        var cleanupLastIncludeContent = function() {
          if (previousElement) {
            previousElement.remove();
            previousElement = null;
          }
          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }
          if (currentElement) {
            $animate.leave(currentElement).then(function() {
              previousElement = null;
            });
            previousElement = currentElement;
            currentElement = null;
          }
        };

        scope.$watch($sce.parseAsResourceUrl(srcExp), function ngIncludeWatchAction(src) {
          var afterAnimation = function() {
            if (isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
              $anchorScroll();
            }
          };
          var thisChangeId = ++changeCounter;

          if (src) {
            //set the 2nd param to true to ignore the template request error so that the inner
            //contents and scope can be cleaned up.
            $templateRequest(src, true).then(function(response) {
              if (thisChangeId !== changeCounter) return;
              var newScope = scope.$new();
              ctrl.template = response;

              // Note: This will also link all children of ng-include that were contained in the original
              // html. If that content contains controllers, ... they could pollute/change the scope.
              // However, using ng-include on an element with additional content does not make sense...
              // Note: We can't remove them in the cloneAttchFn of $transclude as that
              // function is called before linking the content, which would apply child
              // directives to non existing elements.
              var clone = $transclude(newScope, function(clone) {
                cleanupLastIncludeContent();
                $animate.enter(clone, null, $element).then(afterAnimation);
              });

              currentScope = newScope;
              currentElement = clone;

              currentScope.$emit('$includeContentLoaded', src);
              scope.$eval(onloadExp);
            }, function() {
              if (thisChangeId === changeCounter) {
                cleanupLastIncludeContent();
                scope.$emit('$includeContentError', src);
              }
            });
            scope.$emit('$includeContentRequested', src);
          } else {
            cleanupLastIncludeContent();
            ctrl.template = null;
          }
        });
      };
    }
  };
}];

// This directive is called during the $transclude call of the first `ngInclude` directive.
// It will replace and compile the content of the element with the loaded template.
// We need this directive so that the element content is already filled when
// the link function of another directive on the same element as ngInclude
// is called.
var ngIncludeFillContentDirective = ['$compile',
  function($compile) {
    return {
      restrict: 'ECA',
      priority: -400,
      require: 'ngInclude',
      link: function(scope, $element, $attr, ctrl) {
        if (/SVG/.test($element[0].toString())) {
          // WebKit: https://bugs.webkit.org/show_bug.cgi?id=135698 --- SVG elements do not
          // support innerHTML, so detect this here and try to generate the contents
          // specially.
          $element.empty();
          $compile(jqLiteBuildFragment(ctrl.template, document).childNodes)(scope,
              function namespaceAdaptedClone(clone) {
            $element.append(clone);
          }, {futureParentElement: $element});
          return;
        }

        $element.html(ctrl.template);
        $compile($element.contents())(scope);
      }
    };
  }];

/**
 * @ngdoc directive
 * @name ngInit
 * @restrict AC
 *
 * @description
 * The `ngInit` directive allows you to evaluate an expression in the
 * current scope.
 *
 * <div class="alert alert-error">
 * The only appropriate use of `ngInit` is for aliasing special properties of
 * {@link ng.directive:ngRepeat `ngRepeat`}, as seen in the demo below. Besides this case, you
 * should use {@link guide/controller controllers} rather than `ngInit`
 * to initialize values on a scope.
 * </div>
 * <div class="alert alert-warning">
 * **Note**: If you have assignment in `ngInit` along with {@link ng.$filter `$filter`}, make
 * sure you have parenthesis for correct precedence:
 * <pre class="prettyprint">
 * `<div ng-init="test1 = (data | orderBy:'name')"></div>`
 * </pre>
 * </div>
 *
 * @priority 450
 *
 * @element ANY
 * @param {expression} ngInit {@link guide/expression Expression} to eval.
 *
 * @example
   <example module="initExample">
     <file name="index.html">
   <script>
     angular.module('initExample', [])
       .controller('ExampleController', ['$scope', function($scope) {
         $scope.list = [['a', 'b'], ['c', 'd']];
       }]);
   </script>
   <div ng-controller="ExampleController">
     <div ng-repeat="innerList in list" ng-init="outerIndex = $index">
       <div ng-repeat="value in innerList" ng-init="innerIndex = $index">
          <span class="example-init">list[ {{outerIndex}} ][ {{innerIndex}} ] = {{value}};</span>
       </div>
     </div>
   </div>
     </file>
     <file name="protractor.js" type="protractor">
       it('should alias index positions', function() {
         var elements = element.all(by.css('.example-init'));
         expect(elements.get(0).getText()).toBe('list[ 0 ][ 0 ] = a;');
         expect(elements.get(1).getText()).toBe('list[ 0 ][ 1 ] = b;');
         expect(elements.get(2).getText()).toBe('list[ 1 ][ 0 ] = c;');
         expect(elements.get(3).getText()).toBe('list[ 1 ][ 1 ] = d;');
       });
     </file>
   </example>
 */
var ngInitDirective = ngDirective({
  priority: 450,
  compile: function() {
    return {
      pre: function(scope, element, attrs) {
        scope.$eval(attrs.ngInit);
      }
    };
  }
});

/**
 * @ngdoc directive
 * @name ngList
 *
 * @description
 * Text input that converts between a delimited string and an array of strings. The default
 * delimiter is a comma followed by a space - equivalent to `ng-list=", "`. You can specify a custom
 * delimiter as the value of the `ngList` attribute - for example, `ng-list=" | "`.
 *
 * The behaviour of the directive is affected by the use of the `ngTrim` attribute.
 * * If `ngTrim` is set to `"false"` then whitespace around both the separator and each
 *   list item is respected. This implies that the user of the directive is responsible for
 *   dealing with whitespace but also allows you to use whitespace as a delimiter, such as a
 *   tab or newline character.
 * * Otherwise whitespace around the delimiter is ignored when splitting (although it is respected
 *   when joining the list items back together) and whitespace around each list item is stripped
 *   before it is added to the model.
 *
 * ### Example with Validation
 *
 * <example name="ngList-directive" module="listExample">
 *   <file name="app.js">
 *      angular.module('listExample', [])
 *        .controller('ExampleController', ['$scope', function($scope) {
 *          $scope.names = ['morpheus', 'neo', 'trinity'];
 *        }]);
 *   </file>
 *   <file name="index.html">
 *    <form name="myForm" ng-controller="ExampleController">
 *      List: <input name="namesInput" ng-model="names" ng-list required>
 *      <span class="error" ng-show="myForm.namesInput.$error.required">
 *        Required!</span>
 *      <br>
 *      <tt>names = {{names}}</tt><br/>
 *      <tt>myForm.namesInput.$valid = {{myForm.namesInput.$valid}}</tt><br/>
 *      <tt>myForm.namesInput.$error = {{myForm.namesInput.$error}}</tt><br/>
 *      <tt>myForm.$valid = {{myForm.$valid}}</tt><br/>
 *      <tt>myForm.$error.required = {{!!myForm.$error.required}}</tt><br/>
 *     </form>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     var listInput = element(by.model('names'));
 *     var names = element(by.exactBinding('names'));
 *     var valid = element(by.binding('myForm.namesInput.$valid'));
 *     var error = element(by.css('span.error'));
 *
 *     it('should initialize to model', function() {
 *       expect(names.getText()).toContain('["morpheus","neo","trinity"]');
 *       expect(valid.getText()).toContain('true');
 *       expect(error.getCssValue('display')).toBe('none');
 *     });
 *
 *     it('should be invalid if empty', function() {
 *       listInput.clear();
 *       listInput.sendKeys('');
 *
 *       expect(names.getText()).toContain('');
 *       expect(valid.getText()).toContain('false');
 *       expect(error.getCssValue('display')).not.toBe('none');
 *     });
 *   </file>
 * </example>
 *
 * ### Example - splitting on whitespace
 * <example name="ngList-directive-newlines">
 *   <file name="index.html">
 *    <textarea ng-model="list" ng-list="&#10;" ng-trim="false"></textarea>
 *    <pre>{{ list | json }}</pre>
 *   </file>
 *   <file name="protractor.js" type="protractor">
 *     it("should split the text by newlines", function() {
 *       var listInput = element(by.model('list'));
 *       var output = element(by.binding('list | json'));
 *       listInput.sendKeys('abc\ndef\nghi');
 *       expect(output.getText()).toContain('[\n  "abc",\n  "def",\n  "ghi"\n]');
 *     });
 *   </file>
 * </example>
 *
 * @element input
 * @param {string=} ngList optional delimiter that should be used to split the value.
 */
var ngListDirective = function() {
  return {
    restrict: 'A',
    priority: 100,
    require: 'ngModel',
    link: function(scope, element, attr, ctrl) {
      // We want to control whitespace trimming so we use this convoluted approach
      // to access the ngList attribute, which doesn't pre-trim the attribute
      var ngList = element.attr(attr.$attr.ngList) || ', ';
      var trimValues = attr.ngTrim !== 'false';
      var separator = trimValues ? trim(ngList) : ngList;

      var parse = function(viewValue) {
        // If the viewValue is invalid (say required but empty) it will be `undefined`
        if (isUndefined(viewValue)) return;

        var list = [];

        if (viewValue) {
          forEach(viewValue.split(separator), function(value) {
            if (value) list.push(trimValues ? trim(value) : value);
          });
        }

        return list;
      };

      ctrl.$parsers.push(parse);
      ctrl.$formatters.push(function(value) {
        if (isArray(value)) {
          return value.join(ngList);
        }

        return undefined;
      });

      // Override the standard $isEmpty because an empty array means the input is empty.
      ctrl.$isEmpty = function(value) {
        return !value || !value.length;
      };
    }
  };
};

/* global VALID_CLASS: true,
  INVALID_CLASS: true,
  PRISTINE_CLASS: true,
  DIRTY_CLASS: true,
  UNTOUCHED_CLASS: true,
  TOUCHED_CLASS: true,
*/

var VALID_CLASS = 'ng-valid',
    INVALID_CLASS = 'ng-invalid',
    PRISTINE_CLASS = 'ng-pristine',
    DIRTY_CLASS = 'ng-dirty',
    UNTOUCHED_CLASS = 'ng-untouched',
    TOUCHED_CLASS = 'ng-touched',
    PENDING_CLASS = 'ng-pending';


var $ngModelMinErr = new minErr('ngModel');

/**
 * @ngdoc type
 * @name ngModel.NgModelController
 *
 * @property {string} $viewValue Actual string value in the view.
 * @property {*} $modelValue The value in the model that the control is bound to.
 * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever
       the control reads value from the DOM. The functions are called in array order, each passing
       its return value through to the next. The last return value is forwarded to the
       {@link ngModel.NgModelController#$validators `$validators`} collection.

Parsers are used to sanitize / convert the {@link ngModel.NgModelController#$viewValue
`$viewValue`}.

Returning `undefined` from a parser means a parse error occurred. In that case,
no {@link ngModel.NgModelController#$validators `$validators`} will run and the `ngModel`
will be set to `undefined` unless {@link ngModelOptions `ngModelOptions.allowInvalid`}
is set to `true`. The parse error is stored in `ngModel.$error.parse`.

 *
 * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever
       the model value changes. The functions are called in reverse array order, each passing the value through to the
       next. The last return value is used as the actual DOM value.
       Used to format / convert values for display in the control.
 * ```js
 * function formatter(value) {
 *   if (value) {
 *     return value.toUpperCase();
 *   }
 * }
 * ngModel.$formatters.push(formatter);
 * ```
 *
 * @property {Object.<string, function>} $validators A collection of validators that are applied
 *      whenever the model value changes. The key value within the object refers to the name of the
 *      validator while the function refers to the validation operation. The validation operation is
 *      provided with the model value as an argument and must return a true or false value depending
 *      on the response of that validation.
 *
 * ```js
 * ngModel.$validators.validCharacters = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *   return /[0-9]+/.test(value) &&
 *          /[a-z]+/.test(value) &&
 *          /[A-Z]+/.test(value) &&
 *          /\W+/.test(value);
 * };
 * ```
 *
 * @property {Object.<string, function>} $asyncValidators A collection of validations that are expected to
 *      perform an asynchronous validation (e.g. a HTTP request). The validation function that is provided
 *      is expected to return a promise when it is run during the model validation process. Once the promise
 *      is delivered then the validation status will be set to true when fulfilled and false when rejected.
 *      When the asynchronous validators are triggered, each of the validators will run in parallel and the model
 *      value will only be updated once all validators have been fulfilled. As long as an asynchronous validator
 *      is unfulfilled, its key will be added to the controllers `$pending` property. Also, all asynchronous validators
 *      will only run once all synchronous validators have passed.
 *
 * Please note that if $http is used then it is important that the server returns a success HTTP response code
 * in order to fulfill the validation and a status level of `4xx` in order to reject the validation.
 *
 * ```js
 * ngModel.$asyncValidators.uniqueUsername = function(modelValue, viewValue) {
 *   var value = modelValue || viewValue;
 *
 *   // Lookup user by username
 *   return $http.get('/api/users/' + value).
 *      then(function resolved() {
 *        //username exists, this means validation fails
 *        return $q.reject('exists');
 *      }, function rejected() {
 *        //username does not exist, therefore this validation passes
 *        return true;
 *      });
 * };
 * ```
 *
 * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever the
 *     view value has changed. It is called with no arguments, and its return value is ignored.
 *     This can be used in place of additional $watches against the model value.
 *
 * @property {Object} $error An object hash with all failing validator ids as keys.
 * @property {Object} $pending An object hash with all pending validator ids as keys.
 *
 * @property {boolean} $untouched True if control has not lost focus yet.
 * @property {boolean} $touched True if control has lost focus.
 * @property {boolean} $pristine True if user has not interacted with the control yet.
 * @property {boolean} $dirty True if user has already interacted with the control.
 * @property {boolean} $valid True if there is no error.
 * @property {boolean} $invalid True if at least one error on the control.
 * @property {string} $name The name attribute of the control.
 *
 * @description
 *
 * `NgModelController` provides API for the {@link ngModel `ngModel`} directive.
 * The controller contains services for data-binding, validation, CSS updates, and value formatting
 * and parsing. It purposefully does not contain any logic which deals with DOM rendering or
 * listening to DOM events.
 * Such DOM related logic should be provided by other directives which make use of
 * `NgModelController` for data-binding to control elements.
 * Angular provides this DOM logic for most {@link input `input`} elements.
 * At the end of this page you can find a {@link ngModel.NgModelController#custom-control-example
 * custom control example} that uses `ngModelController` to bind to `contenteditable` elements.
 *
 * @example
 * ### Custom Control Example
 * This example shows how to use `NgModelController` with a custom control to achieve
 * data-binding. Notice how different directives (`contenteditable`, `ng-model`, and `required`)
 * collaborate together to achieve the desired result.
 *
 * `contenteditable` is an HTML5 attribute, which tells the browser to let the element
 * contents be edited in place by the user.
 *
 * We are using the {@link ng.service:$sce $sce} service here and include the {@link ngSanitize $sanitize}
 * module to automatically remove "bad" content like inline event listener (e.g. `<span onclick="...">`).
 * However, as we are using `$sce` the model can still decide to provide unsafe content if it marks
 * that content using the `$sce` service.
 *
 * <example name="NgModelController" module="customControl" deps="angular-sanitize.js">
    <file name="style.css">
      [contenteditable] {
        border: 1px solid black;
        background-color: white;
        min-height: 20px;
      }

      .ng-invalid {
        border: 1px solid red;
      }

    </file>
    <file name="script.js">
      angular.module('customControl', ['ngSanitize']).
        directive('contenteditable', ['$sce', function($sce) {
          return {
            restrict: 'A', // only activate on element attribute
            require: '?ngModel', // get a hold of NgModelController
            link: function(scope, element, attrs, ngModel) {
              if (!ngModel) return; // do nothing if no ng-model

              // Specify how UI should be updated
              ngModel.$render = function() {
                element.html($sce.getTrustedHtml(ngModel.$viewValue || ''));
              };

              // Listen for change events to enable binding
              element.on('blur keyup change', function() {
                scope.$evalAsync(read);
              });
              read(); // initialize

              // Write data to the model
              function read() {
                var html = element.html();
                // When we clear the content editable the browser leaves a <br> behind
                // If strip-br attribute is provided then we strip this out
                if ( attrs.stripBr && html == '<br>' ) {
                  html = '';
                }
                ngModel.$setViewValue(html);
              }
            }
          };
        }]);
    </file>
    <file name="index.html">
      <form name="myForm">
       <div contenteditable
            name="myWidget" ng-model="userContent"
            strip-br="true"
            required>Change me!</div>
        <span ng-show="myForm.myWidget.$error.required">Required!</span>
       <hr>
       <textarea ng-model="userContent"></textarea>
      </form>
    </file>
    <file name="protractor.js" type="protractor">
    it('should data-bind and become invalid', function() {
      if (browser.params.browser == 'safari' || browser.params.browser == 'firefox') {
        // SafariDriver can't handle contenteditable
        // and Firefox driver can't clear contenteditables very well
        return;
      }
      var contentEditable = element(by.css('[contenteditable]'));
      var content = 'Change me!';

      expect(contentEditable.getText()).toEqual(content);

      contentEditable.clear();
      contentEditable.sendKeys(protractor.Key.BACK_SPACE);
      expect(contentEditable.getText()).toEqual('');
      expect(contentEditable.getAttribute('class')).toMatch(/ng-invalid-required/);
    });
    </file>
 * </example>
 *
 *
 */
var NgModelController = ['$scope', '$exceptionHandler', '$attrs', '$element', '$parse', '$animate', '$timeout', '$rootScope', '$q', '$interpolate',
    function($scope, $exceptionHandler, $attr, $element, $parse, $animate, $timeout, $rootScope, $q, $interpolate) {
  this.$viewValue = Number.NaN;
  this.$modelValue = Number.NaN;
  this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.
  this.$validators = {};
  this.$asyncValidators = {};
  this.$parsers = [];
  this.$formatters = [];
  this.$viewChangeListeners = [];
  this.$untouched = true;
  this.$touched = false;
  this.$pristine = true;
  this.$dirty = false;
  this.$valid = true;
  this.$invalid = false;
  this.$error = {}; // keep invalid keys here
  this.$$success = {}; // keep valid keys here
  this.$pending = undefined; // keep pending keys here
  this.$name = $interpolate($attr.name || '', false)($scope);


  var parsedNgModel = $parse($attr.ngModel),
      parsedNgModelAssign = parsedNgModel.assign,
      ngModelGet = parsedNgModel,
      ngModelSet = parsedNgModelAssign,
      pendingDebounce = null,
      parserValid,
      ctrl = this;

  this.$$setOptions = function(options) {
    ctrl.$options = options;
    if (options && options.getterSetter) {
      var invokeModelGetter = $parse($attr.ngModel + '()'),
          invokeModelSetter = $parse($attr.ngModel + '($$$p)');

      ngModelGet = function($scope) {
        var modelValue = parsedNgModel($scope);
        if (isFunction(modelValue)) {
          modelValue = invokeModelGetter($scope);
        }
        return modelValue;
      };
      ngModelSet = function($scope, newValue) {
        if (isFunction(parsedNgModel($scope))) {
          invokeModelSetter($scope, {$$$p: ctrl.$modelValue});
        } else {
          parsedNgModelAssign($scope, ctrl.$modelValue);
        }
      };
    } else if (!parsedNgModel.assign) {
      throw $ngModelMinErr('nonassign', "Expression '{0}' is non-assignable. Element: {1}",
          $attr.ngModel, startingTag($element));
    }
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$render
   *
   * @description
   * Called when the view needs to be updated. It is expected that the user of the ng-model
   * directive will implement this method.
   *
   * The `$render()` method is invoked in the following situations:
   *
   * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last
   *   committed value then `$render()` is called to update the input control.
   * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and
   *   the `$viewValue` are different to last time.
   *
   * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of
   * `$modelValue` and `$viewValue` are actually different to their previous value. If `$modelValue`
   * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be
   * invoked if you only change a property on the objects.
   */
  this.$render = noop;

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$isEmpty
   *
   * @description
   * This is called when we need to determine if the value of an input is empty.
   *
   * For instance, the required directive does this to work out if the input has data or not.
   *
   * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.
   *
   * You can override this for input directives whose concept of being empty is different to the
   * default. The `checkboxInputType` directive does this because in its case a value of `false`
   * implies empty.
   *
   * @param {*} value The value of the input to check for emptiness.
   * @returns {boolean} True if `value` is "empty".
   */
  this.$isEmpty = function(value) {
    return isUndefined(value) || value === '' || value === null || value !== value;
  };

  var parentForm = $element.inheritedData('$formController') || nullFormCtrl,
      currentValidationRunId = 0;

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setValidity
   *
   * @description
   * Change the validity state, and notify the form.
   *
   * This method can be called within $parsers/$formatters or a custom validation implementation.
   * However, in most cases it should be sufficient to use the `ngModel.$validators` and
   * `ngModel.$asyncValidators` collections which will call `$setValidity` automatically.
   *
   * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be assigned
   *        to either `$error[validationErrorKey]` or `$pending[validationErrorKey]`
   *        (for unfulfilled `$asyncValidators`), so that it is available for data-binding.
   *        The `validationErrorKey` should be in camelCase and will get converted into dash-case
   *        for class name. Example: `myError` will result in `ng-valid-my-error` and `ng-invalid-my-error`
   *        class and can be bound to as  `{{someForm.someControl.$error.myError}}` .
   * @param {boolean} isValid Whether the current state is valid (true), invalid (false), pending (undefined),
   *                          or skipped (null). Pending is used for unfulfilled `$asyncValidators`.
   *                          Skipped is used by Angular when validators do not run because of parse errors and
   *                          when `$asyncValidators` do not run because any of the `$validators` failed.
   */
  addSetValidityMethod({
    ctrl: this,
    $element: $element,
    set: function(object, property) {
      object[property] = true;
    },
    unset: function(object, property) {
      delete object[property];
    },
    parentForm: parentForm,
    $animate: $animate
  });

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setPristine
   *
   * @description
   * Sets the control to its pristine state.
   *
   * This method can be called to remove the `ng-dirty` class and set the control to its pristine
   * state (`ng-pristine` class). A model is considered to be pristine when the control
   * has not been changed from when first compiled.
   */
  this.$setPristine = function() {
    ctrl.$dirty = false;
    ctrl.$pristine = true;
    $animate.removeClass($element, DIRTY_CLASS);
    $animate.addClass($element, PRISTINE_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setDirty
   *
   * @description
   * Sets the control to its dirty state.
   *
   * This method can be called to remove the `ng-pristine` class and set the control to its dirty
   * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed
   * from when first compiled.
   */
  this.$setDirty = function() {
    ctrl.$dirty = true;
    ctrl.$pristine = false;
    $animate.removeClass($element, PRISTINE_CLASS);
    $animate.addClass($element, DIRTY_CLASS);
    parentForm.$setDirty();
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setUntouched
   *
   * @description
   * Sets the control to its untouched state.
   *
   * This method can be called to remove the `ng-touched` class and set the control to its
   * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched
   * by default, however this function can be used to restore that state if the model has
   * already been touched by the user.
   */
  this.$setUntouched = function() {
    ctrl.$touched = false;
    ctrl.$untouched = true;
    $animate.setClass($element, UNTOUCHED_CLASS, TOUCHED_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setTouched
   *
   * @description
   * Sets the control to its touched state.
   *
   * This method can be called to remove the `ng-untouched` class and set the control to its
   * touched state (`ng-touched` class). A model is considered to be touched when the user has
   * first focused the control element and then shifted focus away from the control (blur event).
   */
  this.$setTouched = function() {
    ctrl.$touched = true;
    ctrl.$untouched = false;
    $animate.setClass($element, TOUCHED_CLASS, UNTOUCHED_CLASS);
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$rollbackViewValue
   *
   * @description
   * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,
   * which may be caused by a pending debounced event or because the input is waiting for a some
   * future event.
   *
   * If you have an input that uses `ng-model-options` to set up debounced events or events such
   * as blur you can have a situation where there is a period when the `$viewValue`
   * is out of synch with the ngModel's `$modelValue`.
   *
   * In this case, you can run into difficulties if you try to update the ngModel's `$modelValue`
   * programmatically before these debounced/future events have resolved/occurred, because Angular's
   * dirty checking mechanism is not able to tell whether the model has actually changed or not.
   *
   * The `$rollbackViewValue()` method should be called before programmatically changing the model of an
   * input which may have such events pending. This is important in order to make sure that the
   * input field will be updated with the new model value and any pending operations are cancelled.
   *
   * <example name="ng-model-cancel-update" module="cancel-update-example">
   *   <file name="app.js">
   *     angular.module('cancel-update-example', [])
   *
   *     .controller('CancelUpdateController', ['$scope', function($scope) {
   *       $scope.resetWithCancel = function(e) {
   *         if (e.keyCode == 27) {
   *           $scope.myForm.myInput1.$rollbackViewValue();
   *           $scope.myValue = '';
   *         }
   *       };
   *       $scope.resetWithoutCancel = function(e) {
   *         if (e.keyCode == 27) {
   *           $scope.myValue = '';
   *         }
   *       };
   *     }]);
   *   </file>
   *   <file name="index.html">
   *     <div ng-controller="CancelUpdateController">
   *       <p>Try typing something in each input.  See that the model only updates when you
   *          blur off the input.
   *        </p>
   *        <p>Now see what happens if you start typing then press the Escape key</p>
   *
   *       <form name="myForm" ng-model-options="{ updateOn: 'blur' }">
   *         <p>With $rollbackViewValue()</p>
   *         <input name="myInput1" ng-model="myValue" ng-keydown="resetWithCancel($event)"><br/>
   *         myValue: "{{ myValue }}"
   *
   *         <p>Without $rollbackViewValue()</p>
   *         <input name="myInput2" ng-model="myValue" ng-keydown="resetWithoutCancel($event)"><br/>
   *         myValue: "{{ myValue }}"
   *       </form>
   *     </div>
   *   </file>
   * </example>
   */
  this.$rollbackViewValue = function() {
    $timeout.cancel(pendingDebounce);
    ctrl.$viewValue = ctrl.$$lastCommittedViewValue;
    ctrl.$render();
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$validate
   *
   * @description
   * Runs each of the registered validators (first synchronous validators and then
   * asynchronous validators).
   * If the validity changes to invalid, the model will be set to `undefined`,
   * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.
   * If the validity changes to valid, it will set the model to the last available valid
   * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.
   */
  this.$validate = function() {
    // ignore $validate before model is initialized
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
      return;
    }

    var viewValue = ctrl.$$lastCommittedViewValue;
    // Note: we use the $$rawModelValue as $modelValue might have been
    // set to undefined during a view -> model update that found validation
    // errors. We can't parse the view here, since that could change
    // the model although neither viewValue nor the model on the scope changed
    var modelValue = ctrl.$$rawModelValue;

    var prevValid = ctrl.$valid;
    var prevModelValue = ctrl.$modelValue;

    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;

    ctrl.$$runValidators(modelValue, viewValue, function(allValid) {
      // If there was no change in validity, don't update the model
      // This prevents changing an invalid modelValue to undefined
      if (!allowInvalid && prevValid !== allValid) {
        // Note: Don't check ctrl.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        ctrl.$modelValue = allValid ? modelValue : undefined;

        if (ctrl.$modelValue !== prevModelValue) {
          ctrl.$$writeModelToScope();
        }
      }
    });

  };

  this.$$runValidators = function(modelValue, viewValue, doneCallback) {
    currentValidationRunId++;
    var localValidationRunId = currentValidationRunId;

    // check parser error
    if (!processParseErrors()) {
      validationDone(false);
      return;
    }
    if (!processSyncValidators()) {
      validationDone(false);
      return;
    }
    processAsyncValidators();

    function processParseErrors() {
      var errorKey = ctrl.$$parserName || 'parse';
      if (parserValid === undefined) {
        setValidity(errorKey, null);
      } else {
        if (!parserValid) {
          forEach(ctrl.$validators, function(v, name) {
            setValidity(name, null);
          });
          forEach(ctrl.$asyncValidators, function(v, name) {
            setValidity(name, null);
          });
        }
        // Set the parse error last, to prevent unsetting it, should a $validators key == parserName
        setValidity(errorKey, parserValid);
        return parserValid;
      }
      return true;
    }

    function processSyncValidators() {
      var syncValidatorsValid = true;
      forEach(ctrl.$validators, function(validator, name) {
        var result = validator(modelValue, viewValue);
        syncValidatorsValid = syncValidatorsValid && result;
        setValidity(name, result);
      });
      if (!syncValidatorsValid) {
        forEach(ctrl.$asyncValidators, function(v, name) {
          setValidity(name, null);
        });
        return false;
      }
      return true;
    }

    function processAsyncValidators() {
      var validatorPromises = [];
      var allValid = true;
      forEach(ctrl.$asyncValidators, function(validator, name) {
        var promise = validator(modelValue, viewValue);
        if (!isPromiseLike(promise)) {
          throw $ngModelMinErr("$asyncValidators",
            "Expected asynchronous validator to return a promise but got '{0}' instead.", promise);
        }
        setValidity(name, undefined);
        validatorPromises.push(promise.then(function() {
          setValidity(name, true);
        }, function(error) {
          allValid = false;
          setValidity(name, false);
        }));
      });
      if (!validatorPromises.length) {
        validationDone(true);
      } else {
        $q.all(validatorPromises).then(function() {
          validationDone(allValid);
        }, noop);
      }
    }

    function setValidity(name, isValid) {
      if (localValidationRunId === currentValidationRunId) {
        ctrl.$setValidity(name, isValid);
      }
    }

    function validationDone(allValid) {
      if (localValidationRunId === currentValidationRunId) {

        doneCallback(allValid);
      }
    }
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$commitViewValue
   *
   * @description
   * Commit a pending update to the `$modelValue`.
   *
   * Updates may be pending by a debounced event or because the input is waiting for a some future
   * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`
   * usually handles calling this in response to input events.
   */
  this.$commitViewValue = function() {
    var viewValue = ctrl.$viewValue;

    $timeout.cancel(pendingDebounce);

    // If the view value has not changed then we should just exit, except in the case where there is
    // a native validator on the element. In this case the validation state may have changed even though
    // the viewValue has stayed empty.
    if (ctrl.$$lastCommittedViewValue === viewValue && (viewValue !== '' || !ctrl.$$hasNativeValidators)) {
      return;
    }
    ctrl.$$lastCommittedViewValue = viewValue;

    // change to dirty
    if (ctrl.$pristine) {
      this.$setDirty();
    }
    this.$$parseAndValidate();
  };

  this.$$parseAndValidate = function() {
    var viewValue = ctrl.$$lastCommittedViewValue;
    var modelValue = viewValue;
    parserValid = isUndefined(modelValue) ? undefined : true;

    if (parserValid) {
      for (var i = 0; i < ctrl.$parsers.length; i++) {
        modelValue = ctrl.$parsers[i](modelValue);
        if (isUndefined(modelValue)) {
          parserValid = false;
          break;
        }
      }
    }
    if (isNumber(ctrl.$modelValue) && isNaN(ctrl.$modelValue)) {
      // ctrl.$modelValue has not been touched yet...
      ctrl.$modelValue = ngModelGet($scope);
    }
    var prevModelValue = ctrl.$modelValue;
    var allowInvalid = ctrl.$options && ctrl.$options.allowInvalid;
    ctrl.$$rawModelValue = modelValue;

    if (allowInvalid) {
      ctrl.$modelValue = modelValue;
      writeToModelIfNeeded();
    }

    // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.
    // This can happen if e.g. $setViewValue is called from inside a parser
    ctrl.$$runValidators(modelValue, ctrl.$$lastCommittedViewValue, function(allValid) {
      if (!allowInvalid) {
        // Note: Don't check ctrl.$valid here, as we could have
        // external validators (e.g. calculated on the server),
        // that just call $setValidity and need the model value
        // to calculate their validity.
        ctrl.$modelValue = allValid ? modelValue : undefined;
        writeToModelIfNeeded();
      }
    });

    function writeToModelIfNeeded() {
      if (ctrl.$modelValue !== prevModelValue) {
        ctrl.$$writeModelToScope();
      }
    }
  };

  this.$$writeModelToScope = function() {
    ngModelSet($scope, ctrl.$modelValue);
    forEach(ctrl.$viewChangeListeners, function(listener) {
      try {
        listener();
      } catch (e) {
        $exceptionHandler(e);
      }
    });
  };

  /**
   * @ngdoc method
   * @name ngModel.NgModelController#$setViewValue
   *
   * @description
   * Update the view value.
   *
   * This method should be called when an input directive want to change the view value; typically,
   * this is done from within a DOM event handler.
   *
   * For example {@link ng.directive:input input} calls it when the value of the input changes and
   * {@link ng.directive:select select} calls it when an option is selected.
   *
   * If the new `value` is an object (rather than a string or a number), we should make a copy of the
   * object before passing it to `$setViewValue`.  This is because `ngModel` does not perform a deep
   * watch of objects, it only looks for a change of identity. If you only change the property of
   * the object then ngModel will not realise that the object has changed and will not invoke the
   * `$parsers` and `$validators` pipelines.
   *
   * For this reason, you should not change properties of the copy once it has been passed to
   * `$setViewValue`. Otherwise you may cause the model value on the scope to change incorrectly.
   *
   * When this method is called, the new `value` will be staged for committing through the `$parsers`
   * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged
   * value sent directly for processing, finally to be applied to `$modelValue` and then the
   * **expression** specified in the `ng-model` attribute.
   *
   * Lastly, all the registered change listeners, in the `$viewChangeListeners` list, are called.
   *
   * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`
   * and the `default` trigger is not listed, all those actions will remain pending until one of the
   * `updateOn` events is triggered on the DOM element.
   * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}
   * directive is used with a custom debounce for this particular event.
   *
   * Note that calling this function does not trigger a `$digest`.
   *
   * @param {string} value Value from the view.
   * @param {string} trigger Event that triggered the update.
   */
  this.$setViewValue = function(value, trigger) {
    ctrl.$viewValue = value;
    if (!ctrl.$options || ctrl.$options.updateOnDefault) {
      ctrl.$$debounceViewValueCommit(trigger);
    }
  };

  this.$$debounceViewValueCommit = function(trigger) {
    var debounceDelay = 0,
        options = ctrl.$options,
        debounce;

    if (options && isDefined(options.debounce)) {
      debounce = options.debounce;
      if (isNumber(debounce)) {
        debounceDelay = debounce;
      } else if (isNumber(debounce[trigger])) {
        debounceDelay = debounce[trigger];
      } else if (isNumber(debounce['default'])) {
        debounceDelay = debounce['default'];
      }
    }

    $timeout.cancel(pendingDebounce);
    if (debounceDelay) {
      pendingDebounce = $timeout(function() {
        ctrl.$commitViewValue();
      }, debounceDelay);
    } else if ($rootScope.$$phase) {
      ctrl.$commitViewValue();
    } else {
      $scope.$apply(function() {
        ctrl.$commitViewValue();
      });
    }
  };

  // model -> value
  // Note: we cannot use a normal scope.$watch as we want to detect the following:
  // 1. scope value is 'a'
  // 2. user enters 'b'
  // 3. ng-change kicks in and reverts scope value to 'a'
  //    -> scope value did not change since the last digest as
  //       ng-change executes in apply phase
  // 4. view should be changed back to 'a'
  $scope.$watch(function ngModelWatch() {
    var modelValue = ngModelGet($scope);

    // if scope model value and ngModel value are out of sync
    // TODO(perf): why not move this to the action fn?
    if (modelValue !== ctrl.$modelValue &&
       // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator
       (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)
    ) {
      ctrl.$modelValue = ctrl.$$rawModelValue = modelValue;
      parserValid = undefined;

      var formatters = ctrl.$formatters,
          idx = formatters.length;

      var viewValue = modelValue;
      while (idx--) {
        viewValue = formatters[idx](viewValue);
      }
      if (ctrl.$viewValue !== viewValue) {
        ctrl.$viewValue = ctrl.$$lastCommittedViewValue = viewValue;
        ctrl.$render();

        ctrl.$$runValidators(modelValue, viewValue, noop);
      }
    }

    return modelValue;
  });
}];


/**
 * @ngdoc directive
 * @name ngModel
 *
 * @element input
 * @priority 1
 *
 * @description
 * The `ngModel` directive binds an `input`,`select`, `textarea` (or custom form control) to a
 * property on the scope using {@link ngModel.NgModelController NgModelController},
 * which is created and exposed by this directive.
 *
 * `ngModel` is responsible for:
 *
 * - Binding the view into the model, which other directives such as `input`, `textarea` or `select`
 *   require.
 * - Providing validation behavior (i.e. required, number, email, url).
 * - Keeping the state of the control (valid/invalid, dirty/pristine, touched/untouched, validation errors).
 * - Setting related css classes on the element (`ng-valid`, `ng-invalid`, `ng-dirty`, `ng-pristine`, `ng-touched`, `ng-untouched`) including animations.
 * - Registering the control with its parent {@link ng.directive:form form}.
 *
 * Note: `ngModel` will try to bind to the property given by evaluating the expression on the
 * current scope. If the property doesn't already exist on this scope, it will be created
 * implicitly and added to the scope.
 *
 * For best practices on using `ngModel`, see:
 *
 *  - [Understanding Scopes](https://github.com/angular/angular.js/wiki/Understanding-Scopes)
 *
 * For basic examples, how to use `ngModel`, see:
 *
 *  - {@link ng.directive:input input}
 *    - {@link input[text] text}
 *    - {@link input[checkbox] checkbox}
 *    - {@link input[radio] radio}
 *    - {@link input[number] number}
 *    - {@link input[email] email}
 *    - {@link input[url] url}
 *    - {@link input[date] date}
 *    - {@link input[datetime-local] datetime-local}
 *    - {@link input[time] time}
 *    - {@link input[month] month}
 *    - {@link input[week] week}
 *  - {@link ng.directive:select select}
 *  - {@link ng.directive:textarea textarea}
 *
 * # CSS classes
 * The following CSS classes are added and removed on the associated input/select/textarea element
 * depending on the validity of the model.
 *
 *  - `ng-valid`: the model is valid
 *  - `ng-invalid`: the model is invalid
 *  - `ng-valid-[key]`: for each valid key added by `$setValidity`
 *  - `ng-invalid-[key]`: for each invalid key added by `$setValidity`
 *  - `ng-pristine`: the control hasn't been interacted with yet
 *  - `ng-dirty`: the control has been interacted with
 *  - `ng-touched`: the control has been blurred
 *  - `ng-untouched`: the control hasn't been blurred
 *  - `ng-pending`: any `$asyncValidators` are unfulfilled
 *
 * Keep in mind that ngAnimate can detect each of these classes when added and removed.
 *
 * ## Animation Hooks
 *
 * Animations within models are triggered when any of the associated CSS classes are added and removed
 * on the input element which is attached to the model. These classes are: `.ng-pristine`, `.ng-dirty`,
 * `.ng-invalid` and `.ng-valid` as well as any other validations that are performed on the model itself.
 * The animations that are triggered within ngModel are similar to how they work in ngClass and
 * animations can be hooked into using CSS transitions, keyframes as well as JS animations.
 *
 * The following example shows a simple way to utilize CSS transitions to style an input element
 * that has been rendered as invalid after it has been validated:
 *
 * <pre>
 * //be sure to include ngAnimate as a module to hook into more
 * //advanced animations
 * .my-input {
 *   transition:0.5s linear all;
 *   background: white;
 * }
 * .my-input.ng-invalid {
 *   background: red;
 *   color:white;
 * }
 * </pre>
 *
 * @example
 * <example deps="angular-animate.js" animations="true" fixBase="true" module="inputExample">
     <file name="index.html">
       <script>
        angular.module('inputExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.val = '1';
          }]);
       </script>
       <style>
         .my-input {
           -webkit-transition:all linear 0.5s;
           transition:all linear 0.5s;
           background: transparent;
         }
         .my-input.ng-invalid {
           color:white;
           background: red;
         }
       </style>
       Update input to see transitions when valid/invalid.
       Integer is a valid value.
       <form name="testForm" ng-controller="ExampleController">
         <input ng-model="val" ng-pattern="/^\d+$/" name="anim" class="my-input" />
       </form>
     </file>
 * </example>
 *
 * ## Binding to a getter/setter
 *
 * Sometimes it's helpful to bind `ngModel` to a getter/setter function.  A getter/setter is a
 * function that returns a representation of the model when called with zero arguments, and sets
 * the internal state of a model when called with an argument. It's sometimes useful to use this
 * for models that have an internal representation that's different than what the model exposes
 * to the view.
 *
 * <div class="alert alert-success">
 * **Best Practice:** It's best to keep getters fast because Angular is likely to call them more
 * frequently than other parts of your code.
 * </div>
 *
 * You use this behavior by adding `ng-model-options="{ getterSetter: true }"` to an element that
 * has `ng-model` attached to it. You can also add `ng-model-options="{ getterSetter: true }"` to
 * a `<form>`, which will enable this behavior for all `<input>`s within it. See
 * {@link ng.directive:ngModelOptions `ngModelOptions`} for more.
 *
 * The following example shows how to use `ngModel` with a getter/setter:
 *
 * @example
 * <example name="ngModel-getter-setter" module="getterSetterExample">
     <file name="index.html">
       <div ng-controller="ExampleController">
         <form name="userForm">
           Name:
           <input type="text" name="userName"
                  ng-model="user.name"
                  ng-model-options="{ getterSetter: true }" />
         </form>
         <pre>user.name = <span ng-bind="user.name()"></span></pre>
       </div>
     </file>
     <file name="app.js">
       angular.module('getterSetterExample', [])
         .controller('ExampleController', ['$scope', function($scope) {
           var _name = 'Brian';
           $scope.user = {
             name: function(newName) {
              // Note that newName can be undefined for two reasons:
              // 1. Because it is called as a getter and thus called with no arguments
              // 2. Because the property should actually be set to undefined. This happens e.g. if the
              //    input is invalid
              return arguments.length ? (_name = newName) : _name;
             }
           };
         }]);
     </file>
 * </example>
 */
var ngModelDirective = ['$rootScope', function($rootScope) {
  return {
    restrict: 'A',
    require: ['ngModel', '^?form', '^?ngModelOptions'],
    controller: NgModelController,
    // Prelink needs to run before any input directive
    // so that we can set the NgModelOptions in NgModelController
    // before anyone else uses it.
    priority: 1,
    compile: function ngModelCompile(element) {
      // Setup initial state of the control
      element.addClass(PRISTINE_CLASS).addClass(UNTOUCHED_CLASS).addClass(VALID_CLASS);

      return {
        pre: function ngModelPreLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0],
              formCtrl = ctrls[1] || nullFormCtrl;

          modelCtrl.$$setOptions(ctrls[2] && ctrls[2].$options);

          // notify others, especially parent forms
          formCtrl.$addControl(modelCtrl);

          attr.$observe('name', function(newValue) {
            if (modelCtrl.$name !== newValue) {
              formCtrl.$$renameControl(modelCtrl, newValue);
            }
          });

          scope.$on('$destroy', function() {
            formCtrl.$removeControl(modelCtrl);
          });
        },
        post: function ngModelPostLink(scope, element, attr, ctrls) {
          var modelCtrl = ctrls[0];
          if (modelCtrl.$options && modelCtrl.$options.updateOn) {
            element.on(modelCtrl.$options.updateOn, function(ev) {
              modelCtrl.$$debounceViewValueCommit(ev && ev.type);
            });
          }

          element.on('blur', function(ev) {
            if (modelCtrl.$touched) return;

            if ($rootScope.$$phase) {
              scope.$evalAsync(modelCtrl.$setTouched);
            } else {
              scope.$apply(modelCtrl.$setTouched);
            }
          });
        }
      };
    }
  };
}];

var DEFAULT_REGEXP = /(\s+|^)default(\s+|$)/;

/**
 * @ngdoc directive
 * @name ngModelOptions
 *
 * @description
 * Allows tuning how model updates are done. Using `ngModelOptions` you can specify a custom list of
 * events that will trigger a model update and/or a debouncing delay so that the actual update only
 * takes place when a timer expires; this timer will be reset after another change takes place.
 *
 * Given the nature of `ngModelOptions`, the value displayed inside input fields in the view might
 * be different than the value in the actual model. This means that if you update the model you
 * should also invoke {@link ngModel.NgModelController `$rollbackViewValue`} on the relevant input field in
 * order to make sure it is synchronized with the model and that any debounced action is canceled.
 *
 * The easiest way to reference the control's {@link ngModel.NgModelController `$rollbackViewValue`}
 * method is by making sure the input is placed inside a form that has a `name` attribute. This is
 * important because `form` controllers are published to the related scope under the name in their
 * `name` attribute.
 *
 * Any pending changes will take place immediately when an enclosing form is submitted via the
 * `submit` event. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`
 * to have access to the updated model.
 *
 * `ngModelOptions` has an effect on the element it's declared on and its descendants.
 *
 * @param {Object} ngModelOptions options to apply to the current model. Valid keys are:
 *   - `updateOn`: string specifying which event should the input be bound to. You can set several
 *     events using an space delimited list. There is a special event called `default` that
 *     matches the default events belonging of the control.
 *   - `debounce`: integer value which contains the debounce model update value in milliseconds. A
 *     value of 0 triggers an immediate update. If an object is supplied instead, you can specify a
 *     custom value for each event. For example:
 *     `ng-model-options="{ updateOn: 'default blur', debounce: {'default': 500, 'blur': 0} }"`
 *   - `allowInvalid`: boolean value which indicates that the model can be set with values that did
 *     not validate correctly instead of the default behavior of setting the model to undefined.
 *   - `getterSetter`: boolean value which determines whether or not to treat functions bound to
       `ngModel` as getters/setters.
 *   - `timezone`: Defines the timezone to be used to read/write the `Date` instance in the model for
 *     `<input type="date">`, `<input type="time">`, ... . Right now, the only supported value is `'UTC'`,
 *     otherwise the default timezone of the browser will be used.
 *
 * @example

  The following example shows how to override immediate updates. Changes on the inputs within the
  form will update the model only when the control loses focus (blur event). If `escape` key is
  pressed while the input field is focused, the value is reset to the value in the current model.

  <example name="ngModelOptions-directive-blur" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ updateOn: 'blur' }"
                 ng-keyup="cancel($event)" /><br />

          Other data:
          <input type="text" ng-model="user.data" /><br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'say', data: '' };

          $scope.cancel = function(e) {
            if (e.keyCode == 27) {
              $scope.userForm.userName.$rollbackViewValue();
            }
          };
        }]);
    </file>
    <file name="protractor.js" type="protractor">
      var model = element(by.binding('user.name'));
      var input = element(by.model('user.name'));
      var other = element(by.model('user.data'));

      it('should allow custom events', function() {
        input.sendKeys(' hello');
        input.click();
        expect(model.getText()).toEqual('say');
        other.click();
        expect(model.getText()).toEqual('say hello');
      });

      it('should $rollbackViewValue when model changes', function() {
        input.sendKeys(' hello');
        expect(input.getAttribute('value')).toEqual('say hello');
        input.sendKeys(protractor.Key.ESCAPE);
        expect(input.getAttribute('value')).toEqual('say');
        other.click();
        expect(model.getText()).toEqual('say');
      });
    </file>
  </example>

  This one shows how to debounce model changes. Model will be updated only 1 sec after last change.
  If the `Clear` button is pressed, any debounced action is canceled and the value becomes empty.

  <example name="ngModelOptions-directive-debounce" module="optionsExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ debounce: 1000 }" />
          <button ng-click="userForm.userName.$rollbackViewValue(); user.name=''">Clear</button><br />
        </form>
        <pre>user.name = <span ng-bind="user.name"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('optionsExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.user = { name: 'say' };
        }]);
    </file>
  </example>

  This one shows how to bind to getter/setters:

  <example name="ngModelOptions-directive-getter-setter" module="getterSetterExample">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <form name="userForm">
          Name:
          <input type="text" name="userName"
                 ng-model="user.name"
                 ng-model-options="{ getterSetter: true }" />
        </form>
        <pre>user.name = <span ng-bind="user.name()"></span></pre>
      </div>
    </file>
    <file name="app.js">
      angular.module('getterSetterExample', [])
        .controller('ExampleController', ['$scope', function($scope) {
          var _name = 'Brian';
          $scope.user = {
            name: function(newName) {
              // Note that newName can be undefined for two reasons:
              // 1. Because it is called as a getter and thus called with no arguments
              // 2. Because the property should actually be set to undefined. This happens e.g. if the
              //    input is invalid
              return arguments.length ? (_name = newName) : _name;
            }
          };
        }]);
    </file>
  </example>
 */
var ngModelOptionsDirective = function() {
  return {
    restrict: 'A',
    controller: ['$scope', '$attrs', function($scope, $attrs) {
      var that = this;
      this.$options = $scope.$eval($attrs.ngModelOptions);
      // Allow adding/overriding bound events
      if (this.$options.updateOn !== undefined) {
        this.$options.updateOnDefault = false;
        // extract "default" pseudo-event from list of events that can trigger a model update
        this.$options.updateOn = trim(this.$options.updateOn.replace(DEFAULT_REGEXP, function() {
          that.$options.updateOnDefault = true;
          return ' ';
        }));
      } else {
        this.$options.updateOnDefault = true;
      }
    }]
  };
};



// helper methods
function addSetValidityMethod(context) {
  var ctrl = context.ctrl,
      $element = context.$element,
      classCache = {},
      set = context.set,
      unset = context.unset,
      parentForm = context.parentForm,
      $animate = context.$animate;

  classCache[INVALID_CLASS] = !(classCache[VALID_CLASS] = $element.hasClass(VALID_CLASS));

  ctrl.$setValidity = setValidity;

  function setValidity(validationErrorKey, state, controller) {
    if (state === undefined) {
      createAndSet('$pending', validationErrorKey, controller);
    } else {
      unsetAndCleanup('$pending', validationErrorKey, controller);
    }
    if (!isBoolean(state)) {
      unset(ctrl.$error, validationErrorKey, controller);
      unset(ctrl.$$success, validationErrorKey, controller);
    } else {
      if (state) {
        unset(ctrl.$error, validationErrorKey, controller);
        set(ctrl.$$success, validationErrorKey, controller);
      } else {
        set(ctrl.$error, validationErrorKey, controller);
        unset(ctrl.$$success, validationErrorKey, controller);
      }
    }
    if (ctrl.$pending) {
      cachedToggleClass(PENDING_CLASS, true);
      ctrl.$valid = ctrl.$invalid = undefined;
      toggleValidationCss('', null);
    } else {
      cachedToggleClass(PENDING_CLASS, false);
      ctrl.$valid = isObjectEmpty(ctrl.$error);
      ctrl.$invalid = !ctrl.$valid;
      toggleValidationCss('', ctrl.$valid);
    }

    // re-read the state as the set/unset methods could have
    // combined state in ctrl.$error[validationError] (used for forms),
    // where setting/unsetting only increments/decrements the value,
    // and does not replace it.
    var combinedState;
    if (ctrl.$pending && ctrl.$pending[validationErrorKey]) {
      combinedState = undefined;
    } else if (ctrl.$error[validationErrorKey]) {
      combinedState = false;
    } else if (ctrl.$$success[validationErrorKey]) {
      combinedState = true;
    } else {
      combinedState = null;
    }

    toggleValidationCss(validationErrorKey, combinedState);
    parentForm.$setValidity(validationErrorKey, combinedState, ctrl);
  }

  function createAndSet(name, value, controller) {
    if (!ctrl[name]) {
      ctrl[name] = {};
    }
    set(ctrl[name], value, controller);
  }

  function unsetAndCleanup(name, value, controller) {
    if (ctrl[name]) {
      unset(ctrl[name], value, controller);
    }
    if (isObjectEmpty(ctrl[name])) {
      ctrl[name] = undefined;
    }
  }

  function cachedToggleClass(className, switchValue) {
    if (switchValue && !classCache[className]) {
      $animate.addClass($element, className);
      classCache[className] = true;
    } else if (!switchValue && classCache[className]) {
      $animate.removeClass($element, className);
      classCache[className] = false;
    }
  }

  function toggleValidationCss(validationErrorKey, isValid) {
    validationErrorKey = validationErrorKey ? '-' + snake_case(validationErrorKey, '-') : '';

    cachedToggleClass(VALID_CLASS + validationErrorKey, isValid === true);
    cachedToggleClass(INVALID_CLASS + validationErrorKey, isValid === false);
  }
}

function isObjectEmpty(obj) {
  if (obj) {
    for (var prop in obj) {
      return false;
    }
  }
  return true;
}

/**
 * @ngdoc directive
 * @name ngNonBindable
 * @restrict AC
 * @priority 1000
 *
 * @description
 * The `ngNonBindable` directive tells Angular not to compile or bind the contents of the current
 * DOM element. This is useful if the element contains what appears to be Angular directives and
 * bindings but which should be ignored by Angular. This could be the case if you have a site that
 * displays snippets of code, for instance.
 *
 * @element ANY
 *
 * @example
 * In this example there are two locations where a simple interpolation binding (`{{}}`) is present,
 * but the one wrapped in `ngNonBindable` is left alone.
 *
 * @example
    <example>
      <file name="index.html">
        <div>Normal: {{1 + 2}}</div>
        <div ng-non-bindable>Ignored: {{1 + 2}}</div>
      </file>
      <file name="protractor.js" type="protractor">
       it('should check ng-non-bindable', function() {
         expect(element(by.binding('1 + 2')).getText()).toContain('3');
         expect(element.all(by.css('div')).last().getText()).toMatch(/1 \+ 2/);
       });
      </file>
    </example>
 */
var ngNonBindableDirective = ngDirective({ terminal: true, priority: 1000 });

/**
 * @ngdoc directive
 * @name ngPluralize
 * @restrict EA
 *
 * @description
 * `ngPluralize` is a directive that displays messages according to en-US localization rules.
 * These rules are bundled with angular.js, but can be overridden
 * (see {@link guide/i18n Angular i18n} dev guide). You configure ngPluralize directive
 * by specifying the mappings between
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * and the strings to be displayed.
 *
 * # Plural categories and explicit number rules
 * There are two
 * [plural categories](http://unicode.org/repos/cldr-tmp/trunk/diff/supplemental/language_plural_rules.html)
 * in Angular's default en-US locale: "one" and "other".
 *
 * While a plural category may match many numbers (for example, in en-US locale, "other" can match
 * any number that is not 1), an explicit number rule can only match one number. For example, the
 * explicit number rule for "3" matches the number 3. There are examples of plural categories
 * and explicit number rules throughout the rest of this documentation.
 *
 * # Configuring ngPluralize
 * You configure ngPluralize by providing 2 attributes: `count` and `when`.
 * You can also provide an optional attribute, `offset`.
 *
 * The value of the `count` attribute can be either a string or an {@link guide/expression
 * Angular expression}; these are evaluated on the current scope for its bound value.
 *
 * The `when` attribute specifies the mappings between plural categories and the actual
 * string to be displayed. The value of the attribute should be a JSON object.
 *
 * The following example shows how to configure ngPluralize:
 *
 * ```html
 * <ng-pluralize count="personCount"
                 when="{'0': 'Nobody is viewing.',
 *                      'one': '1 person is viewing.',
 *                      'other': '{} people are viewing.'}">
 * </ng-pluralize>
 *```
 *
 * In the example, `"0: Nobody is viewing."` is an explicit number rule. If you did not
 * specify this rule, 0 would be matched to the "other" category and "0 people are viewing"
 * would be shown instead of "Nobody is viewing". You can specify an explicit number rule for
 * other numbers, for example 12, so that instead of showing "12 people are viewing", you can
 * show "a dozen people are viewing".
 *
 * You can use a set of closed braces (`{}`) as a placeholder for the number that you want substituted
 * into pluralized strings. In the previous example, Angular will replace `{}` with
 * <span ng-non-bindable>`{{personCount}}`</span>. The closed braces `{}` is a placeholder
 * for <span ng-non-bindable>{{numberExpression}}</span>.
 *
 * # Configuring ngPluralize with offset
 * The `offset` attribute allows further customization of pluralized text, which can result in
 * a better user experience. For example, instead of the message "4 people are viewing this document",
 * you might display "John, Kate and 2 others are viewing this document".
 * The offset attribute allows you to offset a number by any desired value.
 * Let's take a look at an example:
 *
 * ```html
 * <ng-pluralize count="personCount" offset=2
 *               when="{'0': 'Nobody is viewing.',
 *                      '1': '{{person1}} is viewing.',
 *                      '2': '{{person1}} and {{person2}} are viewing.',
 *                      'one': '{{person1}}, {{person2}} and one other person are viewing.',
 *                      'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
 * </ng-pluralize>
 * ```
 *
 * Notice that we are still using two plural categories(one, other), but we added
 * three explicit number rules 0, 1 and 2.
 * When one person, perhaps John, views the document, "John is viewing" will be shown.
 * When three people view the document, no explicit number rule is found, so
 * an offset of 2 is taken off 3, and Angular uses 1 to decide the plural category.
 * In this case, plural category 'one' is matched and "John, Mary and one other person are viewing"
 * is shown.
 *
 * Note that when you specify offsets, you must provide explicit number rules for
 * numbers from 0 up to and including the offset. If you use an offset of 3, for example,
 * you must provide explicit number rules for 0, 1, 2 and 3. You must also provide plural strings for
 * plural categories "one" and "other".
 *
 * @param {string|expression} count The variable to be bound to.
 * @param {string} when The mapping between plural category to its corresponding strings.
 * @param {number=} offset Offset to deduct from the total number.
 *
 * @example
    <example module="pluralizeExample">
      <file name="index.html">
        <script>
          angular.module('pluralizeExample', [])
            .controller('ExampleController', ['$scope', function($scope) {
              $scope.person1 = 'Igor';
              $scope.person2 = 'Misko';
              $scope.personCount = 1;
            }]);
        </script>
        <div ng-controller="ExampleController">
          Person 1:<input type="text" ng-model="person1" value="Igor" /><br/>
          Person 2:<input type="text" ng-model="person2" value="Misko" /><br/>
          Number of People:<input type="text" ng-model="personCount" value="1" /><br/>

          <!--- Example with simple pluralization rules for en locale --->
          Without Offset:
          <ng-pluralize count="personCount"
                        when="{'0': 'Nobody is viewing.',
                               'one': '1 person is viewing.',
                               'other': '{} people are viewing.'}">
          </ng-pluralize><br>

          <!--- Example with offset --->
          With Offset(2):
          <ng-pluralize count="personCount" offset=2
                        when="{'0': 'Nobody is viewing.',
                               '1': '{{person1}} is viewing.',
                               '2': '{{person1}} and {{person2}} are viewing.',
                               'one': '{{person1}}, {{person2}} and one other person are viewing.',
                               'other': '{{person1}}, {{person2}} and {} other people are viewing.'}">
          </ng-pluralize>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
        it('should show correct pluralized string', function() {
          var withoutOffset = element.all(by.css('ng-pluralize')).get(0);
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var countInput = element(by.model('personCount'));

          expect(withoutOffset.getText()).toEqual('1 person is viewing.');
          expect(withOffset.getText()).toEqual('Igor is viewing.');

          countInput.clear();
          countInput.sendKeys('0');

          expect(withoutOffset.getText()).toEqual('Nobody is viewing.');
          expect(withOffset.getText()).toEqual('Nobody is viewing.');

          countInput.clear();
          countInput.sendKeys('2');

          expect(withoutOffset.getText()).toEqual('2 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor and Misko are viewing.');

          countInput.clear();
          countInput.sendKeys('3');

          expect(withoutOffset.getText()).toEqual('3 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and one other person are viewing.');

          countInput.clear();
          countInput.sendKeys('4');

          expect(withoutOffset.getText()).toEqual('4 people are viewing.');
          expect(withOffset.getText()).toEqual('Igor, Misko and 2 other people are viewing.');
        });
        it('should show data-bound names', function() {
          var withOffset = element.all(by.css('ng-pluralize')).get(1);
          var personCount = element(by.model('personCount'));
          var person1 = element(by.model('person1'));
          var person2 = element(by.model('person2'));
          personCount.clear();
          personCount.sendKeys('4');
          person1.clear();
          person1.sendKeys('Di');
          person2.clear();
          person2.sendKeys('Vojta');
          expect(withOffset.getText()).toEqual('Di, Vojta and 2 other people are viewing.');
        });
      </file>
    </example>
 */
var ngPluralizeDirective = ['$locale', '$interpolate', function($locale, $interpolate) {
  var BRACE = /{}/g,
      IS_WHEN = /^when(Minus)?(.+)$/;

  return {
    restrict: 'EA',
    link: function(scope, element, attr) {
      var numberExp = attr.count,
          whenExp = attr.$attr.when && element.attr(attr.$attr.when), // we have {{}} in attrs
          offset = attr.offset || 0,
          whens = scope.$eval(whenExp) || {},
          whensExpFns = {},
          startSymbol = $interpolate.startSymbol(),
          endSymbol = $interpolate.endSymbol(),
          braceReplacement = startSymbol + numberExp + '-' + offset + endSymbol,
          watchRemover = angular.noop,
          lastCount;

      forEach(attr, function(expression, attributeName) {
        var tmpMatch = IS_WHEN.exec(attributeName);
        if (tmpMatch) {
          var whenKey = (tmpMatch[1] ? '-' : '') + lowercase(tmpMatch[2]);
          whens[whenKey] = element.attr(attr.$attr[attributeName]);
        }
      });
      forEach(whens, function(expression, key) {
        whensExpFns[key] = $interpolate(expression.replace(BRACE, braceReplacement));

      });

      scope.$watch(numberExp, function ngPluralizeWatchAction(newVal) {
        var count = parseFloat(newVal);
        var countIsNaN = isNaN(count);

        if (!countIsNaN && !(count in whens)) {
          // If an explicit number rule such as 1, 2, 3... is defined, just use it.
          // Otherwise, check it against pluralization rules in $locale service.
          count = $locale.pluralCat(count - offset);
        }

        // If both `count` and `lastCount` are NaN, we don't need to re-register a watch.
        // In JS `NaN !== NaN`, so we have to exlicitly check.
        if ((count !== lastCount) && !(countIsNaN && isNaN(lastCount))) {
          watchRemover();
          watchRemover = scope.$watch(whensExpFns[count], updateElementText);
          lastCount = count;
        }
      });

      function updateElementText(newText) {
        element.text(newText || '');
      }
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngRepeat
 *
 * @description
 * The `ngRepeat` directive instantiates a template once per item from a collection. Each template
 * instance gets its own scope, where the given loop variable is set to the current collection item,
 * and `$index` is set to the item index or key.
 *
 * Special properties are exposed on the local scope of each template instance, including:
 *
 * | Variable  | Type            | Details                                                                     |
 * |-----------|-----------------|-----------------------------------------------------------------------------|
 * | `$index`  | {@type number}  | iterator offset of the repeated element (0..length-1)                       |
 * | `$first`  | {@type boolean} | true if the repeated element is first in the iterator.                      |
 * | `$middle` | {@type boolean} | true if the repeated element is between the first and last in the iterator. |
 * | `$last`   | {@type boolean} | true if the repeated element is last in the iterator.                       |
 * | `$even`   | {@type boolean} | true if the iterator position `$index` is even (otherwise false).           |
 * | `$odd`    | {@type boolean} | true if the iterator position `$index` is odd (otherwise false).            |
 *
 * Creating aliases for these properties is possible with {@link ng.directive:ngInit `ngInit`}.
 * This may be useful when, for instance, nesting ngRepeats.
 *
 * # Iterating over object properties
 *
 * It is possible to get `ngRepeat` to iterate over the properties of an object using the following
 * syntax:
 *
 * ```js
 * <div ng-repeat="(key, value) in myObj"> ... </div>
 * ```
 *
 * You need to be aware that the JavaScript specification does not define what order
 * it will return the keys for an object. In order to have a guaranteed deterministic order
 * for the keys, Angular versions up to and including 1.3 **sort the keys alphabetically**.
 *
 * If this is not desired, the recommended workaround is to convert your object into an array
 * that is sorted into the order that you prefer before providing it to `ngRepeat`.  You could
 * do this with a filter such as [toArrayFilter](http://ngmodules.org/modules/angular-toArrayFilter)
 * or implement a `$watch` on the object yourself.
 *
 * In version 1.4 we will remove the sorting, since it seems that browsers generally follow the
 * strategy of providing keys in the order in which they were defined, although there are exceptions
 * when keys are deleted and reinstated.
 *
 *
 * # Tracking and Duplicates
 *
 * When the contents of the collection change, `ngRepeat` makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 *
 * By default, `ngRepeat` does not allow duplicate items in arrays. This is because when
 * there are duplicates, it is not possible to maintain a one-to-one mapping between collection
 * items and DOM elements.
 *
 * If you do need to repeat duplicate items, you can substitute the default tracking behavior
 * with your own using the `track by` expression.
 *
 * For example, you may track items by the index of each item in the collection, using the
 * special scope property `$index`:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by $index">
 *      {{n}}
 *    </div>
 * ```
 *
 * You may use arbitrary expressions in `track by`, including references to custom functions
 * on the scope:
 * ```html
 *    <div ng-repeat="n in [42, 42, 43, 43] track by myTrackingFunction(n)">
 *      {{n}}
 *    </div>
 * ```
 *
 * If you are working with objects that have an identifier property, you can track
 * by the identifier instead of the whole object. Should you reload your data later, `ngRepeat`
 * will not have to rebuild the DOM elements for items it has already rendered, even if the
 * JavaScript objects in the collection have been substituted for new ones:
 * ```html
 *    <div ng-repeat="model in collection track by model.id">
 *      {{model.name}}
 *    </div>
 * ```
 *
 * When no `track by` expression is provided, it is equivalent to tracking by the built-in
 * `$id` function, which tracks items by their identity:
 * ```html
 *    <div ng-repeat="obj in collection track by $id(obj)">
 *      {{obj.prop}}
 *    </div>
 * ```
 *
 * # Special repeat start and end points
 * To repeat a series of elements instead of just one parent element, ngRepeat (as well as other ng directives) supports extending
 * the range of the repeater by defining explicit start and end points by using **ng-repeat-start** and **ng-repeat-end** respectively.
 * The **ng-repeat-start** directive works the same as **ng-repeat**, but will repeat all the HTML code (including the tag it's defined on)
 * up to and including the ending HTML tag where **ng-repeat-end** is placed.
 *
 * The example below makes use of this feature:
 * ```html
 *   <header ng-repeat-start="item in items">
 *     Header {{ item }}
 *   </header>
 *   <div class="body">
 *     Body {{ item }}
 *   </div>
 *   <footer ng-repeat-end>
 *     Footer {{ item }}
 *   </footer>
 * ```
 *
 * And with an input of {@type ['A','B']} for the items variable in the example above, the output will evaluate to:
 * ```html
 *   <header>
 *     Header A
 *   </header>
 *   <div class="body">
 *     Body A
 *   </div>
 *   <footer>
 *     Footer A
 *   </footer>
 *   <header>
 *     Header B
 *   </header>
 *   <div class="body">
 *     Body B
 *   </div>
 *   <footer>
 *     Footer B
 *   </footer>
 * ```
 *
 * The custom start and end points for ngRepeat also support all other HTML directive syntax flavors provided in AngularJS (such
 * as **data-ng-repeat-start**, **x-ng-repeat-start** and **ng:repeat-start**).
 *
 * @animations
 * **.enter** - when a new item is added to the list or when an item is revealed after a filter
 *
 * **.leave** - when an item is removed from the list or when an item is filtered out
 *
 * **.move** - when an adjacent item is filtered out causing a reorder or when the item contents are reordered
 *
 * @element ANY
 * @scope
 * @priority 1000
 * @param {repeat_expression} ngRepeat The expression indicating how to enumerate a collection. These
 *   formats are currently supported:
 *
 *   * `variable in expression` – where variable is the user defined loop variable and `expression`
 *     is a scope expression giving the collection to enumerate.
 *
 *     For example: `album in artist.albums`.
 *
 *   * `(key, value) in expression` – where `key` and `value` can be any user defined identifiers,
 *     and `expression` is the scope expression giving the collection to enumerate.
 *
 *     For example: `(name, age) in {'adam':10, 'amalie':12}`.
 *
 *   * `variable in expression track by tracking_expression` – You can also provide an optional tracking expression
 *     which can be used to associate the objects in the collection with the DOM elements. If no tracking expression
 *     is specified, ng-repeat associates elements by identity. It is an error to have
 *     more than one tracking expression value resolve to the same key. (This would mean that two distinct objects are
 *     mapped to the same DOM element, which is not possible.)  If filters are used in the expression, they should be
 *     applied before the tracking expression.
 *
 *     For example: `item in items` is equivalent to `item in items track by $id(item)`. This implies that the DOM elements
 *     will be associated by item identity in the array.
 *
 *     For example: `item in items track by $id(item)`. A built in `$id()` function can be used to assign a unique
 *     `$$hashKey` property to each item in the array. This property is then used as a key to associated DOM elements
 *     with the corresponding item in the array by identity. Moving the same object in array would move the DOM
 *     element in the same way in the DOM.
 *
 *     For example: `item in items track by item.id` is a typical pattern when the items come from the database. In this
 *     case the object identity does not matter. Two objects are considered equivalent as long as their `id`
 *     property is same.
 *
 *     For example: `item in items | filter:searchText track by item.id` is a pattern that might be used to apply a filter
 *     to items in conjunction with a tracking expression.
 *
 *   * `variable in expression as alias_expression` – You can also provide an optional alias expression which will then store the
 *     intermediate results of the repeater after the filters have been applied. Typically this is used to render a special message
 *     when a filter is active on the repeater, but the filtered result set is empty.
 *
 *     For example: `item in items | filter:x as results` will store the fragment of the repeated items as `results`, but only after
 *     the items have been processed through the filter.
 *
 * @example
 * This example initializes the scope to a list of names and
 * then uses `ngRepeat` to display every person:
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-init="friends = [
        {name:'John', age:25, gender:'boy'},
        {name:'Jessie', age:30, gender:'girl'},
        {name:'Johanna', age:28, gender:'girl'},
        {name:'Joy', age:15, gender:'girl'},
        {name:'Mary', age:28, gender:'girl'},
        {name:'Peter', age:95, gender:'boy'},
        {name:'Sebastian', age:50, gender:'boy'},
        {name:'Erika', age:27, gender:'girl'},
        {name:'Patrick', age:40, gender:'boy'},
        {name:'Samantha', age:60, gender:'girl'}
      ]">
        I have {{friends.length}} friends. They are:
        <input type="search" ng-model="q" placeholder="filter friends..." />
        <ul class="example-animate-container">
          <li class="animate-repeat" ng-repeat="friend in friends | filter:q as results">
            [{{$index + 1}}] {{friend.name}} who is {{friend.age}} years old.
          </li>
          <li class="animate-repeat" ng-if="results.length == 0">
            <strong>No results found...</strong>
          </li>
        </ul>
      </div>
    </file>
    <file name="animations.css">
      .example-animate-container {
        background:white;
        border:1px solid black;
        list-style:none;
        margin:0;
        padding:0 10px;
      }

      .animate-repeat {
        line-height:40px;
        list-style:none;
        box-sizing:border-box;
      }

      .animate-repeat.ng-move,
      .animate-repeat.ng-enter,
      .animate-repeat.ng-leave {
        -webkit-transition:all linear 0.5s;
        transition:all linear 0.5s;
      }

      .animate-repeat.ng-leave.ng-leave-active,
      .animate-repeat.ng-move,
      .animate-repeat.ng-enter {
        opacity:0;
        max-height:0;
      }

      .animate-repeat.ng-leave,
      .animate-repeat.ng-move.ng-move-active,
      .animate-repeat.ng-enter.ng-enter-active {
        opacity:1;
        max-height:40px;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var friends = element.all(by.repeater('friend in friends'));

      it('should render initial data set', function() {
        expect(friends.count()).toBe(10);
        expect(friends.get(0).getText()).toEqual('[1] John who is 25 years old.');
        expect(friends.get(1).getText()).toEqual('[2] Jessie who is 30 years old.');
        expect(friends.last().getText()).toEqual('[10] Samantha who is 60 years old.');
        expect(element(by.binding('friends.length')).getText())
            .toMatch("I have 10 friends. They are:");
      });

       it('should update repeater when filter predicate changes', function() {
         expect(friends.count()).toBe(10);

         element(by.model('q')).sendKeys('ma');

         expect(friends.count()).toBe(2);
         expect(friends.get(0).getText()).toEqual('[1] Mary who is 28 years old.');
         expect(friends.last().getText()).toEqual('[2] Samantha who is 60 years old.');
       });
      </file>
    </example>
 */
var ngRepeatDirective = ['$parse', '$animate', function($parse, $animate) {
  var NG_REMOVED = '$$NG_REMOVED';
  var ngRepeatMinErr = minErr('ngRepeat');

  var updateScope = function(scope, index, valueIdentifier, value, keyIdentifier, key, arrayLength) {
    // TODO(perf): generate setters to shave off ~40ms or 1-1.5%
    scope[valueIdentifier] = value;
    if (keyIdentifier) scope[keyIdentifier] = key;
    scope.$index = index;
    scope.$first = (index === 0);
    scope.$last = (index === (arrayLength - 1));
    scope.$middle = !(scope.$first || scope.$last);
    // jshint bitwise: false
    scope.$odd = !(scope.$even = (index&1) === 0);
    // jshint bitwise: true
  };

  var getBlockStart = function(block) {
    return block.clone[0];
  };

  var getBlockEnd = function(block) {
    return block.clone[block.clone.length - 1];
  };


  return {
    restrict: 'A',
    multiElement: true,
    transclude: 'element',
    priority: 1000,
    terminal: true,
    $$tlb: true,
    compile: function ngRepeatCompile($element, $attr) {
      var expression = $attr.ngRepeat;
      var ngRepeatEndComment = document.createComment(' end ngRepeat: ' + expression + ' ');

      var match = expression.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

      if (!match) {
        throw ngRepeatMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
            expression);
      }

      var lhs = match[1];
      var rhs = match[2];
      var aliasAs = match[3];
      var trackByExp = match[4];

      match = lhs.match(/^(?:(\s*[\$\w]+)|\(\s*([\$\w]+)\s*,\s*([\$\w]+)\s*\))$/);

      if (!match) {
        throw ngRepeatMinErr('iidexp', "'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.",
            lhs);
      }
      var valueIdentifier = match[3] || match[1];
      var keyIdentifier = match[2];

      if (aliasAs && (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||
          /^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(aliasAs))) {
        throw ngRepeatMinErr('badident', "alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.",
          aliasAs);
      }

      var trackByExpGetter, trackByIdExpFn, trackByIdArrayFn, trackByIdObjFn;
      var hashFnLocals = {$id: hashKey};

      if (trackByExp) {
        trackByExpGetter = $parse(trackByExp);
      } else {
        trackByIdArrayFn = function(key, value) {
          return hashKey(value);
        };
        trackByIdObjFn = function(key) {
          return key;
        };
      }

      return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {

        if (trackByExpGetter) {
          trackByIdExpFn = function(key, value, index) {
            // assign key, value, and $index to the locals so that they can be used in hash functions
            if (keyIdentifier) hashFnLocals[keyIdentifier] = key;
            hashFnLocals[valueIdentifier] = value;
            hashFnLocals.$index = index;
            return trackByExpGetter($scope, hashFnLocals);
          };
        }

        // Store a list of elements from previous run. This is a hash where key is the item from the
        // iterator, and the value is objects with following properties.
        //   - scope: bound scope
        //   - element: previous element.
        //   - index: position
        //
        // We are using no-proto object so that we don't need to guard against inherited props via
        // hasOwnProperty.
        var lastBlockMap = createMap();

        //watch props
        $scope.$watchCollection(rhs, function ngRepeatAction(collection) {
          var index, length,
              previousNode = $element[0],     // node that cloned nodes should be inserted after
                                              // initialized to the comment node anchor
              nextNode,
              // Same as lastBlockMap but it has the current state. It will become the
              // lastBlockMap on the next iteration.
              nextBlockMap = createMap(),
              collectionLength,
              key, value, // key/value of iteration
              trackById,
              trackByIdFn,
              collectionKeys,
              block,       // last object information {scope, element, id}
              nextBlockOrder,
              elementsToRemove;

          if (aliasAs) {
            $scope[aliasAs] = collection;
          }

          if (isArrayLike(collection)) {
            collectionKeys = collection;
            trackByIdFn = trackByIdExpFn || trackByIdArrayFn;
          } else {
            trackByIdFn = trackByIdExpFn || trackByIdObjFn;
            // if object, extract keys, sort them and use to determine order of iteration over obj props
            collectionKeys = [];
            for (var itemKey in collection) {
              if (collection.hasOwnProperty(itemKey) && itemKey.charAt(0) != '$') {
                collectionKeys.push(itemKey);
              }
            }
            collectionKeys.sort();
          }

          collectionLength = collectionKeys.length;
          nextBlockOrder = new Array(collectionLength);

          // locate existing items
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            trackById = trackByIdFn(key, value, index);
            if (lastBlockMap[trackById]) {
              // found previously seen block
              block = lastBlockMap[trackById];
              delete lastBlockMap[trackById];
              nextBlockMap[trackById] = block;
              nextBlockOrder[index] = block;
            } else if (nextBlockMap[trackById]) {
              // if collision detected. restore lastBlockMap and throw an error
              forEach(nextBlockOrder, function(block) {
                if (block && block.scope) lastBlockMap[block.id] = block;
              });
              throw ngRepeatMinErr('dupes',
                  "Duplicates in a repeater are not allowed. Use 'track by' expression to specify unique keys. Repeater: {0}, Duplicate key: {1}, Duplicate value: {2}",
                  expression, trackById, value);
            } else {
              // new never before seen block
              nextBlockOrder[index] = {id: trackById, scope: undefined, clone: undefined};
              nextBlockMap[trackById] = true;
            }
          }

          // remove leftover items
          for (var blockKey in lastBlockMap) {
            block = lastBlockMap[blockKey];
            elementsToRemove = getBlockNodes(block.clone);
            $animate.leave(elementsToRemove);
            if (elementsToRemove[0].parentNode) {
              // if the element was not removed yet because of pending animation, mark it as deleted
              // so that we can ignore it later
              for (index = 0, length = elementsToRemove.length; index < length; index++) {
                elementsToRemove[index][NG_REMOVED] = true;
              }
            }
            block.scope.$destroy();
          }

          // we are not using forEach for perf reasons (trying to avoid #call)
          for (index = 0; index < collectionLength; index++) {
            key = (collection === collectionKeys) ? index : collectionKeys[index];
            value = collection[key];
            block = nextBlockOrder[index];

            if (block.scope) {
              // if we have already seen this object, then we need to reuse the
              // associated scope/element

              nextNode = previousNode;

              // skip nodes that are already pending removal via leave animation
              do {
                nextNode = nextNode.nextSibling;
              } while (nextNode && nextNode[NG_REMOVED]);

              if (getBlockStart(block) != nextNode) {
                // existing item which got moved
                $animate.move(getBlockNodes(block.clone), null, jqLite(previousNode));
              }
              previousNode = getBlockEnd(block);
              updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
            } else {
              // new item which we don't know about
              $transclude(function ngRepeatTransclude(clone, scope) {
                block.scope = scope;
                // http://jsperf.com/clone-vs-createcomment
                var endNode = ngRepeatEndComment.cloneNode(false);
                clone[clone.length++] = endNode;

                // TODO(perf): support naked previousNode in `enter` to avoid creation of jqLite wrapper?
                $animate.enter(clone, null, jqLite(previousNode));
                previousNode = endNode;
                // Note: We only need the first/last node of the cloned nodes.
                // However, we need to keep the reference to the jqlite wrapper as it might be changed later
                // by a directive with templateUrl when its template arrives.
                block.clone = clone;
                nextBlockMap[block.id] = block;
                updateScope(block.scope, index, valueIdentifier, value, keyIdentifier, key, collectionLength);
              });
            }
          }
          lastBlockMap = nextBlockMap;
        });
      };
    }
  };
}];

var NG_HIDE_CLASS = 'ng-hide';
var NG_HIDE_IN_PROGRESS_CLASS = 'ng-hide-animate';
/**
 * @ngdoc directive
 * @name ngShow
 *
 * @description
 * The `ngShow` directive shows or hides the given HTML element based on the expression
 * provided to the `ngShow` attribute. The element is shown or hidden by removing or adding
 * the `.ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is visible) -->
 * <div ng-show="myValue"></div>
 *
 * <!-- when $scope.myValue is falsy (element is hidden) -->
 * <div ng-show="myValue" class="ng-hide"></div>
 * ```
 *
 * When the `ngShow` expression evaluates to a falsy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When truthy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class CSS. Note that the selector that needs to be used is actually `.ng-hide:not(.ng-hide-animate)` to cope
 * with extra animation classes that can be added.
 *
 * ```css
 * .ng-hide:not(.ng-hide-animate) {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngShow`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass except that
 * you must also include the !important flag to override the display property
 * so that you can perform an animation when the element is hidden during the time of the animation.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   /&#42; this is required as of 1.3x to properly
 *      apply all styling in a show/hide animation &#42;/
 *   transition: 0s linear all;
 * }
 *
 * .my-element.ng-hide-add-active,
 * .my-element.ng-hide-remove-active {
 *   /&#42; the transition is defined in the active class &#42;/
 *   transition: 1s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * addClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a truthy value and the just before contents are set to visible
 * removeClass: `.ng-hide` - happens after the `ngShow` expression evaluates to a non truthy value and just before the contents are set to hidden
 *
 * @element ANY
 * @param {expression} ngShow If the {@link guide/expression expression} is truthy
 *     then the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-show" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-show" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-show {
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-show.ng-hide-add.ng-hide-add-active,
      .animate-show.ng-hide-remove.ng-hide-remove-active {
        -webkit-transition: all linear 0.5s;
        transition: all linear 0.5s;
      }

      .animate-show.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngShowDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngShow, function ngShowWatchAction(value) {
        // we're adding a temporary, animation-specific class for ng-hide since this way
        // we can control when the element is actually displayed on screen without having
        // to have a global/greedy CSS selector that breaks when other animations are run.
        // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845
        $animate[value ? 'removeClass' : 'addClass'](element, NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];


/**
 * @ngdoc directive
 * @name ngHide
 *
 * @description
 * The `ngHide` directive shows or hides the given HTML element based on the expression
 * provided to the `ngHide` attribute. The element is shown or hidden by removing or adding
 * the `ng-hide` CSS class onto the element. The `.ng-hide` CSS class is predefined
 * in AngularJS and sets the display style to none (using an !important flag).
 * For CSP mode please add `angular-csp.css` to your html file (see {@link ng.directive:ngCsp ngCsp}).
 *
 * ```html
 * <!-- when $scope.myValue is truthy (element is hidden) -->
 * <div ng-hide="myValue" class="ng-hide"></div>
 *
 * <!-- when $scope.myValue is falsy (element is visible) -->
 * <div ng-hide="myValue"></div>
 * ```
 *
 * When the `ngHide` expression evaluates to a truthy value then the `.ng-hide` CSS class is added to the class
 * attribute on the element causing it to become hidden. When falsy, the `.ng-hide` CSS class is removed
 * from the element causing the element not to appear hidden.
 *
 * ## Why is !important used?
 *
 * You may be wondering why !important is used for the `.ng-hide` CSS class. This is because the `.ng-hide` selector
 * can be easily overridden by heavier selectors. For example, something as simple
 * as changing the display style on a HTML list item would make hidden elements appear visible.
 * This also becomes a bigger issue when dealing with CSS frameworks.
 *
 * By using !important, the show and hide behavior will work as expected despite any clash between CSS selector
 * specificity (when !important isn't used with any conflicting styles). If a developer chooses to override the
 * styling to change how to hide an element then it is just a matter of using !important in their own CSS code.
 *
 * ### Overriding `.ng-hide`
 *
 * By default, the `.ng-hide` class will style the element with `display: none!important`. If you wish to change
 * the hide behavior with ngShow/ngHide then this can be achieved by restating the styles for the `.ng-hide`
 * class in CSS:
 *
 * ```css
 * .ng-hide {
 *   /&#42; this is just another form of hiding an element &#42;/
 *   display: block!important;
 *   position: absolute;
 *   top: -9999px;
 *   left: -9999px;
 * }
 * ```
 *
 * By default you don't need to override in CSS anything and the animations will work around the display style.
 *
 * ## A note about animations with `ngHide`
 *
 * Animations in ngShow/ngHide work with the show and hide events that are triggered when the directive expression
 * is true and false. This system works like the animation system present with ngClass, except that the `.ng-hide`
 * CSS class is added and removed for you instead of your own CSS class.
 *
 * ```css
 * //
 * //a working example can be found at the bottom of this page
 * //
 * .my-element.ng-hide-add, .my-element.ng-hide-remove {
 *   transition: 0.5s linear all;
 * }
 *
 * .my-element.ng-hide-add { ... }
 * .my-element.ng-hide-add.ng-hide-add-active { ... }
 * .my-element.ng-hide-remove { ... }
 * .my-element.ng-hide-remove.ng-hide-remove-active { ... }
 * ```
 *
 * Keep in mind that, as of AngularJS version 1.3.0-beta.11, there is no need to change the display
 * property to block during animation states--ngAnimate will handle the style toggling automatically for you.
 *
 * @animations
 * removeClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a truthy value and just before the contents are set to hidden
 * addClass: `.ng-hide` - happens after the `ngHide` expression evaluates to a non truthy value and just before the contents are set to visible
 *
 * @element ANY
 * @param {expression} ngHide If the {@link guide/expression expression} is truthy then
 *     the element is shown or hidden respectively.
 *
 * @example
  <example module="ngAnimate" deps="angular-animate.js" animations="true">
    <file name="index.html">
      Click me: <input type="checkbox" ng-model="checked"><br/>
      <div>
        Show:
        <div class="check-element animate-hide" ng-show="checked">
          <span class="glyphicon glyphicon-thumbs-up"></span> I show up when your checkbox is checked.
        </div>
      </div>
      <div>
        Hide:
        <div class="check-element animate-hide" ng-hide="checked">
          <span class="glyphicon glyphicon-thumbs-down"></span> I hide when your checkbox is checked.
        </div>
      </div>
    </file>
    <file name="glyphicons.css">
      @import url(../../components/bootstrap-3.1.1/css/bootstrap.css);
    </file>
    <file name="animations.css">
      .animate-hide {
        -webkit-transition: all linear 0.5s;
        transition: all linear 0.5s;
        line-height: 20px;
        opacity: 1;
        padding: 10px;
        border: 1px solid black;
        background: white;
      }

      .animate-hide.ng-hide {
        line-height: 0;
        opacity: 0;
        padding: 0 10px;
      }

      .check-element {
        padding: 10px;
        border: 1px solid black;
        background: white;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var thumbsUp = element(by.css('span.glyphicon-thumbs-up'));
      var thumbsDown = element(by.css('span.glyphicon-thumbs-down'));

      it('should check ng-show / ng-hide', function() {
        expect(thumbsUp.isDisplayed()).toBeFalsy();
        expect(thumbsDown.isDisplayed()).toBeTruthy();

        element(by.model('checked')).click();

        expect(thumbsUp.isDisplayed()).toBeTruthy();
        expect(thumbsDown.isDisplayed()).toBeFalsy();
      });
    </file>
  </example>
 */
var ngHideDirective = ['$animate', function($animate) {
  return {
    restrict: 'A',
    multiElement: true,
    link: function(scope, element, attr) {
      scope.$watch(attr.ngHide, function ngHideWatchAction(value) {
        // The comment inside of the ngShowDirective explains why we add and
        // remove a temporary class for the show/hide animation
        $animate[value ? 'addClass' : 'removeClass'](element,NG_HIDE_CLASS, {
          tempClasses: NG_HIDE_IN_PROGRESS_CLASS
        });
      });
    }
  };
}];

/**
 * @ngdoc directive
 * @name ngStyle
 * @restrict AC
 *
 * @description
 * The `ngStyle` directive allows you to set CSS style on an HTML element conditionally.
 *
 * @element ANY
 * @param {expression} ngStyle
 *
 * {@link guide/expression Expression} which evals to an
 * object whose keys are CSS style names and values are corresponding values for those CSS
 * keys.
 *
 * Since some CSS style names are not valid keys for an object, they must be quoted.
 * See the 'background-color' style in the example below.
 *
 * @example
   <example>
     <file name="index.html">
        <input type="button" value="set color" ng-click="myStyle={color:'red'}">
        <input type="button" value="set background" ng-click="myStyle={'background-color':'blue'}">
        <input type="button" value="clear" ng-click="myStyle={}">
        <br/>
        <span ng-style="myStyle">Sample Text</span>
        <pre>myStyle={{myStyle}}</pre>
     </file>
     <file name="style.css">
       span {
         color: black;
       }
     </file>
     <file name="protractor.js" type="protractor">
       var colorSpan = element(by.css('span'));

       it('should check ng-style', function() {
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
         element(by.css('input[value=\'set color\']')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(255, 0, 0, 1)');
         element(by.css('input[value=clear]')).click();
         expect(colorSpan.getCssValue('color')).toBe('rgba(0, 0, 0, 1)');
       });
     </file>
   </example>
 */
var ngStyleDirective = ngDirective(function(scope, element, attr) {
  scope.$watch(attr.ngStyle, function ngStyleWatchAction(newStyles, oldStyles) {
    if (oldStyles && (newStyles !== oldStyles)) {
      forEach(oldStyles, function(val, style) { element.css(style, '');});
    }
    if (newStyles) element.css(newStyles);
  }, true);
});

/**
 * @ngdoc directive
 * @name ngSwitch
 * @restrict EA
 *
 * @description
 * The `ngSwitch` directive is used to conditionally swap DOM structure on your template based on a scope expression.
 * Elements within `ngSwitch` but without `ngSwitchWhen` or `ngSwitchDefault` directives will be preserved at the location
 * as specified in the template.
 *
 * The directive itself works similar to ngInclude, however, instead of downloading template code (or loading it
 * from the template cache), `ngSwitch` simply chooses one of the nested elements and makes it visible based on which element
 * matches the value obtained from the evaluated expression. In other words, you define a container element
 * (where you place the directive), place an expression on the **`on="..."` attribute**
 * (or the **`ng-switch="..."` attribute**), define any inner elements inside of the directive and place
 * a when attribute per element. The when attribute is used to inform ngSwitch which element to display when the on
 * expression is evaluated. If a matching expression is not found via a when attribute then an element with the default
 * attribute is displayed.
 *
 * <div class="alert alert-info">
 * Be aware that the attribute values to match against cannot be expressions. They are interpreted
 * as literal string values to match against.
 * For example, **`ng-switch-when="someVal"`** will match against the string `"someVal"` not against the
 * value of the expression `$scope.someVal`.
 * </div>

 * @animations
 * enter - happens after the ngSwitch contents change and the matched child element is placed inside the container
 * leave - happens just after the ngSwitch contents change and just before the former contents are removed from the DOM
 *
 * @usage
 *
 * ```
 * <ANY ng-switch="expression">
 *   <ANY ng-switch-when="matchValue1">...</ANY>
 *   <ANY ng-switch-when="matchValue2">...</ANY>
 *   <ANY ng-switch-default>...</ANY>
 * </ANY>
 * ```
 *
 *
 * @scope
 * @priority 1200
 * @param {*} ngSwitch|on expression to match against <code>ng-switch-when</code>.
 * On child elements add:
 *
 * * `ngSwitchWhen`: the case statement to match against. If match then this
 *   case will be displayed. If the same match appears multiple times, all the
 *   elements will be displayed.
 * * `ngSwitchDefault`: the default case when no other case match. If there
 *   are multiple default cases, all of them will be displayed when no other
 *   case match.
 *
 *
 * @example
  <example module="switchExample" deps="angular-animate.js" animations="true">
    <file name="index.html">
      <div ng-controller="ExampleController">
        <select ng-model="selection" ng-options="item for item in items">
        </select>
        <code>selection={{selection}}</code>
        <hr/>
        <div class="animate-switch-container"
          ng-switch on="selection">
            <div class="animate-switch" ng-switch-when="settings">Settings Div</div>
            <div class="animate-switch" ng-switch-when="home">Home Span</div>
            <div class="animate-switch" ng-switch-default>default</div>
        </div>
      </div>
    </file>
    <file name="script.js">
      angular.module('switchExample', ['ngAnimate'])
        .controller('ExampleController', ['$scope', function($scope) {
          $scope.items = ['settings', 'home', 'other'];
          $scope.selection = $scope.items[0];
        }]);
    </file>
    <file name="animations.css">
      .animate-switch-container {
        position:relative;
        background:white;
        border:1px solid black;
        height:40px;
        overflow:hidden;
      }

      .animate-switch {
        padding:10px;
      }

      .animate-switch.ng-animate {
        -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;
        transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 0.5s;

        position:absolute;
        top:0;
        left:0;
        right:0;
        bottom:0;
      }

      .animate-switch.ng-leave.ng-leave-active,
      .animate-switch.ng-enter {
        top:-50px;
      }
      .animate-switch.ng-leave,
      .animate-switch.ng-enter.ng-enter-active {
        top:0;
      }
    </file>
    <file name="protractor.js" type="protractor">
      var switchElem = element(by.css('[ng-switch]'));
      var select = element(by.model('selection'));

      it('should start in settings', function() {
        expect(switchElem.getText()).toMatch(/Settings Div/);
      });
      it('should change to home', function() {
        select.all(by.css('option')).get(1).click();
        expect(switchElem.getText()).toMatch(/Home Span/);
      });
      it('should select default', function() {
        select.all(by.css('option')).get(2).click();
        expect(switchElem.getText()).toMatch(/default/);
      });
    </file>
  </example>
 */
var ngSwitchDirective = ['$animate', function($animate) {
  return {
    restrict: 'EA',
    require: 'ngSwitch',

    // asks for $scope to fool the BC controller module
    controller: ['$scope', function ngSwitchController() {
     this.cases = {};
    }],
    link: function(scope, element, attr, ngSwitchController) {
      var watchExpr = attr.ngSwitch || attr.on,
          selectedTranscludes = [],
          selectedElements = [],
          previousLeaveAnimations = [],
          selectedScopes = [];

      var spliceFactory = function(array, index) {
          return function() { array.splice(index, 1); };
      };

      scope.$watch(watchExpr, function ngSwitchWatchAction(value) {
        var i, ii;
        for (i = 0, ii = previousLeaveAnimations.length; i < ii; ++i) {
          $animate.cancel(previousLeaveAnimations[i]);
        }
        previousLeaveAnimations.length = 0;

        for (i = 0, ii = selectedScopes.length; i < ii; ++i) {
          var selected = getBlockNodes(selectedElements[i].clone);
          selectedScopes[i].$destroy();
          var promise = previousLeaveAnimations[i] = $animate.leave(selected);
          promise.then(spliceFactory(previousLeaveAnimations, i));
        }

        selectedElements.length = 0;
        selectedScopes.length = 0;

        if ((selectedTranscludes = ngSwitchController.cases['!' + value] || ngSwitchController.cases['?'])) {
          forEach(selectedTranscludes, function(selectedTransclude) {
            selectedTransclude.transclude(function(caseElement, selectedScope) {
              selectedScopes.push(selectedScope);
              var anchor = selectedTransclude.element;
              caseElement[caseElement.length++] = document.createComment(' end ngSwitchWhen: ');
              var block = { clone: caseElement };

              selectedElements.push(block);
              $animate.enter(caseElement, anchor.parent(), anchor);
            });
          });
        }
      });
    }
  };
}];

var ngSwitchWhenDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attrs, ctrl, $transclude) {
    ctrl.cases['!' + attrs.ngSwitchWhen] = (ctrl.cases['!' + attrs.ngSwitchWhen] || []);
    ctrl.cases['!' + attrs.ngSwitchWhen].push({ transclude: $transclude, element: element });
  }
});

var ngSwitchDefaultDirective = ngDirective({
  transclude: 'element',
  priority: 1200,
  require: '^ngSwitch',
  multiElement: true,
  link: function(scope, element, attr, ctrl, $transclude) {
    ctrl.cases['?'] = (ctrl.cases['?'] || []);
    ctrl.cases['?'].push({ transclude: $transclude, element: element });
   }
});

/**
 * @ngdoc directive
 * @name ngTransclude
 * @restrict EAC
 *
 * @description
 * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.
 *
 * Any existing content of the element that this directive is placed on will be removed before the transcluded content is inserted.
 *
 * @element ANY
 *
 * @example
   <example module="transcludeExample">
     <file name="index.html">
       <script>
         angular.module('transcludeExample', [])
          .directive('pane', function(){
             return {
               restrict: 'E',
               transclude: true,
               scope: { title:'@' },
               template: '<div style="border: 1px solid black;">' +
                           '<div style="background-color: gray">{{title}}</div>' +
                           '<ng-transclude></ng-transclude>' +
                         '</div>'
             };
         })
         .controller('ExampleController', ['$scope', function($scope) {
           $scope.title = 'Lorem Ipsum';
           $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
         }]);
       </script>
       <div ng-controller="ExampleController">
         <input ng-model="title"> <br/>
         <textarea ng-model="text"></textarea> <br/>
         <pane title="{{title}}">{{text}}</pane>
       </div>
     </file>
     <file name="protractor.js" type="protractor">
        it('should have transcluded', function() {
          var titleElement = element(by.model('title'));
          titleElement.clear();
          titleElement.sendKeys('TITLE');
          var textElement = element(by.model('text'));
          textElement.clear();
          textElement.sendKeys('TEXT');
          expect(element(by.binding('title')).getText()).toEqual('TITLE');
          expect(element(by.binding('text')).getText()).toEqual('TEXT');
        });
     </file>
   </example>
 *
 */
var ngTranscludeDirective = ngDirective({
  restrict: 'EAC',
  link: function($scope, $element, $attrs, controller, $transclude) {
    if (!$transclude) {
      throw minErr('ngTransclude')('orphan',
       'Illegal use of ngTransclude directive in the template! ' +
       'No parent directive that requires a transclusion found. ' +
       'Element: {0}',
       startingTag($element));
    }

    $transclude(function(clone) {
      $element.empty();
      $element.append(clone);
    });
  }
});

/**
 * @ngdoc directive
 * @name script
 * @restrict E
 *
 * @description
 * Load the content of a `<script>` element into {@link ng.$templateCache `$templateCache`}, so that the
 * template can be used by {@link ng.directive:ngInclude `ngInclude`},
 * {@link ngRoute.directive:ngView `ngView`}, or {@link guide/directive directives}. The type of the
 * `<script>` element must be specified as `text/ng-template`, and a cache name for the template must be
 * assigned through the element's `id`, which can then be used as a directive's `templateUrl`.
 *
 * @param {string} type Must be set to `'text/ng-template'`.
 * @param {string} id Cache name of the template.
 *
 * @example
  <example>
    <file name="index.html">
      <script type="text/ng-template" id="/tpl.html">
        Content of the template.
      </script>

      <a ng-click="currentTpl='/tpl.html'" id="tpl-link">Load inlined template</a>
      <div id="tpl-content" ng-include src="currentTpl"></div>
    </file>
    <file name="protractor.js" type="protractor">
      it('should load template defined inside script tag', function() {
        element(by.css('#tpl-link')).click();
        expect(element(by.css('#tpl-content')).getText()).toMatch(/Content of the template/);
      });
    </file>
  </example>
 */
var scriptDirective = ['$templateCache', function($templateCache) {
  return {
    restrict: 'E',
    terminal: true,
    compile: function(element, attr) {
      if (attr.type == 'text/ng-template') {
        var templateUrl = attr.id,
            text = element[0].text;

        $templateCache.put(templateUrl, text);
      }
    }
  };
}];

var ngOptionsMinErr = minErr('ngOptions');
/**
 * @ngdoc directive
 * @name select
 * @restrict E
 *
 * @description
 * HTML `SELECT` element with angular data-binding.
 *
 * # `ngOptions`
 *
 * The `ngOptions` attribute can be used to dynamically generate a list of `<option>`
 * elements for the `<select>` element using the array or object obtained by evaluating the
 * `ngOptions` comprehension expression.
 *
 * In many cases, `ngRepeat` can be used on `<option>` elements instead of `ngOptions` to achieve a
 * similar result. However, `ngOptions` provides some benefits such as reducing memory and
 * increasing speed by not creating a new scope for each repeated instance, as well as providing
 * more flexibility in how the `<select>`'s model is assigned via the `select` **`as`** part of the
 * comprehension expression. `ngOptions` should be used when the `<select>` model needs to be bound
 *  to a non-string value. This is because an option element can only be bound to string values at
 * present.
 *
 * When an item in the `<select>` menu is selected, the array element or object property
 * represented by the selected option will be bound to the model identified by the `ngModel`
 * directive.
 *
 * Optionally, a single hard-coded `<option>` element, with the value set to an empty string, can
 * be nested into the `<select>` element. This element will then represent the `null` or "not selected"
 * option. See example below for demonstration.
 *
 * <div class="alert alert-warning">
 * **Note:** `ngModel` compares by reference, not value. This is important when binding to an
 * array of objects. See an example [in this jsfiddle](http://jsfiddle.net/qWzTb/).
 * </div>
 *
 * ## `select` **`as`**
 *
 * Using `select` **`as`** will bind the result of the `select` expression to the model, but
 * the value of the `<select>` and `<option>` html elements will be either the index (for array data sources)
 * or property name (for object data sources) of the value within the collection. If a **`track by`** expression
 * is used, the result of that expression will be set as the value of the `option` and `select` elements.
 *
 *
 * ### `select` **`as`** and **`track by`**
 *
 * <div class="alert alert-warning">
 * Do not use `select` **`as`** and **`track by`** in the same expression. They are not designed to work together.
 * </div>
 *
 * Consider the following example:
 *
 * ```html
 * <select ng-options="item.subItem as item.label for item in values track by item.id" ng-model="selected">
 * ```
 *
 * ```js
 * $scope.values = [{
 *   id: 1,
 *   label: 'aLabel',
 *   subItem: { name: 'aSubItem' }
 * }, {
 *   id: 2,
 *   label: 'bLabel',
 *   subItem: { name: 'bSubItem' }
 * }];
 *
 * $scope.selected = { name: 'aSubItem' };
 * ```
 *
 * With the purpose of preserving the selection, the **`track by`** expression is always applied to the element
 * of the data source (to `item` in this example). To calculate whether an element is selected, we do the
 * following:
 *
 * 1. Apply **`track by`** to the elements in the array. In the example: `[1, 2]`
 * 2. Apply **`track by`** to the already selected value in `ngModel`.
 *    In the example: this is not possible as **`track by`** refers to `item.id`, but the selected
 *    value from `ngModel` is `{name: 'aSubItem'}`, so the **`track by`** expression is applied to
 *    a wrong object, the selected element can't be found, `<select>` is always reset to the "not
 *    selected" option.
 *
 *
 * @param {string} ngModel Assignable angular expression to data-bind to.
 * @param {string=} name Property name of the form under which the control is published.
 * @param {string=} required The control is considered valid only if value is entered.
 * @param {string=} ngRequired Adds `required` attribute and `required` validation constraint to
 *    the element when the ngRequired expression evaluates to true. Use `ngRequired` instead of
 *    `required` when you want to data-bind to the `required` attribute.
 * @param {comprehension_expression=} ngOptions in one of the following forms:
 *
 *   * for array data sources:
 *     * `label` **`for`** `value` **`in`** `array`
 *     * `select` **`as`** `label` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array`
 *     * `label` **`group by`** `group` **`for`** `value` **`in`** `array` **`track by`** `trackexpr`
 *     * `label` **`for`** `value` **`in`** `array` | orderBy:`orderexpr` **`track by`** `trackexpr`
 *        (for including a filter with `track by`)
 *   * for object data sources:
 *     * `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`for (`**`key` **`,`** `value`**`) in`** `object`
 *     * `label` **`group by`** `group` **`for (`**`key`**`,`** `value`**`) in`** `object`
 *     * `select` **`as`** `label` **`group by`** `group`
 *         **`for` `(`**`key`**`,`** `value`**`) in`** `object`
 *
 * Where:
 *
 *   * `array` / `object`: an expression which evaluates to an array / object to iterate over.
 *   * `value`: local variable which will refer to each item in the `array` or each property value
 *      of `object` during iteration.
 *   * `key`: local variable which will refer to a property name in `object` during iteration.
 *   * `label`: The result of this expression will be the label for `<option>` element. The
 *     `expression` will most likely refer to the `value` variable (e.g. `value.propertyName`).
 *   * `select`: The result of this expression will be bound to the model of the parent `<select>`
 *      element. If not specified, `select` expression will default to `value`.
 *   * `group`: The result of this expression will be used to group options using the `<optgroup>`
 *      DOM element.
 *   * `trackexpr`: Used when working with an array of objects. The result of this expression will be
 *      used to identify the objects in the array. The `trackexpr` will most likely refer to the
 *     `value` variable (e.g. `value.propertyName`). With this the selection is preserved
 *      even when the options are recreated (e.g. reloaded from the server).
 *
 * @example
    <example module="selectExample">
      <file name="index.html">
        <script>
        angular.module('selectExample', [])
          .controller('ExampleController', ['$scope', function($scope) {
            $scope.colors = [
              {name:'black', shade:'dark'},
              {name:'white', shade:'light'},
              {name:'red', shade:'dark'},
              {name:'blue', shade:'dark'},
              {name:'yellow', shade:'light'}
            ];
            $scope.myColor = $scope.colors[2]; // red
          }]);
        </script>
        <div ng-controller="ExampleController">
          <ul>
            <li ng-repeat="color in colors">
              Name: <input ng-model="color.name">
              [<a href ng-click="colors.splice($index, 1)">X</a>]
            </li>
            <li>
              [<a href ng-click="colors.push({})">add</a>]
            </li>
          </ul>
          <hr/>
          Color (null not allowed):
          <select ng-model="myColor" ng-options="color.name for color in colors"></select><br>

          Color (null allowed):
          <span  class="nullable">
            <select ng-model="myColor" ng-options="color.name for color in colors">
              <option value="">-- choose color --</option>
            </select>
          </span><br/>

          Color grouped by shade:
          <select ng-model="myColor" ng-options="color.name group by color.shade for color in colors">
          </select><br/>


          Select <a href ng-click="myColor = { name:'not in list', shade: 'other' }">bogus</a>.<br>
          <hr/>
          Currently selected: {{ {selected_color:myColor} }}
          <div style="border:solid 1px black; height:20px"
               ng-style="{'background-color':myColor.name}">
          </div>
        </div>
      </file>
      <file name="protractor.js" type="protractor">
         it('should check ng-options', function() {
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('red');
           element.all(by.model('myColor')).first().click();
           element.all(by.css('select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('black');
           element(by.css('.nullable select[ng-model="myColor"]')).click();
           element.all(by.css('.nullable select[ng-model="myColor"] option')).first().click();
           expect(element(by.binding('{selected_color:myColor}')).getText()).toMatch('null');
         });
      </file>
    </example>
 */

var ngOptionsDirective = valueFn({
  restrict: 'A',
  terminal: true
});

// jshint maxlen: false
var selectDirective = ['$compile', '$parse', function($compile,   $parse) {
                         //000011111111110000000000022222222220000000000000000000003333333333000000000000004444444444444440000000005555555555555550000000666666666666666000000000000000777777777700000000000000000008888888888
  var NG_OPTIONS_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,
      nullModelCtrl = {$setViewValue: noop};
// jshint maxlen: 100

  return {
    restrict: 'E',
    require: ['select', '?ngModel'],
    controller: ['$element', '$scope', '$attrs', function($element, $scope, $attrs) {
      var self = this,
          optionsMap = {},
          ngModelCtrl = nullModelCtrl,
          nullOption,
          unknownOption;


      self.databound = $attrs.ngModel;


      self.init = function(ngModelCtrl_, nullOption_, unknownOption_) {
        ngModelCtrl = ngModelCtrl_;
        nullOption = nullOption_;
        unknownOption = unknownOption_;
      };


      self.addOption = function(value, element) {
        assertNotHasOwnProperty(value, '"option value"');
        optionsMap[value] = true;

        if (ngModelCtrl.$viewValue == value) {
          $element.val(value);
          if (unknownOption.parent()) unknownOption.remove();
        }
        // Workaround for https://code.google.com/p/chromium/issues/detail?id=381459
        // Adding an <option selected="selected"> element to a <select required="required"> should
        // automatically select the new element
        if (element && element[0].hasAttribute('selected')) {
          element[0].selected = true;
        }
      };


      self.removeOption = function(value) {
        if (this.hasOption(value)) {
          delete optionsMap[value];
          if (ngModelCtrl.$viewValue === value) {
            this.renderUnknownOption(value);
          }
        }
      };


      self.renderUnknownOption = function(val) {
        var unknownVal = '? ' + hashKey(val) + ' ?';
        unknownOption.val(unknownVal);
        $element.prepend(unknownOption);
        $element.val(unknownVal);
        unknownOption.prop('selected', true); // needed for IE
      };


      self.hasOption = function(value) {
        return optionsMap.hasOwnProperty(value);
      };

      $scope.$on('$destroy', function() {
        // disable unknown option so that we don't do work when the whole select is being destroyed
        self.renderUnknownOption = noop;
      });
    }],

    link: function(scope, element, attr, ctrls) {
      // if ngModel is not defined, we don't need to do anything
      if (!ctrls[1]) return;

      var selectCtrl = ctrls[0],
          ngModelCtrl = ctrls[1],
          multiple = attr.multiple,
          optionsExp = attr.ngOptions,
          nullOption = false, // if false, user will not be able to select it (used by ngOptions)
          emptyOption,
          renderScheduled = false,
          // we can't just jqLite('<option>') since jqLite is not smart enough
          // to create it in <select> and IE barfs otherwise.
          optionTemplate = jqLite(document.createElement('option')),
          optGroupTemplate =jqLite(document.createElement('optgroup')),
          unknownOption = optionTemplate.clone();

      // find "null" option
      for (var i = 0, children = element.children(), ii = children.length; i < ii; i++) {
        if (children[i].value === '') {
          emptyOption = nullOption = children.eq(i);
          break;
        }
      }

      selectCtrl.init(ngModelCtrl, nullOption, unknownOption);

      // required validator
      if (multiple) {
        ngModelCtrl.$isEmpty = function(value) {
          return !value || value.length === 0;
        };
      }

      if (optionsExp) setupAsOptions(scope, element, ngModelCtrl);
      else if (multiple) setupAsMultiple(scope, element, ngModelCtrl);
      else setupAsSingle(scope, element, ngModelCtrl, selectCtrl);


      ////////////////////////////



      function setupAsSingle(scope, selectElement, ngModelCtrl, selectCtrl) {
        ngModelCtrl.$render = function() {
          var viewValue = ngModelCtrl.$viewValue;

          if (selectCtrl.hasOption(viewValue)) {
            if (unknownOption.parent()) unknownOption.remove();
            selectElement.val(viewValue);
            if (viewValue === '') emptyOption.prop('selected', true); // to make IE9 happy
          } else {
            if (viewValue == null && emptyOption) {
              selectElement.val('');
            } else {
              selectCtrl.renderUnknownOption(viewValue);
            }
          }
        };

        selectElement.on('change', function() {
          scope.$apply(function() {
            if (unknownOption.parent()) unknownOption.remove();
            ngModelCtrl.$setViewValue(selectElement.val());
          });
        });
      }

      function setupAsMultiple(scope, selectElement, ctrl) {
        var lastView;
        ctrl.$render = function() {
          var items = new HashMap(ctrl.$viewValue);
          forEach(selectElement.find('option'), function(option) {
            option.selected = isDefined(items.get(option.value));
          });
        };

        // we have to do it on each watch since ngModel watches reference, but
        // we need to work of an array, so we need to see if anything was inserted/removed
        scope.$watch(function selectMultipleWatch() {
          if (!equals(lastView, ctrl.$viewValue)) {
            lastView = shallowCopy(ctrl.$viewValue);
            ctrl.$render();
          }
        });

        selectElement.on('change', function() {
          scope.$apply(function() {
            var array = [];
            forEach(selectElement.find('option'), function(option) {
              if (option.selected) {
                array.push(option.value);
              }
            });
            ctrl.$setViewValue(array);
          });
        });
      }

      function setupAsOptions(scope, selectElement, ctrl) {
        var match;

        if (!(match = optionsExp.match(NG_OPTIONS_REGEXP))) {
          throw ngOptionsMinErr('iexp',
            "Expected expression in form of " +
            "'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'" +
            " but got '{0}'. Element: {1}",
            optionsExp, startingTag(selectElement));
        }

        var displayFn = $parse(match[2] || match[1]),
            valueName = match[4] || match[6],
            selectAs = / as /.test(match[0]) && match[1],
            selectAsFn = selectAs ? $parse(selectAs) : null,
            keyName = match[5],
            groupByFn = $parse(match[3] || ''),
            valueFn = $parse(match[2] ? match[1] : valueName),
            valuesFn = $parse(match[7]),
            track = match[8],
            trackFn = track ? $parse(match[8]) : null,
            trackKeysCache = {},
            // This is an array of array of existing option groups in DOM.
            // We try to reuse these if possible
            // - optionGroupsCache[0] is the options with no option group
            // - optionGroupsCache[?][0] is the parent: either the SELECT or OPTGROUP element
            optionGroupsCache = [[{element: selectElement, label:''}]],
            //re-usable object to represent option's locals
            locals = {};

        if (nullOption) {
          // compile the element since there might be bindings in it
          $compile(nullOption)(scope);

          // remove the class, which is added automatically because we recompile the element and it
          // becomes the compilation root
          nullOption.removeClass('ng-scope');

          // we need to remove it before calling selectElement.empty() because otherwise IE will
          // remove the label from the element. wtf?
          nullOption.remove();
        }

        // clear contents, we'll add what's needed based on the model
        selectElement.empty();

        selectElement.on('change', selectionChanged);

        ctrl.$render = render;

        scope.$watchCollection(valuesFn, scheduleRendering);
        scope.$watchCollection(getLabels, scheduleRendering);

        if (multiple) {
          scope.$watchCollection(function() { return ctrl.$modelValue; }, scheduleRendering);
        }

        // ------------------------------------------------------------------ //

        function callExpression(exprFn, key, value) {
          locals[valueName] = value;
          if (keyName) locals[keyName] = key;
          return exprFn(scope, locals);
        }

        function selectionChanged() {
          scope.$apply(function() {
            var collection = valuesFn(scope) || [];
            var viewValue;
            if (multiple) {
              viewValue = [];
              forEach(selectElement.val(), function(selectedKey) {
                  selectedKey = trackFn ? trackKeysCache[selectedKey] : selectedKey;
                viewValue.push(getViewValue(selectedKey, collection[selectedKey]));
              });
            } else {
              var selectedKey = trackFn ? trackKeysCache[selectElement.val()] : selectElement.val();
              viewValue = getViewValue(selectedKey, collection[selectedKey]);
            }
            ctrl.$setViewValue(viewValue);
            render();
          });
        }

        function getViewValue(key, value) {
          if (key === '?') {
            return undefined;
          } else if (key === '') {
            return null;
          } else {
            var viewValueFn = selectAsFn ? selectAsFn : valueFn;
            return callExpression(viewValueFn, key, value);
          }
        }

        function getLabels() {
          var values = valuesFn(scope);
          var toDisplay;
          if (values && isArray(values)) {
            toDisplay = new Array(values.length);
            for (var i = 0, ii = values.length; i < ii; i++) {
              toDisplay[i] = callExpression(displayFn, i, values[i]);
            }
            return toDisplay;
          } else if (values) {
            // TODO: Add a test for this case
            toDisplay = {};
            for (var prop in values) {
              if (values.hasOwnProperty(prop)) {
                toDisplay[prop] = callExpression(displayFn, prop, values[prop]);
              }
            }
          }
          return toDisplay;
        }

        function createIsSelectedFn(viewValue) {
          var selectedSet;
          if (multiple) {
            if (trackFn && isArray(viewValue)) {

              selectedSet = new HashMap([]);
              for (var trackIndex = 0; trackIndex < viewValue.length; trackIndex++) {
                // tracking by key
                selectedSet.put(callExpression(trackFn, null, viewValue[trackIndex]), true);
              }
            } else {
              selectedSet = new HashMap(viewValue);
            }
          } else if (trackFn) {
            viewValue = callExpression(trackFn, null, viewValue);
          }

          return function isSelected(key, value) {
            var compareValueFn;
            if (trackFn) {
              compareValueFn = trackFn;
            } else if (selectAsFn) {
              compareValueFn = selectAsFn;
            } else {
              compareValueFn = valueFn;
            }

            if (multiple) {
              return isDefined(selectedSet.remove(callExpression(compareValueFn, key, value)));
            } else {
              return viewValue === callExpression(compareValueFn, key, value);
            }
          };
        }

        function scheduleRendering() {
          if (!renderScheduled) {
            scope.$$postDigest(render);
            renderScheduled = true;
          }
        }

        /**
         * A new labelMap is created with each render.
         * This function is called for each existing option with added=false,
         * and each new option with added=true.
         * - Labels that are passed to this method twice,
         * (once with added=true and once with added=false) will end up with a value of 0, and
         * will cause no change to happen to the corresponding option.
         * - Labels that are passed to this method only once with added=false will end up with a
         * value of -1 and will eventually be passed to selectCtrl.removeOption()
         * - Labels that are passed to this method only once with added=true will end up with a
         * value of 1 and will eventually be passed to selectCtrl.addOption()
        */
        function updateLabelMap(labelMap, label, added) {
          labelMap[label] = labelMap[label] || 0;
          labelMap[label] += (added ? 1 : -1);
        }

        function render() {
          renderScheduled = false;

          // Temporary location for the option groups before we render them
          var optionGroups = {'':[]},
              optionGroupNames = [''],
              optionGroupName,
              optionGroup,
              option,
              existingParent, existingOptions, existingOption,
              viewValue = ctrl.$viewValue,
              values = valuesFn(scope) || [],
              keys = keyName ? sortedKeys(values) : values,
              key,
              value,
              groupLength, length,
              groupIndex, index,
              labelMap = {},
              selected,
              isSelected = createIsSelectedFn(viewValue),
              anySelected = false,
              lastElement,
              element,
              label,
              optionId;

          trackKeysCache = {};

          // We now build up the list of options we need (we merge later)
          for (index = 0; length = keys.length, index < length; index++) {
            key = index;
            if (keyName) {
              key = keys[index];
              if (key.charAt(0) === '$') continue;
            }
            value = values[key];

            optionGroupName = callExpression(groupByFn, key, value) || '';
            if (!(optionGroup = optionGroups[optionGroupName])) {
              optionGroup = optionGroups[optionGroupName] = [];
              optionGroupNames.push(optionGroupName);
            }

            selected = isSelected(key, value);
            anySelected = anySelected || selected;

            label = callExpression(displayFn, key, value); // what will be seen by the user

            // doing displayFn(scope, locals) || '' overwrites zero values
            label = isDefined(label) ? label : '';
            optionId = trackFn ? trackFn(scope, locals) : (keyName ? keys[index] : index);
            if (trackFn) {
              trackKeysCache[optionId] = key;
            }

            optionGroup.push({
              // either the index into array or key from object
              id: optionId,
              label: label,
              selected: selected                   // determine if we should be selected
            });
          }
          if (!multiple) {
            if (nullOption || viewValue === null) {
              // insert null option if we have a placeholder, or the model is null
              optionGroups[''].unshift({id:'', label:'', selected:!anySelected});
            } else if (!anySelected) {
              // option could not be found, we have to insert the undefined item
              optionGroups[''].unshift({id:'?', label:'', selected:true});
            }
          }

          // Now we need to update the list of DOM nodes to match the optionGroups we computed above
          for (groupIndex = 0, groupLength = optionGroupNames.length;
               groupIndex < groupLength;
               groupIndex++) {
            // current option group name or '' if no group
            optionGroupName = optionGroupNames[groupIndex];

            // list of options for that group. (first item has the parent)
            optionGroup = optionGroups[optionGroupName];

            if (optionGroupsCache.length <= groupIndex) {
              // we need to grow the optionGroups
              existingParent = {
                element: optGroupTemplate.clone().attr('label', optionGroupName),
                label: optionGroup.label
              };
              existingOptions = [existingParent];
              optionGroupsCache.push(existingOptions);
              selectElement.append(existingParent.element);
            } else {
              existingOptions = optionGroupsCache[groupIndex];
              existingParent = existingOptions[0];  // either SELECT (no group) or OPTGROUP element

              // update the OPTGROUP label if not the same.
              if (existingParent.label != optionGroupName) {
                existingParent.element.attr('label', existingParent.label = optionGroupName);
              }
            }

            lastElement = null;  // start at the beginning
            for (index = 0, length = optionGroup.length; index < length; index++) {
              option = optionGroup[index];
              if ((existingOption = existingOptions[index + 1])) {
                // reuse elements
                lastElement = existingOption.element;
                if (existingOption.label !== option.label) {
                  updateLabelMap(labelMap, existingOption.label, false);
                  updateLabelMap(labelMap, option.label, true);
                  lastElement.text(existingOption.label = option.label);
                  lastElement.prop('label', existingOption.label);
                }
                if (existingOption.id !== option.id) {
                  lastElement.val(existingOption.id = option.id);
                }
                // lastElement.prop('selected') provided by jQuery has side-effects
                if (lastElement[0].selected !== option.selected) {
                  lastElement.prop('selected', (existingOption.selected = option.selected));
                  if (msie) {
                    // See #7692
                    // The selected item wouldn't visually update on IE without this.
                    // Tested on Win7: IE9, IE10 and IE11. Future IEs should be tested as well
                    lastElement.prop('selected', existingOption.selected);
                  }
                }
              } else {
                // grow elements

                // if it's a null option
                if (option.id === '' && nullOption) {
                  // put back the pre-compiled element
                  element = nullOption;
                } else {
                  // jQuery(v1.4.2) Bug: We should be able to chain the method calls, but
                  // in this version of jQuery on some browser the .text() returns a string
                  // rather then the element.
                  (element = optionTemplate.clone())
                      .val(option.id)
                      .prop('selected', option.selected)
                      .attr('selected', option.selected)
                      .prop('label', option.label)
                      .text(option.label);
                }

                existingOptions.push(existingOption = {
                    element: element,
                    label: option.label,
                    id: option.id,
                    selected: option.selected
                });
                updateLabelMap(labelMap, option.label, true);
                if (lastElement) {
                  lastElement.after(element);
                } else {
                  existingParent.element.append(element);
                }
                lastElement = element;
              }
            }
            // remove any excessive OPTIONs in a group
            index++; // increment since the existingOptions[0] is parent element not OPTION
            while (existingOptions.length > index) {
              option = existingOptions.pop();
              updateLabelMap(labelMap, option.label, false);
              option.element.remove();
            }
          }
          // remove any excessive OPTGROUPs from select
          while (optionGroupsCache.length > groupIndex) {
            // remove all the labels in the option group
            optionGroup = optionGroupsCache.pop();
            for (index = 1; index < optionGroup.length; ++index) {
              updateLabelMap(labelMap, optionGroup[index].label, false);
            }
            optionGroup[0].element.remove();
          }
          forEach(labelMap, function(count, label) {
            if (count > 0) {
              selectCtrl.addOption(label);
            } else if (count < 0) {
              selectCtrl.removeOption(label);
            }
          });
        }
      }
    }
  };
}];

var optionDirective = ['$interpolate', function($interpolate) {
  var nullSelectCtrl = {
    addOption: noop,
    removeOption: noop
  };

  return {
    restrict: 'E',
    priority: 100,
    compile: function(element, attr) {
      if (isUndefined(attr.value)) {
        var interpolateFn = $interpolate(element.text(), true);
        if (!interpolateFn) {
          attr.$set('value', element.text());
        }
      }

      return function(scope, element, attr) {
        var selectCtrlName = '$selectController',
            parent = element.parent(),
            selectCtrl = parent.data(selectCtrlName) ||
              parent.parent().data(selectCtrlName); // in case we are in optgroup

        if (!selectCtrl || !selectCtrl.databound) {
          selectCtrl = nullSelectCtrl;
        }

        if (interpolateFn) {
          scope.$watch(interpolateFn, function interpolateWatchAction(newVal, oldVal) {
            attr.$set('value', newVal);
            if (oldVal !== newVal) {
              selectCtrl.removeOption(oldVal);
            }
            selectCtrl.addOption(newVal, element);
          });
        } else {
          selectCtrl.addOption(attr.value, element);
        }

        element.on('$destroy', function() {
          selectCtrl.removeOption(attr.value);
        });
      };
    }
  };
}];

var styleDirective = valueFn({
  restrict: 'E',
  terminal: false
});

var requiredDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;
      attr.required = true; // force truthy in case we are on non input element

      ctrl.$validators.required = function(modelValue, viewValue) {
        return !attr.required || !ctrl.$isEmpty(viewValue);
      };

      attr.$observe('required', function() {
        ctrl.$validate();
      });
    }
  };
};


var patternDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var regexp, patternExp = attr.ngPattern || attr.pattern;
      attr.$observe('pattern', function(regex) {
        if (isString(regex) && regex.length > 0) {
          regex = new RegExp('^' + regex + '$');
        }

        if (regex && !regex.test) {
          throw minErr('ngPattern')('noregexp',
            'Expected {0} to be a RegExp but was {1}. Element: {2}', patternExp,
            regex, startingTag(elm));
        }

        regexp = regex || undefined;
        ctrl.$validate();
      });

      ctrl.$validators.pattern = function(value) {
        return ctrl.$isEmpty(value) || isUndefined(regexp) || regexp.test(value);
      };
    }
  };
};


var maxlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var maxlength = -1;
      attr.$observe('maxlength', function(value) {
        var intVal = int(value);
        maxlength = isNaN(intVal) ? -1 : intVal;
        ctrl.$validate();
      });
      ctrl.$validators.maxlength = function(modelValue, viewValue) {
        return (maxlength < 0) || ctrl.$isEmpty(viewValue) || (viewValue.length <= maxlength);
      };
    }
  };
};

var minlengthDirective = function() {
  return {
    restrict: 'A',
    require: '?ngModel',
    link: function(scope, elm, attr, ctrl) {
      if (!ctrl) return;

      var minlength = 0;
      attr.$observe('minlength', function(value) {
        minlength = int(value) || 0;
        ctrl.$validate();
      });
      ctrl.$validators.minlength = function(modelValue, viewValue) {
        return ctrl.$isEmpty(viewValue) || viewValue.length >= minlength;
      };
    }
  };
};

  if (window.angular.bootstrap) {
    //AngularJS is already loaded, so we can return here...
    console.log('WARNING: Tried to load angular more than once.');
    return;
  }

  //try to bind to jquery now so that one can write jqLite(document).ready()
  //but we will rebind on bootstrap again.
  bindJQuery();

  publishExternalAPI(angular);

  jqLite(document).ready(function() {
    angularInit(document, bootstrap);
  });

})(window, document);

!window.angular.$$csp() && window.angular.element(document).find('head').prepend('<style type="text/css">@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}</style>');
/**
 * @license AngularJS v1.3.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/* jshint maxlen: false */

/**
 * @ngdoc module
 * @name ngAnimate
 * @description
 *
 * The `ngAnimate` module provides support for JavaScript, CSS3 transition and CSS3 keyframe animation hooks within existing core and custom directives.
 *
 * <div doc-module-components="ngAnimate"></div>
 *
 * # Usage
 *
 * To see animations in action, all that is required is to define the appropriate CSS classes
 * or to register a JavaScript animation via the `myModule.animation()` function. The directives that support animation automatically are:
 * `ngRepeat`, `ngInclude`, `ngIf`, `ngSwitch`, `ngShow`, `ngHide`, `ngView` and `ngClass`. Custom directives can take advantage of animation
 * by using the `$animate` service.
 *
 * Below is a more detailed breakdown of the supported animation events provided by pre-existing ng directives:
 *
 * | Directive                                                                                                | Supported Animations                                                     |
 * |----------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------|
 * | {@link ng.directive:ngRepeat#animations ngRepeat}                                                        | enter, leave and move                                                    |
 * | {@link ngRoute.directive:ngView#animations ngView}                                                       | enter and leave                                                          |
 * | {@link ng.directive:ngInclude#animations ngInclude}                                                      | enter and leave                                                          |
 * | {@link ng.directive:ngSwitch#animations ngSwitch}                                                        | enter and leave                                                          |
 * | {@link ng.directive:ngIf#animations ngIf}                                                                | enter and leave                                                          |
 * | {@link ng.directive:ngClass#animations ngClass}                                                          | add and remove (the CSS class(es) present)                               |
 * | {@link ng.directive:ngShow#animations ngShow} & {@link ng.directive:ngHide#animations ngHide}            | add and remove (the ng-hide class value)                                 |
 * | {@link ng.directive:form#animation-hooks form} & {@link ng.directive:ngModel#animation-hooks ngModel}    | add and remove (dirty, pristine, valid, invalid & all other validations) |
 * | {@link module:ngMessages#animations ngMessages}                                                          | add and remove (ng-active & ng-inactive)                                 |
 * | {@link module:ngMessages#animations ngMessage}                                                           | enter and leave                                                          |
 *
 * You can find out more information about animations upon visiting each directive page.
 *
 * Below is an example of how to apply animations to a directive that supports animation hooks:
 *
 * ```html
 * <style type="text/css">
 * .slide.ng-enter, .slide.ng-leave {
 *   -webkit-transition:0.5s linear all;
 *   transition:0.5s linear all;
 * }
 *
 * .slide.ng-enter { }        /&#42; starting animations for enter &#42;/
 * .slide.ng-enter.ng-enter-active { } /&#42; terminal animations for enter &#42;/
 * .slide.ng-leave { }        /&#42; starting animations for leave &#42;/
 * .slide.ng-leave.ng-leave-active { } /&#42; terminal animations for leave &#42;/
 * </style>
 *
 * <!--
 * the animate service will automatically add .ng-enter and .ng-leave to the element
 * to trigger the CSS transition/animations
 * -->
 * <ANY class="slide" ng-include="..."></ANY>
 * ```
 *
 * Keep in mind that, by default, if an animation is running, any child elements cannot be animated
 * until the parent element's animation has completed. This blocking feature can be overridden by
 * placing the `ng-animate-children` attribute on a parent container tag.
 *
 * ```html
 * <div class="slide-animation" ng-if="on" ng-animate-children>
 *   <div class="fade-animation" ng-if="on">
 *     <div class="explode-animation" ng-if="on">
 *        ...
 *     </div>
 *   </div>
 * </div>
 * ```
 *
 * When the `on` expression value changes and an animation is triggered then each of the elements within
 * will all animate without the block being applied to child elements.
 *
 * ## Are animations run when the application starts?
 * No they are not. When an application is bootstrapped Angular will disable animations from running to avoid
 * a frenzy of animations from being triggered as soon as the browser has rendered the screen. For this to work,
 * Angular will wait for two digest cycles until enabling animations. From there on, any animation-triggering
 * layout changes in the application will trigger animations as normal.
 *
 * In addition, upon bootstrap, if the routing system or any directives or load remote data (via $http) then Angular
 * will automatically extend the wait time to enable animations once **all** of the outbound HTTP requests
 * are complete.
 *
 * ## CSS-defined Animations
 * The animate service will automatically apply two CSS classes to the animated element and these two CSS classes
 * are designed to contain the start and end CSS styling. Both CSS transitions and keyframe animations are supported
 * and can be used to play along with this naming structure.
 *
 * The following code below demonstrates how to perform animations using **CSS transitions** with Angular:
 *
 * ```html
 * <style type="text/css">
 * /&#42;
 *  The animate class is apart of the element and the ng-enter class
 *  is attached to the element once the enter animation event is triggered
 * &#42;/
 * .reveal-animation.ng-enter {
 *  -webkit-transition: 1s linear all; /&#42; Safari/Chrome &#42;/
 *  transition: 1s linear all; /&#42; All other modern browsers and IE10+ &#42;/
 *
 *  /&#42; The animation preparation code &#42;/
 *  opacity: 0;
 * }
 *
 * /&#42;
 *  Keep in mind that you want to combine both CSS
 *  classes together to avoid any CSS-specificity
 *  conflicts
 * &#42;/
 * .reveal-animation.ng-enter.ng-enter-active {
 *  /&#42; The animation code itself &#42;/
 *  opacity: 1;
 * }
 * </style>
 *
 * <div class="view-container">
 *   <div ng-view class="reveal-animation"></div>
 * </div>
 * ```
 *
 * The following code below demonstrates how to perform animations using **CSS animations** with Angular:
 *
 * ```html
 * <style type="text/css">
 * .reveal-animation.ng-enter {
 *   -webkit-animation: enter_sequence 1s linear; /&#42; Safari/Chrome &#42;/
 *   animation: enter_sequence 1s linear; /&#42; IE10+ and Future Browsers &#42;/
 * }
 * @-webkit-keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
 * @keyframes enter_sequence {
 *   from { opacity:0; }
 *   to { opacity:1; }
 * }
 * </style>
 *
 * <div class="view-container">
 *   <div ng-view class="reveal-animation"></div>
 * </div>
 * ```
 *
 * Both CSS3 animations and transitions can be used together and the animate service will figure out the correct duration and delay timing.
 *
 * Upon DOM mutation, the event class is added first (something like `ng-enter`), then the browser prepares itself to add
 * the active class (in this case `ng-enter-active`) which then triggers the animation. The animation module will automatically
 * detect the CSS code to determine when the animation ends. Once the animation is over then both CSS classes will be
 * removed from the DOM. If a browser does not support CSS transitions or CSS animations then the animation will start and end
 * immediately resulting in a DOM element that is at its final state. This final state is when the DOM element
 * has no CSS transition/animation classes applied to it.
 *
 * ### Structural transition animations
 *
 * Structural transitions (such as enter, leave and move) will always apply a `0s none` transition
 * value to force the browser into rendering the styles defined in the setup (`.ng-enter`, `.ng-leave`
 * or `.ng-move`) class. This means that any active transition animations operating on the element
 * will be cut off to make way for the enter, leave or move animation.
 *
 * ### Class-based transition animations
 *
 * Class-based transitions refer to transition animations that are triggered when a CSS class is
 * added to or removed from the element (via `$animate.addClass`, `$animate.removeClass`,
 * `$animate.setClass`, or by directives such as `ngClass`, `ngModel` and `form`).
 * They are different when compared to structural animations since they **do not cancel existing
 * animations** nor do they **block successive transitions** from rendering on the same element.
 * This distinction allows for **multiple class-based transitions** to be performed on the same element.
 *
 * In addition to ngAnimate supporting the default (natural) functionality of class-based transition
 * animations, ngAnimate also decorates the element with starting and ending CSS classes to aid the
 * developer in further styling the element throughout the transition animation. Earlier versions
 * of ngAnimate may have caused natural CSS transitions to break and not render properly due to
 * $animate temporarily blocking transitions using `0s none` in order to allow the setup CSS class
 * (the `-add` or `-remove` class) to be applied without triggering an animation. However, as of
 * **version 1.3**, this workaround has been removed with ngAnimate and all non-ngAnimate CSS
 * class transitions are compatible with ngAnimate.
 *
 * There is, however, one special case when dealing with class-based transitions in ngAnimate.
 * When rendering class-based transitions that make use of the setup and active CSS classes
 * (e.g. `.fade-add` and `.fade-add-active` for when `.fade` is added) be sure to define
 * the transition value **on the active CSS class** and not the setup class.
 *
 * ```css
 * .fade-add {
 *   /&#42; remember to place a 0s transition here
 *      to ensure that the styles are applied instantly
 *      even if the element already has a transition style &#42;/
 *   transition:0s linear all;
 *
 *   /&#42; starting CSS styles &#42;/
 *   opacity:1;
 * }
 * .fade-add.fade-add-active {
 *   /&#42; this will be the length of the animation &#42;/
 *   transition:1s linear all;
 *   opacity:0;
 * }
 * ```
 *
 * The setup CSS class (in this case `.fade-add`) also has a transition style property, however, it
 * has a duration of zero. This may not be required, however, incase the browser is unable to render
 * the styling present in this CSS class instantly then it could be that the browser is attempting
 * to perform an unnecessary transition.
 *
 * This workaround, however, does not apply to  standard class-based transitions that are rendered
 * when a CSS class containing a transition is applied to an element:
 *
 * ```css
 * /&#42; this works as expected &#42;/
 * .fade {
 *   transition:1s linear all;
 *   opacity:0;
 * }
 * ```
 *
 * Please keep this in mind when coding the CSS markup that will be used within class-based transitions.
 * Also, try not to mix the two class-based animation flavors together since the CSS code may become
 * overly complex.
 *
 *
 * ### Preventing Collisions With Third Party Libraries
 *
 * Some third-party frameworks place animation duration defaults across many element or className
 * selectors in order to make their code small and reuseable. This can lead to issues with ngAnimate, which
 * is expecting actual animations on these elements and has to wait for their completion.
 *
 * You can prevent this unwanted behavior by using a prefix on all your animation classes:
 *
 * ```css
 * /&#42; prefixed with animate- &#42;/
 * .animate-fade-add.animate-fade-add-active {
 *   transition:1s linear all;
 *   opacity:0;
 * }
 * ```
 *
 * You then configure `$animate` to enforce this prefix:
 *
 * ```js
 * $animateProvider.classNameFilter(/animate-/);
 * ```
 * </div>
 *
 * ### CSS Staggering Animations
 * A Staggering animation is a collection of animations that are issued with a slight delay in between each successive operation resulting in a
 * curtain-like effect. The ngAnimate module (versions >=1.2) supports staggering animations and the stagger effect can be
 * performed by creating a **ng-EVENT-stagger** CSS class and attaching that class to the base CSS class used for
 * the animation. The style property expected within the stagger class can either be a **transition-delay** or an
 * **animation-delay** property (or both if your animation contains both transitions and keyframe animations).
 *
 * ```css
 * .my-animation.ng-enter {
 *   /&#42; standard transition code &#42;/
 *   -webkit-transition: 1s linear all;
 *   transition: 1s linear all;
 *   opacity:0;
 * }
 * .my-animation.ng-enter-stagger {
 *   /&#42; this will have a 100ms delay between each successive leave animation &#42;/
 *   -webkit-transition-delay: 0.1s;
 *   transition-delay: 0.1s;
 *
 *   /&#42; in case the stagger doesn't work then these two values
 *    must be set to 0 to avoid an accidental CSS inheritance &#42;/
 *   -webkit-transition-duration: 0s;
 *   transition-duration: 0s;
 * }
 * .my-animation.ng-enter.ng-enter-active {
 *   /&#42; standard transition styles &#42;/
 *   opacity:1;
 * }
 * ```
 *
 * Staggering animations work by default in ngRepeat (so long as the CSS class is defined). Outside of ngRepeat, to use staggering animations
 * on your own, they can be triggered by firing multiple calls to the same event on $animate. However, the restrictions surrounding this
 * are that each of the elements must have the same CSS className value as well as the same parent element. A stagger operation
 * will also be reset if more than 10ms has passed after the last animation has been fired.
 *
 * The following code will issue the **ng-leave-stagger** event on the element provided:
 *
 * ```js
 * var kids = parent.children();
 *
 * $animate.leave(kids[0]); //stagger index=0
 * $animate.leave(kids[1]); //stagger index=1
 * $animate.leave(kids[2]); //stagger index=2
 * $animate.leave(kids[3]); //stagger index=3
 * $animate.leave(kids[4]); //stagger index=4
 *
 * $timeout(function() {
 *   //stagger has reset itself
 *   $animate.leave(kids[5]); //stagger index=0
 *   $animate.leave(kids[6]); //stagger index=1
 * }, 100, false);
 * ```
 *
 * Stagger animations are currently only supported within CSS-defined animations.
 *
 * ## JavaScript-defined Animations
 * In the event that you do not want to use CSS3 transitions or CSS3 animations or if you wish to offer animations on browsers that do not
 * yet support CSS transitions/animations, then you can make use of JavaScript animations defined inside of your AngularJS module.
 *
 * ```js
 * //!annotate="YourApp" Your AngularJS Module|Replace this or ngModule with the module that you used to define your application.
 * var ngModule = angular.module('YourApp', ['ngAnimate']);
 * ngModule.animation('.my-crazy-animation', function() {
 *   return {
 *     enter: function(element, done) {
 *       //run the animation here and call done when the animation is complete
 *       return function(cancelled) {
 *         //this (optional) function will be called when the animation
 *         //completes or when the animation is cancelled (the cancelled
 *         //flag will be set to true if cancelled).
 *       };
 *     },
 *     leave: function(element, done) { },
 *     move: function(element, done) { },
 *
 *     //animation that can be triggered before the class is added
 *     beforeAddClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is added
 *     addClass: function(element, className, done) { },
 *
 *     //animation that can be triggered before the class is removed
 *     beforeRemoveClass: function(element, className, done) { },
 *
 *     //animation that can be triggered after the class is removed
 *     removeClass: function(element, className, done) { }
 *   };
 * });
 * ```
 *
 * JavaScript-defined animations are created with a CSS-like class selector and a collection of events which are set to run
 * a javascript callback function. When an animation is triggered, $animate will look for a matching animation which fits
 * the element's CSS class attribute value and then run the matching animation event function (if found).
 * In other words, if the CSS classes present on the animated element match any of the JavaScript animations then the callback function will
 * be executed. It should be also noted that only simple, single class selectors are allowed (compound class selectors are not supported).
 *
 * Within a JavaScript animation, an object containing various event callback animation functions is expected to be returned.
 * As explained above, these callbacks are triggered based on the animation event. Therefore if an enter animation is run,
 * and the JavaScript animation is found, then the enter callback will handle that animation (in addition to the CSS keyframe animation
 * or transition code that is defined via a stylesheet).
 *
 *
 * ### Applying Directive-specific Styles to an Animation
 * In some cases a directive or service may want to provide `$animate` with extra details that the animation will
 * include into its animation. Let's say for example we wanted to render an animation that animates an element
 * towards the mouse coordinates as to where the user clicked last. By collecting the X/Y coordinates of the click
 * (via the event parameter) we can set the `top` and `left` styles into an object and pass that into our function
 * call to `$animate.addClass`.
 *
 * ```js
 * canvas.on('click', function(e) {
 *   $animate.addClass(element, 'on', {
 *     to: {
 *       left : e.client.x + 'px',
 *       top : e.client.y + 'px'
 *     }
 *   }):
 * });
 * ```
 *
 * Now when the animation runs, and a transition or keyframe animation is picked up, then the animation itself will
 * also include and transition the styling of the `left` and `top` properties into its running animation. If we want
 * to provide some starting animation values then we can do so by placing the starting animations styles into an object
 * called `from` in the same object as the `to` animations.
 *
 * ```js
 * canvas.on('click', function(e) {
 *   $animate.addClass(element, 'on', {
 *     from: {
 *        position: 'absolute',
 *        left: '0px',
 *        top: '0px'
 *     },
 *     to: {
 *       left : e.client.x + 'px',
 *       top : e.client.y + 'px'
 *     }
 *   }):
 * });
 * ```
 *
 * Once the animation is complete or cancelled then the union of both the before and after styles are applied to the
 * element. If `ngAnimate` is not present then the styles will be applied immediately.
 *
 */

angular.module('ngAnimate', ['ng'])

  /**
   * @ngdoc provider
   * @name $animateProvider
   * @description
   *
   * The `$animateProvider` allows developers to register JavaScript animation event handlers directly inside of a module.
   * When an animation is triggered, the $animate service will query the $animate service to find any animations that match
   * the provided name value.
   *
   * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
   *
   * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
   *
   */
  .directive('ngAnimateChildren', function() {
    var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';
    return function(scope, element, attrs) {
      var val = attrs.ngAnimateChildren;
      if (angular.isString(val) && val.length === 0) { //empty attribute
        element.data(NG_ANIMATE_CHILDREN, true);
      } else {
        scope.$watch(val, function(value) {
          element.data(NG_ANIMATE_CHILDREN, !!value);
        });
      }
    };
  })

  //this private service is only used within CSS-enabled animations
  //IE8 + IE9 do not support rAF natively, but that is fine since they
  //also don't support transitions and keyframes which means that the code
  //below will never be used by the two browsers.
  .factory('$$animateReflow', ['$$rAF', '$document', function($$rAF, $document) {
    var bod = $document[0].body;
    return function(fn) {
      //the returned function acts as the cancellation function
      return $$rAF(function() {
        //the line below will force the browser to perform a repaint
        //so that all the animated elements within the animation frame
        //will be properly updated and drawn on screen. This is
        //required to perform multi-class CSS based animations with
        //Firefox. DO NOT REMOVE THIS LINE. DO NOT OPTIMIZE THIS LINE.
        //THE MINIFIER WILL REMOVE IT OTHERWISE WHICH WILL RESULT IN AN
        //UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND WILL
        //TAKE YEARS AWAY FROM YOUR LIFE!
        fn(bod.offsetWidth);
      });
    };
  }])

  .config(['$provide', '$animateProvider', function($provide, $animateProvider) {
    var noop = angular.noop;
    var forEach = angular.forEach;
    var selectors = $animateProvider.$$selectors;
    var isArray = angular.isArray;
    var isString = angular.isString;
    var isObject = angular.isObject;

    var ELEMENT_NODE = 1;
    var NG_ANIMATE_STATE = '$$ngAnimateState';
    var NG_ANIMATE_CHILDREN = '$$ngAnimateChildren';
    var NG_ANIMATE_CLASS_NAME = 'ng-animate';
    var rootAnimateState = {running: true};

    function extractElementNode(element) {
      for (var i = 0; i < element.length; i++) {
        var elm = element[i];
        if (elm.nodeType == ELEMENT_NODE) {
          return elm;
        }
      }
    }

    function prepareElement(element) {
      return element && angular.element(element);
    }

    function stripCommentsFromElement(element) {
      return angular.element(extractElementNode(element));
    }

    function isMatchingElement(elm1, elm2) {
      return extractElementNode(elm1) == extractElementNode(elm2);
    }
    var $$jqLite;
    $provide.decorator('$animate',
        ['$delegate', '$$q', '$injector', '$sniffer', '$rootElement', '$$asyncCallback', '$rootScope', '$document', '$templateRequest', '$$jqLite',
 function($delegate,   $$q,   $injector,   $sniffer,   $rootElement,   $$asyncCallback,   $rootScope,   $document,   $templateRequest,   $$$jqLite) {

      $$jqLite = $$$jqLite;
      $rootElement.data(NG_ANIMATE_STATE, rootAnimateState);

      // Wait until all directive and route-related templates are downloaded and
      // compiled. The $templateRequest.totalPendingRequests variable keeps track of
      // all of the remote templates being currently downloaded. If there are no
      // templates currently downloading then the watcher will still fire anyway.
      var deregisterWatch = $rootScope.$watch(
        function() { return $templateRequest.totalPendingRequests; },
        function(val, oldVal) {
          if (val !== 0) return;
          deregisterWatch();

          // Now that all templates have been downloaded, $animate will wait until
          // the post digest queue is empty before enabling animations. By having two
          // calls to $postDigest calls we can ensure that the flag is enabled at the
          // very end of the post digest queue. Since all of the animations in $animate
          // use $postDigest, it's important that the code below executes at the end.
          // This basically means that the page is fully downloaded and compiled before
          // any animations are triggered.
          $rootScope.$$postDigest(function() {
            $rootScope.$$postDigest(function() {
              rootAnimateState.running = false;
            });
          });
        }
      );

      var globalAnimationCounter = 0;
      var classNameFilter = $animateProvider.classNameFilter();
      var isAnimatableClassName = !classNameFilter
              ? function() { return true; }
              : function(className) {
                return classNameFilter.test(className);
              };

      function classBasedAnimationsBlocked(element, setter) {
        var data = element.data(NG_ANIMATE_STATE) || {};
        if (setter) {
          data.running = true;
          data.structural = true;
          element.data(NG_ANIMATE_STATE, data);
        }
        return data.disabled || (data.running && data.structural);
      }

      function runAnimationPostDigest(fn) {
        var cancelFn, defer = $$q.defer();
        defer.promise.$$cancelFn = function() {
          cancelFn && cancelFn();
        };
        $rootScope.$$postDigest(function() {
          cancelFn = fn(function() {
            defer.resolve();
          });
        });
        return defer.promise;
      }

      function parseAnimateOptions(options) {
        // some plugin code may still be passing in the callback
        // function as the last param for the $animate methods so
        // it's best to only allow string or array values for now
        if (isObject(options)) {
          if (options.tempClasses && isString(options.tempClasses)) {
            options.tempClasses = options.tempClasses.split(/\s+/);
          }
          return options;
        }
      }

      function resolveElementClasses(element, cache, runningAnimations) {
        runningAnimations = runningAnimations || {};

        var lookup = {};
        forEach(runningAnimations, function(data, selector) {
          forEach(selector.split(' '), function(s) {
            lookup[s]=data;
          });
        });

        var hasClasses = Object.create(null);
        forEach((element.attr('class') || '').split(/\s+/), function(className) {
          hasClasses[className] = true;
        });

        var toAdd = [], toRemove = [];
        forEach((cache && cache.classes) || [], function(status, className) {
          var hasClass = hasClasses[className];
          var matchingAnimation = lookup[className] || {};

          // When addClass and removeClass is called then $animate will check to
          // see if addClass and removeClass cancel each other out. When there are
          // more calls to removeClass than addClass then the count falls below 0
          // and then the removeClass animation will be allowed. Otherwise if the
          // count is above 0 then that means an addClass animation will commence.
          // Once an animation is allowed then the code will also check to see if
          // there exists any on-going animation that is already adding or remvoing
          // the matching CSS class.
          if (status === false) {
            //does it have the class or will it have the class
            if (hasClass || matchingAnimation.event == 'addClass') {
              toRemove.push(className);
            }
          } else if (status === true) {
            //is the class missing or will it be removed?
            if (!hasClass || matchingAnimation.event == 'removeClass') {
              toAdd.push(className);
            }
          }
        });

        return (toAdd.length + toRemove.length) > 0 && [toAdd.join(' '), toRemove.join(' ')];
      }

      function lookup(name) {
        if (name) {
          var matches = [],
              flagMap = {},
              classes = name.substr(1).split('.');

          //the empty string value is the default animation
          //operation which performs CSS transition and keyframe
          //animations sniffing. This is always included for each
          //element animation procedure if the browser supports
          //transitions and/or keyframe animations. The default
          //animation is added to the top of the list to prevent
          //any previous animations from affecting the element styling
          //prior to the element being animated.
          if ($sniffer.transitions || $sniffer.animations) {
            matches.push($injector.get(selectors['']));
          }

          for (var i=0; i < classes.length; i++) {
            var klass = classes[i],
                selectorFactoryName = selectors[klass];
            if (selectorFactoryName && !flagMap[klass]) {
              matches.push($injector.get(selectorFactoryName));
              flagMap[klass] = true;
            }
          }
          return matches;
        }
      }

      function animationRunner(element, animationEvent, className, options) {
        //transcluded directives may sometimes fire an animation using only comment nodes
        //best to catch this early on to prevent any animation operations from occurring
        var node = element[0];
        if (!node) {
          return;
        }

        if (options) {
          options.to = options.to || {};
          options.from = options.from || {};
        }

        var classNameAdd;
        var classNameRemove;
        if (isArray(className)) {
          classNameAdd = className[0];
          classNameRemove = className[1];
          if (!classNameAdd) {
            className = classNameRemove;
            animationEvent = 'removeClass';
          } else if (!classNameRemove) {
            className = classNameAdd;
            animationEvent = 'addClass';
          } else {
            className = classNameAdd + ' ' + classNameRemove;
          }
        }

        var isSetClassOperation = animationEvent == 'setClass';
        var isClassBased = isSetClassOperation
                           || animationEvent == 'addClass'
                           || animationEvent == 'removeClass'
                           || animationEvent == 'animate';

        var currentClassName = element.attr('class');
        var classes = currentClassName + ' ' + className;
        if (!isAnimatableClassName(classes)) {
          return;
        }

        var beforeComplete = noop,
            beforeCancel = [],
            before = [],
            afterComplete = noop,
            afterCancel = [],
            after = [];

        var animationLookup = (' ' + classes).replace(/\s+/g,'.');
        forEach(lookup(animationLookup), function(animationFactory) {
          var created = registerAnimation(animationFactory, animationEvent);
          if (!created && isSetClassOperation) {
            registerAnimation(animationFactory, 'addClass');
            registerAnimation(animationFactory, 'removeClass');
          }
        });

        function registerAnimation(animationFactory, event) {
          var afterFn = animationFactory[event];
          var beforeFn = animationFactory['before' + event.charAt(0).toUpperCase() + event.substr(1)];
          if (afterFn || beforeFn) {
            if (event == 'leave') {
              beforeFn = afterFn;
              //when set as null then animation knows to skip this phase
              afterFn = null;
            }
            after.push({
              event: event, fn: afterFn
            });
            before.push({
              event: event, fn: beforeFn
            });
            return true;
          }
        }

        function run(fns, cancellations, allCompleteFn) {
          var animations = [];
          forEach(fns, function(animation) {
            animation.fn && animations.push(animation);
          });

          var count = 0;
          function afterAnimationComplete(index) {
            if (cancellations) {
              (cancellations[index] || noop)();
              if (++count < animations.length) return;
              cancellations = null;
            }
            allCompleteFn();
          }

          //The code below adds directly to the array in order to work with
          //both sync and async animations. Sync animations are when the done()
          //operation is called right away. DO NOT REFACTOR!
          forEach(animations, function(animation, index) {
            var progress = function() {
              afterAnimationComplete(index);
            };
            switch (animation.event) {
              case 'setClass':
                cancellations.push(animation.fn(element, classNameAdd, classNameRemove, progress, options));
                break;
              case 'animate':
                cancellations.push(animation.fn(element, className, options.from, options.to, progress));
                break;
              case 'addClass':
                cancellations.push(animation.fn(element, classNameAdd || className,     progress, options));
                break;
              case 'removeClass':
                cancellations.push(animation.fn(element, classNameRemove || className,  progress, options));
                break;
              default:
                cancellations.push(animation.fn(element, progress, options));
                break;
            }
          });

          if (cancellations && cancellations.length === 0) {
            allCompleteFn();
          }
        }

        return {
          node: node,
          event: animationEvent,
          className: className,
          isClassBased: isClassBased,
          isSetClassOperation: isSetClassOperation,
          applyStyles: function() {
            if (options) {
              element.css(angular.extend(options.from || {}, options.to || {}));
            }
          },
          before: function(allCompleteFn) {
            beforeComplete = allCompleteFn;
            run(before, beforeCancel, function() {
              beforeComplete = noop;
              allCompleteFn();
            });
          },
          after: function(allCompleteFn) {
            afterComplete = allCompleteFn;
            run(after, afterCancel, function() {
              afterComplete = noop;
              allCompleteFn();
            });
          },
          cancel: function() {
            if (beforeCancel) {
              forEach(beforeCancel, function(cancelFn) {
                (cancelFn || noop)(true);
              });
              beforeComplete(true);
            }
            if (afterCancel) {
              forEach(afterCancel, function(cancelFn) {
                (cancelFn || noop)(true);
              });
              afterComplete(true);
            }
          }
        };
      }

      /**
       * @ngdoc service
       * @name $animate
       * @kind object
       *
       * @description
       * The `$animate` service provides animation detection support while performing DOM operations (enter, leave and move) as well as during addClass and removeClass operations.
       * When any of these operations are run, the $animate service
       * will examine any JavaScript-defined animations (which are defined by using the $animateProvider provider object)
       * as well as any CSS-defined animations against the CSS classes present on the element once the DOM operation is run.
       *
       * The `$animate` service is used behind the scenes with pre-existing directives and animation with these directives
       * will work out of the box without any extra configuration.
       *
       * Requires the {@link ngAnimate `ngAnimate`} module to be installed.
       *
       * Please visit the {@link ngAnimate `ngAnimate`} module overview page learn more about how to use animations in your application.
       * ## Callback Promises
       * With AngularJS 1.3, each of the animation methods, on the `$animate` service, return a promise when called. The
       * promise itself is then resolved once the animation has completed itself, has been cancelled or has been
       * skipped due to animations being disabled. (Note that even if the animation is cancelled it will still
       * call the resolve function of the animation.)
       *
       * ```js
       * $animate.enter(element, container).then(function() {
       *   //...this is called once the animation is complete...
       * });
       * ```
       *
       * Also note that, due to the nature of the callback promise, if any Angular-specific code (like changing the scope,
       * location of the page, etc...) is executed within the callback promise then be sure to wrap the code using
       * `$scope.$apply(...)`;
       *
       * ```js
       * $animate.leave(element).then(function() {
       *   $scope.$apply(function() {
       *     $location.path('/new-page');
       *   });
       * });
       * ```
       *
       * An animation can also be cancelled by calling the `$animate.cancel(promise)` method with the provided
       * promise that was returned when the animation was started.
       *
       * ```js
       * var promise = $animate.addClass(element, 'super-long-animation');
       * promise.then(function() {
       *   //this will still be called even if cancelled
       * });
       *
       * element.on('click', function() {
       *   //tooo lazy to wait for the animation to end
       *   $animate.cancel(promise);
       * });
       * ```
       *
       * (Keep in mind that the promise cancellation is unique to `$animate` since promises in
       * general cannot be cancelled.)
       *
       */
      return {
        /**
         * @ngdoc method
         * @name $animate#animate
         * @kind function
         *
         * @description
         * Performs an inline animation on the element which applies the provided `to` and `from` CSS styles to the element.
         * If any detected CSS transition, keyframe or JavaScript matches the provided `className` value then the animation
         * will take on the provided styles. For example, if a transition animation is set for the given className then the
         * provided `from` and `to` styles will be applied alongside the given transition. If a JavaScript animation is
         * detected then the provided styles will be given in as function paramters.
         *
         * ```js
         * ngModule.animation('.my-inline-animation', function() {
         *   return {
         *     animate : function(element, className, from, to, done) {
         *       //styles
         *     }
         *   }
         * });
         * ```
         *
         * Below is a breakdown of each step that occurs during the `animate` animation:
         *
         * | Animation Step                                                                                                        | What the element class attribute looks like                  |
         * |-----------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------|
         * | 1. `$animate.animate(...)` is called                                                                                  | `class="my-animation"`                                       |
         * | 2. `$animate` waits for the next digest to start the animation                                                        | `class="my-animation ng-animate"`                            |
         * | 3. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class="my-animation ng-animate"`                            |
         * | 4. the `className` class value is added to the element                                                                | `class="my-animation ng-animate className"`                  |
         * | 5. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class="my-animation ng-animate className"`                  |
         * | 6. `$animate` blocks all CSS transitions on the element to ensure the `.className` class styling is applied right away| `class="my-animation ng-animate className"`                  |
         * | 7. `$animate` applies the provided collection of `from` CSS styles to the element                                     | `class="my-animation ng-animate className"`                  |
         * | 8. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class="my-animation ng-animate className"`                  |
         * | 9. `$animate` removes the CSS transition block placed on the element                                                  | `class="my-animation ng-animate className"`                  |
         * | 10. the `className-active` class is added (this triggers the CSS transition/animation)                                | `class="my-animation ng-animate className className-active"` |
         * | 11. `$animate` applies the collection of `to` CSS styles to the element which are then handled by the transition      | `class="my-animation ng-animate className className-active"` |
         * | 12. `$animate` waits for the animation to complete (via events and timeout)                                           | `class="my-animation ng-animate className className-active"` |
         * | 13. The animation ends and all generated CSS classes are removed from the element                                     | `class="my-animation"`                                       |
         * | 14. The returned promise is resolved.                                                                                 | `class="my-animation"`                                       |
         *
         * @param {DOMElement} element the element that will be the focus of the enter animation
         * @param {object} from a collection of CSS styles that will be applied to the element at the start of the animation
         * @param {object} to a collection of CSS styles that the element will animate towards
         * @param {string=} className an optional CSS class that will be added to the element for the duration of the animation (the default class is `ng-inline-animate`)
         * @param {object=} options an optional collection of options that will be picked up by the CSS transition/animation
         * @return {Promise} the animation callback promise
        */
        animate: function(element, from, to, className, options) {
          className = className || 'ng-inline-animate';
          options = parseAnimateOptions(options) || {};
          options.from = to ? from : null;
          options.to   = to ? to : from;

          return runAnimationPostDigest(function(done) {
            return performAnimation('animate', className, stripCommentsFromElement(element), null, null, noop, options, done);
          });
        },

        /**
         * @ngdoc method
         * @name $animate#enter
         * @kind function
         *
         * @description
         * Appends the element to the parentElement element that resides in the document and then runs the enter animation. Once
         * the animation is started, the following CSS classes will be present on the element for the duration of the animation:
         *
         * Below is a breakdown of each step that occurs during enter animation:
         *
         * | Animation Step                                                                                                        | What the element class attribute looks like                |
         * |-----------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|
         * | 1. `$animate.enter(...)` is called                                                                                    | `class="my-animation"`                                     |
         * | 2. element is inserted into the `parentElement` element or beside the `afterElement` element                          | `class="my-animation"`                                     |
         * | 3. `$animate` waits for the next digest to start the animation                                                        | `class="my-animation ng-animate"`                          |
         * | 4. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class="my-animation ng-animate"`                          |
         * | 5. the `.ng-enter` class is added to the element                                                                      | `class="my-animation ng-animate ng-enter"`                 |
         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class="my-animation ng-animate ng-enter"`                 |
         * | 7. `$animate` blocks all CSS transitions on the element to ensure the `.ng-enter` class styling is applied right away | `class="my-animation ng-animate ng-enter"`                 |
         * | 8. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class="my-animation ng-animate ng-enter"`                 |
         * | 9. `$animate` removes the CSS transition block placed on the element                                                  | `class="my-animation ng-animate ng-enter"`                 |
         * | 10. the `.ng-enter-active` class is added (this triggers the CSS transition/animation)                                | `class="my-animation ng-animate ng-enter ng-enter-active"` |
         * | 11. `$animate` waits for the animation to complete (via events and timeout)                                           | `class="my-animation ng-animate ng-enter ng-enter-active"` |
         * | 12. The animation ends and all generated CSS classes are removed from the element                                     | `class="my-animation"`                                     |
         * | 13. The returned promise is resolved.                                                                                 | `class="my-animation"`                                     |
         *
         * @param {DOMElement} element the element that will be the focus of the enter animation
         * @param {DOMElement} parentElement the parent element of the element that will be the focus of the enter animation
         * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the enter animation
         * @param {object=} options an optional collection of options that will be picked up by the CSS transition/animation
         * @return {Promise} the animation callback promise
        */
        enter: function(element, parentElement, afterElement, options) {
          options = parseAnimateOptions(options);
          element = angular.element(element);
          parentElement = prepareElement(parentElement);
          afterElement = prepareElement(afterElement);

          classBasedAnimationsBlocked(element, true);
          $delegate.enter(element, parentElement, afterElement);
          return runAnimationPostDigest(function(done) {
            return performAnimation('enter', 'ng-enter', stripCommentsFromElement(element), parentElement, afterElement, noop, options, done);
          });
        },

        /**
         * @ngdoc method
         * @name $animate#leave
         * @kind function
         *
         * @description
         * Runs the leave animation operation and, upon completion, removes the element from the DOM. Once
         * the animation is started, the following CSS classes will be added for the duration of the animation:
         *
         * Below is a breakdown of each step that occurs during leave animation:
         *
         * | Animation Step                                                                                                        | What the element class attribute looks like                |
         * |-----------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------|
         * | 1. `$animate.leave(...)` is called                                                                                    | `class="my-animation"`                                     |
         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                                          | `class="my-animation ng-animate"`                          |
         * | 3. `$animate` waits for the next digest to start the animation                                                        | `class="my-animation ng-animate"`                          |
         * | 4. the `.ng-leave` class is added to the element                                                                      | `class="my-animation ng-animate ng-leave"`                 |
         * | 5. `$animate` scans the element styles to get the CSS transition/animation duration and delay                         | `class="my-animation ng-animate ng-leave"`                 |
         * | 6. `$animate` blocks all CSS transitions on the element to ensure the `.ng-leave` class styling is applied right away | `class="my-animation ng-animate ng-leave"`                 |
         * | 7. `$animate` waits for a single animation frame (this performs a reflow)                                             | `class="my-animation ng-animate ng-leave"`                 |
         * | 8. `$animate` removes the CSS transition block placed on the element                                                  | `class="my-animation ng-animate ng-leave"`                 |
         * | 9. the `.ng-leave-active` class is added (this triggers the CSS transition/animation)                                 | `class="my-animation ng-animate ng-leave ng-leave-active"` |
         * | 10. `$animate` waits for the animation to complete (via events and timeout)                                           | `class="my-animation ng-animate ng-leave ng-leave-active"` |
         * | 11. The animation ends and all generated CSS classes are removed from the element                                     | `class="my-animation"`                                     |
         * | 12. The element is removed from the DOM                                                                               | ...                                                        |
         * | 13. The returned promise is resolved.                                                                                 | ...                                                        |
         *
         * @param {DOMElement} element the element that will be the focus of the leave animation
         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation
         * @return {Promise} the animation callback promise
        */
        leave: function(element, options) {
          options = parseAnimateOptions(options);
          element = angular.element(element);

          cancelChildAnimations(element);
          classBasedAnimationsBlocked(element, true);
          return runAnimationPostDigest(function(done) {
            return performAnimation('leave', 'ng-leave', stripCommentsFromElement(element), null, null, function() {
              $delegate.leave(element);
            }, options, done);
          });
        },

        /**
         * @ngdoc method
         * @name $animate#move
         * @kind function
         *
         * @description
         * Fires the move DOM operation. Just before the animation starts, the animate service will either append it into the parentElement container or
         * add the element directly after the afterElement element if present. Then the move animation will be run. Once
         * the animation is started, the following CSS classes will be added for the duration of the animation:
         *
         * Below is a breakdown of each step that occurs during move animation:
         *
         * | Animation Step                                                                                                       | What the element class attribute looks like              |
         * |----------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------|
         * | 1. `$animate.move(...)` is called                                                                                    | `class="my-animation"`                                   |
         * | 2. element is moved into the parentElement element or beside the afterElement element                                | `class="my-animation"`                                   |
         * | 3. `$animate` waits for the next digest to start the animation                                                       | `class="my-animation ng-animate"`                        |
         * | 4. `$animate` runs the JavaScript-defined animations detected on the element                                         | `class="my-animation ng-animate"`                        |
         * | 5. the `.ng-move` class is added to the element                                                                      | `class="my-animation ng-animate ng-move"`                |
         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                        | `class="my-animation ng-animate ng-move"`                |
         * | 7. `$animate` blocks all CSS transitions on the element to ensure the `.ng-move` class styling is applied right away | `class="my-animation ng-animate ng-move"`                |
         * | 8. `$animate` waits for a single animation frame (this performs a reflow)                                            | `class="my-animation ng-animate ng-move"`                |
         * | 9. `$animate` removes the CSS transition block placed on the element                                                 | `class="my-animation ng-animate ng-move"`                |
         * | 10. the `.ng-move-active` class is added (this triggers the CSS transition/animation)                                | `class="my-animation ng-animate ng-move ng-move-active"` |
         * | 11. `$animate` waits for the animation to complete (via events and timeout)                                          | `class="my-animation ng-animate ng-move ng-move-active"` |
         * | 12. The animation ends and all generated CSS classes are removed from the element                                    | `class="my-animation"`                                   |
         * | 13. The returned promise is resolved.                                                                                | `class="my-animation"`                                   |
         *
         * @param {DOMElement} element the element that will be the focus of the move animation
         * @param {DOMElement} parentElement the parentElement element of the element that will be the focus of the move animation
         * @param {DOMElement} afterElement the sibling element (which is the previous element) of the element that will be the focus of the move animation
         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation
         * @return {Promise} the animation callback promise
        */
        move: function(element, parentElement, afterElement, options) {
          options = parseAnimateOptions(options);
          element = angular.element(element);
          parentElement = prepareElement(parentElement);
          afterElement = prepareElement(afterElement);

          cancelChildAnimations(element);
          classBasedAnimationsBlocked(element, true);
          $delegate.move(element, parentElement, afterElement);
          return runAnimationPostDigest(function(done) {
            return performAnimation('move', 'ng-move', stripCommentsFromElement(element), parentElement, afterElement, noop, options, done);
          });
        },

        /**
         * @ngdoc method
         * @name $animate#addClass
         *
         * @description
         * Triggers a custom animation event based off the className variable and then attaches the className value to the element as a CSS class.
         * Unlike the other animation methods, the animate service will suffix the className value with {@type -add} in order to provide
         * the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if no CSS transitions
         * or keyframes are defined on the -add-active or base CSS class).
         *
         * Below is a breakdown of each step that occurs during addClass animation:
         *
         * | Animation Step                                                                                         | What the element class attribute looks like                        |
         * |--------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------|
         * | 1. `$animate.addClass(element, 'super')` is called                                                     | `class="my-animation"`                                             |
         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                           | `class="my-animation ng-animate"`                                  |
         * | 3. the `.super-add` class is added to the element                                                      | `class="my-animation ng-animate super-add"`                        |
         * | 4. `$animate` waits for a single animation frame (this performs a reflow)                              | `class="my-animation ng-animate super-add"`                        |
         * | 5. the `.super` and `.super-add-active` classes are added (this triggers the CSS transition/animation) | `class="my-animation ng-animate super super-add super-add-active"` |
         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay          | `class="my-animation ng-animate super super-add super-add-active"` |
         * | 7. `$animate` waits for the animation to complete (via events and timeout)                             | `class="my-animation ng-animate super super-add super-add-active"` |
         * | 8. The animation ends and all generated CSS classes are removed from the element                       | `class="my-animation super"`                                       |
         * | 9. The super class is kept on the element                                                              | `class="my-animation super"`                                       |
         * | 10. The returned promise is resolved.                                                                  | `class="my-animation super"`                                       |
         *
         * @param {DOMElement} element the element that will be animated
         * @param {string} className the CSS class that will be added to the element and then animated
         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation
         * @return {Promise} the animation callback promise
        */
        addClass: function(element, className, options) {
          return this.setClass(element, className, [], options);
        },

        /**
         * @ngdoc method
         * @name $animate#removeClass
         *
         * @description
         * Triggers a custom animation event based off the className variable and then removes the CSS class provided by the className value
         * from the element. Unlike the other animation methods, the animate service will suffix the className value with {@type -remove} in
         * order to provide the animate service the setup and active CSS classes in order to trigger the animation (this will be skipped if
         * no CSS transitions or keyframes are defined on the -remove or base CSS classes).
         *
         * Below is a breakdown of each step that occurs during removeClass animation:
         *
         * | Animation Step                                                                                                       | What the element class attribute looks like                        |
         * |----------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------|
         * | 1. `$animate.removeClass(element, 'super')` is called                                                                | `class="my-animation super"`                                       |
         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                                         | `class="my-animation super ng-animate"`                            |
         * | 3. the `.super-remove` class is added to the element                                                                 | `class="my-animation super ng-animate super-remove"`               |
         * | 4. `$animate` waits for a single animation frame (this performs a reflow)                                            | `class="my-animation super ng-animate super-remove"`               |
         * | 5. the `.super-remove-active` classes are added and `.super` is removed (this triggers the CSS transition/animation) | `class="my-animation ng-animate super-remove super-remove-active"` |
         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                        | `class="my-animation ng-animate super-remove super-remove-active"` |
         * | 7. `$animate` waits for the animation to complete (via events and timeout)                                           | `class="my-animation ng-animate super-remove super-remove-active"` |
         * | 8. The animation ends and all generated CSS classes are removed from the element                                     | `class="my-animation"`                                             |
         * | 9. The returned promise is resolved.                                                                                 | `class="my-animation"`                                             |
         *
         *
         * @param {DOMElement} element the element that will be animated
         * @param {string} className the CSS class that will be animated and then removed from the element
         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation
         * @return {Promise} the animation callback promise
        */
        removeClass: function(element, className, options) {
          return this.setClass(element, [], className, options);
        },

        /**
         *
         * @ngdoc method
         * @name $animate#setClass
         *
         * @description Adds and/or removes the given CSS classes to and from the element.
         * Once complete, the `done()` callback will be fired (if provided).
         *
         * | Animation Step                                                                                                                               | What the element class attribute looks like                                            |
         * |----------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------|
         * | 1. `$animate.setClass(element, 'on', 'off')` is called                                                                                       | `class="my-animation off"`                                                             |
         * | 2. `$animate` runs the JavaScript-defined animations detected on the element                                                                 | `class="my-animation ng-animate off"`                                                  |
         * | 3. the `.on-add` and `.off-remove` classes are added to the element                                                                          | `class="my-animation ng-animate on-add off-remove off"`                                |
         * | 4. `$animate` waits for a single animation frame (this performs a reflow)                                                                    | `class="my-animation ng-animate on-add off-remove off"`                                |
         * | 5. the `.on`, `.on-add-active` and `.off-remove-active` classes are added and `.off` is removed (this triggers the CSS transition/animation) | `class="my-animation ng-animate on on-add on-add-active off-remove off-remove-active"` |
         * | 6. `$animate` scans the element styles to get the CSS transition/animation duration and delay                                                | `class="my-animation ng-animate on on-add on-add-active off-remove off-remove-active"` |
         * | 7. `$animate` waits for the animation to complete (via events and timeout)                                                                   | `class="my-animation ng-animate on on-add on-add-active off-remove off-remove-active"` |
         * | 8. The animation ends and all generated CSS classes are removed from the element                                                             | `class="my-animation on"`                                                              |
         * | 9. The returned promise is resolved.                                                                                                         | `class="my-animation on"`                                                              |
         *
         * @param {DOMElement} element the element which will have its CSS classes changed
         *   removed from it
         * @param {string} add the CSS classes which will be added to the element
         * @param {string} remove the CSS class which will be removed from the element
         *   CSS classes have been set on the element
         * @param {object=} options an optional collection of styles that will be picked up by the CSS transition/animation
         * @return {Promise} the animation callback promise
         */
        setClass: function(element, add, remove, options) {
          options = parseAnimateOptions(options);

          var STORAGE_KEY = '$$animateClasses';
          element = angular.element(element);
          element = stripCommentsFromElement(element);

          if (classBasedAnimationsBlocked(element)) {
            return $delegate.$$setClassImmediately(element, add, remove, options);
          }

          // we're using a combined array for both the add and remove
          // operations since the ORDER OF addClass and removeClass matters
          var classes, cache = element.data(STORAGE_KEY);
          var hasCache = !!cache;
          if (!cache) {
            cache = {};
            cache.classes = {};
          }
          classes = cache.classes;

          add = isArray(add) ? add : add.split(' ');
          forEach(add, function(c) {
            if (c && c.length) {
              classes[c] = true;
            }
          });

          remove = isArray(remove) ? remove : remove.split(' ');
          forEach(remove, function(c) {
            if (c && c.length) {
              classes[c] = false;
            }
          });

          if (hasCache) {
            if (options && cache.options) {
              cache.options = angular.extend(cache.options || {}, options);
            }

            //the digest cycle will combine all the animations into one function
            return cache.promise;
          } else {
            element.data(STORAGE_KEY, cache = {
              classes: classes,
              options: options
            });
          }

          return cache.promise = runAnimationPostDigest(function(done) {
            var parentElement = element.parent();
            var elementNode = extractElementNode(element);
            var parentNode = elementNode.parentNode;
            // TODO(matsko): move this code into the animationsDisabled() function once #8092 is fixed
            if (!parentNode || parentNode['$$NG_REMOVED'] || elementNode['$$NG_REMOVED']) {
              done();
              return;
            }

            var cache = element.data(STORAGE_KEY);
            element.removeData(STORAGE_KEY);

            var state = element.data(NG_ANIMATE_STATE) || {};
            var classes = resolveElementClasses(element, cache, state.active);
            return !classes
              ? done()
              : performAnimation('setClass', classes, element, parentElement, null, function() {
                  if (classes[0]) $delegate.$$addClassImmediately(element, classes[0]);
                  if (classes[1]) $delegate.$$removeClassImmediately(element, classes[1]);
                }, cache.options, done);
          });
        },

        /**
         * @ngdoc method
         * @name $animate#cancel
         * @kind function
         *
         * @param {Promise} animationPromise The animation promise that is returned when an animation is started.
         *
         * @description
         * Cancels the provided animation.
        */
        cancel: function(promise) {
          promise.$$cancelFn();
        },

        /**
         * @ngdoc method
         * @name $animate#enabled
         * @kind function
         *
         * @param {boolean=} value If provided then set the animation on or off.
         * @param {DOMElement=} element If provided then the element will be used to represent the enable/disable operation
         * @return {boolean} Current animation state.
         *
         * @description
         * Globally enables/disables animations.
         *
        */
        enabled: function(value, element) {
          switch (arguments.length) {
            case 2:
              if (value) {
                cleanup(element);
              } else {
                var data = element.data(NG_ANIMATE_STATE) || {};
                data.disabled = true;
                element.data(NG_ANIMATE_STATE, data);
              }
            break;

            case 1:
              rootAnimateState.disabled = !value;
            break;

            default:
              value = !rootAnimateState.disabled;
            break;
          }
          return !!value;
         }
      };

      /*
        all animations call this shared animation triggering function internally.
        The animationEvent variable refers to the JavaScript animation event that will be triggered
        and the className value is the name of the animation that will be applied within the
        CSS code. Element, `parentElement` and `afterElement` are provided DOM elements for the animation
        and the onComplete callback will be fired once the animation is fully complete.
      */
      function performAnimation(animationEvent, className, element, parentElement, afterElement, domOperation, options, doneCallback) {
        var noopCancel = noop;
        var runner = animationRunner(element, animationEvent, className, options);
        if (!runner) {
          fireDOMOperation();
          fireBeforeCallbackAsync();
          fireAfterCallbackAsync();
          closeAnimation();
          return noopCancel;
        }

        animationEvent = runner.event;
        className = runner.className;
        var elementEvents = angular.element._data(runner.node);
        elementEvents = elementEvents && elementEvents.events;

        if (!parentElement) {
          parentElement = afterElement ? afterElement.parent() : element.parent();
        }

        //skip the animation if animations are disabled, a parent is already being animated,
        //the element is not currently attached to the document body or then completely close
        //the animation if any matching animations are not found at all.
        //NOTE: IE8 + IE9 should close properly (run closeAnimation()) in case an animation was found.
        if (animationsDisabled(element, parentElement)) {
          fireDOMOperation();
          fireBeforeCallbackAsync();
          fireAfterCallbackAsync();
          closeAnimation();
          return noopCancel;
        }

        var ngAnimateState  = element.data(NG_ANIMATE_STATE) || {};
        var runningAnimations     = ngAnimateState.active || {};
        var totalActiveAnimations = ngAnimateState.totalActive || 0;
        var lastAnimation         = ngAnimateState.last;
        var skipAnimation = false;

        if (totalActiveAnimations > 0) {
          var animationsToCancel = [];
          if (!runner.isClassBased) {
            if (animationEvent == 'leave' && runningAnimations['ng-leave']) {
              skipAnimation = true;
            } else {
              //cancel all animations when a structural animation takes place
              for (var klass in runningAnimations) {
                animationsToCancel.push(runningAnimations[klass]);
              }
              ngAnimateState = {};
              cleanup(element, true);
            }
          } else if (lastAnimation.event == 'setClass') {
            animationsToCancel.push(lastAnimation);
            cleanup(element, className);
          } else if (runningAnimations[className]) {
            var current = runningAnimations[className];
            if (current.event == animationEvent) {
              skipAnimation = true;
            } else {
              animationsToCancel.push(current);
              cleanup(element, className);
            }
          }

          if (animationsToCancel.length > 0) {
            forEach(animationsToCancel, function(operation) {
              operation.cancel();
            });
          }
        }

        if (runner.isClassBased
            && !runner.isSetClassOperation
            && animationEvent != 'animate'
            && !skipAnimation) {
          skipAnimation = (animationEvent == 'addClass') == element.hasClass(className); //opposite of XOR
        }

        if (skipAnimation) {
          fireDOMOperation();
          fireBeforeCallbackAsync();
          fireAfterCallbackAsync();
          fireDoneCallbackAsync();
          return noopCancel;
        }

        runningAnimations     = ngAnimateState.active || {};
        totalActiveAnimations = ngAnimateState.totalActive || 0;

        if (animationEvent == 'leave') {
          //there's no need to ever remove the listener since the element
          //will be removed (destroyed) after the leave animation ends or
          //is cancelled midway
          element.one('$destroy', function(e) {
            var element = angular.element(this);
            var state = element.data(NG_ANIMATE_STATE);
            if (state) {
              var activeLeaveAnimation = state.active['ng-leave'];
              if (activeLeaveAnimation) {
                activeLeaveAnimation.cancel();
                cleanup(element, 'ng-leave');
              }
            }
          });
        }

        //the ng-animate class does nothing, but it's here to allow for
        //parent animations to find and cancel child animations when needed
        $$jqLite.addClass(element, NG_ANIMATE_CLASS_NAME);
        if (options && options.tempClasses) {
          forEach(options.tempClasses, function(className) {
            $$jqLite.addClass(element, className);
          });
        }

        var localAnimationCount = globalAnimationCounter++;
        totalActiveAnimations++;
        runningAnimations[className] = runner;

        element.data(NG_ANIMATE_STATE, {
          last: runner,
          active: runningAnimations,
          index: localAnimationCount,
          totalActive: totalActiveAnimations
        });

        //first we run the before animations and when all of those are complete
        //then we perform the DOM operation and run the next set of animations
        fireBeforeCallbackAsync();
        runner.before(function(cancelled) {
          var data = element.data(NG_ANIMATE_STATE);
          cancelled = cancelled ||
                        !data || !data.active[className] ||
                        (runner.isClassBased && data.active[className].event != animationEvent);

          fireDOMOperation();
          if (cancelled === true) {
            closeAnimation();
          } else {
            fireAfterCallbackAsync();
            runner.after(closeAnimation);
          }
        });

        return runner.cancel;

        function fireDOMCallback(animationPhase) {
          var eventName = '$animate:' + animationPhase;
          if (elementEvents && elementEvents[eventName] && elementEvents[eventName].length > 0) {
            $$asyncCallback(function() {
              element.triggerHandler(eventName, {
                event: animationEvent,
                className: className
              });
            });
          }
        }

        function fireBeforeCallbackAsync() {
          fireDOMCallback('before');
        }

        function fireAfterCallbackAsync() {
          fireDOMCallback('after');
        }

        function fireDoneCallbackAsync() {
          fireDOMCallback('close');
          doneCallback();
        }

        //it is less complicated to use a flag than managing and canceling
        //timeouts containing multiple callbacks.
        function fireDOMOperation() {
          if (!fireDOMOperation.hasBeenRun) {
            fireDOMOperation.hasBeenRun = true;
            domOperation();
          }
        }

        function closeAnimation() {
          if (!closeAnimation.hasBeenRun) {
            if (runner) { //the runner doesn't exist if it fails to instantiate
              runner.applyStyles();
            }

            closeAnimation.hasBeenRun = true;
            if (options && options.tempClasses) {
              forEach(options.tempClasses, function(className) {
                $$jqLite.removeClass(element, className);
              });
            }

            var data = element.data(NG_ANIMATE_STATE);
            if (data) {

              /* only structural animations wait for reflow before removing an
                 animation, but class-based animations don't. An example of this
                 failing would be when a parent HTML tag has a ng-class attribute
                 causing ALL directives below to skip animations during the digest */
              if (runner && runner.isClassBased) {
                cleanup(element, className);
              } else {
                $$asyncCallback(function() {
                  var data = element.data(NG_ANIMATE_STATE) || {};
                  if (localAnimationCount == data.index) {
                    cleanup(element, className, animationEvent);
                  }
                });
                element.data(NG_ANIMATE_STATE, data);
              }
            }
            fireDoneCallbackAsync();
          }
        }
      }

      function cancelChildAnimations(element) {
        var node = extractElementNode(element);
        if (node) {
          var nodes = angular.isFunction(node.getElementsByClassName) ?
            node.getElementsByClassName(NG_ANIMATE_CLASS_NAME) :
            node.querySelectorAll('.' + NG_ANIMATE_CLASS_NAME);
          forEach(nodes, function(element) {
            element = angular.element(element);
            var data = element.data(NG_ANIMATE_STATE);
            if (data && data.active) {
              forEach(data.active, function(runner) {
                runner.cancel();
              });
            }
          });
        }
      }

      function cleanup(element, className) {
        if (isMatchingElement(element, $rootElement)) {
          if (!rootAnimateState.disabled) {
            rootAnimateState.running = false;
            rootAnimateState.structural = false;
          }
        } else if (className) {
          var data = element.data(NG_ANIMATE_STATE) || {};

          var removeAnimations = className === true;
          if (!removeAnimations && data.active && data.active[className]) {
            data.totalActive--;
            delete data.active[className];
          }

          if (removeAnimations || !data.totalActive) {
            $$jqLite.removeClass(element, NG_ANIMATE_CLASS_NAME);
            element.removeData(NG_ANIMATE_STATE);
          }
        }
      }

      function animationsDisabled(element, parentElement) {
        if (rootAnimateState.disabled) {
          return true;
        }

        if (isMatchingElement(element, $rootElement)) {
          return rootAnimateState.running;
        }

        var allowChildAnimations, parentRunningAnimation, hasParent;
        do {
          //the element did not reach the root element which means that it
          //is not apart of the DOM. Therefore there is no reason to do
          //any animations on it
          if (parentElement.length === 0) break;

          var isRoot = isMatchingElement(parentElement, $rootElement);
          var state = isRoot ? rootAnimateState : (parentElement.data(NG_ANIMATE_STATE) || {});
          if (state.disabled) {
            return true;
          }

          //no matter what, for an animation to work it must reach the root element
          //this implies that the element is attached to the DOM when the animation is run
          if (isRoot) {
            hasParent = true;
          }

          //once a flag is found that is strictly false then everything before
          //it will be discarded and all child animations will be restricted
          if (allowChildAnimations !== false) {
            var animateChildrenFlag = parentElement.data(NG_ANIMATE_CHILDREN);
            if (angular.isDefined(animateChildrenFlag)) {
              allowChildAnimations = animateChildrenFlag;
            }
          }

          parentRunningAnimation = parentRunningAnimation ||
                                   state.running ||
                                   (state.last && !state.last.isClassBased);
        }
        while (parentElement = parentElement.parent());

        return !hasParent || (!allowChildAnimations && parentRunningAnimation);
      }
    }]);

    $animateProvider.register('', ['$window', '$sniffer', '$timeout', '$$animateReflow',
                           function($window,   $sniffer,   $timeout,   $$animateReflow) {
      // Detect proper transitionend/animationend event names.
      var CSS_PREFIX = '', TRANSITION_PROP, TRANSITIONEND_EVENT, ANIMATION_PROP, ANIMATIONEND_EVENT;

      // If unprefixed events are not supported but webkit-prefixed are, use the latter.
      // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.
      // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`
      // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.
      // Register both events in case `window.onanimationend` is not supported because of that,
      // do the same for `transitionend` as Safari is likely to exhibit similar behavior.
      // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit
      // therefore there is no reason to test anymore for other vendor prefixes: http://caniuse.com/#search=transition
      if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
        CSS_PREFIX = '-webkit-';
        TRANSITION_PROP = 'WebkitTransition';
        TRANSITIONEND_EVENT = 'webkitTransitionEnd transitionend';
      } else {
        TRANSITION_PROP = 'transition';
        TRANSITIONEND_EVENT = 'transitionend';
      }

      if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
        CSS_PREFIX = '-webkit-';
        ANIMATION_PROP = 'WebkitAnimation';
        ANIMATIONEND_EVENT = 'webkitAnimationEnd animationend';
      } else {
        ANIMATION_PROP = 'animation';
        ANIMATIONEND_EVENT = 'animationend';
      }

      var DURATION_KEY = 'Duration';
      var PROPERTY_KEY = 'Property';
      var DELAY_KEY = 'Delay';
      var ANIMATION_ITERATION_COUNT_KEY = 'IterationCount';
      var ANIMATION_PLAYSTATE_KEY = 'PlayState';
      var NG_ANIMATE_PARENT_KEY = '$$ngAnimateKey';
      var NG_ANIMATE_CSS_DATA_KEY = '$$ngAnimateCSS3Data';
      var ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
      var CLOSING_TIME_BUFFER = 1.5;
      var ONE_SECOND = 1000;

      var lookupCache = {};
      var parentCounter = 0;
      var animationReflowQueue = [];
      var cancelAnimationReflow;
      function clearCacheAfterReflow() {
        if (!cancelAnimationReflow) {
          cancelAnimationReflow = $$animateReflow(function() {
            animationReflowQueue = [];
            cancelAnimationReflow = null;
            lookupCache = {};
          });
        }
      }

      function afterReflow(element, callback) {
        if (cancelAnimationReflow) {
          cancelAnimationReflow();
        }
        animationReflowQueue.push(callback);
        cancelAnimationReflow = $$animateReflow(function() {
          forEach(animationReflowQueue, function(fn) {
            fn();
          });

          animationReflowQueue = [];
          cancelAnimationReflow = null;
          lookupCache = {};
        });
      }

      var closingTimer = null;
      var closingTimestamp = 0;
      var animationElementQueue = [];
      function animationCloseHandler(element, totalTime) {
        var node = extractElementNode(element);
        element = angular.element(node);

        //this item will be garbage collected by the closing
        //animation timeout
        animationElementQueue.push(element);

        //but it may not need to cancel out the existing timeout
        //if the timestamp is less than the previous one
        var futureTimestamp = Date.now() + totalTime;
        if (futureTimestamp <= closingTimestamp) {
          return;
        }

        $timeout.cancel(closingTimer);

        closingTimestamp = futureTimestamp;
        closingTimer = $timeout(function() {
          closeAllAnimations(animationElementQueue);
          animationElementQueue = [];
        }, totalTime, false);
      }

      function closeAllAnimations(elements) {
        forEach(elements, function(element) {
          var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
          if (elementData) {
            forEach(elementData.closeAnimationFns, function(fn) {
              fn();
            });
          }
        });
      }

      function getElementAnimationDetails(element, cacheKey) {
        var data = cacheKey ? lookupCache[cacheKey] : null;
        if (!data) {
          var transitionDuration = 0;
          var transitionDelay = 0;
          var animationDuration = 0;
          var animationDelay = 0;

          //we want all the styles defined before and after
          forEach(element, function(element) {
            if (element.nodeType == ELEMENT_NODE) {
              var elementStyles = $window.getComputedStyle(element) || {};

              var transitionDurationStyle = elementStyles[TRANSITION_PROP + DURATION_KEY];
              transitionDuration = Math.max(parseMaxTime(transitionDurationStyle), transitionDuration);

              var transitionDelayStyle = elementStyles[TRANSITION_PROP + DELAY_KEY];
              transitionDelay  = Math.max(parseMaxTime(transitionDelayStyle), transitionDelay);

              var animationDelayStyle = elementStyles[ANIMATION_PROP + DELAY_KEY];
              animationDelay   = Math.max(parseMaxTime(elementStyles[ANIMATION_PROP + DELAY_KEY]), animationDelay);

              var aDuration  = parseMaxTime(elementStyles[ANIMATION_PROP + DURATION_KEY]);

              if (aDuration > 0) {
                aDuration *= parseInt(elementStyles[ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY], 10) || 1;
              }
              animationDuration = Math.max(aDuration, animationDuration);
            }
          });
          data = {
            total: 0,
            transitionDelay: transitionDelay,
            transitionDuration: transitionDuration,
            animationDelay: animationDelay,
            animationDuration: animationDuration
          };
          if (cacheKey) {
            lookupCache[cacheKey] = data;
          }
        }
        return data;
      }

      function parseMaxTime(str) {
        var maxValue = 0;
        var values = isString(str) ?
          str.split(/\s*,\s*/) :
          [];
        forEach(values, function(value) {
          maxValue = Math.max(parseFloat(value) || 0, maxValue);
        });
        return maxValue;
      }

      function getCacheKey(element) {
        var parentElement = element.parent();
        var parentID = parentElement.data(NG_ANIMATE_PARENT_KEY);
        if (!parentID) {
          parentElement.data(NG_ANIMATE_PARENT_KEY, ++parentCounter);
          parentID = parentCounter;
        }
        return parentID + '-' + extractElementNode(element).getAttribute('class');
      }

      function animateSetup(animationEvent, element, className, styles) {
        var structural = ['ng-enter','ng-leave','ng-move'].indexOf(className) >= 0;

        var cacheKey = getCacheKey(element);
        var eventCacheKey = cacheKey + ' ' + className;
        var itemIndex = lookupCache[eventCacheKey] ? ++lookupCache[eventCacheKey].total : 0;

        var stagger = {};
        if (itemIndex > 0) {
          var staggerClassName = className + '-stagger';
          var staggerCacheKey = cacheKey + ' ' + staggerClassName;
          var applyClasses = !lookupCache[staggerCacheKey];

          applyClasses && $$jqLite.addClass(element, staggerClassName);

          stagger = getElementAnimationDetails(element, staggerCacheKey);

          applyClasses && $$jqLite.removeClass(element, staggerClassName);
        }

        $$jqLite.addClass(element, className);

        var formerData = element.data(NG_ANIMATE_CSS_DATA_KEY) || {};
        var timings = getElementAnimationDetails(element, eventCacheKey);
        var transitionDuration = timings.transitionDuration;
        var animationDuration = timings.animationDuration;

        if (structural && transitionDuration === 0 && animationDuration === 0) {
          $$jqLite.removeClass(element, className);
          return false;
        }

        var blockTransition = styles || (structural && transitionDuration > 0);
        var blockAnimation = animationDuration > 0 &&
                             stagger.animationDelay > 0 &&
                             stagger.animationDuration === 0;

        var closeAnimationFns = formerData.closeAnimationFns || [];
        element.data(NG_ANIMATE_CSS_DATA_KEY, {
          stagger: stagger,
          cacheKey: eventCacheKey,
          running: formerData.running || 0,
          itemIndex: itemIndex,
          blockTransition: blockTransition,
          closeAnimationFns: closeAnimationFns
        });

        var node = extractElementNode(element);

        if (blockTransition) {
          blockTransitions(node, true);
          if (styles) {
            element.css(styles);
          }
        }

        if (blockAnimation) {
          blockAnimations(node, true);
        }

        return true;
      }

      function animateRun(animationEvent, element, className, activeAnimationComplete, styles) {
        var node = extractElementNode(element);
        var elementData = element.data(NG_ANIMATE_CSS_DATA_KEY);
        if (node.getAttribute('class').indexOf(className) == -1 || !elementData) {
          activeAnimationComplete();
          return;
        }

        var activeClassName = '';
        var pendingClassName = '';
        forEach(className.split(' '), function(klass, i) {
          var prefix = (i > 0 ? ' ' : '') + klass;
          activeClassName += prefix + '-active';
          pendingClassName += prefix + '-pending';
        });

        var style = '';
        var appliedStyles = [];
        var itemIndex = elementData.itemIndex;
        var stagger = elementData.stagger;
        var staggerTime = 0;
        if (itemIndex > 0) {
          var transitionStaggerDelay = 0;
          if (stagger.transitionDelay > 0 && stagger.transitionDuration === 0) {
            transitionStaggerDelay = stagger.transitionDelay * itemIndex;
          }

          var animationStaggerDelay = 0;
          if (stagger.animationDelay > 0 && stagger.animationDuration === 0) {
            animationStaggerDelay = stagger.animationDelay * itemIndex;
            appliedStyles.push(CSS_PREFIX + 'animation-play-state');
          }

          staggerTime = Math.round(Math.max(transitionStaggerDelay, animationStaggerDelay) * 100) / 100;
        }

        if (!staggerTime) {
          $$jqLite.addClass(element, activeClassName);
          if (elementData.blockTransition) {
            blockTransitions(node, false);
          }
        }

        var eventCacheKey = elementData.cacheKey + ' ' + activeClassName;
        var timings = getElementAnimationDetails(element, eventCacheKey);
        var maxDuration = Math.max(timings.transitionDuration, timings.animationDuration);
        if (maxDuration === 0) {
          $$jqLite.removeClass(element, activeClassName);
          animateClose(element, className);
          activeAnimationComplete();
          return;
        }

        if (!staggerTime && styles && Object.keys(styles).length > 0) {
          if (!timings.transitionDuration) {
            element.css('transition', timings.animationDuration + 's linear all');
            appliedStyles.push('transition');
          }
          element.css(styles);
        }

        var maxDelay = Math.max(timings.transitionDelay, timings.animationDelay);
        var maxDelayTime = maxDelay * ONE_SECOND;

        if (appliedStyles.length > 0) {
          //the element being animated may sometimes contain comment nodes in
          //the jqLite object, so we're safe to use a single variable to house
          //the styles since there is always only one element being animated
          var oldStyle = node.getAttribute('style') || '';
          if (oldStyle.charAt(oldStyle.length - 1) !== ';') {
            oldStyle += ';';
          }
          node.setAttribute('style', oldStyle + ' ' + style);
        }

        var startTime = Date.now();
        var css3AnimationEvents = ANIMATIONEND_EVENT + ' ' + TRANSITIONEND_EVENT;
        var animationTime     = (maxDelay + maxDuration) * CLOSING_TIME_BUFFER;
        var totalTime         = (staggerTime + animationTime) * ONE_SECOND;

        var staggerTimeout;
        if (staggerTime > 0) {
          $$jqLite.addClass(element, pendingClassName);
          staggerTimeout = $timeout(function() {
            staggerTimeout = null;

            if (timings.transitionDuration > 0) {
              blockTransitions(node, false);
            }
            if (timings.animationDuration > 0) {
              blockAnimations(node, false);
            }

            $$jqLite.addClass(element, activeClassName);
            $$jqLite.removeClass(element, pendingClassName);

            if (styles) {
              if (timings.transitionDuration === 0) {
                element.css('transition', timings.animationDuration + 's linear all');
              }
              element.css(styles);
              appliedStyles.push('transition');
            }
          }, staggerTime * ONE_SECOND, false);
        }

        element.on(css3AnimationEvents, onAnimationProgress);
        elementData.closeAnimationFns.push(function() {
          onEnd();
          activeAnimationComplete();
        });

        elementData.running++;
        animationCloseHandler(element, totalTime);
        return onEnd;

        // This will automatically be called by $animate so
        // there is no need to attach this internally to the
        // timeout done method.
        function onEnd() {
          element.off(css3AnimationEvents, onAnimationProgress);
          $$jqLite.removeClass(element, activeClassName);
          $$jqLite.removeClass(element, pendingClassName);
          if (staggerTimeout) {
            $timeout.cancel(staggerTimeout);
          }
          animateClose(element, className);
          var node = extractElementNode(element);
          for (var i in appliedStyles) {
            node.style.removeProperty(appliedStyles[i]);
          }
        }

        function onAnimationProgress(event) {
          event.stopPropagation();
          var ev = event.originalEvent || event;
          var timeStamp = ev.$manualTimeStamp || ev.timeStamp || Date.now();

          /* Firefox (or possibly just Gecko) likes to not round values up
           * when a ms measurement is used for the animation */
          var elapsedTime = parseFloat(ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES));

          /* $manualTimeStamp is a mocked timeStamp value which is set
           * within browserTrigger(). This is only here so that tests can
           * mock animations properly. Real events fallback to event.timeStamp,
           * or, if they don't, then a timeStamp is automatically created for them.
           * We're checking to see if the timeStamp surpasses the expected delay,
           * but we're using elapsedTime instead of the timeStamp on the 2nd
           * pre-condition since animations sometimes close off early */
          if (Math.max(timeStamp - startTime, 0) >= maxDelayTime && elapsedTime >= maxDuration) {
            activeAnimationComplete();
          }
        }
      }

      function blockTransitions(node, bool) {
        node.style[TRANSITION_PROP + PROPERTY_KEY] = bool ? 'none' : '';
      }

      function blockAnimations(node, bool) {
        node.style[ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY] = bool ? 'paused' : '';
      }

      function animateBefore(animationEvent, element, className, styles) {
        if (animateSetup(animationEvent, element, className, styles)) {
          return function(cancelled) {
            cancelled && animateClose(element, className);
          };
        }
      }

      function animateAfter(animationEvent, element, className, afterAnimationComplete, styles) {
        if (element.data(NG_ANIMATE_CSS_DATA_KEY)) {
          return animateRun(animationEvent, element, className, afterAnimationComplete, styles);
        } else {
          animateClose(element, className);
          afterAnimationComplete();
        }
      }

      function animate(animationEvent, element, className, animationComplete, options) {
        //If the animateSetup function doesn't bother returning a
        //cancellation function then it means that there is no animation
        //to perform at all
        var preReflowCancellation = animateBefore(animationEvent, element, className, options.from);
        if (!preReflowCancellation) {
          clearCacheAfterReflow();
          animationComplete();
          return;
        }

        //There are two cancellation functions: one is before the first
        //reflow animation and the second is during the active state
        //animation. The first function will take care of removing the
        //data from the element which will not make the 2nd animation
        //happen in the first place
        var cancel = preReflowCancellation;
        afterReflow(element, function() {
          //once the reflow is complete then we point cancel to
          //the new cancellation function which will remove all of the
          //animation properties from the active animation
          cancel = animateAfter(animationEvent, element, className, animationComplete, options.to);
        });

        return function(cancelled) {
          (cancel || noop)(cancelled);
        };
      }

      function animateClose(element, className) {
        $$jqLite.removeClass(element, className);
        var data = element.data(NG_ANIMATE_CSS_DATA_KEY);
        if (data) {
          if (data.running) {
            data.running--;
          }
          if (!data.running || data.running === 0) {
            element.removeData(NG_ANIMATE_CSS_DATA_KEY);
          }
        }
      }

      return {
        animate: function(element, className, from, to, animationCompleted, options) {
          options = options || {};
          options.from = from;
          options.to = to;
          return animate('animate', element, className, animationCompleted, options);
        },

        enter: function(element, animationCompleted, options) {
          options = options || {};
          return animate('enter', element, 'ng-enter', animationCompleted, options);
        },

        leave: function(element, animationCompleted, options) {
          options = options || {};
          return animate('leave', element, 'ng-leave', animationCompleted, options);
        },

        move: function(element, animationCompleted, options) {
          options = options || {};
          return animate('move', element, 'ng-move', animationCompleted, options);
        },

        beforeSetClass: function(element, add, remove, animationCompleted, options) {
          options = options || {};
          var className = suffixClasses(remove, '-remove') + ' ' +
                          suffixClasses(add, '-add');
          var cancellationMethod = animateBefore('setClass', element, className, options.from);
          if (cancellationMethod) {
            afterReflow(element, animationCompleted);
            return cancellationMethod;
          }
          clearCacheAfterReflow();
          animationCompleted();
        },

        beforeAddClass: function(element, className, animationCompleted, options) {
          options = options || {};
          var cancellationMethod = animateBefore('addClass', element, suffixClasses(className, '-add'), options.from);
          if (cancellationMethod) {
            afterReflow(element, animationCompleted);
            return cancellationMethod;
          }
          clearCacheAfterReflow();
          animationCompleted();
        },

        beforeRemoveClass: function(element, className, animationCompleted, options) {
          options = options || {};
          var cancellationMethod = animateBefore('removeClass', element, suffixClasses(className, '-remove'), options.from);
          if (cancellationMethod) {
            afterReflow(element, animationCompleted);
            return cancellationMethod;
          }
          clearCacheAfterReflow();
          animationCompleted();
        },

        setClass: function(element, add, remove, animationCompleted, options) {
          options = options || {};
          remove = suffixClasses(remove, '-remove');
          add = suffixClasses(add, '-add');
          var className = remove + ' ' + add;
          return animateAfter('setClass', element, className, animationCompleted, options.to);
        },

        addClass: function(element, className, animationCompleted, options) {
          options = options || {};
          return animateAfter('addClass', element, suffixClasses(className, '-add'), animationCompleted, options.to);
        },

        removeClass: function(element, className, animationCompleted, options) {
          options = options || {};
          return animateAfter('removeClass', element, suffixClasses(className, '-remove'), animationCompleted, options.to);
        }
      };

      function suffixClasses(classes, suffix) {
        var className = '';
        classes = isArray(classes) ? classes : classes.split(/\s+/);
        forEach(classes, function(klass, i) {
          if (klass && klass.length > 0) {
            className += (i > 0 ? ' ' : '') + klass + suffix;
          }
        });
        return className;
      }
    }]);
  }]);


})(window, window.angular);

/**
 * @license AngularJS v1.3.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/**
 * @ngdoc module
 * @name ngCookies
 * @description
 *
 * # ngCookies
 *
 * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.
 *
 *
 * <div doc-module-components="ngCookies"></div>
 *
 * See {@link ngCookies.$cookies `$cookies`} and
 * {@link ngCookies.$cookieStore `$cookieStore`} for usage.
 */


angular.module('ngCookies', ['ng']).
  /**
   * @ngdoc service
   * @name $cookies
   *
   * @description
   * Provides read/write access to browser's cookies.
   *
   * Only a simple Object is exposed and by adding or removing properties to/from this object, new
   * cookies are created/deleted at the end of current $eval.
   * The object's properties can only be strings.
   *
   * Requires the {@link ngCookies `ngCookies`} module to be installed.
   *
   * @example
   *
   * ```js
   * angular.module('cookiesExample', ['ngCookies'])
   *   .controller('ExampleController', ['$cookies', function($cookies) {
   *     // Retrieving a cookie
   *     var favoriteCookie = $cookies.myFavorite;
   *     // Setting a cookie
   *     $cookies.myFavorite = 'oatmeal';
   *   }]);
   * ```
   */
   factory('$cookies', ['$rootScope', '$browser', function($rootScope, $browser) {
      var cookies = {},
          lastCookies = {},
          lastBrowserCookies,
          runEval = false,
          copy = angular.copy,
          isUndefined = angular.isUndefined;

      //creates a poller fn that copies all cookies from the $browser to service & inits the service
      $browser.addPollFn(function() {
        var currentCookies = $browser.cookies();
        if (lastBrowserCookies != currentCookies) { //relies on browser.cookies() impl
          lastBrowserCookies = currentCookies;
          copy(currentCookies, lastCookies);
          copy(currentCookies, cookies);
          if (runEval) $rootScope.$apply();
        }
      })();

      runEval = true;

      //at the end of each eval, push cookies
      //TODO: this should happen before the "delayed" watches fire, because if some cookies are not
      //      strings or browser refuses to store some cookies, we update the model in the push fn.
      $rootScope.$watch(push);

      return cookies;


      /**
       * Pushes all the cookies from the service to the browser and verifies if all cookies were
       * stored.
       */
      function push() {
        var name,
            value,
            browserCookies,
            updated;

        //delete any cookies deleted in $cookies
        for (name in lastCookies) {
          if (isUndefined(cookies[name])) {
            $browser.cookies(name, undefined);
            delete lastCookies[name];
          }
        }

        //update all cookies updated in $cookies
        for (name in cookies) {
          value = cookies[name];
          if (!angular.isString(value)) {
            value = '' + value;
            cookies[name] = value;
          }
          if (value !== lastCookies[name]) {
            $browser.cookies(name, value);
            lastCookies[name] = value;
            updated = true;
          }
        }

        //verify what was actually stored
        if (updated) {
          browserCookies = $browser.cookies();

          for (name in cookies) {
            if (cookies[name] !== browserCookies[name]) {
              //delete or reset all cookies that the browser dropped from $cookies
              if (isUndefined(browserCookies[name])) {
                delete cookies[name];
                delete lastCookies[name];
              } else {
                cookies[name] = lastCookies[name] = browserCookies[name];
              }
            }
          }
        }
      }
    }]).


  /**
   * @ngdoc service
   * @name $cookieStore
   * @requires $cookies
   *
   * @description
   * Provides a key-value (string-object) storage, that is backed by session cookies.
   * Objects put or retrieved from this storage are automatically serialized or
   * deserialized by angular's toJson/fromJson.
   *
   * Requires the {@link ngCookies `ngCookies`} module to be installed.
   *
   * @example
   *
   * ```js
   * angular.module('cookieStoreExample', ['ngCookies'])
   *   .controller('ExampleController', ['$cookieStore', function($cookieStore) {
   *     // Put cookie
   *     $cookieStore.put('myFavorite','oatmeal');
   *     // Get cookie
   *     var favoriteCookie = $cookieStore.get('myFavorite');
   *     // Removing a cookie
   *     $cookieStore.remove('myFavorite');
   *   }]);
   * ```
   */
   factory('$cookieStore', ['$cookies', function($cookies) {

      return {
        /**
         * @ngdoc method
         * @name $cookieStore#get
         *
         * @description
         * Returns the value of given cookie key
         *
         * @param {string} key Id to use for lookup.
         * @returns {Object} Deserialized cookie value.
         */
        get: function(key) {
          var value = $cookies[key];
          return value ? angular.fromJson(value) : value;
        },

        /**
         * @ngdoc method
         * @name $cookieStore#put
         *
         * @description
         * Sets a value for given cookie key
         *
         * @param {string} key Id for the `value`.
         * @param {Object} value Value to be stored.
         */
        put: function(key, value) {
          $cookies[key] = angular.toJson(value);
        },

        /**
         * @ngdoc method
         * @name $cookieStore#remove
         *
         * @description
         * Remove given cookie
         *
         * @param {string} key Id of the key-value pair to delete.
         */
        remove: function(key) {
          delete $cookies[key];
        }
      };

    }]);


})(window, window.angular);

/**
 * @license AngularJS v1.3.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

var $resourceMinErr = angular.$$minErr('$resource');

// Helper functions and regex to lookup a dotted path on an object
// stopping at undefined/null.  The path must be composed of ASCII
// identifiers (just like $parse)
var MEMBER_NAME_REGEX = /^(\.[a-zA-Z_$][0-9a-zA-Z_$]*)+$/;

function isValidDottedPath(path) {
  return (path != null && path !== '' && path !== 'hasOwnProperty' &&
      MEMBER_NAME_REGEX.test('.' + path));
}

function lookupDottedPath(obj, path) {
  if (!isValidDottedPath(path)) {
    throw $resourceMinErr('badmember', 'Dotted member path "@{0}" is invalid.', path);
  }
  var keys = path.split('.');
  for (var i = 0, ii = keys.length; i < ii && obj !== undefined; i++) {
    var key = keys[i];
    obj = (obj !== null) ? obj[key] : undefined;
  }
  return obj;
}

/**
 * Create a shallow copy of an object and clear other fields from the destination
 */
function shallowClearAndCopy(src, dst) {
  dst = dst || {};

  angular.forEach(dst, function(value, key) {
    delete dst[key];
  });

  for (var key in src) {
    if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {
      dst[key] = src[key];
    }
  }

  return dst;
}

/**
 * @ngdoc module
 * @name ngResource
 * @description
 *
 * # ngResource
 *
 * The `ngResource` module provides interaction support with RESTful services
 * via the $resource service.
 *
 *
 * <div doc-module-components="ngResource"></div>
 *
 * See {@link ngResource.$resource `$resource`} for usage.
 */

/**
 * @ngdoc service
 * @name $resource
 * @requires $http
 *
 * @description
 * A factory which creates a resource object that lets you interact with
 * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.
 *
 * The returned resource object has action methods which provide high-level behaviors without
 * the need to interact with the low level {@link ng.$http $http} service.
 *
 * Requires the {@link ngResource `ngResource`} module to be installed.
 *
 * By default, trailing slashes will be stripped from the calculated URLs,
 * which can pose problems with server backends that do not expect that
 * behavior.  This can be disabled by configuring the `$resourceProvider` like
 * this:
 *
 * ```js
     app.config(['$resourceProvider', function($resourceProvider) {
       // Don't strip trailing slashes from calculated URLs
       $resourceProvider.defaults.stripTrailingSlashes = false;
     }]);
 * ```
 *
 * @param {string} url A parametrized URL template with parameters prefixed by `:` as in
 *   `/user/:username`. If you are using a URL with a port number (e.g.
 *   `http://example.com:8080/api`), it will be respected.
 *
 *   If you are using a url with a suffix, just add the suffix, like this:
 *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`
 *   or even `$resource('http://example.com/resource/:resource_id.:format')`
 *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be
 *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you
 *   can escape it with `/\.`.
 *
 * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in
 *   `actions` methods. If any of the parameter value is a function, it will be executed every time
 *   when a param value needs to be obtained for a request (unless the param was overridden).
 *
 *   Each key value in the parameter object is first bound to url template if present and then any
 *   excess keys are appended to the url search query after the `?`.
 *
 *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in
 *   URL `/path/greet?salutation=Hello`.
 *
 *   If the parameter value is prefixed with `@` then the value for that parameter will be extracted
 *   from the corresponding property on the `data` object (provided when calling an action method).  For
 *   example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of `someParam`
 *   will be `data.someProp`.
 *
 * @param {Object.<Object>=} actions Hash with declaration of custom actions that should extend
 *   the default set of resource actions. The declaration should be created in the format of {@link
 *   ng.$http#usage $http.config}:
 *
 *       {action1: {method:?, params:?, isArray:?, headers:?, ...},
 *        action2: {method:?, params:?, isArray:?, headers:?, ...},
 *        ...}
 *
 *   Where:
 *
 *   - **`action`** – {string} – The name of action. This name becomes the name of the method on
 *     your resource object.
 *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,
 *     `DELETE`, `JSONP`, etc).
 *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of
 *     the parameter value is a function, it will be executed every time when a param value needs to
 *     be obtained for a request (unless the param was overridden).
 *   - **`url`** – {string} – action specific `url` override. The url templating is supported just
 *     like for the resource-level urls.
 *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,
 *     see `returns` section.
 *   - **`transformRequest`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     request body and headers and returns its transformed (typically serialized) version.
 *     By default, transformRequest will contain one function that checks if the request data is
 *     an object and serializes to using `angular.toJson`. To prevent this behavior, set
 *     `transformRequest` to an empty array: `transformRequest: []`
 *   - **`transformResponse`** –
 *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –
 *     transform function or an array of such functions. The transform function takes the http
 *     response body and headers and returns its transformed (typically deserialized) version.
 *     By default, transformResponse will contain one function that checks if the response looks like
 *     a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior, set
 *     `transformResponse` to an empty array: `transformResponse: []`
 *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the
 *     GET request, otherwise if a cache instance built with
 *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for
 *     caching.
 *   - **`timeout`** – `{number|Promise}` – timeout in milliseconds, or {@link ng.$q promise} that
 *     should abort the request when resolved.
 *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the
 *     XHR object. See
 *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)
 *     for more information.
 *   - **`responseType`** - `{string}` - see
 *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).
 *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -
 *     `response` and `responseError`. Both `response` and `responseError` interceptors get called
 *     with `http response` object. See {@link ng.$http $http interceptors}.
 *
 * @param {Object} options Hash with custom settings that should extend the
 *   default `$resourceProvider` behavior.  The only supported option is
 *
 *   Where:
 *
 *   - **`stripTrailingSlashes`** – {boolean} – If true then the trailing
 *   slashes from any calculated URL will be stripped. (Defaults to true.)
 *
 * @returns {Object} A resource "class" object with methods for the default set of resource actions
 *   optionally extended with custom `actions`. The default set contains these actions:
 *   ```js
 *   { 'get':    {method:'GET'},
 *     'save':   {method:'POST'},
 *     'query':  {method:'GET', isArray:true},
 *     'remove': {method:'DELETE'},
 *     'delete': {method:'DELETE'} };
 *   ```
 *
 *   Calling these methods invoke an {@link ng.$http} with the specified http method,
 *   destination and parameters. When the data is returned from the server then the object is an
 *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it
 *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,
 *   read, update, delete) on server-side data like this:
 *   ```js
 *   var User = $resource('/user/:userId', {userId:'@id'});
 *   var user = User.get({userId:123}, function() {
 *     user.abc = true;
 *     user.$save();
 *   });
 *   ```
 *
 *   It is important to realize that invoking a $resource object method immediately returns an
 *   empty reference (object or array depending on `isArray`). Once the data is returned from the
 *   server the existing reference is populated with the actual data. This is a useful trick since
 *   usually the resource is assigned to a model which is then rendered by the view. Having an empty
 *   object results in no rendering, once the data arrives from the server then the object is
 *   populated with the data and the view automatically re-renders itself showing the new data. This
 *   means that in most cases one never has to write a callback function for the action methods.
 *
 *   The action methods on the class object or instance object can be invoked with the following
 *   parameters:
 *
 *   - HTTP GET "class" actions: `Resource.action([parameters], [success], [error])`
 *   - non-GET "class" actions: `Resource.action([parameters], postData, [success], [error])`
 *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`
 *
 *
 *   Success callback is called with (value, responseHeaders) arguments. Error callback is called
 *   with (httpResponse) argument.
 *
 *   Class actions return empty instance (with additional properties below).
 *   Instance actions return promise of the action.
 *
 *   The Resource instances and collection have these additional properties:
 *
 *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this
 *     instance or collection.
 *
 *     On success, the promise is resolved with the same resource instance or collection object,
 *     updated with data from server. This makes it easy to use in
 *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view
 *     rendering until the resource(s) are loaded.
 *
 *     On failure, the promise is resolved with the {@link ng.$http http response} object, without
 *     the `resource` property.
 *
 *     If an interceptor object was provided, the promise will instead be resolved with the value
 *     returned by the interceptor.
 *
 *   - `$resolved`: `true` after first server interaction is completed (either with success or
 *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in
 *      data-binding.
 *
 * @example
 *
 * # Credit card resource
 *
 * ```js
     // Define CreditCard class
     var CreditCard = $resource('/user/:userId/card/:cardId',
      {userId:123, cardId:'@id'}, {
       charge: {method:'POST', params:{charge:true}}
      });

     // We can retrieve a collection from the server
     var cards = CreditCard.query(function() {
       // GET: /user/123/card
       // server returns: [ {id:456, number:'1234', name:'Smith'} ];

       var card = cards[0];
       // each item is an instance of CreditCard
       expect(card instanceof CreditCard).toEqual(true);
       card.name = "J. Smith";
       // non GET methods are mapped onto the instances
       card.$save();
       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}
       // server returns: {id:456, number:'1234', name: 'J. Smith'};

       // our custom method is mapped as well.
       card.$charge({amount:9.99});
       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}
     });

     // we can create an instance as well
     var newCard = new CreditCard({number:'0123'});
     newCard.name = "Mike Smith";
     newCard.$save();
     // POST: /user/123/card {number:'0123', name:'Mike Smith'}
     // server returns: {id:789, number:'0123', name: 'Mike Smith'};
     expect(newCard.id).toEqual(789);
 * ```
 *
 * The object returned from this function execution is a resource "class" which has "static" method
 * for each action in the definition.
 *
 * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and
 * `headers`.
 * When the data is returned from the server then the object is an instance of the resource type and
 * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD
 * operations (create, read, update, delete) on server-side data.

   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(user) {
       user.abc = true;
       user.$save();
     });
   ```
 *
 * It's worth noting that the success callback for `get`, `query` and other methods gets passed
 * in the response that came from the server as well as $http header getter function, so one
 * could rewrite the above example and get access to http headers as:
 *
   ```js
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123}, function(u, getResponseHeaders){
       u.abc = true;
       u.$save(function(u, putResponseHeaders) {
         //u => saved user object
         //putResponseHeaders => $http header getter
       });
     });
   ```
 *
 * You can also access the raw `$http` promise via the `$promise` property on the object returned
 *
   ```
     var User = $resource('/user/:userId', {userId:'@id'});
     User.get({userId:123})
         .$promise.then(function(user) {
           $scope.user = user;
         });
   ```

 * # Creating a custom 'PUT' request
 * In this example we create a custom method on our resource to make a PUT request
 * ```js
 *    var app = angular.module('app', ['ngResource', 'ngRoute']);
 *
 *    // Some APIs expect a PUT request in the format URL/object/ID
 *    // Here we are creating an 'update' method
 *    app.factory('Notes', ['$resource', function($resource) {
 *    return $resource('/notes/:id', null,
 *        {
 *            'update': { method:'PUT' }
 *        });
 *    }]);
 *
 *    // In our controller we get the ID from the URL using ngRoute and $routeParams
 *    // We pass in $routeParams and our Notes factory along with $scope
 *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',
                                      function($scope, $routeParams, Notes) {
 *    // First get a note object from the factory
 *    var note = Notes.get({ id:$routeParams.id });
 *    $id = note.id;
 *
 *    // Now call update passing in the ID first then the object you are updating
 *    Notes.update({ id:$id }, note);
 *
 *    // This will PUT /notes/ID with the note object in the request payload
 *    }]);
 * ```
 */
angular.module('ngResource', ['ng']).
  provider('$resource', function() {
    var provider = this;

    this.defaults = {
      // Strip slashes by default
      stripTrailingSlashes: true,

      // Default actions configuration
      actions: {
        'get': {method: 'GET'},
        'save': {method: 'POST'},
        'query': {method: 'GET', isArray: true},
        'remove': {method: 'DELETE'},
        'delete': {method: 'DELETE'}
      }
    };

    this.$get = ['$http', '$q', function($http, $q) {

      var noop = angular.noop,
        forEach = angular.forEach,
        extend = angular.extend,
        copy = angular.copy,
        isFunction = angular.isFunction;

      /**
       * We need our custom method because encodeURIComponent is too aggressive and doesn't follow
       * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set
       * (pchar) allowed in path segments:
       *    segment       = *pchar
       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
       *    pct-encoded   = "%" HEXDIG HEXDIG
       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
       *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
       *                     / "*" / "+" / "," / ";" / "="
       */
      function encodeUriSegment(val) {
        return encodeUriQuery(val, true).
          replace(/%26/gi, '&').
          replace(/%3D/gi, '=').
          replace(/%2B/gi, '+');
      }


      /**
       * This method is intended for encoding *key* or *value* parts of query component. We need a
       * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't
       * have to be encoded per http://tools.ietf.org/html/rfc3986:
       *    query       = *( pchar / "/" / "?" )
       *    pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
       *    unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
       *    pct-encoded   = "%" HEXDIG HEXDIG
       *    sub-delims    = "!" / "$" / "&" / "'" / "(" / ")"
       *                     / "*" / "+" / "," / ";" / "="
       */
      function encodeUriQuery(val, pctEncodeSpaces) {
        return encodeURIComponent(val).
          replace(/%40/gi, '@').
          replace(/%3A/gi, ':').
          replace(/%24/g, '$').
          replace(/%2C/gi, ',').
          replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));
      }

      function Route(template, defaults) {
        this.template = template;
        this.defaults = extend({}, provider.defaults, defaults);
        this.urlParams = {};
      }

      Route.prototype = {
        setUrlParams: function(config, params, actionUrl) {
          var self = this,
            url = actionUrl || self.template,
            val,
            encodedVal;

          var urlParams = self.urlParams = {};
          forEach(url.split(/\W/), function(param) {
            if (param === 'hasOwnProperty') {
              throw $resourceMinErr('badname', "hasOwnProperty is not a valid parameter name.");
            }
            if (!(new RegExp("^\\d+$").test(param)) && param &&
              (new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url))) {
              urlParams[param] = true;
            }
          });
          url = url.replace(/\\:/g, ':');

          params = params || {};
          forEach(self.urlParams, function(_, urlParam) {
            val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];
            if (angular.isDefined(val) && val !== null) {
              encodedVal = encodeUriSegment(val);
              url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function(match, p1) {
                return encodedVal + p1;
              });
            } else {
              url = url.replace(new RegExp("(\/?):" + urlParam + "(\\W|$)", "g"), function(match,
                  leadingSlashes, tail) {
                if (tail.charAt(0) == '/') {
                  return tail;
                } else {
                  return leadingSlashes + tail;
                }
              });
            }
          });

          // strip trailing slashes and set the url (unless this behavior is specifically disabled)
          if (self.defaults.stripTrailingSlashes) {
            url = url.replace(/\/+$/, '') || '/';
          }

          // then replace collapse `/.` if found in the last URL path segment before the query
          // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`
          url = url.replace(/\/\.(?=\w+($|\?))/, '.');
          // replace escaped `/\.` with `/.`
          config.url = url.replace(/\/\\\./, '/.');


          // set params - delegate param encoding to $http
          forEach(params, function(value, key) {
            if (!self.urlParams[key]) {
              config.params = config.params || {};
              config.params[key] = value;
            }
          });
        }
      };


      function resourceFactory(url, paramDefaults, actions, options) {
        var route = new Route(url, options);

        actions = extend({}, provider.defaults.actions, actions);

        function extractParams(data, actionParams) {
          var ids = {};
          actionParams = extend({}, paramDefaults, actionParams);
          forEach(actionParams, function(value, key) {
            if (isFunction(value)) { value = value(); }
            ids[key] = value && value.charAt && value.charAt(0) == '@' ?
              lookupDottedPath(data, value.substr(1)) : value;
          });
          return ids;
        }

        function defaultResponseInterceptor(response) {
          return response.resource;
        }

        function Resource(value) {
          shallowClearAndCopy(value || {}, this);
        }

        Resource.prototype.toJSON = function() {
          var data = extend({}, this);
          delete data.$promise;
          delete data.$resolved;
          return data;
        };

        forEach(actions, function(action, name) {
          var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);

          Resource[name] = function(a1, a2, a3, a4) {
            var params = {}, data, success, error;

            /* jshint -W086 */ /* (purposefully fall through case statements) */
            switch (arguments.length) {
              case 4:
                error = a4;
                success = a3;
              //fallthrough
              case 3:
              case 2:
                if (isFunction(a2)) {
                  if (isFunction(a1)) {
                    success = a1;
                    error = a2;
                    break;
                  }

                  success = a2;
                  error = a3;
                  //fallthrough
                } else {
                  params = a1;
                  data = a2;
                  success = a3;
                  break;
                }
              case 1:
                if (isFunction(a1)) success = a1;
                else if (hasBody) data = a1;
                else params = a1;
                break;
              case 0: break;
              default:
                throw $resourceMinErr('badargs',
                  "Expected up to 4 arguments [params, data, success, error], got {0} arguments",
                  arguments.length);
            }
            /* jshint +W086 */ /* (purposefully fall through case statements) */

            var isInstanceCall = this instanceof Resource;
            var value = isInstanceCall ? data : (action.isArray ? [] : new Resource(data));
            var httpConfig = {};
            var responseInterceptor = action.interceptor && action.interceptor.response ||
              defaultResponseInterceptor;
            var responseErrorInterceptor = action.interceptor && action.interceptor.responseError ||
              undefined;

            forEach(action, function(value, key) {
              if (key != 'params' && key != 'isArray' && key != 'interceptor') {
                httpConfig[key] = copy(value);
              }
            });

            if (hasBody) httpConfig.data = data;
            route.setUrlParams(httpConfig,
              extend({}, extractParams(data, action.params || {}), params),
              action.url);

            var promise = $http(httpConfig).then(function(response) {
              var data = response.data,
                promise = value.$promise;

              if (data) {
                // Need to convert action.isArray to boolean in case it is undefined
                // jshint -W018
                if (angular.isArray(data) !== (!!action.isArray)) {
                  throw $resourceMinErr('badcfg',
                      'Error in resource configuration for action `{0}`. Expected response to ' +
                      'contain an {1} but got an {2}', name, action.isArray ? 'array' : 'object',
                    angular.isArray(data) ? 'array' : 'object');
                }
                // jshint +W018
                if (action.isArray) {
                  value.length = 0;
                  forEach(data, function(item) {
                    if (typeof item === "object") {
                      value.push(new Resource(item));
                    } else {
                      // Valid JSON values may be string literals, and these should not be converted
                      // into objects. These items will not have access to the Resource prototype
                      // methods, but unfortunately there
                      value.push(item);
                    }
                  });
                } else {
                  shallowClearAndCopy(data, value);
                  value.$promise = promise;
                }
              }

              value.$resolved = true;

              response.resource = value;

              return response;
            }, function(response) {
              value.$resolved = true;

              (error || noop)(response);

              return $q.reject(response);
            });

            promise = promise.then(
              function(response) {
                var value = responseInterceptor(response);
                (success || noop)(value, response.headers);
                return value;
              },
              responseErrorInterceptor);

            if (!isInstanceCall) {
              // we are creating instance / collection
              // - set the initial promise
              // - return the instance / collection
              value.$promise = promise;
              value.$resolved = false;

              return value;
            }

            // instance call
            return promise;
          };


          Resource.prototype['$' + name] = function(params, success, error) {
            if (isFunction(params)) {
              error = success; success = params; params = {};
            }
            var result = Resource[name].call(this, params, this, success, error);
            return result.$promise || result;
          };
        });

        Resource.bind = function(additionalParamDefaults) {
          return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);
        };

        return Resource;
      }

      return resourceFactory;
    }];
  });


})(window, window.angular);

/**
 * @license AngularJS v1.3.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *     Any commits to this file should be reviewed with security in mind.  *
 *   Changes to this file can potentially create security vulnerabilities. *
 *          An approval from 2 Core members with history of modifying      *
 *                         this file is required.                          *
 *                                                                         *
 *  Does the change somehow allow for arbitrary javascript to be executed? *
 *    Or allows for someone to change the prototype of built-in objects?   *
 *     Or gives undesired access to variables likes document or window?    *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

var $sanitizeMinErr = angular.$$minErr('$sanitize');

/**
 * @ngdoc module
 * @name ngSanitize
 * @description
 *
 * # ngSanitize
 *
 * The `ngSanitize` module provides functionality to sanitize HTML.
 *
 *
 * <div doc-module-components="ngSanitize"></div>
 *
 * See {@link ngSanitize.$sanitize `$sanitize`} for usage.
 */

/*
 * HTML Parser By Misko Hevery (misko@hevery.com)
 * based on:  HTML Parser By John Resig (ejohn.org)
 * Original code by Erik Arvidsson, Mozilla Public License
 * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js
 *
 * // Use like so:
 * htmlParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 */


/**
 * @ngdoc service
 * @name $sanitize
 * @kind function
 *
 * @description
 *   The input is sanitized by parsing the HTML into tokens. All safe tokens (from a whitelist) are
 *   then serialized back to properly escaped html string. This means that no unsafe input can make
 *   it into the returned string, however, since our parser is more strict than a typical browser
 *   parser, it's possible that some obscure input, which would be recognized as valid HTML by a
 *   browser, won't make it through the sanitizer. The input may also contain SVG markup.
 *   The whitelist is configured using the functions `aHrefSanitizationWhitelist` and
 *   `imgSrcSanitizationWhitelist` of {@link ng.$compileProvider `$compileProvider`}.
 *
 * @param {string} html HTML input.
 * @returns {string} Sanitized HTML.
 *
 * @example
   <example module="sanitizeExample" deps="angular-sanitize.js">
   <file name="index.html">
     <script>
         angular.module('sanitizeExample', ['ngSanitize'])
           .controller('ExampleController', ['$scope', '$sce', function($scope, $sce) {
             $scope.snippet =
               '<p style="color:blue">an html\n' +
               '<em onmouseover="this.textContent=\'PWN3D!\'">click here</em>\n' +
               'snippet</p>';
             $scope.deliberatelyTrustDangerousSnippet = function() {
               return $sce.trustAsHtml($scope.snippet);
             };
           }]);
     </script>
     <div ng-controller="ExampleController">
        Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <td>Directive</td>
           <td>How</td>
           <td>Source</td>
           <td>Rendered</td>
         </tr>
         <tr id="bind-html-with-sanitize">
           <td>ng-bind-html</td>
           <td>Automatically uses $sanitize</td>
           <td><pre>&lt;div ng-bind-html="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind-html="snippet"></div></td>
         </tr>
         <tr id="bind-html-with-trust">
           <td>ng-bind-html</td>
           <td>Bypass $sanitize by explicitly trusting the dangerous value</td>
           <td>
           <pre>&lt;div ng-bind-html="deliberatelyTrustDangerousSnippet()"&gt;
&lt;/div&gt;</pre>
           </td>
           <td><div ng-bind-html="deliberatelyTrustDangerousSnippet()"></div></td>
         </tr>
         <tr id="bind-default">
           <td>ng-bind</td>
           <td>Automatically escapes</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br/>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
       </div>
   </file>
   <file name="protractor.js" type="protractor">
     it('should sanitize the html snippet by default', function() {
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('<p>an html\n<em>click here</em>\nsnippet</p>');
     });

     it('should inline raw snippet if bound to a trusted value', function() {
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).
         toBe("<p style=\"color:blue\">an html\n" +
              "<em onmouseover=\"this.textContent='PWN3D!'\">click here</em>\n" +
              "snippet</p>");
     });

     it('should escape snippet without any filter', function() {
       expect(element(by.css('#bind-default div')).getInnerHtml()).
         toBe("&lt;p style=\"color:blue\"&gt;an html\n" +
              "&lt;em onmouseover=\"this.textContent='PWN3D!'\"&gt;click here&lt;/em&gt;\n" +
              "snippet&lt;/p&gt;");
     });

     it('should update', function() {
       element(by.model('snippet')).clear();
       element(by.model('snippet')).sendKeys('new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-html-with-sanitize div')).getInnerHtml()).
         toBe('new <b>text</b>');
       expect(element(by.css('#bind-html-with-trust div')).getInnerHtml()).toBe(
         'new <b onclick="alert(1)">text</b>');
       expect(element(by.css('#bind-default div')).getInnerHtml()).toBe(
         "new &lt;b onclick=\"alert(1)\"&gt;text&lt;/b&gt;");
     });
   </file>
   </example>
 */
function $SanitizeProvider() {
  this.$get = ['$$sanitizeUri', function($$sanitizeUri) {
    return function(html) {
      var buf = [];
      htmlParser(html, htmlSanitizeWriter(buf, function(uri, isImage) {
        return !/^unsafe/.test($$sanitizeUri(uri, isImage));
      }));
      return buf.join('');
    };
  }];
}

function sanitizeText(chars) {
  var buf = [];
  var writer = htmlSanitizeWriter(buf, angular.noop);
  writer.chars(chars);
  return buf.join('');
}


// Regular Expressions for parsing tags and attributes
var START_TAG_REGEXP =
       /^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,
  END_TAG_REGEXP = /^<\/\s*([\w:-]+)[^>]*>/,
  ATTR_REGEXP = /([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,
  BEGIN_TAG_REGEXP = /^</,
  BEGING_END_TAGE_REGEXP = /^<\//,
  COMMENT_REGEXP = /<!--(.*?)-->/g,
  DOCTYPE_REGEXP = /<!DOCTYPE([^>]*?)>/i,
  CDATA_REGEXP = /<!\[CDATA\[(.*?)]]>/g,
  SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
  // Match everything outside of normal chars and " (quote character)
  NON_ALPHANUMERIC_REGEXP = /([^\#-~| |!])/g;


// Good source of info about elements and attributes
// http://dev.w3.org/html5/spec/Overview.html#semantics
// http://simon.html5.org/html-elements

// Safe Void Elements - HTML5
// http://dev.w3.org/html5/spec/Overview.html#void-elements
var voidElements = makeMap("area,br,col,hr,img,wbr");

// Elements that you can, intentionally, leave open (and which close themselves)
// http://dev.w3.org/html5/spec/Overview.html#optional-tags
var optionalEndTagBlockElements = makeMap("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),
    optionalEndTagInlineElements = makeMap("rp,rt"),
    optionalEndTagElements = angular.extend({},
                                            optionalEndTagInlineElements,
                                            optionalEndTagBlockElements);

// Safe Block Elements - HTML5
var blockElements = angular.extend({}, optionalEndTagBlockElements, makeMap("address,article," +
        "aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5," +
        "h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul"));

// Inline Elements - HTML5
var inlineElements = angular.extend({}, optionalEndTagInlineElements, makeMap("a,abbr,acronym,b," +
        "bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s," +
        "samp,small,span,strike,strong,sub,sup,time,tt,u,var"));

// SVG Elements
// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Elements
var svgElements = makeMap("animate,animateColor,animateMotion,animateTransform,circle,defs," +
        "desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient," +
        "line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set," +
        "stop,svg,switch,text,title,tspan,use");

// Special Elements (can contain anything)
var specialElements = makeMap("script,style");

var validElements = angular.extend({},
                                   voidElements,
                                   blockElements,
                                   inlineElements,
                                   optionalEndTagElements,
                                   svgElements);

//Attributes that have href and hence need to be sanitized
var uriAttrs = makeMap("background,cite,href,longdesc,src,usemap,xlink:href");

var htmlAttrs = makeMap('abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,' +
    'color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,' +
    'ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,' +
    'scope,scrolling,shape,size,span,start,summary,target,title,type,' +
    'valign,value,vspace,width');

// SVG attributes (without "id" and "name" attributes)
// https://wiki.whatwg.org/wiki/Sanitization_rules#svg_Attributes
var svgAttrs = makeMap('accent-height,accumulate,additive,alphabetic,arabic-form,ascent,' +
    'attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,' +
    'color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,' +
    'font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,' +
    'gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,' +
    'keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,' +
    'markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,' +
    'overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,' +
    'repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,' +
    'stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,' +
    'stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,' +
    'stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,' +
    'underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,' +
    'viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,' +
    'xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,' +
    'zoomAndPan');

var validAttrs = angular.extend({},
                                uriAttrs,
                                svgAttrs,
                                htmlAttrs);

function makeMap(str) {
  var obj = {}, items = str.split(','), i;
  for (i = 0; i < items.length; i++) obj[items[i]] = true;
  return obj;
}


/**
 * @example
 * htmlParser(htmlString, {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * });
 *
 * @param {string} html string
 * @param {object} handler
 */
function htmlParser(html, handler) {
  if (typeof html !== 'string') {
    if (html === null || typeof html === 'undefined') {
      html = '';
    } else {
      html = '' + html;
    }
  }
  var index, chars, match, stack = [], last = html, text;
  stack.last = function() { return stack[stack.length - 1]; };

  while (html) {
    text = '';
    chars = true;

    // Make sure we're not in a script or style element
    if (!stack.last() || !specialElements[stack.last()]) {

      // Comment
      if (html.indexOf("<!--") === 0) {
        // comments containing -- are not allowed unless they terminate the comment
        index = html.indexOf("--", 4);

        if (index >= 0 && html.lastIndexOf("-->", index) === index) {
          if (handler.comment) handler.comment(html.substring(4, index));
          html = html.substring(index + 3);
          chars = false;
        }
      // DOCTYPE
      } else if (DOCTYPE_REGEXP.test(html)) {
        match = html.match(DOCTYPE_REGEXP);

        if (match) {
          html = html.replace(match[0], '');
          chars = false;
        }
      // end tag
      } else if (BEGING_END_TAGE_REGEXP.test(html)) {
        match = html.match(END_TAG_REGEXP);

        if (match) {
          html = html.substring(match[0].length);
          match[0].replace(END_TAG_REGEXP, parseEndTag);
          chars = false;
        }

      // start tag
      } else if (BEGIN_TAG_REGEXP.test(html)) {
        match = html.match(START_TAG_REGEXP);

        if (match) {
          // We only have a valid start-tag if there is a '>'.
          if (match[4]) {
            html = html.substring(match[0].length);
            match[0].replace(START_TAG_REGEXP, parseStartTag);
          }
          chars = false;
        } else {
          // no ending tag found --- this piece should be encoded as an entity.
          text += '<';
          html = html.substring(1);
        }
      }

      if (chars) {
        index = html.indexOf("<");

        text += index < 0 ? html : html.substring(0, index);
        html = index < 0 ? "" : html.substring(index);

        if (handler.chars) handler.chars(decodeEntities(text));
      }

    } else {
      // IE versions 9 and 10 do not understand the regex '[^]', so using a workaround with [\W\w].
      html = html.replace(new RegExp("([\\W\\w]*)<\\s*\\/\\s*" + stack.last() + "[^>]*>", 'i'),
        function(all, text) {
          text = text.replace(COMMENT_REGEXP, "$1").replace(CDATA_REGEXP, "$1");

          if (handler.chars) handler.chars(decodeEntities(text));

          return "";
      });

      parseEndTag("", stack.last());
    }

    if (html == last) {
      throw $sanitizeMinErr('badparse', "The sanitizer was unable to parse the following block " +
                                        "of html: {0}", html);
    }
    last = html;
  }

  // Clean up any remaining tags
  parseEndTag();

  function parseStartTag(tag, tagName, rest, unary) {
    tagName = angular.lowercase(tagName);
    if (blockElements[tagName]) {
      while (stack.last() && inlineElements[stack.last()]) {
        parseEndTag("", stack.last());
      }
    }

    if (optionalEndTagElements[tagName] && stack.last() == tagName) {
      parseEndTag("", tagName);
    }

    unary = voidElements[tagName] || !!unary;

    if (!unary)
      stack.push(tagName);

    var attrs = {};

    rest.replace(ATTR_REGEXP,
      function(match, name, doubleQuotedValue, singleQuotedValue, unquotedValue) {
        var value = doubleQuotedValue
          || singleQuotedValue
          || unquotedValue
          || '';

        attrs[name] = decodeEntities(value);
    });
    if (handler.start) handler.start(tagName, attrs, unary);
  }

  function parseEndTag(tag, tagName) {
    var pos = 0, i;
    tagName = angular.lowercase(tagName);
    if (tagName)
      // Find the closest opened tag of the same type
      for (pos = stack.length - 1; pos >= 0; pos--)
        if (stack[pos] == tagName)
          break;

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (i = stack.length - 1; i >= pos; i--)
        if (handler.end) handler.end(stack[i]);

      // Remove the open elements from the stack
      stack.length = pos;
    }
  }
}

var hiddenPre=document.createElement("pre");
/**
 * decodes all entities into regular string
 * @param value
 * @returns {string} A string with decoded entities.
 */
function decodeEntities(value) {
  if (!value) { return ''; }

  hiddenPre.innerHTML = value.replace(/</g,"&lt;");
  // innerText depends on styling as it doesn't display hidden elements.
  // Therefore, it's better to use textContent not to cause unnecessary reflows.
  return hiddenPre.textContent;
}

/**
 * Escapes all potentially dangerous characters, so that the
 * resulting string can be safely inserted into attribute or
 * element text.
 * @param value
 * @returns {string} escaped text
 */
function encodeEntities(value) {
  return value.
    replace(/&/g, '&amp;').
    replace(SURROGATE_PAIR_REGEXP, function(value) {
      var hi = value.charCodeAt(0);
      var low = value.charCodeAt(1);
      return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
    }).
    replace(NON_ALPHANUMERIC_REGEXP, function(value) {
      return '&#' + value.charCodeAt(0) + ';';
    }).
    replace(/</g, '&lt;').
    replace(/>/g, '&gt;');
}

/**
 * create an HTML/XML writer which writes to buffer
 * @param {Array} buf use buf.jain('') to get out sanitized html string
 * @returns {object} in the form of {
 *     start: function(tag, attrs, unary) {},
 *     end: function(tag) {},
 *     chars: function(text) {},
 *     comment: function(text) {}
 * }
 */
function htmlSanitizeWriter(buf, uriValidator) {
  var ignore = false;
  var out = angular.bind(buf, buf.push);
  return {
    start: function(tag, attrs, unary) {
      tag = angular.lowercase(tag);
      if (!ignore && specialElements[tag]) {
        ignore = tag;
      }
      if (!ignore && validElements[tag] === true) {
        out('<');
        out(tag);
        angular.forEach(attrs, function(value, key) {
          var lkey=angular.lowercase(key);
          var isImage = (tag === 'img' && lkey === 'src') || (lkey === 'background');
          if (validAttrs[lkey] === true &&
            (uriAttrs[lkey] !== true || uriValidator(value, isImage))) {
            out(' ');
            out(key);
            out('="');
            out(encodeEntities(value));
            out('"');
          }
        });
        out(unary ? '/>' : '>');
      }
    },
    end: function(tag) {
        tag = angular.lowercase(tag);
        if (!ignore && validElements[tag] === true) {
          out('</');
          out(tag);
          out('>');
        }
        if (tag == ignore) {
          ignore = false;
        }
      },
    chars: function(chars) {
        if (!ignore) {
          out(encodeEntities(chars));
        }
      }
  };
}


// define ngSanitize module and register $sanitize service
angular.module('ngSanitize', []).provider('$sanitize', $SanitizeProvider);

/* global sanitizeText: false */

/**
 * @ngdoc filter
 * @name linky
 * @kind function
 *
 * @description
 * Finds links in text input and turns them into html links. Supports http/https/ftp/mailto and
 * plain email address links.
 *
 * Requires the {@link ngSanitize `ngSanitize`} module to be installed.
 *
 * @param {string} text Input text.
 * @param {string} target Window (_blank|_self|_parent|_top) or named frame to open links in.
 * @returns {string} Html-linkified text.
 *
 * @usage
   <span ng-bind-html="linky_expression | linky"></span>
 *
 * @example
   <example module="linkyExample" deps="angular-sanitize.js">
     <file name="index.html">
       <script>
         angular.module('linkyExample', ['ngSanitize'])
           .controller('ExampleController', ['$scope', function($scope) {
             $scope.snippet =
               'Pretty text with some links:\n'+
               'http://angularjs.org/,\n'+
               'mailto:us@somewhere.org,\n'+
               'another@somewhere.org,\n'+
               'and one more: ftp://127.0.0.1/.';
             $scope.snippetWithTarget = 'http://angularjs.org/';
           }]);
       </script>
       <div ng-controller="ExampleController">
       Snippet: <textarea ng-model="snippet" cols="60" rows="3"></textarea>
       <table>
         <tr>
           <td>Filter</td>
           <td>Source</td>
           <td>Rendered</td>
         </tr>
         <tr id="linky-filter">
           <td>linky filter</td>
           <td>
             <pre>&lt;div ng-bind-html="snippet | linky"&gt;<br>&lt;/div&gt;</pre>
           </td>
           <td>
             <div ng-bind-html="snippet | linky"></div>
           </td>
         </tr>
         <tr id="linky-target">
          <td>linky target</td>
          <td>
            <pre>&lt;div ng-bind-html="snippetWithTarget | linky:'_blank'"&gt;<br>&lt;/div&gt;</pre>
          </td>
          <td>
            <div ng-bind-html="snippetWithTarget | linky:'_blank'"></div>
          </td>
         </tr>
         <tr id="escaped-html">
           <td>no filter</td>
           <td><pre>&lt;div ng-bind="snippet"&gt;<br>&lt;/div&gt;</pre></td>
           <td><div ng-bind="snippet"></div></td>
         </tr>
       </table>
     </file>
     <file name="protractor.js" type="protractor">
       it('should linkify the snippet with urls', function() {
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(4);
       });

       it('should not linkify snippet without the linky filter', function() {
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText()).
             toBe('Pretty text with some links: http://angularjs.org/, mailto:us@somewhere.org, ' +
                  'another@somewhere.org, and one more: ftp://127.0.0.1/.');
         expect(element.all(by.css('#escaped-html a')).count()).toEqual(0);
       });

       it('should update', function() {
         element(by.model('snippet')).clear();
         element(by.model('snippet')).sendKeys('new http://link.');
         expect(element(by.id('linky-filter')).element(by.binding('snippet | linky')).getText()).
             toBe('new http://link.');
         expect(element.all(by.css('#linky-filter a')).count()).toEqual(1);
         expect(element(by.id('escaped-html')).element(by.binding('snippet')).getText())
             .toBe('new http://link.');
       });

       it('should work with the target property', function() {
        expect(element(by.id('linky-target')).
            element(by.binding("snippetWithTarget | linky:'_blank'")).getText()).
            toBe('http://angularjs.org/');
        expect(element(by.css('#linky-target a')).getAttribute('target')).toEqual('_blank');
       });
     </file>
   </example>
 */
angular.module('ngSanitize').filter('linky', ['$sanitize', function($sanitize) {
  var LINKY_URL_REGEXP =
        /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"”’]/,
      MAILTO_REGEXP = /^mailto:/;

  return function(text, target) {
    if (!text) return text;
    var match;
    var raw = text;
    var html = [];
    var url;
    var i;
    while ((match = raw.match(LINKY_URL_REGEXP))) {
      // We can not end in these as they are sometimes found at the end of the sentence
      url = match[0];
      // if we did not match ftp/http/www/mailto then assume mailto
      if (!match[2] && !match[4]) {
        url = (match[3] ? 'http://' : 'mailto:') + url;
      }
      i = match.index;
      addText(raw.substr(0, i));
      addLink(url, match[0].replace(MAILTO_REGEXP, ''));
      raw = raw.substring(i + match[0].length);
    }
    addText(raw);
    return $sanitize(html.join(''));

    function addText(text) {
      if (!text) {
        return;
      }
      html.push(sanitizeText(text));
    }

    function addLink(url, text) {
      html.push('<a ');
      if (angular.isDefined(target)) {
        html.push('target="',
                  target,
                  '" ');
      }
      html.push('href="',
                url.replace(/"/g, '&quot;'),
                '">');
      addText(text);
      html.push('</a>');
    }
  };
}]);


})(window, window.angular);

/**
 * @license AngularJS v1.3.16
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
(function(window, angular, undefined) {'use strict';

/**
 * @ngdoc module
 * @name ngTouch
 * @description
 *
 * # ngTouch
 *
 * The `ngTouch` module provides touch events and other helpers for touch-enabled devices.
 * The implementation is based on jQuery Mobile touch event handling
 * ([jquerymobile.com](http://jquerymobile.com/)).
 *
 *
 * See {@link ngTouch.$swipe `$swipe`} for usage.
 *
 * <div doc-module-components="ngTouch"></div>
 *
 */

// define ngTouch module
/* global -ngTouch */
var ngTouch = angular.module('ngTouch', []);

function nodeName_(element) {
  return angular.lowercase(element.nodeName || (element[0] && element[0].nodeName));
}

/* global ngTouch: false */

    /**
     * @ngdoc service
     * @name $swipe
     *
     * @description
     * The `$swipe` service is a service that abstracts the messier details of hold-and-drag swipe
     * behavior, to make implementing swipe-related directives more convenient.
     *
     * Requires the {@link ngTouch `ngTouch`} module to be installed.
     *
     * `$swipe` is used by the `ngSwipeLeft` and `ngSwipeRight` directives in `ngTouch`, and by
     * `ngCarousel` in a separate component.
     *
     * # Usage
     * The `$swipe` service is an object with a single method: `bind`. `bind` takes an element
     * which is to be watched for swipes, and an object with four handler functions. See the
     * documentation for `bind` below.
     */

ngTouch.factory('$swipe', [function() {
  // The total distance in any direction before we make the call on swipe vs. scroll.
  var MOVE_BUFFER_RADIUS = 10;

  var POINTER_EVENTS = {
    'mouse': {
      start: 'mousedown',
      move: 'mousemove',
      end: 'mouseup'
    },
    'touch': {
      start: 'touchstart',
      move: 'touchmove',
      end: 'touchend',
      cancel: 'touchcancel'
    }
  };

  function getCoordinates(event) {
    var originalEvent = event.originalEvent || event;
    var touches = originalEvent.touches && originalEvent.touches.length ? originalEvent.touches : [originalEvent];
    var e = (originalEvent.changedTouches && originalEvent.changedTouches[0]) || touches[0];

    return {
      x: e.clientX,
      y: e.clientY
    };
  }

  function getEvents(pointerTypes, eventType) {
    var res = [];
    angular.forEach(pointerTypes, function(pointerType) {
      var eventName = POINTER_EVENTS[pointerType][eventType];
      if (eventName) {
        res.push(eventName);
      }
    });
    return res.join(' ');
  }

  return {
    /**
     * @ngdoc method
     * @name $swipe#bind
     *
     * @description
     * The main method of `$swipe`. It takes an element to be watched for swipe motions, and an
     * object containing event handlers.
     * The pointer types that should be used can be specified via the optional
     * third argument, which is an array of strings `'mouse'` and `'touch'`. By default,
     * `$swipe` will listen for `mouse` and `touch` events.
     *
     * The four events are `start`, `move`, `end`, and `cancel`. `start`, `move`, and `end`
     * receive as a parameter a coordinates object of the form `{ x: 150, y: 310 }`.
     *
     * `start` is called on either `mousedown` or `touchstart`. After this event, `$swipe` is
     * watching for `touchmove` or `mousemove` events. These events are ignored until the total
     * distance moved in either dimension exceeds a small threshold.
     *
     * Once this threshold is exceeded, either the horizontal or vertical delta is greater.
     * - If the horizontal distance is greater, this is a swipe and `move` and `end` events follow.
     * - If the vertical distance is greater, this is a scroll, and we let the browser take over.
     *   A `cancel` event is sent.
     *
     * `move` is called on `mousemove` and `touchmove` after the above logic has determined that
     * a swipe is in progress.
     *
     * `end` is called when a swipe is successfully completed with a `touchend` or `mouseup`.
     *
     * `cancel` is called either on a `touchcancel` from the browser, or when we begin scrolling
     * as described above.
     *
     */
    bind: function(element, eventHandlers, pointerTypes) {
      // Absolute total movement, used to control swipe vs. scroll.
      var totalX, totalY;
      // Coordinates of the start position.
      var startCoords;
      // Last event's position.
      var lastPos;
      // Whether a swipe is active.
      var active = false;

      pointerTypes = pointerTypes || ['mouse', 'touch'];
      element.on(getEvents(pointerTypes, 'start'), function(event) {
        startCoords = getCoordinates(event);
        active = true;
        totalX = 0;
        totalY = 0;
        lastPos = startCoords;
        eventHandlers['start'] && eventHandlers['start'](startCoords, event);
      });
      var events = getEvents(pointerTypes, 'cancel');
      if (events) {
        element.on(events, function(event) {
          active = false;
          eventHandlers['cancel'] && eventHandlers['cancel'](event);
        });
      }

      element.on(getEvents(pointerTypes, 'move'), function(event) {
        if (!active) return;

        // Android will send a touchcancel if it thinks we're starting to scroll.
        // So when the total distance (+ or - or both) exceeds 10px in either direction,
        // we either:
        // - On totalX > totalY, we send preventDefault() and treat this as a swipe.
        // - On totalY > totalX, we let the browser handle it as a scroll.

        if (!startCoords) return;
        var coords = getCoordinates(event);

        totalX += Math.abs(coords.x - lastPos.x);
        totalY += Math.abs(coords.y - lastPos.y);

        lastPos = coords;

        if (totalX < MOVE_BUFFER_RADIUS && totalY < MOVE_BUFFER_RADIUS) {
          return;
        }

        // One of totalX or totalY has exceeded the buffer, so decide on swipe vs. scroll.
        if (totalY > totalX) {
          // Allow native scrolling to take over.
          active = false;
          eventHandlers['cancel'] && eventHandlers['cancel'](event);
          return;
        } else {
          // Prevent the browser from scrolling.
          event.preventDefault();
          eventHandlers['move'] && eventHandlers['move'](coords, event);
        }
      });

      element.on(getEvents(pointerTypes, 'end'), function(event) {
        if (!active) return;
        active = false;
        eventHandlers['end'] && eventHandlers['end'](getCoordinates(event), event);
      });
    }
  };
}]);

/* global ngTouch: false,
  nodeName_: false
*/

/**
 * @ngdoc directive
 * @name ngClick
 *
 * @description
 * A more powerful replacement for the default ngClick designed to be used on touchscreen
 * devices. Most mobile browsers wait about 300ms after a tap-and-release before sending
 * the click event. This version handles them immediately, and then prevents the
 * following click event from propagating.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * This directive can fall back to using an ordinary click event, and so works on desktop
 * browsers as well as mobile.
 *
 * This directive also sets the CSS class `ng-click-active` while the element is being held
 * down (by a mouse click or touch) so you can restyle the depressed element if you wish.
 *
 * @element ANY
 * @param {expression} ngClick {@link guide/expression Expression} to evaluate
 * upon tap. (Event object is available as `$event`)
 *
 * @example
    <example module="ngClickExample" deps="angular-touch.js">
      <file name="index.html">
        <button ng-click="count = count + 1" ng-init="count=0">
          Increment
        </button>
        count: {{ count }}
      </file>
      <file name="script.js">
        angular.module('ngClickExample', ['ngTouch']);
      </file>
    </example>
 */

ngTouch.config(['$provide', function($provide) {
  $provide.decorator('ngClickDirective', ['$delegate', function($delegate) {
    // drop the default ngClick directive
    $delegate.shift();
    return $delegate;
  }]);
}]);

ngTouch.directive('ngClick', ['$parse', '$timeout', '$rootElement',
    function($parse, $timeout, $rootElement) {
  var TAP_DURATION = 750; // Shorter than 750ms is a tap, longer is a taphold or drag.
  var MOVE_TOLERANCE = 12; // 12px seems to work in most mobile browsers.
  var PREVENT_DURATION = 2500; // 2.5 seconds maximum from preventGhostClick call to click
  var CLICKBUSTER_THRESHOLD = 25; // 25 pixels in any dimension is the limit for busting clicks.

  var ACTIVE_CLASS_NAME = 'ng-click-active';
  var lastPreventedTime;
  var touchCoordinates;
  var lastLabelClickCoordinates;


  // TAP EVENTS AND GHOST CLICKS
  //
  // Why tap events?
  // Mobile browsers detect a tap, then wait a moment (usually ~300ms) to see if you're
  // double-tapping, and then fire a click event.
  //
  // This delay sucks and makes mobile apps feel unresponsive.
  // So we detect touchstart, touchmove, touchcancel and touchend ourselves and determine when
  // the user has tapped on something.
  //
  // What happens when the browser then generates a click event?
  // The browser, of course, also detects the tap and fires a click after a delay. This results in
  // tapping/clicking twice. We do "clickbusting" to prevent it.
  //
  // How does it work?
  // We attach global touchstart and click handlers, that run during the capture (early) phase.
  // So the sequence for a tap is:
  // - global touchstart: Sets an "allowable region" at the point touched.
  // - element's touchstart: Starts a touch
  // (- touchmove or touchcancel ends the touch, no click follows)
  // - element's touchend: Determines if the tap is valid (didn't move too far away, didn't hold
  //   too long) and fires the user's tap handler. The touchend also calls preventGhostClick().
  // - preventGhostClick() removes the allowable region the global touchstart created.
  // - The browser generates a click event.
  // - The global click handler catches the click, and checks whether it was in an allowable region.
  //     - If preventGhostClick was called, the region will have been removed, the click is busted.
  //     - If the region is still there, the click proceeds normally. Therefore clicks on links and
  //       other elements without ngTap on them work normally.
  //
  // This is an ugly, terrible hack!
  // Yeah, tell me about it. The alternatives are using the slow click events, or making our users
  // deal with the ghost clicks, so I consider this the least of evils. Fortunately Angular
  // encapsulates this ugly logic away from the user.
  //
  // Why not just put click handlers on the element?
  // We do that too, just to be sure. If the tap event caused the DOM to change,
  // it is possible another element is now in that position. To take account for these possibly
  // distinct elements, the handlers are global and care only about coordinates.

  // Checks if the coordinates are close enough to be within the region.
  function hit(x1, y1, x2, y2) {
    return Math.abs(x1 - x2) < CLICKBUSTER_THRESHOLD && Math.abs(y1 - y2) < CLICKBUSTER_THRESHOLD;
  }

  // Checks a list of allowable regions against a click location.
  // Returns true if the click should be allowed.
  // Splices out the allowable region from the list after it has been used.
  function checkAllowableRegions(touchCoordinates, x, y) {
    for (var i = 0; i < touchCoordinates.length; i += 2) {
      if (hit(touchCoordinates[i], touchCoordinates[i + 1], x, y)) {
        touchCoordinates.splice(i, i + 2);
        return true; // allowable region
      }
    }
    return false; // No allowable region; bust it.
  }

  // Global click handler that prevents the click if it's in a bustable zone and preventGhostClick
  // was called recently.
  function onClick(event) {
    if (Date.now() - lastPreventedTime > PREVENT_DURATION) {
      return; // Too old.
    }

    var touches = event.touches && event.touches.length ? event.touches : [event];
    var x = touches[0].clientX;
    var y = touches[0].clientY;
    // Work around desktop Webkit quirk where clicking a label will fire two clicks (on the label
    // and on the input element). Depending on the exact browser, this second click we don't want
    // to bust has either (0,0), negative coordinates, or coordinates equal to triggering label
    // click event
    if (x < 1 && y < 1) {
      return; // offscreen
    }
    if (lastLabelClickCoordinates &&
        lastLabelClickCoordinates[0] === x && lastLabelClickCoordinates[1] === y) {
      return; // input click triggered by label click
    }
    // reset label click coordinates on first subsequent click
    if (lastLabelClickCoordinates) {
      lastLabelClickCoordinates = null;
    }
    // remember label click coordinates to prevent click busting of trigger click event on input
    if (nodeName_(event.target) === 'label') {
      lastLabelClickCoordinates = [x, y];
    }

    // Look for an allowable region containing this click.
    // If we find one, that means it was created by touchstart and not removed by
    // preventGhostClick, so we don't bust it.
    if (checkAllowableRegions(touchCoordinates, x, y)) {
      return;
    }

    // If we didn't find an allowable region, bust the click.
    event.stopPropagation();
    event.preventDefault();

    // Blur focused form elements
    event.target && event.target.blur && event.target.blur();
  }


  // Global touchstart handler that creates an allowable region for a click event.
  // This allowable region can be removed by preventGhostClick if we want to bust it.
  function onTouchStart(event) {
    var touches = event.touches && event.touches.length ? event.touches : [event];
    var x = touches[0].clientX;
    var y = touches[0].clientY;
    touchCoordinates.push(x, y);

    $timeout(function() {
      // Remove the allowable region.
      for (var i = 0; i < touchCoordinates.length; i += 2) {
        if (touchCoordinates[i] == x && touchCoordinates[i + 1] == y) {
          touchCoordinates.splice(i, i + 2);
          return;
        }
      }
    }, PREVENT_DURATION, false);
  }

  // On the first call, attaches some event handlers. Then whenever it gets called, it creates a
  // zone around the touchstart where clicks will get busted.
  function preventGhostClick(x, y) {
    if (!touchCoordinates) {
      $rootElement[0].addEventListener('click', onClick, true);
      $rootElement[0].addEventListener('touchstart', onTouchStart, true);
      touchCoordinates = [];
    }

    lastPreventedTime = Date.now();

    checkAllowableRegions(touchCoordinates, x, y);
  }

  // Actual linking function.
  return function(scope, element, attr) {
    var clickHandler = $parse(attr.ngClick),
        tapping = false,
        tapElement,  // Used to blur the element after a tap.
        startTime,   // Used to check if the tap was held too long.
        touchStartX,
        touchStartY;

    function resetState() {
      tapping = false;
      element.removeClass(ACTIVE_CLASS_NAME);
    }

    element.on('touchstart', function(event) {
      tapping = true;
      tapElement = event.target ? event.target : event.srcElement; // IE uses srcElement.
      // Hack for Safari, which can target text nodes instead of containers.
      if (tapElement.nodeType == 3) {
        tapElement = tapElement.parentNode;
      }

      element.addClass(ACTIVE_CLASS_NAME);

      startTime = Date.now();

      // Use jQuery originalEvent
      var originalEvent = event.originalEvent || event;
      var touches = originalEvent.touches && originalEvent.touches.length ? originalEvent.touches : [originalEvent];
      var e = touches[0];
      touchStartX = e.clientX;
      touchStartY = e.clientY;
    });

    element.on('touchmove', function(event) {
      resetState();
    });

    element.on('touchcancel', function(event) {
      resetState();
    });

    element.on('touchend', function(event) {
      var diff = Date.now() - startTime;

      // Use jQuery originalEvent
      var originalEvent = event.originalEvent || event;
      var touches = (originalEvent.changedTouches && originalEvent.changedTouches.length) ?
          originalEvent.changedTouches :
          ((originalEvent.touches && originalEvent.touches.length) ? originalEvent.touches : [originalEvent]);
      var e = touches[0];
      var x = e.clientX;
      var y = e.clientY;
      var dist = Math.sqrt(Math.pow(x - touchStartX, 2) + Math.pow(y - touchStartY, 2));

      if (tapping && diff < TAP_DURATION && dist < MOVE_TOLERANCE) {
        // Call preventGhostClick so the clickbuster will catch the corresponding click.
        preventGhostClick(x, y);

        // Blur the focused element (the button, probably) before firing the callback.
        // This doesn't work perfectly on Android Chrome, but seems to work elsewhere.
        // I couldn't get anything to work reliably on Android Chrome.
        if (tapElement) {
          tapElement.blur();
        }

        if (!angular.isDefined(attr.disabled) || attr.disabled === false) {
          element.triggerHandler('click', [event]);
        }
      }

      resetState();
    });

    // Hack for iOS Safari's benefit. It goes searching for onclick handlers and is liable to click
    // something else nearby.
    element.onclick = function(event) { };

    // Actual click handler.
    // There are three different kinds of clicks, only two of which reach this point.
    // - On desktop browsers without touch events, their clicks will always come here.
    // - On mobile browsers, the simulated "fast" click will call this.
    // - But the browser's follow-up slow click will be "busted" before it reaches this handler.
    // Therefore it's safe to use this directive on both mobile and desktop.
    element.on('click', function(event, touchend) {
      scope.$apply(function() {
        clickHandler(scope, {$event: (touchend || event)});
      });
    });

    element.on('mousedown', function(event) {
      element.addClass(ACTIVE_CLASS_NAME);
    });

    element.on('mousemove mouseup', function(event) {
      element.removeClass(ACTIVE_CLASS_NAME);
    });

  };
}]);

/* global ngTouch: false */

/**
 * @ngdoc directive
 * @name ngSwipeLeft
 *
 * @description
 * Specify custom behavior when an element is swiped to the left on a touchscreen device.
 * A leftward swipe is a quick, right-to-left slide of the finger.
 * Though ngSwipeLeft is designed for touch-based devices, it will work with a mouse click and drag
 * too.
 *
 * To disable the mouse click and drag functionality, add `ng-swipe-disable-mouse` to
 * the `ng-swipe-left` or `ng-swipe-right` DOM Element.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * @element ANY
 * @param {expression} ngSwipeLeft {@link guide/expression Expression} to evaluate
 * upon left swipe. (Event object is available as `$event`)
 *
 * @example
    <example module="ngSwipeLeftExample" deps="angular-touch.js">
      <file name="index.html">
        <div ng-show="!showActions" ng-swipe-left="showActions = true">
          Some list content, like an email in the inbox
        </div>
        <div ng-show="showActions" ng-swipe-right="showActions = false">
          <button ng-click="reply()">Reply</button>
          <button ng-click="delete()">Delete</button>
        </div>
      </file>
      <file name="script.js">
        angular.module('ngSwipeLeftExample', ['ngTouch']);
      </file>
    </example>
 */

/**
 * @ngdoc directive
 * @name ngSwipeRight
 *
 * @description
 * Specify custom behavior when an element is swiped to the right on a touchscreen device.
 * A rightward swipe is a quick, left-to-right slide of the finger.
 * Though ngSwipeRight is designed for touch-based devices, it will work with a mouse click and drag
 * too.
 *
 * Requires the {@link ngTouch `ngTouch`} module to be installed.
 *
 * @element ANY
 * @param {expression} ngSwipeRight {@link guide/expression Expression} to evaluate
 * upon right swipe. (Event object is available as `$event`)
 *
 * @example
    <example module="ngSwipeRightExample" deps="angular-touch.js">
      <file name="index.html">
        <div ng-show="!showActions" ng-swipe-left="showActions = true">
          Some list content, like an email in the inbox
        </div>
        <div ng-show="showActions" ng-swipe-right="showActions = false">
          <button ng-click="reply()">Reply</button>
          <button ng-click="delete()">Delete</button>
        </div>
      </file>
      <file name="script.js">
        angular.module('ngSwipeRightExample', ['ngTouch']);
      </file>
    </example>
 */

function makeSwipeDirective(directiveName, direction, eventName) {
  ngTouch.directive(directiveName, ['$parse', '$swipe', function($parse, $swipe) {
    // The maximum vertical delta for a swipe should be less than 75px.
    var MAX_VERTICAL_DISTANCE = 75;
    // Vertical distance should not be more than a fraction of the horizontal distance.
    var MAX_VERTICAL_RATIO = 0.3;
    // At least a 30px lateral motion is necessary for a swipe.
    var MIN_HORIZONTAL_DISTANCE = 30;

    return function(scope, element, attr) {
      var swipeHandler = $parse(attr[directiveName]);

      var startCoords, valid;

      function validSwipe(coords) {
        // Check that it's within the coordinates.
        // Absolute vertical distance must be within tolerances.
        // Horizontal distance, we take the current X - the starting X.
        // This is negative for leftward swipes and positive for rightward swipes.
        // After multiplying by the direction (-1 for left, +1 for right), legal swipes
        // (ie. same direction as the directive wants) will have a positive delta and
        // illegal ones a negative delta.
        // Therefore this delta must be positive, and larger than the minimum.
        if (!startCoords) return false;
        var deltaY = Math.abs(coords.y - startCoords.y);
        var deltaX = (coords.x - startCoords.x) * direction;
        return valid && // Short circuit for already-invalidated swipes.
            deltaY < MAX_VERTICAL_DISTANCE &&
            deltaX > 0 &&
            deltaX > MIN_HORIZONTAL_DISTANCE &&
            deltaY / deltaX < MAX_VERTICAL_RATIO;
      }

      var pointerTypes = ['touch'];
      if (!angular.isDefined(attr['ngSwipeDisableMouse'])) {
        pointerTypes.push('mouse');
      }
      $swipe.bind(element, {
        'start': function(coords, event) {
          startCoords = coords;
          valid = true;
        },
        'cancel': function(event) {
          valid = false;
        },
        'end': function(coords, event) {
          if (validSwipe(coords)) {
            scope.$apply(function() {
              element.triggerHandler(eventName);
              swipeHandler(scope, {$event: event});
            });
          }
        }
      }, pointerTypes);
    };
  }]);
}

// Left is negative X-coordinate, right is positive.
makeSwipeDirective('ngSwipeLeft', -1, 'swipeleft');
makeSwipeDirective('ngSwipeRight', 1, 'swiperight');



})(window, window.angular);

/**
 * State-based routing for AngularJS
 * @version v0.2.15
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */

/* commonjs package manager support (eg componentjs) */
if (typeof module !== "undefined" && typeof exports !== "undefined" && module.exports === exports){
  module.exports = 'ui.router';
}

(function (window, angular, undefined) {
/*jshint globalstrict:true*/
/*global angular:false*/
'use strict';

var isDefined = angular.isDefined,
    isFunction = angular.isFunction,
    isString = angular.isString,
    isObject = angular.isObject,
    isArray = angular.isArray,
    forEach = angular.forEach,
    extend = angular.extend,
    copy = angular.copy;

function inherit(parent, extra) {
  return extend(new (extend(function() {}, { prototype: parent }))(), extra);
}

function merge(dst) {
  forEach(arguments, function(obj) {
    if (obj !== dst) {
      forEach(obj, function(value, key) {
        if (!dst.hasOwnProperty(key)) dst[key] = value;
      });
    }
  });
  return dst;
}

/**
 * Finds the common ancestor path between two states.
 *
 * @param {Object} first The first state.
 * @param {Object} second The second state.
 * @return {Array} Returns an array of state names in descending order, not including the root.
 */
function ancestors(first, second) {
  var path = [];

  for (var n in first.path) {
    if (first.path[n] !== second.path[n]) break;
    path.push(first.path[n]);
  }
  return path;
}

/**
 * IE8-safe wrapper for `Object.keys()`.
 *
 * @param {Object} object A JavaScript object.
 * @return {Array} Returns the keys of the object as an array.
 */
function objectKeys(object) {
  if (Object.keys) {
    return Object.keys(object);
  }
  var result = [];

  forEach(object, function(val, key) {
    result.push(key);
  });
  return result;
}

/**
 * IE8-safe wrapper for `Array.prototype.indexOf()`.
 *
 * @param {Array} array A JavaScript array.
 * @param {*} value A value to search the array for.
 * @return {Number} Returns the array index value of `value`, or `-1` if not present.
 */
function indexOf(array, value) {
  if (Array.prototype.indexOf) {
    return array.indexOf(value, Number(arguments[2]) || 0);
  }
  var len = array.length >>> 0, from = Number(arguments[2]) || 0;
  from = (from < 0) ? Math.ceil(from) : Math.floor(from);

  if (from < 0) from += len;

  for (; from < len; from++) {
    if (from in array && array[from] === value) return from;
  }
  return -1;
}

/**
 * Merges a set of parameters with all parameters inherited between the common parents of the
 * current state and a given destination state.
 *
 * @param {Object} currentParams The value of the current state parameters ($stateParams).
 * @param {Object} newParams The set of parameters which will be composited with inherited params.
 * @param {Object} $current Internal definition of object representing the current state.
 * @param {Object} $to Internal definition of object representing state to transition to.
 */
function inheritParams(currentParams, newParams, $current, $to) {
  var parents = ancestors($current, $to), parentParams, inherited = {}, inheritList = [];

  for (var i in parents) {
    if (!parents[i].params) continue;
    parentParams = objectKeys(parents[i].params);
    if (!parentParams.length) continue;

    for (var j in parentParams) {
      if (indexOf(inheritList, parentParams[j]) >= 0) continue;
      inheritList.push(parentParams[j]);
      inherited[parentParams[j]] = currentParams[parentParams[j]];
    }
  }
  return extend({}, inherited, newParams);
}

/**
 * Performs a non-strict comparison of the subset of two objects, defined by a list of keys.
 *
 * @param {Object} a The first object.
 * @param {Object} b The second object.
 * @param {Array} keys The list of keys within each object to compare. If the list is empty or not specified,
 *                     it defaults to the list of keys in `a`.
 * @return {Boolean} Returns `true` if the keys match, otherwise `false`.
 */
function equalForKeys(a, b, keys) {
  if (!keys) {
    keys = [];
    for (var n in a) keys.push(n); // Used instead of Object.keys() for IE8 compatibility
  }

  for (var i=0; i<keys.length; i++) {
    var k = keys[i];
    if (a[k] != b[k]) return false; // Not '===', values aren't necessarily normalized
  }
  return true;
}

/**
 * Returns the subset of an object, based on a list of keys.
 *
 * @param {Array} keys
 * @param {Object} values
 * @return {Boolean} Returns a subset of `values`.
 */
function filterByKeys(keys, values) {
  var filtered = {};

  forEach(keys, function (name) {
    filtered[name] = values[name];
  });
  return filtered;
}

// like _.indexBy
// when you know that your index values will be unique, or you want last-one-in to win
function indexBy(array, propName) {
  var result = {};
  forEach(array, function(item) {
    result[item[propName]] = item;
  });
  return result;
}

// extracted from underscore.js
// Return a copy of the object only containing the whitelisted properties.
function pick(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  forEach(keys, function(key) {
    if (key in obj) copy[key] = obj[key];
  });
  return copy;
}

// extracted from underscore.js
// Return a copy of the object omitting the blacklisted properties.
function omit(obj) {
  var copy = {};
  var keys = Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(arguments, 1));
  for (var key in obj) {
    if (indexOf(keys, key) == -1) copy[key] = obj[key];
  }
  return copy;
}

function pluck(collection, key) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = isFunction(key) ? key(val) : val[key];
  });
  return result;
}

function filter(collection, callback) {
  var array = isArray(collection);
  var result = array ? [] : {};
  forEach(collection, function(val, i) {
    if (callback(val, i)) {
      result[array ? result.length : i] = val;
    }
  });
  return result;
}

function map(collection, callback) {
  var result = isArray(collection) ? [] : {};

  forEach(collection, function(val, i) {
    result[i] = callback(val, i);
  });
  return result;
}

/**
 * @ngdoc overview
 * @name ui.router.util
 *
 * @description
 * # ui.router.util sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 *
 */
angular.module('ui.router.util', ['ng']);

/**
 * @ngdoc overview
 * @name ui.router.router
 * 
 * @requires ui.router.util
 *
 * @description
 * # ui.router.router sub-module
 *
 * This module is a dependency of other sub-modules. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 */
angular.module('ui.router.router', ['ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router.state
 * 
 * @requires ui.router.router
 * @requires ui.router.util
 *
 * @description
 * # ui.router.state sub-module
 *
 * This module is a dependency of the main ui.router module. Do not include this module as a dependency
 * in your angular app (use {@link ui.router} module instead).
 * 
 */
angular.module('ui.router.state', ['ui.router.router', 'ui.router.util']);

/**
 * @ngdoc overview
 * @name ui.router
 *
 * @requires ui.router.state
 *
 * @description
 * # ui.router
 * 
 * ## The main module for ui.router 
 * There are several sub-modules included with the ui.router module, however only this module is needed
 * as a dependency within your angular app. The other modules are for organization purposes. 
 *
 * The modules are:
 * * ui.router - the main "umbrella" module
 * * ui.router.router - 
 * 
 * *You'll need to include **only** this module as the dependency within your angular app.*
 * 
 * <pre>
 * <!doctype html>
 * <html ng-app="myApp">
 * <head>
 *   <script src="js/angular.js"></script>
 *   <!-- Include the ui-router script -->
 *   <script src="js/angular-ui-router.min.js"></script>
 *   <script>
 *     // ...and add 'ui.router' as a dependency
 *     var myApp = angular.module('myApp', ['ui.router']);
 *   </script>
 * </head>
 * <body>
 * </body>
 * </html>
 * </pre>
 */
angular.module('ui.router', ['ui.router.state']);

angular.module('ui.router.compat', ['ui.router']);

/**
 * @ngdoc object
 * @name ui.router.util.$resolve
 *
 * @requires $q
 * @requires $injector
 *
 * @description
 * Manages resolution of (acyclic) graphs of promises.
 */
$Resolve.$inject = ['$q', '$injector'];
function $Resolve(  $q,    $injector) {
  
  var VISIT_IN_PROGRESS = 1,
      VISIT_DONE = 2,
      NOTHING = {},
      NO_DEPENDENCIES = [],
      NO_LOCALS = NOTHING,
      NO_PARENT = extend($q.when(NOTHING), { $$promises: NOTHING, $$values: NOTHING });
  

  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#study
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Studies a set of invocables that are likely to be used multiple times.
   * <pre>
   * $resolve.study(invocables)(locals, parent, self)
   * </pre>
   * is equivalent to
   * <pre>
   * $resolve.resolve(invocables, locals, parent, self)
   * </pre>
   * but the former is more efficient (in fact `resolve` just calls `study` 
   * internally).
   *
   * @param {object} invocables Invocable objects
   * @return {function} a function to pass in locals, parent and self
   */
  this.study = function (invocables) {
    if (!isObject(invocables)) throw new Error("'invocables' must be an object");
    var invocableKeys = objectKeys(invocables || {});
    
    // Perform a topological sort of invocables to build an ordered plan
    var plan = [], cycle = [], visited = {};
    function visit(value, key) {
      if (visited[key] === VISIT_DONE) return;
      
      cycle.push(key);
      if (visited[key] === VISIT_IN_PROGRESS) {
        cycle.splice(0, indexOf(cycle, key));
        throw new Error("Cyclic dependency: " + cycle.join(" -> "));
      }
      visited[key] = VISIT_IN_PROGRESS;
      
      if (isString(value)) {
        plan.push(key, [ function() { return $injector.get(value); }], NO_DEPENDENCIES);
      } else {
        var params = $injector.annotate(value);
        forEach(params, function (param) {
          if (param !== key && invocables.hasOwnProperty(param)) visit(invocables[param], param);
        });
        plan.push(key, value, params);
      }
      
      cycle.pop();
      visited[key] = VISIT_DONE;
    }
    forEach(invocables, visit);
    invocables = cycle = visited = null; // plan is all that's required
    
    function isResolve(value) {
      return isObject(value) && value.then && value.$$promises;
    }
    
    return function (locals, parent, self) {
      if (isResolve(locals) && self === undefined) {
        self = parent; parent = locals; locals = null;
      }
      if (!locals) locals = NO_LOCALS;
      else if (!isObject(locals)) {
        throw new Error("'locals' must be an object");
      }       
      if (!parent) parent = NO_PARENT;
      else if (!isResolve(parent)) {
        throw new Error("'parent' must be a promise returned by $resolve.resolve()");
      }
      
      // To complete the overall resolution, we have to wait for the parent
      // promise and for the promise for each invokable in our plan.
      var resolution = $q.defer(),
          result = resolution.promise,
          promises = result.$$promises = {},
          values = extend({}, locals),
          wait = 1 + plan.length/3,
          merged = false;
          
      function done() {
        // Merge parent values we haven't got yet and publish our own $$values
        if (!--wait) {
          if (!merged) merge(values, parent.$$values); 
          result.$$values = values;
          result.$$promises = result.$$promises || true; // keep for isResolve()
          delete result.$$inheritedValues;
          resolution.resolve(values);
        }
      }
      
      function fail(reason) {
        result.$$failure = reason;
        resolution.reject(reason);
      }

      // Short-circuit if parent has already failed
      if (isDefined(parent.$$failure)) {
        fail(parent.$$failure);
        return result;
      }
      
      if (parent.$$inheritedValues) {
        merge(values, omit(parent.$$inheritedValues, invocableKeys));
      }

      // Merge parent values if the parent has already resolved, or merge
      // parent promises and wait if the parent resolve is still in progress.
      extend(promises, parent.$$promises);
      if (parent.$$values) {
        merged = merge(values, omit(parent.$$values, invocableKeys));
        result.$$inheritedValues = omit(parent.$$values, invocableKeys);
        done();
      } else {
        if (parent.$$inheritedValues) {
          result.$$inheritedValues = omit(parent.$$inheritedValues, invocableKeys);
        }        
        parent.then(done, fail);
      }
      
      // Process each invocable in the plan, but ignore any where a local of the same name exists.
      for (var i=0, ii=plan.length; i<ii; i+=3) {
        if (locals.hasOwnProperty(plan[i])) done();
        else invoke(plan[i], plan[i+1], plan[i+2]);
      }
      
      function invoke(key, invocable, params) {
        // Create a deferred for this invocation. Failures will propagate to the resolution as well.
        var invocation = $q.defer(), waitParams = 0;
        function onfailure(reason) {
          invocation.reject(reason);
          fail(reason);
        }
        // Wait for any parameter that we have a promise for (either from parent or from this
        // resolve; in that case study() will have made sure it's ordered before us in the plan).
        forEach(params, function (dep) {
          if (promises.hasOwnProperty(dep) && !locals.hasOwnProperty(dep)) {
            waitParams++;
            promises[dep].then(function (result) {
              values[dep] = result;
              if (!(--waitParams)) proceed();
            }, onfailure);
          }
        });
        if (!waitParams) proceed();
        function proceed() {
          if (isDefined(result.$$failure)) return;
          try {
            invocation.resolve($injector.invoke(invocable, self, values));
            invocation.promise.then(function (result) {
              values[key] = result;
              done();
            }, onfailure);
          } catch (e) {
            onfailure(e);
          }
        }
        // Publish promise synchronously; invocations further down in the plan may depend on it.
        promises[key] = invocation.promise;
      }
      
      return result;
    };
  };
  
  /**
   * @ngdoc function
   * @name ui.router.util.$resolve#resolve
   * @methodOf ui.router.util.$resolve
   *
   * @description
   * Resolves a set of invocables. An invocable is a function to be invoked via 
   * `$injector.invoke()`, and can have an arbitrary number of dependencies. 
   * An invocable can either return a value directly,
   * or a `$q` promise. If a promise is returned it will be resolved and the 
   * resulting value will be used instead. Dependencies of invocables are resolved 
   * (in this order of precedence)
   *
   * - from the specified `locals`
   * - from another invocable that is part of this `$resolve` call
   * - from an invocable that is inherited from a `parent` call to `$resolve` 
   *   (or recursively
   * - from any ancestor `$resolve` of that parent).
   *
   * The return value of `$resolve` is a promise for an object that contains 
   * (in this order of precedence)
   *
   * - any `locals` (if specified)
   * - the resolved return values of all injectables
   * - any values inherited from a `parent` call to `$resolve` (if specified)
   *
   * The promise will resolve after the `parent` promise (if any) and all promises 
   * returned by injectables have been resolved. If any invocable 
   * (or `$injector.invoke`) throws an exception, or if a promise returned by an 
   * invocable is rejected, the `$resolve` promise is immediately rejected with the 
   * same error. A rejection of a `parent` promise (if specified) will likewise be 
   * propagated immediately. Once the `$resolve` promise has been rejected, no 
   * further invocables will be called.
   * 
   * Cyclic dependencies between invocables are not permitted and will caues `$resolve`
   * to throw an error. As a special case, an injectable can depend on a parameter 
   * with the same name as the injectable, which will be fulfilled from the `parent` 
   * injectable of the same name. This allows inherited values to be decorated. 
   * Note that in this case any other injectable in the same `$resolve` with the same
   * dependency would see the decorated value, not the inherited value.
   *
   * Note that missing dependencies -- unlike cyclic dependencies -- will cause an 
   * (asynchronous) rejection of the `$resolve` promise rather than a (synchronous) 
   * exception.
   *
   * Invocables are invoked eagerly as soon as all dependencies are available. 
   * This is true even for dependencies inherited from a `parent` call to `$resolve`.
   *
   * As a special case, an invocable can be a string, in which case it is taken to 
   * be a service name to be passed to `$injector.get()`. This is supported primarily 
   * for backwards-compatibility with the `resolve` property of `$routeProvider` 
   * routes.
   *
   * @param {object} invocables functions to invoke or 
   * `$injector` services to fetch.
   * @param {object} locals  values to make available to the injectables
   * @param {object} parent  a promise returned by another call to `$resolve`.
   * @param {object} self  the `this` for the invoked methods
   * @return {object} Promise for an object that contains the resolved return value
   * of all invocables, as well as any inherited and local values.
   */
  this.resolve = function (invocables, locals, parent, self) {
    return this.study(invocables)(locals, parent, self);
  };
}

angular.module('ui.router.util').service('$resolve', $Resolve);


/**
 * @ngdoc object
 * @name ui.router.util.$templateFactory
 *
 * @requires $http
 * @requires $templateCache
 * @requires $injector
 *
 * @description
 * Service. Manages loading of templates.
 */
$TemplateFactory.$inject = ['$http', '$templateCache', '$injector'];
function $TemplateFactory(  $http,   $templateCache,   $injector) {

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromConfig
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a configuration object. 
   *
   * @param {object} config Configuration object for which to load a template. 
   * The following properties are search in the specified order, and the first one 
   * that is defined is used to create the template:
   *
   * @param {string|object} config.template html string template or function to 
   * load via {@link ui.router.util.$templateFactory#fromString fromString}.
   * @param {string|object} config.templateUrl url to load or a function returning 
   * the url to load via {@link ui.router.util.$templateFactory#fromUrl fromUrl}.
   * @param {Function} config.templateProvider function to invoke via 
   * {@link ui.router.util.$templateFactory#fromProvider fromProvider}.
   * @param {object} params  Parameters to pass to the template function.
   * @param {object} locals Locals to pass to `invoke` if the template is loaded 
   * via a `templateProvider`. Defaults to `{ params: params }`.
   *
   * @return {string|object}  The template html as a string, or a promise for 
   * that string,or `null` if no template is configured.
   */
  this.fromConfig = function (config, params, locals) {
    return (
      isDefined(config.template) ? this.fromString(config.template, params) :
      isDefined(config.templateUrl) ? this.fromUrl(config.templateUrl, params) :
      isDefined(config.templateProvider) ? this.fromProvider(config.templateProvider, params, locals) :
      null
    );
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromString
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template from a string or a function returning a string.
   *
   * @param {string|object} template html template as a string or function that 
   * returns an html template as a string.
   * @param {object} params Parameters to pass to the template function.
   *
   * @return {string|object} The template html as a string, or a promise for that 
   * string.
   */
  this.fromString = function (template, params) {
    return isFunction(template) ? template(params) : template;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromUrl
   * @methodOf ui.router.util.$templateFactory
   * 
   * @description
   * Loads a template from the a URL via `$http` and `$templateCache`.
   *
   * @param {string|Function} url url of the template to load, or a function 
   * that returns a url.
   * @param {Object} params Parameters to pass to the url function.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromUrl = function (url, params) {
    if (isFunction(url)) url = url(params);
    if (url == null) return null;
    else return $http
        .get(url, { cache: $templateCache, headers: { Accept: 'text/html' }})
        .then(function(response) { return response.data; });
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$templateFactory#fromProvider
   * @methodOf ui.router.util.$templateFactory
   *
   * @description
   * Creates a template by invoking an injectable provider function.
   *
   * @param {Function} provider Function to invoke via `$injector.invoke`
   * @param {Object} params Parameters for the template.
   * @param {Object} locals Locals to pass to `invoke`. Defaults to 
   * `{ params: params }`.
   * @return {string|Promise.<string>} The template html as a string, or a promise 
   * for that string.
   */
  this.fromProvider = function (provider, params, locals) {
    return $injector.invoke(provider, null, locals || { params: params });
  };
}

angular.module('ui.router.util').service('$templateFactory', $TemplateFactory);

var $$UMFP; // reference to $UrlMatcherFactoryProvider

/**
 * @ngdoc object
 * @name ui.router.util.type:UrlMatcher
 *
 * @description
 * Matches URLs against patterns and extracts named parameters from the path or the search
 * part of the URL. A URL pattern consists of a path pattern, optionally followed by '?' and a list
 * of search parameters. Multiple search parameter names are separated by '&'. Search parameters
 * do not influence whether or not a URL is matched, but their values are passed through into
 * the matched parameters returned by {@link ui.router.util.type:UrlMatcher#methods_exec exec}.
 *
 * Path parameter placeholders can be specified using simple colon/catch-all syntax or curly brace
 * syntax, which optionally allows a regular expression for the parameter to be specified:
 *
 * * `':'` name - colon placeholder
 * * `'*'` name - catch-all placeholder
 * * `'{' name '}'` - curly placeholder
 * * `'{' name ':' regexp|type '}'` - curly placeholder with regexp or type name. Should the
 *   regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.
 *
 * Parameter names may contain only word characters (latin letters, digits, and underscore) and
 * must be unique within the pattern (across both path and search parameters). For colon
 * placeholders or curly placeholders without an explicit regexp, a path parameter matches any
 * number of characters other than '/'. For catch-all placeholders the path parameter matches
 * any number of characters.
 *
 * Examples:
 *
 * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for
 *   trailing slashes, and patterns have to match the entire path, not just a prefix.
 * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or
 *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.
 * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.
 * * `'/user/{id:[^/]*}'` - Same as the previous example.
 * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id
 *   parameter consists of 1 to 8 hex digits.
 * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the
 *   path into the parameter 'path'.
 * * `'/files/*path'` - ditto.
 * * `'/calendar/{start:date}'` - Matches "/calendar/2014-11-12" (because the pattern defined
 *   in the built-in  `date` Type matches `2014-11-12`) and provides a Date object in $stateParams.start
 *
 * @param {string} pattern  The pattern to compile into a matcher.
 * @param {Object} config  A configuration object hash:
 * @param {Object=} parentMatcher Used to concatenate the pattern/config onto
 *   an existing UrlMatcher
 *
 * * `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.
 * * `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.
 *
 * @property {string} prefix  A static prefix of this pattern. The matcher guarantees that any
 *   URL matching this matcher (i.e. any string for which {@link ui.router.util.type:UrlMatcher#methods_exec exec()} returns
 *   non-null) will start with this prefix.
 *
 * @property {string} source  The pattern that was passed into the constructor
 *
 * @property {string} sourcePath  The path portion of the source property
 *
 * @property {string} sourceSearch  The search portion of the source property
 *
 * @property {string} regex  The constructed regex that will be used to match against the url when
 *   it is time to determine which url will match.
 *
 * @returns {Object}  New `UrlMatcher` object
 */
function UrlMatcher(pattern, config, parentMatcher) {
  config = extend({ params: {} }, isObject(config) ? config : {});

  // Find all placeholders and create a compiled pattern, using either classic or curly syntax:
  //   '*' name
  //   ':' name
  //   '{' name '}'
  //   '{' name ':' regexp '}'
  // The regular expression is somewhat complicated due to the need to allow curly braces
  // inside the regular expression. The placeholder regexp breaks down as follows:
  //    ([:*])([\w\[\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)
  //    \{([\w\[\]]+)(?:\:( ... ))?\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case
  //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either
  //    [^{}\\]+                       - anything other than curly braces or backslash
  //    \\.                            - a backslash escape
  //    \{(?:[^{}\\]+|\\.)*\}          - a matched set of curly braces containing other atoms
  var placeholder       = /([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      searchPlaceholder = /([:]?)([\w\[\]-]+)|\{([\w\[\]-]+)(?:\:((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,
      compiled = '^', last = 0, m,
      segments = this.segments = [],
      parentParams = parentMatcher ? parentMatcher.params : {},
      params = this.params = parentMatcher ? parentMatcher.params.$$new() : new $$UMFP.ParamSet(),
      paramNames = [];

  function addParameter(id, type, config, location) {
    paramNames.push(id);
    if (parentParams[id]) return parentParams[id];
    if (!/^\w+(-+\w+)*(?:\[\])?$/.test(id)) throw new Error("Invalid parameter name '" + id + "' in pattern '" + pattern + "'");
    if (params[id]) throw new Error("Duplicate parameter name '" + id + "' in pattern '" + pattern + "'");
    params[id] = new $$UMFP.Param(id, type, config, location);
    return params[id];
  }

  function quoteRegExp(string, pattern, squash, optional) {
    var surroundPattern = ['',''], result = string.replace(/[\\\[\]\^$*+?.()|{}]/g, "\\$&");
    if (!pattern) return result;
    switch(squash) {
      case false: surroundPattern = ['(', ')' + (optional ? "?" : "")]; break;
      case true:  surroundPattern = ['?(', ')?']; break;
      default:    surroundPattern = ['(' + squash + "|", ')?']; break;
    }
    return result + surroundPattern[0] + pattern + surroundPattern[1];
  }

  this.source = pattern;

  // Split into static segments separated by path parameter placeholders.
  // The number of segments is always 1 more than the number of parameters.
  function matchDetails(m, isSearch) {
    var id, regexp, segment, type, cfg, arrayMode;
    id          = m[2] || m[3]; // IE[78] returns '' for unmatched groups instead of null
    cfg         = config.params[id];
    segment     = pattern.substring(last, m.index);
    regexp      = isSearch ? m[4] : m[4] || (m[1] == '*' ? '.*' : null);
    type        = $$UMFP.type(regexp || "string") || inherit($$UMFP.type("string"), { pattern: new RegExp(regexp, config.caseInsensitive ? 'i' : undefined) });
    return {
      id: id, regexp: regexp, segment: segment, type: type, cfg: cfg
    };
  }

  var p, param, segment;
  while ((m = placeholder.exec(pattern))) {
    p = matchDetails(m, false);
    if (p.segment.indexOf('?') >= 0) break; // we're into the search part

    param = addParameter(p.id, p.type, p.cfg, "path");
    compiled += quoteRegExp(p.segment, param.type.pattern.source, param.squash, param.isOptional);
    segments.push(p.segment);
    last = placeholder.lastIndex;
  }
  segment = pattern.substring(last);

  // Find any search parameter names and remove them from the last segment
  var i = segment.indexOf('?');

  if (i >= 0) {
    var search = this.sourceSearch = segment.substring(i);
    segment = segment.substring(0, i);
    this.sourcePath = pattern.substring(0, last + i);

    if (search.length > 0) {
      last = 0;
      while ((m = searchPlaceholder.exec(search))) {
        p = matchDetails(m, true);
        param = addParameter(p.id, p.type, p.cfg, "search");
        last = placeholder.lastIndex;
        // check if ?&
      }
    }
  } else {
    this.sourcePath = pattern;
    this.sourceSearch = '';
  }

  compiled += quoteRegExp(segment) + (config.strict === false ? '\/?' : '') + '$';
  segments.push(segment);

  this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
  this.prefix = segments[0];
  this.$$paramNames = paramNames;
}

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#concat
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns a new matcher for a pattern constructed by appending the path part and adding the
 * search parameters of the specified pattern to this pattern. The current pattern is not
 * modified. This can be understood as creating a pattern for URLs that are relative to (or
 * suffixes of) the current pattern.
 *
 * @example
 * The following two matchers are equivalent:
 * <pre>
 * new UrlMatcher('/user/{id}?q').concat('/details?date');
 * new UrlMatcher('/user/{id}/details?q&date');
 * </pre>
 *
 * @param {string} pattern  The pattern to append.
 * @param {Object} config  An object hash of the configuration for the matcher.
 * @returns {UrlMatcher}  A matcher for the concatenated pattern.
 */
UrlMatcher.prototype.concat = function (pattern, config) {
  // Because order of search parameters is irrelevant, we can add our own search
  // parameters to the end of the new pattern. Parse the new pattern by itself
  // and then join the bits together, but it's much easier to do this on a string level.
  var defaultConfig = {
    caseInsensitive: $$UMFP.caseInsensitive(),
    strict: $$UMFP.strictMode(),
    squash: $$UMFP.defaultSquashPolicy()
  };
  return new UrlMatcher(this.sourcePath + pattern + this.sourceSearch, extend(defaultConfig, config), this);
};

UrlMatcher.prototype.toString = function () {
  return this.source;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#exec
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Tests the specified path against this matcher, and returns an object containing the captured
 * parameter values, or null if the path does not match. The returned object contains the values
 * of any search parameters that are mentioned in the pattern, but their value may be null if
 * they are not present in `searchParams`. This means that search parameters are always treated
 * as optional.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {
 *   x: '1', q: 'hello'
 * });
 * // returns { id: 'bob', q: 'hello', r: null }
 * </pre>
 *
 * @param {string} path  The URL path to match, e.g. `$location.path()`.
 * @param {Object} searchParams  URL search parameters, e.g. `$location.search()`.
 * @returns {Object}  The captured parameter values.
 */
UrlMatcher.prototype.exec = function (path, searchParams) {
  var m = this.regexp.exec(path);
  if (!m) return null;
  searchParams = searchParams || {};

  var paramNames = this.parameters(), nTotal = paramNames.length,
    nPath = this.segments.length - 1,
    values = {}, i, j, cfg, paramName;

  if (nPath !== m.length - 1) throw new Error("Unbalanced capture group in route '" + this.source + "'");

  function decodePathArray(string) {
    function reverseString(str) { return str.split("").reverse().join(""); }
    function unquoteDashes(str) { return str.replace(/\\-/g, "-"); }

    var split = reverseString(string).split(/-(?!\\)/);
    var allReversed = map(split, reverseString);
    return map(allReversed, unquoteDashes).reverse();
  }

  for (i = 0; i < nPath; i++) {
    paramName = paramNames[i];
    var param = this.params[paramName];
    var paramVal = m[i+1];
    // if the param value matches a pre-replace pair, replace the value before decoding.
    for (j = 0; j < param.replace; j++) {
      if (param.replace[j].from === paramVal) paramVal = param.replace[j].to;
    }
    if (paramVal && param.array === true) paramVal = decodePathArray(paramVal);
    values[paramName] = param.value(paramVal);
  }
  for (/**/; i < nTotal; i++) {
    paramName = paramNames[i];
    values[paramName] = this.params[paramName].value(searchParams[paramName]);
  }

  return values;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#parameters
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Returns the names of all path and search parameters of this pattern in an unspecified order.
 *
 * @returns {Array.<string>}  An array of parameter names. Must be treated as read-only. If the
 *    pattern has no parameters, an empty array is returned.
 */
UrlMatcher.prototype.parameters = function (param) {
  if (!isDefined(param)) return this.$$paramNames;
  return this.params[param] || null;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#validate
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Checks an object hash of parameters to validate their correctness according to the parameter
 * types of this `UrlMatcher`.
 *
 * @param {Object} params The object hash of parameters to validate.
 * @returns {boolean} Returns `true` if `params` validates, otherwise `false`.
 */
UrlMatcher.prototype.validates = function (params) {
  return this.params.$$validates(params);
};

/**
 * @ngdoc function
 * @name ui.router.util.type:UrlMatcher#format
 * @methodOf ui.router.util.type:UrlMatcher
 *
 * @description
 * Creates a URL that matches this pattern by substituting the specified values
 * for the path and search parameters. Null values for path parameters are
 * treated as empty strings.
 *
 * @example
 * <pre>
 * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });
 * // returns '/user/bob?q=yes'
 * </pre>
 *
 * @param {Object} values  the values to substitute for the parameters in this pattern.
 * @returns {string}  the formatted URL (path and optionally search part).
 */
UrlMatcher.prototype.format = function (values) {
  values = values || {};
  var segments = this.segments, params = this.parameters(), paramset = this.params;
  if (!this.validates(values)) return null;

  var i, search = false, nPath = segments.length - 1, nTotal = params.length, result = segments[0];

  function encodeDashes(str) { // Replace dashes with encoded "\-"
    return encodeURIComponent(str).replace(/-/g, function(c) { return '%5C%' + c.charCodeAt(0).toString(16).toUpperCase(); });
  }

  for (i = 0; i < nTotal; i++) {
    var isPathParam = i < nPath;
    var name = params[i], param = paramset[name], value = param.value(values[name]);
    var isDefaultValue = param.isOptional && param.type.equals(param.value(), value);
    var squash = isDefaultValue ? param.squash : false;
    var encoded = param.type.encode(value);

    if (isPathParam) {
      var nextSegment = segments[i + 1];
      if (squash === false) {
        if (encoded != null) {
          if (isArray(encoded)) {
            result += map(encoded, encodeDashes).join("-");
          } else {
            result += encodeURIComponent(encoded);
          }
        }
        result += nextSegment;
      } else if (squash === true) {
        var capture = result.match(/\/$/) ? /\/?(.*)/ : /(.*)/;
        result += nextSegment.match(capture)[1];
      } else if (isString(squash)) {
        result += squash + nextSegment;
      }
    } else {
      if (encoded == null || (isDefaultValue && squash !== false)) continue;
      if (!isArray(encoded)) encoded = [ encoded ];
      encoded = map(encoded, encodeURIComponent).join('&' + name + '=');
      result += (search ? '&' : '?') + (name + '=' + encoded);
      search = true;
    }
  }

  return result;
};

/**
 * @ngdoc object
 * @name ui.router.util.type:Type
 *
 * @description
 * Implements an interface to define custom parameter types that can be decoded from and encoded to
 * string parameters matched in a URL. Used by {@link ui.router.util.type:UrlMatcher `UrlMatcher`}
 * objects when matching or formatting URLs, or comparing or validating parameter values.
 *
 * See {@link ui.router.util.$urlMatcherFactory#methods_type `$urlMatcherFactory#type()`} for more
 * information on registering custom types.
 *
 * @param {Object} config  A configuration object which contains the custom type definition.  The object's
 *        properties will override the default methods and/or pattern in `Type`'s public interface.
 * @example
 * <pre>
 * {
 *   decode: function(val) { return parseInt(val, 10); },
 *   encode: function(val) { return val && val.toString(); },
 *   equals: function(a, b) { return this.is(a) && a === b; },
 *   is: function(val) { return angular.isNumber(val) isFinite(val) && val % 1 === 0; },
 *   pattern: /\d+/
 * }
 * </pre>
 *
 * @property {RegExp} pattern The regular expression pattern used to match values of this type when
 *           coming from a substring of a URL.
 *
 * @returns {Object}  Returns a new `Type` object.
 */
function Type(config) {
  extend(this, config);
}

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#is
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Detects whether a value is of a particular type. Accepts a native (decoded) value
 * and determines whether it matches the current `Type` object.
 *
 * @param {*} val  The value to check.
 * @param {string} key  Optional. If the type check is happening in the context of a specific
 *        {@link ui.router.util.type:UrlMatcher `UrlMatcher`} object, this is the name of the
 *        parameter in which `val` is stored. Can be used for meta-programming of `Type` objects.
 * @returns {Boolean}  Returns `true` if the value matches the type, otherwise `false`.
 */
Type.prototype.is = function(val, key) {
  return true;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#encode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Encodes a custom/native type value to a string that can be embedded in a URL. Note that the
 * return value does *not* need to be URL-safe (i.e. passed through `encodeURIComponent()`), it
 * only needs to be a representation of `val` that has been coerced to a string.
 *
 * @param {*} val  The value to encode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {string}  Returns a string representation of `val` that can be encoded in a URL.
 */
Type.prototype.encode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#decode
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Converts a parameter value (from URL string or transition param) to a custom/native value.
 *
 * @param {string} val  The URL parameter value to decode.
 * @param {string} key  The name of the parameter in which `val` is stored. Can be used for
 *        meta-programming of `Type` objects.
 * @returns {*}  Returns a custom representation of the URL parameter value.
 */
Type.prototype.decode = function(val, key) {
  return val;
};

/**
 * @ngdoc function
 * @name ui.router.util.type:Type#equals
 * @methodOf ui.router.util.type:Type
 *
 * @description
 * Determines whether two decoded values are equivalent.
 *
 * @param {*} a  A value to compare against.
 * @param {*} b  A value to compare against.
 * @returns {Boolean}  Returns `true` if the values are equivalent/equal, otherwise `false`.
 */
Type.prototype.equals = function(a, b) {
  return a == b;
};

Type.prototype.$subPattern = function() {
  var sub = this.pattern.toString();
  return sub.substr(1, sub.length - 2);
};

Type.prototype.pattern = /.*/;

Type.prototype.toString = function() { return "{Type:" + this.name + "}"; };

/** Given an encoded string, or a decoded object, returns a decoded object */
Type.prototype.$normalize = function(val) {
  return this.is(val) ? val : this.decode(val);
};

/*
 * Wraps an existing custom Type as an array of Type, depending on 'mode'.
 * e.g.:
 * - urlmatcher pattern "/path?{queryParam[]:int}"
 * - url: "/path?queryParam=1&queryParam=2
 * - $stateParams.queryParam will be [1, 2]
 * if `mode` is "auto", then
 * - url: "/path?queryParam=1 will create $stateParams.queryParam: 1
 * - url: "/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]
 */
Type.prototype.$asArray = function(mode, isSearch) {
  if (!mode) return this;
  if (mode === "auto" && !isSearch) throw new Error("'auto' array mode is for query parameters only");

  function ArrayType(type, mode) {
    function bindTo(type, callbackName) {
      return function() {
        return type[callbackName].apply(type, arguments);
      };
    }

    // Wrap non-array value as array
    function arrayWrap(val) { return isArray(val) ? val : (isDefined(val) ? [ val ] : []); }
    // Unwrap array value for "auto" mode. Return undefined for empty array.
    function arrayUnwrap(val) {
      switch(val.length) {
        case 0: return undefined;
        case 1: return mode === "auto" ? val[0] : val;
        default: return val;
      }
    }
    function falsey(val) { return !val; }

    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array
    function arrayHandler(callback, allTruthyMode) {
      return function handleArray(val) {
        val = arrayWrap(val);
        var result = map(val, callback);
        if (allTruthyMode === true)
          return filter(result, falsey).length === 0;
        return arrayUnwrap(result);
      };
    }

    // Wraps type (.equals) functions to operate on each value of an array
    function arrayEqualsHandler(callback) {
      return function handleArray(val1, val2) {
        var left = arrayWrap(val1), right = arrayWrap(val2);
        if (left.length !== right.length) return false;
        for (var i = 0; i < left.length; i++) {
          if (!callback(left[i], right[i])) return false;
        }
        return true;
      };
    }

    this.encode = arrayHandler(bindTo(type, 'encode'));
    this.decode = arrayHandler(bindTo(type, 'decode'));
    this.is     = arrayHandler(bindTo(type, 'is'), true);
    this.equals = arrayEqualsHandler(bindTo(type, 'equals'));
    this.pattern = type.pattern;
    this.$normalize = arrayHandler(bindTo(type, '$normalize'));
    this.name = type.name;
    this.$arrayMode = mode;
  }

  return new ArrayType(this, mode);
};



/**
 * @ngdoc object
 * @name ui.router.util.$urlMatcherFactory
 *
 * @description
 * Factory for {@link ui.router.util.type:UrlMatcher `UrlMatcher`} instances. The factory
 * is also available to providers under the name `$urlMatcherFactoryProvider`.
 */
function $UrlMatcherFactory() {
  $$UMFP = this;

  var isCaseInsensitive = false, isStrictMode = true, defaultSquashPolicy = false;

  function valToString(val) { return val != null ? val.toString().replace(/\//g, "%2F") : val; }
  function valFromString(val) { return val != null ? val.toString().replace(/%2F/g, "/") : val; }

  var $types = {}, enqueue = true, typeQueue = [], injector, defaultTypes = {
    string: {
      encode: valToString,
      decode: valFromString,
      // TODO: in 1.0, make string .is() return false if value is undefined/null by default.
      // In 0.2.x, string params are optional by default for backwards compat
      is: function(val) { return val == null || !isDefined(val) || typeof val === "string"; },
      pattern: /[^/]*/
    },
    int: {
      encode: valToString,
      decode: function(val) { return parseInt(val, 10); },
      is: function(val) { return isDefined(val) && this.decode(val.toString()) === val; },
      pattern: /\d+/
    },
    bool: {
      encode: function(val) { return val ? 1 : 0; },
      decode: function(val) { return parseInt(val, 10) !== 0; },
      is: function(val) { return val === true || val === false; },
      pattern: /0|1/
    },
    date: {
      encode: function (val) {
        if (!this.is(val))
          return undefined;
        return [ val.getFullYear(),
          ('0' + (val.getMonth() + 1)).slice(-2),
          ('0' + val.getDate()).slice(-2)
        ].join("-");
      },
      decode: function (val) {
        if (this.is(val)) return val;
        var match = this.capture.exec(val);
        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;
      },
      is: function(val) { return val instanceof Date && !isNaN(val.valueOf()); },
      equals: function (a, b) { return this.is(a) && this.is(b) && a.toISOString() === b.toISOString(); },
      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,
      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/
    },
    json: {
      encode: angular.toJson,
      decode: angular.fromJson,
      is: angular.isObject,
      equals: angular.equals,
      pattern: /[^/]*/
    },
    any: { // does not encode/decode
      encode: angular.identity,
      decode: angular.identity,
      equals: angular.equals,
      pattern: /.*/
    }
  };

  function getDefaultConfig() {
    return {
      strict: isStrictMode,
      caseInsensitive: isCaseInsensitive
    };
  }

  function isInjectable(value) {
    return (isFunction(value) || (isArray(value) && isFunction(value[value.length - 1])));
  }

  /**
   * [Internal] Get the default value of a parameter, which may be an injectable function.
   */
  $UrlMatcherFactory.$$getDefaultValue = function(config) {
    if (!isInjectable(config.value)) return config.value;
    if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
    return injector.invoke(config.value);
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#caseInsensitive
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URL matching should be case sensitive (the default behavior), or not.
   *
   * @param {boolean} value `false` to match URL in a case sensitive manner; otherwise `true`;
   * @returns {boolean} the current value of caseInsensitive
   */
  this.caseInsensitive = function(value) {
    if (isDefined(value))
      isCaseInsensitive = value;
    return isCaseInsensitive;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#strictMode
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Defines whether URLs should match trailing slashes, or not (the default behavior).
   *
   * @param {boolean=} value `false` to match trailing slashes in URLs, otherwise `true`.
   * @returns {boolean} the current value of strictMode
   */
  this.strictMode = function(value) {
    if (isDefined(value))
      isStrictMode = value;
    return isStrictMode;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#defaultSquashPolicy
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Sets the default behavior when generating or matching URLs with default parameter values.
   *
   * @param {string} value A string that defines the default parameter URL squashing behavior.
   *    `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL
   *    `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the
   *             parameter is surrounded by slashes, squash (remove) one slash from the URL
   *    any other string, e.g. "~": When generating an href with a default parameter value, squash (remove)
   *             the parameter value from the URL and replace it with this string.
   */
  this.defaultSquashPolicy = function(value) {
    if (!isDefined(value)) return defaultSquashPolicy;
    if (value !== true && value !== false && !isString(value))
      throw new Error("Invalid squash policy: " + value + ". Valid policies: false, true, arbitrary-string");
    defaultSquashPolicy = value;
    return value;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#compile
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Creates a {@link ui.router.util.type:UrlMatcher `UrlMatcher`} for the specified pattern.
   *
   * @param {string} pattern  The URL pattern.
   * @param {Object} config  The config object hash.
   * @returns {UrlMatcher}  The UrlMatcher.
   */
  this.compile = function (pattern, config) {
    return new UrlMatcher(pattern, extend(getDefaultConfig(), config));
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#isMatcher
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Returns true if the specified object is a `UrlMatcher`, or false otherwise.
   *
   * @param {Object} object  The object to perform the type check against.
   * @returns {Boolean}  Returns `true` if the object matches the `UrlMatcher` interface, by
   *          implementing all the same methods.
   */
  this.isMatcher = function (o) {
    if (!isObject(o)) return false;
    var result = true;

    forEach(UrlMatcher.prototype, function(val, name) {
      if (isFunction(val)) {
        result = result && (isDefined(o[name]) && isFunction(o[name]));
      }
    });
    return result;
  };

  /**
   * @ngdoc function
   * @name ui.router.util.$urlMatcherFactory#type
   * @methodOf ui.router.util.$urlMatcherFactory
   *
   * @description
   * Registers a custom {@link ui.router.util.type:Type `Type`} object that can be used to
   * generate URLs with typed parameters.
   *
   * @param {string} name  The type name.
   * @param {Object|Function} definition   The type definition. See
   *        {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   * @param {Object|Function} definitionFn (optional) A function that is injected before the app
   *        runtime starts.  The result of this function is merged into the existing `definition`.
   *        See {@link ui.router.util.type:Type `Type`} for information on the values accepted.
   *
   * @returns {Object}  Returns `$urlMatcherFactoryProvider`.
   *
   * @example
   * This is a simple example of a custom type that encodes and decodes items from an
   * array, using the array index as the URL-encoded value:
   *
   * <pre>
   * var list = ['John', 'Paul', 'George', 'Ringo'];
   *
   * $urlMatcherFactoryProvider.type('listItem', {
   *   encode: function(item) {
   *     // Represent the list item in the URL using its corresponding index
   *     return list.indexOf(item);
   *   },
   *   decode: function(item) {
   *     // Look up the list item by index
   *     return list[parseInt(item, 10)];
   *   },
   *   is: function(item) {
   *     // Ensure the item is valid by checking to see that it appears
   *     // in the list
   *     return list.indexOf(item) > -1;
   *   }
   * });
   *
   * $stateProvider.state('list', {
   *   url: "/list/{item:listItem}",
   *   controller: function($scope, $stateParams) {
   *     console.log($stateParams.item);
   *   }
   * });
   *
   * // ...
   *
   * // Changes URL to '/list/3', logs "Ringo" to the console
   * $state.go('list', { item: "Ringo" });
   * </pre>
   *
   * This is a more complex example of a type that relies on dependency injection to
   * interact with services, and uses the parameter name from the URL to infer how to
   * handle encoding and decoding parameter values:
   *
   * <pre>
   * // Defines a custom type that gets a value from a service,
   * // where each service gets different types of values from
   * // a backend API:
   * $urlMatcherFactoryProvider.type('dbObject', {}, function(Users, Posts) {
   *
   *   // Matches up services to URL parameter names
   *   var services = {
   *     user: Users,
   *     post: Posts
   *   };
   *
   *   return {
   *     encode: function(object) {
   *       // Represent the object in the URL using its unique ID
   *       return object.id;
   *     },
   *     decode: function(value, key) {
   *       // Look up the object by ID, using the parameter
   *       // name (key) to call the correct service
   *       return services[key].findById(value);
   *     },
   *     is: function(object, key) {
   *       // Check that object is a valid dbObject
   *       return angular.isObject(object) && object.id && services[key];
   *     }
   *     equals: function(a, b) {
   *       // Check the equality of decoded objects by comparing
   *       // their unique IDs
   *       return a.id === b.id;
   *     }
   *   };
   * });
   *
   * // In a config() block, you can then attach URLs with
   * // type-annotated parameters:
   * $stateProvider.state('users', {
   *   url: "/users",
   *   // ...
   * }).state('users.item', {
   *   url: "/{user:dbObject}",
   *   controller: function($scope, $stateParams) {
   *     // $stateParams.user will now be an object returned from
   *     // the Users service
   *   },
   *   // ...
   * });
   * </pre>
   */
  this.type = function (name, definition, definitionFn) {
    if (!isDefined(definition)) return $types[name];
    if ($types.hasOwnProperty(name)) throw new Error("A type named '" + name + "' has already been defined.");

    $types[name] = new Type(extend({ name: name }, definition));
    if (definitionFn) {
      typeQueue.push({ name: name, def: definitionFn });
      if (!enqueue) flushTypeQueue();
    }
    return this;
  };

  // `flushTypeQueue()` waits until `$urlMatcherFactory` is injected before invoking the queued `definitionFn`s
  function flushTypeQueue() {
    while(typeQueue.length) {
      var type = typeQueue.shift();
      if (type.pattern) throw new Error("You cannot override a type's .pattern at runtime.");
      angular.extend($types[type.name], injector.invoke(type.def));
    }
  }

  // Register default types. Store them in the prototype of $types.
  forEach(defaultTypes, function(type, name) { $types[name] = new Type(extend({name: name}, type)); });
  $types = inherit($types, {});

  /* No need to document $get, since it returns this */
  this.$get = ['$injector', function ($injector) {
    injector = $injector;
    enqueue = false;
    flushTypeQueue();

    forEach(defaultTypes, function(type, name) {
      if (!$types[name]) $types[name] = new Type(type);
    });
    return this;
  }];

  this.Param = function Param(id, type, config, location) {
    var self = this;
    config = unwrapShorthand(config);
    type = getType(config, type, location);
    var arrayMode = getArrayMode();
    type = arrayMode ? type.$asArray(arrayMode, location === "search") : type;
    if (type.name === "string" && !arrayMode && location === "path" && config.value === undefined)
      config.value = ""; // for 0.2.x; in 0.3.0+ do not automatically default to ""
    var isOptional = config.value !== undefined;
    var squash = getSquashPolicy(config, isOptional);
    var replace = getReplace(config, arrayMode, isOptional, squash);

    function unwrapShorthand(config) {
      var keys = isObject(config) ? objectKeys(config) : [];
      var isShorthand = indexOf(keys, "value") === -1 && indexOf(keys, "type") === -1 &&
                        indexOf(keys, "squash") === -1 && indexOf(keys, "array") === -1;
      if (isShorthand) config = { value: config };
      config.$$fn = isInjectable(config.value) ? config.value : function () { return config.value; };
      return config;
    }

    function getType(config, urlType, location) {
      if (config.type && urlType) throw new Error("Param '"+id+"' has two type configurations.");
      if (urlType) return urlType;
      if (!config.type) return (location === "config" ? $types.any : $types.string);
      return config.type instanceof Type ? config.type : new Type(config.type);
    }

    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.
    function getArrayMode() {
      var arrayDefaults = { array: (location === "search" ? "auto" : false) };
      var arrayParamNomenclature = id.match(/\[\]$/) ? { array: true } : {};
      return extend(arrayDefaults, arrayParamNomenclature, config).array;
    }

    /**
     * returns false, true, or the squash value to indicate the "default parameter url squash policy".
     */
    function getSquashPolicy(config, isOptional) {
      var squash = config.squash;
      if (!isOptional || squash === false) return false;
      if (!isDefined(squash) || squash == null) return defaultSquashPolicy;
      if (squash === true || isString(squash)) return squash;
      throw new Error("Invalid squash policy: '" + squash + "'. Valid policies: false, true, or arbitrary string");
    }

    function getReplace(config, arrayMode, isOptional, squash) {
      var replace, configuredKeys, defaultPolicy = [
        { from: "",   to: (isOptional || arrayMode ? undefined : "") },
        { from: null, to: (isOptional || arrayMode ? undefined : "") }
      ];
      replace = isArray(config.replace) ? config.replace : [];
      if (isString(squash))
        replace.push({ from: squash, to: undefined });
      configuredKeys = map(replace, function(item) { return item.from; } );
      return filter(defaultPolicy, function(item) { return indexOf(configuredKeys, item.from) === -1; }).concat(replace);
    }

    /**
     * [Internal] Get the default value of a parameter, which may be an injectable function.
     */
    function $$getDefaultValue() {
      if (!injector) throw new Error("Injectable functions cannot be called at configuration time");
      var defaultValue = injector.invoke(config.$$fn);
      if (defaultValue !== null && defaultValue !== undefined && !self.type.is(defaultValue))
        throw new Error("Default value (" + defaultValue + ") for parameter '" + self.id + "' is not an instance of Type (" + self.type.name + ")");
      return defaultValue;
    }

    /**
     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the
     * default value, which may be the result of an injectable function.
     */
    function $value(value) {
      function hasReplaceVal(val) { return function(obj) { return obj.from === val; }; }
      function $replace(value) {
        var replacement = map(filter(self.replace, hasReplaceVal(value)), function(obj) { return obj.to; });
        return replacement.length ? replacement[0] : value;
      }
      value = $replace(value);
      return !isDefined(value) ? $$getDefaultValue() : self.type.$normalize(value);
    }

    function toString() { return "{Param:" + id + " " + type + " squash: '" + squash + "' optional: " + isOptional + "}"; }

    extend(this, {
      id: id,
      type: type,
      location: location,
      array: arrayMode,
      squash: squash,
      replace: replace,
      isOptional: isOptional,
      value: $value,
      dynamic: undefined,
      config: config,
      toString: toString
    });
  };

  function ParamSet(params) {
    extend(this, params || {});
  }

  ParamSet.prototype = {
    $$new: function() {
      return inherit(this, extend(new ParamSet(), { $$parent: this}));
    },
    $$keys: function () {
      var keys = [], chain = [], parent = this,
        ignore = objectKeys(ParamSet.prototype);
      while (parent) { chain.push(parent); parent = parent.$$parent; }
      chain.reverse();
      forEach(chain, function(paramset) {
        forEach(objectKeys(paramset), function(key) {
            if (indexOf(keys, key) === -1 && indexOf(ignore, key) === -1) keys.push(key);
        });
      });
      return keys;
    },
    $$values: function(paramValues) {
      var values = {}, self = this;
      forEach(self.$$keys(), function(key) {
        values[key] = self[key].value(paramValues && paramValues[key]);
      });
      return values;
    },
    $$equals: function(paramValues1, paramValues2) {
      var equal = true, self = this;
      forEach(self.$$keys(), function(key) {
        var left = paramValues1 && paramValues1[key], right = paramValues2 && paramValues2[key];
        if (!self[key].type.equals(left, right)) equal = false;
      });
      return equal;
    },
    $$validates: function $$validate(paramValues) {
      var keys = this.$$keys(), i, param, rawVal, normalized, encoded;
      for (i = 0; i < keys.length; i++) {
        param = this[keys[i]];
        rawVal = paramValues[keys[i]];
        if ((rawVal === undefined || rawVal === null) && param.isOptional)
          break; // There was no parameter value, but the param is optional
        normalized = param.type.$normalize(rawVal);
        if (!param.type.is(normalized))
          return false; // The value was not of the correct Type, and could not be decoded to the correct Type
        encoded = param.type.encode(normalized);
        if (angular.isString(encoded) && !param.type.pattern.exec(encoded))
          return false; // The value was of the correct type, but when encoded, did not match the Type's regexp
      }
      return true;
    },
    $$parent: undefined
  };

  this.ParamSet = ParamSet;
}

// Register as a provider so it's available to other providers
angular.module('ui.router.util').provider('$urlMatcherFactory', $UrlMatcherFactory);
angular.module('ui.router.util').run(['$urlMatcherFactory', function($urlMatcherFactory) { }]);

/**
 * @ngdoc object
 * @name ui.router.router.$urlRouterProvider
 *
 * @requires ui.router.util.$urlMatcherFactoryProvider
 * @requires $locationProvider
 *
 * @description
 * `$urlRouterProvider` has the responsibility of watching `$location`. 
 * When `$location` changes it runs through a list of rules one by one until a 
 * match is found. `$urlRouterProvider` is used behind the scenes anytime you specify 
 * a url in a state configuration. All urls are compiled into a UrlMatcher object.
 *
 * There are several methods on `$urlRouterProvider` that make it useful to use directly
 * in your module config.
 */
$UrlRouterProvider.$inject = ['$locationProvider', '$urlMatcherFactoryProvider'];
function $UrlRouterProvider(   $locationProvider,   $urlMatcherFactory) {
  var rules = [], otherwise = null, interceptDeferred = false, listener;

  // Returns a string that is a prefix of all strings matching the RegExp
  function regExpPrefix(re) {
    var prefix = /^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(re.source);
    return (prefix != null) ? prefix[1].replace(/\\(.)/g, "$1") : '';
  }

  // Interpolates matched values into a String.replace()-style pattern
  function interpolate(pattern, match) {
    return pattern.replace(/\$(\$|\d{1,2})/, function (m, what) {
      return match[what === '$' ? 0 : Number(what)];
    });
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#rule
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines rules that are used by `$urlRouterProvider` to find matches for
   * specific URLs.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // Here's an example of how you might allow case insensitive urls
   *   $urlRouterProvider.rule(function ($injector, $location) {
   *     var path = $location.path(),
   *         normalized = path.toLowerCase();
   *
   *     if (path !== normalized) {
   *       return normalized;
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {object} rule Handler function that takes `$injector` and `$location`
   * services as arguments. You can use them to return a valid path as a string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.rule = function (rule) {
    if (!isFunction(rule)) throw new Error("'rule' must be a function");
    rules.push(rule);
    return this;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouterProvider#otherwise
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Defines a path that is used when an invalid route is requested.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   // if the path doesn't match any of the urls you configured
   *   // otherwise will take care of routing the user to the
   *   // specified url
   *   $urlRouterProvider.otherwise('/index');
   *
   *   // Example of using function rule as param
   *   $urlRouterProvider.otherwise(function ($injector, $location) {
   *     return '/a/valid/url';
   *   });
   * });
   * </pre>
   *
   * @param {string|object} rule The url path you want to redirect to or a function 
   * rule that returns the url path. The function version is passed two params: 
   * `$injector` and `$location` services, and must return a url string.
   *
   * @return {object} `$urlRouterProvider` - `$urlRouterProvider` instance
   */
  this.otherwise = function (rule) {
    if (isString(rule)) {
      var redirect = rule;
      rule = function () { return redirect; };
    }
    else if (!isFunction(rule)) throw new Error("'rule' must be a function");
    otherwise = rule;
    return this;
  };


  function handleIfMatch($injector, handler, match) {
    if (!match) return false;
    var result = $injector.invoke(handler, handler, { $match: match });
    return isDefined(result) ? result : true;
  }

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#when
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Registers a handler for a given url matching. if handle is a string, it is
   * treated as a redirect, and is interpolated according to the syntax of match
   * (i.e. like `String.replace()` for `RegExp`, or like a `UrlMatcher` pattern otherwise).
   *
   * If the handler is a function, it is injectable. It gets invoked if `$location`
   * matches. You have the option of inject the match object as `$match`.
   *
   * The handler can return
   *
   * - **falsy** to indicate that the rule didn't match after all, then `$urlRouter`
   *   will continue trying to find another one that matches.
   * - **string** which is treated as a redirect and passed to `$location.url()`
   * - **void** or any **truthy** value tells `$urlRouter` that the url was handled.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *   $urlRouterProvider.when($state.url, function ($match, $stateParams) {
   *     if ($state.$current.navigable !== state ||
   *         !equalForKeys($match, $stateParams) {
   *      $state.transitionTo(state, $match, false);
   *     }
   *   });
   * });
   * </pre>
   *
   * @param {string|object} what The incoming path that you want to redirect.
   * @param {string|object} handler The path you want to redirect your user to.
   */
  this.when = function (what, handler) {
    var redirect, handlerIsString = isString(handler);
    if (isString(what)) what = $urlMatcherFactory.compile(what);

    if (!handlerIsString && !isFunction(handler) && !isArray(handler))
      throw new Error("invalid 'handler' in when()");

    var strategies = {
      matcher: function (what, handler) {
        if (handlerIsString) {
          redirect = $urlMatcherFactory.compile(handler);
          handler = ['$match', function ($match) { return redirect.format($match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path(), $location.search()));
        }, {
          prefix: isString(what.prefix) ? what.prefix : ''
        });
      },
      regex: function (what, handler) {
        if (what.global || what.sticky) throw new Error("when() RegExp must not be global or sticky");

        if (handlerIsString) {
          redirect = handler;
          handler = ['$match', function ($match) { return interpolate(redirect, $match); }];
        }
        return extend(function ($injector, $location) {
          return handleIfMatch($injector, handler, what.exec($location.path()));
        }, {
          prefix: regExpPrefix(what)
        });
      }
    };

    var check = { matcher: $urlMatcherFactory.isMatcher(what), regex: what instanceof RegExp };

    for (var n in check) {
      if (check[n]) return this.rule(strategies[n](what, handler));
    }

    throw new Error("invalid 'what' in when()");
  };

  /**
   * @ngdoc function
   * @name ui.router.router.$urlRouterProvider#deferIntercept
   * @methodOf ui.router.router.$urlRouterProvider
   *
   * @description
   * Disables (or enables) deferring location change interception.
   *
   * If you wish to customize the behavior of syncing the URL (for example, if you wish to
   * defer a transition but maintain the current URL), call this method at configuration time.
   * Then, at run time, call `$urlRouter.listen()` after you have configured your own
   * `$locationChangeSuccess` event handler.
   *
   * @example
   * <pre>
   * var app = angular.module('app', ['ui.router.router']);
   *
   * app.config(function ($urlRouterProvider) {
   *
   *   // Prevent $urlRouter from automatically intercepting URL changes;
   *   // this allows you to configure custom behavior in between
   *   // location changes and route synchronization:
   *   $urlRouterProvider.deferIntercept();
   *
   * }).run(function ($rootScope, $urlRouter, UserService) {
   *
   *   $rootScope.$on('$locationChangeSuccess', function(e) {
   *     // UserService is an example service for managing user state
   *     if (UserService.isLoggedIn()) return;
   *
   *     // Prevent $urlRouter's default handler from firing
   *     e.preventDefault();
   *
   *     UserService.handleLogin().then(function() {
   *       // Once the user has logged in, sync the current URL
   *       // to the router:
   *       $urlRouter.sync();
   *     });
   *   });
   *
   *   // Configures $urlRouter's listener *after* your custom listener
   *   $urlRouter.listen();
   * });
   * </pre>
   *
   * @param {boolean} defer Indicates whether to defer location change interception. Passing
            no parameter is equivalent to `true`.
   */
  this.deferIntercept = function (defer) {
    if (defer === undefined) defer = true;
    interceptDeferred = defer;
  };

  /**
   * @ngdoc object
   * @name ui.router.router.$urlRouter
   *
   * @requires $location
   * @requires $rootScope
   * @requires $injector
   * @requires $browser
   *
   * @description
   *
   */
  this.$get = $get;
  $get.$inject = ['$location', '$rootScope', '$injector', '$browser'];
  function $get(   $location,   $rootScope,   $injector,   $browser) {

    var baseHref = $browser.baseHref(), location = $location.url(), lastPushedUrl;

    function appendBasePath(url, isHtml5, absolute) {
      if (baseHref === '/') return url;
      if (isHtml5) return baseHref.slice(0, -1) + url;
      if (absolute) return baseHref.slice(1) + url;
      return url;
    }

    // TODO: Optimize groups of rules with non-empty prefix into some sort of decision tree
    function update(evt) {
      if (evt && evt.defaultPrevented) return;
      var ignoreUpdate = lastPushedUrl && $location.url() === lastPushedUrl;
      lastPushedUrl = undefined;
      // TODO: Re-implement this in 1.0 for https://github.com/angular-ui/ui-router/issues/1573
      //if (ignoreUpdate) return true;

      function check(rule) {
        var handled = rule($injector, $location);

        if (!handled) return false;
        if (isString(handled)) $location.replace().url(handled);
        return true;
      }
      var n = rules.length, i;

      for (i = 0; i < n; i++) {
        if (check(rules[i])) return;
      }
      // always check otherwise last to allow dynamic updates to the set of rules
      if (otherwise) check(otherwise);
    }

    function listen() {
      listener = listener || $rootScope.$on('$locationChangeSuccess', update);
      return listener;
    }

    if (!interceptDeferred) listen();

    return {
      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#sync
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * Triggers an update; the same update that happens when the address bar url changes, aka `$locationChangeSuccess`.
       * This method is useful when you need to use `preventDefault()` on the `$locationChangeSuccess` event,
       * perform some custom logic (route protection, auth, config, redirection, etc) and then finally proceed
       * with the transition by calling `$urlRouter.sync()`.
       *
       * @example
       * <pre>
       * angular.module('app', ['ui.router'])
       *   .run(function($rootScope, $urlRouter) {
       *     $rootScope.$on('$locationChangeSuccess', function(evt) {
       *       // Halt state change from even starting
       *       evt.preventDefault();
       *       // Perform custom logic
       *       var meetsRequirement = ...
       *       // Continue with the update and state transition if logic allows
       *       if (meetsRequirement) $urlRouter.sync();
       *     });
       * });
       * </pre>
       */
      sync: function() {
        update();
      },

      listen: function() {
        return listen();
      },

      update: function(read) {
        if (read) {
          location = $location.url();
          return;
        }
        if ($location.url() === location) return;

        $location.url(location);
        $location.replace();
      },

      push: function(urlMatcher, params, options) {
         var url = urlMatcher.format(params || {});

        // Handle the special hash param, if needed
        if (url !== null && params && params['#']) {
            url += '#' + params['#'];
        }

        $location.url(url);
        lastPushedUrl = options && options.$$avoidResync ? $location.url() : undefined;
        if (options && options.replace) $location.replace();
      },

      /**
       * @ngdoc function
       * @name ui.router.router.$urlRouter#href
       * @methodOf ui.router.router.$urlRouter
       *
       * @description
       * A URL generation method that returns the compiled URL for a given
       * {@link ui.router.util.type:UrlMatcher `UrlMatcher`}, populated with the provided parameters.
       *
       * @example
       * <pre>
       * $bob = $urlRouter.href(new UrlMatcher("/about/:person"), {
       *   person: "bob"
       * });
       * // $bob == "/about/bob";
       * </pre>
       *
       * @param {UrlMatcher} urlMatcher The `UrlMatcher` object which is used as the template of the URL to generate.
       * @param {object=} params An object of parameter values to fill the matcher's required parameters.
       * @param {object=} options Options object. The options are:
       *
       * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
       *
       * @returns {string} Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`
       */
      href: function(urlMatcher, params, options) {
        if (!urlMatcher.validates(params)) return null;

        var isHtml5 = $locationProvider.html5Mode();
        if (angular.isObject(isHtml5)) {
          isHtml5 = isHtml5.enabled;
        }
        
        var url = urlMatcher.format(params);
        options = options || {};

        if (!isHtml5 && url !== null) {
          url = "#" + $locationProvider.hashPrefix() + url;
        }

        // Handle special hash param, if needed
        if (url !== null && params && params['#']) {
          url += '#' + params['#'];
        }

        url = appendBasePath(url, isHtml5, options.absolute);

        if (!options.absolute || !url) {
          return url;
        }

        var slash = (!isHtml5 && url ? '/' : ''), port = $location.port();
        port = (port === 80 || port === 443 ? '' : ':' + port);

        return [$location.protocol(), '://', $location.host(), port, slash, url].join('');
      }
    };
  }
}

angular.module('ui.router.router').provider('$urlRouter', $UrlRouterProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$stateProvider
 *
 * @requires ui.router.router.$urlRouterProvider
 * @requires ui.router.util.$urlMatcherFactoryProvider
 *
 * @description
 * The new `$stateProvider` works similar to Angular's v1 router, but it focuses purely
 * on state.
 *
 * A state corresponds to a "place" in the application in terms of the overall UI and
 * navigation. A state describes (via the controller / template / view properties) what
 * the UI looks like and does at that place.
 *
 * States often have things in common, and the primary way of factoring out these
 * commonalities in this model is via the state hierarchy, i.e. parent/child states aka
 * nested states.
 *
 * The `$stateProvider` provides interfaces to declare these states for your app.
 */
$StateProvider.$inject = ['$urlRouterProvider', '$urlMatcherFactoryProvider'];
function $StateProvider(   $urlRouterProvider,   $urlMatcherFactory) {

  var root, states = {}, $state, queue = {}, abstractKey = 'abstract';

  // Builds state properties from definition passed to registerState()
  var stateBuilder = {

    // Derive parent state from a hierarchical name only if 'parent' is not explicitly defined.
    // state.children = [];
    // if (parent) parent.children.push(state);
    parent: function(state) {
      if (isDefined(state.parent) && state.parent) return findState(state.parent);
      // regex matches any valid composite state name
      // would match "contact.list" but not "contacts"
      var compositeName = /^(.+)\.[^.]+$/.exec(state.name);
      return compositeName ? findState(compositeName[1]) : root;
    },

    // inherit 'data' from parent and override by own values (if any)
    data: function(state) {
      if (state.parent && state.parent.data) {
        state.data = state.self.data = extend({}, state.parent.data, state.data);
      }
      return state.data;
    },

    // Build a URLMatcher if necessary, either via a relative or absolute URL
    url: function(state) {
      var url = state.url, config = { params: state.params || {} };

      if (isString(url)) {
        if (url.charAt(0) == '^') return $urlMatcherFactory.compile(url.substring(1), config);
        return (state.parent.navigable || root).url.concat(url, config);
      }

      if (!url || $urlMatcherFactory.isMatcher(url)) return url;
      throw new Error("Invalid url '" + url + "' in state '" + state + "'");
    },

    // Keep track of the closest ancestor state that has a URL (i.e. is navigable)
    navigable: function(state) {
      return state.url ? state : (state.parent ? state.parent.navigable : null);
    },

    // Own parameters for this state. state.url.params is already built at this point. Create and add non-url params
    ownParams: function(state) {
      var params = state.url && state.url.params || new $$UMFP.ParamSet();
      forEach(state.params || {}, function(config, id) {
        if (!params[id]) params[id] = new $$UMFP.Param(id, null, config, "config");
      });
      return params;
    },

    // Derive parameters for this state and ensure they're a super-set of parent's parameters
    params: function(state) {
      return state.parent && state.parent.params ? extend(state.parent.params.$$new(), state.ownParams) : new $$UMFP.ParamSet();
    },

    // If there is no explicit multi-view configuration, make one up so we don't have
    // to handle both cases in the view directive later. Note that having an explicit
    // 'views' property will mean the default unnamed view properties are ignored. This
    // is also a good time to resolve view names to absolute names, so everything is a
    // straight lookup at link time.
    views: function(state) {
      var views = {};

      forEach(isDefined(state.views) ? state.views : { '': state }, function (view, name) {
        if (name.indexOf('@') < 0) name += '@' + state.parent.name;
        views[name] = view;
      });
      return views;
    },

    // Keep a full path from the root down to this state as this is needed for state activation.
    path: function(state) {
      return state.parent ? state.parent.path.concat(state) : []; // exclude root from path
    },

    // Speed up $state.contains() as it's used a lot
    includes: function(state) {
      var includes = state.parent ? extend({}, state.parent.includes) : {};
      includes[state.name] = true;
      return includes;
    },

    $delegates: {}
  };

  function isRelative(stateName) {
    return stateName.indexOf(".") === 0 || stateName.indexOf("^") === 0;
  }

  function findState(stateOrName, base) {
    if (!stateOrName) return undefined;

    var isStr = isString(stateOrName),
        name  = isStr ? stateOrName : stateOrName.name,
        path  = isRelative(name);

    if (path) {
      if (!base) throw new Error("No reference point given for path '"  + name + "'");
      base = findState(base);
      
      var rel = name.split("."), i = 0, pathLength = rel.length, current = base;

      for (; i < pathLength; i++) {
        if (rel[i] === "" && i === 0) {
          current = base;
          continue;
        }
        if (rel[i] === "^") {
          if (!current.parent) throw new Error("Path '" + name + "' not valid for state '" + base.name + "'");
          current = current.parent;
          continue;
        }
        break;
      }
      rel = rel.slice(i).join(".");
      name = current.name + (current.name && rel ? "." : "") + rel;
    }
    var state = states[name];

    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {
      return state;
    }
    return undefined;
  }

  function queueState(parentName, state) {
    if (!queue[parentName]) {
      queue[parentName] = [];
    }
    queue[parentName].push(state);
  }

  function flushQueuedChildren(parentName) {
    var queued = queue[parentName] || [];
    while(queued.length) {
      registerState(queued.shift());
    }
  }

  function registerState(state) {
    // Wrap a new object around the state so we can store our private details easily.
    state = inherit(state, {
      self: state,
      resolve: state.resolve || {},
      toString: function() { return this.name; }
    });

    var name = state.name;
    if (!isString(name) || name.indexOf('@') >= 0) throw new Error("State must have a valid name");
    if (states.hasOwnProperty(name)) throw new Error("State '" + name + "'' is already defined");

    // Get parent name
    var parentName = (name.indexOf('.') !== -1) ? name.substring(0, name.lastIndexOf('.'))
        : (isString(state.parent)) ? state.parent
        : (isObject(state.parent) && isString(state.parent.name)) ? state.parent.name
        : '';

    // If parent is not registered yet, add state to queue and register later
    if (parentName && !states[parentName]) {
      return queueState(parentName, state.self);
    }

    for (var key in stateBuilder) {
      if (isFunction(stateBuilder[key])) state[key] = stateBuilder[key](state, stateBuilder.$delegates[key]);
    }
    states[name] = state;

    // Register the state in the global state list and with $urlRouter if necessary.
    if (!state[abstractKey] && state.url) {
      $urlRouterProvider.when(state.url, ['$match', '$stateParams', function ($match, $stateParams) {
        if ($state.$current.navigable != state || !equalForKeys($match, $stateParams)) {
          $state.transitionTo(state, $match, { inherit: true, location: false });
        }
      }]);
    }

    // Register any queued children
    flushQueuedChildren(name);

    return state;
  }

  // Checks text to see if it looks like a glob.
  function isGlob (text) {
    return text.indexOf('*') > -1;
  }

  // Returns true if glob matches current $state name.
  function doesStateMatchGlob (glob) {
    var globSegments = glob.split('.'),
        segments = $state.$current.name.split('.');

    //match single stars
    for (var i = 0, l = globSegments.length; i < l; i++) {
      if (globSegments[i] === '*') {
        segments[i] = '*';
      }
    }

    //match greedy starts
    if (globSegments[0] === '**') {
       segments = segments.slice(indexOf(segments, globSegments[1]));
       segments.unshift('**');
    }
    //match greedy ends
    if (globSegments[globSegments.length - 1] === '**') {
       segments.splice(indexOf(segments, globSegments[globSegments.length - 2]) + 1, Number.MAX_VALUE);
       segments.push('**');
    }

    if (globSegments.length != segments.length) {
      return false;
    }

    return segments.join('') === globSegments.join('');
  }


  // Implicit root state that is always active
  root = registerState({
    name: '',
    url: '^',
    views: null,
    'abstract': true
  });
  root.navigable = null;


  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#decorator
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Allows you to extend (carefully) or override (at your own peril) the 
   * `stateBuilder` object used internally by `$stateProvider`. This can be used 
   * to add custom functionality to ui-router, for example inferring templateUrl 
   * based on the state name.
   *
   * When passing only a name, it returns the current (original or decorated) builder
   * function that matches `name`.
   *
   * The builder functions that can be decorated are listed below. Though not all
   * necessarily have a good use case for decoration, that is up to you to decide.
   *
   * In addition, users can attach custom decorators, which will generate new 
   * properties within the state's internal definition. There is currently no clear 
   * use-case for this beyond accessing internal states (i.e. $state.$current), 
   * however, expect this to become increasingly relevant as we introduce additional 
   * meta-programming features.
   *
   * **Warning**: Decorators should not be interdependent because the order of 
   * execution of the builder functions in non-deterministic. Builder functions 
   * should only be dependent on the state definition object and super function.
   *
   *
   * Existing builder functions and current return values:
   *
   * - **parent** `{object}` - returns the parent state object.
   * - **data** `{object}` - returns state data, including any inherited data that is not
   *   overridden by own values (if any).
   * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}
   *   or `null`.
   * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is 
   *   navigable).
   * - **params** `{object}` - returns an array of state params that are ensured to 
   *   be a super-set of parent's params.
   * - **views** `{object}` - returns a views object where each key is an absolute view 
   *   name (i.e. "viewName@stateName") and each value is the config object 
   *   (template, controller) for the view. Even when you don't use the views object 
   *   explicitly on a state config, one is still created for you internally.
   *   So by decorating this builder function you have access to decorating template 
   *   and controller properties.
   * - **ownParams** `{object}` - returns an array of params that belong to the state, 
   *   not including any params defined by ancestor states.
   * - **path** `{string}` - returns the full path from the root down to this state. 
   *   Needed for state activation.
   * - **includes** `{object}` - returns an object that includes every state that 
   *   would pass a `$state.includes()` test.
   *
   * @example
   * <pre>
   * // Override the internal 'views' builder with a function that takes the state
   * // definition, and a reference to the internal function being overridden:
   * $stateProvider.decorator('views', function (state, parent) {
   *   var result = {},
   *       views = parent(state);
   *
   *   angular.forEach(views, function (config, name) {
   *     var autoName = (state.name + '.' + name).replace('.', '/');
   *     config.templateUrl = config.templateUrl || '/partials/' + autoName + '.html';
   *     result[name] = config;
   *   });
   *   return result;
   * });
   *
   * $stateProvider.state('home', {
   *   views: {
   *     'contact.list': { controller: 'ListController' },
   *     'contact.item': { controller: 'ItemController' }
   *   }
   * });
   *
   * // ...
   *
   * $state.go('home');
   * // Auto-populates list and item views with /partials/home/contact/list.html,
   * // and /partials/home/contact/item.html, respectively.
   * </pre>
   *
   * @param {string} name The name of the builder function to decorate. 
   * @param {object} func A function that is responsible for decorating the original 
   * builder function. The function receives two parameters:
   *
   *   - `{object}` - state - The state config object.
   *   - `{object}` - super - The original builder function.
   *
   * @return {object} $stateProvider - $stateProvider instance
   */
  this.decorator = decorator;
  function decorator(name, func) {
    /*jshint validthis: true */
    if (isString(name) && !isDefined(func)) {
      return stateBuilder[name];
    }
    if (!isFunction(func) || !isString(name)) {
      return this;
    }
    if (stateBuilder[name] && !stateBuilder.$delegates[name]) {
      stateBuilder.$delegates[name] = stateBuilder[name];
    }
    stateBuilder[name] = func;
    return this;
  }

  /**
   * @ngdoc function
   * @name ui.router.state.$stateProvider#state
   * @methodOf ui.router.state.$stateProvider
   *
   * @description
   * Registers a state configuration under a given state name. The stateConfig object
   * has the following acceptable properties.
   *
   * @param {string} name A unique state name, e.g. "home", "about", "contacts".
   * To create a parent/child state use a dot, e.g. "about.sales", "home.newest".
   * @param {object} stateConfig State configuration object.
   * @param {string|function=} stateConfig.template
   * <a id='template'></a>
   *   html template as a string or a function that returns
   *   an html template as a string which should be used by the uiView directives. This property 
   *   takes precedence over templateUrl.
   *   
   *   If `template` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by
   *     applying the current state
   *
   * <pre>template:
   *   "<h1>inline template definition</h1>" +
   *   "<div ui-view></div>"</pre>
   * <pre>template: function(params) {
   *       return "<h1>generated template</h1>"; }</pre>
   * </div>
   *
   * @param {string|function=} stateConfig.templateUrl
   * <a id='templateUrl'></a>
   *
   *   path or function that returns a path to an html
   *   template that should be used by uiView.
   *   
   *   If `templateUrl` is a function, it will be called with the following parameters:
   *
   *   - {array.&lt;object&gt;} - state parameters extracted from the current $location.path() by 
   *     applying the current state
   *
   * <pre>templateUrl: "home.html"</pre>
   * <pre>templateUrl: function(params) {
   *     return myTemplates[params.pageId]; }</pre>
   *
   * @param {function=} stateConfig.templateProvider
   * <a id='templateProvider'></a>
   *    Provider function that returns HTML content string.
   * <pre> templateProvider:
   *       function(MyTemplateService, params) {
   *         return MyTemplateService.getTemplate(params.pageId);
   *       }</pre>
   *
   * @param {string|function=} stateConfig.controller
   * <a id='controller'></a>
   *
   *  Controller fn that should be associated with newly
   *   related scope or the name of a registered controller if passed as a string.
   *   Optionally, the ControllerAs may be declared here.
   * <pre>controller: "MyRegisteredController"</pre>
   * <pre>controller:
   *     "MyRegisteredController as fooCtrl"}</pre>
   * <pre>controller: function($scope, MyService) {
   *     $scope.data = MyService.getData(); }</pre>
   *
   * @param {function=} stateConfig.controllerProvider
   * <a id='controllerProvider'></a>
   *
   * Injectable provider function that returns the actual controller or string.
   * <pre>controllerProvider:
   *   function(MyResolveData) {
   *     if (MyResolveData.foo)
   *       return "FooCtrl"
   *     else if (MyResolveData.bar)
   *       return "BarCtrl";
   *     else return function($scope) {
   *       $scope.baz = "Qux";
   *     }
   *   }</pre>
   *
   * @param {string=} stateConfig.controllerAs
   * <a id='controllerAs'></a>
   * 
   * A controller alias name. If present the controller will be
   *   published to scope under the controllerAs name.
   * <pre>controllerAs: "myCtrl"</pre>
   *
   * @param {string|object=} stateConfig.parent
   * <a id='parent'></a>
   * Optionally specifies the parent state of this state.
   *
   * <pre>parent: 'parentState'</pre>
   * <pre>parent: parentState // JS variable</pre>
   *
   * @param {object=} stateConfig.resolve
   * <a id='resolve'></a>
   *
   * An optional map&lt;string, function&gt; of dependencies which
   *   should be injected into the controller. If any of these dependencies are promises, 
   *   the router will wait for them all to be resolved before the controller is instantiated.
   *   If all the promises are resolved successfully, the $stateChangeSuccess event is fired
   *   and the values of the resolved promises are injected into any controllers that reference them.
   *   If any  of the promises are rejected the $stateChangeError event is fired.
   *
   *   The map object is:
   *   
   *   - key - {string}: name of dependency to be injected into controller
   *   - factory - {string|function}: If string then it is alias for service. Otherwise if function, 
   *     it is injected and return value it treated as dependency. If result is a promise, it is 
   *     resolved before its value is injected into controller.
   *
   * <pre>resolve: {
   *     myResolve1:
   *       function($http, $stateParams) {
   *         return $http.get("/api/foos/"+stateParams.fooID);
   *       }
   *     }</pre>
   *
   * @param {string=} stateConfig.url
   * <a id='url'></a>
   *
   *   A url fragment with optional parameters. When a state is navigated or
   *   transitioned to, the `$stateParams` service will be populated with any 
   *   parameters that were passed.
   *
   *   (See {@link ui.router.util.type:UrlMatcher UrlMatcher} `UrlMatcher`} for
   *   more details on acceptable patterns )
   *
   * examples:
   * <pre>url: "/home"
   * url: "/users/:userid"
   * url: "/books/{bookid:[a-zA-Z_-]}"
   * url: "/books/{categoryid:int}"
   * url: "/books/{publishername:string}/{categoryid:int}"
   * url: "/messages?before&after"
   * url: "/messages?{before:date}&{after:date}"
   * url: "/messages/:mailboxid?{before:date}&{after:date}"
   * </pre>
   *
   * @param {object=} stateConfig.views
   * <a id='views'></a>
   * an optional map&lt;string, object&gt; which defined multiple views, or targets views
   * manually/explicitly.
   *
   * Examples:
   *
   * Targets three named `ui-view`s in the parent state's template
   * <pre>views: {
   *     header: {
   *       controller: "headerCtrl",
   *       templateUrl: "header.html"
   *     }, body: {
   *       controller: "bodyCtrl",
   *       templateUrl: "body.html"
   *     }, footer: {
   *       controller: "footCtrl",
   *       templateUrl: "footer.html"
   *     }
   *   }</pre>
   *
   * Targets named `ui-view="header"` from grandparent state 'top''s template, and named `ui-view="body" from parent state's template.
   * <pre>views: {
   *     'header@top': {
   *       controller: "msgHeaderCtrl",
   *       templateUrl: "msgHeader.html"
   *     }, 'body': {
   *       controller: "messagesCtrl",
   *       templateUrl: "messages.html"
   *     }
   *   }</pre>
   *
   * @param {boolean=} [stateConfig.abstract=false]
   * <a id='abstract'></a>
   * An abstract state will never be directly activated,
   *   but can provide inherited properties to its common children states.
   * <pre>abstract: true</pre>
   *
   * @param {function=} stateConfig.onEnter
   * <a id='onEnter'></a>
   *
   * Callback function for when a state is entered. Good way
   *   to trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onEnter: function(MyService, $stateParams) {
   *     MyService.foo($stateParams.myParam);
   * }</pre>
   *
   * @param {function=} stateConfig.onExit
   * <a id='onExit'></a>
   *
   * Callback function for when a state is exited. Good way to
   *   trigger an action or dispatch an event, such as opening a dialog.
   * If minifying your scripts, make sure to explictly annotate this function,
   * because it won't be automatically annotated by your build tools.
   *
   * <pre>onExit: function(MyService, $stateParams) {
   *     MyService.cleanup($stateParams.myParam);
   * }</pre>
   *
   * @param {boolean=} [stateConfig.reloadOnSearch=true]
   * <a id='reloadOnSearch'></a>
   *
   * If `false`, will not retrigger the same state
   *   just because a search/query parameter has changed (via $location.search() or $location.hash()). 
   *   Useful for when you'd like to modify $location.search() without triggering a reload.
   * <pre>reloadOnSearch: false</pre>
   *
   * @param {object=} stateConfig.data
   * <a id='data'></a>
   *
   * Arbitrary data object, useful for custom configuration.  The parent state's `data` is
   *   prototypally inherited.  In other words, adding a data property to a state adds it to
   *   the entire subtree via prototypal inheritance.
   *
   * <pre>data: {
   *     requiredRole: 'foo'
   * } </pre>
   *
   * @param {object=} stateConfig.params
   * <a id='params'></a>
   *
   * A map which optionally configures parameters declared in the `url`, or
   *   defines additional non-url parameters.  For each parameter being
   *   configured, add a configuration object keyed to the name of the parameter.
   *
   *   Each parameter configuration object may contain the following properties:
   *
   *   - ** value ** - {object|function=}: specifies the default value for this
   *     parameter.  This implicitly sets this parameter as optional.
   *
   *     When UI-Router routes to a state and no value is
   *     specified for this parameter in the URL or transition, the
   *     default value will be used instead.  If `value` is a function,
   *     it will be injected and invoked, and the return value used.
   *
   *     *Note*: `undefined` is treated as "no default value" while `null`
   *     is treated as "the default value is `null`".
   *
   *     *Shorthand*: If you only need to configure the default value of the
   *     parameter, you may use a shorthand syntax.   In the **`params`**
   *     map, instead mapping the param name to a full parameter configuration
   *     object, simply set map it to the default parameter value, e.g.:
   *
   * <pre>// define a parameter's default value
   * params: {
   *     param1: { value: "defaultValue" }
   * }
   * // shorthand default values
   * params: {
   *     param1: "defaultValue",
   *     param2: "param2Default"
   * }</pre>
   *
   *   - ** array ** - {boolean=}: *(default: false)* If true, the param value will be
   *     treated as an array of values.  If you specified a Type, the value will be
   *     treated as an array of the specified Type.  Note: query parameter values
   *     default to a special `"auto"` mode.
   *
   *     For query parameters in `"auto"` mode, if multiple  values for a single parameter
   *     are present in the URL (e.g.: `/foo?bar=1&bar=2&bar=3`) then the values
   *     are mapped to an array (e.g.: `{ foo: [ '1', '2', '3' ] }`).  However, if
   *     only one value is present (e.g.: `/foo?bar=1`) then the value is treated as single
   *     value (e.g.: `{ foo: '1' }`).
   *
   * <pre>params: {
   *     param1: { array: true }
   * }</pre>
   *
   *   - ** squash ** - {bool|string=}: `squash` configures how a default parameter value is represented in the URL when
   *     the current parameter value is the same as the default value. If `squash` is not set, it uses the
   *     configured default squash policy.
   *     (See {@link ui.router.util.$urlMatcherFactory#methods_defaultSquashPolicy `defaultSquashPolicy()`})
   *
   *   There are three squash settings:
   *
   *     - false: The parameter's default value is not squashed.  It is encoded and included in the URL
   *     - true: The parameter's default value is omitted from the URL.  If the parameter is preceeded and followed
   *       by slashes in the state's `url` declaration, then one of those slashes are omitted.
   *       This can allow for cleaner looking URLs.
   *     - `"<arbitrary string>"`: The parameter's default value is replaced with an arbitrary placeholder of  your choice.
   *
   * <pre>params: {
   *     param1: {
   *       value: "defaultId",
   *       squash: true
   * } }
   * // squash "defaultValue" to "~"
   * params: {
   *     param1: {
   *       value: "defaultValue",
   *       squash: "~"
   * } }
   * </pre>
   *
   *
   * @example
   * <pre>
   * // Some state name examples
   *
   * // stateName can be a single top-level name (must be unique).
   * $stateProvider.state("home", {});
   *
   * // Or it can be a nested state name. This state is a child of the
   * // above "home" state.
   * $stateProvider.state("home.newest", {});
   *
   * // Nest states as deeply as needed.
   * $stateProvider.state("home.newest.abc.xyz.inception", {});
   *
   * // state() returns $stateProvider, so you can chain state declarations.
   * $stateProvider
   *   .state("home", {})
   *   .state("about", {})
   *   .state("contacts", {});
   * </pre>
   *
   */
  this.state = state;
  function state(name, definition) {
    /*jshint validthis: true */
    if (isObject(name)) definition = name;
    else definition.name = name;
    registerState(definition);
    return this;
  }

  /**
   * @ngdoc object
   * @name ui.router.state.$state
   *
   * @requires $rootScope
   * @requires $q
   * @requires ui.router.state.$view
   * @requires $injector
   * @requires ui.router.util.$resolve
   * @requires ui.router.state.$stateParams
   * @requires ui.router.router.$urlRouter
   *
   * @property {object} params A param object, e.g. {sectionId: section.id)}, that 
   * you'd like to test against the current active state.
   * @property {object} current A reference to the state's config object. However 
   * you passed it in. Useful for accessing custom data.
   * @property {object} transition Currently pending transition. A promise that'll 
   * resolve or reject.
   *
   * @description
   * `$state` service is responsible for representing states as well as transitioning
   * between them. It also provides interfaces to ask for current state or even states
   * you're coming from.
   */
  this.$get = $get;
  $get.$inject = ['$rootScope', '$q', '$view', '$injector', '$resolve', '$stateParams', '$urlRouter', '$location', '$urlMatcherFactory'];
  function $get(   $rootScope,   $q,   $view,   $injector,   $resolve,   $stateParams,   $urlRouter,   $location,   $urlMatcherFactory) {

    var TransitionSuperseded = $q.reject(new Error('transition superseded'));
    var TransitionPrevented = $q.reject(new Error('transition prevented'));
    var TransitionAborted = $q.reject(new Error('transition aborted'));
    var TransitionFailed = $q.reject(new Error('transition failed'));

    // Handles the case where a state which is the target of a transition is not found, and the user
    // can optionally retry or defer the transition
    function handleRedirect(redirect, state, params, options) {
      /**
       * @ngdoc event
       * @name ui.router.state.$state#$stateNotFound
       * @eventOf ui.router.state.$state
       * @eventType broadcast on root scope
       * @description
       * Fired when a requested state **cannot be found** using the provided state name during transition.
       * The event is broadcast allowing any handlers a single chance to deal with the error (usually by
       * lazy-loading the unfound state). A special `unfoundState` object is passed to the listener handler,
       * you can see its three properties in the example. You can use `event.preventDefault()` to abort the
       * transition and the promise returned from `go` will be rejected with a `'transition aborted'` value.
       *
       * @param {Object} event Event object.
       * @param {Object} unfoundState Unfound State information. Contains: `to, toParams, options` properties.
       * @param {State} fromState Current state object.
       * @param {Object} fromParams Current state params.
       *
       * @example
       *
       * <pre>
       * // somewhere, assume lazy.state has not been defined
       * $state.go("lazy.state", {a:1, b:2}, {inherit:false});
       *
       * // somewhere else
       * $scope.$on('$stateNotFound',
       * function(event, unfoundState, fromState, fromParams){
       *     console.log(unfoundState.to); // "lazy.state"
       *     console.log(unfoundState.toParams); // {a:1, b:2}
       *     console.log(unfoundState.options); // {inherit:false} + default options
       * })
       * </pre>
       */
      var evt = $rootScope.$broadcast('$stateNotFound', redirect, state, params);

      if (evt.defaultPrevented) {
        $urlRouter.update();
        return TransitionAborted;
      }

      if (!evt.retry) {
        return null;
      }

      // Allow the handler to return a promise to defer state lookup retry
      if (options.$retry) {
        $urlRouter.update();
        return TransitionFailed;
      }
      var retryTransition = $state.transition = $q.when(evt.retry);

      retryTransition.then(function() {
        if (retryTransition !== $state.transition) return TransitionSuperseded;
        redirect.options.$retry = true;
        return $state.transitionTo(redirect.to, redirect.toParams, redirect.options);
      }, function() {
        return TransitionAborted;
      });
      $urlRouter.update();

      return retryTransition;
    }

    root.locals = { resolve: null, globals: { $stateParams: {} } };

    $state = {
      params: {},
      current: root.self,
      $current: root,
      transition: null
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#reload
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method that force reloads the current state. All resolves are re-resolved,
     * controllers reinstantiated, and events re-fired.
     *
     * @example
     * <pre>
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     $state.reload();
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>
     *
     * @param {string=|object=} state - A state name or a state object, which is the root of the resolves to be re-resolved.
     * @example
     * <pre>
     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item' 
     * //and current state is 'contacts.detail.item'
     * var app angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.reload = function(){
     *     //will reload 'contact.detail' and 'contact.detail.item' states
     *     $state.reload('contact.detail');
     *   }
     * });
     * </pre>
     *
     * `reload()` is just an alias for:
     * <pre>
     * $state.transitionTo($state.current, $stateParams, { 
     *   reload: true, inherit: false, notify: true
     * });
     * </pre>

     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.reload = function reload(state) {
      return $state.transitionTo($state.current, $stateParams, { reload: state || true, inherit: false, notify: true});
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#go
     * @methodOf ui.router.state.$state
     *
     * @description
     * Convenience method for transitioning to a new state. `$state.go` calls 
     * `$state.transitionTo` internally but automatically sets options to 
     * `{ location: true, inherit: true, relative: $state.$current, notify: true }`. 
     * This allows you to easily use an absolute or relative to path and specify 
     * only the parameters you'd like to update (while letting unspecified parameters 
     * inherit from the currently active ancestor states).
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.go('contact.detail');
     *   };
     * });
     * </pre>
     * <img src='../ngdoc_assets/StateGoExamples.png'/>
     *
     * @param {string} to Absolute state name or relative state path. Some examples:
     *
     * - `$state.go('contact.detail')` - will go to the `contact.detail` state
     * - `$state.go('^')` - will go to a parent state
     * - `$state.go('^.sibling')` - will go to a sibling state
     * - `$state.go('.child.grandchild')` - will go to grandchild state
     *
     * @param {object=} params A map of the parameters that will be sent to the state, 
     * will populate $stateParams. Any parameters that are not specified will be inherited from currently 
     * defined parameters. This allows, for example, going to a sibling state that shares parameters
     * specified in a parent state. Parameter inheritance only works between common ancestor states, I.e.
     * transitioning to a sibling will get you the parameters for all parents, transitioning to a child
     * will get you all current parameters, etc.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *
     * @returns {promise} A promise representing the state of the new transition.
     *
     * Possible success values:
     *
     * - $state.current
     *
     * <br/>Possible rejection values:
     *
     * - 'transition superseded' - when a newer transition has been started after this one
     * - 'transition prevented' - when `event.preventDefault()` has been called in a `$stateChangeStart` listener
     * - 'transition aborted' - when `event.preventDefault()` has been called in a `$stateNotFound` listener or
     *   when a `$stateNotFound` `event.retry` promise errors.
     * - 'transition failed' - when a state has been unsuccessfully found after 2 tries.
     * - *resolve error* - when an error has occurred with a `resolve`
     *
     */
    $state.go = function go(to, params, options) {
      return $state.transitionTo(to, params, extend({ inherit: true, relative: $state.$current }, options));
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#transitionTo
     * @methodOf ui.router.state.$state
     *
     * @description
     * Low-level method for transitioning to a new state. {@link ui.router.state.$state#methods_go $state.go}
     * uses `transitionTo` internally. `$state.go` is recommended in most situations.
     *
     * @example
     * <pre>
     * var app = angular.module('app', ['ui.router']);
     *
     * app.controller('ctrl', function ($scope, $state) {
     *   $scope.changeState = function () {
     *     $state.transitionTo('contact.detail');
     *   };
     * });
     * </pre>
     *
     * @param {string} to State name.
     * @param {object=} toParams A map of the parameters that will be sent to the state,
     * will populate $stateParams.
     * @param {object=} options Options object. The options are:
     *
     * - **`location`** - {boolean=true|string=} - If `true` will update the url in the location bar, if `false`
     *    will not. If string, must be `"replace"`, which will update url and also replace last history record.
     * - **`inherit`** - {boolean=false}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`notify`** - {boolean=true}, If `true` will broadcast $stateChangeStart and $stateChangeSuccess events.
     * - **`reload`** (v0.2.5) - {boolean=false|string=|object=}, If `true` will force transition even if the state or params 
     *    have not changed, aka a reload of the same state. It differs from reloadOnSearch because you'd
     *    use this when you want to force a reload when *everything* is the same, including search params.
     *    if String, then will reload the state with the name given in reload, and any children.
     *    if Object, then a stateObj is expected, will reload the state found in stateObj, and any children.
     *
     * @returns {promise} A promise representing the state of the new transition. See
     * {@link ui.router.state.$state#methods_go $state.go}.
     */
    $state.transitionTo = function transitionTo(to, toParams, options) {
      toParams = toParams || {};
      options = extend({
        location: true, inherit: false, relative: null, notify: true, reload: false, $retry: false
      }, options || {});

      var from = $state.$current, fromParams = $state.params, fromPath = from.path;
      var evt, toState = findState(to, options.relative);

      // Store the hash param for later (since it will be stripped out by various methods)
      var hash = toParams['#'];

      if (!isDefined(toState)) {
        var redirect = { to: to, toParams: toParams, options: options };
        var redirectResult = handleRedirect(redirect, from.self, fromParams, options);

        if (redirectResult) {
          return redirectResult;
        }

        // Always retry once if the $stateNotFound was not prevented
        // (handles either redirect changed or state lazy-definition)
        to = redirect.to;
        toParams = redirect.toParams;
        options = redirect.options;
        toState = findState(to, options.relative);

        if (!isDefined(toState)) {
          if (!options.relative) throw new Error("No such state '" + to + "'");
          throw new Error("Could not resolve '" + to + "' from state '" + options.relative + "'");
        }
      }
      if (toState[abstractKey]) throw new Error("Cannot transition to abstract state '" + to + "'");
      if (options.inherit) toParams = inheritParams($stateParams, toParams || {}, $state.$current, toState);
      if (!toState.params.$$validates(toParams)) return TransitionFailed;

      toParams = toState.params.$$values(toParams);
      to = toState;

      var toPath = to.path;

      // Starting from the root of the path, keep all levels that haven't changed
      var keep = 0, state = toPath[keep], locals = root.locals, toLocals = [];

      if (!options.reload) {
        while (state && state === fromPath[keep] && state.ownParams.$$equals(toParams, fromParams)) {
          locals = toLocals[keep] = state.locals;
          keep++;
          state = toPath[keep];
        }
      } else if (isString(options.reload) || isObject(options.reload)) {
        if (isObject(options.reload) && !options.reload.name) {
          throw new Error('Invalid reload state object');
        }
        
        var reloadState = options.reload === true ? fromPath[0] : findState(options.reload);
        if (options.reload && !reloadState) {
          throw new Error("No such reload state '" + (isString(options.reload) ? options.reload : options.reload.name) + "'");
        }

        while (state && state === fromPath[keep] && state !== reloadState) {
          locals = toLocals[keep] = state.locals;
          keep++;
          state = toPath[keep];
        }
      }

      // If we're going to the same state and all locals are kept, we've got nothing to do.
      // But clear 'transition', as we still want to cancel any other pending transitions.
      // TODO: We may not want to bump 'transition' if we're called from a location change
      // that we've initiated ourselves, because we might accidentally abort a legitimate
      // transition initiated from code?
      if (shouldSkipReload(to, toParams, from, fromParams, locals, options)) {
        if (hash) toParams['#'] = hash;
        $state.params = toParams;
        copy($state.params, $stateParams);
        if (options.location && to.navigable && to.navigable.url) {
          $urlRouter.push(to.navigable.url, toParams, {
            $$avoidResync: true, replace: options.location === 'replace'
          });
          $urlRouter.update(true);
        }
        $state.transition = null;
        return $q.when($state.current);
      }

      // Filter parameters before we pass them to event handlers etc.
      toParams = filterByKeys(to.params.$$keys(), toParams || {});

      // Broadcast start event and cancel the transition if requested
      if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeStart
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when the state transition **begins**. You can use `event.preventDefault()`
         * to prevent the transition from happening and then the transition promise will be
         * rejected with a `'transition prevented'` value.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         *
         * @example
         *
         * <pre>
         * $rootScope.$on('$stateChangeStart',
         * function(event, toState, toParams, fromState, fromParams){
         *     event.preventDefault();
         *     // transitionTo() promise will be rejected with
         *     // a 'transition prevented' error
         * })
         * </pre>
         */
        if ($rootScope.$broadcast('$stateChangeStart', to.self, toParams, from.self, fromParams).defaultPrevented) {
          $rootScope.$broadcast('$stateChangeCancel', to.self, toParams, from.self, fromParams);
          $urlRouter.update();
          return TransitionPrevented;
        }
      }

      // Resolve locals for the remaining states, but don't update any global state just
      // yet -- if anything fails to resolve the current state needs to remain untouched.
      // We also set up an inheritance chain for the locals here. This allows the view directive
      // to quickly look up the correct definition for each view in the current state. Even
      // though we create the locals object itself outside resolveState(), it is initially
      // empty and gets filled asynchronously. We need to keep track of the promise for the
      // (fully resolved) current locals, and pass this down the chain.
      var resolved = $q.when(locals);

      for (var l = keep; l < toPath.length; l++, state = toPath[l]) {
        locals = toLocals[l] = inherit(locals);
        resolved = resolveState(state, toParams, state === to, resolved, locals, options);
      }

      // Once everything is resolved, we are ready to perform the actual transition
      // and return a promise for the new state. We also keep track of what the
      // current promise is, so that we can detect overlapping transitions and
      // keep only the outcome of the last transition.
      var transition = $state.transition = resolved.then(function () {
        var l, entering, exiting;

        if ($state.transition !== transition) return TransitionSuperseded;

        // Exit 'from' states not kept
        for (l = fromPath.length - 1; l >= keep; l--) {
          exiting = fromPath[l];
          if (exiting.self.onExit) {
            $injector.invoke(exiting.self.onExit, exiting.self, exiting.locals.globals);
          }
          exiting.locals = null;
        }

        // Enter 'to' states not kept
        for (l = keep; l < toPath.length; l++) {
          entering = toPath[l];
          entering.locals = toLocals[l];
          if (entering.self.onEnter) {
            $injector.invoke(entering.self.onEnter, entering.self, entering.locals.globals);
          }
        }

        // Re-add the saved hash before we start returning things
        if (hash) toParams['#'] = hash;

        // Run it again, to catch any transitions in callbacks
        if ($state.transition !== transition) return TransitionSuperseded;

        // Update globals in $state
        $state.$current = to;
        $state.current = to.self;
        $state.params = toParams;
        copy($state.params, $stateParams);
        $state.transition = null;

        if (options.location && to.navigable) {
          $urlRouter.push(to.navigable.url, to.navigable.locals.globals.$stateParams, {
            $$avoidResync: true, replace: options.location === 'replace'
          });
        }

        if (options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeSuccess
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired once the state transition is **complete**.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         */
          $rootScope.$broadcast('$stateChangeSuccess', to.self, toParams, from.self, fromParams);
        }
        $urlRouter.update(true);

        return $state.current;
      }, function (error) {
        if ($state.transition !== transition) return TransitionSuperseded;

        $state.transition = null;
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$stateChangeError
         * @eventOf ui.router.state.$state
         * @eventType broadcast on root scope
         * @description
         * Fired when an **error occurs** during transition. It's important to note that if you
         * have any errors in your resolve functions (javascript errors, non-existent services, etc)
         * they will not throw traditionally. You must listen for this $stateChangeError event to
         * catch **ALL** errors.
         *
         * @param {Object} event Event object.
         * @param {State} toState The state being transitioned to.
         * @param {Object} toParams The params supplied to the `toState`.
         * @param {State} fromState The current state, pre-transition.
         * @param {Object} fromParams The params supplied to the `fromState`.
         * @param {Error} error The resolve error object.
         */
        evt = $rootScope.$broadcast('$stateChangeError', to.self, toParams, from.self, fromParams, error);

        if (!evt.defaultPrevented) {
            $urlRouter.update();
        }

        return $q.reject(error);
      });

      return transition;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#is
     * @methodOf ui.router.state.$state
     *
     * @description
     * Similar to {@link ui.router.state.$state#methods_includes $state.includes},
     * but only checks for the full state name. If params is supplied then it will be
     * tested for strict equality against the current active params object, so all params
     * must match with none missing and no extras.
     *
     * @example
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // absolute name
     * $state.is('contact.details.item'); // returns true
     * $state.is(contactDetailItemStateObject); // returns true
     *
     * // relative name (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.is('.item')}">Item</div>
     * </pre>
     *
     * @param {string|object} stateOrName The state name (absolute or relative) or state object you'd like to check.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`, that you'd like
     * to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object} -  If `stateOrName` is a relative state name and `options.relative` is set, .is will
     * test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it is the state.
     */
    $state.is = function is(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) { return undefined; }
      if ($state.$current !== state) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams) : true;
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#includes
     * @methodOf ui.router.state.$state
     *
     * @description
     * A method to determine if the current active state is equal to or is the child of the
     * state stateName. If any params are passed then they will be tested for a match as well.
     * Not all the parameters need to be passed, just the ones you'd like to test for equality.
     *
     * @example
     * Partial and relative names
     * <pre>
     * $state.$current.name = 'contacts.details.item';
     *
     * // Using partial names
     * $state.includes("contacts"); // returns true
     * $state.includes("contacts.details"); // returns true
     * $state.includes("contacts.details.item"); // returns true
     * $state.includes("contacts.list"); // returns false
     * $state.includes("about"); // returns false
     *
     * // Using relative names (. and ^), typically from a template
     * // E.g. from the 'contacts.details' template
     * <div ng-class="{highlighted: $state.includes('.item')}">Item</div>
     * </pre>
     *
     * Basic globbing patterns
     * <pre>
     * $state.$current.name = 'contacts.details.item.url';
     *
     * $state.includes("*.details.*.*"); // returns true
     * $state.includes("*.details.**"); // returns true
     * $state.includes("**.item.**"); // returns true
     * $state.includes("*.details.item.url"); // returns true
     * $state.includes("*.details.*.url"); // returns true
     * $state.includes("*.details.*"); // returns false
     * $state.includes("item.**"); // returns false
     * </pre>
     *
     * @param {string} stateOrName A partial name, relative name, or glob pattern
     * to be searched for within the current state name.
     * @param {object=} params A param object, e.g. `{sectionId: section.id}`,
     * that you'd like to test against the current active state.
     * @param {object=} options An options object.  The options are:
     *
     * - **`relative`** - {string|object=} -  If `stateOrName` is a relative state reference and `options.relative` is set,
     * .includes will test relative to `options.relative` state (or name).
     *
     * @returns {boolean} Returns true if it does include the state
     */
    $state.includes = function includes(stateOrName, params, options) {
      options = extend({ relative: $state.$current }, options || {});
      if (isString(stateOrName) && isGlob(stateOrName)) {
        if (!doesStateMatchGlob(stateOrName)) {
          return false;
        }
        stateOrName = $state.$current.name;
      }

      var state = findState(stateOrName, options.relative);
      if (!isDefined(state)) { return undefined; }
      if (!isDefined($state.$current.includes[state.name])) { return false; }
      return params ? equalForKeys(state.params.$$values(params), $stateParams, objectKeys(params)) : true;
    };


    /**
     * @ngdoc function
     * @name ui.router.state.$state#href
     * @methodOf ui.router.state.$state
     *
     * @description
     * A url generation method that returns the compiled url for the given state populated with the given params.
     *
     * @example
     * <pre>
     * expect($state.href("about.person", { person: "bob" })).toEqual("/about/bob");
     * </pre>
     *
     * @param {string|object} stateOrName The state name or state object you'd like to generate a url from.
     * @param {object=} params An object of parameter values to fill the state's required parameters.
     * @param {object=} options Options object. The options are:
     *
     * - **`lossy`** - {boolean=true} -  If true, and if there is no url associated with the state provided in the
     *    first parameter, then the constructed href url will be built from the first navigable ancestor (aka
     *    ancestor with a valid url).
     * - **`inherit`** - {boolean=true}, If `true` will inherit url parameters from current url.
     * - **`relative`** - {object=$state.$current}, When transitioning with relative path (e.g '^'), 
     *    defines which state to be relative from.
     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. "http://www.example.com/fullurl".
     * 
     * @returns {string} compiled state url
     */
    $state.href = function href(stateOrName, params, options) {
      options = extend({
        lossy:    true,
        inherit:  true,
        absolute: false,
        relative: $state.$current
      }, options || {});

      var state = findState(stateOrName, options.relative);

      if (!isDefined(state)) return null;
      if (options.inherit) params = inheritParams($stateParams, params || {}, $state.$current, state);
      
      var nav = (state && options.lossy) ? state.navigable : state;

      if (!nav || nav.url === undefined || nav.url === null) {
        return null;
      }
      return $urlRouter.href(nav.url, filterByKeys(state.params.$$keys().concat('#'), params || {}), {
        absolute: options.absolute
      });
    };

    /**
     * @ngdoc function
     * @name ui.router.state.$state#get
     * @methodOf ui.router.state.$state
     *
     * @description
     * Returns the state configuration object for any specific state or all states.
     *
     * @param {string|object=} stateOrName (absolute or relative) If provided, will only get the config for
     * the requested state. If not provided, returns an array of ALL state configs.
     * @param {string|object=} context When stateOrName is a relative state reference, the state will be retrieved relative to context.
     * @returns {Object|Array} State configuration object or array of all objects.
     */
    $state.get = function (stateOrName, context) {
      if (arguments.length === 0) return map(objectKeys(states), function(name) { return states[name].self; });
      var state = findState(stateOrName, context || $state.$current);
      return (state && state.self) ? state.self : null;
    };

    function resolveState(state, params, paramsAreFiltered, inherited, dst, options) {
      // Make a restricted $stateParams with only the parameters that apply to this state if
      // necessary. In addition to being available to the controller and onEnter/onExit callbacks,
      // we also need $stateParams to be available for any $injector calls we make during the
      // dependency resolution process.
      var $stateParams = (paramsAreFiltered) ? params : filterByKeys(state.params.$$keys(), params);
      var locals = { $stateParams: $stateParams };

      // Resolve 'global' dependencies for the state, i.e. those not specific to a view.
      // We're also including $stateParams in this; that way the parameters are restricted
      // to the set that should be visible to the state, and are independent of when we update
      // the global $state and $stateParams values.
      dst.resolve = $resolve.resolve(state.resolve, locals, dst.resolve, state);
      var promises = [dst.resolve.then(function (globals) {
        dst.globals = globals;
      })];
      if (inherited) promises.push(inherited);

      function resolveViews() {
        var viewsPromises = [];

        // Resolve template and dependencies for all views.
        forEach(state.views, function (view, name) {
          var injectables = (view.resolve && view.resolve !== state.resolve ? view.resolve : {});
          injectables.$template = [ function () {
            return $view.load(name, { view: view, locals: dst.globals, params: $stateParams, notify: options.notify }) || '';
          }];

          viewsPromises.push($resolve.resolve(injectables, dst.globals, dst.resolve, state).then(function (result) {
            // References to the controller (only instantiated at link time)
            if (isFunction(view.controllerProvider) || isArray(view.controllerProvider)) {
              var injectLocals = angular.extend({}, injectables, dst.globals);
              result.$$controller = $injector.invoke(view.controllerProvider, null, injectLocals);
            } else {
              result.$$controller = view.controller;
            }
            // Provide access to the state itself for internal use
            result.$$state = state;
            result.$$controllerAs = view.controllerAs;
            dst[name] = result;
          }));
        });

        return $q.all(viewsPromises).then(function(){
          return dst.globals;
        });
      }

      // Wait for all the promises and then return the activation object
      return $q.all(promises).then(resolveViews).then(function (values) {
        return dst;
      });
    }

    return $state;
  }

  function shouldSkipReload(to, toParams, from, fromParams, locals, options) {
    // Return true if there are no differences in non-search (path/object) params, false if there are differences
    function nonSearchParamsEqual(fromAndToState, fromParams, toParams) {
      // Identify whether all the parameters that differ between `fromParams` and `toParams` were search params.
      function notSearchParam(key) {
        return fromAndToState.params[key].location != "search";
      }
      var nonQueryParamKeys = fromAndToState.params.$$keys().filter(notSearchParam);
      var nonQueryParams = pick.apply({}, [fromAndToState.params].concat(nonQueryParamKeys));
      var nonQueryParamSet = new $$UMFP.ParamSet(nonQueryParams);
      return nonQueryParamSet.$$equals(fromParams, toParams);
    }

    // If reload was not explicitly requested
    // and we're transitioning to the same state we're already in
    // and    the locals didn't change
    //     or they changed in a way that doesn't merit reloading
    //        (reloadOnParams:false, or reloadOnSearch.false and only search params changed)
    // Then return true.
    if (!options.reload && to === from &&
      (locals === from.locals || (to.self.reloadOnSearch === false && nonSearchParamsEqual(from, fromParams, toParams)))) {
      return true;
    }
  }
}

angular.module('ui.router.state')
  .value('$stateParams', {})
  .provider('$state', $StateProvider);


$ViewProvider.$inject = [];
function $ViewProvider() {

  this.$get = $get;
  /**
   * @ngdoc object
   * @name ui.router.state.$view
   *
   * @requires ui.router.util.$templateFactory
   * @requires $rootScope
   *
   * @description
   *
   */
  $get.$inject = ['$rootScope', '$templateFactory'];
  function $get(   $rootScope,   $templateFactory) {
    return {
      // $view.load('full.viewName', { template: ..., controller: ..., resolve: ..., async: false, params: ... })
      /**
       * @ngdoc function
       * @name ui.router.state.$view#load
       * @methodOf ui.router.state.$view
       *
       * @description
       *
       * @param {string} name name
       * @param {object} options option object.
       */
      load: function load(name, options) {
        var result, defaults = {
          template: null, controller: null, view: null, locals: null, notify: true, async: true, params: {}
        };
        options = extend(defaults, options);

        if (options.view) {
          result = $templateFactory.fromConfig(options.view, options.params, options.locals);
        }
        if (result && options.notify) {
        /**
         * @ngdoc event
         * @name ui.router.state.$state#$viewContentLoading
         * @eventOf ui.router.state.$view
         * @eventType broadcast on root scope
         * @description
         *
         * Fired once the view **begins loading**, *before* the DOM is rendered.
         *
         * @param {Object} event Event object.
         * @param {Object} viewConfig The view config properties (template, controller, etc).
         *
         * @example
         *
         * <pre>
         * $scope.$on('$viewContentLoading',
         * function(event, viewConfig){
         *     // Access to all the view config properties.
         *     // and one special property 'targetView'
         *     // viewConfig.targetView
         * });
         * </pre>
         */
          $rootScope.$broadcast('$viewContentLoading', options);
        }
        return result;
      }
    };
  }
}

angular.module('ui.router.state').provider('$view', $ViewProvider);

/**
 * @ngdoc object
 * @name ui.router.state.$uiViewScrollProvider
 *
 * @description
 * Provider that returns the {@link ui.router.state.$uiViewScroll} service function.
 */
function $ViewScrollProvider() {

  var useAnchorScroll = false;

  /**
   * @ngdoc function
   * @name ui.router.state.$uiViewScrollProvider#useAnchorScroll
   * @methodOf ui.router.state.$uiViewScrollProvider
   *
   * @description
   * Reverts back to using the core [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll) service for
   * scrolling based on the url anchor.
   */
  this.useAnchorScroll = function () {
    useAnchorScroll = true;
  };

  /**
   * @ngdoc object
   * @name ui.router.state.$uiViewScroll
   *
   * @requires $anchorScroll
   * @requires $timeout
   *
   * @description
   * When called with a jqLite element, it scrolls the element into view (after a
   * `$timeout` so the DOM has time to refresh).
   *
   * If you prefer to rely on `$anchorScroll` to scroll the view to the anchor,
   * this can be enabled by calling {@link ui.router.state.$uiViewScrollProvider#methods_useAnchorScroll `$uiViewScrollProvider.useAnchorScroll()`}.
   */
  this.$get = ['$anchorScroll', '$timeout', function ($anchorScroll, $timeout) {
    if (useAnchorScroll) {
      return $anchorScroll;
    }

    return function ($element) {
      return $timeout(function () {
        $element[0].scrollIntoView();
      }, 0, false);
    };
  }];
}

angular.module('ui.router.state').provider('$uiViewScroll', $ViewScrollProvider);

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-view
 *
 * @requires ui.router.state.$state
 * @requires $compile
 * @requires $controller
 * @requires $injector
 * @requires ui.router.state.$uiViewScroll
 * @requires $document
 *
 * @restrict ECA
 *
 * @description
 * The ui-view directive tells $state where to place your templates.
 *
 * @param {string=} name A view name. The name should be unique amongst the other views in the
 * same state. You can have views of the same name that live in different states.
 *
 * @param {string=} autoscroll It allows you to set the scroll behavior of the browser window
 * when a view is populated. By default, $anchorScroll is overridden by ui-router's custom scroll
 * service, {@link ui.router.state.$uiViewScroll}. This custom service let's you
 * scroll ui-view elements into view when they are populated during a state activation.
 *
 * *Note: To revert back to old [`$anchorScroll`](http://docs.angularjs.org/api/ng.$anchorScroll)
 * functionality, call `$uiViewScrollProvider.useAnchorScroll()`.*
 *
 * @param {string=} onload Expression to evaluate whenever the view updates.
 * 
 * @example
 * A view can be unnamed or named. 
 * <pre>
 * <!-- Unnamed -->
 * <div ui-view></div> 
 * 
 * <!-- Named -->
 * <div ui-view="viewName"></div>
 * </pre>
 *
 * You can only have one unnamed view within any template (or root html). If you are only using a 
 * single view and it is unnamed then you can populate it like so:
 * <pre>
 * <div ui-view></div> 
 * $stateProvider.state("home", {
 *   template: "<h1>HELLO!</h1>"
 * })
 * </pre>
 * 
 * The above is a convenient shortcut equivalent to specifying your view explicitly with the {@link ui.router.state.$stateProvider#views `views`}
 * config property, by name, in this case an empty name:
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * But typically you'll only use the views property if you name your view or have more than one view 
 * in the same template. There's not really a compelling reason to name a view if its the only one, 
 * but you could if you wanted, like so:
 * <pre>
 * <div ui-view="main"></div>
 * </pre> 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "main": {
 *       template: "<h1>HELLO!</h1>"
 *     }
 *   }    
 * })
 * </pre>
 * 
 * Really though, you'll use views to set up multiple views:
 * <pre>
 * <div ui-view></div>
 * <div ui-view="chart"></div> 
 * <div ui-view="data"></div> 
 * </pre>
 * 
 * <pre>
 * $stateProvider.state("home", {
 *   views: {
 *     "": {
 *       template: "<h1>HELLO!</h1>"
 *     },
 *     "chart": {
 *       template: "<chart_thing/>"
 *     },
 *     "data": {
 *       template: "<data_thing/>"
 *     }
 *   }    
 * })
 * </pre>
 *
 * Examples for `autoscroll`:
 *
 * <pre>
 * <!-- If autoscroll present with no expression,
 *      then scroll ui-view into view -->
 * <ui-view autoscroll/>
 *
 * <!-- If autoscroll present with valid expression,
 *      then scroll ui-view into view if expression evaluates to true -->
 * <ui-view autoscroll='true'/>
 * <ui-view autoscroll='false'/>
 * <ui-view autoscroll='scopeVariable'/>
 * </pre>
 */
$ViewDirective.$inject = ['$state', '$injector', '$uiViewScroll', '$interpolate'];
function $ViewDirective(   $state,   $injector,   $uiViewScroll,   $interpolate) {

  function getService() {
    return ($injector.has) ? function(service) {
      return $injector.has(service) ? $injector.get(service) : null;
    } : function(service) {
      try {
        return $injector.get(service);
      } catch (e) {
        return null;
      }
    };
  }

  var service = getService(),
      $animator = service('$animator'),
      $animate = service('$animate');

  // Returns a set of DOM manipulation functions based on which Angular version
  // it should use
  function getRenderer(attrs, scope) {
    var statics = function() {
      return {
        enter: function (element, target, cb) { target.after(element); cb(); },
        leave: function (element, cb) { element.remove(); cb(); }
      };
    };

    if ($animate) {
      return {
        enter: function(element, target, cb) {
          var promise = $animate.enter(element, null, target, cb);
          if (promise && promise.then) promise.then(cb);
        },
        leave: function(element, cb) {
          var promise = $animate.leave(element, cb);
          if (promise && promise.then) promise.then(cb);
        }
      };
    }

    if ($animator) {
      var animate = $animator && $animator(scope, attrs);

      return {
        enter: function(element, target, cb) {animate.enter(element, null, target); cb(); },
        leave: function(element, cb) { animate.leave(element); cb(); }
      };
    }

    return statics();
  }

  var directive = {
    restrict: 'ECA',
    terminal: true,
    priority: 400,
    transclude: 'element',
    compile: function (tElement, tAttrs, $transclude) {
      return function (scope, $element, attrs) {
        var previousEl, currentEl, currentScope, latestLocals,
            onloadExp     = attrs.onload || '',
            autoScrollExp = attrs.autoscroll,
            renderer      = getRenderer(attrs, scope);

        scope.$on('$stateChangeSuccess', function() {
          updateView(false);
        });
        scope.$on('$viewContentLoading', function() {
          updateView(false);
        });

        updateView(true);

        function cleanupLastView() {
          if (previousEl) {
            previousEl.remove();
            previousEl = null;
          }

          if (currentScope) {
            currentScope.$destroy();
            currentScope = null;
          }

          if (currentEl) {
            renderer.leave(currentEl, function() {
              previousEl = null;
            });

            previousEl = currentEl;
            currentEl = null;
          }
        }

        function updateView(firstTime) {
          var newScope,
              name            = getUiViewName(scope, attrs, $element, $interpolate),
              previousLocals  = name && $state.$current && $state.$current.locals[name];

          if (!firstTime && previousLocals === latestLocals) return; // nothing to do
          newScope = scope.$new();
          latestLocals = $state.$current.locals[name];

          var clone = $transclude(newScope, function(clone) {
            renderer.enter(clone, $element, function onUiViewEnter() {
              if(currentScope) {
                currentScope.$emit('$viewContentAnimationEnded');
              }

              if (angular.isDefined(autoScrollExp) && !autoScrollExp || scope.$eval(autoScrollExp)) {
                $uiViewScroll(clone);
              }
            });
            cleanupLastView();
          });

          currentEl = clone;
          currentScope = newScope;
          /**
           * @ngdoc event
           * @name ui.router.state.directive:ui-view#$viewContentLoaded
           * @eventOf ui.router.state.directive:ui-view
           * @eventType emits on ui-view directive scope
           * @description           *
           * Fired once the view is **loaded**, *after* the DOM is rendered.
           *
           * @param {Object} event Event object.
           */
          currentScope.$emit('$viewContentLoaded');
          currentScope.$eval(onloadExp);
        }
      };
    }
  };

  return directive;
}

$ViewDirectiveFill.$inject = ['$compile', '$controller', '$state', '$interpolate'];
function $ViewDirectiveFill (  $compile,   $controller,   $state,   $interpolate) {
  return {
    restrict: 'ECA',
    priority: -400,
    compile: function (tElement) {
      var initial = tElement.html();
      return function (scope, $element, attrs) {
        var current = $state.$current,
            name = getUiViewName(scope, attrs, $element, $interpolate),
            locals  = current && current.locals[name];

        if (! locals) {
          return;
        }

        $element.data('$uiView', { name: name, state: locals.$$state });
        $element.html(locals.$template ? locals.$template : initial);

        var link = $compile($element.contents());

        if (locals.$$controller) {
          locals.$scope = scope;
          locals.$element = $element;
          var controller = $controller(locals.$$controller, locals);
          if (locals.$$controllerAs) {
            scope[locals.$$controllerAs] = controller;
          }
          $element.data('$ngControllerController', controller);
          $element.children().data('$ngControllerController', controller);
        }

        link(scope);
      };
    }
  };
}

/**
 * Shared ui-view code for both directives:
 * Given scope, element, and its attributes, return the view's name
 */
function getUiViewName(scope, attrs, element, $interpolate) {
  var name = $interpolate(attrs.uiView || attrs.name || '')(scope);
  var inherited = element.inheritedData('$uiView');
  return name.indexOf('@') >= 0 ?  name :  (name + '@' + (inherited ? inherited.state.name : ''));
}

angular.module('ui.router.state').directive('uiView', $ViewDirective);
angular.module('ui.router.state').directive('uiView', $ViewDirectiveFill);

function parseStateRef(ref, current) {
  var preparsed = ref.match(/^\s*({[^}]*})\s*$/), parsed;
  if (preparsed) ref = current + '(' + preparsed[1] + ')';
  parsed = ref.replace(/\n/g, " ").match(/^([^(]+?)\s*(\((.*)\))?$/);
  if (!parsed || parsed.length !== 4) throw new Error("Invalid state ref '" + ref + "'");
  return { state: parsed[1], paramExpr: parsed[3] || null };
}

function stateContext(el) {
  var stateData = el.parent().inheritedData('$uiView');

  if (stateData && stateData.state && stateData.state.name) {
    return stateData.state;
  }
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref
 *
 * @requires ui.router.state.$state
 * @requires $timeout
 *
 * @restrict A
 *
 * @description
 * A directive that binds a link (`<a>` tag) to a state. If the state has an associated 
 * URL, the directive will automatically generate & update the `href` attribute via 
 * the {@link ui.router.state.$state#methods_href $state.href()} method. Clicking 
 * the link will trigger a state transition with optional parameters. 
 *
 * Also middle-clicking, right-clicking, and ctrl-clicking on the link will be 
 * handled natively by the browser.
 *
 * You can also use relative state paths within ui-sref, just like the relative 
 * paths passed to `$state.go()`. You just need to be aware that the path is relative
 * to the state that the link lives in, in other words the state that loaded the 
 * template containing the link.
 *
 * You can specify options to pass to {@link ui.router.state.$state#go $state.go()}
 * using the `ui-sref-opts` attribute. Options are restricted to `location`, `inherit`,
 * and `reload`.
 *
 * @example
 * Here's an example of how you'd use ui-sref and how it would compile. If you have the 
 * following template:
 * <pre>
 * <a ui-sref="home">Home</a> | <a ui-sref="about">About</a> | <a ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a ui-sref="contacts.detail({ id: contact.id })">{{ contact.name }}</a>
 *     </li>
 * </ul>
 * </pre>
 * 
 * Then the compiled html would be (assuming Html5Mode is off and current state is contacts):
 * <pre>
 * <a href="#/home" ui-sref="home">Home</a> | <a href="#/about" ui-sref="about">About</a> | <a href="#/contacts?page=2" ui-sref="{page: 2}">Next page</a>
 * 
 * <ul>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/1" ui-sref="contacts.detail({ id: contact.id })">Joe</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/2" ui-sref="contacts.detail({ id: contact.id })">Alice</a>
 *     </li>
 *     <li ng-repeat="contact in contacts">
 *         <a href="#/contacts/3" ui-sref="contacts.detail({ id: contact.id })">Bob</a>
 *     </li>
 * </ul>
 *
 * <a ui-sref="home" ui-sref-opts="{reload: true}">Home</a>
 * </pre>
 *
 * @param {string} ui-sref 'stateName' can be any valid absolute or relative state
 * @param {Object} ui-sref-opts options to pass to {@link ui.router.state.$state#go $state.go()}
 */
$StateRefDirective.$inject = ['$state', '$timeout'];
function $StateRefDirective($state, $timeout) {
  var allowedOptions = ['location', 'inherit', 'reload', 'absolute'];

  return {
    restrict: 'A',
    require: ['?^uiSrefActive', '?^uiSrefActiveEq'],
    link: function(scope, element, attrs, uiSrefActive) {
      var ref = parseStateRef(attrs.uiSref, $state.current.name);
      var params = null, url = null, base = stateContext(element) || $state.$current;
      // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.
      var hrefKind = Object.prototype.toString.call(element.prop('href')) === '[object SVGAnimatedString]' ?
                 'xlink:href' : 'href';
      var newHref = null, isAnchor = element.prop("tagName").toUpperCase() === "A";
      var isForm = element[0].nodeName === "FORM";
      var attr = isForm ? "action" : hrefKind, nav = true;

      var options = { relative: base, inherit: true };
      var optionsOverride = scope.$eval(attrs.uiSrefOpts) || {};

      angular.forEach(allowedOptions, function(option) {
        if (option in optionsOverride) {
          options[option] = optionsOverride[option];
        }
      });

      var update = function(newVal) {
        if (newVal) params = angular.copy(newVal);
        if (!nav) return;

        newHref = $state.href(ref.state, params, options);

        var activeDirective = uiSrefActive[1] || uiSrefActive[0];
        if (activeDirective) {
          activeDirective.$$addStateInfo(ref.state, params);
        }
        if (newHref === null) {
          nav = false;
          return false;
        }
        attrs.$set(attr, newHref);
      };

      if (ref.paramExpr) {
        scope.$watch(ref.paramExpr, function(newVal, oldVal) {
          if (newVal !== params) update(newVal);
        }, true);
        params = angular.copy(scope.$eval(ref.paramExpr));
      }
      update();

      if (isForm) return;

      element.bind("click", function(e) {
        var button = e.which || e.button;
        if ( !(button > 1 || e.ctrlKey || e.metaKey || e.shiftKey || element.attr('target')) ) {
          // HACK: This is to allow ng-clicks to be processed before the transition is initiated:
          var transition = $timeout(function() {
            $state.go(ref.state, params, options);
          });
          e.preventDefault();

          // if the state has no URL, ignore one preventDefault from the <a> directive.
          var ignorePreventDefaultCount = isAnchor && !newHref ? 1: 0;
          e.preventDefault = function() {
            if (ignorePreventDefaultCount-- <= 0)
              $timeout.cancel(transition);
          };
        }
      });
    }
  };
}

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * A directive working alongside ui-sref to add classes to an element when the
 * related ui-sref directive's state is active, and removing them when it is inactive.
 * The primary use-case is to simplify the special appearance of navigation menus
 * relying on `ui-sref`, by having the "active" state's menu button appear different,
 * distinguishing it from the inactive menu items.
 *
 * ui-sref-active can live on the same element as ui-sref or on a parent element. The first
 * ui-sref-active found at the same level or above the ui-sref will be used.
 *
 * Will activate when the ui-sref's target state or any child state is active. If you
 * need to activate only when the ui-sref target state is active and *not* any of
 * it's children, then you will use
 * {@link ui.router.state.directive:ui-sref-active-eq ui-sref-active-eq}
 *
 * @example
 * Given the following template:
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item">
 *     <a href ui-sref="app.user({user: 'bilbobaggins'})">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 *
 * When the app state is "app.user" (or any children states), and contains the state parameter "user" with value "bilbobaggins",
 * the resulting HTML will appear as (note the 'active' class):
 * <pre>
 * <ul>
 *   <li ui-sref-active="active" class="item active">
 *     <a ui-sref="app.user({user: 'bilbobaggins'})" href="/users/bilbobaggins">@bilbobaggins</a>
 *   </li>
 * </ul>
 * </pre>
 *
 * The class name is interpolated **once** during the directives link time (any further changes to the
 * interpolated value are ignored).
 *
 * Multiple classes may be specified in a space-separated format:
 * <pre>
 * <ul>
 *   <li ui-sref-active='class1 class2 class3'>
 *     <a ui-sref="app.user">link</a>
 *   </li>
 * </ul>
 * </pre>
 */

/**
 * @ngdoc directive
 * @name ui.router.state.directive:ui-sref-active-eq
 *
 * @requires ui.router.state.$state
 * @requires ui.router.state.$stateParams
 * @requires $interpolate
 *
 * @restrict A
 *
 * @description
 * The same as {@link ui.router.state.directive:ui-sref-active ui-sref-active} but will only activate
 * when the exact target state used in the `ui-sref` is active; no child states.
 *
 */
$StateRefActiveDirective.$inject = ['$state', '$stateParams', '$interpolate'];
function $StateRefActiveDirective($state, $stateParams, $interpolate) {
  return  {
    restrict: "A",
    controller: ['$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
      var states = [], activeClass;

      // There probably isn't much point in $observing this
      // uiSrefActive and uiSrefActiveEq share the same directive object with some
      // slight difference in logic routing
      activeClass = $interpolate($attrs.uiSrefActiveEq || $attrs.uiSrefActive || '', false)($scope);

      // Allow uiSref to communicate with uiSrefActive[Equals]
      this.$$addStateInfo = function (newState, newParams) {
        var state = $state.get(newState, stateContext($element));

        states.push({
          state: state || { name: newState },
          params: newParams
        });

        update();
      };

      $scope.$on('$stateChangeSuccess', update);

      // Update route state
      function update() {
        if (anyMatch()) {
          $element.addClass(activeClass);
        } else {
          $element.removeClass(activeClass);
        }
      }

      function anyMatch() {
        for (var i = 0; i < states.length; i++) {
          if (isMatch(states[i].state, states[i].params)) {
            return true;
          }
        }
        return false;
      }

      function isMatch(state, params) {
        if (typeof $attrs.uiSrefActiveEq !== 'undefined') {
          return $state.is(state.name, params);
        } else {
          return $state.includes(state.name, params);
        }
      }
    }]
  };
}

angular.module('ui.router.state')
  .directive('uiSref', $StateRefDirective)
  .directive('uiSrefActive', $StateRefActiveDirective)
  .directive('uiSrefActiveEq', $StateRefActiveDirective);

/**
 * @ngdoc filter
 * @name ui.router.state.filter:isState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_is $state.is("stateName")}.
 */
$IsStateFilter.$inject = ['$state'];
function $IsStateFilter($state) {
  var isFilter = function (state) {
    return $state.is(state);
  };
  isFilter.$stateful = true;
  return isFilter;
}

/**
 * @ngdoc filter
 * @name ui.router.state.filter:includedByState
 *
 * @requires ui.router.state.$state
 *
 * @description
 * Translates to {@link ui.router.state.$state#methods_includes $state.includes('fullOrPartialStateName')}.
 */
$IncludedByStateFilter.$inject = ['$state'];
function $IncludedByStateFilter($state) {
  var includesFilter = function (state) {
    return $state.includes(state);
  };
  includesFilter.$stateful = true;
  return  includesFilter;
}

angular.module('ui.router.state')
  .filter('isState', $IsStateFilter)
  .filter('includedByState', $IncludedByStateFilter);
})(window, window.angular);
(function(angular, factory) {
    'use strict';
    if (typeof define === 'function' && define.amd) {
        define('ngStorage', ['angular'], function(angular) {
            return factory(angular);
        });
    } else {
        return factory(angular);
    }
}(typeof angular === 'undefined' ? null : angular, function(angular) {

    'use strict';

    /**
     * @ngdoc overview
     * @name ngStorage
     */

    angular.module('ngStorage', [])

    /**
     * @ngdoc object
     * @name ngStorage.$localStorage
     * @requires $rootScope
     * @requires $window
     */

    .factory('$localStorage', _storageFactory('localStorage'))

    /**
     * @ngdoc object
     * @name ngStorage.$sessionStorage
     * @requires $rootScope
     * @requires $window
     */

    .factory('$sessionStorage', _storageFactory('sessionStorage'));

    function _storageFactory(storageType) {
        return [
            '$rootScope',
            '$window',
            '$log',
            '$timeout',

            function(
                $rootScope,
                $window,
                $log,
                $timeout
            ){
                function isStorageSupported(storageType) {
                    var supported = $window[storageType];

                    // When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage
                    // is available, but trying to call .setItem throws an exception below:
                    // "QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota."
                    if (supported && storageType === 'localStorage') {
                        var key = '__' + Math.round(Math.random() * 1e7);

                        try {
                            localStorage.setItem(key, key);
                            localStorage.removeItem(key);
                        }
                        catch (err) {
                            supported = false;
                        }
                    }

                    return supported;
                }

                // #9: Assign a placeholder object if Web Storage is unavailable to prevent breaking the entire AngularJS app
                var webStorage = isStorageSupported(storageType) || ($log.warn('This browser does not support Web Storage!'), {setItem: function() {}, getItem: function() {}}),
                    $storage = {
                        $default: function(items) {
                            for (var k in items) {
                                angular.isDefined($storage[k]) || ($storage[k] = items[k]);
                            }

                            return $storage;
                        },
                        $reset: function(items) {
                            for (var k in $storage) {
                                '$' === k[0] || (delete $storage[k] && webStorage.removeItem('ngStorage-' + k));
                            }

                            return $storage.$default(items);
                        }
                    },
                    _last$storage,
                    _debounce;

                try {
                    webStorage = $window[storageType];
                    webStorage.length;
                } catch(e) {
                    $log.warn('This browser does not support Web Storage!');
                    webStorage = {};
                }

                for (var i = 0, l = webStorage.length, k; i < l; i++) {
                    // #8, #10: `webStorage.key(i)` may be an empty string (or throw an exception in IE9 if `webStorage` is empty)
                    (k = webStorage.key(i)) && 'ngStorage-' === k.slice(0, 10) && ($storage[k.slice(10)] = angular.fromJson(webStorage.getItem(k)));
                }

                _last$storage = angular.copy($storage);

                $rootScope.$watch(function() {
                    var temp$storage;
                    _debounce || (_debounce = $timeout(function() {
                        _debounce = null;

                        if (!angular.equals($storage, _last$storage)) {
                            temp$storage = angular.copy(_last$storage);
                            angular.forEach($storage, function(v, k) {
                                angular.isDefined(v) && '$' !== k[0] && webStorage.setItem('ngStorage-' + k, angular.toJson(v));

                                delete temp$storage[k];
                            });

                            for (var k in temp$storage) {
                                webStorage.removeItem('ngStorage-' + k);
                            }

                            _last$storage = angular.copy($storage);
                        }
                    }, 100, false));
                });

                // #6: Use `$window.addEventListener` instead of `angular.element` to avoid the jQuery-specific `event.originalEvent`
                'localStorage' === storageType && $window.addEventListener && $window.addEventListener('storage', function(event) {
                    if ('ngStorage-' === event.key.slice(0, 10)) {
                        event.newValue ? $storage[event.key.slice(10)] = angular.fromJson(event.newValue) : delete $storage[event.key.slice(10)];

                        _last$storage = angular.copy($storage);

                        $rootScope.$apply();
                    }
                });

                return $storage;
            }
        ];
    }

}));

/**
 * angular-ui-utils - Swiss-Army-Knife of AngularJS tools (with no external dependencies!)
 * @version v0.2.3 - 2015-03-30
 * @link http://angular-ui.github.com
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
angular.module('ui.alias', []).config(['$compileProvider', 'uiAliasConfig', function($compileProvider, uiAliasConfig){
  'use strict';

  uiAliasConfig = uiAliasConfig || {};
  angular.forEach(uiAliasConfig, function(config, alias){
    if (angular.isString(config)) {
      config = {
        replace: true,
        template: config
      };
    }
    $compileProvider.directive(alias, function(){
      return config;
    });
  });
}]);

/**
 * General-purpose Event binding. Bind any event not natively supported by Angular
 * Pass an object with keynames for events to ui-event
 * Allows $event object and $params object to be passed
 *
 * @example <input ui-event="{ focus : 'counter++', blur : 'someCallback()' }">
 * @example <input ui-event="{ myCustomEvent : 'myEventHandler($event, $params)'}">
 *
 * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks
 */
angular.module('ui.event',[]).directive('uiEvent', ['$parse',
  function ($parse) {
    'use strict';

    return function ($scope, elm, attrs) {
      var events = $scope.$eval(attrs.uiEvent);
      angular.forEach(events, function (uiEvent, eventName) {
        var fn = $parse(uiEvent);
        elm.bind(eventName, function (evt) {
          var params = Array.prototype.slice.call(arguments);
          //Take out first paramater (event object);
          params = params.splice(1);
          fn($scope, {$event: evt, $params: params});
          if (!$scope.$$phase) {
            $scope.$apply();
          }
        });
      });
    };
  }]);

/**
 * A replacement utility for internationalization very similar to sprintf.
 *
 * @param replace {mixed} The tokens to replace depends on type
 *  string: all instances of $0 will be replaced
 *  array: each instance of $0, $1, $2 etc. will be placed with each array item in corresponding order
 *  object: all attributes will be iterated through, with :key being replaced with its corresponding value
 * @return string
 *
 * @example: 'Hello :name, how are you :day'.format({ name:'John', day:'Today' })
 * @example: 'Records $0 to $1 out of $2 total'.format(['10', '20', '3000'])
 * @example: '$0 agrees to all mentions $0 makes in the event that $0 hits a tree while $0 is driving drunk'.format('Bob')
 */
angular.module('ui.format',[]).filter('format', function(){
  'use strict';

  return function(value, replace) {
    var target = value;
    if (angular.isString(target) && replace !== undefined) {
      if (!angular.isArray(replace) && !angular.isObject(replace)) {
        replace = [replace];
      }
      if (angular.isArray(replace)) {
        var rlen = replace.length;
        var rfx = function (str, i) {
          i = parseInt(i, 10);
          return (i >= 0 && i < rlen) ? replace[i] : str;
        };
        target = target.replace(/\$([0-9]+)/g, rfx);
      }
      else {
        angular.forEach(replace, function(value, key){
          target = target.split(':' + key).join(value);
        });
      }
    }
    return target;
  };
});

/**
 * Wraps the
 * @param text {string} haystack to search through
 * @param search {string} needle to search for
 * @param [caseSensitive] {boolean} optional boolean to use case-sensitive searching
 */
angular.module('ui.highlight',[]).filter('highlight', function () {
  'use strict';

  return function (text, search, caseSensitive) {
    if (text && (search || angular.isNumber(search))) {
      text = text.toString();
      search = search.toString();
      if (caseSensitive) {
        return text.split(search).join('<span class="ui-match">' + search + '</span>');
      } else {
        return text.replace(new RegExp(search, 'gi'), '<span class="ui-match">$&</span>');
      }
    } else {
      return text;
    }
  };
});

// modeled after: angular-1.0.7/src/ng/directive/ngInclude.js
angular.module('ui.include',[])
.directive('uiInclude', ['$http', '$templateCache', '$anchorScroll', '$compile',
                 function($http,   $templateCache,   $anchorScroll,   $compile) {
  'use strict';

  return {
    restrict: 'ECA',
    terminal: true,
    compile: function(element, attr) {
      var srcExp = attr.uiInclude || attr.src,
          fragExp = attr.fragment || '',
          onloadExp = attr.onload || '',
          autoScrollExp = attr.autoscroll;

      return function(scope, element) {
        var changeCounter = 0,
            childScope;

        var clearContent = function() {
          if (childScope) {
            childScope.$destroy();
            childScope = null;
          }

          element.html('');
        };

        function ngIncludeWatchAction() {
          var thisChangeId = ++changeCounter;
          var src = scope.$eval(srcExp);
          var fragment = scope.$eval(fragExp);

          if (src) {
            $http.get(src, {cache: $templateCache}).success(function(response) {
              if (thisChangeId !== changeCounter) { return; }

              if (childScope) { childScope.$destroy(); }
              childScope = scope.$new();

              var contents;
              if (fragment) {
                contents = angular.element('<div/>').html(response).find(fragment);
              }
              else {
                contents = angular.element('<div/>').html(response).contents();
              }
              element.html(contents);
              $compile(contents)(childScope);

              if (angular.isDefined(autoScrollExp) && (!autoScrollExp || scope.$eval(autoScrollExp))) {
                $anchorScroll();
              }

              childScope.$emit('$includeContentLoaded');
              scope.$eval(onloadExp);
            }).error(function() {
              if (thisChangeId === changeCounter) { clearContent(); }
            });
          } else { clearContent(); }
        }

        scope.$watch(fragExp, ngIncludeWatchAction);
        scope.$watch(srcExp, ngIncludeWatchAction);
      };
    }
  };
}]);

/**
 * Provides an easy way to toggle a checkboxes indeterminate property
 *
 * @example <input type="checkbox" ui-indeterminate="isUnkown">
 */
angular.module('ui.indeterminate',[]).directive('uiIndeterminate', [
  function () {
    'use strict';

    return {
      compile: function(tElm, tAttrs) {
        if (!tAttrs.type || tAttrs.type.toLowerCase() !== 'checkbox') {
          return angular.noop;
        }

        return function ($scope, elm, attrs) {
          $scope.$watch(attrs.uiIndeterminate, function(newVal) {
            elm[0].indeterminate = !!newVal;
          });
        };
      }
    };
  }]);

/**
 * Converts variable-esque naming conventions to something presentational, capitalized words separated by space.
 * @param {String} value The value to be parsed and prettified.
 * @param {String} [inflector] The inflector to use. Default: humanize.
 * @return {String}
 * @example {{ 'Here Is my_phoneNumber' | inflector:'humanize' }} => Here Is My Phone Number
 *          {{ 'Here Is my_phoneNumber' | inflector:'underscore' }} => here_is_my_phone_number
 *          {{ 'Here Is my_phoneNumber' | inflector:'variable' }} => hereIsMyPhoneNumber
 */
angular.module('ui.inflector',[]).filter('inflector', function () {
  'use strict';

  function tokenize(text) {
    text = text.replace(/([A-Z])|([\-|\_])/g, function(_, $1) { return ' ' + ($1 || ''); });
    return text.replace(/\s\s+/g, ' ').trim().toLowerCase().split(' ');
  }

  function capitalizeTokens(tokens) {
    var result = [];
    angular.forEach(tokens, function(token) {
      result.push(token.charAt(0).toUpperCase() + token.substr(1));
    });
    return result;
  }

  var inflectors = {
    humanize: function (value) {
      return capitalizeTokens(tokenize(value)).join(' ');
    },
    underscore: function (value) {
      return tokenize(value).join('_');
    },
    variable: function (value) {
      value = tokenize(value);
      value = value[0] + capitalizeTokens(value.slice(1)).join('');
      return value;
    }
  };

  return function (text, inflector) {
    if (inflector !== false && angular.isString(text)) {
      inflector = inflector || 'humanize';
      return inflectors[inflector](text);
    } else {
      return text;
    }
  };
});

/**
 * General-purpose jQuery wrapper. Simply pass the plugin name as the expression.
 *
 * It is possible to specify a default set of parameters for each jQuery plugin.
 * Under the jq key, namespace each plugin by that which will be passed to ui-jq.
 * Unfortunately, at this time you can only pre-define the first parameter.
 * @example { jq : { datepicker : { showOn:'click' } } }
 *
 * @param ui-jq {string} The $elm.[pluginName]() to call.
 * @param [ui-options] {mixed} Expression to be evaluated and passed as options to the function
 *     Multiple parameters can be separated by commas
 * @param [ui-refresh] {expression} Watch expression and refire plugin on changes
 *
 * @example <input ui-jq="datepicker" ui-options="{showOn:'click'},secondParameter,thirdParameter" ui-refresh="iChange">
 */
angular.module('ui.jq',[]).
  value('uiJqConfig',{}).
  directive('uiJq', ['uiJqConfig', '$timeout', function uiJqInjectingFunction(uiJqConfig, $timeout) {
  'use strict';


  return {
    restrict: 'A',
    compile: function uiJqCompilingFunction(tElm, tAttrs) {

      if (!angular.isFunction(tElm[tAttrs.uiJq])) {
        throw new Error('ui-jq: The "' + tAttrs.uiJq + '" function does not exist');
      }
      var options = uiJqConfig && uiJqConfig[tAttrs.uiJq];

      return function uiJqLinkingFunction(scope, elm, attrs) {

        // If change compatibility is enabled, the form input's "change" event will trigger an "input" event
        if (attrs.ngModel && elm.is('select,input,textarea')) {
          elm.bind('change', function() {
            elm.trigger('input');
          });
        }

        function createLinkOptions(){
          var linkOptions = [];

          // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method
          if (attrs.uiOptions) {
            linkOptions = scope.$eval('[' + attrs.uiOptions + ']');
            if (angular.isObject(options) && angular.isObject(linkOptions[0])) {
              linkOptions[0] = angular.extend({}, options, linkOptions[0]);
            }
          } else if (options) {
            linkOptions = [options];
          }
          return linkOptions;
        }

        // Call jQuery method and pass relevant options
        function callPlugin() {
          $timeout(function() {
            elm[attrs.uiJq].apply(elm, createLinkOptions());
          }, 0, false);
        }

        // If ui-refresh is used, re-fire the the method upon every change
        if (attrs.uiRefresh) {
          scope.$watch(attrs.uiRefresh, function() {
            callPlugin();
          });
        }
        callPlugin();
      };
    }
  };
}]);

angular.module('ui.keypress',[]).
factory('keypressHelper', ['$parse', function keypress($parse){
  'use strict';

  var keysByCode = {
    8: 'backspace',
    9: 'tab',
    13: 'enter',
    27: 'esc',
    32: 'space',
    33: 'pageup',
    34: 'pagedown',
    35: 'end',
    36: 'home',
    37: 'left',
    38: 'up',
    39: 'right',
    40: 'down',
    45: 'insert',
    46: 'delete'
  };

  var capitaliseFirstLetter = function (string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  return function(mode, scope, elm, attrs) {
    var params, combinations = [];
    params = scope.$eval(attrs['ui'+capitaliseFirstLetter(mode)]);

    // Prepare combinations for simple checking
    angular.forEach(params, function (v, k) {
      var combination, expression;
      expression = $parse(v);

      angular.forEach(k.split(' '), function(variation) {
        combination = {
          expression: expression,
          keys: {}
        };
        angular.forEach(variation.split('-'), function (value) {
          combination.keys[value] = true;
        });
        combinations.push(combination);
      });
    });

    // Check only matching of pressed keys one of the conditions
    elm.bind(mode, function (event) {
      // No need to do that inside the cycle
      var metaPressed = !!(event.metaKey && !event.ctrlKey);
      var altPressed = !!event.altKey;
      var ctrlPressed = !!event.ctrlKey;
      var shiftPressed = !!event.shiftKey;
      var keyCode = event.keyCode;

      // normalize keycodes
      if (mode === 'keypress' && !shiftPressed && keyCode >= 97 && keyCode <= 122) {
        keyCode = keyCode - 32;
      }

      // Iterate over prepared combinations
      angular.forEach(combinations, function (combination) {

        var mainKeyPressed = combination.keys[keysByCode[keyCode]] || combination.keys[keyCode.toString()];

        var metaRequired = !!combination.keys.meta;
        var altRequired = !!combination.keys.alt;
        var ctrlRequired = !!combination.keys.ctrl;
        var shiftRequired = !!combination.keys.shift;

        if (
          mainKeyPressed &&
          ( metaRequired === metaPressed ) &&
          ( altRequired === altPressed ) &&
          ( ctrlRequired === ctrlPressed ) &&
          ( shiftRequired === shiftPressed )
        ) {
          // Run the function
          scope.$apply(function () {
            combination.expression(scope, { '$event': event });
          });
        }
      });
    });
  };
}]);

/**
 * Bind one or more handlers to particular keys or their combination
 * @param hash {mixed} keyBindings Can be an object or string where keybinding expression of keys or keys combinations and AngularJS Exspressions are set. Object syntax: "{ keys1: expression1 [, keys2: expression2 [ , ... ]]}". String syntax: ""expression1 on keys1 [ and expression2 on keys2 [ and ... ]]"". Expression is an AngularJS Expression, and key(s) are dash-separated combinations of keys and modifiers (one or many, if any. Order does not matter). Supported modifiers are 'ctrl', 'shift', 'alt' and key can be used either via its keyCode (13 for Return) or name. Named keys are 'backspace', 'tab', 'enter', 'esc', 'space', 'pageup', 'pagedown', 'end', 'home', 'left', 'up', 'right', 'down', 'insert', 'delete'.
 * @example <input ui-keypress="{enter:'x = 1', 'ctrl-shift-space':'foo()', 'shift-13':'bar()'}" /> <input ui-keypress="foo = 2 on ctrl-13 and bar('hello') on shift-esc" />
 **/
angular.module('ui.keypress').directive('uiKeydown', ['keypressHelper', function(keypressHelper){
  'use strict';

  return {
    link: function (scope, elm, attrs) {
      keypressHelper('keydown', scope, elm, attrs);
    }
  };
}]);

angular.module('ui.keypress').directive('uiKeypress', ['keypressHelper', function(keypressHelper){
  'use strict';

  return {
    link: function (scope, elm, attrs) {
      keypressHelper('keypress', scope, elm, attrs);
    }
  };
}]);

angular.module('ui.keypress').directive('uiKeyup', ['keypressHelper', function(keypressHelper){
  'use strict';

  return {
    link: function (scope, elm, attrs) {
      keypressHelper('keyup', scope, elm, attrs);
    }
  };
}]);

/*
 Attaches input mask onto input element
 */
angular.module('ui.mask', [])
  .value('uiMaskConfig', {
    'maskDefinitions': {
      '9': /\d/,
      'A': /[a-zA-Z]/,
      '*': /[a-zA-Z0-9]/
    },
    'clearOnBlur': true
  })
  .directive('uiMask', ['uiMaskConfig', '$parse', function (maskConfig, $parse) {
    'use strict';

    return {
      priority: 100,
      require: 'ngModel',
      restrict: 'A',
      compile: function uiMaskCompilingFunction(){
        var options = maskConfig;

        return function uiMaskLinkingFunction(scope, iElement, iAttrs, controller){
          var maskProcessed = false, eventsBound = false,
            maskCaretMap, maskPatterns, maskPlaceholder, maskComponents,
          // Minimum required length of the value to be considered valid
            minRequiredLength,
            value, valueMasked, isValid,
          // Vars for initializing/uninitializing
            originalPlaceholder = iAttrs.placeholder,
            originalMaxlength = iAttrs.maxlength,
          // Vars used exclusively in eventHandler()
            oldValue, oldValueUnmasked, oldCaretPosition, oldSelectionLength;

          function initialize(maskAttr){
            if (!angular.isDefined(maskAttr)) {
              return uninitialize();
            }
            processRawMask(maskAttr);
            if (!maskProcessed) {
              return uninitialize();
            }
            initializeElement();
            bindEventListeners();
            return true;
          }

          function initPlaceholder(placeholderAttr) {
            if(! angular.isDefined(placeholderAttr)) {
              return;
            }

            maskPlaceholder = placeholderAttr;

            // If the mask is processed, then we need to update the value
            if (maskProcessed) {
              eventHandler();
            }
          }

          function formatter(fromModelValue){
            if (!maskProcessed) {
              return fromModelValue;
            }
            value = unmaskValue(fromModelValue || '');
            isValid = validateValue(value);
            controller.$setValidity('mask', isValid);
            return isValid && value.length ? maskValue(value) : undefined;
          }

          function parser(fromViewValue){
            if (!maskProcessed) {
              return fromViewValue;
            }
            value = unmaskValue(fromViewValue || '');
            isValid = validateValue(value);
            // We have to set viewValue manually as the reformatting of the input
            // value performed by eventHandler() doesn't happen until after
            // this parser is called, which causes what the user sees in the input
            // to be out-of-sync with what the controller's $viewValue is set to.
            controller.$viewValue = value.length ? maskValue(value) : '';
            controller.$setValidity('mask', isValid);
            if (value === '' && iAttrs.required) {
                controller.$setValidity('required', !controller.$error.required);
            }
            return isValid ? value : undefined;
          }

          var linkOptions = {};

          if (iAttrs.uiOptions) {
            linkOptions = scope.$eval('[' + iAttrs.uiOptions + ']');
            if (angular.isObject(linkOptions[0])) {
              // we can't use angular.copy nor angular.extend, they lack the power to do a deep merge
              linkOptions = (function(original, current){
                for(var i in original) {
                  if (Object.prototype.hasOwnProperty.call(original, i)) {
                    if (current[i] === undefined) {
                      current[i] = angular.copy(original[i]);
                    } else {
                      angular.extend(current[i], original[i]);
                    }
                  }
                }
                return current;
              })(options, linkOptions[0]);
            }
          } else {
            linkOptions = options;
          }

          iAttrs.$observe('uiMask', initialize);
          iAttrs.$observe('placeholder', initPlaceholder);
          var modelViewValue = false;
          iAttrs.$observe('modelViewValue', function(val) {
            if(val === 'true') {
              modelViewValue = true;
            }
          });
          scope.$watch(iAttrs.ngModel, function(val) {
            if(modelViewValue && val) {
              var model = $parse(iAttrs.ngModel);
              model.assign(scope, controller.$viewValue);
            }
          });
          controller.$formatters.push(formatter);
          controller.$parsers.push(parser);

          function uninitialize(){
            maskProcessed = false;
            unbindEventListeners();

            if (angular.isDefined(originalPlaceholder)) {
              iElement.attr('placeholder', originalPlaceholder);
            } else {
              iElement.removeAttr('placeholder');
            }

            if (angular.isDefined(originalMaxlength)) {
              iElement.attr('maxlength', originalMaxlength);
            } else {
              iElement.removeAttr('maxlength');
            }

            iElement.val(controller.$modelValue);
            controller.$viewValue = controller.$modelValue;
            return false;
          }

          function initializeElement(){
            value = oldValueUnmasked = unmaskValue(controller.$viewValue || '');
            valueMasked = oldValue = maskValue(value);
            isValid = validateValue(value);
            var viewValue = isValid && value.length ? valueMasked : '';
            if (iAttrs.maxlength) { // Double maxlength to allow pasting new val at end of mask
              iElement.attr('maxlength', maskCaretMap[maskCaretMap.length - 1] * 2);
            }
            iElement.attr('placeholder', maskPlaceholder);
            iElement.val(viewValue);
            controller.$viewValue = viewValue;
            // Not using $setViewValue so we don't clobber the model value and dirty the form
            // without any kind of user interaction.
          }

          function bindEventListeners(){
            if (eventsBound) {
              return;
            }
            iElement.bind('blur', blurHandler);
            iElement.bind('mousedown mouseup', mouseDownUpHandler);
            iElement.bind('input keyup click focus', eventHandler);
            eventsBound = true;
          }

          function unbindEventListeners(){
            if (!eventsBound) {
              return;
            }
            iElement.unbind('blur', blurHandler);
            iElement.unbind('mousedown', mouseDownUpHandler);
            iElement.unbind('mouseup', mouseDownUpHandler);
            iElement.unbind('input', eventHandler);
            iElement.unbind('keyup', eventHandler);
            iElement.unbind('click', eventHandler);
            iElement.unbind('focus', eventHandler);
            eventsBound = false;
          }

          function validateValue(value){
            // Zero-length value validity is ngRequired's determination
            return value.length ? value.length >= minRequiredLength : true;
          }

          function unmaskValue(value){
            var valueUnmasked = '',
              maskPatternsCopy = maskPatterns.slice();
            // Preprocess by stripping mask components from value
            value = value.toString();
            angular.forEach(maskComponents, function (component){
              value = value.replace(component, '');
            });
            angular.forEach(value.split(''), function (chr){
              if (maskPatternsCopy.length && maskPatternsCopy[0].test(chr)) {
                valueUnmasked += chr;
                maskPatternsCopy.shift();
              }
            });
            return valueUnmasked;
          }

          function maskValue(unmaskedValue){
            var valueMasked = '',
                maskCaretMapCopy = maskCaretMap.slice();

            angular.forEach(maskPlaceholder.split(''), function (chr, i){
              if (unmaskedValue.length && i === maskCaretMapCopy[0]) {
                valueMasked  += unmaskedValue.charAt(0) || '_';
                unmaskedValue = unmaskedValue.substr(1);
                maskCaretMapCopy.shift();
              }
              else {
                valueMasked += chr;
              }
            });
            return valueMasked;
          }

          function getPlaceholderChar(i) {
            var placeholder = iAttrs.placeholder;

            if (typeof placeholder !== 'undefined' && placeholder[i]) {
              return placeholder[i];
            } else {
              return '_';
            }
          }

          // Generate array of mask components that will be stripped from a masked value
          // before processing to prevent mask components from being added to the unmasked value.
          // E.g., a mask pattern of '+7 9999' won't have the 7 bleed into the unmasked value.
          // If a maskable char is followed by a mask char and has a mask
          // char behind it, we'll split it into it's own component so if
          // a user is aggressively deleting in the input and a char ahead
          // of the maskable char gets deleted, we'll still be able to strip
          // it in the unmaskValue() preprocessing.
          function getMaskComponents() {
            return maskPlaceholder.replace(/[_]+/g, '_').replace(/([^_]+)([a-zA-Z0-9])([^_])/g, '$1$2_$3').split('_');
          }

          function processRawMask(mask){
            var characterCount = 0;

            maskCaretMap    = [];
            maskPatterns    = [];
            maskPlaceholder = '';

            if (typeof mask === 'string') {
              minRequiredLength = 0;

              var isOptional = false,
                  numberOfOptionalCharacters = 0,
                  splitMask  = mask.split('');

              angular.forEach(splitMask, function (chr, i){
                if (linkOptions.maskDefinitions[chr]) {

                  maskCaretMap.push(characterCount);

                  maskPlaceholder += getPlaceholderChar(i - numberOfOptionalCharacters);
                  maskPatterns.push(linkOptions.maskDefinitions[chr]);

                  characterCount++;
                  if (!isOptional) {
                    minRequiredLength++;
                  }
                }
                else if (chr === '?') {
                  isOptional = true;
                  numberOfOptionalCharacters++;
                }
                else {
                  maskPlaceholder += chr;
                  characterCount++;
                }
              });
            }
            // Caret position immediately following last position is valid.
            maskCaretMap.push(maskCaretMap.slice().pop() + 1);

            maskComponents = getMaskComponents();
            maskProcessed  = maskCaretMap.length > 1 ? true : false;
          }

          function blurHandler(){
            if (linkOptions.clearOnBlur) {
              oldCaretPosition = 0;
              oldSelectionLength = 0;
              if (!isValid || value.length === 0) {
                valueMasked = '';
                iElement.val('');
                scope.$apply(function () {
                  controller.$setViewValue('');
                });
              }
            }
          }

          function mouseDownUpHandler(e){
            if (e.type === 'mousedown') {
              iElement.bind('mouseout', mouseoutHandler);
            } else {
              iElement.unbind('mouseout', mouseoutHandler);
            }
          }

          iElement.bind('mousedown mouseup', mouseDownUpHandler);

          function mouseoutHandler(){
            /*jshint validthis: true */
            oldSelectionLength = getSelectionLength(this);
            iElement.unbind('mouseout', mouseoutHandler);
          }

          function eventHandler(e){
            /*jshint validthis: true */
            e = e || {};
            // Allows more efficient minification
            var eventWhich = e.which,
              eventType = e.type;

            // Prevent shift and ctrl from mucking with old values
            if (eventWhich === 16 || eventWhich === 91) { return;}

            var val = iElement.val(),
              valOld = oldValue,
              valMasked,
              valUnmasked = unmaskValue(val),
              valUnmaskedOld = oldValueUnmasked,
              valAltered = false,

              caretPos = getCaretPosition(this) || 0,
              caretPosOld = oldCaretPosition || 0,
              caretPosDelta = caretPos - caretPosOld,
              caretPosMin = maskCaretMap[0],
              caretPosMax = maskCaretMap[valUnmasked.length] || maskCaretMap.slice().shift(),

              selectionLenOld = oldSelectionLength || 0,
              isSelected = getSelectionLength(this) > 0,
              wasSelected = selectionLenOld > 0,

            // Case: Typing a character to overwrite a selection
              isAddition = (val.length > valOld.length) || (selectionLenOld && val.length > valOld.length - selectionLenOld),
            // Case: Delete and backspace behave identically on a selection
              isDeletion = (val.length < valOld.length) || (selectionLenOld && val.length === valOld.length - selectionLenOld),
              isSelection = (eventWhich >= 37 && eventWhich <= 40) && e.shiftKey, // Arrow key codes

              isKeyLeftArrow = eventWhich === 37,
            // Necessary due to "input" event not providing a key code
              isKeyBackspace = eventWhich === 8 || (eventType !== 'keyup' && isDeletion && (caretPosDelta === -1)),
              isKeyDelete = eventWhich === 46 || (eventType !== 'keyup' && isDeletion && (caretPosDelta === 0 ) && !wasSelected),

            // Handles cases where caret is moved and placed in front of invalid maskCaretMap position. Logic below
            // ensures that, on click or leftward caret placement, caret is moved leftward until directly right of
            // non-mask character. Also applied to click since users are (arguably) more likely to backspace
            // a character when clicking within a filled input.
              caretBumpBack = (isKeyLeftArrow || isKeyBackspace || eventType === 'click') && caretPos > caretPosMin;

            oldSelectionLength = getSelectionLength(this);

            // These events don't require any action
            if (isSelection || (isSelected && (eventType === 'click' || eventType === 'keyup'))) {
              return;
            }

            // Value Handling
            // ==============

            // User attempted to delete but raw value was unaffected--correct this grievous offense
            if ((eventType === 'input') && isDeletion && !wasSelected && valUnmasked === valUnmaskedOld) {
              while (isKeyBackspace && caretPos > caretPosMin && !isValidCaretPosition(caretPos)) {
                caretPos--;
              }
              while (isKeyDelete && caretPos < caretPosMax && maskCaretMap.indexOf(caretPos) === -1) {
                caretPos++;
              }
              var charIndex = maskCaretMap.indexOf(caretPos);
              // Strip out non-mask character that user would have deleted if mask hadn't been in the way.
              valUnmasked = valUnmasked.substring(0, charIndex) + valUnmasked.substring(charIndex + 1);
              valAltered = true;
            }

            // Update values
            valMasked = maskValue(valUnmasked);

            oldValue = valMasked;
            oldValueUnmasked = valUnmasked;
            iElement.val(valMasked);
            if (valAltered) {
              // We've altered the raw value after it's been $digest'ed, we need to $apply the new value.
              scope.$apply(function (){
                controller.$setViewValue(valUnmasked);
              });
            }

            // Caret Repositioning
            // ===================

            // Ensure that typing always places caret ahead of typed character in cases where the first char of
            // the input is a mask char and the caret is placed at the 0 position.
            if (isAddition && (caretPos <= caretPosMin)) {
              caretPos = caretPosMin + 1;
            }

            if (caretBumpBack) {
              caretPos--;
            }

            // Make sure caret is within min and max position limits
            caretPos = caretPos > caretPosMax ? caretPosMax : caretPos < caretPosMin ? caretPosMin : caretPos;

            // Scoot the caret back or forth until it's in a non-mask position and within min/max position limits
            while (!isValidCaretPosition(caretPos) && caretPos > caretPosMin && caretPos < caretPosMax) {
              caretPos += caretBumpBack ? -1 : 1;
            }

            if ((caretBumpBack && caretPos < caretPosMax) || (isAddition && !isValidCaretPosition(caretPosOld))) {
              caretPos++;
            }
            oldCaretPosition = caretPos;
            setCaretPosition(this, caretPos);
          }

          function isValidCaretPosition(pos){ return maskCaretMap.indexOf(pos) > -1; }

          function getCaretPosition(input){
            if (!input) return 0;
            if (input.selectionStart !== undefined) {
              return input.selectionStart;
            } else if (document.selection) {
              // Curse you IE
              input.focus();
              var selection = document.selection.createRange();
              selection.moveStart('character', input.value ? -input.value.length : 0);
              return selection.text.length;
            }
            return 0;
          }

          function setCaretPosition(input, pos){
            if (!input) return 0;
            if (input.offsetWidth === 0 || input.offsetHeight === 0) {
              return; // Input's hidden
            }
            if (input.setSelectionRange) {
              input.focus();
              input.setSelectionRange(pos, pos);
            }
            else if (input.createTextRange) {
              // Curse you IE
              var range = input.createTextRange();
              range.collapse(true);
              range.moveEnd('character', pos);
              range.moveStart('character', pos);
              range.select();
            }
          }

          function getSelectionLength(input){
            if (!input) return 0;
            if (input.selectionStart !== undefined) {
              return (input.selectionEnd - input.selectionStart);
            }
            if (document.selection) {
              return (document.selection.createRange().text.length);
            }
            return 0;
          }

          // https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf
          if (!Array.prototype.indexOf) {
            Array.prototype.indexOf = function (searchElement /*, fromIndex */){
              if (this === null) {
                throw new TypeError();
              }
              var t = Object(this);
              var len = t.length >>> 0;
              if (len === 0) {
                return -1;
              }
              var n = 0;
              if (arguments.length > 1) {
                n = Number(arguments[1]);
                if (n !== n) { // shortcut for verifying if it's NaN
                  n = 0;
                } else if (n !== 0 && n !== Infinity && n !== -Infinity) {
                  n = (n > 0 || -1) * Math.floor(Math.abs(n));
                }
              }
              if (n >= len) {
                return -1;
              }
              var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);
              for (; k < len; k++) {
                if (k in t && t[k] === searchElement) {
                  return k;
                }
              }
              return -1;
            };
          }

        };
      }
    };
  }
]);

/**
 * Add a clear button to form inputs to reset their value
 */
angular.module('ui.reset',[]).value('uiResetConfig',null).directive('uiReset', ['uiResetConfig', function (uiResetConfig) {
  'use strict';

  var resetValue = null;
  if (uiResetConfig !== undefined){
      resetValue = uiResetConfig;
  }
  return {
    require: 'ngModel',
    link: function (scope, elm, attrs, ctrl) {
      var aElement;
      aElement = angular.element('<a class="ui-reset" />');
      elm.wrap('<span class="ui-resetwrap" />').after(aElement);
      aElement.bind('click', function (e) {
        e.preventDefault();
        scope.$apply(function () {
          if (attrs.uiReset){
            ctrl.$setViewValue(scope.$eval(attrs.uiReset));
          }else{
            ctrl.$setViewValue(resetValue);
          }
          ctrl.$render();
        });
      });
    }
  };
}]);

/**
 * Set a $uiRoute boolean to see if the current route matches
 */
angular.module('ui.route', []).directive('uiRoute', ['$location', '$parse', function ($location, $parse) {
  'use strict';

  return {
    restrict: 'AC',
    scope: true,
    compile: function(tElement, tAttrs) {
      var useProperty;
      if (tAttrs.uiRoute) {
        useProperty = 'uiRoute';
      } else if (tAttrs.ngHref) {
        useProperty = 'ngHref';
      } else if (tAttrs.href) {
        useProperty = 'href';
      } else {
        throw new Error('uiRoute missing a route or href property on ' + tElement[0]);
      }
      return function ($scope, elm, attrs) {
        var modelSetter = $parse(attrs.ngModel || attrs.routeModel || '$uiRoute').assign;
        var watcher = angular.noop;

        // Used by href and ngHref
        function staticWatcher(newVal) {
          var hash = newVal.indexOf('#');
          if (hash > -1){
            newVal = newVal.substr(hash + 1);
          }
          watcher = function watchHref() {
            modelSetter($scope, ($location.path().indexOf(newVal) > -1));
          };
          watcher();
        }
        // Used by uiRoute
        function regexWatcher(newVal) {
          var hash = newVal.indexOf('#');
          if (hash > -1){
            newVal = newVal.substr(hash + 1);
          }
          watcher = function watchRegex() {
            var regexp = new RegExp('^' + newVal + '$', ['i']);
            modelSetter($scope, regexp.test($location.path()));
          };
          watcher();
        }

        switch (useProperty) {
          case 'uiRoute':
            // if uiRoute={{}} this will be undefined, otherwise it will have a value and $observe() never gets triggered
            if (attrs.uiRoute){
              regexWatcher(attrs.uiRoute);
            }else{
              attrs.$observe('uiRoute', regexWatcher);
            }
            break;
          case 'ngHref':
            // Setup watcher() every time ngHref changes
            if (attrs.ngHref){
              staticWatcher(attrs.ngHref);
            }else{
              attrs.$observe('ngHref', staticWatcher);
            }
            break;
          case 'href':
            // Setup watcher()
            staticWatcher(attrs.href);
        }

        $scope.$on('$routeChangeSuccess', function(){
          watcher();
        });

        //Added for compatibility with ui-router
        $scope.$on('$stateChangeSuccess', function(){
          watcher();
        });
      };
    }
  };
}]);

angular.module('ui.scroll.jqlite', ['ui.scroll']).service('jqLiteExtras', [
  '$log', '$window', function(console, window) {
    'use strict';

    return {
      registerFor: function(element) {
        var convertToPx, css, getMeasurements, getStyle, getWidthHeight, isWindow, scrollTo;
        css = angular.element.prototype.css;
        element.prototype.css = function(name, value) {
          var elem, self;
          self = this;
          elem = self[0];
          if (!(!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style)) {
            return css.call(self, name, value);
          }
        };
        isWindow = function(obj) {
          return obj && obj.document && obj.location && obj.alert && obj.setInterval;
        };
        scrollTo = function(self, direction, value) {
          var elem, method, preserve, prop, _ref;
          elem = self[0];
          _ref = {
            top: ['scrollTop', 'pageYOffset', 'scrollLeft'],
            left: ['scrollLeft', 'pageXOffset', 'scrollTop']
          }[direction], method = _ref[0], prop = _ref[1], preserve = _ref[2];
          if (isWindow(elem)) {
            if (angular.isDefined(value)) {
              return elem.scrollTo(self[preserve].call(self), value);
            } else {
              if (prop in elem) {
                return elem[prop];
              } else {
                return elem.document.documentElement[method];
              }
            }
          } else {
            if (angular.isDefined(value)) {
              return elem[method] = value;
            } else {
              return elem[method];
            }
          }
        };
        if (window.getComputedStyle) {
          getStyle = function(elem) {
            return window.getComputedStyle(elem, null);
          };
          convertToPx = function(elem, value) {
            return parseFloat(value);
          };
        } else {
          getStyle = function(elem) {
            return elem.currentStyle;
          };
          convertToPx = function(elem, value) {
            var core_pnum, left, result, rnumnonpx, rs, rsLeft, style;
            core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;
            rnumnonpx = new RegExp('^(' + core_pnum + ')(?!px)[a-z%]+$', 'i');
            if (!rnumnonpx.test(value)) {
              return parseFloat(value);
            } else {
              style = elem.style;
              left = style.left;
              rs = elem.runtimeStyle;
              rsLeft = rs && rs.left;
              if (rs) {
                rs.left = style.left;
              }
              style.left = value;
              result = style.pixelLeft;
              style.left = left;
              if (rsLeft) {
                rs.left = rsLeft;
              }
              return result;
            }
          };
        }
        getMeasurements = function(elem, measure) {
          var base, borderA, borderB, computedMarginA, computedMarginB, computedStyle, dirA, dirB, marginA, marginB, paddingA, paddingB, _ref;
          if (isWindow(elem)) {
            base = document.documentElement[{
              height: 'clientHeight',
              width: 'clientWidth'
            }[measure]];
            return {
              base: base,
              padding: 0,
              border: 0,
              margin: 0
            };
          }
          _ref = {
            width: [elem.offsetWidth, 'Left', 'Right'],
            height: [elem.offsetHeight, 'Top', 'Bottom']
          }[measure], base = _ref[0], dirA = _ref[1], dirB = _ref[2];
          computedStyle = getStyle(elem);
          paddingA = convertToPx(elem, computedStyle['padding' + dirA]) || 0;
          paddingB = convertToPx(elem, computedStyle['padding' + dirB]) || 0;
          borderA = convertToPx(elem, computedStyle['border' + dirA + 'Width']) || 0;
          borderB = convertToPx(elem, computedStyle['border' + dirB + 'Width']) || 0;
          computedMarginA = computedStyle['margin' + dirA];
          computedMarginB = computedStyle['margin' + dirB];
          marginA = convertToPx(elem, computedMarginA) || 0;
          marginB = convertToPx(elem, computedMarginB) || 0;
          return {
            base: base,
            padding: paddingA + paddingB,
            border: borderA + borderB,
            margin: marginA + marginB
          };
        };
        getWidthHeight = function(elem, direction, measure) {
          var computedStyle, measurements, result;
          measurements = getMeasurements(elem, direction);
          if (measurements.base > 0) {
            return {
              base: measurements.base - measurements.padding - measurements.border,
              outer: measurements.base,
              outerfull: measurements.base + measurements.margin
            }[measure];
          } else {
            computedStyle = getStyle(elem);
            result = computedStyle[direction];
            if (result < 0 || result === null) {
              result = elem.style[direction] || 0;
            }
            result = parseFloat(result) || 0;
            return {
              base: result - measurements.padding - measurements.border,
              outer: result,
              outerfull: result + measurements.padding + measurements.border + measurements.margin
            }[measure];
          }
        };
        return angular.forEach({
          before: function(newElem) {
            var children, elem, i, parent, self, _i, _ref;
            self = this;
            elem = self[0];
            parent = self.parent();
            children = parent.contents();
            if (children[0] === elem) {
              return parent.prepend(newElem);
            } else {
              for (i = _i = 1, _ref = children.length - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
                if (children[i] === elem) {
                  angular.element(children[i - 1]).after(newElem);
                  return;
                }
              }
              throw new Error('invalid DOM structure ' + elem.outerHTML);
            }
          },
          height: function(value) {
            var self;
            self = this;
            if (angular.isDefined(value)) {
              if (angular.isNumber(value)) {
                value = value + 'px';
              }
              return css.call(self, 'height', value);
            } else {
              return getWidthHeight(this[0], 'height', 'base');
            }
          },
          outerHeight: function(option) {
            return getWidthHeight(this[0], 'height', option ? 'outerfull' : 'outer');
          },
          /*
          UIScroller no longer relies on jQuery method offset. The jQLite implementation of the method
          is kept here just for the reference. Also the offset setter method was never implemented
          */

          offset: function(value) {
            var box, doc, docElem, elem, self, win;
            self = this;
            if (arguments.length) {
              if (value === void 0) {
                return self;
              } else {
                throw new Error('offset setter method is not implemented');
              }
            }
            box = {
              top: 0,
              left: 0
            };
            elem = self[0];
            doc = elem && elem.ownerDocument;
            if (!doc) {
              return;
            }
            docElem = doc.documentElement;
            if (elem.getBoundingClientRect != null) {
              box = elem.getBoundingClientRect();
            }
            win = doc.defaultView || doc.parentWindow;
            return {
              top: box.top + (win.pageYOffset || docElem.scrollTop) - (docElem.clientTop || 0),
              left: box.left + (win.pageXOffset || docElem.scrollLeft) - (docElem.clientLeft || 0)
            };
          },
          scrollTop: function(value) {
            return scrollTo(this, 'top', value);
          },
          scrollLeft: function(value) {
            return scrollTo(this, 'left', value);
          }
        }, function(value, key) {
          if (!element.prototype[key]) {
            return element.prototype[key] = value;
          }
        });
      }
    };
  }
]).run([
  '$log', '$window', 'jqLiteExtras', function(console, window, jqLiteExtras) {
    'use strict';

    if (!window.jQuery) {
      return jqLiteExtras.registerFor(angular.element);
    }
  }
]);

/*
//# sourceURL=src/scripts/ui-scroll-jqlite.js
*/


/*
 globals: angular, window

 List of used element methods available in JQuery but not in JQuery Lite

 element.before(elem)
 element.height()
 element.outerHeight(true)
 element.height(value) = only for Top/Bottom padding elements
 element.scrollTop()
 element.scrollTop(value)
 */

angular.module('ui.scroll', []).directive('uiScrollViewport', [
  '$log', function() {
    'use strict';

    return {
      controller: [
        '$scope', '$element', function(scope, element) {
          this.viewport = element;
          return this;
        }
      ]
    };
  }
]).directive('uiScroll', [
  '$log', '$injector', '$rootScope', '$timeout', function(console, $injector, $rootScope, $timeout) {
    'use strict';

    return {
      require: ['?^uiScrollViewport'],
      transclude: 'element',
      priority: 1000,
      terminal: true,
      compile: function(elementTemplate, attr, linker) {
        return function($scope, element, $attr, controllers) {
          var adapter, adapterOnScope, adjustBuffer, adjustRowHeight, applyUpdate, bof, bottomVisiblePos, buffer, bufferPadding, bufferSize, builder, clipBottom, clipTop, datasource, datasourceName, doAdjustment, doDelete, doInsert, doUpdate, enqueueFetch, eof, eventListener, fetch, finalize, first, getValueChain, hideElementBeforeAppend, insert, isDatasourceValid, itemName, loading, log, match, next, pending, reload, removeFromBuffer, resizeAndScrollHandler, ridActual, scrollHeight, setValueChain, shouldLoadBottom, shouldLoadTop, showElementAfterRender, topVisible, topVisiblePos, viewport, viewportScope, wheelHandler;
          log = console.debug || console.log;
          match = $attr.uiScroll.match(/^\s*(\w+)\s+in\s+([\w\.]+)\s*$/);
          if (!match) {
            throw new Error('Expected uiScroll in form of \'_item_ in _datasource_\' but got \'' + $attr.uiScroll + '\'');
          }
          itemName = match[1];
          datasourceName = match[2];
          getValueChain = function(targetScope, target) {
            var chain;
            if (!targetScope) {
              return;
            }
            chain = target.match(/^([\w]+)\.(.+)$/);
            if (!chain || chain.length !== 3) {
              return targetScope[target];
            }
            return getValueChain(targetScope[chain[1]], chain[2]);
          };
          setValueChain = function(targetScope, target, value, doNotSet) {
            var chain;
            if (!targetScope || !target) {
              return;
            }
            if (!(chain = target.match(/^([\w]+)\.(.+)$/))) {
              if (target.indexOf('.') !== -1) {
                return;
              }
            }
            if (!chain || chain.length !== 3) {
              if (!angular.isObject(targetScope[target]) && !doNotSet) {
                return targetScope[target] = value;
              }
              return targetScope[target] = value;
            }
            if (!angular.isObject(targetScope[chain[1]]) && !doNotSet) {
              targetScope[chain[1]] = {};
            }
            return setValueChain(targetScope[chain[1]], chain[2], value, doNotSet);
          };
          datasource = getValueChain($scope, datasourceName);
          isDatasourceValid = function() {
            return angular.isObject(datasource) && typeof datasource.get === 'function';
          };
          if (!isDatasourceValid()) {
            datasource = $injector.get(datasourceName);
            if (!isDatasourceValid()) {
              throw new Error('' + datasourceName + ' is not a valid datasource');
            }
          }
          bufferSize = Math.max(3, +$attr.bufferSize || 10);
          bufferPadding = function() {
            return viewport.outerHeight() * Math.max(0.1, +$attr.padding || 0.1);
          };
          scrollHeight = function(elem) {
            var _ref;
            return (_ref = elem[0].scrollHeight) != null ? _ref : elem[0].document.documentElement.scrollHeight;
          };
          builder = null;
          linker($scope.$new(), function(template) {
            var bottomPadding, createPadding, padding, repeaterType, topPadding, viewport;
            repeaterType = template[0].localName;
            if (repeaterType === 'dl') {
              throw new Error('ui-scroll directive does not support <' + template[0].localName + '> as a repeating tag: ' + template[0].outerHTML);
            }
            if (repeaterType !== 'li' && repeaterType !== 'tr') {
              repeaterType = 'div';
            }
            viewport = controllers[0] && controllers[0].viewport ? controllers[0].viewport : angular.element(window);
            viewport.css({
              'overflow-y': 'auto',
              'display': 'block'
            });
            padding = function(repeaterType) {
              var div, result, table;
              switch (repeaterType) {
                case 'tr':
                  table = angular.element('<table><tr><td><div></div></td></tr></table>');
                  div = table.find('div');
                  result = table.find('tr');
                  result.paddingHeight = function() {
                    return div.height.apply(div, arguments);
                  };
                  return result;
                default:
                  result = angular.element('<' + repeaterType + '></' + repeaterType + '>');
                  result.paddingHeight = result.height;
                  return result;
              }
            };
            createPadding = function(padding, element, direction) {
              element[{
                top: 'before',
                bottom: 'after'
              }[direction]](padding);
              return {
                paddingHeight: function() {
                  return padding.paddingHeight.apply(padding, arguments);
                },
                insert: function(element) {
                  return padding[{
                    top: 'after',
                    bottom: 'before'
                  }[direction]](element);
                }
              };
            };
            topPadding = createPadding(padding(repeaterType), element, 'top');
            bottomPadding = createPadding(padding(repeaterType), element, 'bottom');
            $scope.$on('$destroy', template.remove);
            return builder = {
              viewport: viewport,
              topPadding: topPadding.paddingHeight,
              bottomPadding: bottomPadding.paddingHeight,
              append: bottomPadding.insert,
              prepend: topPadding.insert,
              bottomDataPos: function() {
                return scrollHeight(viewport) - bottomPadding.paddingHeight();
              },
              topDataPos: function() {
                return topPadding.paddingHeight();
              }
            };
          });
          viewport = builder.viewport;
          viewportScope = viewport.scope() || $rootScope;
          topVisible = function(item) {
            adapter.topVisible = item.scope[itemName];
            adapter.topVisibleElement = item.element;
            adapter.topVisibleScope = item.scope;
            if ($attr.topVisible) {
              setValueChain(viewportScope, $attr.topVisible, adapter.topVisible);
            }
            if ($attr.topVisibleElement) {
              setValueChain(viewportScope, $attr.topVisibleElement, adapter.topVisibleElement);
            }
            if ($attr.topVisibleScope) {
              setValueChain(viewportScope, $attr.topVisibleScope, adapter.topVisibleScope);
            }
            if (typeof datasource.topVisible === 'function') {
              return datasource.topVisible(item);
            }
          };
          loading = function(value) {
            adapter.isLoading = value;
            if ($attr.isLoading) {
              setValueChain($scope, $attr.isLoading, value);
            }
            if (typeof datasource.loading === 'function') {
              return datasource.loading(value);
            }
          };
          ridActual = 0;
          first = 1;
          next = 1;
          buffer = [];
          pending = [];
          eof = false;
          bof = false;
          removeFromBuffer = function(start, stop) {
            var i, _i;
            for (i = _i = start; start <= stop ? _i < stop : _i > stop; i = start <= stop ? ++_i : --_i) {
              buffer[i].scope.$destroy();
              buffer[i].element.remove();
            }
            return buffer.splice(start, stop - start);
          };
          reload = function() {
            ridActual++;
            first = 1;
            next = 1;
            removeFromBuffer(0, buffer.length);
            builder.topPadding(0);
            builder.bottomPadding(0);
            pending = [];
            eof = false;
            bof = false;
            return adjustBuffer(ridActual);
          };
          bottomVisiblePos = function() {
            return viewport.scrollTop() + viewport.outerHeight();
          };
          topVisiblePos = function() {
            return viewport.scrollTop();
          };
          shouldLoadBottom = function() {
            return !eof && builder.bottomDataPos() < bottomVisiblePos() + bufferPadding();
          };
          clipBottom = function() {
            var bottomHeight, i, item, itemHeight, itemTop, newRow, overage, rowTop, _i, _ref;
            bottomHeight = 0;
            overage = 0;
            for (i = _i = _ref = buffer.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
              item = buffer[i];
              itemTop = item.element.offset().top;
              newRow = rowTop !== itemTop;
              rowTop = itemTop;
              if (newRow) {
                itemHeight = item.element.outerHeight(true);
              }
              if (builder.bottomDataPos() - bottomHeight - itemHeight > bottomVisiblePos() + bufferPadding()) {
                if (newRow) {
                  bottomHeight += itemHeight;
                }
                overage++;
                eof = false;
              } else {
                if (newRow) {
                  break;
                }
                overage++;
              }
            }
            if (overage > 0) {
              builder.bottomPadding(builder.bottomPadding() + bottomHeight);
              removeFromBuffer(buffer.length - overage, buffer.length);
              return next -= overage;
            }
          };
          shouldLoadTop = function() {
            return !bof && (builder.topDataPos() > topVisiblePos() - bufferPadding());
          };
          clipTop = function() {
            var item, itemHeight, itemTop, newRow, overage, rowTop, topHeight, _i, _len;
            topHeight = 0;
            overage = 0;
            for (_i = 0, _len = buffer.length; _i < _len; _i++) {
              item = buffer[_i];
              itemTop = item.element.offset().top;
              newRow = rowTop !== itemTop;
              rowTop = itemTop;
              if (newRow) {
                itemHeight = item.element.outerHeight(true);
              }
              if (builder.topDataPos() + topHeight + itemHeight < topVisiblePos() - bufferPadding()) {
                if (newRow) {
                  topHeight += itemHeight;
                }
                overage++;
                bof = false;
              } else {
                if (newRow) {
                  break;
                }
                overage++;
              }
            }
            if (overage > 0) {
              builder.topPadding(builder.topPadding() + topHeight);
              removeFromBuffer(0, overage);
              return first += overage;
            }
          };
          enqueueFetch = function(rid, direction) {
            if (!adapter.isLoading) {
              loading(true);
            }
            if (pending.push(direction) === 1) {
              return fetch(rid);
            }
          };
          hideElementBeforeAppend = function(element) {
            element.displayTemp = element.css('display');
            return element.css('display', 'none');
          };
          showElementAfterRender = function(element) {
            if (element.hasOwnProperty('displayTemp')) {
              return element.css('display', element.displayTemp);
            }
          };
          insert = function(index, item) {
            var itemScope, toBeAppended, wrapper;
            itemScope = $scope.$new();
            itemScope[itemName] = item;
            toBeAppended = index > first;
            itemScope.$index = index;
            if (toBeAppended) {
              itemScope.$index--;
            }
            wrapper = {
              scope: itemScope
            };
            linker(itemScope, function(clone) {
              wrapper.element = clone;
              if (toBeAppended) {
                if (index === next) {
                  hideElementBeforeAppend(clone);
                  builder.append(clone);
                  return buffer.push(wrapper);
                } else {
                  buffer[index - first].element.after(clone);
                  return buffer.splice(index - first + 1, 0, wrapper);
                }
              } else {
                hideElementBeforeAppend(clone);
                builder.prepend(clone);
                return buffer.unshift(wrapper);
              }
            });
            return {
              appended: toBeAppended,
              wrapper: wrapper
            };
          };
          adjustRowHeight = function(appended, wrapper) {
            var newHeight;
            if (appended) {
              return builder.bottomPadding(Math.max(0, builder.bottomPadding() - wrapper.element.outerHeight(true)));
            } else {
              newHeight = builder.topPadding() - wrapper.element.outerHeight(true);
              if (newHeight >= 0) {
                return builder.topPadding(newHeight);
              } else {
                return viewport.scrollTop(viewport.scrollTop() + wrapper.element.outerHeight(true));
              }
            }
          };
          doAdjustment = function(rid, finalize) {
            var item, itemHeight, itemTop, newRow, rowTop, topHeight, _i, _len, _results;
            if (shouldLoadBottom()) {
              enqueueFetch(rid, true);
            } else {
              if (shouldLoadTop()) {
                enqueueFetch(rid, false);
              }
            }
            if (finalize) {
              finalize(rid);
            }
            if (pending.length === 0) {
              topHeight = 0;
              _results = [];
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                item = buffer[_i];
                itemTop = item.element.offset().top;
                newRow = rowTop !== itemTop;
                rowTop = itemTop;
                if (newRow) {
                  itemHeight = item.element.outerHeight(true);
                }
                if (newRow && (builder.topDataPos() + topHeight + itemHeight < topVisiblePos())) {
                  _results.push(topHeight += itemHeight);
                } else {
                  if (newRow) {
                    topVisible(item);
                  }
                  break;
                }
              }
              return _results;
            }
          };
          adjustBuffer = function(rid, newItems, finalize) {
            if (newItems && newItems.length) {
              return $timeout(function() {
                var elt, itemTop, row, rowTop, rows, _i, _j, _len, _len1;
                rows = [];
                for (_i = 0, _len = newItems.length; _i < _len; _i++) {
                  row = newItems[_i];
                  elt = row.wrapper.element;
                  showElementAfterRender(elt);
                  itemTop = elt.offset().top;
                  if (rowTop !== itemTop) {
                    rows.push(row);
                    rowTop = itemTop;
                  }
                }
                for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
                  row = rows[_j];
                  adjustRowHeight(row.appended, row.wrapper);
                }
                return doAdjustment(rid, finalize);
              });
            } else {
              return doAdjustment(rid, finalize);
            }
          };
          finalize = function(rid, newItems) {
            return adjustBuffer(rid, newItems, function() {
              pending.shift();
              if (pending.length === 0) {
                return loading(false);
              } else {
                return fetch(rid);
              }
            });
          };
          fetch = function(rid) {
            var direction;
            direction = pending[0];
            if (direction) {
              if (buffer.length && !shouldLoadBottom()) {
                return finalize(rid);
              } else {
                return datasource.get(next, bufferSize, function(result) {
                  var item, newItems, _i, _len;
                  if ((rid && rid !== ridActual) || $scope.$$destroyed) {
                    return;
                  }
                  newItems = [];
                  if (result.length < bufferSize) {
                    eof = true;
                    builder.bottomPadding(0);
                  }
                  if (result.length > 0) {
                    clipTop();
                    for (_i = 0, _len = result.length; _i < _len; _i++) {
                      item = result[_i];
                      newItems.push(insert(++next, item));
                    }
                  }
                  return finalize(rid, newItems);
                });
              }
            } else {
              if (buffer.length && !shouldLoadTop()) {
                return finalize(rid);
              } else {
                return datasource.get(first - bufferSize, bufferSize, function(result) {
                  var i, newItems, _i, _ref;
                  if ((rid && rid !== ridActual) || $scope.$$destroyed) {
                    return;
                  }
                  newItems = [];
                  if (result.length < bufferSize) {
                    bof = true;
                    builder.topPadding(0);
                  }
                  if (result.length > 0) {
                    if (buffer.length) {
                      clipBottom();
                    }
                    for (i = _i = _ref = result.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
                      newItems.unshift(insert(--first, result[i]));
                    }
                  }
                  return finalize(rid, newItems);
                });
              }
            }
          };
          resizeAndScrollHandler = function() {
            if (!$rootScope.$$phase && !adapter.isLoading) {
              adjustBuffer();
              return $scope.$apply();
            }
          };
          wheelHandler = function(event) {
            var scrollTop, yMax;
            scrollTop = viewport[0].scrollTop;
            yMax = viewport[0].scrollHeight - viewport[0].clientHeight;
            if ((scrollTop === 0 && !bof) || (scrollTop === yMax && !eof)) {
              return event.preventDefault();
            }
          };
          viewport.bind('resize', resizeAndScrollHandler);
          viewport.bind('scroll', resizeAndScrollHandler);
          viewport.bind('mousewheel', wheelHandler);
          $scope.$watch(datasource.revision, reload);
          if (datasource.scope) {
            eventListener = datasource.scope.$new();
          } else {
            eventListener = $scope.$new();
          }
          $scope.$on('$destroy', function() {
            var item, _i, _len;
            for (_i = 0, _len = buffer.length; _i < _len; _i++) {
              item = buffer[_i];
              item.scope.$destroy();
              item.element.remove();
            }
            viewport.unbind('resize', resizeAndScrollHandler);
            viewport.unbind('scroll', resizeAndScrollHandler);
            return viewport.unbind('mousewheel', wheelHandler);
          });
          adapter = {};
          adapter.isLoading = false;
          applyUpdate = function(wrapper, newItems) {
            var i, inserted, item, ndx, newItem, oldItemNdx, _i, _j, _k, _len, _len1, _len2;
            inserted = [];
            if (angular.isArray(newItems)) {
              if (newItems.length) {
                if (newItems.length === 1 && newItems[0] === wrapper.scope[itemName]) {
                  return inserted;
                } else {
                  ndx = wrapper.scope.$index;
                  if (ndx > first) {
                    oldItemNdx = ndx - first;
                  } else {
                    oldItemNdx = 1;
                  }
                  for (i = _i = 0, _len = newItems.length; _i < _len; i = ++_i) {
                    newItem = newItems[i];
                    inserted.push(insert(ndx + i, newItem));
                  }
                  removeFromBuffer(oldItemNdx, oldItemNdx + 1);
                  for (i = _j = 0, _len1 = buffer.length; _j < _len1; i = ++_j) {
                    item = buffer[i];
                    item.scope.$index = first + i;
                  }
                }
              } else {
                removeFromBuffer(wrapper.scope.$index - first, wrapper.scope.$index - first + 1);
                next--;
                for (i = _k = 0, _len2 = buffer.length; _k < _len2; i = ++_k) {
                  item = buffer[i];
                  item.scope.$index = first + i;
                }
              }
            }
            return inserted;
          };
          adapter.applyUpdates = function(arg1, arg2) {
            var inserted, wrapper, _i, _len, _ref, _ref1;
            inserted = [];
            ridActual++;
            if (angular.isFunction(arg1)) {
              _ref = buffer.slice(0);
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                wrapper = _ref[_i];
                inserted.concat(inserted, applyUpdate(wrapper, arg1(wrapper.scope[itemName], wrapper.scope, wrapper.element)));
              }
            } else {
              if (arg1 % 1 === 0) {
                if ((0 <= (_ref1 = arg1 - first - 1) && _ref1 < buffer.length)) {
                  inserted = applyUpdate(buffer[arg1 - first], arg2);
                }
              } else {
                throw new Error('applyUpdates - ' + arg1 + ' is not a valid index or outside of range');
              }
            }
            return adjustBuffer(ridActual, inserted);
          };
          if ($attr.adapter) {
            adapterOnScope = getValueChain($scope, $attr.adapter);
            if (!adapterOnScope) {
              setValueChain($scope, $attr.adapter, {});
              adapterOnScope = getValueChain($scope, $attr.adapter);
            }
            angular.extend(adapterOnScope, adapter);
            adapter = adapterOnScope;
          }
          doUpdate = function(locator, newItem) {
            var wrapper, _fn, _i, _len, _ref;
            if (angular.isFunction(locator)) {
              _fn = function(wrapper) {
                return locator(wrapper.scope);
              };
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                wrapper = buffer[_i];
                _fn(wrapper);
              }
            } else {
              if ((0 <= (_ref = locator - first - 1) && _ref < buffer.length)) {
                buffer[locator - first - 1].scope[itemName] = newItem;
              }
            }
            return null;
          };
          doDelete = function(locator) {
            var i, item, temp, wrapper, _fn, _i, _j, _k, _len, _len1, _len2, _ref;
            if (angular.isFunction(locator)) {
              temp = [];
              for (_i = 0, _len = buffer.length; _i < _len; _i++) {
                item = buffer[_i];
                temp.unshift(item);
              }
              _fn = function(wrapper) {
                if (locator(wrapper.scope)) {
                  removeFromBuffer(temp.length - 1 - i, temp.length - i);
                  return next--;
                }
              };
              for (i = _j = 0, _len1 = temp.length; _j < _len1; i = ++_j) {
                wrapper = temp[i];
                _fn(wrapper);
              }
            } else {
              if ((0 <= (_ref = locator - first - 1) && _ref < buffer.length)) {
                removeFromBuffer(locator - first - 1, locator - first);
                next--;
              }
            }
            for (i = _k = 0, _len2 = buffer.length; _k < _len2; i = ++_k) {
              item = buffer[i];
              item.scope.$index = first + i;
            }
            return adjustBuffer();
          };
          doInsert = function(locator, item) {
            var i, inserted, _i, _len, _ref;
            inserted = [];
            if (angular.isFunction(locator)) {
              throw new Error('not implemented - Insert with locator function');
            } else {
              if ((0 <= (_ref = locator - first - 1) && _ref < buffer.length)) {
                inserted.push(insert(locator, item));
                next++;
              }
            }
            for (i = _i = 0, _len = buffer.length; _i < _len; i = ++_i) {
              item = buffer[i];
              item.scope.$index = first + i;
            }
            return adjustBuffer(null, inserted);
          };
          eventListener.$on('insert.item', function(event, locator, item) {
            return doInsert(locator, item);
          });
          eventListener.$on('update.items', function(event, locator, newItem) {
            return doUpdate(locator, newItem);
          });
          return eventListener.$on('delete.items', function(event, locator) {
            return doDelete(locator);
          });
        };
      }
    };
  }
]);

/*
//# sourceURL=src/scripts/ui-scroll.js
*/


/**
 * Adds a 'ui-scrollfix' class to the element when the page scrolls past it's position.
 * @param [offset] {int} optional Y-offset to override the detected offset.
 *   Takes 300 (absolute) or -300 or +300 (relative to detected)
 */
angular.module('ui.scrollfix',[]).directive('uiScrollfix', ['$window', function ($window) {
  'use strict';

  function getWindowScrollTop() {
    if (angular.isDefined($window.pageYOffset)) {
      return $window.pageYOffset;
    } else {
      var iebody = (document.compatMode && document.compatMode !== 'BackCompat') ? document.documentElement : document.body;
      return iebody.scrollTop;
    }
  }
  return {
    require: '^?uiScrollfixTarget',
    link: function (scope, elm, attrs, uiScrollfixTarget) {
      var absolute = true,
          shift = 0,
          fixLimit,
          $target = uiScrollfixTarget && uiScrollfixTarget.$element || angular.element($window);

      if (!attrs.uiScrollfix) {
          absolute = false;
      } else if (typeof(attrs.uiScrollfix) === 'string') {
        // charAt is generally faster than indexOf: http://jsperf.com/indexof-vs-charat
        if (attrs.uiScrollfix.charAt(0) === '-') {
          absolute = false;
          shift = - parseFloat(attrs.uiScrollfix.substr(1));
        } else if (attrs.uiScrollfix.charAt(0) === '+') {
          absolute = false;
          shift = parseFloat(attrs.uiScrollfix.substr(1));
        }
      }

      fixLimit = absolute ? attrs.uiScrollfix : elm[0].offsetTop + shift;

      function onScroll() {

        var limit = absolute ? attrs.uiScrollfix : elm[0].offsetTop + shift;

        // if pageYOffset is defined use it, otherwise use other crap for IE
        var offset = uiScrollfixTarget ? $target[0].scrollTop : getWindowScrollTop();
        if (!elm.hasClass('ui-scrollfix') && offset > limit) {
          elm.addClass('ui-scrollfix');
          fixLimit = limit;
        } else if (elm.hasClass('ui-scrollfix') && offset < fixLimit) {
          elm.removeClass('ui-scrollfix');
        }
      }

      $target.on('scroll', onScroll);

      // Unbind scroll event handler when directive is removed
      scope.$on('$destroy', function() {
        $target.off('scroll', onScroll);
      });
    }
  };
}]).directive('uiScrollfixTarget', [function () {
  'use strict';
  return {
    controller: ['$element', function($element) {
      this.$element = $element;
    }]
  };
}]);

/**
 * uiShow Directive
 *
 * Adds a 'ui-show' class to the element instead of display:block
 * Created to allow tighter control  of CSS without bulkier directives
 *
 * @param expression {boolean} evaluated expression to determine if the class should be added
 */
angular.module('ui.showhide',[])
.directive('uiShow', [function () {
  'use strict';

  return function (scope, elm, attrs) {
    scope.$watch(attrs.uiShow, function (newVal) {
      if (newVal) {
        elm.addClass('ui-show');
      } else {
        elm.removeClass('ui-show');
      }
    });
  };
}])

/**
 * uiHide Directive
 *
 * Adds a 'ui-hide' class to the element instead of display:block
 * Created to allow tighter control  of CSS without bulkier directives
 *
 * @param expression {boolean} evaluated expression to determine if the class should be added
 */
.directive('uiHide', [function () {
  'use strict';

  return function (scope, elm, attrs) {
    scope.$watch(attrs.uiHide, function (newVal) {
      if (newVal) {
        elm.addClass('ui-hide');
      } else {
        elm.removeClass('ui-hide');
      }
    });
  };
}])

/**
 * uiToggle Directive
 *
 * Adds a class 'ui-show' if true, and a 'ui-hide' if false to the element instead of display:block/display:none
 * Created to allow tighter control  of CSS without bulkier directives. This also allows you to override the
 * default visibility of the element using either class.
 *
 * @param expression {boolean} evaluated expression to determine if the class should be added
 */
.directive('uiToggle', [function () {
  'use strict';

  return function (scope, elm, attrs) {
    scope.$watch(attrs.uiToggle, function (newVal) {
      if (newVal) {
        elm.removeClass('ui-hide').addClass('ui-show');
      } else {
        elm.removeClass('ui-show').addClass('ui-hide');
      }
    });
  };
}]);

/**
 * Filters out all duplicate items from an array by checking the specified key
 * @param [key] {string} the name of the attribute of each object to compare for uniqueness
 if the key is empty, the entire object will be compared
 if the key === false then no filtering will be performed
 * @return {array}
 */
angular.module('ui.unique',[]).filter('unique', ['$parse', function ($parse) {
  'use strict';

  return function (items, filterOn) {

    if (filterOn === false) {
      return items;
    }

    if ((filterOn || angular.isUndefined(filterOn)) && angular.isArray(items)) {
      var newItems = [],
        get = angular.isString(filterOn) ? $parse(filterOn) : function (item) { return item; };

      var extractValueToCompare = function (item) {
        return angular.isObject(item) ? get(item) : item;
      };

      angular.forEach(items, function (item) {
        var isDuplicate = false;

        for (var i = 0; i < newItems.length; i++) {
          if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {
            isDuplicate = true;
            break;
          }
        }
        if (!isDuplicate) {
          newItems.push(item);
        }

      });
      items = newItems;
    }
    return items;
  };
}]);

/*
 * Author: Remy Alain Ticona Carbajal http://realtica.org
 * Description: The main objective of ng-uploader is to have a user control,
 * clean, simple, customizable, and above all very easy to implement.
 * Licence: MIT
 */

angular.module('ui.uploader', []).service('uiUploader', uiUploader);

uiUploader.$inject = ['$log'];

function uiUploader($log) {
    'use strict';

    /*jshint validthis: true */
    var self = this;
    self.files = [];
    self.options = {};
    self.activeUploads = 0;
    $log.info('uiUploader loaded');
    
    function addFiles(files) {
        for (var i = 0; i < files.length; i++) {
            self.files.push(files[i]);
        }
    }

    function getFiles() {
        return self.files;
    }

    function startUpload(options) {
        self.options = options;
        for (var i = 0; i < self.files.length; i++) {
            if (self.activeUploads == self.options.concurrency) {
                break;
            }
            if (self.files[i].active)
                continue;
            ajaxUpload(self.files[i], self.options.url);
        }
    }
    
    function removeFile(file){
        self.files.splice(self.files.indexOf(file),1);
    }
    
    function removeAll(){
        self.files.splice(0,self.files.length);
    }
    
    return {
        addFiles: addFiles,
        getFiles: getFiles,
        files: self.files,
        startUpload: startUpload,
        removeFile: removeFile,
        removeAll:removeAll
    };
    
    function getHumanSize(bytes) {
        var sizes = ['n/a', 'bytes', 'KiB', 'MiB', 'GiB', 'TB', 'PB', 'EiB', 'ZiB', 'YiB'];
        var i = +Math.floor(Math.log(bytes) / Math.log(1024));
        return (bytes / Math.pow(1024, i)).toFixed(i ? 1 : 0) + ' ' + sizes[isNaN(bytes) ? 0 : i + 1];
    }

    function ajaxUpload(file, url) {
        var xhr, formData, prop, data = '',
            key = '' || 'file';
        self.activeUploads += 1;
        file.active = true;
        xhr = new window.XMLHttpRequest();
        formData = new window.FormData();
        xhr.open('POST', url);

        // Triggered when upload starts:
        xhr.upload.onloadstart = function() {};

        // Triggered many times during upload:
        xhr.upload.onprogress = function(event) {
            if (!event.lengthComputable) {
                return;
            }
            // Update file size because it might be bigger than reported by
            // the fileSize:
            //$log.info("progres..");
            //console.info(event.loaded);
            file.loaded = event.loaded;
            file.humanSize = getHumanSize(event.loaded);
            self.options.onProgress(file);
        };

        // Triggered when upload is completed:
        xhr.onload = function() {
            self.activeUploads -= 1;
            startUpload(self.options);
            self.options.onCompleted(file, xhr.responseText);
        };

        // Triggered when upload fails:
        xhr.onerror = function() {};

        // Append additional data if provided:
        if (data) {
            for (prop in data) {
                if (data.hasOwnProperty(prop)) {
                    formData.append(prop, data[prop]);
                }
            }
        }

        // Append file data:
        formData.append(key, file, file.name);

        // Initiate upload:
        xhr.send(formData);

        return xhr;
    }

}

/**
 * General-purpose validator for ngModel.
 * angular.js comes with several built-in validation mechanism for input fields (ngRequired, ngPattern etc.) but using
 * an arbitrary validation function requires creation of a custom formatters and / or parsers.
 * The ui-validate directive makes it easy to use any function(s) defined in scope as a validator function(s).
 * A validator function will trigger validation on both model and input changes.
 *
 * @example <input ui-validate=" 'myValidatorFunction($value)' ">
 * @example <input ui-validate="{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }">
 * @example <input ui-validate="{ foo : '$value > anotherModel' }" ui-validate-watch=" 'anotherModel' ">
 * @example <input ui-validate="{ foo : '$value > anotherModel', bar : 'validateFoo($value)' }" ui-validate-watch=" { foo : 'anotherModel' } ">
 *
 * @param ui-validate {string|object literal} If strings is passed it should be a scope's function to be used as a validator.
 * If an object literal is passed a key denotes a validation error key while a value should be a validator function.
 * In both cases validator function should take a value to validate as its argument and should return true/false indicating a validation result.
 */
angular.module('ui.validate',[]).directive('uiValidate', function () {
  'use strict';

  return {
    restrict: 'A',
    require: 'ngModel',
    link: function (scope, elm, attrs, ctrl) {
      var validateFn, validators = {},
          validateExpr = scope.$eval(attrs.uiValidate);

      if (!validateExpr){ return;}

      if (angular.isString(validateExpr)) {
        validateExpr = { validator: validateExpr };
      }

      angular.forEach(validateExpr, function (exprssn, key) {
        validateFn = function (valueToValidate) {
          var expression = scope.$eval(exprssn, { '$value' : valueToValidate });
          if (angular.isObject(expression) && angular.isFunction(expression.then)) {
            // expression is a promise
            expression.then(function(){
              ctrl.$setValidity(key, true);
            }, function(){
              ctrl.$setValidity(key, false);
            });
            return valueToValidate;
          } else if (expression) {
            // expression is true
            ctrl.$setValidity(key, true);
            return valueToValidate;
          } else {
            // expression is false
            ctrl.$setValidity(key, false);
            return valueToValidate;
          }
        };
        validators[key] = validateFn;
        ctrl.$formatters.push(validateFn);
        ctrl.$parsers.push(validateFn);
      });

      function apply_watch(watch)
      {
          //string - update all validators on expression change
          if (angular.isString(watch))
          {
              scope.$watch(watch, function(){
                  angular.forEach(validators, function(validatorFn){
                      validatorFn(ctrl.$modelValue);
                  });
              });
              return;
          }

          //array - update all validators on change of any expression
          if (angular.isArray(watch))
          {
              angular.forEach(watch, function(expression){
                  scope.$watch(expression, function()
                  {
                      angular.forEach(validators, function(validatorFn){
                          validatorFn(ctrl.$modelValue);
                      });
                  });
              });
              return;
          }

          //object - update appropriate validator
          if (angular.isObject(watch))
          {
              angular.forEach(watch, function(expression, validatorKey)
              {
                  //value is string - look after one expression
                  if (angular.isString(expression))
                  {
                      scope.$watch(expression, function(){
                          validators[validatorKey](ctrl.$modelValue);
                      });
                  }

                  //value is array - look after all expressions in array
                  if (angular.isArray(expression))
                  {
                      angular.forEach(expression, function(intExpression)
                      {
                          scope.$watch(intExpression, function(){
                              validators[validatorKey](ctrl.$modelValue);
                          });
                      });
                  }
              });
          }
      }
      // Support for ui-validate-watch
      if (attrs.uiValidateWatch){
          apply_watch( scope.$eval(attrs.uiValidateWatch) );
      }
    }
  };
});

angular.module('ui.utils',  [
  'ui.event',
  'ui.format',
  'ui.highlight',
  'ui.include',
  'ui.indeterminate',
  'ui.inflector',
  'ui.jq',
  'ui.keypress',
  'ui.mask',
  'ui.reset',
  'ui.route',
  'ui.scrollfix',
  'ui.scroll',
  'ui.scroll.jqlite',
  'ui.showhide',
  'ui.unique',
  'ui.validate'
]);

/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 0.13.0 - 2015-05-02
 * License: MIT
 */
angular.module("ui.bootstrap", ["ui.bootstrap.tpls", "ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.bindHtml","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.transition","ui.bootstrap.typeahead"]);
angular.module("ui.bootstrap.tpls", ["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-popup.html","template/tooltip/tooltip-html-unsafe-popup.html","template/tooltip/tooltip-popup.html","template/tooltip/tooltip-template-popup.html","template/popover/popover-template.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]);
angular.module('ui.bootstrap.collapse', [])

  .directive('collapse', ['$animate', function ($animate) {

    return {
      link: function (scope, element, attrs) {
        function expand() {
          element.removeClass('collapse').addClass('collapsing');
          $animate.addClass(element, 'in', {
            to: { height: element[0].scrollHeight + 'px' }
          }).then(expandDone);
        }

        function expandDone() {
          element.removeClass('collapsing');
          element.css({height: 'auto'});
        }

        function collapse() {
          element
            // IMPORTANT: The height must be set before adding "collapsing" class.
            // Otherwise, the browser attempts to animate from height 0 (in
            // collapsing class) to the given height here.
            .css({height: element[0].scrollHeight + 'px'})
            // initially all panel collapse have the collapse class, this removal
            // prevents the animation from jumping to collapsed state
            .removeClass('collapse')
            .addClass('collapsing');

          $animate.removeClass(element, 'in', {
            to: {height: '0'}
          }).then(collapseDone);
        }

        function collapseDone() {
          element.css({height: '0'}); // Required so that collapse works when animation is disabled
          element.removeClass('collapsing');
          element.addClass('collapse');
        }

        scope.$watch(attrs.collapse, function (shouldCollapse) {
          if (shouldCollapse) {
            collapse();
          } else {
            expand();
          }
        });
      }
    };
  }]);

angular.module('ui.bootstrap.accordion', ['ui.bootstrap.collapse'])

.constant('accordionConfig', {
  closeOthers: true
})

.controller('AccordionController', ['$scope', '$attrs', 'accordionConfig', function ($scope, $attrs, accordionConfig) {

  // This array keeps track of the accordion groups
  this.groups = [];

  // Ensure that all the groups in this accordion are closed, unless close-others explicitly says not to
  this.closeOthers = function(openGroup) {
    var closeOthers = angular.isDefined($attrs.closeOthers) ? $scope.$eval($attrs.closeOthers) : accordionConfig.closeOthers;
    if ( closeOthers ) {
      angular.forEach(this.groups, function (group) {
        if ( group !== openGroup ) {
          group.isOpen = false;
        }
      });
    }
  };

  // This is called from the accordion-group directive to add itself to the accordion
  this.addGroup = function(groupScope) {
    var that = this;
    this.groups.push(groupScope);

    groupScope.$on('$destroy', function (event) {
      that.removeGroup(groupScope);
    });
  };

  // This is called from the accordion-group directive when to remove itself
  this.removeGroup = function(group) {
    var index = this.groups.indexOf(group);
    if ( index !== -1 ) {
      this.groups.splice(index, 1);
    }
  };

}])

// The accordion directive simply sets up the directive controller
// and adds an accordion CSS class to itself element.
.directive('accordion', function () {
  return {
    restrict:'EA',
    controller:'AccordionController',
    transclude: true,
    replace: false,
    templateUrl: 'template/accordion/accordion.html'
  };
})

// The accordion-group directive indicates a block of html that will expand and collapse in an accordion
.directive('accordionGroup', function() {
  return {
    require:'^accordion',         // We need this directive to be inside an accordion
    restrict:'EA',
    transclude:true,              // It transcludes the contents of the directive into the template
    replace: true,                // The element containing the directive will be replaced with the template
    templateUrl:'template/accordion/accordion-group.html',
    scope: {
      heading: '@',               // Interpolate the heading attribute onto this scope
      isOpen: '=?',
      isDisabled: '=?'
    },
    controller: function() {
      this.setHeading = function(element) {
        this.heading = element;
      };
    },
    link: function(scope, element, attrs, accordionCtrl) {
      accordionCtrl.addGroup(scope);

      scope.$watch('isOpen', function(value) {
        if ( value ) {
          accordionCtrl.closeOthers(scope);
        }
      });

      scope.toggleOpen = function() {
        if ( !scope.isDisabled ) {
          scope.isOpen = !scope.isOpen;
        }
      };
    }
  };
})

// Use accordion-heading below an accordion-group to provide a heading containing HTML
// <accordion-group>
//   <accordion-heading>Heading containing HTML - <img src="..."></accordion-heading>
// </accordion-group>
.directive('accordionHeading', function() {
  return {
    restrict: 'EA',
    transclude: true,   // Grab the contents to be used as the heading
    template: '',       // In effect remove this element!
    replace: true,
    require: '^accordionGroup',
    link: function(scope, element, attr, accordionGroupCtrl, transclude) {
      // Pass the heading to the accordion-group controller
      // so that it can be transcluded into the right place in the template
      // [The second parameter to transclude causes the elements to be cloned so that they work in ng-repeat]
      accordionGroupCtrl.setHeading(transclude(scope, angular.noop));
    }
  };
})

// Use in the accordion-group template to indicate where you want the heading to be transcluded
// You must provide the property on the accordion-group controller that will hold the transcluded element
// <div class="accordion-group">
//   <div class="accordion-heading" ><a ... accordion-transclude="heading">...</a></div>
//   ...
// </div>
.directive('accordionTransclude', function() {
  return {
    require: '^accordionGroup',
    link: function(scope, element, attr, controller) {
      scope.$watch(function() { return controller[attr.accordionTransclude]; }, function(heading) {
        if ( heading ) {
          element.html('');
          element.append(heading);
        }
      });
    }
  };
})

;

angular.module('ui.bootstrap.alert', [])

.controller('AlertController', ['$scope', '$attrs', function ($scope, $attrs) {
  $scope.closeable = 'close' in $attrs;
  this.close = $scope.close;
}])

.directive('alert', function () {
  return {
    restrict:'EA',
    controller:'AlertController',
    templateUrl:'template/alert/alert.html',
    transclude:true,
    replace:true,
    scope: {
      type: '@',
      close: '&'
    }
  };
})

.directive('dismissOnTimeout', ['$timeout', function($timeout) {
  return {
    require: 'alert',
    link: function(scope, element, attrs, alertCtrl) {
      $timeout(function(){
        alertCtrl.close();
      }, parseInt(attrs.dismissOnTimeout, 10));
    }
  };
}]);

angular.module('ui.bootstrap.bindHtml', [])

  .directive('bindHtmlUnsafe', function () {
    return function (scope, element, attr) {
      element.addClass('ng-binding').data('$binding', attr.bindHtmlUnsafe);
      scope.$watch(attr.bindHtmlUnsafe, function bindHtmlUnsafeWatchAction(value) {
        element.html(value || '');
      });
    };
  });
angular.module('ui.bootstrap.buttons', [])

.constant('buttonConfig', {
  activeClass: 'active',
  toggleEvent: 'click'
})

.controller('ButtonsController', ['buttonConfig', function(buttonConfig) {
  this.activeClass = buttonConfig.activeClass || 'active';
  this.toggleEvent = buttonConfig.toggleEvent || 'click';
}])

.directive('btnRadio', function () {
  return {
    require: ['btnRadio', 'ngModel'],
    controller: 'ButtonsController',
    link: function (scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, scope.$eval(attrs.btnRadio)));
      };

      //ui->model
      element.bind(buttonsCtrl.toggleEvent, function () {
        var isActive = element.hasClass(buttonsCtrl.activeClass);

        if (!isActive || angular.isDefined(attrs.uncheckable)) {
          scope.$apply(function () {
            ngModelCtrl.$setViewValue(isActive ? null : scope.$eval(attrs.btnRadio));
            ngModelCtrl.$render();
          });
        }
      });
    }
  };
})

.directive('btnCheckbox', function () {
  return {
    require: ['btnCheckbox', 'ngModel'],
    controller: 'ButtonsController',
    link: function (scope, element, attrs, ctrls) {
      var buttonsCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      function getTrueValue() {
        return getCheckboxValue(attrs.btnCheckboxTrue, true);
      }

      function getFalseValue() {
        return getCheckboxValue(attrs.btnCheckboxFalse, false);
      }

      function getCheckboxValue(attributeValue, defaultValue) {
        var val = scope.$eval(attributeValue);
        return angular.isDefined(val) ? val : defaultValue;
      }

      //model -> UI
      ngModelCtrl.$render = function () {
        element.toggleClass(buttonsCtrl.activeClass, angular.equals(ngModelCtrl.$modelValue, getTrueValue()));
      };

      //ui->model
      element.bind(buttonsCtrl.toggleEvent, function () {
        scope.$apply(function () {
          ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass) ? getFalseValue() : getTrueValue());
          ngModelCtrl.$render();
        });
      });
    }
  };
});

/**
* @ngdoc overview
* @name ui.bootstrap.carousel
*
* @description
* AngularJS version of an image carousel.
*
*/
angular.module('ui.bootstrap.carousel', [])
.controller('CarouselController', ['$scope', '$interval', '$animate', function ($scope, $interval, $animate) {
  var self = this,
    slides = self.slides = $scope.slides = [],
    currentIndex = -1,
    currentInterval, isPlaying;
  self.currentSlide = null;

  var destroyed = false;
  /* direction: "prev" or "next" */
  self.select = $scope.select = function(nextSlide, direction) {
    var nextIndex = self.indexOfSlide(nextSlide);
    //Decide direction if it's not given
    if (direction === undefined) {
      direction = nextIndex > self.getCurrentIndex() ? 'next' : 'prev';
    }
    if (nextSlide && nextSlide !== self.currentSlide) {
      goNext();
    }
    function goNext() {
      // Scope has been destroyed, stop here.
      if (destroyed) { return; }

      angular.extend(nextSlide, {direction: direction, active: true});
      angular.extend(self.currentSlide || {}, {direction: direction, active: false});
      if ($animate.enabled() && !$scope.noTransition && nextSlide.$element) {
        $scope.$currentTransition = true;
        nextSlide.$element.one('$animate:close', function closeFn() {
          $scope.$currentTransition = null;
        });
      }

      self.currentSlide = nextSlide;
      currentIndex = nextIndex;
      //every time you change slides, reset the timer
      restartTimer();
    }
  };
  $scope.$on('$destroy', function () {
    destroyed = true;
  });

  function getSlideByIndex(index) {
    if (angular.isUndefined(slides[index].index)) {
      return slides[index];
    }
    var i, len = slides.length;
    for (i = 0; i < slides.length; ++i) {
      if (slides[i].index == index) {
        return slides[i];
      }
    }
  }

  self.getCurrentIndex = function() {
    if (self.currentSlide && angular.isDefined(self.currentSlide.index)) {
      return +self.currentSlide.index;
    }
    return currentIndex;
  };

  /* Allow outside people to call indexOf on slides array */
  self.indexOfSlide = function(slide) {
    return angular.isDefined(slide.index) ? +slide.index : slides.indexOf(slide);
  };

  $scope.next = function() {
    var newIndex = (self.getCurrentIndex() + 1) % slides.length;

    //Prevent this user-triggered transition from occurring if there is already one in progress
    if (!$scope.$currentTransition) {
      return self.select(getSlideByIndex(newIndex), 'next');
    }
  };

  $scope.prev = function() {
    var newIndex = self.getCurrentIndex() - 1 < 0 ? slides.length - 1 : self.getCurrentIndex() - 1;

    //Prevent this user-triggered transition from occurring if there is already one in progress
    if (!$scope.$currentTransition) {
      return self.select(getSlideByIndex(newIndex), 'prev');
    }
  };

  $scope.isActive = function(slide) {
     return self.currentSlide === slide;
  };

  $scope.$watch('interval', restartTimer);
  $scope.$on('$destroy', resetTimer);

  function restartTimer() {
    resetTimer();
    var interval = +$scope.interval;
    if (!isNaN(interval) && interval > 0) {
      currentInterval = $interval(timerFn, interval);
    }
  }

  function resetTimer() {
    if (currentInterval) {
      $interval.cancel(currentInterval);
      currentInterval = null;
    }
  }

  function timerFn() {
    var interval = +$scope.interval;
    if (isPlaying && !isNaN(interval) && interval > 0) {
      $scope.next();
    } else {
      $scope.pause();
    }
  }

  $scope.play = function() {
    if (!isPlaying) {
      isPlaying = true;
      restartTimer();
    }
  };
  $scope.pause = function() {
    if (!$scope.noPause) {
      isPlaying = false;
      resetTimer();
    }
  };

  self.addSlide = function(slide, element) {
    slide.$element = element;
    slides.push(slide);
    //if this is the first slide or the slide is set to active, select it
    if(slides.length === 1 || slide.active) {
      self.select(slides[slides.length-1]);
      if (slides.length == 1) {
        $scope.play();
      }
    } else {
      slide.active = false;
    }
  };

  self.removeSlide = function(slide) {
    if (angular.isDefined(slide.index)) {
      slides.sort(function(a, b) {
        return +a.index > +b.index;
      });
    }
    //get the index of the slide inside the carousel
    var index = slides.indexOf(slide);
    slides.splice(index, 1);
    if (slides.length > 0 && slide.active) {
      if (index >= slides.length) {
        self.select(slides[index-1]);
      } else {
        self.select(slides[index]);
      }
    } else if (currentIndex > index) {
      currentIndex--;
    }
  };

}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:carousel
 * @restrict EA
 *
 * @description
 * Carousel is the outer container for a set of image 'slides' to showcase.
 *
 * @param {number=} interval The time, in milliseconds, that it will take the carousel to go to the next slide.
 * @param {boolean=} noTransition Whether to disable transitions on the carousel.
 * @param {boolean=} noPause Whether to disable pausing on the carousel (by default, the carousel interval pauses on hover).
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <carousel>
      <slide>
        <img src="http://placekitten.com/150/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>Beautiful!</p>
        </div>
      </slide>
      <slide>
        <img src="http://placekitten.com/100/150" style="margin:auto;">
        <div class="carousel-caption">
          <p>D'aww!</p>
        </div>
      </slide>
    </carousel>
  </file>
  <file name="demo.css">
    .carousel-indicators {
      top: auto;
      bottom: 15px;
    }
  </file>
</example>
 */
.directive('carousel', [function() {
  return {
    restrict: 'EA',
    transclude: true,
    replace: true,
    controller: 'CarouselController',
    require: 'carousel',
    templateUrl: 'template/carousel/carousel.html',
    scope: {
      interval: '=',
      noTransition: '=',
      noPause: '='
    }
  };
}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.carousel.directive:slide
 * @restrict EA
 *
 * @description
 * Creates a slide inside a {@link ui.bootstrap.carousel.directive:carousel carousel}.  Must be placed as a child of a carousel element.
 *
 * @param {boolean=} active Model binding, whether or not this slide is currently active.
 * @param {number=} index The index of the slide. The slides will be sorted by this parameter.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
<div ng-controller="CarouselDemoCtrl">
  <carousel>
    <slide ng-repeat="slide in slides" active="slide.active" index="$index">
      <img ng-src="{{slide.image}}" style="margin:auto;">
      <div class="carousel-caption">
        <h4>Slide {{$index}}</h4>
        <p>{{slide.text}}</p>
      </div>
    </slide>
  </carousel>
  Interval, in milliseconds: <input type="number" ng-model="myInterval">
  <br />Enter a negative number to stop the interval.
</div>
  </file>
  <file name="script.js">
function CarouselDemoCtrl($scope) {
  $scope.myInterval = 5000;
}
  </file>
  <file name="demo.css">
    .carousel-indicators {
      top: auto;
      bottom: 15px;
    }
  </file>
</example>
*/

.directive('slide', function() {
  return {
    require: '^carousel',
    restrict: 'EA',
    transclude: true,
    replace: true,
    templateUrl: 'template/carousel/slide.html',
    scope: {
      active: '=?',
      index: '=?'
    },
    link: function (scope, element, attrs, carouselCtrl) {
      carouselCtrl.addSlide(scope, element);
      //when the scope is destroyed then remove the slide from the current slides array
      scope.$on('$destroy', function() {
        carouselCtrl.removeSlide(scope);
      });

      scope.$watch('active', function(active) {
        if (active) {
          carouselCtrl.select(scope);
        }
      });
    }
  };
})

.animation('.item', [
         '$animate',
function ($animate) {
  return {
    beforeAddClass: function (element, className, done) {
      // Due to transclusion, noTransition property is on parent's scope
      if (className == 'active' && element.parent() &&
          !element.parent().scope().noTransition) {
        var stopped = false;
        var direction = element.isolateScope().direction;
        var directionClass = direction == 'next' ? 'left' : 'right';
        element.addClass(direction);
        $animate.addClass(element, directionClass).then(function () {
          if (!stopped) {
            element.removeClass(directionClass + ' ' + direction);
          }
          done();
        });

        return function () {
          stopped = true;
        };
      }
      done();
    },
    beforeRemoveClass: function (element, className, done) {
      // Due to transclusion, noTransition property is on parent's scope
      if (className == 'active' && element.parent() &&
          !element.parent().scope().noTransition) {
        var stopped = false;
        var direction = element.isolateScope().direction;
        var directionClass = direction == 'next' ? 'left' : 'right';
        $animate.addClass(element, directionClass).then(function () {
          if (!stopped) {
            element.removeClass(directionClass);
          }
          done();
        });
        return function () {
          stopped = true;
        };
      }
      done();
    }
  };

}])


;

angular.module('ui.bootstrap.dateparser', [])

.service('dateParser', ['$locale', 'orderByFilter', function($locale, orderByFilter) {
  // Pulled from https://github.com/mbostock/d3/blob/master/src/format/requote.js
  var SPECIAL_CHARACTERS_REGEXP = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

  this.parsers = {};

  var formatCodeToRegex = {
    'yyyy': {
      regex: '\\d{4}',
      apply: function(value) { this.year = +value; }
    },
    'yy': {
      regex: '\\d{2}',
      apply: function(value) { this.year = +value + 2000; }
    },
    'y': {
      regex: '\\d{1,4}',
      apply: function(value) { this.year = +value; }
    },
    'MMMM': {
      regex: $locale.DATETIME_FORMATS.MONTH.join('|'),
      apply: function(value) { this.month = $locale.DATETIME_FORMATS.MONTH.indexOf(value); }
    },
    'MMM': {
      regex: $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),
      apply: function(value) { this.month = $locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value); }
    },
    'MM': {
      regex: '0[1-9]|1[0-2]',
      apply: function(value) { this.month = value - 1; }
    },
    'M': {
      regex: '[1-9]|1[0-2]',
      apply: function(value) { this.month = value - 1; }
    },
    'dd': {
      regex: '[0-2][0-9]{1}|3[0-1]{1}',
      apply: function(value) { this.date = +value; }
    },
    'd': {
      regex: '[1-2]?[0-9]{1}|3[0-1]{1}',
      apply: function(value) { this.date = +value; }
    },
    'EEEE': {
      regex: $locale.DATETIME_FORMATS.DAY.join('|')
    },
    'EEE': {
      regex: $locale.DATETIME_FORMATS.SHORTDAY.join('|')
    },
    'HH': {
      regex: '(?:0|1)[0-9]|2[0-3]',
      apply: function(value) { this.hours = +value; }
    },
    'H': {
      regex: '1?[0-9]|2[0-3]',
      apply: function(value) { this.hours = +value; }
    },
    'mm': {
      regex: '[0-5][0-9]',
      apply: function(value) { this.minutes = +value; }
    },
    'm': {
      regex: '[0-9]|[1-5][0-9]',
      apply: function(value) { this.minutes = +value; }
    },
    'sss': {
      regex: '[0-9][0-9][0-9]',
      apply: function(value) { this.milliseconds = +value; }
    },
    'ss': {
      regex: '[0-5][0-9]',
      apply: function(value) { this.seconds = +value; }
    },
    's': {
      regex: '[0-9]|[1-5][0-9]',
      apply: function(value) { this.seconds = +value; }
    }
  };

  function createParser(format) {
    var map = [], regex = format.split('');

    angular.forEach(formatCodeToRegex, function(data, code) {
      var index = format.indexOf(code);

      if (index > -1) {
        format = format.split('');

        regex[index] = '(' + data.regex + ')';
        format[index] = '$'; // Custom symbol to define consumed part of format
        for (var i = index + 1, n = index + code.length; i < n; i++) {
          regex[i] = '';
          format[i] = '$';
        }
        format = format.join('');

        map.push({ index: index, apply: data.apply });
      }
    });

    return {
      regex: new RegExp('^' + regex.join('') + '$'),
      map: orderByFilter(map, 'index')
    };
  }

  this.parse = function(input, format, baseDate) {
    if ( !angular.isString(input) || !format ) {
      return input;
    }

    format = $locale.DATETIME_FORMATS[format] || format;
    format = format.replace(SPECIAL_CHARACTERS_REGEXP, '\\$&');

    if ( !this.parsers[format] ) {
      this.parsers[format] = createParser(format);
    }

    var parser = this.parsers[format],
        regex = parser.regex,
        map = parser.map,
        results = input.match(regex);

    if ( results && results.length ) {
      var fields, dt;
      if (baseDate) {
        fields = {
          year: baseDate.getFullYear(),
          month: baseDate.getMonth(),
          date: baseDate.getDate(),
          hours: baseDate.getHours(),
          minutes: baseDate.getMinutes(),
          seconds: baseDate.getSeconds(),
          milliseconds: baseDate.getMilliseconds()
        };
      } else {
        fields = { year: 1900, month: 0, date: 1, hours: 0, minutes: 0, seconds: 0, milliseconds: 0 };
      }

      for( var i = 1, n = results.length; i < n; i++ ) {
        var mapper = map[i-1];
        if ( mapper.apply ) {
          mapper.apply.call(fields, results[i]);
        }
      }

      if ( isValid(fields.year, fields.month, fields.date) ) {
        dt = new Date(fields.year, fields.month, fields.date, fields.hours, fields.minutes, fields.seconds,
          fields.milliseconds || 0);
      }

      return dt;
    }
  };

  // Check if date is valid for specific month (and year for February).
  // Month: 0 = Jan, 1 = Feb, etc
  function isValid(year, month, date) {
    if (date < 1) {
      return false;
    }

    if ( month === 1 && date > 28) {
        return date === 29 && ((year % 4 === 0 && year % 100 !== 0) || year % 400 === 0);
    }

    if ( month === 3 || month === 5 || month === 8 || month === 10) {
        return date < 31;
    }

    return true;
  }
}]);

angular.module('ui.bootstrap.position', [])

/**
 * A set of utility methods that can be use to retrieve position of DOM elements.
 * It is meant to be used where we need to absolute-position DOM elements in
 * relation to other, existing elements (this is the case for tooltips, popovers,
 * typeahead suggestions etc.).
 */
  .factory('$position', ['$document', '$window', function ($document, $window) {

    function getStyle(el, cssprop) {
      if (el.currentStyle) { //IE
        return el.currentStyle[cssprop];
      } else if ($window.getComputedStyle) {
        return $window.getComputedStyle(el)[cssprop];
      }
      // finally try and get inline style
      return el.style[cssprop];
    }

    /**
     * Checks if a given element is statically positioned
     * @param element - raw DOM element
     */
    function isStaticPositioned(element) {
      return (getStyle(element, 'position') || 'static' ) === 'static';
    }

    /**
     * returns the closest, non-statically positioned parentOffset of a given element
     * @param element
     */
    var parentOffsetEl = function (element) {
      var docDomEl = $document[0];
      var offsetParent = element.offsetParent || docDomEl;
      while (offsetParent && offsetParent !== docDomEl && isStaticPositioned(offsetParent) ) {
        offsetParent = offsetParent.offsetParent;
      }
      return offsetParent || docDomEl;
    };

    return {
      /**
       * Provides read-only equivalent of jQuery's position function:
       * http://api.jquery.com/position/
       */
      position: function (element) {
        var elBCR = this.offset(element);
        var offsetParentBCR = { top: 0, left: 0 };
        var offsetParentEl = parentOffsetEl(element[0]);
        if (offsetParentEl != $document[0]) {
          offsetParentBCR = this.offset(angular.element(offsetParentEl));
          offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
          offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }

        var boundingClientRect = element[0].getBoundingClientRect();
        return {
          width: boundingClientRect.width || element.prop('offsetWidth'),
          height: boundingClientRect.height || element.prop('offsetHeight'),
          top: elBCR.top - offsetParentBCR.top,
          left: elBCR.left - offsetParentBCR.left
        };
      },

      /**
       * Provides read-only equivalent of jQuery's offset function:
       * http://api.jquery.com/offset/
       */
      offset: function (element) {
        var boundingClientRect = element[0].getBoundingClientRect();
        return {
          width: boundingClientRect.width || element.prop('offsetWidth'),
          height: boundingClientRect.height || element.prop('offsetHeight'),
          top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
          left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
        };
      },

      /**
       * Provides coordinates for the targetEl in relation to hostEl
       */
      positionElements: function (hostEl, targetEl, positionStr, appendToBody) {

        var positionStrParts = positionStr.split('-');
        var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || 'center';

        var hostElPos,
          targetElWidth,
          targetElHeight,
          targetElPos;

        hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);

        targetElWidth = targetEl.prop('offsetWidth');
        targetElHeight = targetEl.prop('offsetHeight');

        var shiftWidth = {
          center: function () {
            return hostElPos.left + hostElPos.width / 2 - targetElWidth / 2;
          },
          left: function () {
            return hostElPos.left;
          },
          right: function () {
            return hostElPos.left + hostElPos.width;
          }
        };

        var shiftHeight = {
          center: function () {
            return hostElPos.top + hostElPos.height / 2 - targetElHeight / 2;
          },
          top: function () {
            return hostElPos.top;
          },
          bottom: function () {
            return hostElPos.top + hostElPos.height;
          }
        };

        switch (pos0) {
          case 'right':
            targetElPos = {
              top: shiftHeight[pos1](),
              left: shiftWidth[pos0]()
            };
            break;
          case 'left':
            targetElPos = {
              top: shiftHeight[pos1](),
              left: hostElPos.left - targetElWidth
            };
            break;
          case 'bottom':
            targetElPos = {
              top: shiftHeight[pos0](),
              left: shiftWidth[pos1]()
            };
            break;
          default:
            targetElPos = {
              top: hostElPos.top - targetElHeight,
              left: shiftWidth[pos1]()
            };
            break;
        }

        return targetElPos;
      }
    };
  }]);

angular.module('ui.bootstrap.datepicker', ['ui.bootstrap.dateparser', 'ui.bootstrap.position'])

.constant('datepickerConfig', {
  formatDay: 'dd',
  formatMonth: 'MMMM',
  formatYear: 'yyyy',
  formatDayHeader: 'EEE',
  formatDayTitle: 'MMMM yyyy',
  formatMonthTitle: 'yyyy',
  datepickerMode: 'day',
  minMode: 'day',
  maxMode: 'year',
  showWeeks: true,
  startingDay: 0,
  yearRange: 20,
  minDate: null,
  maxDate: null,
  shortcutPropagation: false
})

.controller('DatepickerController', ['$scope', '$attrs', '$parse', '$interpolate', '$timeout', '$log', 'dateFilter', 'datepickerConfig', function($scope, $attrs, $parse, $interpolate, $timeout, $log, dateFilter, datepickerConfig) {
  var self = this,
      ngModelCtrl = { $setViewValue: angular.noop }; // nullModelCtrl;

  // Modes chain
  this.modes = ['day', 'month', 'year'];

  // Configuration attributes
  angular.forEach(['formatDay', 'formatMonth', 'formatYear', 'formatDayHeader', 'formatDayTitle', 'formatMonthTitle',
                   'minMode', 'maxMode', 'showWeeks', 'startingDay', 'yearRange', 'shortcutPropagation'], function( key, index ) {
    self[key] = angular.isDefined($attrs[key]) ? (index < 8 ? $interpolate($attrs[key])($scope.$parent) : $scope.$parent.$eval($attrs[key])) : datepickerConfig[key];
  });

  // Watchable date attributes
  angular.forEach(['minDate', 'maxDate'], function( key ) {
    if ( $attrs[key] ) {
      $scope.$parent.$watch($parse($attrs[key]), function(value) {
        self[key] = value ? new Date(value) : null;
        self.refreshView();
      });
    } else {
      self[key] = datepickerConfig[key] ? new Date(datepickerConfig[key]) : null;
    }
  });

  $scope.datepickerMode = $scope.datepickerMode || datepickerConfig.datepickerMode;
  $scope.maxMode = self.maxMode;
  $scope.uniqueId = 'datepicker-' + $scope.$id + '-' + Math.floor(Math.random() * 10000);

  if(angular.isDefined($attrs.initDate)) {
    this.activeDate = $scope.$parent.$eval($attrs.initDate) || new Date();
    $scope.$parent.$watch($attrs.initDate, function(initDate){
      if(initDate && (ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue) || ngModelCtrl.$invalid)){
        self.activeDate = initDate;
        self.refreshView();
      }
    });
  } else {
    this.activeDate =  new Date();
  }

  $scope.isActive = function(dateObject) {
    if (self.compare(dateObject.date, self.activeDate) === 0) {
      $scope.activeDateId = dateObject.uid;
      return true;
    }
    return false;
  };

  this.init = function( ngModelCtrl_ ) {
    ngModelCtrl = ngModelCtrl_;

    ngModelCtrl.$render = function() {
      self.render();
    };
  };

  this.render = function() {
    if ( ngModelCtrl.$viewValue ) {
      var date = new Date( ngModelCtrl.$viewValue ),
          isValid = !isNaN(date);

      if ( isValid ) {
        this.activeDate = date;
      } else {
        $log.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
      }
      ngModelCtrl.$setValidity('date', isValid);
    }
    this.refreshView();
  };

  this.refreshView = function() {
    if ( this.element ) {
      this._refreshView();

      var date = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
      ngModelCtrl.$setValidity('date-disabled', !date || (this.element && !this.isDisabled(date)));
    }
  };

  this.createDateObject = function(date, format) {
    var model = ngModelCtrl.$viewValue ? new Date(ngModelCtrl.$viewValue) : null;
    return {
      date: date,
      label: dateFilter(date, format),
      selected: model && this.compare(date, model) === 0,
      disabled: this.isDisabled(date),
      current: this.compare(date, new Date()) === 0,
      customClass: this.customClass(date)
    };
  };

  this.isDisabled = function( date ) {
    return ((this.minDate && this.compare(date, this.minDate) < 0) || (this.maxDate && this.compare(date, this.maxDate) > 0) || ($attrs.dateDisabled && $scope.dateDisabled({date: date, mode: $scope.datepickerMode})));
  };

    this.customClass = function( date ) {
      return $scope.customClass({date: date, mode: $scope.datepickerMode});
    };

  // Split array into smaller arrays
  this.split = function(arr, size) {
    var arrays = [];
    while (arr.length > 0) {
      arrays.push(arr.splice(0, size));
    }
    return arrays;
  };

  $scope.select = function( date ) {
    if ( $scope.datepickerMode === self.minMode ) {
      var dt = ngModelCtrl.$viewValue ? new Date( ngModelCtrl.$viewValue ) : new Date(0, 0, 0, 0, 0, 0, 0);
      dt.setFullYear( date.getFullYear(), date.getMonth(), date.getDate() );
      ngModelCtrl.$setViewValue( dt );
      ngModelCtrl.$render();
    } else {
      self.activeDate = date;
      $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) - 1 ];
    }
  };

  $scope.move = function( direction ) {
    var year = self.activeDate.getFullYear() + direction * (self.step.years || 0),
        month = self.activeDate.getMonth() + direction * (self.step.months || 0);
    self.activeDate.setFullYear(year, month, 1);
    self.refreshView();
  };

  $scope.toggleMode = function( direction ) {
    direction = direction || 1;

    if (($scope.datepickerMode === self.maxMode && direction === 1) || ($scope.datepickerMode === self.minMode && direction === -1)) {
      return;
    }

    $scope.datepickerMode = self.modes[ self.modes.indexOf( $scope.datepickerMode ) + direction ];
  };

  // Key event mapper
  $scope.keys = { 13:'enter', 32:'space', 33:'pageup', 34:'pagedown', 35:'end', 36:'home', 37:'left', 38:'up', 39:'right', 40:'down' };

  var focusElement = function() {
    $timeout(function() {
      self.element[0].focus();
    }, 0 , false);
  };

  // Listen for focus requests from popup directive
  $scope.$on('datepicker.focus', focusElement);

  $scope.keydown = function( evt ) {
    var key = $scope.keys[evt.which];

    if ( !key || evt.shiftKey || evt.altKey ) {
      return;
    }

    evt.preventDefault();
    if(!self.shortcutPropagation){
        evt.stopPropagation();
    }

    if (key === 'enter' || key === 'space') {
      if ( self.isDisabled(self.activeDate)) {
        return; // do nothing
      }
      $scope.select(self.activeDate);
      focusElement();
    } else if (evt.ctrlKey && (key === 'up' || key === 'down')) {
      $scope.toggleMode(key === 'up' ? 1 : -1);
      focusElement();
    } else {
      self.handleKeyDown(key, evt);
      self.refreshView();
    }
  };
}])

.directive( 'datepicker', function () {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/datepicker.html',
    scope: {
      datepickerMode: '=?',
      dateDisabled: '&',
      customClass: '&',
      shortcutPropagation: '&?'
    },
    require: ['datepicker', '?^ngModel'],
    controller: 'DatepickerController',
    link: function(scope, element, attrs, ctrls) {
      var datepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if ( ngModelCtrl ) {
        datepickerCtrl.init( ngModelCtrl );
      }
    }
  };
})

.directive('daypicker', ['dateFilter', function (dateFilter) {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/day.html',
    require: '^datepicker',
    link: function(scope, element, attrs, ctrl) {
      scope.showWeeks = ctrl.showWeeks;

      ctrl.step = { months: 1 };
      ctrl.element = element;

      var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      function getDaysInMonth( year, month ) {
        return ((month === 1) && (year % 4 === 0) && ((year % 100 !== 0) || (year % 400 === 0))) ? 29 : DAYS_IN_MONTH[month];
      }

      function getDates(startDate, n) {
        var dates = new Array(n), current = new Date(startDate), i = 0;
        current.setHours(12); // Prevent repeated dates because of timezone bug
        while ( i < n ) {
          dates[i++] = new Date(current);
          current.setDate( current.getDate() + 1 );
        }
        return dates;
      }

      ctrl._refreshView = function() {
        var year = ctrl.activeDate.getFullYear(),
          month = ctrl.activeDate.getMonth(),
          firstDayOfMonth = new Date(year, month, 1),
          difference = ctrl.startingDay - firstDayOfMonth.getDay(),
          numDisplayedFromPreviousMonth = (difference > 0) ? 7 - difference : - difference,
          firstDate = new Date(firstDayOfMonth);

        if ( numDisplayedFromPreviousMonth > 0 ) {
          firstDate.setDate( - numDisplayedFromPreviousMonth + 1 );
        }

        // 42 is the number of days on a six-month calendar
        var days = getDates(firstDate, 42);
        for (var i = 0; i < 42; i ++) {
          days[i] = angular.extend(ctrl.createDateObject(days[i], ctrl.formatDay), {
            secondary: days[i].getMonth() !== month,
            uid: scope.uniqueId + '-' + i
          });
        }

        scope.labels = new Array(7);
        for (var j = 0; j < 7; j++) {
          scope.labels[j] = {
            abbr: dateFilter(days[j].date, ctrl.formatDayHeader),
            full: dateFilter(days[j].date, 'EEEE')
          };
        }

        scope.title = dateFilter(ctrl.activeDate, ctrl.formatDayTitle);
        scope.rows = ctrl.split(days, 7);

        if ( scope.showWeeks ) {
          scope.weekNumbers = [];
          var thursdayIndex = (4 + 7 - ctrl.startingDay) % 7,
              numWeeks = scope.rows.length;
          for (var curWeek = 0; curWeek < numWeeks; curWeek++) {
            scope.weekNumbers.push(
              getISO8601WeekNumber( scope.rows[curWeek][thursdayIndex].date ));
          }
        }
      };

      ctrl.compare = function(date1, date2) {
        return (new Date( date1.getFullYear(), date1.getMonth(), date1.getDate() ) - new Date( date2.getFullYear(), date2.getMonth(), date2.getDate() ) );
      };

      function getISO8601WeekNumber(date) {
        var checkDate = new Date(date);
        checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7)); // Thursday
        var time = checkDate.getTime();
        checkDate.setMonth(0); // Compare with Jan 1
        checkDate.setDate(1);
        return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
      }

      ctrl.handleKeyDown = function( key, evt ) {
        var date = ctrl.activeDate.getDate();

        if (key === 'left') {
          date = date - 1;   // up
        } else if (key === 'up') {
          date = date - 7;   // down
        } else if (key === 'right') {
          date = date + 1;   // down
        } else if (key === 'down') {
          date = date + 7;
        } else if (key === 'pageup' || key === 'pagedown') {
          var month = ctrl.activeDate.getMonth() + (key === 'pageup' ? - 1 : 1);
          ctrl.activeDate.setMonth(month, 1);
          date = Math.min(getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth()), date);
        } else if (key === 'home') {
          date = 1;
        } else if (key === 'end') {
          date = getDaysInMonth(ctrl.activeDate.getFullYear(), ctrl.activeDate.getMonth());
        }
        ctrl.activeDate.setDate(date);
      };

      ctrl.refreshView();
    }
  };
}])

.directive('monthpicker', ['dateFilter', function (dateFilter) {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/month.html',
    require: '^datepicker',
    link: function(scope, element, attrs, ctrl) {
      ctrl.step = { years: 1 };
      ctrl.element = element;

      ctrl._refreshView = function() {
        var months = new Array(12),
            year = ctrl.activeDate.getFullYear();

        for ( var i = 0; i < 12; i++ ) {
          months[i] = angular.extend(ctrl.createDateObject(new Date(year, i, 1), ctrl.formatMonth), {
            uid: scope.uniqueId + '-' + i
          });
        }

        scope.title = dateFilter(ctrl.activeDate, ctrl.formatMonthTitle);
        scope.rows = ctrl.split(months, 3);
      };

      ctrl.compare = function(date1, date2) {
        return new Date( date1.getFullYear(), date1.getMonth() ) - new Date( date2.getFullYear(), date2.getMonth() );
      };

      ctrl.handleKeyDown = function( key, evt ) {
        var date = ctrl.activeDate.getMonth();

        if (key === 'left') {
          date = date - 1;   // up
        } else if (key === 'up') {
          date = date - 3;   // down
        } else if (key === 'right') {
          date = date + 1;   // down
        } else if (key === 'down') {
          date = date + 3;
        } else if (key === 'pageup' || key === 'pagedown') {
          var year = ctrl.activeDate.getFullYear() + (key === 'pageup' ? - 1 : 1);
          ctrl.activeDate.setFullYear(year);
        } else if (key === 'home') {
          date = 0;
        } else if (key === 'end') {
          date = 11;
        }
        ctrl.activeDate.setMonth(date);
      };

      ctrl.refreshView();
    }
  };
}])

.directive('yearpicker', ['dateFilter', function (dateFilter) {
  return {
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/datepicker/year.html',
    require: '^datepicker',
    link: function(scope, element, attrs, ctrl) {
      var range = ctrl.yearRange;

      ctrl.step = { years: range };
      ctrl.element = element;

      function getStartingYear( year ) {
        return parseInt((year - 1) / range, 10) * range + 1;
      }

      ctrl._refreshView = function() {
        var years = new Array(range);

        for ( var i = 0, start = getStartingYear(ctrl.activeDate.getFullYear()); i < range; i++ ) {
          years[i] = angular.extend(ctrl.createDateObject(new Date(start + i, 0, 1), ctrl.formatYear), {
            uid: scope.uniqueId + '-' + i
          });
        }

        scope.title = [years[0].label, years[range - 1].label].join(' - ');
        scope.rows = ctrl.split(years, 5);
      };

      ctrl.compare = function(date1, date2) {
        return date1.getFullYear() - date2.getFullYear();
      };

      ctrl.handleKeyDown = function( key, evt ) {
        var date = ctrl.activeDate.getFullYear();

        if (key === 'left') {
          date = date - 1;   // up
        } else if (key === 'up') {
          date = date - 5;   // down
        } else if (key === 'right') {
          date = date + 1;   // down
        } else if (key === 'down') {
          date = date + 5;
        } else if (key === 'pageup' || key === 'pagedown') {
          date += (key === 'pageup' ? - 1 : 1) * ctrl.step.years;
        } else if (key === 'home') {
          date = getStartingYear( ctrl.activeDate.getFullYear() );
        } else if (key === 'end') {
          date = getStartingYear( ctrl.activeDate.getFullYear() ) + range - 1;
        }
        ctrl.activeDate.setFullYear(date);
      };

      ctrl.refreshView();
    }
  };
}])

.constant('datepickerPopupConfig', {
  datepickerPopup: 'yyyy-MM-dd',
  html5Types: {
    date: 'yyyy-MM-dd',
    'datetime-local': 'yyyy-MM-ddTHH:mm:ss.sss',
    'month': 'yyyy-MM'
  },
  currentText: 'Today',
  clearText: 'Clear',
  closeText: 'Done',
  closeOnDateSelection: true,
  appendToBody: false,
  showButtonBar: true
})

.directive('datepickerPopup', ['$compile', '$parse', '$document', '$position', 'dateFilter', 'dateParser', 'datepickerPopupConfig',
function ($compile, $parse, $document, $position, dateFilter, dateParser, datepickerPopupConfig) {
  return {
    restrict: 'EA',
    require: 'ngModel',
    scope: {
      isOpen: '=?',
      currentText: '@',
      clearText: '@',
      closeText: '@',
      dateDisabled: '&',
      customClass: '&'
    },
    link: function(scope, element, attrs, ngModel) {
      var dateFormat,
          closeOnDateSelection = angular.isDefined(attrs.closeOnDateSelection) ? scope.$parent.$eval(attrs.closeOnDateSelection) : datepickerPopupConfig.closeOnDateSelection,
          appendToBody = angular.isDefined(attrs.datepickerAppendToBody) ? scope.$parent.$eval(attrs.datepickerAppendToBody) : datepickerPopupConfig.appendToBody;

      scope.showButtonBar = angular.isDefined(attrs.showButtonBar) ? scope.$parent.$eval(attrs.showButtonBar) : datepickerPopupConfig.showButtonBar;

      scope.getText = function( key ) {
        return scope[key + 'Text'] || datepickerPopupConfig[key + 'Text'];
      };

      var isHtml5DateInput = false;
      if (datepickerPopupConfig.html5Types[attrs.type]) {
        dateFormat = datepickerPopupConfig.html5Types[attrs.type];
        isHtml5DateInput = true;
      } else {
        dateFormat = attrs.datepickerPopup || datepickerPopupConfig.datepickerPopup;
        attrs.$observe('datepickerPopup', function(value, oldValue) {
            var newDateFormat = value || datepickerPopupConfig.datepickerPopup;
            // Invalidate the $modelValue to ensure that formatters re-run
            // FIXME: Refactor when PR is merged: https://github.com/angular/angular.js/pull/10764
            if (newDateFormat !== dateFormat) {
              dateFormat = newDateFormat;
              ngModel.$modelValue = null;

              if (!dateFormat) {
                throw new Error('datepickerPopup must have a date format specified.');
              }
            }
        });
      }

      if (!dateFormat) {
        throw new Error('datepickerPopup must have a date format specified.');
      }

      if (isHtml5DateInput && attrs.datepickerPopup) {
        throw new Error('HTML5 date input types do not support custom formats.');
      }

      // popup element used to display calendar
      var popupEl = angular.element('<div datepicker-popup-wrap><div datepicker></div></div>');
      popupEl.attr({
        'ng-model': 'date',
        'ng-change': 'dateSelection()'
      });

      function cameltoDash( string ){
        return string.replace(/([A-Z])/g, function($1) { return '-' + $1.toLowerCase(); });
      }

      // datepicker element
      var datepickerEl = angular.element(popupEl.children()[0]);
      if (isHtml5DateInput) {
        if (attrs.type == 'month') {
          datepickerEl.attr('datepicker-mode', '"month"');
          datepickerEl.attr('min-mode', 'month');
        }
      }

      if ( attrs.datepickerOptions ) {
        var options = scope.$parent.$eval(attrs.datepickerOptions);
        if(options.initDate) {
          scope.initDate = options.initDate;
          datepickerEl.attr( 'init-date', 'initDate' );
          delete options.initDate;
        }
        angular.forEach(options, function( value, option ) {
          datepickerEl.attr( cameltoDash(option), value );
        });
      }

      scope.watchData = {};
      angular.forEach(['minDate', 'maxDate', 'datepickerMode', 'initDate', 'shortcutPropagation'], function( key ) {
        if ( attrs[key] ) {
          var getAttribute = $parse(attrs[key]);
          scope.$parent.$watch(getAttribute, function(value){
            scope.watchData[key] = value;
          });
          datepickerEl.attr(cameltoDash(key), 'watchData.' + key);

          // Propagate changes from datepicker to outside
          if ( key === 'datepickerMode' ) {
            var setAttribute = getAttribute.assign;
            scope.$watch('watchData.' + key, function(value, oldvalue) {
              if ( value !== oldvalue ) {
                setAttribute(scope.$parent, value);
              }
            });
          }
        }
      });
      if (attrs.dateDisabled) {
        datepickerEl.attr('date-disabled', 'dateDisabled({ date: date, mode: mode })');
      }

      if (attrs.showWeeks) {
        datepickerEl.attr('show-weeks', attrs.showWeeks);
      }

      if (attrs.customClass){
        datepickerEl.attr('custom-class', 'customClass({ date: date, mode: mode })');
      }

      function parseDate(viewValue) {
        if (angular.isNumber(viewValue)) {
          // presumably timestamp to date object
          viewValue = new Date(viewValue);
        }

        if (!viewValue) {
          return null;
        } else if (angular.isDate(viewValue) && !isNaN(viewValue)) {
          return viewValue;
        } else if (angular.isString(viewValue)) {
          var date = dateParser.parse(viewValue, dateFormat, scope.date) || new Date(viewValue);
          if (isNaN(date)) {
            return undefined;
          } else {
            return date;
          }
        } else {
          return undefined;
        }
      }

      function validator(modelValue, viewValue) {
        var value = modelValue || viewValue;
        if (angular.isNumber(value)) {
          value = new Date(value);
        }
        if (!value) {
          return true;
        } else if (angular.isDate(value) && !isNaN(value)) {
          return true;
        } else if (angular.isString(value)) {
          var date = dateParser.parse(value, dateFormat) || new Date(value);
          return !isNaN(date);
        } else {
          return false;
        }
      }

      if (!isHtml5DateInput) {
        // Internal API to maintain the correct ng-invalid-[key] class
        ngModel.$$parserName = 'date';
        ngModel.$validators.date = validator;
        ngModel.$parsers.unshift(parseDate);
        ngModel.$formatters.push(function (value) {
          scope.date = value;
          return ngModel.$isEmpty(value) ? value : dateFilter(value, dateFormat);
        });
      }
      else {
        ngModel.$formatters.push(function (value) {
          scope.date = value;
          return value;
        });
      }

      // Inner change
      scope.dateSelection = function(dt) {
        if (angular.isDefined(dt)) {
          scope.date = dt;
        }
        var date = scope.date ? dateFilter(scope.date, dateFormat) : '';
        element.val(date);
        ngModel.$setViewValue(date);

        if ( closeOnDateSelection ) {
          scope.isOpen = false;
          element[0].focus();
        }
      };

      // Detect changes in the view from the text box
      ngModel.$viewChangeListeners.push(function () {
        scope.date = dateParser.parse(ngModel.$viewValue, dateFormat, scope.date) || new Date(ngModel.$viewValue);
      });

      var documentClickBind = function(event) {
        if (scope.isOpen && event.target !== element[0]) {
          scope.$apply(function() {
            scope.isOpen = false;
          });
        }
      };

      var keydown = function(evt, noApply) {
        scope.keydown(evt);
      };
      element.bind('keydown', keydown);

      scope.keydown = function(evt) {
        if (evt.which === 27) {
          evt.preventDefault();
          if (scope.isOpen) {
            evt.stopPropagation();
          }
          scope.close();
        } else if (evt.which === 40 && !scope.isOpen) {
          scope.isOpen = true;
        }
      };

      scope.$watch('isOpen', function(value) {
        if (value) {
          scope.$broadcast('datepicker.focus');
          scope.position = appendToBody ? $position.offset(element) : $position.position(element);
          scope.position.top = scope.position.top + element.prop('offsetHeight');

          $document.bind('click', documentClickBind);
        } else {
          $document.unbind('click', documentClickBind);
        }
      });

      scope.select = function( date ) {
        if (date === 'today') {
          var today = new Date();
          if (angular.isDate(scope.date)) {
            date = new Date(scope.date);
            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());
          } else {
            date = new Date(today.setHours(0, 0, 0, 0));
          }
        }
        scope.dateSelection( date );
      };

      scope.close = function() {
        scope.isOpen = false;
        element[0].focus();
      };

      var $popup = $compile(popupEl)(scope);
      // Prevent jQuery cache memory leak (template is now redundant after linking)
      popupEl.remove();

      if ( appendToBody ) {
        $document.find('body').append($popup);
      } else {
        element.after($popup);
      }

      scope.$on('$destroy', function() {
        $popup.remove();
        element.unbind('keydown', keydown);
        $document.unbind('click', documentClickBind);
      });
    }
  };
}])

.directive('datepickerPopupWrap', function() {
  return {
    restrict:'EA',
    replace: true,
    transclude: true,
    templateUrl: 'template/datepicker/popup.html',
    link:function (scope, element, attrs) {
      element.bind('click', function(event) {
        event.preventDefault();
        event.stopPropagation();
      });
    }
  };
});

angular.module('ui.bootstrap.dropdown', ['ui.bootstrap.position'])

.constant('dropdownConfig', {
  openClass: 'open'
})

.service('dropdownService', ['$document', '$rootScope', function($document, $rootScope) {
  var openScope = null;

  this.open = function( dropdownScope ) {
    if ( !openScope ) {
      $document.bind('click', closeDropdown);
      $document.bind('keydown', escapeKeyBind);
    }

    if ( openScope && openScope !== dropdownScope ) {
        openScope.isOpen = false;
    }

    openScope = dropdownScope;
  };

  this.close = function( dropdownScope ) {
    if ( openScope === dropdownScope ) {
      openScope = null;
      $document.unbind('click', closeDropdown);
      $document.unbind('keydown', escapeKeyBind);
    }
  };

  var closeDropdown = function( evt ) {
    // This method may still be called during the same mouse event that
    // unbound this event handler. So check openScope before proceeding.
    if (!openScope) { return; }

    if( evt && openScope.getAutoClose() === 'disabled' )  { return ; }

    var toggleElement = openScope.getToggleElement();
    if ( evt && toggleElement && toggleElement[0].contains(evt.target) ) {
        return;
    }

    var $element = openScope.getElement();
    if( evt && openScope.getAutoClose() === 'outsideClick' && $element && $element[0].contains(evt.target) ) {
      return;
    }

    openScope.isOpen = false;

    if (!$rootScope.$$phase) {
      openScope.$apply();
    }
  };

  var escapeKeyBind = function( evt ) {
    if ( evt.which === 27 ) {
      openScope.focusToggleElement();
      closeDropdown();
    }
  };
}])

.controller('DropdownController', ['$scope', '$attrs', '$parse', 'dropdownConfig', 'dropdownService', '$animate', '$position', '$document', function($scope, $attrs, $parse, dropdownConfig, dropdownService, $animate, $position, $document) {
  var self = this,
      scope = $scope.$new(), // create a child scope so we are not polluting original one
      openClass = dropdownConfig.openClass,
      getIsOpen,
      setIsOpen = angular.noop,
      toggleInvoker = $attrs.onToggle ? $parse($attrs.onToggle) : angular.noop,
      appendToBody = false;

  this.init = function( element ) {
    self.$element = element;

    if ( $attrs.isOpen ) {
      getIsOpen = $parse($attrs.isOpen);
      setIsOpen = getIsOpen.assign;

      $scope.$watch(getIsOpen, function(value) {
        scope.isOpen = !!value;
      });
    }

    appendToBody = angular.isDefined($attrs.dropdownAppendToBody);

    if ( appendToBody && self.dropdownMenu ) {
      $document.find('body').append( self.dropdownMenu );
      element.on('$destroy', function handleDestroyEvent() {
        self.dropdownMenu.remove();
      });
    }
  };

  this.toggle = function( open ) {
    return scope.isOpen = arguments.length ? !!open : !scope.isOpen;
  };

  // Allow other directives to watch status
  this.isOpen = function() {
    return scope.isOpen;
  };

  scope.getToggleElement = function() {
    return self.toggleElement;
  };

  scope.getAutoClose = function() {
    return $attrs.autoClose || 'always'; //or 'outsideClick' or 'disabled'
  };

  scope.getElement = function() {
    return self.$element;
  };

  scope.focusToggleElement = function() {
    if ( self.toggleElement ) {
      self.toggleElement[0].focus();
    }
  };

  scope.$watch('isOpen', function( isOpen, wasOpen ) {
    if ( appendToBody && self.dropdownMenu ) {
      var pos = $position.positionElements(self.$element, self.dropdownMenu, 'bottom-left', true);
      self.dropdownMenu.css({
        top: pos.top + 'px',
        left: pos.left + 'px',
        display: isOpen ? 'block' : 'none'
      });
    }

    $animate[isOpen ? 'addClass' : 'removeClass'](self.$element, openClass);

    if ( isOpen ) {
      scope.focusToggleElement();
      dropdownService.open( scope );
    } else {
      dropdownService.close( scope );
    }

    setIsOpen($scope, isOpen);
    if (angular.isDefined(isOpen) && isOpen !== wasOpen) {
      toggleInvoker($scope, { open: !!isOpen });
    }
  });

  $scope.$on('$locationChangeSuccess', function() {
    scope.isOpen = false;
  });

  $scope.$on('$destroy', function() {
    scope.$destroy();
  });
}])

.directive('dropdown', function() {
  return {
    controller: 'DropdownController',
    link: function(scope, element, attrs, dropdownCtrl) {
      dropdownCtrl.init( element );
    }
  };
})

.directive('dropdownMenu', function() {
  return {
    restrict: 'AC',
    require: '?^dropdown',
    link: function(scope, element, attrs, dropdownCtrl) {
      if ( !dropdownCtrl ) {
        return;
      }
      dropdownCtrl.dropdownMenu = element;
    }
  };
})

.directive('dropdownToggle', function() {
  return {
    require: '?^dropdown',
    link: function(scope, element, attrs, dropdownCtrl) {
      if ( !dropdownCtrl ) {
        return;
      }

      dropdownCtrl.toggleElement = element;

      var toggleDropdown = function(event) {
        event.preventDefault();

        if ( !element.hasClass('disabled') && !attrs.disabled ) {
          scope.$apply(function() {
            dropdownCtrl.toggle();
          });
        }
      };

      element.bind('click', toggleDropdown);

      // WAI-ARIA
      element.attr({ 'aria-haspopup': true, 'aria-expanded': false });
      scope.$watch(dropdownCtrl.isOpen, function( isOpen ) {
        element.attr('aria-expanded', !!isOpen);
      });

      scope.$on('$destroy', function() {
        element.unbind('click', toggleDropdown);
      });
    }
  };
});

angular.module('ui.bootstrap.modal', [])

/**
 * A helper, internal data structure that acts as a map but also allows getting / removing
 * elements in the LIFO order
 */
  .factory('$$stackedMap', function () {
    return {
      createNew: function () {
        var stack = [];

        return {
          add: function (key, value) {
            stack.push({
              key: key,
              value: value
            });
          },
          get: function (key) {
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                return stack[i];
              }
            }
          },
          keys: function() {
            var keys = [];
            for (var i = 0; i < stack.length; i++) {
              keys.push(stack[i].key);
            }
            return keys;
          },
          top: function () {
            return stack[stack.length - 1];
          },
          remove: function (key) {
            var idx = -1;
            for (var i = 0; i < stack.length; i++) {
              if (key == stack[i].key) {
                idx = i;
                break;
              }
            }
            return stack.splice(idx, 1)[0];
          },
          removeTop: function () {
            return stack.splice(stack.length - 1, 1)[0];
          },
          length: function () {
            return stack.length;
          }
        };
      }
    };
  })

/**
 * A helper directive for the $modal service. It creates a backdrop element.
 */
  .directive('modalBackdrop', ['$timeout', function ($timeout) {
    return {
      restrict: 'EA',
      replace: true,
      templateUrl: 'template/modal/backdrop.html',
      compile: function (tElement, tAttrs) {
        tElement.addClass(tAttrs.backdropClass);
        return linkFn;
      }
    };

    function linkFn(scope, element, attrs) {
      scope.animate = false;

      //trigger CSS transitions
      $timeout(function () {
        scope.animate = true;
      });
    }
  }])

  .directive('modalWindow', ['$modalStack', '$q', function ($modalStack, $q) {
    return {
      restrict: 'EA',
      scope: {
        index: '@',
        animate: '='
      },
      replace: true,
      transclude: true,
      templateUrl: function(tElement, tAttrs) {
        return tAttrs.templateUrl || 'template/modal/window.html';
      },
      link: function (scope, element, attrs) {
        element.addClass(attrs.windowClass || '');
        scope.size = attrs.size;

        scope.close = function (evt) {
          var modal = $modalStack.getTop();
          if (modal && modal.value.backdrop && modal.value.backdrop != 'static' && (evt.target === evt.currentTarget)) {
            evt.preventDefault();
            evt.stopPropagation();
            $modalStack.dismiss(modal.key, 'backdrop click');
          }
        };

        // This property is only added to the scope for the purpose of detecting when this directive is rendered.
        // We can detect that by using this property in the template associated with this directive and then use
        // {@link Attribute#$observe} on it. For more details please see {@link TableColumnResize}.
        scope.$isRendered = true;

        // Deferred object that will be resolved when this modal is render.
        var modalRenderDeferObj = $q.defer();
        // Observe function will be called on next digest cycle after compilation, ensuring that the DOM is ready.
        // In order to use this way of finding whether DOM is ready, we need to observe a scope property used in modal's template.
        attrs.$observe('modalRender', function (value) {
          if (value == 'true') {
            modalRenderDeferObj.resolve();
          }
        });

        modalRenderDeferObj.promise.then(function () {
          // trigger CSS transitions
          scope.animate = true;

          var inputsWithAutofocus = element[0].querySelectorAll('[autofocus]');
          /**
           * Auto-focusing of a freshly-opened modal element causes any child elements
           * with the autofocus attribute to lose focus. This is an issue on touch
           * based devices which will show and then hide the onscreen keyboard.
           * Attempts to refocus the autofocus element via JavaScript will not reopen
           * the onscreen keyboard. Fixed by updated the focusing logic to only autofocus
           * the modal element if the modal does not contain an autofocus element.
           */
          if (inputsWithAutofocus.length) {
            inputsWithAutofocus[0].focus();
          } else {
            element[0].focus();
          }

          // Notify {@link $modalStack} that modal is rendered.
          var modal = $modalStack.getTop();
          if (modal) {
            $modalStack.modalRendered(modal.key);
          }
        });
      }
    };
  }])

  .directive('modalAnimationClass', [
    function () {
      return {
        compile: function (tElement, tAttrs) {
          if (tAttrs.modalAnimation) {
            tElement.addClass(tAttrs.modalAnimationClass);
          }
        }
      };
    }])

  .directive('modalTransclude', function () {
    return {
      link: function($scope, $element, $attrs, controller, $transclude) {
        $transclude($scope.$parent, function(clone) {
          $element.empty();
          $element.append(clone);
        });
      }
    };
  })

  .factory('$modalStack', ['$animate', '$timeout', '$document', '$compile', '$rootScope', '$$stackedMap',
    function ($animate, $timeout, $document, $compile, $rootScope, $$stackedMap) {

      var OPENED_MODAL_CLASS = 'modal-open';

      var backdropDomEl, backdropScope;
      var openedWindows = $$stackedMap.createNew();
      var $modalStack = {};

      function backdropIndex() {
        var topBackdropIndex = -1;
        var opened = openedWindows.keys();
        for (var i = 0; i < opened.length; i++) {
          if (openedWindows.get(opened[i]).value.backdrop) {
            topBackdropIndex = i;
          }
        }
        return topBackdropIndex;
      }

      $rootScope.$watch(backdropIndex, function(newBackdropIndex){
        if (backdropScope) {
          backdropScope.index = newBackdropIndex;
        }
      });

      function removeModalWindow(modalInstance) {

        var body = $document.find('body').eq(0);
        var modalWindow = openedWindows.get(modalInstance).value;

        //clean up the stack
        openedWindows.remove(modalInstance);

        //remove window DOM element
        removeAfterAnimate(modalWindow.modalDomEl, modalWindow.modalScope, function() {
          body.toggleClass(OPENED_MODAL_CLASS, openedWindows.length() > 0);
          checkRemoveBackdrop();
        });
      }

      function checkRemoveBackdrop() {
          //remove backdrop if no longer needed
          if (backdropDomEl && backdropIndex() == -1) {
            var backdropScopeRef = backdropScope;
            removeAfterAnimate(backdropDomEl, backdropScope, function () {
              backdropScopeRef = null;
            });
            backdropDomEl = undefined;
            backdropScope = undefined;
          }
      }

      function removeAfterAnimate(domEl, scope, done) {
        // Closing animation
        scope.animate = false;

        if (domEl.attr('modal-animation') && $animate.enabled()) {
          // transition out
          domEl.one('$animate:close', function closeFn() {
            $rootScope.$evalAsync(afterAnimating);
          });
        } else {
          // Ensure this call is async
          $timeout(afterAnimating);
        }

        function afterAnimating() {
          if (afterAnimating.done) {
            return;
          }
          afterAnimating.done = true;

          domEl.remove();
          scope.$destroy();
          if (done) {
            done();
          }
        }
      }

      $document.bind('keydown', function (evt) {
        var modal;

        if (evt.which === 27) {
          modal = openedWindows.top();
          if (modal && modal.value.keyboard) {
            evt.preventDefault();
            $rootScope.$apply(function () {
              $modalStack.dismiss(modal.key, 'escape key press');
            });
          }
        }
      });

      $modalStack.open = function (modalInstance, modal) {

        var modalOpener = $document[0].activeElement;

        openedWindows.add(modalInstance, {
          deferred: modal.deferred,
          renderDeferred: modal.renderDeferred,
          modalScope: modal.scope,
          backdrop: modal.backdrop,
          keyboard: modal.keyboard
        });

        var body = $document.find('body').eq(0),
            currBackdropIndex = backdropIndex();

        if (currBackdropIndex >= 0 && !backdropDomEl) {
          backdropScope = $rootScope.$new(true);
          backdropScope.index = currBackdropIndex;
          var angularBackgroundDomEl = angular.element('<div modal-backdrop="modal-backdrop"></div>');
          angularBackgroundDomEl.attr('backdrop-class', modal.backdropClass);
          if (modal.animation) {
            angularBackgroundDomEl.attr('modal-animation', 'true');
          }
          backdropDomEl = $compile(angularBackgroundDomEl)(backdropScope);
          body.append(backdropDomEl);
        }

        var angularDomEl = angular.element('<div modal-window="modal-window"></div>');
        angularDomEl.attr({
          'template-url': modal.windowTemplateUrl,
          'window-class': modal.windowClass,
          'size': modal.size,
          'index': openedWindows.length() - 1,
          'animate': 'animate'
        }).html(modal.content);
        if (modal.animation) {
          angularDomEl.attr('modal-animation', 'true');
        }

        var modalDomEl = $compile(angularDomEl)(modal.scope);
        openedWindows.top().value.modalDomEl = modalDomEl;
        openedWindows.top().value.modalOpener = modalOpener;
        body.append(modalDomEl);
        body.addClass(OPENED_MODAL_CLASS);
      };

      function broadcastClosing(modalWindow, resultOrReason, closing) {
          return !modalWindow.value.modalScope.$broadcast('modal.closing', resultOrReason, closing).defaultPrevented;
      }

      $modalStack.close = function (modalInstance, result) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow && broadcastClosing(modalWindow, result, true)) {
          modalWindow.value.deferred.resolve(result);
          removeModalWindow(modalInstance);
          modalWindow.value.modalOpener.focus();
          return true;
        }
        return !modalWindow;
      };

      $modalStack.dismiss = function (modalInstance, reason) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow && broadcastClosing(modalWindow, reason, false)) {
          modalWindow.value.deferred.reject(reason);
          removeModalWindow(modalInstance);
          modalWindow.value.modalOpener.focus();
          return true;
        }
        return !modalWindow;
      };

      $modalStack.dismissAll = function (reason) {
        var topModal = this.getTop();
        while (topModal && this.dismiss(topModal.key, reason)) {
          topModal = this.getTop();
        }
      };

      $modalStack.getTop = function () {
        return openedWindows.top();
      };

      $modalStack.modalRendered = function (modalInstance) {
        var modalWindow = openedWindows.get(modalInstance);
        if (modalWindow) {
          modalWindow.value.renderDeferred.resolve();
        }
      };

      return $modalStack;
    }])

  .provider('$modal', function () {

    var $modalProvider = {
      options: {
        animation: true,
        backdrop: true, //can also be false or 'static'
        keyboard: true
      },
      $get: ['$injector', '$rootScope', '$q', '$templateRequest', '$controller', '$modalStack',
        function ($injector, $rootScope, $q, $templateRequest, $controller, $modalStack) {

          var $modal = {};

          function getTemplatePromise(options) {
            return options.template ? $q.when(options.template) :
              $templateRequest(angular.isFunction(options.templateUrl) ? (options.templateUrl)() : options.templateUrl);
          }

          function getResolvePromises(resolves) {
            var promisesArr = [];
            angular.forEach(resolves, function (value) {
              if (angular.isFunction(value) || angular.isArray(value)) {
                promisesArr.push($q.when($injector.invoke(value)));
              }
            });
            return promisesArr;
          }

          $modal.open = function (modalOptions) {

            var modalResultDeferred = $q.defer();
            var modalOpenedDeferred = $q.defer();
            var modalRenderDeferred = $q.defer();

            //prepare an instance of a modal to be injected into controllers and returned to a caller
            var modalInstance = {
              result: modalResultDeferred.promise,
              opened: modalOpenedDeferred.promise,
              rendered: modalRenderDeferred.promise,
              close: function (result) {
                return $modalStack.close(modalInstance, result);
              },
              dismiss: function (reason) {
                return $modalStack.dismiss(modalInstance, reason);
              }
            };

            //merge and clean up options
            modalOptions = angular.extend({}, $modalProvider.options, modalOptions);
            modalOptions.resolve = modalOptions.resolve || {};

            //verify options
            if (!modalOptions.template && !modalOptions.templateUrl) {
              throw new Error('One of template or templateUrl options is required.');
            }

            var templateAndResolvePromise =
              $q.all([getTemplatePromise(modalOptions)].concat(getResolvePromises(modalOptions.resolve)));


            templateAndResolvePromise.then(function resolveSuccess(tplAndVars) {

              var modalScope = (modalOptions.scope || $rootScope).$new();
              modalScope.$close = modalInstance.close;
              modalScope.$dismiss = modalInstance.dismiss;

              var ctrlInstance, ctrlLocals = {};
              var resolveIter = 1;

              //controllers
              if (modalOptions.controller) {
                ctrlLocals.$scope = modalScope;
                ctrlLocals.$modalInstance = modalInstance;
                angular.forEach(modalOptions.resolve, function (value, key) {
                  ctrlLocals[key] = tplAndVars[resolveIter++];
                });

                ctrlInstance = $controller(modalOptions.controller, ctrlLocals);
                if (modalOptions.controllerAs) {
                  modalScope[modalOptions.controllerAs] = ctrlInstance;
                }
              }

              $modalStack.open(modalInstance, {
                scope: modalScope,
                deferred: modalResultDeferred,
                renderDeferred: modalRenderDeferred,
                content: tplAndVars[0],
                animation: modalOptions.animation,
                backdrop: modalOptions.backdrop,
                keyboard: modalOptions.keyboard,
                backdropClass: modalOptions.backdropClass,
                windowClass: modalOptions.windowClass,
                windowTemplateUrl: modalOptions.windowTemplateUrl,
                size: modalOptions.size
              });

            }, function resolveError(reason) {
              modalResultDeferred.reject(reason);
            });

            templateAndResolvePromise.then(function () {
              modalOpenedDeferred.resolve(true);
            }, function (reason) {
              modalOpenedDeferred.reject(reason);
            });

            return modalInstance;
          };

          return $modal;
        }]
    };

    return $modalProvider;
  });

angular.module('ui.bootstrap.pagination', [])

.controller('PaginationController', ['$scope', '$attrs', '$parse', function ($scope, $attrs, $parse) {
  var self = this,
      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
      setNumPages = $attrs.numPages ? $parse($attrs.numPages).assign : angular.noop;

  this.init = function(ngModelCtrl_, config) {
    ngModelCtrl = ngModelCtrl_;
    this.config = config;

    ngModelCtrl.$render = function() {
      self.render();
    };

    if ($attrs.itemsPerPage) {
      $scope.$parent.$watch($parse($attrs.itemsPerPage), function(value) {
        self.itemsPerPage = parseInt(value, 10);
        $scope.totalPages = self.calculateTotalPages();
      });
    } else {
      this.itemsPerPage = config.itemsPerPage;
    }

    $scope.$watch('totalItems', function() {
      $scope.totalPages = self.calculateTotalPages();
    });

    $scope.$watch('totalPages', function(value) {
      setNumPages($scope.$parent, value); // Readonly variable

      if ( $scope.page > value ) {
        $scope.selectPage(value);
      } else {
        ngModelCtrl.$render();
      }
    });
  };

  this.calculateTotalPages = function() {
    var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil($scope.totalItems / this.itemsPerPage);
    return Math.max(totalPages || 0, 1);
  };

  this.render = function() {
    $scope.page = parseInt(ngModelCtrl.$viewValue, 10) || 1;
  };

  $scope.selectPage = function(page, evt) {
    if ( $scope.page !== page && page > 0 && page <= $scope.totalPages) {
      if (evt && evt.target) {
        evt.target.blur();
      }
      ngModelCtrl.$setViewValue(page);
      ngModelCtrl.$render();
    }
  };

  $scope.getText = function( key ) {
    return $scope[key + 'Text'] || self.config[key + 'Text'];
  };
  $scope.noPrevious = function() {
    return $scope.page === 1;
  };
  $scope.noNext = function() {
    return $scope.page === $scope.totalPages;
  };
}])

.constant('paginationConfig', {
  itemsPerPage: 10,
  boundaryLinks: false,
  directionLinks: true,
  firstText: 'First',
  previousText: 'Previous',
  nextText: 'Next',
  lastText: 'Last',
  rotate: true
})

.directive('pagination', ['$parse', 'paginationConfig', function($parse, paginationConfig) {
  return {
    restrict: 'EA',
    scope: {
      totalItems: '=',
      firstText: '@',
      previousText: '@',
      nextText: '@',
      lastText: '@'
    },
    require: ['pagination', '?ngModel'],
    controller: 'PaginationController',
    templateUrl: 'template/pagination/pagination.html',
    replace: true,
    link: function(scope, element, attrs, ctrls) {
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
         return; // do nothing if no ng-model
      }

      // Setup configuration parameters
      var maxSize = angular.isDefined(attrs.maxSize) ? scope.$parent.$eval(attrs.maxSize) : paginationConfig.maxSize,
          rotate = angular.isDefined(attrs.rotate) ? scope.$parent.$eval(attrs.rotate) : paginationConfig.rotate;
      scope.boundaryLinks = angular.isDefined(attrs.boundaryLinks) ? scope.$parent.$eval(attrs.boundaryLinks) : paginationConfig.boundaryLinks;
      scope.directionLinks = angular.isDefined(attrs.directionLinks) ? scope.$parent.$eval(attrs.directionLinks) : paginationConfig.directionLinks;

      paginationCtrl.init(ngModelCtrl, paginationConfig);

      if (attrs.maxSize) {
        scope.$parent.$watch($parse(attrs.maxSize), function(value) {
          maxSize = parseInt(value, 10);
          paginationCtrl.render();
        });
      }

      // Create page object used in template
      function makePage(number, text, isActive) {
        return {
          number: number,
          text: text,
          active: isActive
        };
      }

      function getPages(currentPage, totalPages) {
        var pages = [];

        // Default page limits
        var startPage = 1, endPage = totalPages;
        var isMaxSized = ( angular.isDefined(maxSize) && maxSize < totalPages );

        // recompute if maxSize
        if ( isMaxSized ) {
          if ( rotate ) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(maxSize/2), 1);
            endPage   = startPage + maxSize - 1;

            // Adjust if limit is exceeded
            if (endPage > totalPages) {
              endPage   = totalPages;
              startPage = endPage - maxSize + 1;
            }
          } else {
            // Visible pages are paginated with maxSize
            startPage = ((Math.ceil(currentPage / maxSize) - 1) * maxSize) + 1;

            // Adjust last page if limit is exceeded
            endPage = Math.min(startPage + maxSize - 1, totalPages);
          }
        }

        // Add page number links
        for (var number = startPage; number <= endPage; number++) {
          var page = makePage(number, number, number === currentPage);
          pages.push(page);
        }

        // Add links to move between page sets
        if ( isMaxSized && ! rotate ) {
          if ( startPage > 1 ) {
            var previousPageSet = makePage(startPage - 1, '...', false);
            pages.unshift(previousPageSet);
          }

          if ( endPage < totalPages ) {
            var nextPageSet = makePage(endPage + 1, '...', false);
            pages.push(nextPageSet);
          }
        }

        return pages;
      }

      var originalRender = paginationCtrl.render;
      paginationCtrl.render = function() {
        originalRender();
        if (scope.page > 0 && scope.page <= scope.totalPages) {
          scope.pages = getPages(scope.page, scope.totalPages);
        }
      };
    }
  };
}])

.constant('pagerConfig', {
  itemsPerPage: 10,
  previousText: '« Previous',
  nextText: 'Next »',
  align: true
})

.directive('pager', ['pagerConfig', function(pagerConfig) {
  return {
    restrict: 'EA',
    scope: {
      totalItems: '=',
      previousText: '@',
      nextText: '@'
    },
    require: ['pager', '?ngModel'],
    controller: 'PaginationController',
    templateUrl: 'template/pagination/pager.html',
    replace: true,
    link: function(scope, element, attrs, ctrls) {
      var paginationCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if (!ngModelCtrl) {
         return; // do nothing if no ng-model
      }

      scope.align = angular.isDefined(attrs.align) ? scope.$parent.$eval(attrs.align) : pagerConfig.align;
      paginationCtrl.init(ngModelCtrl, pagerConfig);
    }
  };
}]);

/**
 * The following features are still outstanding: animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html tooltips, and selector delegation.
 */
angular.module( 'ui.bootstrap.tooltip', [ 'ui.bootstrap.position', 'ui.bootstrap.bindHtml' ] )

/**
 * The $tooltip service creates tooltip- and popover-like directives as well as
 * houses global options for them.
 */
.provider( '$tooltip', function () {
  // The default options tooltip and popover.
  var defaultOptions = {
    placement: 'top',
    animation: true,
    popupDelay: 0,
    useContentExp: false
  };

  // Default hide triggers for each show trigger
  var triggerMap = {
    'mouseenter': 'mouseleave',
    'click': 'click',
    'focus': 'blur'
  };

  // The options specified to the provider globally.
  var globalOptions = {};

  /**
   * `options({})` allows global configuration of all tooltips in the
   * application.
   *
   *   var app = angular.module( 'App', ['ui.bootstrap.tooltip'], function( $tooltipProvider ) {
   *     // place tooltips left instead of top by default
   *     $tooltipProvider.options( { placement: 'left' } );
   *   });
   */
	this.options = function( value ) {
		angular.extend( globalOptions, value );
	};

  /**
   * This allows you to extend the set of trigger mappings available. E.g.:
   *
   *   $tooltipProvider.setTriggers( 'openTrigger': 'closeTrigger' );
   */
  this.setTriggers = function setTriggers ( triggers ) {
    angular.extend( triggerMap, triggers );
  };

  /**
   * This is a helper function for translating camel-case to snake-case.
   */
  function snake_case(name){
    var regexp = /[A-Z]/g;
    var separator = '-';
    return name.replace(regexp, function(letter, pos) {
      return (pos ? separator : '') + letter.toLowerCase();
    });
  }

  /**
   * Returns the actual instance of the $tooltip service.
   * TODO support multiple triggers
   */
  this.$get = [ '$window', '$compile', '$timeout', '$document', '$position', '$interpolate', function ( $window, $compile, $timeout, $document, $position, $interpolate ) {
    return function $tooltip ( type, prefix, defaultTriggerShow, options ) {
      options = angular.extend( {}, defaultOptions, globalOptions, options );

      /**
       * Returns an object of show and hide triggers.
       *
       * If a trigger is supplied,
       * it is used to show the tooltip; otherwise, it will use the `trigger`
       * option passed to the `$tooltipProvider.options` method; else it will
       * default to the trigger supplied to this directive factory.
       *
       * The hide trigger is based on the show trigger. If the `trigger` option
       * was passed to the `$tooltipProvider.options` method, it will use the
       * mapped trigger from `triggerMap` or the passed trigger if the map is
       * undefined; otherwise, it uses the `triggerMap` value of the show
       * trigger; else it will just use the show trigger.
       */
      function getTriggers ( trigger ) {
        var show = trigger || options.trigger || defaultTriggerShow;
        var hide = triggerMap[show] || show;
        return {
          show: show,
          hide: hide
        };
      }

      var directiveName = snake_case( type );

      var startSym = $interpolate.startSymbol();
      var endSym = $interpolate.endSymbol();
      var template =
        '<div '+ directiveName +'-popup '+
          'title="'+startSym+'title'+endSym+'" '+
          (options.useContentExp ?
            'content-exp="contentExp()" ' :
            'content="'+startSym+'content'+endSym+'" ') +
          'placement="'+startSym+'placement'+endSym+'" '+
          'popup-class="'+startSym+'popupClass'+endSym+'" '+
          'animation="animation" '+
          'is-open="isOpen"'+
          'origin-scope="origScope" '+
          '>'+
        '</div>';

      return {
        restrict: 'EA',
        compile: function (tElem, tAttrs) {
          var tooltipLinker = $compile( template );

          return function link ( scope, element, attrs, tooltipCtrl ) {
            var tooltip;
            var tooltipLinkedScope;
            var transitionTimeout;
            var popupTimeout;
            var appendToBody = angular.isDefined( options.appendToBody ) ? options.appendToBody : false;
            var triggers = getTriggers( undefined );
            var hasEnableExp = angular.isDefined(attrs[prefix+'Enable']);
            var ttScope = scope.$new(true);

            var positionTooltip = function () {
              if (!tooltip) { return; }

              var ttPosition = $position.positionElements(element, tooltip, ttScope.placement, appendToBody);
              ttPosition.top += 'px';
              ttPosition.left += 'px';

              // Now set the calculated positioning.
              tooltip.css( ttPosition );
            };

            // Set up the correct scope to allow transclusion later
            ttScope.origScope = scope;

            // By default, the tooltip is not open.
            // TODO add ability to start tooltip opened
            ttScope.isOpen = false;

            function toggleTooltipBind () {
              if ( ! ttScope.isOpen ) {
                showTooltipBind();
              } else {
                hideTooltipBind();
              }
            }

            // Show the tooltip with delay if specified, otherwise show it immediately
            function showTooltipBind() {
              if(hasEnableExp && !scope.$eval(attrs[prefix+'Enable'])) {
                return;
              }

              prepareTooltip();

              if ( ttScope.popupDelay ) {
                // Do nothing if the tooltip was already scheduled to pop-up.
                // This happens if show is triggered multiple times before any hide is triggered.
                if (!popupTimeout) {
                  popupTimeout = $timeout( show, ttScope.popupDelay, false );
                  popupTimeout.then(function(reposition){reposition();});
                }
              } else {
                show()();
              }
            }

            function hideTooltipBind () {
              scope.$apply(function () {
                hide();
              });
            }

            // Show the tooltip popup element.
            function show() {

              popupTimeout = null;

              // If there is a pending remove transition, we must cancel it, lest the
              // tooltip be mysteriously removed.
              if ( transitionTimeout ) {
                $timeout.cancel( transitionTimeout );
                transitionTimeout = null;
              }

              // Don't show empty tooltips.
              if ( !(options.useContentExp ? ttScope.contentExp() : ttScope.content) ) {
                return angular.noop;
              }

              createTooltip();

              // Set the initial positioning.
              tooltip.css({ top: 0, left: 0, display: 'block' });
              ttScope.$digest();

              positionTooltip();

              // And show the tooltip.
              ttScope.isOpen = true;
              ttScope.$apply(); // digest required as $apply is not called

              // Return positioning function as promise callback for correct
              // positioning after draw.
              return positionTooltip;
            }

            // Hide the tooltip popup element.
            function hide() {
              // First things first: we don't show it anymore.
              ttScope.isOpen = false;

              //if tooltip is going to be shown after delay, we must cancel this
              $timeout.cancel( popupTimeout );
              popupTimeout = null;

              // And now we remove it from the DOM. However, if we have animation, we
              // need to wait for it to expire beforehand.
              // FIXME: this is a placeholder for a port of the transitions library.
              if ( ttScope.animation ) {
                if (!transitionTimeout) {
                  transitionTimeout = $timeout(removeTooltip, 500);
                }
              } else {
                removeTooltip();
              }
            }

            function createTooltip() {
              // There can only be one tooltip element per directive shown at once.
              if (tooltip) {
                removeTooltip();
              }
              tooltipLinkedScope = ttScope.$new();
              tooltip = tooltipLinker(tooltipLinkedScope, function (tooltip) {
                if ( appendToBody ) {
                  $document.find( 'body' ).append( tooltip );
                } else {
                  element.after( tooltip );
                }
              });

              tooltipLinkedScope.$watch(function () {
                $timeout(positionTooltip, 0, false);
              });

              if (options.useContentExp) {
                tooltipLinkedScope.$watch('contentExp()', function (val) {
                  if (!val && ttScope.isOpen ) {
                    hide();
                  }
                });
              }
            }

            function removeTooltip() {
              transitionTimeout = null;
              if (tooltip) {
                tooltip.remove();
                tooltip = null;
              }
              if (tooltipLinkedScope) {
                tooltipLinkedScope.$destroy();
                tooltipLinkedScope = null;
              }
            }

            function prepareTooltip() {
              prepPopupClass();
              prepPlacement();
              prepPopupDelay();
            }

            ttScope.contentExp = function () {
              return scope.$eval(attrs[type]);
            };

            /**
             * Observe the relevant attributes.
             */
            if (!options.useContentExp) {
              attrs.$observe( type, function ( val ) {
                ttScope.content = val;

                if (!val && ttScope.isOpen ) {
                  hide();
                }
              });
            }

            attrs.$observe( 'disabled', function ( val ) {
              if (val && ttScope.isOpen ) {
                hide();
              }
            });

            attrs.$observe( prefix+'Title', function ( val ) {
              ttScope.title = val;
            });

            function prepPopupClass() {
              ttScope.popupClass = attrs[prefix + 'Class'];
            }

            function prepPlacement() {
              var val = attrs[ prefix + 'Placement' ];
              ttScope.placement = angular.isDefined( val ) ? val : options.placement;
            }

            function prepPopupDelay() {
              var val = attrs[ prefix + 'PopupDelay' ];
              var delay = parseInt( val, 10 );
              ttScope.popupDelay = ! isNaN(delay) ? delay : options.popupDelay;
            }

            var unregisterTriggers = function () {
              element.unbind(triggers.show, showTooltipBind);
              element.unbind(triggers.hide, hideTooltipBind);
            };

            function prepTriggers() {
              var val = attrs[ prefix + 'Trigger' ];
              unregisterTriggers();

              triggers = getTriggers( val );

              if ( triggers.show === triggers.hide ) {
                element.bind( triggers.show, toggleTooltipBind );
              } else {
                element.bind( triggers.show, showTooltipBind );
                element.bind( triggers.hide, hideTooltipBind );
              }
            }
            prepTriggers();

            var animation = scope.$eval(attrs[prefix + 'Animation']);
            ttScope.animation = angular.isDefined(animation) ? !!animation : options.animation;

            var appendToBodyVal = scope.$eval(attrs[prefix + 'AppendToBody']);
            appendToBody = angular.isDefined(appendToBodyVal) ? appendToBodyVal : appendToBody;

            // if a tooltip is attached to <body> we need to remove it on
            // location change as its parent scope will probably not be destroyed
            // by the change.
            if ( appendToBody ) {
              scope.$on('$locationChangeSuccess', function closeTooltipOnLocationChangeSuccess () {
              if ( ttScope.isOpen ) {
                hide();
              }
            });
            }

            // Make sure tooltip is destroyed and removed.
            scope.$on('$destroy', function onDestroyTooltip() {
              $timeout.cancel( transitionTimeout );
              $timeout.cancel( popupTimeout );
              unregisterTriggers();
              removeTooltip();
              ttScope = null;
            });
          };
        }
      };
    };
  }];
})

// This is mostly ngInclude code but with a custom scope
.directive( 'tooltipTemplateTransclude', [
         '$animate', '$sce', '$compile', '$templateRequest',
function ($animate ,  $sce ,  $compile ,  $templateRequest) {
  return {
    link: function ( scope, elem, attrs ) {
      var origScope = scope.$eval(attrs.tooltipTemplateTranscludeScope);

      var changeCounter = 0,
        currentScope,
        previousElement,
        currentElement;

      var cleanupLastIncludeContent = function() {
        if (previousElement) {
          previousElement.remove();
          previousElement = null;
        }
        if (currentScope) {
          currentScope.$destroy();
          currentScope = null;
        }
        if (currentElement) {
          $animate.leave(currentElement).then(function() {
            previousElement = null;
          });
          previousElement = currentElement;
          currentElement = null;
        }
      };

      scope.$watch($sce.parseAsResourceUrl(attrs.tooltipTemplateTransclude), function (src) {
        var thisChangeId = ++changeCounter;

        if (src) {
          //set the 2nd param to true to ignore the template request error so that the inner
          //contents and scope can be cleaned up.
          $templateRequest(src, true).then(function(response) {
            if (thisChangeId !== changeCounter) { return; }
            var newScope = origScope.$new();
            var template = response;

            var clone = $compile(template)(newScope, function(clone) {
              cleanupLastIncludeContent();
              $animate.enter(clone, elem);
            });

            currentScope = newScope;
            currentElement = clone;

            currentScope.$emit('$includeContentLoaded', src);
          }, function() {
            if (thisChangeId === changeCounter) {
              cleanupLastIncludeContent();
              scope.$emit('$includeContentError', src);
            }
          });
          scope.$emit('$includeContentRequested', src);
        } else {
          cleanupLastIncludeContent();
        }
      });

      scope.$on('$destroy', cleanupLastIncludeContent);
    }
  };
}])

/**
 * Note that it's intentional that these classes are *not* applied through $animate.
 * They must not be animated as they're expected to be present on the tooltip on
 * initialization.
 */
.directive('tooltipClasses', function () {
  return {
    restrict: 'A',
    link: function (scope, element, attrs) {
      if (scope.placement) {
        element.addClass(scope.placement);
      }
      if (scope.popupClass) {
        element.addClass(scope.popupClass);
      }
      if (scope.animation()) {
        element.addClass(attrs.tooltipAnimationClass);
      }
    }
  };
})

.directive( 'tooltipPopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/tooltip/tooltip-popup.html'
  };
})

.directive( 'tooltip', [ '$tooltip', function ( $tooltip ) {
  return $tooltip( 'tooltip', 'tooltip', 'mouseenter' );
}])

.directive( 'tooltipTemplatePopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',
      originScope: '&' },
    templateUrl: 'template/tooltip/tooltip-template-popup.html'
  };
})

.directive( 'tooltipTemplate', [ '$tooltip', function ( $tooltip ) {
  return $tooltip('tooltipTemplate', 'tooltip', 'mouseenter', {
    useContentExp: true
  });
}])

.directive( 'tooltipHtmlPopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/tooltip/tooltip-html-popup.html'
  };
})

.directive( 'tooltipHtml', [ '$tooltip', function ( $tooltip ) {
  return $tooltip('tooltipHtml', 'tooltip', 'mouseenter', {
    useContentExp: true
  });
}])

/*
Deprecated
*/
.directive( 'tooltipHtmlUnsafePopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/tooltip/tooltip-html-unsafe-popup.html'
  };
})

.value('tooltipHtmlUnsafeSuppressDeprecated', false)
.directive( 'tooltipHtmlUnsafe', [
          '$tooltip', 'tooltipHtmlUnsafeSuppressDeprecated', '$log',
function ( $tooltip ,  tooltipHtmlUnsafeSuppressDeprecated ,  $log) {
  if (!tooltipHtmlUnsafeSuppressDeprecated) {
    $log.warn('tooltip-html-unsafe is now deprecated. Use tooltip-html or tooltip-template instead.');
  }
  return $tooltip( 'tooltipHtmlUnsafe', 'tooltip', 'mouseenter' );
}]);

/**
 * The following features are still outstanding: popup delay, animation as a
 * function, placement as a function, inside, support for more triggers than
 * just mouse enter/leave, html popovers, and selector delegatation.
 */
angular.module( 'ui.bootstrap.popover', [ 'ui.bootstrap.tooltip' ] )

.directive( 'popoverTemplatePopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { title: '@', contentExp: '&', placement: '@', popupClass: '@', animation: '&', isOpen: '&',
      originScope: '&' },
    templateUrl: 'template/popover/popover-template.html'
  };
})

.directive( 'popoverTemplate', [ '$tooltip', function ( $tooltip ) {
  return $tooltip( 'popoverTemplate', 'popover', 'click', {
    useContentExp: true
  } );
}])

.directive( 'popoverPopup', function () {
  return {
    restrict: 'EA',
    replace: true,
    scope: { title: '@', content: '@', placement: '@', popupClass: '@', animation: '&', isOpen: '&' },
    templateUrl: 'template/popover/popover.html'
  };
})

.directive( 'popover', [ '$tooltip', function ( $tooltip ) {
  return $tooltip( 'popover', 'popover', 'click' );
}]);

angular.module('ui.bootstrap.progressbar', [])

.constant('progressConfig', {
  animate: true,
  max: 100
})

.controller('ProgressController', ['$scope', '$attrs', 'progressConfig', function($scope, $attrs, progressConfig) {
    var self = this,
        animate = angular.isDefined($attrs.animate) ? $scope.$parent.$eval($attrs.animate) : progressConfig.animate;

    this.bars = [];
    $scope.max = angular.isDefined($scope.max) ? $scope.max : progressConfig.max;

    this.addBar = function(bar, element) {
        if ( !animate ) {
            element.css({'transition': 'none'});
        }

        this.bars.push(bar);

        bar.$watch('value', function( value ) {
            bar.percent = +(100 * value / $scope.max).toFixed(2);
        });

        bar.$on('$destroy', function() {
            element = null;
            self.removeBar(bar);
        });
    };

    this.removeBar = function(bar) {
        this.bars.splice(this.bars.indexOf(bar), 1);
    };
}])

.directive('progress', function() {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        controller: 'ProgressController',
        require: 'progress',
        scope: {},
        templateUrl: 'template/progressbar/progress.html'
    };
})

.directive('bar', function() {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        require: '^progress',
        scope: {
            value: '=',
            max: '=?',
            type: '@'
        },
        templateUrl: 'template/progressbar/bar.html',
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, element);
        }
    };
})

.directive('progressbar', function() {
    return {
        restrict: 'EA',
        replace: true,
        transclude: true,
        controller: 'ProgressController',
        scope: {
            value: '=',
            max: '=?',
            type: '@'
        },
        templateUrl: 'template/progressbar/progressbar.html',
        link: function(scope, element, attrs, progressCtrl) {
            progressCtrl.addBar(scope, angular.element(element.children()[0]));
        }
    };
});

angular.module('ui.bootstrap.rating', [])

.constant('ratingConfig', {
  max: 5,
  stateOn: null,
  stateOff: null
})

.controller('RatingController', ['$scope', '$attrs', 'ratingConfig', function($scope, $attrs, ratingConfig) {
  var ngModelCtrl  = { $setViewValue: angular.noop };

  this.init = function(ngModelCtrl_) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    ngModelCtrl.$formatters.push(function(value) {
      if (angular.isNumber(value) && value << 0 !== value) {
        value = Math.round(value);
      }
      return value;
    });

    this.stateOn = angular.isDefined($attrs.stateOn) ? $scope.$parent.$eval($attrs.stateOn) : ratingConfig.stateOn;
    this.stateOff = angular.isDefined($attrs.stateOff) ? $scope.$parent.$eval($attrs.stateOff) : ratingConfig.stateOff;

    var ratingStates = angular.isDefined($attrs.ratingStates) ? $scope.$parent.$eval($attrs.ratingStates) :
                        new Array( angular.isDefined($attrs.max) ? $scope.$parent.$eval($attrs.max) : ratingConfig.max );
    $scope.range = this.buildTemplateObjects(ratingStates);
  };

  this.buildTemplateObjects = function(states) {
    for (var i = 0, n = states.length; i < n; i++) {
      states[i] = angular.extend({ index: i }, { stateOn: this.stateOn, stateOff: this.stateOff }, states[i]);
    }
    return states;
  };

  $scope.rate = function(value) {
    if ( !$scope.readonly && value >= 0 && value <= $scope.range.length ) {
      ngModelCtrl.$setViewValue(value);
      ngModelCtrl.$render();
    }
  };

  $scope.enter = function(value) {
    if ( !$scope.readonly ) {
      $scope.value = value;
    }
    $scope.onHover({value: value});
  };

  $scope.reset = function() {
    $scope.value = ngModelCtrl.$viewValue;
    $scope.onLeave();
  };

  $scope.onKeydown = function(evt) {
    if (/(37|38|39|40)/.test(evt.which)) {
      evt.preventDefault();
      evt.stopPropagation();
      $scope.rate( $scope.value + (evt.which === 38 || evt.which === 39 ? 1 : -1) );
    }
  };

  this.render = function() {
    $scope.value = ngModelCtrl.$viewValue;
  };
}])

.directive('rating', function() {
  return {
    restrict: 'EA',
    require: ['rating', 'ngModel'],
    scope: {
      readonly: '=?',
      onHover: '&',
      onLeave: '&'
    },
    controller: 'RatingController',
    templateUrl: 'template/rating/rating.html',
    replace: true,
    link: function(scope, element, attrs, ctrls) {
      var ratingCtrl = ctrls[0], ngModelCtrl = ctrls[1];
      ratingCtrl.init( ngModelCtrl );
    }
  };
});

/**
 * @ngdoc overview
 * @name ui.bootstrap.tabs
 *
 * @description
 * AngularJS version of the tabs directive.
 */

angular.module('ui.bootstrap.tabs', [])

.controller('TabsetController', ['$scope', function TabsetCtrl($scope) {
  var ctrl = this,
      tabs = ctrl.tabs = $scope.tabs = [];

  ctrl.select = function(selectedTab) {
    angular.forEach(tabs, function(tab) {
      if (tab.active && tab !== selectedTab) {
        tab.active = false;
        tab.onDeselect();
      }
    });
    selectedTab.active = true;
    selectedTab.onSelect();
  };

  ctrl.addTab = function addTab(tab) {
    tabs.push(tab);
    // we can't run the select function on the first tab
    // since that would select it twice
    if (tabs.length === 1 && tab.active !== false) {
      tab.active = true;
    } else if (tab.active) {
      ctrl.select(tab);
    }
    else {
      tab.active = false;
    }
  };

  ctrl.removeTab = function removeTab(tab) {
    var index = tabs.indexOf(tab);
    //Select a new tab if the tab to be removed is selected and not destroyed
    if (tab.active && tabs.length > 1 && !destroyed) {
      //If this is the last tab, select the previous tab. else, the next tab.
      var newActiveIndex = index == tabs.length - 1 ? index - 1 : index + 1;
      ctrl.select(tabs[newActiveIndex]);
    }
    tabs.splice(index, 1);
  };

  var destroyed;
  $scope.$on('$destroy', function() {
    destroyed = true;
  });
}])

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tabset
 * @restrict EA
 *
 * @description
 * Tabset is the outer container for the tabs directive
 *
 * @param {boolean=} vertical Whether or not to use vertical styling for the tabs.
 * @param {boolean=} justified Whether or not to use justified styling for the tabs.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <tabset>
      <tab heading="Tab 1"><b>First</b> Content!</tab>
      <tab heading="Tab 2"><i>Second</i> Content!</tab>
    </tabset>
    <hr />
    <tabset vertical="true">
      <tab heading="Vertical Tab 1"><b>First</b> Vertical Content!</tab>
      <tab heading="Vertical Tab 2"><i>Second</i> Vertical Content!</tab>
    </tabset>
    <tabset justified="true">
      <tab heading="Justified Tab 1"><b>First</b> Justified Content!</tab>
      <tab heading="Justified Tab 2"><i>Second</i> Justified Content!</tab>
    </tabset>
  </file>
</example>
 */
.directive('tabset', function() {
  return {
    restrict: 'EA',
    transclude: true,
    replace: true,
    scope: {
      type: '@'
    },
    controller: 'TabsetController',
    templateUrl: 'template/tabs/tabset.html',
    link: function(scope, element, attrs) {
      scope.vertical = angular.isDefined(attrs.vertical) ? scope.$parent.$eval(attrs.vertical) : false;
      scope.justified = angular.isDefined(attrs.justified) ? scope.$parent.$eval(attrs.justified) : false;
    }
  };
})

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tab
 * @restrict EA
 *
 * @param {string=} heading The visible heading, or title, of the tab. Set HTML headings with {@link ui.bootstrap.tabs.directive:tabHeading tabHeading}.
 * @param {string=} select An expression to evaluate when the tab is selected.
 * @param {boolean=} active A binding, telling whether or not this tab is selected.
 * @param {boolean=} disabled A binding, telling whether or not this tab is disabled.
 *
 * @description
 * Creates a tab with a heading and content. Must be placed within a {@link ui.bootstrap.tabs.directive:tabset tabset}.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <div ng-controller="TabsDemoCtrl">
      <button class="btn btn-small" ng-click="items[0].active = true">
        Select item 1, using active binding
      </button>
      <button class="btn btn-small" ng-click="items[1].disabled = !items[1].disabled">
        Enable/disable item 2, using disabled binding
      </button>
      <br />
      <tabset>
        <tab heading="Tab 1">First Tab</tab>
        <tab select="alertMe()">
          <tab-heading><i class="icon-bell"></i> Alert me!</tab-heading>
          Second Tab, with alert callback and html heading!
        </tab>
        <tab ng-repeat="item in items"
          heading="{{item.title}}"
          disabled="item.disabled"
          active="item.active">
          {{item.content}}
        </tab>
      </tabset>
    </div>
  </file>
  <file name="script.js">
    function TabsDemoCtrl($scope) {
      $scope.items = [
        { title:"Dynamic Title 1", content:"Dynamic Item 0" },
        { title:"Dynamic Title 2", content:"Dynamic Item 1", disabled: true }
      ];

      $scope.alertMe = function() {
        setTimeout(function() {
          alert("You've selected the alert tab!");
        });
      };
    };
  </file>
</example>
 */

/**
 * @ngdoc directive
 * @name ui.bootstrap.tabs.directive:tabHeading
 * @restrict EA
 *
 * @description
 * Creates an HTML heading for a {@link ui.bootstrap.tabs.directive:tab tab}. Must be placed as a child of a tab element.
 *
 * @example
<example module="ui.bootstrap">
  <file name="index.html">
    <tabset>
      <tab>
        <tab-heading><b>HTML</b> in my titles?!</tab-heading>
        And some content, too!
      </tab>
      <tab>
        <tab-heading><i class="icon-heart"></i> Icon heading?!?</tab-heading>
        That's right.
      </tab>
    </tabset>
  </file>
</example>
 */
.directive('tab', ['$parse', '$log', function($parse, $log) {
  return {
    require: '^tabset',
    restrict: 'EA',
    replace: true,
    templateUrl: 'template/tabs/tab.html',
    transclude: true,
    scope: {
      active: '=?',
      heading: '@',
      onSelect: '&select', //This callback is called in contentHeadingTransclude
                          //once it inserts the tab's content into the dom
      onDeselect: '&deselect'
    },
    controller: function() {
      //Empty controller so other directives can require being 'under' a tab
    },
    compile: function(elm, attrs, transclude) {
      return function postLink(scope, elm, attrs, tabsetCtrl) {
        scope.$watch('active', function(active) {
          if (active) {
            tabsetCtrl.select(scope);
          }
        });

        scope.disabled = false;
        if ( attrs.disable ) {
          scope.$parent.$watch($parse(attrs.disable), function(value) {
            scope.disabled = !! value;
          });
        }

        // Deprecation support of "disabled" parameter
        // fix(tab): IE9 disabled attr renders grey text on enabled tab #2677
        // This code is duplicated from the lines above to make it easy to remove once
        // the feature has been completely deprecated
        if ( attrs.disabled ) {
          $log.warn('Use of "disabled" attribute has been deprecated, please use "disable"');
          scope.$parent.$watch($parse(attrs.disabled), function(value) {
            scope.disabled = !! value;
          });
        }

        scope.select = function() {
          if ( !scope.disabled ) {
            scope.active = true;
          }
        };

        tabsetCtrl.addTab(scope);
        scope.$on('$destroy', function() {
          tabsetCtrl.removeTab(scope);
        });

        //We need to transclude later, once the content container is ready.
        //when this link happens, we're inside a tab heading.
        scope.$transcludeFn = transclude;
      };
    }
  };
}])

.directive('tabHeadingTransclude', [function() {
  return {
    restrict: 'A',
    require: '^tab',
    link: function(scope, elm, attrs, tabCtrl) {
      scope.$watch('headingElement', function updateHeadingElement(heading) {
        if (heading) {
          elm.html('');
          elm.append(heading);
        }
      });
    }
  };
}])

.directive('tabContentTransclude', function() {
  return {
    restrict: 'A',
    require: '^tabset',
    link: function(scope, elm, attrs) {
      var tab = scope.$eval(attrs.tabContentTransclude);

      //Now our tab is ready to be transcluded: both the tab heading area
      //and the tab content area are loaded.  Transclude 'em both.
      tab.$transcludeFn(tab.$parent, function(contents) {
        angular.forEach(contents, function(node) {
          if (isTabHeading(node)) {
            //Let tabHeadingTransclude know.
            tab.headingElement = node;
          } else {
            elm.append(node);
          }
        });
      });
    }
  };
  function isTabHeading(node) {
    return node.tagName &&  (
      node.hasAttribute('tab-heading') ||
      node.hasAttribute('data-tab-heading') ||
      node.tagName.toLowerCase() === 'tab-heading' ||
      node.tagName.toLowerCase() === 'data-tab-heading'
    );
  }
})

;

angular.module('ui.bootstrap.timepicker', [])

.constant('timepickerConfig', {
  hourStep: 1,
  minuteStep: 1,
  showMeridian: true,
  meridians: null,
  readonlyInput: false,
  mousewheel: true,
  arrowkeys: true
})

.controller('TimepickerController', ['$scope', '$attrs', '$parse', '$log', '$locale', 'timepickerConfig', function($scope, $attrs, $parse, $log, $locale, timepickerConfig) {
  var selected = new Date(),
      ngModelCtrl = { $setViewValue: angular.noop }, // nullModelCtrl
      meridians = angular.isDefined($attrs.meridians) ? $scope.$parent.$eval($attrs.meridians) : timepickerConfig.meridians || $locale.DATETIME_FORMATS.AMPMS;

  this.init = function( ngModelCtrl_, inputs ) {
    ngModelCtrl = ngModelCtrl_;
    ngModelCtrl.$render = this.render;

    ngModelCtrl.$formatters.unshift(function (modelValue) {
      return modelValue ? new Date( modelValue ) : null;
    });

    var hoursInputEl = inputs.eq(0),
        minutesInputEl = inputs.eq(1);

    var mousewheel = angular.isDefined($attrs.mousewheel) ? $scope.$parent.$eval($attrs.mousewheel) : timepickerConfig.mousewheel;
    if ( mousewheel ) {
      this.setupMousewheelEvents( hoursInputEl, minutesInputEl );
    }

    var arrowkeys = angular.isDefined($attrs.arrowkeys) ? $scope.$parent.$eval($attrs.arrowkeys) : timepickerConfig.arrowkeys;
    if (arrowkeys) {
      this.setupArrowkeyEvents( hoursInputEl, minutesInputEl );
    }

    $scope.readonlyInput = angular.isDefined($attrs.readonlyInput) ? $scope.$parent.$eval($attrs.readonlyInput) : timepickerConfig.readonlyInput;
    this.setupInputEvents( hoursInputEl, minutesInputEl );
  };

  var hourStep = timepickerConfig.hourStep;
  if ($attrs.hourStep) {
    $scope.$parent.$watch($parse($attrs.hourStep), function(value) {
      hourStep = parseInt(value, 10);
    });
  }

  var minuteStep = timepickerConfig.minuteStep;
  if ($attrs.minuteStep) {
    $scope.$parent.$watch($parse($attrs.minuteStep), function(value) {
      minuteStep = parseInt(value, 10);
    });
  }

  // 12H / 24H mode
  $scope.showMeridian = timepickerConfig.showMeridian;
  if ($attrs.showMeridian) {
    $scope.$parent.$watch($parse($attrs.showMeridian), function(value) {
      $scope.showMeridian = !!value;

      if ( ngModelCtrl.$error.time ) {
        // Evaluate from template
        var hours = getHoursFromTemplate(), minutes = getMinutesFromTemplate();
        if (angular.isDefined( hours ) && angular.isDefined( minutes )) {
          selected.setHours( hours );
          refresh();
        }
      } else {
        updateTemplate();
      }
    });
  }

  // Get $scope.hours in 24H mode if valid
  function getHoursFromTemplate ( ) {
    var hours = parseInt( $scope.hours, 10 );
    var valid = ( $scope.showMeridian ) ? (hours > 0 && hours < 13) : (hours >= 0 && hours < 24);
    if ( !valid ) {
      return undefined;
    }

    if ( $scope.showMeridian ) {
      if ( hours === 12 ) {
        hours = 0;
      }
      if ( $scope.meridian === meridians[1] ) {
        hours = hours + 12;
      }
    }
    return hours;
  }

  function getMinutesFromTemplate() {
    var minutes = parseInt($scope.minutes, 10);
    return ( minutes >= 0 && minutes < 60 ) ? minutes : undefined;
  }

  function pad( value ) {
    return ( angular.isDefined(value) && value.toString().length < 2 ) ? '0' + value : value.toString();
  }

  // Respond on mousewheel spin
  this.setupMousewheelEvents = function( hoursInputEl, minutesInputEl ) {
    var isScrollingUp = function(e) {
      if (e.originalEvent) {
        e = e.originalEvent;
      }
      //pick correct delta variable depending on event
      var delta = (e.wheelDelta) ? e.wheelDelta : -e.deltaY;
      return (e.detail || delta > 0);
    };

    hoursInputEl.bind('mousewheel wheel', function(e) {
      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementHours() : $scope.decrementHours() );
      e.preventDefault();
    });

    minutesInputEl.bind('mousewheel wheel', function(e) {
      $scope.$apply( (isScrollingUp(e)) ? $scope.incrementMinutes() : $scope.decrementMinutes() );
      e.preventDefault();
    });

  };

  // Respond on up/down arrowkeys
  this.setupArrowkeyEvents = function( hoursInputEl, minutesInputEl ) {
    hoursInputEl.bind('keydown', function(e) {
      if ( e.which === 38 ) { // up
        e.preventDefault();
        $scope.incrementHours();
        $scope.$apply();
      }
      else if ( e.which === 40 ) { // down
        e.preventDefault();
        $scope.decrementHours();
        $scope.$apply();
      }
    });

    minutesInputEl.bind('keydown', function(e) {
      if ( e.which === 38 ) { // up
        e.preventDefault();
        $scope.incrementMinutes();
        $scope.$apply();
      }
      else if ( e.which === 40 ) { // down
        e.preventDefault();
        $scope.decrementMinutes();
        $scope.$apply();
      }
    });
  };

  this.setupInputEvents = function( hoursInputEl, minutesInputEl ) {
    if ( $scope.readonlyInput ) {
      $scope.updateHours = angular.noop;
      $scope.updateMinutes = angular.noop;
      return;
    }

    var invalidate = function(invalidHours, invalidMinutes) {
      ngModelCtrl.$setViewValue( null );
      ngModelCtrl.$setValidity('time', false);
      if (angular.isDefined(invalidHours)) {
        $scope.invalidHours = invalidHours;
      }
      if (angular.isDefined(invalidMinutes)) {
        $scope.invalidMinutes = invalidMinutes;
      }
    };

    $scope.updateHours = function() {
      var hours = getHoursFromTemplate();

      if ( angular.isDefined(hours) ) {
        selected.setHours( hours );
        refresh( 'h' );
      } else {
        invalidate(true);
      }
    };

    hoursInputEl.bind('blur', function(e) {
      if ( !$scope.invalidHours && $scope.hours < 10) {
        $scope.$apply( function() {
          $scope.hours = pad( $scope.hours );
        });
      }
    });

    $scope.updateMinutes = function() {
      var minutes = getMinutesFromTemplate();

      if ( angular.isDefined(minutes) ) {
        selected.setMinutes( minutes );
        refresh( 'm' );
      } else {
        invalidate(undefined, true);
      }
    };

    minutesInputEl.bind('blur', function(e) {
      if ( !$scope.invalidMinutes && $scope.minutes < 10 ) {
        $scope.$apply( function() {
          $scope.minutes = pad( $scope.minutes );
        });
      }
    });

  };

  this.render = function() {
    var date = ngModelCtrl.$viewValue;

    if ( isNaN(date) ) {
      ngModelCtrl.$setValidity('time', false);
      $log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.');
    } else {
      if ( date ) {
        selected = date;
      }
      makeValid();
      updateTemplate();
    }
  };

  // Call internally when we know that model is valid.
  function refresh( keyboardChange ) {
    makeValid();
    ngModelCtrl.$setViewValue( new Date(selected) );
    updateTemplate( keyboardChange );
  }

  function makeValid() {
    ngModelCtrl.$setValidity('time', true);
    $scope.invalidHours = false;
    $scope.invalidMinutes = false;
  }

  function updateTemplate( keyboardChange ) {
    var hours = selected.getHours(), minutes = selected.getMinutes();

    if ( $scope.showMeridian ) {
      hours = ( hours === 0 || hours === 12 ) ? 12 : hours % 12; // Convert 24 to 12 hour system
    }

    $scope.hours = keyboardChange === 'h' ? hours : pad(hours);
    if (keyboardChange !== 'm') {
      $scope.minutes = pad(minutes);
    }
    $scope.meridian = selected.getHours() < 12 ? meridians[0] : meridians[1];
  }

  function addMinutes( minutes ) {
    var dt = new Date( selected.getTime() + minutes * 60000 );
    selected.setHours( dt.getHours(), dt.getMinutes() );
    refresh();
  }

  $scope.incrementHours = function() {
    addMinutes( hourStep * 60 );
  };
  $scope.decrementHours = function() {
    addMinutes( - hourStep * 60 );
  };
  $scope.incrementMinutes = function() {
    addMinutes( minuteStep );
  };
  $scope.decrementMinutes = function() {
    addMinutes( - minuteStep );
  };
  $scope.toggleMeridian = function() {
    addMinutes( 12 * 60 * (( selected.getHours() < 12 ) ? 1 : -1) );
  };
}])

.directive('timepicker', function () {
  return {
    restrict: 'EA',
    require: ['timepicker', '?^ngModel'],
    controller:'TimepickerController',
    replace: true,
    scope: {},
    templateUrl: 'template/timepicker/timepicker.html',
    link: function(scope, element, attrs, ctrls) {
      var timepickerCtrl = ctrls[0], ngModelCtrl = ctrls[1];

      if ( ngModelCtrl ) {
        timepickerCtrl.init( ngModelCtrl, element.find('input') );
      }
    }
  };
});

angular.module('ui.bootstrap.transition', [])

.value('$transitionSuppressDeprecated', false)
/**
 * $transition service provides a consistent interface to trigger CSS 3 transitions and to be informed when they complete.
 * @param  {DOMElement} element  The DOMElement that will be animated.
 * @param  {string|object|function} trigger  The thing that will cause the transition to start:
 *   - As a string, it represents the css class to be added to the element.
 *   - As an object, it represents a hash of style attributes to be applied to the element.
 *   - As a function, it represents a function to be called that will cause the transition to occur.
 * @return {Promise}  A promise that is resolved when the transition finishes.
 */
.factory('$transition', [
        '$q', '$timeout', '$rootScope', '$log', '$transitionSuppressDeprecated',
function($q ,  $timeout ,  $rootScope ,  $log ,  $transitionSuppressDeprecated) {

  if (!$transitionSuppressDeprecated) {
    $log.warn('$transition is now deprecated. Use $animate from ngAnimate instead.');
  }

  var $transition = function(element, trigger, options) {
    options = options || {};
    var deferred = $q.defer();
    var endEventName = $transition[options.animation ? 'animationEndEventName' : 'transitionEndEventName'];

    var transitionEndHandler = function(event) {
      $rootScope.$apply(function() {
        element.unbind(endEventName, transitionEndHandler);
        deferred.resolve(element);
      });
    };

    if (endEventName) {
      element.bind(endEventName, transitionEndHandler);
    }

    // Wrap in a timeout to allow the browser time to update the DOM before the transition is to occur
    $timeout(function() {
      if ( angular.isString(trigger) ) {
        element.addClass(trigger);
      } else if ( angular.isFunction(trigger) ) {
        trigger(element);
      } else if ( angular.isObject(trigger) ) {
        element.css(trigger);
      }
      //If browser does not support transitions, instantly resolve
      if ( !endEventName ) {
        deferred.resolve(element);
      }
    });

    // Add our custom cancel function to the promise that is returned
    // We can call this if we are about to run a new transition, which we know will prevent this transition from ending,
    // i.e. it will therefore never raise a transitionEnd event for that transition
    deferred.promise.cancel = function() {
      if ( endEventName ) {
        element.unbind(endEventName, transitionEndHandler);
      }
      deferred.reject('Transition cancelled');
    };

    return deferred.promise;
  };

  // Work out the name of the transitionEnd event
  var transElement = document.createElement('trans');
  var transitionEndEventNames = {
    'WebkitTransition': 'webkitTransitionEnd',
    'MozTransition': 'transitionend',
    'OTransition': 'oTransitionEnd',
    'transition': 'transitionend'
  };
  var animationEndEventNames = {
    'WebkitTransition': 'webkitAnimationEnd',
    'MozTransition': 'animationend',
    'OTransition': 'oAnimationEnd',
    'transition': 'animationend'
  };
  function findEndEventName(endEventNames) {
    for (var name in endEventNames){
      if (transElement.style[name] !== undefined) {
        return endEventNames[name];
      }
    }
  }
  $transition.transitionEndEventName = findEndEventName(transitionEndEventNames);
  $transition.animationEndEventName = findEndEventName(animationEndEventNames);
  return $transition;
}]);

angular.module('ui.bootstrap.typeahead', ['ui.bootstrap.position', 'ui.bootstrap.bindHtml'])

/**
 * A helper service that can parse typeahead's syntax (string provided by users)
 * Extracted to a separate service for ease of unit testing
 */
  .factory('typeaheadParser', ['$parse', function ($parse) {

  //                      00000111000000000000022200000000000000003333333333333330000000000044000
  var TYPEAHEAD_REGEXP = /^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;

  return {
    parse:function (input) {

      var match = input.match(TYPEAHEAD_REGEXP);
      if (!match) {
        throw new Error(
          'Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_"' +
            ' but got "' + input + '".');
      }

      return {
        itemName:match[3],
        source:$parse(match[4]),
        viewMapper:$parse(match[2] || match[1]),
        modelMapper:$parse(match[1])
      };
    }
  };
}])

  .directive('typeahead', ['$compile', '$parse', '$q', '$timeout', '$document', '$position', 'typeaheadParser',
    function ($compile, $parse, $q, $timeout, $document, $position, typeaheadParser) {

  var HOT_KEYS = [9, 13, 27, 38, 40];

  return {
    require:'ngModel',
    link:function (originalScope, element, attrs, modelCtrl) {

      //SUPPORTED ATTRIBUTES (OPTIONS)

      //minimal no of characters that needs to be entered before typeahead kicks-in
      var minSearch = originalScope.$eval(attrs.typeaheadMinLength) || 1;

      //minimal wait time after last character typed before typeahead kicks-in
      var waitTime = originalScope.$eval(attrs.typeaheadWaitMs) || 0;

      //should it restrict model values to the ones selected from the popup only?
      var isEditable = originalScope.$eval(attrs.typeaheadEditable) !== false;

      //binding to a variable that indicates if matches are being retrieved asynchronously
      var isLoadingSetter = $parse(attrs.typeaheadLoading).assign || angular.noop;

      //a callback executed when a match is selected
      var onSelectCallback = $parse(attrs.typeaheadOnSelect);

      var inputFormatter = attrs.typeaheadInputFormatter ? $parse(attrs.typeaheadInputFormatter) : undefined;

      var appendToBody =  attrs.typeaheadAppendToBody ? originalScope.$eval(attrs.typeaheadAppendToBody) : false;

      var focusFirst = originalScope.$eval(attrs.typeaheadFocusFirst) !== false;

      //INTERNAL VARIABLES

      //model setter executed upon match selection
      var $setModelValue = $parse(attrs.ngModel).assign;

      //expressions used by typeahead
      var parserResult = typeaheadParser.parse(attrs.typeahead);

      var hasFocus;

      //create a child scope for the typeahead directive so we are not polluting original scope
      //with typeahead-specific data (matches, query etc.)
      var scope = originalScope.$new();
      originalScope.$on('$destroy', function(){
        scope.$destroy();
      });

      // WAI-ARIA
      var popupId = 'typeahead-' + scope.$id + '-' + Math.floor(Math.random() * 10000);
      element.attr({
        'aria-autocomplete': 'list',
        'aria-expanded': false,
        'aria-owns': popupId
      });

      //pop-up element used to display matches
      var popUpEl = angular.element('<div typeahead-popup></div>');
      popUpEl.attr({
        id: popupId,
        matches: 'matches',
        active: 'activeIdx',
        select: 'select(activeIdx)',
        query: 'query',
        position: 'position'
      });
      //custom item template
      if (angular.isDefined(attrs.typeaheadTemplateUrl)) {
        popUpEl.attr('template-url', attrs.typeaheadTemplateUrl);
      }

      var resetMatches = function() {
        scope.matches = [];
        scope.activeIdx = -1;
        element.attr('aria-expanded', false);
      };

      var getMatchId = function(index) {
        return popupId + '-option-' + index;
      };

      // Indicate that the specified match is the active (pre-selected) item in the list owned by this typeahead.
      // This attribute is added or removed automatically when the `activeIdx` changes.
      scope.$watch('activeIdx', function(index) {
        if (index < 0) {
          element.removeAttr('aria-activedescendant');
        } else {
          element.attr('aria-activedescendant', getMatchId(index));
        }
      });

      var getMatchesAsync = function(inputValue) {

        var locals = {$viewValue: inputValue};
        isLoadingSetter(originalScope, true);
        $q.when(parserResult.source(originalScope, locals)).then(function(matches) {

          //it might happen that several async queries were in progress if a user were typing fast
          //but we are interested only in responses that correspond to the current view value
          var onCurrentRequest = (inputValue === modelCtrl.$viewValue);
          if (onCurrentRequest && hasFocus) {
            if (matches && matches.length > 0) {

              scope.activeIdx = focusFirst ? 0 : -1;
              scope.matches.length = 0;

              //transform labels
              for(var i=0; i<matches.length; i++) {
                locals[parserResult.itemName] = matches[i];
                scope.matches.push({
                  id: getMatchId(i),
                  label: parserResult.viewMapper(scope, locals),
                  model: matches[i]
                });
              }

              scope.query = inputValue;
              //position pop-up with matches - we need to re-calculate its position each time we are opening a window
              //with matches as a pop-up might be absolute-positioned and position of an input might have changed on a page
              //due to other elements being rendered
              scope.position = appendToBody ? $position.offset(element) : $position.position(element);
              scope.position.top = scope.position.top + element.prop('offsetHeight');

              element.attr('aria-expanded', true);
            } else {
              resetMatches();
            }
          }
          if (onCurrentRequest) {
            isLoadingSetter(originalScope, false);
          }
        }, function(){
          resetMatches();
          isLoadingSetter(originalScope, false);
        });
      };

      resetMatches();

      //we need to propagate user's query so we can higlight matches
      scope.query = undefined;

      //Declare the timeout promise var outside the function scope so that stacked calls can be cancelled later
      var timeoutPromise;

      var scheduleSearchWithTimeout = function(inputValue) {
        timeoutPromise = $timeout(function () {
          getMatchesAsync(inputValue);
        }, waitTime);
      };

      var cancelPreviousTimeout = function() {
        if (timeoutPromise) {
          $timeout.cancel(timeoutPromise);
        }
      };

      //plug into $parsers pipeline to open a typeahead on view changes initiated from DOM
      //$parsers kick-in on all the changes coming from the view as well as manually triggered by $setViewValue
      modelCtrl.$parsers.unshift(function (inputValue) {

        hasFocus = true;

        if (inputValue && inputValue.length >= minSearch) {
          if (waitTime > 0) {
            cancelPreviousTimeout();
            scheduleSearchWithTimeout(inputValue);
          } else {
            getMatchesAsync(inputValue);
          }
        } else {
          isLoadingSetter(originalScope, false);
          cancelPreviousTimeout();
          resetMatches();
        }

        if (isEditable) {
          return inputValue;
        } else {
          if (!inputValue) {
            // Reset in case user had typed something previously.
            modelCtrl.$setValidity('editable', true);
            return inputValue;
          } else {
            modelCtrl.$setValidity('editable', false);
            return undefined;
          }
        }
      });

      modelCtrl.$formatters.push(function (modelValue) {

        var candidateViewValue, emptyViewValue;
        var locals = {};

        // The validity may be set to false via $parsers (see above) if
        // the model is restricted to selected values. If the model
        // is set manually it is considered to be valid.
        if (!isEditable) {
          modelCtrl.$setValidity('editable', true);
        }

        if (inputFormatter) {

          locals.$model = modelValue;
          return inputFormatter(originalScope, locals);

        } else {

          //it might happen that we don't have enough info to properly render input value
          //we need to check for this situation and simply return model value if we can't apply custom formatting
          locals[parserResult.itemName] = modelValue;
          candidateViewValue = parserResult.viewMapper(originalScope, locals);
          locals[parserResult.itemName] = undefined;
          emptyViewValue = parserResult.viewMapper(originalScope, locals);

          return candidateViewValue!== emptyViewValue ? candidateViewValue : modelValue;
        }
      });

      scope.select = function (activeIdx) {
        //called from within the $digest() cycle
        var locals = {};
        var model, item;

        locals[parserResult.itemName] = item = scope.matches[activeIdx].model;
        model = parserResult.modelMapper(originalScope, locals);
        $setModelValue(originalScope, model);
        modelCtrl.$setValidity('editable', true);
        modelCtrl.$setValidity('parse', true);

        onSelectCallback(originalScope, {
          $item: item,
          $model: model,
          $label: parserResult.viewMapper(originalScope, locals)
        });

        resetMatches();

        //return focus to the input element if a match was selected via a mouse click event
        // use timeout to avoid $rootScope:inprog error
        $timeout(function() { element[0].focus(); }, 0, false);
      };

      //bind keyboard events: arrows up(38) / down(40), enter(13) and tab(9), esc(27)
      element.bind('keydown', function (evt) {

        //typeahead is open and an "interesting" key was pressed
        if (scope.matches.length === 0 || HOT_KEYS.indexOf(evt.which) === -1) {
          return;
        }

        // if there's nothing selected (i.e. focusFirst) and enter is hit, don't do anything
        if (scope.activeIdx == -1 && (evt.which === 13 || evt.which === 9)) {
          return;
        }

        evt.preventDefault();

        if (evt.which === 40) {
          scope.activeIdx = (scope.activeIdx + 1) % scope.matches.length;
          scope.$digest();

        } else if (evt.which === 38) {
          scope.activeIdx = (scope.activeIdx > 0 ? scope.activeIdx : scope.matches.length) - 1;
          scope.$digest();

        } else if (evt.which === 13 || evt.which === 9) {
          scope.$apply(function () {
            scope.select(scope.activeIdx);
          });

        } else if (evt.which === 27) {
          evt.stopPropagation();

          resetMatches();
          scope.$digest();
        }
      });

      element.bind('blur', function (evt) {
        hasFocus = false;
      });

      // Keep reference to click handler to unbind it.
      var dismissClickHandler = function (evt) {
        if (element[0] !== evt.target) {
          resetMatches();
          scope.$digest();
        }
      };

      $document.bind('click', dismissClickHandler);

      originalScope.$on('$destroy', function(){
        $document.unbind('click', dismissClickHandler);
        if (appendToBody) {
          $popup.remove();
        }
        // Prevent jQuery cache memory leak
        popUpEl.remove();
      });

      var $popup = $compile(popUpEl)(scope);

      if (appendToBody) {
        $document.find('body').append($popup);
      } else {
        element.after($popup);
      }
    }
  };

}])

  .directive('typeaheadPopup', function () {
    return {
      restrict:'EA',
      scope:{
        matches:'=',
        query:'=',
        active:'=',
        position:'=',
        select:'&'
      },
      replace:true,
      templateUrl:'template/typeahead/typeahead-popup.html',
      link:function (scope, element, attrs) {

        scope.templateUrl = attrs.templateUrl;

        scope.isOpen = function () {
          return scope.matches.length > 0;
        };

        scope.isActive = function (matchIdx) {
          return scope.active == matchIdx;
        };

        scope.selectActive = function (matchIdx) {
          scope.active = matchIdx;
        };

        scope.selectMatch = function (activeIdx) {
          scope.select({activeIdx:activeIdx});
        };
      }
    };
  })

  .directive('typeaheadMatch', ['$templateRequest', '$compile', '$parse', function ($templateRequest, $compile, $parse) {
    return {
      restrict:'EA',
      scope:{
        index:'=',
        match:'=',
        query:'='
      },
      link:function (scope, element, attrs) {
        var tplUrl = $parse(attrs.templateUrl)(scope.$parent) || 'template/typeahead/typeahead-match.html';
        $templateRequest(tplUrl).then(function(tplContent) {
          $compile(tplContent.trim())(scope, function(clonedElement){
            element.replaceWith(clonedElement);
          });
        });
      }
    };
  }])

  .filter('typeaheadHighlight', function() {

    function escapeRegexp(queryToEscape) {
      return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }

    return function(matchItem, query) {
      return query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<strong>$&</strong>') : matchItem;
    };
  });

angular.module("template/accordion/accordion-group.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/accordion/accordion-group.html",
    "<div class=\"panel panel-default\">\n" +
    "  <div class=\"panel-heading\">\n" +
    "    <h4 class=\"panel-title\">\n" +
    "      <a href=\"javascript:void(0)\" tabindex=\"0\" class=\"accordion-toggle\" ng-click=\"toggleOpen()\" accordion-transclude=\"heading\"><span ng-class=\"{'text-muted': isDisabled}\">{{heading}}</span></a>\n" +
    "    </h4>\n" +
    "  </div>\n" +
    "  <div class=\"panel-collapse collapse\" collapse=\"!isOpen\">\n" +
    "	  <div class=\"panel-body\" ng-transclude></div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/accordion/accordion.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/accordion/accordion.html",
    "<div class=\"panel-group\" ng-transclude></div>");
}]);

angular.module("template/alert/alert.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/alert/alert.html",
    "<div class=\"alert\" ng-class=\"['alert-' + (type || 'warning'), closeable ? 'alert-dismissable' : null]\" role=\"alert\">\n" +
    "    <button ng-show=\"closeable\" type=\"button\" class=\"close\" ng-click=\"close()\">\n" +
    "        <span aria-hidden=\"true\">&times;</span>\n" +
    "        <span class=\"sr-only\">Close</span>\n" +
    "    </button>\n" +
    "    <div ng-transclude></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/carousel/carousel.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/carousel/carousel.html",
    "<div ng-mouseenter=\"pause()\" ng-mouseleave=\"play()\" class=\"carousel\" ng-swipe-right=\"prev()\" ng-swipe-left=\"next()\">\n" +
    "    <ol class=\"carousel-indicators\" ng-show=\"slides.length > 1\">\n" +
    "        <li ng-repeat=\"slide in slides | orderBy:'index' track by $index\" ng-class=\"{active: isActive(slide)}\" ng-click=\"select(slide)\"></li>\n" +
    "    </ol>\n" +
    "    <div class=\"carousel-inner\" ng-transclude></div>\n" +
    "    <a class=\"left carousel-control\" ng-click=\"prev()\" ng-show=\"slides.length > 1\"><span class=\"glyphicon glyphicon-chevron-left\"></span></a>\n" +
    "    <a class=\"right carousel-control\" ng-click=\"next()\" ng-show=\"slides.length > 1\"><span class=\"glyphicon glyphicon-chevron-right\"></span></a>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/carousel/slide.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/carousel/slide.html",
    "<div ng-class=\"{\n" +
    "    'active': active\n" +
    "  }\" class=\"item text-center\" ng-transclude></div>\n" +
    "");
}]);

angular.module("template/datepicker/datepicker.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/datepicker.html",
    "<div ng-switch=\"datepickerMode\" role=\"application\" ng-keydown=\"keydown($event)\">\n" +
    "  <daypicker ng-switch-when=\"day\" tabindex=\"0\"></daypicker>\n" +
    "  <monthpicker ng-switch-when=\"month\" tabindex=\"0\"></monthpicker>\n" +
    "  <yearpicker ng-switch-when=\"year\" tabindex=\"0\"></yearpicker>\n" +
    "</div>");
}]);

angular.module("template/datepicker/day.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/day.html",
    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
    "      <th colspan=\"{{5 + showWeeks}}\"><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
    "    </tr>\n" +
    "    <tr>\n" +
    "      <th ng-show=\"showWeeks\" class=\"text-center\"></th>\n" +
    "      <th ng-repeat=\"label in labels track by $index\" class=\"text-center\"><small aria-label=\"{{label.full}}\">{{label.abbr}}</small></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
    "      <td ng-show=\"showWeeks\" class=\"text-center h6\"><em>{{ weekNumbers[$index] }}</em></td>\n" +
    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\" ng-class=\"dt.customClass\">\n" +
    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default btn-sm\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-muted': dt.secondary, 'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/datepicker/month.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/month.html",
    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
    "      <th><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\">\n" +
    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/datepicker/popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/popup.html",
    "<ul class=\"dropdown-menu\" ng-style=\"{display: (isOpen && 'block') || 'none', top: position.top+'px', left: position.left+'px'}\" ng-keydown=\"keydown($event)\">\n" +
    "	<li ng-transclude></li>\n" +
    "	<li ng-if=\"showButtonBar\" style=\"padding:10px 9px 2px\">\n" +
    "		<span class=\"btn-group pull-left\">\n" +
    "			<button type=\"button\" class=\"btn btn-sm btn-info\" ng-click=\"select('today')\">{{ getText('current') }}</button>\n" +
    "			<button type=\"button\" class=\"btn btn-sm btn-danger\" ng-click=\"select(null)\">{{ getText('clear') }}</button>\n" +
    "		</span>\n" +
    "		<button type=\"button\" class=\"btn btn-sm btn-success pull-right\" ng-click=\"close()\">{{ getText('close') }}</button>\n" +
    "	</li>\n" +
    "</ul>\n" +
    "");
}]);

angular.module("template/datepicker/year.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/datepicker/year.html",
    "<table role=\"grid\" aria-labelledby=\"{{uniqueId}}-title\" aria-activedescendant=\"{{activeDateId}}\">\n" +
    "  <thead>\n" +
    "    <tr>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-left\" ng-click=\"move(-1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button></th>\n" +
    "      <th colspan=\"3\"><button id=\"{{uniqueId}}-title\" role=\"heading\" aria-live=\"assertive\" aria-atomic=\"true\" type=\"button\" class=\"btn btn-default btn-sm\" ng-click=\"toggleMode()\" ng-disabled=\"datepickerMode === maxMode\" tabindex=\"-1\" style=\"width:100%;\"><strong>{{title}}</strong></button></th>\n" +
    "      <th><button type=\"button\" class=\"btn btn-default btn-sm pull-right\" ng-click=\"move(1)\" tabindex=\"-1\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button></th>\n" +
    "    </tr>\n" +
    "  </thead>\n" +
    "  <tbody>\n" +
    "    <tr ng-repeat=\"row in rows track by $index\">\n" +
    "      <td ng-repeat=\"dt in row track by dt.date\" class=\"text-center\" role=\"gridcell\" id=\"{{dt.uid}}\" aria-disabled=\"{{!!dt.disabled}}\">\n" +
    "        <button type=\"button\" style=\"width:100%;\" class=\"btn btn-default\" ng-class=\"{'btn-info': dt.selected, active: isActive(dt)}\" ng-click=\"select(dt.date)\" ng-disabled=\"dt.disabled\" tabindex=\"-1\"><span ng-class=\"{'text-info': dt.current}\">{{dt.label}}</span></button>\n" +
    "      </td>\n" +
    "    </tr>\n" +
    "  </tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/modal/backdrop.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/modal/backdrop.html",
    "<div class=\"modal-backdrop\"\n" +
    "     modal-animation-class=\"fade\"\n" +
    "     ng-class=\"{in: animate}\"\n" +
    "     ng-style=\"{'z-index': 1040 + (index && 1 || 0) + index*10}\"\n" +
    "></div>\n" +
    "");
}]);

angular.module("template/modal/window.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/modal/window.html",
    "<div modal-render=\"{{$isRendered}}\" tabindex=\"-1\" role=\"dialog\" class=\"modal\"\n" +
    "    modal-animation-class=\"fade\"\n" +
    "	ng-class=\"{in: animate}\" ng-style=\"{'z-index': 1050 + index*10, display: 'block'}\" ng-click=\"close($event)\">\n" +
    "    <div class=\"modal-dialog\" ng-class=\"size ? 'modal-' + size : ''\"><div class=\"modal-content\" modal-transclude></div></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/pagination/pager.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/pagination/pager.html",
    "<ul class=\"pager\">\n" +
    "  <li ng-class=\"{disabled: noPrevious(), previous: align}\"><a href ng-click=\"selectPage(page - 1, $event)\">{{getText('previous')}}</a></li>\n" +
    "  <li ng-class=\"{disabled: noNext(), next: align}\"><a href ng-click=\"selectPage(page + 1, $event)\">{{getText('next')}}</a></li>\n" +
    "</ul>");
}]);

angular.module("template/pagination/pagination.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/pagination/pagination.html",
    "<ul class=\"pagination\">\n" +
    "  <li ng-if=\"boundaryLinks\" ng-class=\"{disabled: noPrevious()}\"><a href ng-click=\"selectPage(1, $event)\">{{getText('first')}}</a></li>\n" +
    "  <li ng-if=\"directionLinks\" ng-class=\"{disabled: noPrevious()}\"><a href ng-click=\"selectPage(page - 1, $event)\">{{getText('previous')}}</a></li>\n" +
    "  <li ng-repeat=\"page in pages track by $index\" ng-class=\"{active: page.active}\"><a href ng-click=\"selectPage(page.number, $event)\">{{page.text}}</a></li>\n" +
    "  <li ng-if=\"directionLinks\" ng-class=\"{disabled: noNext()}\"><a href ng-click=\"selectPage(page + 1, $event)\">{{getText('next')}}</a></li>\n" +
    "  <li ng-if=\"boundaryLinks\" ng-class=\"{disabled: noNext()}\"><a href ng-click=\"selectPage(totalPages, $event)\">{{getText('last')}}</a></li>\n" +
    "</ul>");
}]);

angular.module("template/tooltip/tooltip-html-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-html-popup.html",
    "<div class=\"tooltip\"\n" +
    "  tooltip-animation-class=\"fade\"\n" +
    "  tooltip-classes\n" +
    "  ng-class=\"{ in: isOpen() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\" ng-bind-html=\"contentExp()\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/tooltip/tooltip-html-unsafe-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-html-unsafe-popup.html",
    "<div class=\"tooltip\"\n" +
    "  tooltip-animation-class=\"fade\"\n" +
    "  tooltip-classes\n" +
    "  ng-class=\"{ in: isOpen() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\" bind-html-unsafe=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/tooltip/tooltip-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-popup.html",
    "<div class=\"tooltip\"\n" +
    "  tooltip-animation-class=\"fade\"\n" +
    "  tooltip-classes\n" +
    "  ng-class=\"{ in: isOpen() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\" ng-bind=\"content\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/tooltip/tooltip-template-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tooltip/tooltip-template-popup.html",
    "<div class=\"tooltip\"\n" +
    "  tooltip-animation-class=\"fade\"\n" +
    "  tooltip-classes\n" +
    "  ng-class=\"{ in: isOpen() }\">\n" +
    "  <div class=\"tooltip-arrow\"></div>\n" +
    "  <div class=\"tooltip-inner\"\n" +
    "    tooltip-template-transclude=\"contentExp()\"\n" +
    "    tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/popover/popover-template.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/popover/popover-template.html",
    "<div class=\"popover\"\n" +
    "  tooltip-animation-class=\"fade\"\n" +
    "  tooltip-classes\n" +
    "  ng-class=\"{ in: isOpen() }\">\n" +
    "  <div class=\"arrow\"></div>\n" +
    "\n" +
    "  <div class=\"popover-inner\">\n" +
    "      <h3 class=\"popover-title\" ng-bind=\"title\" ng-if=\"title\"></h3>\n" +
    "      <div class=\"popover-content\"\n" +
    "        tooltip-template-transclude=\"contentExp()\"\n" +
    "        tooltip-template-transclude-scope=\"originScope()\"></div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/popover/popover-window.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/popover/popover-window.html",
    "<div class=\"popover {{placement}}\" ng-class=\"{ in: isOpen, fade: animation }\">\n" +
    "  <div class=\"arrow\"></div>\n" +
    "\n" +
    "  <div class=\"popover-inner\">\n" +
    "      <h3 class=\"popover-title\" ng-bind=\"title\" ng-show=\"title\"></h3>\n" +
    "      <div class=\"popover-content\" tooltip-template-transclude></div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/popover/popover.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/popover/popover.html",
    "<div class=\"popover\"\n" +
    "  tooltip-animation-class=\"fade\"\n" +
    "  tooltip-classes\n" +
    "  ng-class=\"{ in: isOpen() }\">\n" +
    "  <div class=\"arrow\"></div>\n" +
    "\n" +
    "  <div class=\"popover-inner\">\n" +
    "      <h3 class=\"popover-title\" ng-bind=\"title\" ng-if=\"title\"></h3>\n" +
    "      <div class=\"popover-content\" ng-bind=\"content\"></div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/progressbar/bar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/progressbar/bar.html",
    "<div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" ng-transclude></div>\n" +
    "");
}]);

angular.module("template/progressbar/progress.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/progressbar/progress.html",
    "<div class=\"progress\" ng-transclude></div>");
}]);

angular.module("template/progressbar/progressbar.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/progressbar/progressbar.html",
    "<div class=\"progress\">\n" +
    "  <div class=\"progress-bar\" ng-class=\"type && 'progress-bar-' + type\" role=\"progressbar\" aria-valuenow=\"{{value}}\" aria-valuemin=\"0\" aria-valuemax=\"{{max}}\" ng-style=\"{width: (percent < 100 ? percent : 100) + '%'}\" aria-valuetext=\"{{percent | number:0}}%\" ng-transclude></div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/rating/rating.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/rating/rating.html",
    "<span ng-mouseleave=\"reset()\" ng-keydown=\"onKeydown($event)\" tabindex=\"0\" role=\"slider\" aria-valuemin=\"0\" aria-valuemax=\"{{range.length}}\" aria-valuenow=\"{{value}}\">\n" +
    "    <i ng-repeat=\"r in range track by $index\" ng-mouseenter=\"enter($index + 1)\" ng-click=\"rate($index + 1)\" class=\"glyphicon\" ng-class=\"$index < value && (r.stateOn || 'glyphicon-star') || (r.stateOff || 'glyphicon-star-empty')\">\n" +
    "        <span class=\"sr-only\">({{ $index < value ? '*' : ' ' }})</span>\n" +
    "    </i>\n" +
    "</span>");
}]);

angular.module("template/tabs/tab.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tab.html",
    "<li ng-class=\"{active: active, disabled: disabled}\">\n" +
    "  <a href ng-click=\"select()\" tab-heading-transclude>{{heading}}</a>\n" +
    "</li>\n" +
    "");
}]);

angular.module("template/tabs/tabset.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/tabs/tabset.html",
    "<div>\n" +
    "  <ul class=\"nav nav-{{type || 'tabs'}}\" ng-class=\"{'nav-stacked': vertical, 'nav-justified': justified}\" ng-transclude></ul>\n" +
    "  <div class=\"tab-content\">\n" +
    "    <div class=\"tab-pane\" \n" +
    "         ng-repeat=\"tab in tabs\" \n" +
    "         ng-class=\"{active: tab.active}\"\n" +
    "         tab-content-transclude=\"tab\">\n" +
    "    </div>\n" +
    "  </div>\n" +
    "</div>\n" +
    "");
}]);

angular.module("template/timepicker/timepicker.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/timepicker/timepicker.html",
    "<table>\n" +
    "	<tbody>\n" +
    "		<tr class=\"text-center\">\n" +
    "			<td><a ng-click=\"incrementHours()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
    "			<td>&nbsp;</td>\n" +
    "			<td><a ng-click=\"incrementMinutes()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-up\"></span></a></td>\n" +
    "			<td ng-show=\"showMeridian\"></td>\n" +
    "		</tr>\n" +
    "		<tr>\n" +
    "			<td class=\"form-group\" ng-class=\"{'has-error': invalidHours}\">\n" +
    "				<input style=\"width:50px;\" type=\"text\" ng-model=\"hours\" ng-change=\"updateHours()\" class=\"form-control text-center\" ng-readonly=\"readonlyInput\" maxlength=\"2\">\n" +
    "			</td>\n" +
    "			<td>:</td>\n" +
    "			<td class=\"form-group\" ng-class=\"{'has-error': invalidMinutes}\">\n" +
    "				<input style=\"width:50px;\" type=\"text\" ng-model=\"minutes\" ng-change=\"updateMinutes()\" class=\"form-control text-center\" ng-readonly=\"readonlyInput\" maxlength=\"2\">\n" +
    "			</td>\n" +
    "			<td ng-show=\"showMeridian\"><button type=\"button\" class=\"btn btn-default text-center\" ng-click=\"toggleMeridian()\">{{meridian}}</button></td>\n" +
    "		</tr>\n" +
    "		<tr class=\"text-center\">\n" +
    "			<td><a ng-click=\"decrementHours()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
    "			<td>&nbsp;</td>\n" +
    "			<td><a ng-click=\"decrementMinutes()\" class=\"btn btn-link\"><span class=\"glyphicon glyphicon-chevron-down\"></span></a></td>\n" +
    "			<td ng-show=\"showMeridian\"></td>\n" +
    "		</tr>\n" +
    "	</tbody>\n" +
    "</table>\n" +
    "");
}]);

angular.module("template/typeahead/typeahead-match.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/typeahead/typeahead-match.html",
    "<a tabindex=\"-1\" bind-html-unsafe=\"match.label | typeaheadHighlight:query\"></a>");
}]);

angular.module("template/typeahead/typeahead-popup.html", []).run(["$templateCache", function($templateCache) {
  $templateCache.put("template/typeahead/typeahead-popup.html",
    "<ul class=\"dropdown-menu\" ng-show=\"isOpen()\" ng-style=\"{top: position.top+'px', left: position.left+'px'}\" style=\"display: block;\" role=\"listbox\" aria-hidden=\"{{!isOpen()}}\">\n" +
    "    <li ng-repeat=\"match in matches track by $index\" ng-class=\"{active: isActive($index) }\" ng-mouseenter=\"selectActive($index)\" ng-click=\"selectMatch($index)\" role=\"option\" id=\"{{match.id}}\">\n" +
    "        <div typeahead-match index=\"$index\" match=\"match\" query=\"query\" template-url=\"templateUrl\"></div>\n" +
    "    </li>\n" +
    "</ul>\n" +
    "");
}]);
!angular.$$csp() && angular.element(document).find('head').prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>');
/**
 * oclazyload - Load modules on demand (lazy load) with angularJS
 * @version v0.6.3
 * @link https://github.com/ocombe/ocLazyLoad
 * @license MIT
 * @author Olivier Combe <olivier.combe@gmail.com>
 */
(function() {
  'use strict';
  var regModules = ['ng'],
    regInvokes = {},
    regConfigs = [],
    justLoaded = [],
    runBlocks = {},
    ocLazyLoad = angular.module('oc.lazyLoad', ['ng']),
    broadcast = angular.noop,
    modulesToLoad = [],
    recordDeclarations = [true];

  ocLazyLoad.provider('$ocLazyLoad', ['$controllerProvider', '$provide', '$compileProvider', '$filterProvider', '$injector', '$animateProvider',
    function($controllerProvider, $provide, $compileProvider, $filterProvider, $injector, $animateProvider) {
      var modules = {},
        providers = {
          $controllerProvider: $controllerProvider,
          $compileProvider: $compileProvider,
          $filterProvider: $filterProvider,
          $provide: $provide, // other things
          $injector: $injector,
          $animateProvider: $animateProvider
        },
        anchor = document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0],
        jsLoader, cssLoader, templatesLoader,
        debug = false,
        events = false;

      // Let's get the list of loaded modules & components
      init(angular.element(window.document));

      this.$get = ['$log', '$q', '$templateCache', '$http', '$rootElement', '$rootScope', '$cacheFactory', '$interval', function($log, $q, $templateCache, $http, $rootElement, $rootScope, $cacheFactory, $interval) {
        var instanceInjector,
          filesCache = $cacheFactory('ocLazyLoad'),
          uaCssChecked = false,
          useCssLoadPatch = false;

        if(!debug) {
          $log = {};
          $log['error'] = angular.noop;
          $log['warn'] = angular.noop;
          $log['info'] = angular.noop;
        }

        // Make this lazy because at the moment that $get() is called the instance injector hasn't been assigned to the rootElement yet
        providers.getInstanceInjector = function() {
          return (instanceInjector) ? instanceInjector : (instanceInjector = ($rootElement.data('$injector') || angular.injector()));
        };

        broadcast = function broadcast(eventName, params) {
          if(events) {
            $rootScope.$broadcast(eventName, params);
          }
          if(debug) {
            $log.info(eventName, params);
          }
        };

        /**
         * Load a js/css file
         * @param type
         * @param path
         * @param params
         * @returns promise
         */
        var buildElement = function buildElement(type, path, params) {
          var deferred = $q.defer(),
            el, loaded,
            cacheBuster = function cacheBuster(url) {
              var dc = new Date().getTime();
              if(url.indexOf('?') >= 0) {
                if(url.substring(0, url.length - 1) === '&') {
                  return url + '_dc=' + dc;
                }
                return url + '&_dc=' + dc;
              } else {
                return url + '?_dc=' + dc;
              }
            };

          // Store the promise early so the file load can be detected by other parallel lazy loads
          // (ie: multiple routes on one page) a 'true' value isn't sufficient
          // as it causes false positive load results.
          if(angular.isUndefined(filesCache.get(path))) {
            filesCache.put(path, deferred.promise);
          }

          // Switch in case more content types are added later
          switch(type) {
            case 'css':
              el = document.createElement('link');
              el.type = 'text/css';
              el.rel = 'stylesheet';
              el.href = params.cache === false ? cacheBuster(path) : path;
              break;
            case 'js':
              el = document.createElement('script');
              el.src = params.cache === false ? cacheBuster(path) : path;
              break;
            default:
              deferred.reject(new Error('Requested type "' + type + '" is not known. Could not inject "' + path + '"'));
              break;
          }
          el.onload = el['onreadystatechange'] = function(e) {
            if((el['readyState'] && !(/^c|loade/.test(el['readyState']))) || loaded) return;
            el.onload = el['onreadystatechange'] = null;
            loaded = 1;
            broadcast('ocLazyLoad.fileLoaded', path);
            deferred.resolve();
          };
          el.onerror = function() {
            deferred.reject(new Error('Unable to load ' + path));
          };
          el.async = params.serie ? 0 : 1;

          var insertBeforeElem = anchor.lastChild;
          if(params.insertBefore) {
            var element = angular.element(params.insertBefore);
            if(element && element.length > 0) {
              insertBeforeElem = element[0];
            }
          }
          anchor.insertBefore(el, insertBeforeElem);

          /*
           The event load or readystatechange doesn't fire in:
           - iOS < 6       (default mobile browser)
           - Android < 4.4 (default mobile browser)
           - Safari < 6    (desktop browser)
           */
          if(type == 'css') {
            if(!uaCssChecked) {
              var ua = navigator.userAgent.toLowerCase();

              // iOS < 6
              if(/iP(hone|od|ad)/.test(navigator.platform)) {
                var v = (navigator.appVersion).match(/OS (\d+)_(\d+)_?(\d+)?/);
                var iOSVersion = parseFloat([parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)].join('.'));
                useCssLoadPatch = iOSVersion < 6;
              } else if(ua.indexOf("android") > -1) { // Android < 4.4
                var androidVersion = parseFloat(ua.slice(ua.indexOf("android") + 8));
                useCssLoadPatch = androidVersion < 4.4;
              } else if(ua.indexOf('safari') > -1 && ua.indexOf('chrome') == -1) {
                var safariVersion = parseFloat(ua.match(/version\/([\.\d]+)/i)[1]);
                useCssLoadPatch = safariVersion < 6;
              }
            }

            if(useCssLoadPatch) {
              var tries = 1000; // * 20 = 20000 miliseconds
              var interval = $interval(function() {
                try {
                  el.sheet.cssRules;
                  $interval.cancel(interval);
                  el.onload();
                } catch(e) {
                  if(--tries <= 0) {
                    el.onerror();
                  }
                }
              }, 20);
            }
          }

          return deferred.promise;
        };

        if(angular.isUndefined(jsLoader)) {
          /**
           * jsLoader function
           * @type Function
           * @param paths array list of js files to load
           * @param callback to call when everything is loaded. We use a callback and not a promise
           * @param params object config parameters
           * because the user can overwrite jsLoader and it will probably not use promises :(
           */
          jsLoader = function(paths, callback, params) {
            var promises = [];
            angular.forEach(paths, function loading(path) {
              promises.push(buildElement('js', path, params));
            });
            $q.all(promises).then(function success() {
              callback();
            }, function error(err) {
              callback(err);
            });
          };
          jsLoader.ocLazyLoadLoader = true;
        }

        if(angular.isUndefined(cssLoader)) {
          /**
           * cssLoader function
           * @type Function
           * @param paths array list of css files to load
           * @param callback to call when everything is loaded. We use a callback and not a promise
           * @param params object config parameters
           * because the user can overwrite cssLoader and it will probably not use promises :(
           */
          cssLoader = function(paths, callback, params) {
            var promises = [];
            angular.forEach(paths, function loading(path) {
              promises.push(buildElement('css', path, params));
            });
            $q.all(promises).then(function success() {
              callback();
            }, function error(err) {
              callback(err);
            });
          };
          cssLoader.ocLazyLoadLoader = true;
        }

        if(angular.isUndefined(templatesLoader)) {
          /**
           * templatesLoader function
           * @type Function
           * @param paths array list of css files to load
           * @param callback to call when everything is loaded. We use a callback and not a promise
           * @param params object config parameters for $http
           * because the user can overwrite templatesLoader and it will probably not use promises :(
           */
          templatesLoader = function(paths, callback, params) {
            var promises = [];
            angular.forEach(paths, function(url) {
              var deferred = $q.defer();
              promises.push(deferred.promise);
              $http.get(url, params).success(function(data) {
                if(angular.isString(data) && data.length > 0) {
                  angular.forEach(angular.element(data), function(node) {
                    if(node.nodeName === 'SCRIPT' && node.type === 'text/ng-template') {
                      $templateCache.put(node.id, node.innerHTML);
                    }
                  });
                }
                if(angular.isUndefined(filesCache.get(url))) {
                  filesCache.put(url, true);
                }
                deferred.resolve();
              }).error(function(err) {
                deferred.reject(new Error('Unable to load template file "' + url + '": ' + err));
              });
            });
            return $q.all(promises).then(function success() {
              callback();
            }, function error(err) {
              callback(err);
            });
          };
          templatesLoader.ocLazyLoadLoader = true;
        }

        var filesLoader = function filesLoader(config, params) {
          var cssFiles = [],
            templatesFiles = [],
            jsFiles = [],
            promises = [],
            cachePromise = null;

          recordDeclarations.push(true); // start watching angular.module calls

          angular.extend(params || {}, config);

          var pushFile = function(path) {
            var file_type = null, m;
            if (typeof path === 'object') {
                file_type = path.type;
                path = path.path;
            }
            cachePromise = filesCache.get(path);
            if(angular.isUndefined(cachePromise) || params.cache === false) {

              // always check for requirejs syntax just in case
              if ((m = /^(css|less|html|htm|js)?(?=!)/.exec(path)) !== null) { // Detect file type using preceding type declaration (ala requireJS)
                file_type = m[1];
                path = path.substr(m[1].length + 1, path.length);  // Strip the type from the path
              }

              if (!file_type) {
                if ((m = /[.](css|less|html|htm|js)?(\?.*)?$/.exec(path)) !== null) {  // Detect file type via file extension
                    file_type = m[1];
                } else if(!jsLoader.hasOwnProperty('ocLazyLoadLoader') && jsLoader.hasOwnProperty('load')) { // requirejs
                  file_type = 'js';
                } else {
                    $log.error('File type could not be determined. ' + path);
                    return;
                }
              }

              if((file_type === 'css' || file_type === 'less') && cssFiles.indexOf(path) === -1) {
                cssFiles.push(path);
              } else if ((file_type === 'html' || file_type === 'htm') && templatesFiles.indexOf(path) === -1) {
                templatesFiles.push(path);
              } else if((file_type === 'js') || jsFiles.indexOf(path) === -1) {
                jsFiles.push(path);
              } else {
                  $log.error('File type is not valid. ' + path);
              }

            } else if(cachePromise) {
              promises.push(cachePromise);
            }
          };

          if(params.serie) {
            pushFile(params.files.shift());
          } else {
            angular.forEach(params.files, function(path) {
              pushFile(path);
            });
          }

          if(cssFiles.length > 0) {
            var cssDeferred = $q.defer();
            cssLoader(cssFiles, function(err) {
              if(angular.isDefined(err) && cssLoader.hasOwnProperty('ocLazyLoadLoader')) {
                $log.error(err);
                cssDeferred.reject(err);
              } else {
                cssDeferred.resolve();
              }
            }, params);
            promises.push(cssDeferred.promise);
          }

          if(templatesFiles.length > 0) {
            var templatesDeferred = $q.defer();
            templatesLoader(templatesFiles, function(err) {
              if(angular.isDefined(err) && templatesLoader.hasOwnProperty('ocLazyLoadLoader')) {
                $log.error(err);
                templatesDeferred.reject(err);
              } else {
                templatesDeferred.resolve();
              }
            }, params);
            promises.push(templatesDeferred.promise);
          }

          if(jsFiles.length > 0) {
            var jsDeferred = $q.defer();
            jsLoader(jsFiles, function(err) {
              if(angular.isDefined(err) && jsLoader.hasOwnProperty('ocLazyLoadLoader')) {
                $log.error(err);
                jsDeferred.reject(err);
              } else {
                jsDeferred.resolve();
              }
            }, params);
            promises.push(jsDeferred.promise);
          }

          if(params.serie && params.files.length > 0) {
            return $q.all(promises).then(function success() {
              return filesLoader(config, params);
            });
          } else {
            return $q.all(promises).finally(function(res) {
              recordDeclarations.pop(); // stop watching angular.module calls
              return res;
            });
          }
        };

        return {
          /**
           * Let you get a module config object
           * @param moduleName String the name of the module
           * @returns {*}
           */
          getModuleConfig: function(moduleName) {
            if(!angular.isString(moduleName)) {
              throw new Error('You need to give the name of the module to get');
            }
            if(!modules[moduleName]) {
              return null;
            }
            return modules[moduleName];
          },

          /**
           * Let you define a module config object
           * @param moduleConfig Object the module config object
           * @returns {*}
           */
          setModuleConfig: function(moduleConfig) {
            if(!angular.isObject(moduleConfig)) {
              throw new Error('You need to give the module config object to set');
            }
            modules[moduleConfig.name] = moduleConfig;
            return moduleConfig;
          },

          /**
           * Returns the list of loaded modules
           * @returns {string[]}
           */
          getModules: function() {
            return regModules;
          },

          /**
           * Let you check if a module has been loaded into Angular or not
           * @param modulesNames String/Object a module name, or a list of module names
           * @returns {boolean}
           */
          isLoaded: function(modulesNames) {
            var moduleLoaded = function(module) {
              var isLoaded = regModules.indexOf(module) > -1;
              if(!isLoaded) {
                isLoaded = !!moduleExists(module);
              }
              return isLoaded;
            };
            if(angular.isString(modulesNames)) {
              modulesNames = [modulesNames];
            }
            if(angular.isArray(modulesNames)) {
              var i, len;
              for(i = 0, len = modulesNames.length; i < len; i++) {
                if(!moduleLoaded(modulesNames[i])) {
                  return false;
                }
              }
              return true;
            } else {
              throw new Error('You need to define the module(s) name(s)');
            }
          },

          /**
           * Load a module or a list of modules into Angular
           * @param module Mixed the name of a predefined module config object, or a module config object, or an array of either
           * @param params Object optional parameters
           * @returns promise
           */
          load: function(module, params) {
            var self = this,
              config = null,
              moduleCache = [],
              deferredList = [],
              deferred = $q.defer(),
              errText;

            if(angular.isUndefined(params)) {
              params = {};
            }

            // If module is an array, break it down
            if(angular.isArray(module)) {
              // Resubmit each entry as a single module
              angular.forEach(module, function(m) {
                if(m) {
                  deferredList.push(self.load(m, params));
                }
              });

              // Resolve the promise once everything has loaded
              $q.all(deferredList).then(function success() {
                deferred.resolve(module);
              }, function error(err) {
                deferred.reject(err);
              });

              return deferred.promise;
            }

            // Get or Set a configuration depending on what was passed in
            if(typeof module === 'string') {
              config = self.getModuleConfig(module);
              if(!config) {
                config = {
                  files: [module]
                };
              }
            } else if(typeof module === 'object') {
              if(angular.isDefined(module.path) && angular.isDefined(module.type)) { // case {type: 'js', path: lazyLoadUrl + 'testModule.fakejs'}
                config = {
                  files: [module]
                };
              } else {
                config = self.setModuleConfig(module);
              }
            }

            if(config === null) {
              var moduleName = getModuleName(module);
              errText = 'Module "' + (moduleName || 'unknown') + '" is not configured, cannot load.';
              $log.error(errText);
              deferred.reject(new Error(errText));
              return deferred.promise;
            } else {
              // deprecated
              if(angular.isDefined(config.template)) {
                if(angular.isUndefined(config.files)) {
                  config.files = [];
                }
                if(angular.isString(config.template)) {
                  config.files.push(config.template);
                } else if(angular.isArray(config.template)) {
                  config.files.concat(config.template);
                }
              }
            }

            moduleCache.push = function(value) {
              if(this.indexOf(value) === -1) {
                Array.prototype.push.apply(this, arguments);
              }
            };

            var localParams = {};
            angular.extend(localParams, params, config);

            var loadDependencies = function loadDependencies(module) {
              var moduleName,
                loadedModule,
                requires,
                diff,
                promisesList = [];

              moduleName = getModuleName(module);
              if(moduleName === null) {
                return $q.when();
              } else {
                try {
                  loadedModule = getModule(moduleName);
                } catch(e) {
                  var deferred = $q.defer();
                  $log.error(e.message);
                  deferred.reject(e);
                  return deferred.promise;
                }
                requires = getRequires(loadedModule);
              }

              angular.forEach(requires, function(requireEntry) {
                // If no configuration is provided, try and find one from a previous load.
                // If there isn't one, bail and let the normal flow run
                if(typeof requireEntry === 'string') {
                  var config = self.getModuleConfig(requireEntry);
                  if(config === null) {
                    moduleCache.push(requireEntry); // We don't know about this module, but something else might, so push it anyway.
                    return;
                  }
                  requireEntry = config;
                }

                // Check if this dependency has been loaded previously
                if(moduleExists(requireEntry.name)) {
                  if(typeof module !== 'string') {
                    // compare against the already loaded module to see if the new definition adds any new files
                    diff = requireEntry.files.filter(function(n) {
                      return self.getModuleConfig(requireEntry.name).files.indexOf(n) < 0;
                    });

                    // If the module was redefined, advise via the console
                    if(diff.length !== 0) {
                      $log.warn('Module "', moduleName, '" attempted to redefine configuration for dependency. "', requireEntry.name, '"\n Additional Files Loaded:', diff);
                    }

                    // Push everything to the file loader, it will weed out the duplicates.
                    promisesList.push(filesLoader(requireEntry.files, localParams).then(function() {
                      return loadDependencies(requireEntry);
                    }));
                  }
                  return;
                } else if(angular.isArray(requireEntry)) {
                  requireEntry = {
                    files: requireEntry
                  };
                } else if(typeof requireEntry === 'object') {
                  if(requireEntry.hasOwnProperty('name') && requireEntry['name']) {
                    // The dependency doesn't exist in the module cache and is a new configuration, so store and push it.
                    self.setModuleConfig(requireEntry);
                    moduleCache.push(requireEntry['name']);
                  }
                }

                // Check if the dependency has any files that need to be loaded. If there are, push a new promise to the promise list.
                if(requireEntry.hasOwnProperty('files') && requireEntry.files.length !== 0) {
                  if(requireEntry.files) {
                    promisesList.push(filesLoader(requireEntry, localParams).then(function() {
                      return loadDependencies(requireEntry);
                    }));
                  }
                }
              });

              // Create a wrapper promise to watch the promise list and resolve it once everything is done.
              return $q.all(promisesList);
            };

            // if someone loaded the module file with something else and called the load function with just the module name
            if(angular.isUndefined(config.files) && angular.isDefined(config.name) && moduleExists(config.name)) {
              recordDeclarations.push(true); // start watching angular.module calls
              addToLoadList(config.name);
              recordDeclarations.pop();
            }

            filesLoader(config, localParams).then(function success() {
              if(modulesToLoad.length === 0) {
                deferred.resolve(module);
              } else {
                var loadNext = function loadNext(moduleName) {
                  moduleCache.push(moduleName);
                  loadDependencies(moduleName).then(function success() {
                    try {
                      justLoaded = [];
                      register(providers, moduleCache, localParams);
                    } catch(e) {
                      $log.error(e.message);
                      deferred.reject(e);
                      return;
                    }

                    if(modulesToLoad.length > 0) {
                      loadNext(modulesToLoad.shift()); // load the next in list
                    } else {
                      deferred.resolve(module); // everything has been loaded, resolve
                    }
                  }, function error(err) {
                    deferred.reject(err);
                  });
                };

                // load the first in list
                loadNext(modulesToLoad.shift());
              }
            }, function error(err) {
              deferred.reject(err);
            });

            return deferred.promise;
          }
        };
      }];

      this.config = function(config) {
        if(angular.isDefined(config.jsLoader) || angular.isDefined(config.asyncLoader)) {
          if(!angular.isFunction(config.jsLoader || config.asyncLoader)) {
            throw('The js loader needs to be a function');
          }
          jsLoader = config.jsLoader || config.asyncLoader;
        }

        if(angular.isDefined(config.cssLoader)) {
          if(!angular.isFunction(config.cssLoader)) {
            throw('The css loader needs to be a function');
          }
          cssLoader = config.cssLoader;
        }

        if(angular.isDefined(config.templatesLoader)) {
          if(!angular.isFunction(config.templatesLoader)) {
            throw('The template loader needs to be a function');
          }
          templatesLoader = config.templatesLoader;
        }

        // If we want to define modules configs
        if(angular.isDefined(config.modules)) {
          if(angular.isArray(config.modules)) {
            angular.forEach(config.modules, function(moduleConfig) {
              modules[moduleConfig.name] = moduleConfig;
            });
          } else {
            modules[config.modules.name] = config.modules;
          }
        }

        if(angular.isDefined(config.debug)) {
          debug = config.debug;
        }

        if(angular.isDefined(config.events)) {
          events = config.events;
        }
      };
    }]);

  ocLazyLoad.directive('ocLazyLoad', ['$ocLazyLoad', '$compile', '$animate', '$parse',
    function($ocLazyLoad, $compile, $animate, $parse) {
      return {
        restrict: 'A',
        terminal: true,
        priority: 1000,
        compile: function(element, attrs) {
          // we store the content and remove it before compilation
          var content = element[0].innerHTML;
          element.html('');

          return function($scope, $element, $attr) {
            var model = $parse($attr.ocLazyLoad);
            $scope.$watch(function() {
              // it can be a module name (string), an object, an array, or a scope reference to any of this
              return model($scope) || $attr.ocLazyLoad;
            }, function(moduleName) {
              if(angular.isDefined(moduleName)) {
                $ocLazyLoad.load(moduleName).then(function success(moduleConfig) {
                  $animate.enter($compile(content)($scope), null, $element);
                });
              }
            }, true);
          };
        }
      };
    }]);

  /**
   * Get the list of required modules/services/... for this module
   * @param module
   * @returns {Array}
   */
  function getRequires(module) {
    var requires = [];
    angular.forEach(module.requires, function(requireModule) {
      if(regModules.indexOf(requireModule) === -1) {
        requires.push(requireModule);
      }
    });
    return requires;
  }

  /**
   * Check if a module exists and returns it if it does
   * @param moduleName
   * @returns {boolean}
   */
  function moduleExists(moduleName) {
    if(!angular.isString(moduleName)) {
      return false;
    }
    try {
      return ngModuleFct(moduleName);
    } catch(e) {
      if(/No module/.test(e) || (e.message.indexOf('$injector:nomod') > -1)) {
        return false;
      }
    }
  }

  function getModule(moduleName) {
    try {
      return ngModuleFct(moduleName);
    } catch(e) {
      // this error message really suxx
      if(/No module/.test(e) || (e.message.indexOf('$injector:nomod') > -1)) {
        e.message = 'The module "' + moduleName + '" that you are trying to load does not exist. ' + e.message
      }
      throw e;
    }
  }

  function invokeQueue(providers, queue, moduleName, reconfig) {
    if(!queue) {
      return;
    }

    var i, len, args, provider;
    for(i = 0, len = queue.length; i < len; i++) {
      args = queue[i];
      if(angular.isArray(args)) {
        if(providers !== null) {
          if(providers.hasOwnProperty(args[0])) {
            provider = providers[args[0]];
          } else {
            throw new Error('unsupported provider ' + args[0]);
          }
        }
        var isNew = registerInvokeList(args, moduleName);
        if(args[1] !== 'invoke') {
          if(isNew && angular.isDefined(provider)) {
            provider[args[1]].apply(provider, args[2]);
          }
        } else { // config block
          var callInvoke = function(fct) {
            var invoked = regConfigs.indexOf(moduleName + '-' + fct);
            if(invoked === -1 || reconfig) {
              if(invoked === -1) {
                regConfigs.push(moduleName + '-' + fct);
              }
              if(angular.isDefined(provider)) {
                provider[args[1]].apply(provider, args[2]);
              }
            }
          };
          if(angular.isFunction(args[2][0])) {
            callInvoke(args[2][0]);
          } else if(angular.isArray(args[2][0])) {
            for(var j = 0, jlen = args[2][0].length; j < jlen; j++) {
              if(angular.isFunction(args[2][0][j])) {
                callInvoke(args[2][0][j]);
              }
            }
          }
        }
      }
    }
  }

  /**
   * Register a new module and load it
   * @param providers
   * @param registerModules
   * @returns {*}
   */
  function register(providers, registerModules, params) {
    if(registerModules) {
      var k, r, moduleName, moduleFn, tempRunBlocks = [];
      for(k = registerModules.length - 1; k >= 0; k--) {
        moduleName = registerModules[k];
        if(typeof moduleName !== 'string') {
          moduleName = getModuleName(moduleName);
        }
        if(!moduleName || justLoaded.indexOf(moduleName) !== -1) {
          continue;
        }
        var newModule = regModules.indexOf(moduleName) === -1;
        moduleFn = ngModuleFct(moduleName);
        if(newModule) { // new module
          regModules.push(moduleName);
          register(providers, moduleFn.requires, params);
        }
        if(moduleFn._runBlocks.length > 0) {
          // new run blocks detected! Replace the old ones (if existing)
          runBlocks[moduleName] = [];
          while(moduleFn._runBlocks.length > 0) {
            runBlocks[moduleName].push(moduleFn._runBlocks.shift());
          }
        }
        if(angular.isDefined(runBlocks[moduleName]) && (newModule || params.rerun)) {
          tempRunBlocks = tempRunBlocks.concat(runBlocks[moduleName]);
        }
        invokeQueue(providers, moduleFn._invokeQueue, moduleName, params.reconfig);
        invokeQueue(providers, moduleFn._configBlocks, moduleName, params.reconfig); // angular 1.3+
        broadcast(newModule ? 'ocLazyLoad.moduleLoaded' : 'ocLazyLoad.moduleReloaded', moduleName);
        registerModules.pop();
        justLoaded.push(moduleName);
      }
      // execute the run blocks at the end
      var instanceInjector = providers.getInstanceInjector();
      angular.forEach(tempRunBlocks, function(fn) {
        instanceInjector.invoke(fn);
      });
    }
  }

  /**
   * Register an invoke
   * @param args
   * @param moduleName
   * @returns {boolean}
   */
  function registerInvokeList(args, moduleName) {
    var invokeList = args[2][0],
      type = args[1],
      newInvoke = false;
    if(angular.isUndefined(regInvokes[moduleName])) {
      regInvokes[moduleName] = {};
    }
    if(angular.isUndefined(regInvokes[moduleName][type])) {
      regInvokes[moduleName][type] = {};
    }
    var onInvoke = function(invokeName, signature) {
      newInvoke = true;
      regInvokes[moduleName][type][invokeName].push(signature);
      broadcast('ocLazyLoad.componentLoaded', [moduleName, type, invokeName]);
    };
    var signature = function signature(data) {
      if(angular.isArray(data)) { // arrays are objects, we need to test for it first
        return hashCode(data.toString());
      } else if(angular.isObject(data)) { // constants & values for example
        return hashCode(stringify(data));
      } else {
        if(angular.isDefined(data) && data !== null) {
          return hashCode(data.toString());
        } else { // null & undefined constants
          return data;
        }
      }
    };
    if(angular.isString(invokeList)) {
      if(angular.isUndefined(regInvokes[moduleName][type][invokeList])) {
        regInvokes[moduleName][type][invokeList] = [];
      }
      if(regInvokes[moduleName][type][invokeList].indexOf(signature(args[2][1])) === -1) {
        onInvoke(invokeList, signature(args[2][1]));
      }
    } else if(angular.isObject(invokeList)) { // decorators for example
      angular.forEach(invokeList, function(invoke) {
        if(angular.isString(invoke)) {
          if(angular.isUndefined(regInvokes[moduleName][type][invoke])) {
            regInvokes[moduleName][type][invoke] = [];
          }
          if(regInvokes[moduleName][type][invoke].indexOf(signature(invokeList[1])) === -1) {
            onInvoke(invoke, signature(invokeList[1]));
          }
        }
      });
    } else {
      return false;
    }
    return newInvoke;
  }

  function getModuleName(module) {
    var moduleName = null;
    if(angular.isString(module)) {
      moduleName = module;
    } else if(angular.isObject(module) && module.hasOwnProperty('name') && angular.isString(module.name)) {
      moduleName = module.name;
    }
    return moduleName;
  }

  /**
   * Get the list of existing registered modules
   * @param element
   */
  function init(element) {
    if(modulesToLoad.length === 0) {
      var elements = [element],
        names = ['ng:app', 'ng-app', 'x-ng-app', 'data-ng-app'],
        NG_APP_CLASS_REGEXP = /\sng[:\-]app(:\s*([\w\d_]+);?)?\s/,
        append = function append(elm) {
          return (elm && elements.push(elm));
        };

      angular.forEach(names, function(name) {
        names[name] = true;
        append(document.getElementById(name));
        name = name.replace(':', '\\:');
        if(element[0].querySelectorAll) {
          angular.forEach(element[0].querySelectorAll('.' + name), append);
          angular.forEach(element[0].querySelectorAll('.' + name + '\\:'), append);
          angular.forEach(element[0].querySelectorAll('[' + name + ']'), append);
        }
      });

      angular.forEach(elements, function(elm) {
        if(modulesToLoad.length === 0) {
          var className = ' ' + element.className + ' ';
          var match = NG_APP_CLASS_REGEXP.exec(className);
          if(match) {
            modulesToLoad.push((match[2] || '').replace(/\s+/g, ','));
          } else {
            angular.forEach(elm.attributes, function(attr) {
              if(modulesToLoad.length === 0 && names[attr.name]) {
                modulesToLoad.push(attr.value);
              }
            });
          }
        }
      });
    }

    if(modulesToLoad.length === 0 && !((window.jasmine || window.mocha) && angular.isDefined(angular.mock))) {
      console.error('No module found during bootstrap, unable to init ocLazyLoad. You should always use the ng-app directive or angular.boostrap when you use ocLazyLoad.');
    }

    var addReg = function addReg(moduleName) {
      if(regModules.indexOf(moduleName) === -1) {
        // register existing modules
        regModules.push(moduleName);
        var mainModule = angular.module(moduleName);

        // register existing components (directives, services, ...)
        invokeQueue(null, mainModule._invokeQueue, moduleName);
        invokeQueue(null, mainModule._configBlocks, moduleName); // angular 1.3+

        angular.forEach(mainModule.requires, addReg);
      }
    };

    angular.forEach(modulesToLoad, function(moduleName) {
      addReg(moduleName);
    });

    modulesToLoad = []; // reset for next bootstrap
    recordDeclarations.pop(); // wait for the next lazy load
  }

  var bootstrapFct = angular.bootstrap;
  angular.bootstrap = function(element, modules, config) {
    // we use slice to make a clean copy
    angular.forEach(modules.slice(), function(module) {
      addToLoadList(module);
    });
    return bootstrapFct(element, modules, config);
  };

  var addToLoadList = function addToLoadList(name) {
    if(recordDeclarations.length > 0 && angular.isString(name) && modulesToLoad.indexOf(name) === -1) {
      modulesToLoad.push(name);
    }
  };

  var ngModuleFct = angular.module;
  angular.module = function(name, requires, configFn) {
    addToLoadList(name);
    return ngModuleFct(name, requires, configFn);
  };

  var hashCode = function hashCode(str) {
    var hash = 0, i, chr, len;
    if (str.length == 0) return hash;
    for (i = 0, len = str.length; i < len; i++) {
      chr   = str.charCodeAt(i);
      hash  = ((hash << 5) - hash) + chr;
      hash |= 0; // Convert to 32bit integer
    }
    return hash;
  };

  var stringify = function stringify(obj) {
    var cache = [];
    return JSON.stringify(obj, function(key, value) {
      if (typeof value === 'object' && value !== null) {
        if (cache.indexOf(value) !== -1) {
          // Circular reference found, discard key
          return;
        }
        // Store value in our collection
        cache.push(value);
      }
      return value;
    });
  };

  // Array.indexOf polyfill for IE8
  if(!Array.prototype.indexOf) {
    Array.prototype.indexOf = function(searchElement, fromIndex) {

      var k;

      // 1. Let O be the result of calling ToObject passing
      //    the this value as the argument.
      if(this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var O = Object(this);

      // 2. Let lenValue be the result of calling the Get
      //    internal method of O with the argument "length".
      // 3. Let len be ToUint32(lenValue).
      var len = O.length >>> 0;

      // 4. If len is 0, return -1.
      if(len === 0) {
        return -1;
      }

      // 5. If argument fromIndex was passed let n be
      //    ToInteger(fromIndex); else let n be 0.
      var n = +fromIndex || 0;

      if(Math.abs(n) === Infinity) {
        n = 0;
      }

      // 6. If n >= len, return -1.
      if(n >= len) {
        return -1;
      }

      // 7. If n >= 0, then Let k be n.
      // 8. Else, n<0, Let k be len - abs(n).
      //    If k is less than 0, then let k be 0.
      k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);

      // 9. Repeat, while k < len
      while(k < len) {
        // a. Let Pk be ToString(k).
        //   This is implicit for LHS operands of the in operator
        // b. Let kPresent be the result of calling the
        //    HasProperty internal method of O with argument Pk.
        //   This step can be combined with c
        // c. If kPresent is true, then
        //    i.  Let elementK be the result of calling the Get
        //        internal method of O with the argument ToString(k).
        //   ii.  Let same be the result of applying the
        //        Strict Equality Comparison Algorithm to
        //        searchElement and elementK.
        //  iii.  If same is true, return k.
        if(k in O && O[k] === searchElement) {
          return k;
        }
        k++;
      }
      return -1;
    };
  }
})();

/*!
 * angular-translate - v2.7.2 - 2015-06-01
 * http://github.com/angular-translate/angular-translate
 * Copyright (c) 2015 ; Licensed MIT
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return (factory());
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    factory();
  }
}(this, function () {

/**
 * @ngdoc overview
 * @name pascalprecht.translate
 *
 * @description
 * The main module which holds everything together.
 */
angular.module('pascalprecht.translate', ['ng'])
  .run(runTranslate);

function runTranslate($translate) {

  'use strict';

  var key = $translate.storageKey(),
    storage = $translate.storage();

  var fallbackFromIncorrectStorageValue = function () {
    var preferred = $translate.preferredLanguage();
    if (angular.isString(preferred)) {
      $translate.use(preferred);
      // $translate.use() will also remember the language.
      // So, we don't need to call storage.put() here.
    } else {
      storage.put(key, $translate.use());
    }
  };

  fallbackFromIncorrectStorageValue.displayName = 'fallbackFromIncorrectStorageValue';

  if (storage) {
    if (!storage.get(key)) {
      fallbackFromIncorrectStorageValue();
    } else {
      $translate.use(storage.get(key))['catch'](fallbackFromIncorrectStorageValue);
    }
  } else if (angular.isString($translate.preferredLanguage())) {
    $translate.use($translate.preferredLanguage());
  }
}
runTranslate.$inject = ['$translate'];

runTranslate.displayName = 'runTranslate';

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateSanitizationProvider
 *
 * @description
 *
 * Configurations for $translateSanitization
 */
angular.module('pascalprecht.translate').provider('$translateSanitization', $translateSanitizationProvider);

function $translateSanitizationProvider () {

  'use strict';

  var $sanitize,
      currentStrategy = null, // TODO change to either 'sanitize', 'escape' or ['sanitize', 'escapeParameters'] in 3.0.
      hasConfiguredStrategy = false,
      hasShownNoStrategyConfiguredWarning = false,
      strategies;

  /**
   * Definition of a sanitization strategy function
   * @callback StrategyFunction
   * @param {string|object} value - value to be sanitized (either a string or an interpolated value map)
   * @param {string} mode - either 'text' for a string (translation) or 'params' for the interpolated params
   * @return {string|object}
   */

  /**
   * @ngdoc property
   * @name strategies
   * @propertyOf pascalprecht.translate.$translateSanitizationProvider
   *
   * @description
   * Following strategies are built-in:
   * <dl>
   *   <dt>sanitize</dt>
   *   <dd>Sanitizes HTML in the translation text using $sanitize</dd>
   *   <dt>escape</dt>
   *   <dd>Escapes HTML in the translation</dd>
   *   <dt>sanitizeParameters</dt>
   *   <dd>Sanitizes HTML in the values of the interpolation parameters using $sanitize</dd>
   *   <dt>escapeParameters</dt>
   *   <dd>Escapes HTML in the values of the interpolation parameters</dd>
   *   <dt>escaped</dt>
   *   <dd>Support legacy strategy name 'escaped' for backwards compatibility (will be removed in 3.0)</dd>
   * </dl>
   *
   */

  strategies = {
    sanitize: function (value, mode) {
      if (mode === 'text') {
        value = htmlSanitizeValue(value);
      }
      return value;
    },
    escape: function (value, mode) {
      if (mode === 'text') {
        value = htmlEscapeValue(value);
      }
      return value;
    },
    sanitizeParameters: function (value, mode) {
      if (mode === 'params') {
        value = mapInterpolationParameters(value, htmlSanitizeValue);
      }
      return value;
    },
    escapeParameters: function (value, mode) {
      if (mode === 'params') {
        value = mapInterpolationParameters(value, htmlEscapeValue);
      }
      return value;
    }
  };
  // Support legacy strategy name 'escaped' for backwards compatibility.
  // TODO should be removed in 3.0
  strategies.escaped = strategies.escapeParameters;

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateSanitizationProvider#addStrategy
   * @methodOf pascalprecht.translate.$translateSanitizationProvider
   *
   * @description
   * Adds a sanitization strategy to the list of known strategies.
   *
   * @param {string} strategyName - unique key for a strategy
   * @param {StrategyFunction} strategyFunction - strategy function
   * @returns {object} this
   */
  this.addStrategy = function (strategyName, strategyFunction) {
    strategies[strategyName] = strategyFunction;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateSanitizationProvider#removeStrategy
   * @methodOf pascalprecht.translate.$translateSanitizationProvider
   *
   * @description
   * Removes a sanitization strategy from the list of known strategies.
   *
   * @param {string} strategyName - unique key for a strategy
   * @returns {object} this
   */
  this.removeStrategy = function (strategyName) {
    delete strategies[strategyName];
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateSanitizationProvider#useStrategy
   * @methodOf pascalprecht.translate.$translateSanitizationProvider
   *
   * @description
   * Selects a sanitization strategy. When an array is provided the strategies will be executed in order.
   *
   * @param {string|StrategyFunction|array} strategy The sanitization strategy / strategies which should be used. Either a name of an existing strategy, a custom strategy function, or an array consisting of multiple names and / or custom functions.
   * @returns {object} this
   */
  this.useStrategy = function (strategy) {
    hasConfiguredStrategy = true;
    currentStrategy = strategy;
    return this;
  };

  /**
   * @ngdoc object
   * @name pascalprecht.translate.$translateSanitization
   * @requires $injector
   * @requires $log
   *
   * @description
   * Sanitizes interpolation parameters and translated texts.
   *
   */
  this.$get = ['$injector', '$log', function ($injector, $log) {

    var applyStrategies = function (value, mode, selectedStrategies) {
      angular.forEach(selectedStrategies, function (selectedStrategy) {
        if (angular.isFunction(selectedStrategy)) {
          value = selectedStrategy(value, mode);
        } else if (angular.isFunction(strategies[selectedStrategy])) {
          value = strategies[selectedStrategy](value, mode);
        } else {
          throw new Error('pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: \'' + selectedStrategy + '\'');
        }
      });
      return value;
    };

    // TODO: should be removed in 3.0
    var showNoStrategyConfiguredWarning = function () {
      if (!hasConfiguredStrategy && !hasShownNoStrategyConfiguredWarning) {
        $log.warn('pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. See http://angular-translate.github.io/docs/#/guide/19_security for details.');
        hasShownNoStrategyConfiguredWarning = true;
      }
    };

    if ($injector.has('$sanitize')) {
      $sanitize = $injector.get('$sanitize');
    }

    return {
      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translateSanitization#useStrategy
       * @methodOf pascalprecht.translate.$translateSanitization
       *
       * @description
       * Selects a sanitization strategy. When an array is provided the strategies will be executed in order.
       *
       * @param {string|StrategyFunction|array} strategy The sanitization strategy / strategies which should be used. Either a name of an existing strategy, a custom strategy function, or an array consisting of multiple names and / or custom functions.
       */
      useStrategy: (function (self) {
        return function (strategy) {
          self.useStrategy(strategy);
        };
      })(this),

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translateSanitization#sanitize
       * @methodOf pascalprecht.translate.$translateSanitization
       *
       * @description
       * Sanitizes a value.
       *
       * @param {string|object} value The value which should be sanitized.
       * @param {string} mode The current sanitization mode, either 'params' or 'text'.
       * @param {string|StrategyFunction|array} [strategy] Optional custom strategy which should be used instead of the currently selected strategy.
       * @returns {string|object} sanitized value
       */
      sanitize: function (value, mode, strategy) {
        if (!currentStrategy) {
          showNoStrategyConfiguredWarning();
        }

        if (arguments.length < 3) {
          strategy = currentStrategy;
        }

        if (!strategy) {
          return value;
        }

        var selectedStrategies = angular.isArray(strategy) ? strategy : [strategy];
        return applyStrategies(value, mode, selectedStrategies);
      }
    };
  }];

  var htmlEscapeValue = function (value) {
    var element = angular.element('<div></div>');
    element.text(value); // not chainable, see #1044
    return element.html();
  };

  var htmlSanitizeValue = function (value) {
    if (!$sanitize) {
      throw new Error('pascalprecht.translate.$translateSanitization: Error cannot find $sanitize service. Either include the ngSanitize module (https://docs.angularjs.org/api/ngSanitize) or use a sanitization strategy which does not depend on $sanitize, such as \'escape\'.');
    }
    return $sanitize(value);
  };

  var mapInterpolationParameters = function (value, iteratee) {
    if (angular.isObject(value)) {
      var result = angular.isArray(value) ? [] : {};

      angular.forEach(value, function (propertyValue, propertyKey) {
        result[propertyKey] = mapInterpolationParameters(propertyValue, iteratee);
      });

      return result;
    } else if (angular.isNumber(value)) {
      return value;
    } else {
      return iteratee(value);
    }
  };
}

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateProvider
 * @description
 *
 * $translateProvider allows developers to register translation-tables, asynchronous loaders
 * and similar to configure translation behavior directly inside of a module.
 *
 */
angular.module('pascalprecht.translate')
.constant('pascalprechtTranslateOverrider', {})
.provider('$translate', $translate);

function $translate($STORAGE_KEY, $windowProvider, $translateSanitizationProvider, pascalprechtTranslateOverrider) {

  'use strict';

  var $translationTable = {},
      $preferredLanguage,
      $availableLanguageKeys = [],
      $languageKeyAliases,
      $fallbackLanguage,
      $fallbackWasString,
      $uses,
      $nextLang,
      $storageFactory,
      $storageKey = $STORAGE_KEY,
      $storagePrefix,
      $missingTranslationHandlerFactory,
      $interpolationFactory,
      $interpolatorFactories = [],
      $loaderFactory,
      $cloakClassName = 'translate-cloak',
      $loaderOptions,
      $notFoundIndicatorLeft,
      $notFoundIndicatorRight,
      $postCompilingEnabled = false,
      $forceAsyncReloadEnabled = false,
      NESTED_OBJECT_DELIMITER = '.',
      loaderCache,
      directivePriority = 0,
      statefulFilter = true,
      uniformLanguageTagResolver = 'default',
      languageTagResolver = {
        'default': function (tag) {
          return (tag || '').split('-').join('_');
        },
        java: function (tag) {
          var temp = (tag || '').split('-').join('_');
          var parts = temp.split('_');
          return parts.length > 1 ? (parts[0].toLowerCase() + '_' + parts[1].toUpperCase()) : temp;
        },
        bcp47: function (tag) {
          var temp = (tag || '').split('_').join('-');
          var parts = temp.split('-');
          return parts.length > 1 ? (parts[0].toLowerCase() + '-' + parts[1].toUpperCase()) : temp;
        }
      };

  var version = '2.7.2';

  // tries to determine the browsers language
  var getFirstBrowserLanguage = function () {

    // internal purpose only
    if (angular.isFunction(pascalprechtTranslateOverrider.getLocale)) {
      return pascalprechtTranslateOverrider.getLocale();
    }

    var nav = $windowProvider.$get().navigator,
        browserLanguagePropertyKeys = ['language', 'browserLanguage', 'systemLanguage', 'userLanguage'],
        i,
        language;

    // support for HTML 5.1 "navigator.languages"
    if (angular.isArray(nav.languages)) {
      for (i = 0; i < nav.languages.length; i++) {
        language = nav.languages[i];
        if (language && language.length) {
          return language;
        }
      }
    }

    // support for other well known properties in browsers
    for (i = 0; i < browserLanguagePropertyKeys.length; i++) {
      language = nav[browserLanguagePropertyKeys[i]];
      if (language && language.length) {
        return language;
      }
    }

    return null;
  };
  getFirstBrowserLanguage.displayName = 'angular-translate/service: getFirstBrowserLanguage';

  // tries to determine the browsers locale
  var getLocale = function () {
    var locale = getFirstBrowserLanguage() || '';
    if (languageTagResolver[uniformLanguageTagResolver]) {
      locale = languageTagResolver[uniformLanguageTagResolver](locale);
    }
    return locale;
  };
  getLocale.displayName = 'angular-translate/service: getLocale';

  /**
   * @name indexOf
   * @private
   *
   * @description
   * indexOf polyfill. Kinda sorta.
   *
   * @param {array} array Array to search in.
   * @param {string} searchElement Element to search for.
   *
   * @returns {int} Index of search element.
   */
  var indexOf = function(array, searchElement) {
    for (var i = 0, len = array.length; i < len; i++) {
      if (array[i] === searchElement) {
        return i;
      }
    }
    return -1;
  };

  /**
   * @name trim
   * @private
   *
   * @description
   * trim polyfill
   *
   * @returns {string} The string stripped of whitespace from both ends
   */
  var trim = function() {
    return this.toString().replace(/^\s+|\s+$/g, '');
  };

  var negotiateLocale = function (preferred) {

    var avail = [],
        locale = angular.lowercase(preferred),
        i = 0,
        n = $availableLanguageKeys.length;

    for (; i < n; i++) {
      avail.push(angular.lowercase($availableLanguageKeys[i]));
    }

    if (indexOf(avail, locale) > -1) {
      return preferred;
    }

    if ($languageKeyAliases) {
      var alias;
      for (var langKeyAlias in $languageKeyAliases) {
        var hasWildcardKey = false;
        var hasExactKey = Object.prototype.hasOwnProperty.call($languageKeyAliases, langKeyAlias) &&
          angular.lowercase(langKeyAlias) === angular.lowercase(preferred);

        if (langKeyAlias.slice(-1) === '*') {
          hasWildcardKey = langKeyAlias.slice(0, -1) === preferred.slice(0, langKeyAlias.length-1);
        }
        if (hasExactKey || hasWildcardKey) {
          alias = $languageKeyAliases[langKeyAlias];
          if (indexOf(avail, angular.lowercase(alias)) > -1) {
            return alias;
          }
        }
      }
    }

    if (preferred) {
      var parts = preferred.split('_');

      if (parts.length > 1 && indexOf(avail, angular.lowercase(parts[0])) > -1) {
        return parts[0];
      }
    }

    // If everything fails, just return the preferred, unchanged.
    return preferred;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#translations
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Registers a new translation table for specific language key.
   *
   * To register a translation table for specific language, pass a defined language
   * key as first parameter.
   *
   * <pre>
   *  // register translation table for language: 'de_DE'
   *  $translateProvider.translations('de_DE', {
   *    'GREETING': 'Hallo Welt!'
   *  });
   *
   *  // register another one
   *  $translateProvider.translations('en_US', {
   *    'GREETING': 'Hello world!'
   *  });
   * </pre>
   *
   * When registering multiple translation tables for for the same language key,
   * the actual translation table gets extended. This allows you to define module
   * specific translation which only get added, once a specific module is loaded in
   * your app.
   *
   * Invoking this method with no arguments returns the translation table which was
   * registered with no language key. Invoking it with a language key returns the
   * related translation table.
   *
   * @param {string} key A language key.
   * @param {object} translationTable A plain old JavaScript object that represents a translation table.
   *
   */
  var translations = function (langKey, translationTable) {

    if (!langKey && !translationTable) {
      return $translationTable;
    }

    if (langKey && !translationTable) {
      if (angular.isString(langKey)) {
        return $translationTable[langKey];
      }
    } else {
      if (!angular.isObject($translationTable[langKey])) {
        $translationTable[langKey] = {};
      }
      angular.extend($translationTable[langKey], flatObject(translationTable));
    }
    return this;
  };

  this.translations = translations;

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#cloakClassName
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   *
   * Let's you change the class name for `translate-cloak` directive.
   * Default class name is `translate-cloak`.
   *
   * @param {string} name translate-cloak class name
   */
  this.cloakClassName = function (name) {
    if (!name) {
      return $cloakClassName;
    }
    $cloakClassName = name;
    return this;
  };

  /**
   * @name flatObject
   * @private
   *
   * @description
   * Flats an object. This function is used to flatten given translation data with
   * namespaces, so they are later accessible via dot notation.
   */
  var flatObject = function (data, path, result, prevKey) {
    var key, keyWithPath, keyWithShortPath, val;

    if (!path) {
      path = [];
    }
    if (!result) {
      result = {};
    }
    for (key in data) {
      if (!Object.prototype.hasOwnProperty.call(data, key)) {
        continue;
      }
      val = data[key];
      if (angular.isObject(val)) {
        flatObject(val, path.concat(key), result, key);
      } else {
        keyWithPath = path.length ? ('' + path.join(NESTED_OBJECT_DELIMITER) + NESTED_OBJECT_DELIMITER + key) : key;
        if(path.length && key === prevKey){
          // Create shortcut path (foo.bar == foo.bar.bar)
          keyWithShortPath = '' + path.join(NESTED_OBJECT_DELIMITER);
          // Link it to original path
          result[keyWithShortPath] = '@:' + keyWithPath;
        }
        result[keyWithPath] = val;
      }
    }
    return result;
  };
  flatObject.displayName = 'flatObject';

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#addInterpolation
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Adds interpolation services to angular-translate, so it can manage them.
   *
   * @param {object} factory Interpolation service factory
   */
  this.addInterpolation = function (factory) {
    $interpolatorFactories.push(factory);
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useMessageFormatInterpolation
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use interpolation functionality of messageformat.js.
   * This is useful when having high level pluralization and gender selection.
   */
  this.useMessageFormatInterpolation = function () {
    return this.useInterpolation('$translateMessageFormatInterpolation');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useInterpolation
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate which interpolation style to use as default, application-wide.
   * Simply pass a factory/service name. The interpolation service has to implement
   * the correct interface.
   *
   * @param {string} factory Interpolation service name.
   */
  this.useInterpolation = function (factory) {
    $interpolationFactory = factory;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useSanitizeStrategy
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Simply sets a sanitation strategy type.
   *
   * @param {string} value Strategy type.
   */
  this.useSanitizeValueStrategy = function (value) {
    $translateSanitizationProvider.useStrategy(value);
    return this;
  };

 /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#preferredLanguage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells the module which of the registered translation tables to use for translation
   * at initial startup by passing a language key. Similar to `$translateProvider#use`
   * only that it says which language to **prefer**.
   *
   * @param {string} langKey A language key.
   *
   */
  this.preferredLanguage = function(langKey) {
    setupPreferredLanguage(langKey);
    return this;

  };
  var setupPreferredLanguage = function (langKey) {
    if (langKey) {
      $preferredLanguage = langKey;
    }
    return $preferredLanguage;
  };
  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicator
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets an indicator which is used when a translation isn't found. E.g. when
   * setting the indicator as 'X' and one tries to translate a translation id
   * called `NOT_FOUND`, this will result in `X NOT_FOUND X`.
   *
   * Internally this methods sets a left indicator and a right indicator using
   * `$translateProvider.translationNotFoundIndicatorLeft()` and
   * `$translateProvider.translationNotFoundIndicatorRight()`.
   *
   * **Note**: These methods automatically add a whitespace between the indicators
   * and the translation id.
   *
   * @param {string} indicator An indicator, could be any string.
   */
  this.translationNotFoundIndicator = function (indicator) {
    this.translationNotFoundIndicatorLeft(indicator);
    this.translationNotFoundIndicatorRight(indicator);
    return this;
  };

  /**
   * ngdoc function
   * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets an indicator which is used when a translation isn't found left to the
   * translation id.
   *
   * @param {string} indicator An indicator.
   */
  this.translationNotFoundIndicatorLeft = function (indicator) {
    if (!indicator) {
      return $notFoundIndicatorLeft;
    }
    $notFoundIndicatorLeft = indicator;
    return this;
  };

  /**
   * ngdoc function
   * @name pascalprecht.translate.$translateProvider#translationNotFoundIndicatorLeft
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets an indicator which is used when a translation isn't found right to the
   * translation id.
   *
   * @param {string} indicator An indicator.
   */
  this.translationNotFoundIndicatorRight = function (indicator) {
    if (!indicator) {
      return $notFoundIndicatorRight;
    }
    $notFoundIndicatorRight = indicator;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#fallbackLanguage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells the module which of the registered translation tables to use when missing translations
   * at initial startup by passing a language key. Similar to `$translateProvider#use`
   * only that it says which language to **fallback**.
   *
   * @param {string||array} langKey A language key.
   *
   */
  this.fallbackLanguage = function (langKey) {
    fallbackStack(langKey);
    return this;
  };

  var fallbackStack = function (langKey) {
    if (langKey) {
      if (angular.isString(langKey)) {
        $fallbackWasString = true;
        $fallbackLanguage = [ langKey ];
      } else if (angular.isArray(langKey)) {
        $fallbackWasString = false;
        $fallbackLanguage = langKey;
      }
      if (angular.isString($preferredLanguage)  && indexOf($fallbackLanguage, $preferredLanguage) < 0) {
        $fallbackLanguage.push($preferredLanguage);
      }

      return this;
    } else {
      if ($fallbackWasString) {
        return $fallbackLanguage[0];
      } else {
        return $fallbackLanguage;
      }
    }
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#use
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Set which translation table to use for translation by given language key. When
   * trying to 'use' a language which isn't provided, it'll throw an error.
   *
   * You actually don't have to use this method since `$translateProvider#preferredLanguage`
   * does the job too.
   *
   * @param {string} langKey A language key.
   */
  this.use = function (langKey) {
    if (langKey) {
      if (!$translationTable[langKey] && (!$loaderFactory)) {
        // only throw an error, when not loading translation data asynchronously
        throw new Error('$translateProvider couldn\'t find translationTable for langKey: \'' + langKey + '\'');
      }
      $uses = langKey;
      return this;
    }
    return $uses;
  };

 /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#storageKey
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells the module which key must represent the choosed language by a user in the storage.
   *
   * @param {string} key A key for the storage.
   */
  var storageKey = function(key) {
    if (!key) {
      if ($storagePrefix) {
        return $storagePrefix + $storageKey;
      }
      return $storageKey;
    }
    $storageKey = key;
    return this;
  };

  this.storageKey = storageKey;

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useUrlLoader
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateUrlLoader` extension service as loader.
   *
   * @param {string} url Url
   * @param {Object=} options Optional configuration object
   */
  this.useUrlLoader = function (url, options) {
    return this.useLoader('$translateUrlLoader', angular.extend({ url: url }, options));
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useStaticFilesLoader
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateStaticFilesLoader` extension service as loader.
   *
   * @param {Object=} options Optional configuration object
   */
  this.useStaticFilesLoader = function (options) {
    return this.useLoader('$translateStaticFilesLoader', options);
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useLoader
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use any other service as loader.
   *
   * @param {string} loaderFactory Factory name to use
   * @param {Object=} options Optional configuration object
   */
  this.useLoader = function (loaderFactory, options) {
    $loaderFactory = loaderFactory;
    $loaderOptions = options || {};
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useLocalStorage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateLocalStorage` service as storage layer.
   *
   */
  this.useLocalStorage = function () {
    return this.useStorage('$translateLocalStorage');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useCookieStorage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use `$translateCookieStorage` service as storage layer.
   */
  this.useCookieStorage = function () {
    return this.useStorage('$translateCookieStorage');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useStorage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use custom service as storage layer.
   */
  this.useStorage = function (storageFactory) {
    $storageFactory = storageFactory;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#storagePrefix
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets prefix for storage key.
   *
   * @param {string} prefix Storage key prefix
   */
  this.storagePrefix = function (prefix) {
    if (!prefix) {
      return prefix;
    }
    $storagePrefix = prefix;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandlerLog
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to use built-in log handler when trying to translate
   * a translation Id which doesn't exist.
   *
   * This is actually a shortcut method for `useMissingTranslationHandler()`.
   *
   */
  this.useMissingTranslationHandlerLog = function () {
    return this.useMissingTranslationHandler('$translateMissingTranslationHandlerLog');
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useMissingTranslationHandler
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Expects a factory name which later gets instantiated with `$injector`.
   * This method can be used to tell angular-translate to use a custom
   * missingTranslationHandler. Just build a factory which returns a function
   * and expects a translation id as argument.
   *
   * Example:
   * <pre>
   *  app.config(function ($translateProvider) {
   *    $translateProvider.useMissingTranslationHandler('customHandler');
   *  });
   *
   *  app.factory('customHandler', function (dep1, dep2) {
   *    return function (translationId) {
   *      // something with translationId and dep1 and dep2
   *    };
   *  });
   * </pre>
   *
   * @param {string} factory Factory name
   */
  this.useMissingTranslationHandler = function (factory) {
    $missingTranslationHandlerFactory = factory;
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#usePostCompiling
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * If post compiling is enabled, all translated values will be processed
   * again with AngularJS' $compile.
   *
   * Example:
   * <pre>
   *  app.config(function ($translateProvider) {
   *    $translateProvider.usePostCompiling(true);
   *  });
   * </pre>
   *
   * @param {string} factory Factory name
   */
  this.usePostCompiling = function (value) {
    $postCompilingEnabled = !(!value);
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#forceAsyncReload
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * If force async reload is enabled, async loader will always be called
   * even if $translationTable already contains the language key, adding
   * possible new entries to the $translationTable.
   *
   * Example:
   * <pre>
   *  app.config(function ($translateProvider) {
   *    $translateProvider.forceAsyncReload(true);
   *  });
   * </pre>
   *
   * @param {boolean} value - valid values are true or false
   */
  this.forceAsyncReload = function (value) {
    $forceAsyncReloadEnabled = !(!value);
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#uniformLanguageTag
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate which language tag should be used as a result when determining
   * the current browser language.
   *
   * This setting must be set before invoking {@link pascalprecht.translate.$translateProvider#methods_determinePreferredLanguage determinePreferredLanguage()}.
   *
   * <pre>
   * $translateProvider
   *   .uniformLanguageTag('bcp47')
   *   .determinePreferredLanguage()
   * </pre>
   *
   * The resolver currently supports:
   * * default
   *     (traditionally: hyphens will be converted into underscores, i.e. en-US => en_US)
   *     en-US => en_US
   *     en_US => en_US
   *     en-us => en_us
   * * java
   *     like default, but the second part will be always in uppercase
   *     en-US => en_US
   *     en_US => en_US
   *     en-us => en_US
   * * BCP 47 (RFC 4646 & 4647)
   *     en-US => en-US
   *     en_US => en-US
   *     en-us => en-US
   *
   * See also:
   * * http://en.wikipedia.org/wiki/IETF_language_tag
   * * http://www.w3.org/International/core/langtags/
   * * http://tools.ietf.org/html/bcp47
   *
   * @param {string|object} options - options (or standard)
   * @param {string} options.standard - valid values are 'default', 'bcp47', 'java'
   */
  this.uniformLanguageTag = function (options) {

    if (!options) {
      options = {};
    } else if (angular.isString(options)) {
      options = {
        standard: options
      };
    }

    uniformLanguageTagResolver = options.standard;

    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#determinePreferredLanguage
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Tells angular-translate to try to determine on its own which language key
   * to set as preferred language. When `fn` is given, angular-translate uses it
   * to determine a language key, otherwise it uses the built-in `getLocale()`
   * method.
   *
   * The `getLocale()` returns a language key in the format `[lang]_[country]` or
   * `[lang]` depending on what the browser provides.
   *
   * Use this method at your own risk, since not all browsers return a valid
   * locale (see {@link pascalprecht.translate.$translateProvider#methods_uniformLanguageTag uniformLanguageTag()}).
   *
   * @param {Function=} fn Function to determine a browser's locale
   */
  this.determinePreferredLanguage = function (fn) {

    var locale = (fn && angular.isFunction(fn)) ? fn() : getLocale();

    if (!$availableLanguageKeys.length) {
      $preferredLanguage = locale;
    } else {
      $preferredLanguage = negotiateLocale(locale);
    }

    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#registerAvailableLanguageKeys
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Registers a set of language keys the app will work with. Use this method in
   * combination with
   * {@link pascalprecht.translate.$translateProvider#determinePreferredLanguage determinePreferredLanguage}.
   * When available languages keys are registered, angular-translate
   * tries to find the best fitting language key depending on the browsers locale,
   * considering your language key convention.
   *
   * @param {object} languageKeys Array of language keys the your app will use
   * @param {object=} aliases Alias map.
   */
  this.registerAvailableLanguageKeys = function (languageKeys, aliases) {
    if (languageKeys) {
      $availableLanguageKeys = languageKeys;
      if (aliases) {
        $languageKeyAliases = aliases;
      }
      return this;
    }
    return $availableLanguageKeys;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#useLoaderCache
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Registers a cache for internal $http based loaders.
   * {@link pascalprecht.translate.$translateProvider#determinePreferredLanguage determinePreferredLanguage}.
   * When false the cache will be disabled (default). When true or undefined
   * the cache will be a default (see $cacheFactory). When an object it will
   * be treat as a cache object itself: the usage is $http({cache: cache})
   *
   * @param {object} cache boolean, string or cache-object
   */
  this.useLoaderCache = function (cache) {
    if (cache === false) {
      // disable cache
      loaderCache = undefined;
    } else if (cache === true) {
      // enable cache using AJS defaults
      loaderCache = true;
    } else if (typeof(cache) === 'undefined') {
      // enable cache using default
      loaderCache = '$translationCache';
    } else if (cache) {
      // enable cache using given one (see $cacheFactory)
      loaderCache = cache;
    }
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#directivePriority
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Sets the default priority of the translate directive. The standard value is `0`.
   * Calling this function without an argument will return the current value.
   *
   * @param {number} priority for the translate-directive
   */
  this.directivePriority = function (priority) {
    if (priority === undefined) {
      // getter
      return directivePriority;
    } else {
      // setter with chaining
      directivePriority = priority;
      return this;
    }
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateProvider#statefulFilter
   * @methodOf pascalprecht.translate.$translateProvider
   *
   * @description
   * Since AngularJS 1.3, filters which are not stateless (depending at the scope)
   * have to explicit define this behavior.
   * Sets whether the translate filter should be stateful or stateless. The standard value is `true`
   * meaning being stateful.
   * Calling this function without an argument will return the current value.
   *
   * @param {boolean} state - defines the state of the filter
   */
  this.statefulFilter = function (state) {
    if (state === undefined) {
      // getter
      return statefulFilter;
    } else {
      // setter with chaining
      statefulFilter = state;
      return this;
    }
  };

  /**
   * @ngdoc object
   * @name pascalprecht.translate.$translate
   * @requires $interpolate
   * @requires $log
   * @requires $rootScope
   * @requires $q
   *
   * @description
   * The `$translate` service is the actual core of angular-translate. It expects a translation id
   * and optional interpolate parameters to translate contents.
   *
   * <pre>
   *  $translate('HEADLINE_TEXT').then(function (translation) {
   *    $scope.translatedText = translation;
   *  });
   * </pre>
   *
   * @param {string|array} translationId A token which represents a translation id
   *                                     This can be optionally an array of translation ids which
   *                                     results that the function returns an object where each key
   *                                     is the translation id and the value the translation.
   * @param {object=} interpolateParams An object hash for dynamic values
   * @param {string} interpolationId The id of the interpolation to use
   * @returns {object} promise
   */
  this.$get = [
    '$log',
    '$injector',
    '$rootScope',
    '$q',
    function ($log, $injector, $rootScope, $q) {

      var Storage,
          defaultInterpolator = $injector.get($interpolationFactory || '$translateDefaultInterpolation'),
          pendingLoader = false,
          interpolatorHashMap = {},
          langPromises = {},
          fallbackIndex,
          startFallbackIteration;

      var $translate = function (translationId, interpolateParams, interpolationId, defaultTranslationText) {

        // Duck detection: If the first argument is an array, a bunch of translations was requested.
        // The result is an object.
        if (angular.isArray(translationId)) {
          // Inspired by Q.allSettled by Kris Kowal
          // https://github.com/kriskowal/q/blob/b0fa72980717dc202ffc3cbf03b936e10ebbb9d7/q.js#L1553-1563
          // This transforms all promises regardless resolved or rejected
          var translateAll = function (translationIds) {
            var results = {}; // storing the actual results
            var promises = []; // promises to wait for
            // Wraps the promise a) being always resolved and b) storing the link id->value
            var translate = function (translationId) {
              var deferred = $q.defer();
              var regardless = function (value) {
                results[translationId] = value;
                deferred.resolve([translationId, value]);
              };
              // we don't care whether the promise was resolved or rejected; just store the values
              $translate(translationId, interpolateParams, interpolationId, defaultTranslationText).then(regardless, regardless);
              return deferred.promise;
            };
            for (var i = 0, c = translationIds.length; i < c; i++) {
              promises.push(translate(translationIds[i]));
            }
            // wait for all (including storing to results)
            return $q.all(promises).then(function () {
              // return the results
              return results;
            });
          };
          return translateAll(translationId);
        }

        var deferred = $q.defer();

        // trim off any whitespace
        if (translationId) {
          translationId = trim.apply(translationId);
        }

        var promiseToWaitFor = (function () {
          var promise = $preferredLanguage ?
            langPromises[$preferredLanguage] :
            langPromises[$uses];

          fallbackIndex = 0;

          if ($storageFactory && !promise) {
            // looks like there's no pending promise for $preferredLanguage or
            // $uses. Maybe there's one pending for a language that comes from
            // storage.
            var langKey = Storage.get($storageKey);
            promise = langPromises[langKey];

            if ($fallbackLanguage && $fallbackLanguage.length) {
                var index = indexOf($fallbackLanguage, langKey);
                // maybe the language from storage is also defined as fallback language
                // we increase the fallback language index to not search in that language
                // as fallback, since it's probably the first used language
                // in that case the index starts after the first element
                fallbackIndex = (index === 0) ? 1 : 0;

                // but we can make sure to ALWAYS fallback to preferred language at least
                if (indexOf($fallbackLanguage, $preferredLanguage) < 0) {
                  $fallbackLanguage.push($preferredLanguage);
                }
            }
          }
          return promise;
        }());

        if (!promiseToWaitFor) {
          // no promise to wait for? okay. Then there's no loader registered
          // nor is a one pending for language that comes from storage.
          // We can just translate.
          determineTranslation(translationId, interpolateParams, interpolationId, defaultTranslationText).then(deferred.resolve, deferred.reject);
        } else {
          var promiseResolved = function () {
            determineTranslation(translationId, interpolateParams, interpolationId, defaultTranslationText).then(deferred.resolve, deferred.reject);
          };
          promiseResolved.displayName = 'promiseResolved';

          promiseToWaitFor['finally'](promiseResolved, deferred.reject);
        }
        return deferred.promise;
      };

      /**
       * @name applyNotFoundIndicators
       * @private
       *
       * @description
       * Applies not fount indicators to given translation id, if needed.
       * This function gets only executed, if a translation id doesn't exist,
       * which is why a translation id is expected as argument.
       *
       * @param {string} translationId Translation id.
       * @returns {string} Same as given translation id but applied with not found
       * indicators.
       */
      var applyNotFoundIndicators = function (translationId) {
        // applying notFoundIndicators
        if ($notFoundIndicatorLeft) {
          translationId = [$notFoundIndicatorLeft, translationId].join(' ');
        }
        if ($notFoundIndicatorRight) {
          translationId = [translationId, $notFoundIndicatorRight].join(' ');
        }
        return translationId;
      };

      /**
       * @name useLanguage
       * @private
       *
       * @description
       * Makes actual use of a language by setting a given language key as used
       * language and informs registered interpolators to also use the given
       * key as locale.
       *
       * @param {key} Locale key.
       */
      var useLanguage = function (key) {
        $uses = key;
        $rootScope.$emit('$translateChangeSuccess', {language: key});

        if ($storageFactory) {
          Storage.put($translate.storageKey(), $uses);
        }
        // inform default interpolator
        defaultInterpolator.setLocale($uses);

        var eachInterpolator = function (interpolator, id) {
          interpolatorHashMap[id].setLocale($uses);
        };
        eachInterpolator.displayName = 'eachInterpolatorLocaleSetter';

        // inform all others too!
        angular.forEach(interpolatorHashMap, eachInterpolator);
        $rootScope.$emit('$translateChangeEnd', {language: key});
      };

      /**
       * @name loadAsync
       * @private
       *
       * @description
       * Kicks of registered async loader using `$injector` and applies existing
       * loader options. When resolved, it updates translation tables accordingly
       * or rejects with given language key.
       *
       * @param {string} key Language key.
       * @return {Promise} A promise.
       */
      var loadAsync = function (key) {
        if (!key) {
          throw 'No language key specified for loading.';
        }

        var deferred = $q.defer();

        $rootScope.$emit('$translateLoadingStart', {language: key});
        pendingLoader = true;

        var cache = loaderCache;
        if (typeof(cache) === 'string') {
          // getting on-demand instance of loader
          cache = $injector.get(cache);
        }

        var loaderOptions = angular.extend({}, $loaderOptions, {
          key: key,
          $http: angular.extend({}, {
            cache: cache
          }, $loaderOptions.$http)
        });

        var onLoaderSuccess = function (data) {
          var translationTable = {};
          $rootScope.$emit('$translateLoadingSuccess', {language: key});

          if (angular.isArray(data)) {
            angular.forEach(data, function (table) {
              angular.extend(translationTable, flatObject(table));
            });
          } else {
            angular.extend(translationTable, flatObject(data));
          }
          pendingLoader = false;
          deferred.resolve({
            key: key,
            table: translationTable
          });
          $rootScope.$emit('$translateLoadingEnd', {language: key});
        };
        onLoaderSuccess.displayName = 'onLoaderSuccess';

        var onLoaderError = function (key) {
          $rootScope.$emit('$translateLoadingError', {language: key});
          deferred.reject(key);
          $rootScope.$emit('$translateLoadingEnd', {language: key});
        };
        onLoaderError.displayName = 'onLoaderError';

        $injector.get($loaderFactory)(loaderOptions)
          .then(onLoaderSuccess, onLoaderError);

        return deferred.promise;
      };

      if ($storageFactory) {
        Storage = $injector.get($storageFactory);

        if (!Storage.get || !Storage.put) {
          throw new Error('Couldn\'t use storage \'' + $storageFactory + '\', missing get() or put() method!');
        }
      }

      // if we have additional interpolations that were added via
      // $translateProvider.addInterpolation(), we have to map'em
      if ($interpolatorFactories.length) {
        var eachInterpolationFactory = function (interpolatorFactory) {
          var interpolator = $injector.get(interpolatorFactory);
          // setting initial locale for each interpolation service
          interpolator.setLocale($preferredLanguage || $uses);
          // make'em recognizable through id
          interpolatorHashMap[interpolator.getInterpolationIdentifier()] = interpolator;
        };
        eachInterpolationFactory.displayName = 'interpolationFactoryAdder';

        angular.forEach($interpolatorFactories, eachInterpolationFactory);
      }

      /**
       * @name getTranslationTable
       * @private
       *
       * @description
       * Returns a promise that resolves to the translation table
       * or is rejected if an error occurred.
       *
       * @param langKey
       * @returns {Q.promise}
       */
      var getTranslationTable = function (langKey) {
        var deferred = $q.defer();
        if (Object.prototype.hasOwnProperty.call($translationTable, langKey)) {
          deferred.resolve($translationTable[langKey]);
        } else if (langPromises[langKey]) {
          var onResolve = function (data) {
            translations(data.key, data.table);
            deferred.resolve(data.table);
          };
          onResolve.displayName = 'translationTableResolver';
          langPromises[langKey].then(onResolve, deferred.reject);
        } else {
          deferred.reject();
        }
        return deferred.promise;
      };

      /**
       * @name getFallbackTranslation
       * @private
       *
       * @description
       * Returns a promise that will resolve to the translation
       * or be rejected if no translation was found for the language.
       * This function is currently only used for fallback language translation.
       *
       * @param langKey The language to translate to.
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {Q.promise}
       */
      var getFallbackTranslation = function (langKey, translationId, interpolateParams, Interpolator) {
        var deferred = $q.defer();

        var onResolve = function (translationTable) {
          if (Object.prototype.hasOwnProperty.call(translationTable, translationId)) {
            Interpolator.setLocale(langKey);
            var translation = translationTable[translationId];
            if (translation.substr(0, 2) === '@:') {
              getFallbackTranslation(langKey, translation.substr(2), interpolateParams, Interpolator)
                .then(deferred.resolve, deferred.reject);
            } else {
              deferred.resolve(Interpolator.interpolate(translationTable[translationId], interpolateParams));
            }
            Interpolator.setLocale($uses);
          } else {
            deferred.reject();
          }
        };
        onResolve.displayName = 'fallbackTranslationResolver';

        getTranslationTable(langKey).then(onResolve, deferred.reject);

        return deferred.promise;
      };

      /**
       * @name getFallbackTranslationInstant
       * @private
       *
       * @description
       * Returns a translation
       * This function is currently only used for fallback language translation.
       *
       * @param langKey The language to translate to.
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {string} translation
       */
      var getFallbackTranslationInstant = function (langKey, translationId, interpolateParams, Interpolator) {
        var result, translationTable = $translationTable[langKey];

        if (translationTable && Object.prototype.hasOwnProperty.call(translationTable, translationId)) {
          Interpolator.setLocale(langKey);
          result = Interpolator.interpolate(translationTable[translationId], interpolateParams);
          if (result.substr(0, 2) === '@:') {
            return getFallbackTranslationInstant(langKey, result.substr(2), interpolateParams, Interpolator);
          }
          Interpolator.setLocale($uses);
        }

        return result;
      };


      /**
       * @name translateByHandler
       * @private
       *
       * Translate by missing translation handler.
       *
       * @param translationId
       * @returns translation created by $missingTranslationHandler or translationId is $missingTranslationHandler is
       * absent
       */
      var translateByHandler = function (translationId, interpolateParams) {
        // If we have a handler factory - we might also call it here to determine if it provides
        // a default text for a translationid that can't be found anywhere in our tables
        if ($missingTranslationHandlerFactory) {
          var resultString = $injector.get($missingTranslationHandlerFactory)(translationId, $uses, interpolateParams);
          if (resultString !== undefined) {
            return resultString;
          } else {
            return translationId;
          }
        } else {
          return translationId;
        }
      };

      /**
       * @name resolveForFallbackLanguage
       * @private
       *
       * Recursive helper function for fallbackTranslation that will sequentially look
       * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
       *
       * @param fallbackLanguageIndex
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {Q.promise} Promise that will resolve to the translation.
       */
      var resolveForFallbackLanguage = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator, defaultTranslationText) {
        var deferred = $q.defer();

        if (fallbackLanguageIndex < $fallbackLanguage.length) {
          var langKey = $fallbackLanguage[fallbackLanguageIndex];
          getFallbackTranslation(langKey, translationId, interpolateParams, Interpolator).then(
            deferred.resolve,
            function () {
              // Look in the next fallback language for a translation.
              // It delays the resolving by passing another promise to resolve.
              resolveForFallbackLanguage(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator, defaultTranslationText).then(deferred.resolve);
            }
          );
        } else {
          // No translation found in any fallback language
          // if a default translation text is set in the directive, then return this as a result
          if (defaultTranslationText) {
            deferred.resolve(defaultTranslationText);
          } else {
            // if no default translation is set and an error handler is defined, send it to the handler
            // and then return the result
            deferred.resolve(translateByHandler(translationId, interpolateParams));
          }
        }
        return deferred.promise;
      };

      /**
       * @name resolveForFallbackLanguageInstant
       * @private
       *
       * Recursive helper function for fallbackTranslation that will sequentially look
       * for a translation in the fallbackLanguages starting with fallbackLanguageIndex.
       *
       * @param fallbackLanguageIndex
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {string} translation
       */
      var resolveForFallbackLanguageInstant = function (fallbackLanguageIndex, translationId, interpolateParams, Interpolator) {
        var result;

        if (fallbackLanguageIndex < $fallbackLanguage.length) {
          var langKey = $fallbackLanguage[fallbackLanguageIndex];
          result = getFallbackTranslationInstant(langKey, translationId, interpolateParams, Interpolator);
          if (!result) {
            result = resolveForFallbackLanguageInstant(fallbackLanguageIndex + 1, translationId, interpolateParams, Interpolator);
          }
        }
        return result;
      };

      /**
       * Translates with the usage of the fallback languages.
       *
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {Q.promise} Promise, that resolves to the translation.
       */
      var fallbackTranslation = function (translationId, interpolateParams, Interpolator, defaultTranslationText) {
        // Start with the fallbackLanguage with index 0
        return resolveForFallbackLanguage((startFallbackIteration>0 ? startFallbackIteration : fallbackIndex), translationId, interpolateParams, Interpolator, defaultTranslationText);
      };

      /**
       * Translates with the usage of the fallback languages.
       *
       * @param translationId
       * @param interpolateParams
       * @param Interpolator
       * @returns {String} translation
       */
      var fallbackTranslationInstant = function (translationId, interpolateParams, Interpolator) {
        // Start with the fallbackLanguage with index 0
        return resolveForFallbackLanguageInstant((startFallbackIteration>0 ? startFallbackIteration : fallbackIndex), translationId, interpolateParams, Interpolator);
      };

      var determineTranslation = function (translationId, interpolateParams, interpolationId, defaultTranslationText) {

        var deferred = $q.defer();

        var table = $uses ? $translationTable[$uses] : $translationTable,
            Interpolator = (interpolationId) ? interpolatorHashMap[interpolationId] : defaultInterpolator;

        // if the translation id exists, we can just interpolate it
        if (table && Object.prototype.hasOwnProperty.call(table, translationId)) {
          var translation = table[translationId];

          // If using link, rerun $translate with linked translationId and return it
          if (translation.substr(0, 2) === '@:') {

            $translate(translation.substr(2), interpolateParams, interpolationId, defaultTranslationText)
              .then(deferred.resolve, deferred.reject);
          } else {
            deferred.resolve(Interpolator.interpolate(translation, interpolateParams));
          }
        } else {
          var missingTranslationHandlerTranslation;
          // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
          if ($missingTranslationHandlerFactory && !pendingLoader) {
            missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams);
          }

          // since we couldn't translate the inital requested translation id,
          // we try it now with one or more fallback languages, if fallback language(s) is
          // configured.
          if ($uses && $fallbackLanguage && $fallbackLanguage.length) {
            fallbackTranslation(translationId, interpolateParams, Interpolator, defaultTranslationText)
                .then(function (translation) {
                  deferred.resolve(translation);
                }, function (_translationId) {
                  deferred.reject(applyNotFoundIndicators(_translationId));
                });
          } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
            // looks like the requested translation id doesn't exists.
            // Now, if there is a registered handler for missing translations and no
            // asyncLoader is pending, we execute the handler
            if (defaultTranslationText) {
              deferred.resolve(defaultTranslationText);
              } else {
                deferred.resolve(missingTranslationHandlerTranslation);
              }
          } else {
            if (defaultTranslationText) {
              deferred.resolve(defaultTranslationText);
            } else {
              deferred.reject(applyNotFoundIndicators(translationId));
            }
          }
        }
        return deferred.promise;
      };

      var determineTranslationInstant = function (translationId, interpolateParams, interpolationId) {

        var result, table = $uses ? $translationTable[$uses] : $translationTable,
            Interpolator = defaultInterpolator;

        // if the interpolation id exists use custom interpolator
        if (interpolatorHashMap && Object.prototype.hasOwnProperty.call(interpolatorHashMap, interpolationId)) {
          Interpolator = interpolatorHashMap[interpolationId];
        }

        // if the translation id exists, we can just interpolate it
        if (table && Object.prototype.hasOwnProperty.call(table, translationId)) {
          var translation = table[translationId];

          // If using link, rerun $translate with linked translationId and return it
          if (translation.substr(0, 2) === '@:') {
            result = determineTranslationInstant(translation.substr(2), interpolateParams, interpolationId);
          } else {
            result = Interpolator.interpolate(translation, interpolateParams);
          }
        } else {
          var missingTranslationHandlerTranslation;
          // for logging purposes only (as in $translateMissingTranslationHandlerLog), value is not returned to promise
          if ($missingTranslationHandlerFactory && !pendingLoader) {
            missingTranslationHandlerTranslation = translateByHandler(translationId, interpolateParams);
          }

          // since we couldn't translate the inital requested translation id,
          // we try it now with one or more fallback languages, if fallback language(s) is
          // configured.
          if ($uses && $fallbackLanguage && $fallbackLanguage.length) {
            fallbackIndex = 0;
            result = fallbackTranslationInstant(translationId, interpolateParams, Interpolator);
          } else if ($missingTranslationHandlerFactory && !pendingLoader && missingTranslationHandlerTranslation) {
            // looks like the requested translation id doesn't exists.
            // Now, if there is a registered handler for missing translations and no
            // asyncLoader is pending, we execute the handler
            result = missingTranslationHandlerTranslation;
          } else {
            result = applyNotFoundIndicators(translationId);
          }
        }

        return result;
      };

      var clearNextLangAndPromise = function(key) {
        if ($nextLang === key) {
          $nextLang = undefined;
        }
        langPromises[key] = undefined;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#preferredLanguage
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the language key for the preferred language.
       *
       * @param {string} langKey language String or Array to be used as preferredLanguage (changing at runtime)
       *
       * @return {string} preferred language key
       */
      $translate.preferredLanguage = function (langKey) {
        if(langKey) {
          setupPreferredLanguage(langKey);
        }
        return $preferredLanguage;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#cloakClassName
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the configured class name for `translate-cloak` directive.
       *
       * @return {string} cloakClassName
       */
      $translate.cloakClassName = function () {
        return $cloakClassName;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#fallbackLanguage
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the language key for the fallback languages or sets a new fallback stack.
       *
       * @param {string=} langKey language String or Array of fallback languages to be used (to change stack at runtime)
       *
       * @return {string||array} fallback language key
       */
      $translate.fallbackLanguage = function (langKey) {
        if (langKey !== undefined && langKey !== null) {
          fallbackStack(langKey);

          // as we might have an async loader initiated and a new translation language might have been defined
          // we need to add the promise to the stack also. So - iterate.
          if ($loaderFactory) {
            if ($fallbackLanguage && $fallbackLanguage.length) {
              for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
                if (!langPromises[$fallbackLanguage[i]]) {
                  langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]);
                }
              }
            }
          }
          $translate.use($translate.use());
        }
        if ($fallbackWasString) {
          return $fallbackLanguage[0];
        } else {
          return $fallbackLanguage;
        }

      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#useFallbackLanguage
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Sets the first key of the fallback language stack to be used for translation.
       * Therefore all languages in the fallback array BEFORE this key will be skipped!
       *
       * @param {string=} langKey Contains the langKey the iteration shall start with. Set to false if you want to
       * get back to the whole stack
       */
      $translate.useFallbackLanguage = function (langKey) {
        if (langKey !== undefined && langKey !== null) {
          if (!langKey) {
            startFallbackIteration = 0;
          } else {
            var langKeyPosition = indexOf($fallbackLanguage, langKey);
            if (langKeyPosition > -1) {
              startFallbackIteration = langKeyPosition;
            }
          }

        }

      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#proposedLanguage
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the language key of language that is currently loaded asynchronously.
       *
       * @return {string} language key
       */
      $translate.proposedLanguage = function () {
        return $nextLang;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#storage
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns registered storage.
       *
       * @return {object} Storage
       */
      $translate.storage = function () {
        return Storage;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#use
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Tells angular-translate which language to use by given language key. This method is
       * used to change language at runtime. It also takes care of storing the language
       * key in a configured store to let your app remember the choosed language.
       *
       * When trying to 'use' a language which isn't available it tries to load it
       * asynchronously with registered loaders.
       *
       * Returns promise object with loaded language file data
       * @example
       * $translate.use("en_US").then(function(data){
       *   $scope.text = $translate("HELLO");
       * });
       *
       * @param {string} key Language key
       * @return {string} Language key
       */
      $translate.use = function (key) {
        if (!key) {
          return $uses;
        }

        var deferred = $q.defer();

        $rootScope.$emit('$translateChangeStart', {language: key});

        // Try to get the aliased language key
        var aliasedKey = negotiateLocale(key);
        if (aliasedKey) {
          key = aliasedKey;
        }

        // if there isn't a translation table for the language we've requested,
        // we load it asynchronously
        if (($forceAsyncReloadEnabled || !$translationTable[key]) && $loaderFactory && !langPromises[key]) {
          $nextLang = key;
          langPromises[key] = loadAsync(key).then(function (translation) {
            translations(translation.key, translation.table);
            deferred.resolve(translation.key);
            useLanguage(translation.key);
            return translation;
          }, function (key) {
            $rootScope.$emit('$translateChangeError', {language: key});
            deferred.reject(key);
            $rootScope.$emit('$translateChangeEnd', {language: key});
            return $q.reject(key);
          });
          langPromises[key]['finally'](function () {
            clearNextLangAndPromise(key);
          });
        } else if ($nextLang === key && langPromises[key]) {
          // we are already loading this asynchronously
          // resolve our new deferred when the old langPromise is resolved
          langPromises[key].then(function (translation) {
            deferred.resolve(translation.key);
            return translation;
          }, function (key) {
            deferred.reject(key);
            return $q.reject(key);
          });
        } else {
          deferred.resolve(key);
          useLanguage(key);
        }

        return deferred.promise;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#storageKey
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the key for the storage.
       *
       * @return {string} storage key
       */
      $translate.storageKey = function () {
        return storageKey();
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#isPostCompilingEnabled
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns whether post compiling is enabled or not
       *
       * @return {bool} storage key
       */
      $translate.isPostCompilingEnabled = function () {
        return $postCompilingEnabled;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#isForceAsyncReloadEnabled
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns whether force async reload is enabled or not
       *
       * @return {boolean} forceAsyncReload value
       */
      $translate.isForceAsyncReloadEnabled = function () {
        return $forceAsyncReloadEnabled;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#refresh
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Refreshes a translation table pointed by the given langKey. If langKey is not specified,
       * the module will drop all existent translation tables and load new version of those which
       * are currently in use.
       *
       * Refresh means that the module will drop target translation table and try to load it again.
       *
       * In case there are no loaders registered the refresh() method will throw an Error.
       *
       * If the module is able to refresh translation tables refresh() method will broadcast
       * $translateRefreshStart and $translateRefreshEnd events.
       *
       * @example
       * // this will drop all currently existent translation tables and reload those which are
       * // currently in use
       * $translate.refresh();
       * // this will refresh a translation table for the en_US language
       * $translate.refresh('en_US');
       *
       * @param {string} langKey A language key of the table, which has to be refreshed
       *
       * @return {promise} Promise, which will be resolved in case a translation tables refreshing
       * process is finished successfully, and reject if not.
       */
      $translate.refresh = function (langKey) {
        if (!$loaderFactory) {
          throw new Error('Couldn\'t refresh translation table, no loader registered!');
        }

        var deferred = $q.defer();

        function resolve() {
          deferred.resolve();
          $rootScope.$emit('$translateRefreshEnd', {language: langKey});
        }

        function reject() {
          deferred.reject();
          $rootScope.$emit('$translateRefreshEnd', {language: langKey});
        }

        $rootScope.$emit('$translateRefreshStart', {language: langKey});

        if (!langKey) {
          // if there's no language key specified we refresh ALL THE THINGS!
          var tables = [], loadingKeys = {};

          // reload registered fallback languages
          if ($fallbackLanguage && $fallbackLanguage.length) {
            for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
              tables.push(loadAsync($fallbackLanguage[i]));
              loadingKeys[$fallbackLanguage[i]] = true;
            }
          }

          // reload currently used language
          if ($uses && !loadingKeys[$uses]) {
            tables.push(loadAsync($uses));
          }

          var allTranslationsLoaded = function (tableData) {
            $translationTable = {};
            angular.forEach(tableData, function (data) {
              translations(data.key, data.table);
            });
            if ($uses) {
              useLanguage($uses);
            }
            resolve();
          };
          allTranslationsLoaded.displayName = 'refreshPostProcessor';

          $q.all(tables).then(allTranslationsLoaded, reject);

        } else if ($translationTable[langKey]) {

          var oneTranslationsLoaded = function (data) {
            translations(data.key, data.table);
            if (langKey === $uses) {
              useLanguage($uses);
            }
            resolve();
          };
          oneTranslationsLoaded.displayName = 'refreshPostProcessor';

          loadAsync(langKey).then(oneTranslationsLoaded, reject);

        } else {
          reject();
        }
        return deferred.promise;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#instant
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns a translation instantly from the internal state of loaded translation. All rules
       * regarding the current language, the preferred language of even fallback languages will be
       * used except any promise handling. If a language was not found, an asynchronous loading
       * will be invoked in the background.
       *
       * @param {string|array} translationId A token which represents a translation id
       *                                     This can be optionally an array of translation ids which
       *                                     results that the function's promise returns an object where
       *                                     each key is the translation id and the value the translation.
       * @param {object} interpolateParams Params
       * @param {string} interpolationId The id of the interpolation to use
       *
       * @return {string|object} translation
       */
      $translate.instant = function (translationId, interpolateParams, interpolationId) {

        // Detect undefined and null values to shorten the execution and prevent exceptions
        if (translationId === null || angular.isUndefined(translationId)) {
          return translationId;
        }

        // Duck detection: If the first argument is an array, a bunch of translations was requested.
        // The result is an object.
        if (angular.isArray(translationId)) {
          var results = {};
          for (var i = 0, c = translationId.length; i < c; i++) {
            results[translationId[i]] = $translate.instant(translationId[i], interpolateParams, interpolationId);
          }
          return results;
        }

        // We discarded unacceptable values. So we just need to verify if translationId is empty String
        if (angular.isString(translationId) && translationId.length < 1) {
          return translationId;
        }

        // trim off any whitespace
        if (translationId) {
          translationId = trim.apply(translationId);
        }

        var result, possibleLangKeys = [];
        if ($preferredLanguage) {
          possibleLangKeys.push($preferredLanguage);
        }
        if ($uses) {
          possibleLangKeys.push($uses);
        }
        if ($fallbackLanguage && $fallbackLanguage.length) {
          possibleLangKeys = possibleLangKeys.concat($fallbackLanguage);
        }
        for (var j = 0, d = possibleLangKeys.length; j < d; j++) {
          var possibleLangKey = possibleLangKeys[j];
          if ($translationTable[possibleLangKey]) {
            if (typeof $translationTable[possibleLangKey][translationId] !== 'undefined') {
              result = determineTranslationInstant(translationId, interpolateParams, interpolationId);
            } else if ($notFoundIndicatorLeft || $notFoundIndicatorRight) {
              result = applyNotFoundIndicators(translationId);
            }
          }
          if (typeof result !== 'undefined') {
            break;
          }
        }

        if (!result && result !== '') {
          // Return translation of default interpolator if not found anything.
          result = defaultInterpolator.interpolate(translationId, interpolateParams);
          if ($missingTranslationHandlerFactory && !pendingLoader) {
            result = translateByHandler(translationId, interpolateParams);
          }
        }

        return result;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#versionInfo
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the current version information for the angular-translate library
       *
       * @return {string} angular-translate version
       */
      $translate.versionInfo = function () {
        return version;
      };

      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translate#loaderCache
       * @methodOf pascalprecht.translate.$translate
       *
       * @description
       * Returns the defined loaderCache.
       *
       * @return {boolean|string|object} current value of loaderCache
       */
      $translate.loaderCache = function () {
        return loaderCache;
      };

      // internal purpose only
      $translate.directivePriority = function () {
        return directivePriority;
      };

      // internal purpose only
      $translate.statefulFilter = function () {
        return statefulFilter;
      };

      if ($loaderFactory) {

        // If at least one async loader is defined and there are no
        // (default) translations available we should try to load them.
        if (angular.equals($translationTable, {})) {
          $translate.use($translate.use());
        }

        // Also, if there are any fallback language registered, we start
        // loading them asynchronously as soon as we can.
        if ($fallbackLanguage && $fallbackLanguage.length) {
          var processAsyncResult = function (translation) {
            translations(translation.key, translation.table);
            $rootScope.$emit('$translateChangeEnd', { language: translation.key });
            return translation;
          };
          for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {
            var fallbackLanguageId = $fallbackLanguage[i];
            if ($forceAsyncReloadEnabled || !$translationTable[fallbackLanguageId]) {
              langPromises[fallbackLanguageId] = loadAsync(fallbackLanguageId).then(processAsyncResult);
            }
          }
        }
      }

      return $translate;
    }
  ];
}
$translate.$inject = ['$STORAGE_KEY', '$windowProvider', '$translateSanitizationProvider', 'pascalprechtTranslateOverrider'];

$translate.displayName = 'displayName';

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateDefaultInterpolation
 * @requires $interpolate
 *
 * @description
 * Uses angular's `$interpolate` services to interpolate strings against some values.
 *
 * Be aware to configure a proper sanitization strategy.
 *
 * See also:
 * * {@link pascalprecht.translate.$translateSanitization}
 *
 * @return {object} $translateDefaultInterpolation Interpolator service
 */
angular.module('pascalprecht.translate').factory('$translateDefaultInterpolation', $translateDefaultInterpolation);

function $translateDefaultInterpolation ($interpolate, $translateSanitization) {

  'use strict';

  var $translateInterpolator = {},
      $locale,
      $identifier = 'default';

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateDefaultInterpolation#setLocale
   * @methodOf pascalprecht.translate.$translateDefaultInterpolation
   *
   * @description
   * Sets current locale (this is currently not use in this interpolation).
   *
   * @param {string} locale Language key or locale.
   */
  $translateInterpolator.setLocale = function (locale) {
    $locale = locale;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateDefaultInterpolation#getInterpolationIdentifier
   * @methodOf pascalprecht.translate.$translateDefaultInterpolation
   *
   * @description
   * Returns an identifier for this interpolation service.
   *
   * @returns {string} $identifier
   */
  $translateInterpolator.getInterpolationIdentifier = function () {
    return $identifier;
  };

  /**
   * @deprecated will be removed in 3.0
   * @see {@link pascalprecht.translate.$translateSanitization}
   */
  $translateInterpolator.useSanitizeValueStrategy = function (value) {
    $translateSanitization.useStrategy(value);
    return this;
  };

  /**
   * @ngdoc function
   * @name pascalprecht.translate.$translateDefaultInterpolation#interpolate
   * @methodOf pascalprecht.translate.$translateDefaultInterpolation
   *
   * @description
   * Interpolates given string agains given interpolate params using angulars
   * `$interpolate` service.
   *
   * @returns {string} interpolated string.
   */
  $translateInterpolator.interpolate = function (string, interpolationParams) {
    interpolationParams = interpolationParams || {};
    interpolationParams = $translateSanitization.sanitize(interpolationParams, 'params');

    var interpolatedText = $interpolate(string)(interpolationParams);
    interpolatedText = $translateSanitization.sanitize(interpolatedText, 'text');

    return interpolatedText;
  };

  return $translateInterpolator;
}
$translateDefaultInterpolation.$inject = ['$interpolate', '$translateSanitization'];

$translateDefaultInterpolation.displayName = '$translateDefaultInterpolation';

angular.module('pascalprecht.translate').constant('$STORAGE_KEY', 'NG_TRANSLATE_LANG_KEY');

angular.module('pascalprecht.translate')
/**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translate
 * @requires $compile
 * @requires $filter
 * @requires $interpolate
 * @restrict A
 *
 * @description
 * Translates given translation id either through attribute or DOM content.
 * Internally it uses `translate` filter to translate translation id. It possible to
 * pass an optional `translate-values` object literal as string into translation id.
 *
 * @param {string=} translate Translation id which could be either string or interpolated string.
 * @param {string=} translate-values Values to pass into translation id. Can be passed as object literal string or interpolated object.
 * @param {string=} translate-attr-ATTR translate Translation id and put it into ATTR attribute.
 * @param {string=} translate-default will be used unless translation was successful
 * @param {boolean=} translate-compile (default true if present) defines locally activation of {@link pascalprecht.translate.$translateProvider#methods_usePostCompiling}
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div ng-controller="TranslateCtrl">

        <pre translate="TRANSLATION_ID"></pre>
        <pre translate>TRANSLATION_ID</pre>
        <pre translate translate-attr-title="TRANSLATION_ID"></pre>
        <pre translate="{{translationId}}"></pre>
        <pre translate>{{translationId}}</pre>
        <pre translate="WITH_VALUES" translate-values="{value: 5}"></pre>
        <pre translate translate-values="{value: 5}">WITH_VALUES</pre>
        <pre translate="WITH_VALUES" translate-values="{{values}}"></pre>
        <pre translate translate-values="{{values}}">WITH_VALUES</pre>
        <pre translate translate-attr-title="WITH_VALUES" translate-values="{{values}}"></pre>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en',{
          'TRANSLATION_ID': 'Hello there!',
          'WITH_VALUES': 'The following value is dynamic: {{value}}'
        }).preferredLanguage('en');

      });

      angular.module('ngView').controller('TranslateCtrl', function ($scope) {
        $scope.translationId = 'TRANSLATION_ID';

        $scope.values = {
          value: 78
        };
      });
    </file>
    <file name="scenario.js">
      it('should translate', function () {
        inject(function ($rootScope, $compile) {
          $rootScope.translationId = 'TRANSLATION_ID';

          element = $compile('<p translate="TRANSLATION_ID"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate="{{translationId}}"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate>TRANSLATION_ID</p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate>{{translationId}}</p>')($rootScope);
          $rootScope.$digest();
          expect(element.text()).toBe('Hello there!');

          element = $compile('<p translate translate-attr-title="TRANSLATION_ID"></p>')($rootScope);
          $rootScope.$digest();
          expect(element.attr('title')).toBe('Hello there!');
        });
      });
    </file>
   </example>
 */
.directive('translate', translateDirective);
function translateDirective($translate, $q, $interpolate, $compile, $parse, $rootScope) {

  'use strict';

  /**
   * @name trim
   * @private
   *
   * @description
   * trim polyfill
   *
   * @returns {string} The string stripped of whitespace from both ends
   */
  var trim = function() {
    return this.toString().replace(/^\s+|\s+$/g, '');
  };

  return {
    restrict: 'AE',
    scope: true,
    priority: $translate.directivePriority(),
    compile: function (tElement, tAttr) {

      var translateValuesExist = (tAttr.translateValues) ?
        tAttr.translateValues : undefined;

      var translateInterpolation = (tAttr.translateInterpolation) ?
        tAttr.translateInterpolation : undefined;

      var translateValueExist = tElement[0].outerHTML.match(/translate-value-+/i);

      var interpolateRegExp = '^(.*)(' + $interpolate.startSymbol() + '.*' + $interpolate.endSymbol() + ')(.*)',
          watcherRegExp = '^(.*)' + $interpolate.startSymbol() + '(.*)' + $interpolate.endSymbol() + '(.*)';

      return function linkFn(scope, iElement, iAttr) {

        scope.interpolateParams = {};
        scope.preText = '';
        scope.postText = '';
        var translationIds = {};

        var initInterpolationParams = function (interpolateParams, iAttr, tAttr) {
          // initial setup
          if (iAttr.translateValues) {
            angular.extend(interpolateParams, $parse(iAttr.translateValues)(scope.$parent));
          }
          // initially fetch all attributes if existing and fill the params
          if (translateValueExist) {
            for (var attr in tAttr) {
              if (Object.prototype.hasOwnProperty.call(iAttr, attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {
                var attributeName = angular.lowercase(attr.substr(14, 1)) + attr.substr(15);
                interpolateParams[attributeName] = tAttr[attr];
              }
            }
          }
        };

        // Ensures any change of the attribute "translate" containing the id will
        // be re-stored to the scope's "translationId".
        // If the attribute has no content, the element's text value (white spaces trimmed off) will be used.
        var observeElementTranslation = function (translationId) {

          // Remove any old watcher
          if (angular.isFunction(observeElementTranslation._unwatchOld)) {
            observeElementTranslation._unwatchOld();
            observeElementTranslation._unwatchOld = undefined;
          }

          if (angular.equals(translationId , '') || !angular.isDefined(translationId)) {
            // Resolve translation id by inner html if required
            var interpolateMatches = trim.apply(iElement.text()).match(interpolateRegExp);
            // Interpolate translation id if required
            if (angular.isArray(interpolateMatches)) {
              scope.preText = interpolateMatches[1];
              scope.postText = interpolateMatches[3];
              translationIds.translate = $interpolate(interpolateMatches[2])(scope.$parent);
              var watcherMatches = iElement.text().match(watcherRegExp);
              if (angular.isArray(watcherMatches) && watcherMatches[2] && watcherMatches[2].length) {
                observeElementTranslation._unwatchOld = scope.$watch(watcherMatches[2], function (newValue) {
                  translationIds.translate = newValue;
                  updateTranslations();
                });
              }
            } else {
              translationIds.translate = iElement.text().replace(/^\s+|\s+$/g,'');
            }
          } else {
            translationIds.translate = translationId;
          }
          updateTranslations();
        };

        var observeAttributeTranslation = function (translateAttr) {
          iAttr.$observe(translateAttr, function (translationId) {
            translationIds[translateAttr] = translationId;
            updateTranslations();
          });
        };

        // initial setup with values
        initInterpolationParams(scope.interpolateParams, iAttr, tAttr);

        var firstAttributeChangedEvent = true;
        iAttr.$observe('translate', function (translationId) {
          if (typeof translationId === 'undefined') {
            // case of element "<translate>xyz</translate>"
            observeElementTranslation('');
          } else {
            // case of regular attribute
            if (translationId !== '' || !firstAttributeChangedEvent) {
              translationIds.translate = translationId;
              updateTranslations();
            }
          }
          firstAttributeChangedEvent = false;
        });

        for (var translateAttr in iAttr) {
          if (iAttr.hasOwnProperty(translateAttr) && translateAttr.substr(0, 13) === 'translateAttr') {
            observeAttributeTranslation(translateAttr);
          }
        }

        iAttr.$observe('translateDefault', function (value) {
          scope.defaultText = value;
        });

        if (translateValuesExist) {
          iAttr.$observe('translateValues', function (interpolateParams) {
            if (interpolateParams) {
              scope.$parent.$watch(function () {
                angular.extend(scope.interpolateParams, $parse(interpolateParams)(scope.$parent));
              });
            }
          });
        }

        if (translateValueExist) {
          var observeValueAttribute = function (attrName) {
            iAttr.$observe(attrName, function (value) {
              var attributeName = angular.lowercase(attrName.substr(14, 1)) + attrName.substr(15);
              scope.interpolateParams[attributeName] = value;
            });
          };
          for (var attr in iAttr) {
            if (Object.prototype.hasOwnProperty.call(iAttr, attr) && attr.substr(0, 14) === 'translateValue' && attr !== 'translateValues') {
              observeValueAttribute(attr);
            }
          }
        }

        // Master update function
        var updateTranslations = function () {
          for (var key in translationIds) {

            if (translationIds.hasOwnProperty(key) && translationIds[key] !== undefined) {
              updateTranslation(key, translationIds[key], scope, scope.interpolateParams, scope.defaultText);
            }
          }
        };

        // Put translation processing function outside loop
        var updateTranslation = function(translateAttr, translationId, scope, interpolateParams, defaultTranslationText) {
          if (translationId) {
            $translate(translationId, interpolateParams, translateInterpolation, defaultTranslationText)
              .then(function (translation) {
                applyTranslation(translation, scope, true, translateAttr);
              }, function (translationId) {
                applyTranslation(translationId, scope, false, translateAttr);
              });
          } else {
            // as an empty string cannot be translated, we can solve this using successful=false
            applyTranslation(translationId, scope, false, translateAttr);
          }
        };

        var applyTranslation = function (value, scope, successful, translateAttr) {
          if (translateAttr === 'translate') {
            // default translate into innerHTML
            if (!successful && typeof scope.defaultText !== 'undefined') {
              value = scope.defaultText;
            }
            iElement.html(scope.preText + value + scope.postText);
            var globallyEnabled = $translate.isPostCompilingEnabled();
            var locallyDefined = typeof tAttr.translateCompile !== 'undefined';
            var locallyEnabled = locallyDefined && tAttr.translateCompile !== 'false';
            if ((globallyEnabled && !locallyDefined) || locallyEnabled) {
              $compile(iElement.contents())(scope);
            }
          } else {
            // translate attribute
            if (!successful && typeof scope.defaultText !== 'undefined') {
              value = scope.defaultText;
            }
            var attributeName = iAttr.$attr[translateAttr];
            if (attributeName.substr(0, 5) === 'data-') {
              // ensure html5 data prefix is stripped
              attributeName = attributeName.substr(5);
            }
            attributeName = attributeName.substr(15);
            iElement.attr(attributeName, value);
          }
        };

        if (translateValuesExist || translateValueExist || iAttr.translateDefault) {
          scope.$watch('interpolateParams', updateTranslations, true);
        }

        // Ensures the text will be refreshed after the current language was changed
        // w/ $translate.use(...)
        var unbind = $rootScope.$on('$translateChangeSuccess', updateTranslations);

        // ensure translation will be looked up at least one
        if (iElement.text().length) {
          if (iAttr.translate) {
            observeElementTranslation(iAttr.translate);
          } else {
            observeElementTranslation('');
          }
        } else if (iAttr.translate) {
          // ensure attribute will be not skipped
          observeElementTranslation(iAttr.translate);
        }
        updateTranslations();
        scope.$on('$destroy', unbind);
      };
    }
  };
}
translateDirective.$inject = ['$translate', '$q', '$interpolate', '$compile', '$parse', '$rootScope'];

translateDirective.displayName = 'translateDirective';

angular.module('pascalprecht.translate')
/**
 * @ngdoc directive
 * @name pascalprecht.translate.directive:translateCloak
 * @requires $rootScope
 * @requires $translate
 * @restrict A
 *
 * $description
 * Adds a `translate-cloak` class name to the given element where this directive
 * is applied initially and removes it, once a loader has finished loading.
 *
 * This directive can be used to prevent initial flickering when loading translation
 * data asynchronously.
 *
 * The class name is defined in
 * {@link pascalprecht.translate.$translateProvider#cloakClassName $translate.cloakClassName()}.
 *
 * @param {string=} translate-cloak If a translationId is provided, it will be used for showing
 *                                  or hiding the cloak. Basically it relies on the translation
 *                                  resolve.
 */
.directive('translateCloak', translateCloakDirective);

function translateCloakDirective($rootScope, $translate) {

  'use strict';

  return {
    compile: function (tElement) {
      var applyCloak = function () {
        tElement.addClass($translate.cloakClassName());
      },
      removeCloak = function () {
        tElement.removeClass($translate.cloakClassName());
      },
      removeListener = $rootScope.$on('$translateChangeEnd', function () {
        removeCloak();
        removeListener();
        removeListener = null;
      });
      applyCloak();

      return function linkFn(scope, iElement, iAttr) {
        // Register a watcher for the defined translation allowing a fine tuned cloak
        if (iAttr.translateCloak && iAttr.translateCloak.length) {
          iAttr.$observe('translateCloak', function (translationId) {
            $translate(translationId).then(removeCloak, applyCloak);
          });
        }
      };
    }
  };
}
translateCloakDirective.$inject = ['$rootScope', '$translate'];

translateCloakDirective.displayName = 'translateCloakDirective';

angular.module('pascalprecht.translate')
/**
 * @ngdoc filter
 * @name pascalprecht.translate.filter:translate
 * @requires $parse
 * @requires pascalprecht.translate.$translate
 * @function
 *
 * @description
 * Uses `$translate` service to translate contents. Accepts interpolate parameters
 * to pass dynamized values though translation.
 *
 * @param {string} translationId A translation id to be translated.
 * @param {*=} interpolateParams Optional object literal (as hash or string) to pass values into translation.
 *
 * @returns {string} Translated text.
 *
 * @example
   <example module="ngView">
    <file name="index.html">
      <div ng-controller="TranslateCtrl">

        <pre>{{ 'TRANSLATION_ID' | translate }}</pre>
        <pre>{{ translationId | translate }}</pre>
        <pre>{{ 'WITH_VALUES' | translate:'{value: 5}' }}</pre>
        <pre>{{ 'WITH_VALUES' | translate:values }}</pre>

      </div>
    </file>
    <file name="script.js">
      angular.module('ngView', ['pascalprecht.translate'])

      .config(function ($translateProvider) {

        $translateProvider.translations('en', {
          'TRANSLATION_ID': 'Hello there!',
          'WITH_VALUES': 'The following value is dynamic: {{value}}'
        });
        $translateProvider.preferredLanguage('en');

      });

      angular.module('ngView').controller('TranslateCtrl', function ($scope) {
        $scope.translationId = 'TRANSLATION_ID';

        $scope.values = {
          value: 78
        };
      });
    </file>
   </example>
 */
.filter('translate', translateFilterFactory);

function translateFilterFactory($parse, $translate) {

  'use strict';

  var translateFilter = function (translationId, interpolateParams, interpolation) {

    if (!angular.isObject(interpolateParams)) {
      interpolateParams = $parse(interpolateParams)(this);
    }

    return $translate.instant(translationId, interpolateParams, interpolation);
  };

  if ($translate.statefulFilter()) {
    translateFilter.$stateful = true;
  }

  return translateFilter;
}
translateFilterFactory.$inject = ['$parse', '$translate'];

translateFilterFactory.displayName = 'translateFilterFactory';

angular.module('pascalprecht.translate')

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translationCache
 * @requires $cacheFactory
 *
 * @description
 * The first time a translation table is used, it is loaded in the translation cache for quick retrieval. You
 * can load translation tables directly into the cache by consuming the
 * `$translationCache` service directly.
 *
 * @return {object} $cacheFactory object.
 */
  .factory('$translationCache', $translationCache);

function $translationCache($cacheFactory) {

  'use strict';

  return $cacheFactory('translations');
}
$translationCache.$inject = ['$cacheFactory'];

$translationCache.displayName = '$translationCache';
return 'pascalprecht.translate';

}));

/*!
 * angular-translate - v2.7.2 - 2015-06-01
 * http://github.com/angular-translate/angular-translate
 * Copyright (c) 2015 ; Licensed MIT
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return (factory());
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    factory();
  }
}(this, function () {

angular.module('pascalprecht.translate')
/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateStaticFilesLoader
 * @requires $q
 * @requires $http
 *
 * @description
 * Creates a loading function for a typical static file url pattern:
 * "lang-en_US.json", "lang-de_DE.json", etc. Using this builder,
 * the response of these urls must be an object of key-value pairs.
 *
 * @param {object} options Options object, which gets prefix, suffix and key.
 */
.factory('$translateStaticFilesLoader', $translateStaticFilesLoader);

function $translateStaticFilesLoader($q, $http) {

  'use strict';

  return function (options) {

    if (!options || (!angular.isArray(options.files) && (!angular.isString(options.prefix) || !angular.isString(options.suffix)))) {
      throw new Error('Couldn\'t load static files, no files and prefix or suffix specified!');
    }

    if (!options.files) {
      options.files = [{
        prefix: options.prefix,
        suffix: options.suffix
      }];
    }

    var load = function (file) {
      if (!file || (!angular.isString(file.prefix) || !angular.isString(file.suffix))) {
        throw new Error('Couldn\'t load static file, no prefix or suffix specified!');
      }

      var deferred = $q.defer();

      $http(angular.extend({
        url: [
          file.prefix,
          options.key,
          file.suffix
        ].join(''),
        method: 'GET',
        params: ''
      }, options.$http)).success(function (data) {
        deferred.resolve(data);
      }).error(function () {
        deferred.reject(options.key);
      });

      return deferred.promise;
    };

    var deferred = $q.defer(),
        promises = [],
        length = options.files.length;

    for (var i = 0; i < length; i++) {
      promises.push(load({
        prefix: options.files[i].prefix,
        key: options.key,
        suffix: options.files[i].suffix
      }));
    }

    $q.all(promises).then(function (data) {
      var length = data.length,
          mergedData = {};

      for (var i = 0; i < length; i++) {
        for (var key in data[i]) {
          mergedData[key] = data[i][key];
        }
      }

      deferred.resolve(mergedData);
    }, function (data) {
      deferred.reject(data);
    });

    return deferred.promise;
  };
}
$translateStaticFilesLoader.$inject = ['$q', '$http'];

$translateStaticFilesLoader.displayName = '$translateStaticFilesLoader';
return 'pascalprecht.translate';

}));

/*!
 * angular-translate - v2.7.2 - 2015-06-01
 * http://github.com/angular-translate/angular-translate
 * Copyright (c) 2015 ; Licensed MIT
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return (factory());
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    factory();
  }
}(this, function () {

angular.module('pascalprecht.translate')

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateCookieStorage
 * @requires $cookieStore
 *
 * @description
 * Abstraction layer for cookieStore. This service is used when telling angular-translate
 * to use cookieStore as storage.
 *
 */
  .factory('$translateCookieStorage', $translateCookieStorageFactory);

function $translateCookieStorageFactory($cookieStore) {

  'use strict';

  var $translateCookieStorage = {

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateCookieStorage#get
     * @methodOf pascalprecht.translate.$translateCookieStorage
     *
     * @description
     * Returns an item from cookieStorage by given name.
     *
     * @param {string} name Item name
     * @return {string} Value of item name
     */
    get: function (name) {
      return $cookieStore.get(name);
    },

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateCookieStorage#set
     * @methodOf pascalprecht.translate.$translateCookieStorage
     *
     * @description
     * Sets an item in cookieStorage by given name.
     *
     * @deprecated use #put
     *
     * @param {string} name Item name
     * @param {string} value Item value
     */
    set: function (name, value) {
      $cookieStore.put(name, value);
    },

    /**
     * @ngdoc function
     * @name pascalprecht.translate.$translateCookieStorage#put
     * @methodOf pascalprecht.translate.$translateCookieStorage
     *
     * @description
     * Sets an item in cookieStorage by given name.
     *
     * @param {string} name Item name
     * @param {string} value Item value
     */
    put: function (name, value) {
      $cookieStore.put(name, value);
    }
  };

  return $translateCookieStorage;
}
$translateCookieStorageFactory.$inject = ['$cookieStore'];

$translateCookieStorageFactory.displayName = '$translateCookieStorage';
return 'pascalprecht.translate';

}));

/*!
 * angular-translate - v2.7.2 - 2015-06-01
 * http://github.com/angular-translate/angular-translate
 * Copyright (c) 2015 ; Licensed MIT
 */
(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module unless amdModuleId is set
    define([], function () {
      return (factory());
    });
  } else if (typeof exports === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    factory();
  }
}(this, function () {

angular.module('pascalprecht.translate')

/**
 * @ngdoc object
 * @name pascalprecht.translate.$translateLocalStorage
 * @requires $window
 * @requires $translateCookieStorage
 *
 * @description
 * Abstraction layer for localStorage. This service is used when telling angular-translate
 * to use localStorage as storage.
 *
 */
.factory('$translateLocalStorage', $translateLocalStorageFactory);

function $translateLocalStorageFactory($window, $translateCookieStorage) {

  'use strict';

  // Setup adapter
  var localStorageAdapter = (function(){
    var langKey;
    return {
      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translateLocalStorage#get
       * @methodOf pascalprecht.translate.$translateLocalStorage
       *
       * @description
       * Returns an item from localStorage by given name.
       *
       * @param {string} name Item name
       * @return {string} Value of item name
       */
      get: function (name) {
        if(!langKey) {
          langKey = $window.localStorage.getItem(name);
        }

        return langKey;
      },
      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translateLocalStorage#set
       * @methodOf pascalprecht.translate.$translateLocalStorage
       *
       * @description
       * Sets an item in localStorage by given name.
       *
       * @deprecated use #put
       *
       * @param {string} name Item name
       * @param {string} value Item value
       */
      set: function (name, value) {
        langKey=value;
        $window.localStorage.setItem(name, value);
      },
      /**
       * @ngdoc function
       * @name pascalprecht.translate.$translateLocalStorage#put
       * @methodOf pascalprecht.translate.$translateLocalStorage
       *
       * @description
       * Sets an item in localStorage by given name.
       *
       * @param {string} name Item name
       * @param {string} value Item value
       */
      put: function (name, value) {
        langKey=value;
        $window.localStorage.setItem(name, value);
      }
    };
  }());

  var hasLocalStorageSupport = 'localStorage' in $window;
  if (hasLocalStorageSupport) {
    var testKey = 'pascalprecht.translate.storageTest';
    try {
      // this check have to be wrapped within a try/catch because on
      // a SecurityError: Dom Exception 18 on iOS
      if ($window.localStorage !== null) {
        $window.localStorage.setItem(testKey, 'foo');
        $window.localStorage.removeItem(testKey);
        hasLocalStorageSupport = true;
      } else {
        hasLocalStorageSupport = false;
      }
    } catch (e){
      hasLocalStorageSupport = false;
    }
  }
  var $translateLocalStorage = hasLocalStorageSupport ? localStorageAdapter : $translateCookieStorage;
  return $translateLocalStorage;
}
$translateLocalStorageFactory.$inject = ['$window', '$translateCookieStorage'];

$translateLocalStorageFactory.displayName = '$translateLocalStorageFactory';
return 'pascalprecht.translate';

}));

//! moment.js
//! version : 2.10.3
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, function () { 'use strict';

    var hookCallback;

    function utils_hooks__hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid (flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = getParsingFlags(from);
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(+config._d);
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function Locale() {
    }

    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we
                // want to undo that for lazy loaded locales
                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function locale_locales__getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (typeof values === 'undefined') {
                data = locale_locales__getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, values) {
        if (values !== null) {
            values.abbr = name;
            if (!locales[name]) {
                locales[name] = new Locale();
            }
            locales[name].set(values);

            // backwards compat for now: also set the locale
            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    // returns locale data
    function locale_locales__getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get (mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function get_set__set (mom, unit, value) {
        return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }

    // MOMENTS

    function getSet (units, value) {
        var unit;
        if (typeof units === 'object') {
            for (unit in units) {
                this.set(unit, units[unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = typeof regex === 'function' ? regex : function (isStrict) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }).replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  matchWord);
    addRegexToken('MMMM', matchWord);

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m) {
        return this._months[m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m) {
        return this._monthsShort[m.month()];
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true,
            msgWithStack = msg + '\n' + (new Error()).stack;

        return extend(function () {
            if (firstTime) {
                warn(msgWithStack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;

    var from_string__isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
        ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
        ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d{2}/],
        ['YYYY-DDD', /\d{4}-\d{3}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
        ['HH:mm', /(T| )\d\d:\d\d/],
        ['HH', /(T| )\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = from_string__isoRegex.exec(string);

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be 'T' or undefined
                    config._f = isoDates[i][0] + (match[6] || ' ');
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(matchOffset)) {
                config._f += 'Z';
            }
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    function createDate (y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYY', 'YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', false);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = local__createLocal(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = createUTCDate(year, 0, 1).getUTCDay();
        var daysToAdd;
        var dayOfYear;

        d = d === 0 ? 7 : d;
        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year      : dayOfYear > 0 ? year      : year - 1,
            dayOfYear : dayOfYear > 0 ? dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate()];
        }
        return [now.getFullYear(), now.getMonth(), now.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    utils_hooks__hooks.ISO_8601 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (getParsingFlags(config).bigHour === true &&
                config._a[HOUR] <= 12 &&
                config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = [i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond];

        configFromArray(config);
    }

    function createFromConfig (config) {
        var input = config._i,
            format = config._f,
            res;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return valid__createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else if (isDate(input)) {
            config._d = input;
        } else {
            configFromInput(config);
        }

        res = new Moment(checkOverflow(config));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof(input) === 'object') {
            configFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof(locale) === 'boolean') {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
         'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
         function () {
             var other = local__createLocal.apply(null, arguments);
             return other < this ? this : other;
         }
     );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
        function () {
            var other = local__createLocal.apply(null, arguments);
            return other > this ? this : other;
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchOffset);
    addRegexToken('ZZ', matchOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(string) {
        var matches = ((string || '').match(matchOffset) || []);
        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - (+res);
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(+res._d + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
        return model._isUTC ? local__createLocal(input).zone(model._offset || 0) : local__createLocal(input).local();
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    utils_hooks__hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(input);
            }
            if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            this.utcOffset(offsetFromString(this._i));
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!input) {
            input = 0;
        }
        else {
            input = local__createLocal(input).utcOffset();
        }

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (this._a) {
            var other = this._isUTC ? create_utc__createUTC(this._a) : local__createLocal(this._a);
            return this.isValid() && compareArrays(this._a, other.toArray()) > 0;
        }

        return false;
    }

    function isLocal () {
        return !this._isUTC;
    }

    function isUtcOffset () {
        return this._isUTC;
    }

    function isUtc () {
        return this._isUTC && this._offset === 0;
    }

    var aspNetRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    var create__isoRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/;

    function create__createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])        * sign,
                h  : toInt(match[HOUR])        * sign,
                m  : toInt(match[MINUTE])      * sign,
                s  : toInt(match[SECOND])      * sign,
                ms : toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = create__isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                d : parseIso(match[4], sign),
                h : parseIso(match[5], sign),
                m : parseIso(match[6], sign),
                s : parseIso(match[7], sign),
                w : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period).');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add      = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function moment_calendar__calendar (time) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            diff = this.diff(sod, 'days', true),
            format = diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
        return this.format(this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this > +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return inputMs < +this.clone().startOf(units);
        }
    }

    function isBefore (input, units) {
        var inputMs;
        units = normalizeUnits(typeof units !== 'undefined' ? units : 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this < +input;
        } else {
            inputMs = isMoment(input) ? +input : +local__createLocal(input);
            return +this.clone().endOf(units) < inputMs;
        }
    }

    function isBetween (from, to, units) {
        return this.isAfter(from, units) && this.isBefore(to, units);
    }

    function isSame (input, units) {
        var inputMs;
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            input = isMoment(input) ? input : local__createLocal(input);
            return +this === +input;
        } else {
            inputMs = +local__createLocal(input);
            return +(this.clone().startOf(units)) <= inputMs && inputMs <= +(this.clone().endOf(units));
        }
    }

    function absFloor (number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    function diff (input, units, asFloat) {
        var that = cloneWithOffset(input, this),
            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4,
            delta, output;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : // 1000
                units === 'minute' ? delta / 6e4 : // 1000 * 60
                units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
                units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust);
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString () {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if ('function' === typeof Date.prototype.toISOString) {
                // native implementation is ~50x faster, use it when we can
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format (inputString) {
        var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function fromNow (withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }
        return create__createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    }

    function toNow (withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }
        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function to_type__valueOf () {
        return +this._d - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(+this / 1000);
    }

    function toDate () {
        return this._offset ? new Date(+this) : this._d;
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function moment_valid__isValid () {
        return valid__isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    // HELPERS

    function weeksInYear(year, dow, doy) {
        return weekOfYear(local__createLocal([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    // MOMENTS

    function getSetWeekYear (input) {
        var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getSetISOWeekYear (input) {
        var year = weekOfYear(this, 1, 4).year;
        return input == null ? year : this.add((input - year), 'y');
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    addFormatToken('Q', 0, 0, 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   matchWord);
    addRegexToken('ddd',  matchWord);
    addRegexToken('dddd', matchWord);

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config) {
        var weekday = config._locale.weekdaysParse(input);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = locale.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m) {
        return this._weekdays[m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return this._weekdaysShort[m.day()];
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return this._weekdaysMin[m.day()];
    }

    function localeWeekdaysParse (weekdayName) {
        var i, mom, regex;

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            if (!this._weekdaysParse[i]) {
                mom = local__createLocal([2000, 1]).day(i);
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, function () {
        return this.hours() % 12 || 12;
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    function millisecond__milliseconds (token) {
        addFormatToken(0, [token, 3], 0, 'millisecond');
    }

    millisecond__milliseconds('SSS');
    millisecond__milliseconds('SSSS');

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);
    addRegexToken('SSSS', matchUnsigned);
    addParseToken(['S', 'SS', 'SSS', 'SSSS'], function (input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    });

    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add          = add_subtract__add;
    momentPrototype__proto.calendar     = moment_calendar__calendar;
    momentPrototype__proto.clone        = clone;
    momentPrototype__proto.diff         = diff;
    momentPrototype__proto.endOf        = endOf;
    momentPrototype__proto.format       = format;
    momentPrototype__proto.from         = from;
    momentPrototype__proto.fromNow      = fromNow;
    momentPrototype__proto.to           = to;
    momentPrototype__proto.toNow        = toNow;
    momentPrototype__proto.get          = getSet;
    momentPrototype__proto.invalidAt    = invalidAt;
    momentPrototype__proto.isAfter      = isAfter;
    momentPrototype__proto.isBefore     = isBefore;
    momentPrototype__proto.isBetween    = isBetween;
    momentPrototype__proto.isSame       = isSame;
    momentPrototype__proto.isValid      = moment_valid__isValid;
    momentPrototype__proto.lang         = lang;
    momentPrototype__proto.locale       = locale;
    momentPrototype__proto.localeData   = localeData;
    momentPrototype__proto.max          = prototypeMax;
    momentPrototype__proto.min          = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set          = getSet;
    momentPrototype__proto.startOf      = startOf;
    momentPrototype__proto.subtract     = add_subtract__subtract;
    momentPrototype__proto.toArray      = toArray;
    momentPrototype__proto.toDate       = toDate;
    momentPrototype__proto.toISOString  = moment_format__toISOString;
    momentPrototype__proto.toJSON       = moment_format__toISOString;
    momentPrototype__proto.toString     = toString;
    momentPrototype__proto.unix         = unix;
    momentPrototype__proto.valueOf      = to_type__valueOf;

    // Year
    momentPrototype__proto.year       = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    // Week Year
    momentPrototype__proto.weekYear    = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    // Quarter
    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    // Month
    momentPrototype__proto.month       = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    // Week
    momentPrototype__proto.week           = momentPrototype__proto.weeks        = getSetWeek;
    momentPrototype__proto.isoWeek        = momentPrototype__proto.isoWeeks     = getSetISOWeek;
    momentPrototype__proto.weeksInYear    = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    // Day
    momentPrototype__proto.date       = getSetDayOfMonth;
    momentPrototype__proto.day        = momentPrototype__proto.days             = getSetDayOfWeek;
    momentPrototype__proto.weekday    = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear  = getSetDayOfYear;

    // Hour
    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    // Minute
    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    // Second
    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    // Millisecond
    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    // Offset
    momentPrototype__proto.utcOffset            = getSetOffset;
    momentPrototype__proto.utc                  = setOffsetToUTC;
    momentPrototype__proto.local                = setOffsetToLocal;
    momentPrototype__proto.parseZone            = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST                = isDaylightSavingTime;
    momentPrototype__proto.isDSTShifted         = isDaylightSavingTimeShifted;
    momentPrototype__proto.isLocal              = isLocal;
    momentPrototype__proto.isUtcOffset          = isUtcOffset;
    momentPrototype__proto.isUtc                = isUtc;
    momentPrototype__proto.isUTC                = isUtc;

    // Timezone
    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    // Deprecations
    momentPrototype__proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779', getSetZone);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix (input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone () {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function locale_calendar__calendar (key, mom, now) {
        var output = this._calendar[key];
        return typeof output === 'function' ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY LT',
        LLLL : 'dddd, MMMM D, YYYY LT'
    };

    function longDateFormat (key) {
        var output = this._longDateFormat[key];
        if (!output && this._longDateFormat[key.toUpperCase()]) {
            output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                return val.slice(1);
            });
            this._longDateFormat[key] = output;
        }
        return output;
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    function preParsePostFormat (string) {
        return string;
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relative__relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (typeof output === 'function') ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
    }

    function locale_set__set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (typeof prop === 'function') {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
    }

    var prototype__proto = Locale.prototype;

    prototype__proto._calendar       = defaultCalendar;
    prototype__proto.calendar        = locale_calendar__calendar;
    prototype__proto._longDateFormat = defaultLongDateFormat;
    prototype__proto.longDateFormat  = longDateFormat;
    prototype__proto._invalidDate    = defaultInvalidDate;
    prototype__proto.invalidDate     = invalidDate;
    prototype__proto._ordinal        = defaultOrdinal;
    prototype__proto.ordinal         = ordinal;
    prototype__proto._ordinalParse   = defaultOrdinalParse;
    prototype__proto.preparse        = preParsePostFormat;
    prototype__proto.postformat      = preParsePostFormat;
    prototype__proto._relativeTime   = defaultRelativeTime;
    prototype__proto.relativeTime    = relative__relativeTime;
    prototype__proto.pastFuture      = pastFuture;
    prototype__proto.set             = locale_set__set;

    // Month
    prototype__proto.months       =        localeMonths;
    prototype__proto._months      = defaultLocaleMonths;
    prototype__proto.monthsShort  =        localeMonthsShort;
    prototype__proto._monthsShort = defaultLocaleMonthsShort;
    prototype__proto.monthsParse  =        localeMonthsParse;

    // Week
    prototype__proto.week = localeWeek;
    prototype__proto._week = defaultLocaleWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    // Day of Week
    prototype__proto.weekdays       =        localeWeekdays;
    prototype__proto._weekdays      = defaultLocaleWeekdays;
    prototype__proto.weekdaysMin    =        localeWeekdaysMin;
    prototype__proto._weekdaysMin   = defaultLocaleWeekdaysMin;
    prototype__proto.weekdaysShort  =        localeWeekdaysShort;
    prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
    prototype__proto.weekdaysParse  =        localeWeekdaysParse;

    // Hours
    prototype__proto.isPM = localeIsPM;
    prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get (format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function list (format, index, field, count, setter) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, setter);
        }

        var i;
        var out = [];
        for (i = 0; i < count; i++) {
            out[i] = lists__get(format, i, field, setter);
        }
        return out;
    }

    function lists__listMonths (format, index) {
        return list(format, index, 'months', 12, 'month');
    }

    function lists__listMonthsShort (format, index) {
        return list(format, index, 'monthsShort', 12, 'month');
    }

    function lists__listWeekdays (format, index) {
        return list(format, index, 'weekdays', 7, 'day');
    }

    function lists__listWeekdaysShort (format, index) {
        return list(format, index, 'weekdaysShort', 7, 'day');
    }

    function lists__listWeekdaysMin (format, index) {
        return list(format, index, 'weekdaysMin', 7, 'day');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports
    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract (duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function duration_add_subtract__add (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function duration_add_subtract__subtract (input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years = 0;

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // Accurately convert days to years, assume start from year 0.
        years = absFloor(daysToYears(days));
        days -= absFloor(yearsToDays(years));

        // 30 days to a month
        // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
        months += absFloor(days / 30);
        days   %= 30;

        // 12 months -> 1 year
        years  += absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToYears (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        return days * 400 / 146097;
    }

    function yearsToDays (years) {
        // years * 365 + absFloor(years / 4) -
        //     absFloor(years / 100) + absFloor(years / 400);
        return years * 146097 / 400;
    }

    function as (units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToYears(days) * 12;
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(yearsToDays(this._months / 12));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function duration_as__valueOf () {
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function duration_get__get (units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var duration_get__milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,  // seconds to minute
        m: 45,  // minutes to hour
        h: 22,  // hours to day
        d: 26,  // days to month
        M: 11   // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime (posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds]  ||
                minutes === 1          && ['m']           ||
                minutes < thresholds.m && ['mm', minutes] ||
                hours   === 1          && ['h']           ||
                hours   < thresholds.h && ['hh', hours]   ||
                days    === 1          && ['d']           ||
                days    < thresholds.d && ['dd', days]    ||
                months  === 1          && ['M']           ||
                months  < thresholds.M && ['MM', months]  ||
                years   === 1          && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set a threshold for relative time strings
    function duration_humanize__getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize (withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = iso_string__abs(this.years());
        var M = iso_string__abs(this.months());
        var D = iso_string__abs(this.days());
        var h = iso_string__abs(this.hours());
        var m = iso_string__abs(this.minutes());
        var s = iso_string__abs(this.seconds() + this.milliseconds() / 1000);
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        return (total < 0 ? '-' : '') +
            'P' +
            (Y ? Y + 'Y' : '') +
            (M ? M + 'M' : '') +
            (D ? D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? h + 'H' : '') +
            (m ? m + 'M' : '') +
            (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs            = duration_abs__abs;
    duration_prototype__proto.add            = duration_add_subtract__add;
    duration_prototype__proto.subtract       = duration_add_subtract__subtract;
    duration_prototype__proto.as             = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds      = asSeconds;
    duration_prototype__proto.asMinutes      = asMinutes;
    duration_prototype__proto.asHours        = asHours;
    duration_prototype__proto.asDays         = asDays;
    duration_prototype__proto.asWeeks        = asWeeks;
    duration_prototype__proto.asMonths       = asMonths;
    duration_prototype__proto.asYears        = asYears;
    duration_prototype__proto.valueOf        = duration_as__valueOf;
    duration_prototype__proto._bubble        = bubble;
    duration_prototype__proto.get            = duration_get__get;
    duration_prototype__proto.milliseconds   = duration_get__milliseconds;
    duration_prototype__proto.seconds        = seconds;
    duration_prototype__proto.minutes        = minutes;
    duration_prototype__proto.hours          = hours;
    duration_prototype__proto.days           = days;
    duration_prototype__proto.weeks          = weeks;
    duration_prototype__proto.months         = months;
    duration_prototype__proto.years          = years;
    duration_prototype__proto.humanize       = humanize;
    duration_prototype__proto.toISOString    = iso_string__toISOString;
    duration_prototype__proto.toString       = iso_string__toISOString;
    duration_prototype__proto.toJSON         = iso_string__toISOString;
    duration_prototype__proto.locale         = locale;
    duration_prototype__proto.localeData     = localeData;

    // Deprecations
    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    // Side effect imports

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    utils_hooks__hooks.version = '2.10.3';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn                    = momentPrototype;
    utils_hooks__hooks.min                   = min;
    utils_hooks__hooks.max                   = max;
    utils_hooks__hooks.utc                   = create_utc__createUTC;
    utils_hooks__hooks.unix                  = moment__createUnix;
    utils_hooks__hooks.months                = lists__listMonths;
    utils_hooks__hooks.isDate                = isDate;
    utils_hooks__hooks.locale                = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid               = valid__createInvalid;
    utils_hooks__hooks.duration              = create__createDuration;
    utils_hooks__hooks.isMoment              = isMoment;
    utils_hooks__hooks.weekdays              = lists__listWeekdays;
    utils_hooks__hooks.parseZone             = moment__createInZone;
    utils_hooks__hooks.localeData            = locale_locales__getLocale;
    utils_hooks__hooks.isDuration            = isDuration;
    utils_hooks__hooks.monthsShort           = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin           = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale          = defineLocale;
    utils_hooks__hooks.weekdaysShort         = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits        = normalizeUnits;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;

    var _moment = utils_hooks__hooks;

    return _moment;

}));
(function () {
    'use strict';

    /*
     * AngularJS Toaster
     * Version: 0.4.14
     *
     * Copyright 2013-2015 Jiri Kavulak.
     * All Rights Reserved.
     * Use, reproduction, distribution, and modification of this code is subject to the terms and
     * conditions of the MIT license, available at http://www.opensource.org/licenses/mit-license.php
     *
     * Author: Jiri Kavulak
     * Related to project of John Papa, Hans Fjällemark and Nguyễn Thiện Hùng (thienhung1989)
     */

    angular.module('toaster', ['ngAnimate']).constant(
        'toasterConfig', {
            'limit': 0,                   // limits max number of toasts
            'tap-to-dismiss': true,

            /* Options:
             - Boolean false/true
             'close-button': true
             - object if not a boolean that allows you to
             override showing the close button for each
             icon-class value
             'close-button': { 'toast-error': true, 'toast-info': false }
             */
            'close-button': false,

            'newest-on-top': true, //'fade-in': 1000,            // done in css
            //'on-fade-in': undefined,    // not implemented
            //'fade-out': 1000,           // done in css
            //'on-fade-out': undefined,   // not implemented
            //'extended-time-out': 1000,  // not implemented
            'time-out': 5000, // Set timeOut and extendedTimeout to 0 to make it sticky
            'icon-classes': {
                error: 'toast-error',
                info: 'toast-info',
                wait: 'toast-wait',
                success: 'toast-success',
                warning: 'toast-warning'
            },
            'body-output-type': '', // Options: '', 'trustedHtml', 'template', 'templateWithData'
            'body-template': 'toasterBodyTmpl.html',
            'icon-class': 'toast-info',
            'position-class': 'toast-top-right', // Options (see CSS):
            // 'toast-top-full-width', 'toast-bottom-full-width', 'toast-center',
            // 'toast-top-left', 'toast-top-center', 'toast-top-right',
            // 'toast-bottom-left', 'toast-bottom-center', 'toast-bottom-right',
            'title-class': 'toast-title',
            'message-class': 'toast-message',
            'prevent-duplicates': false,
            'mouseover-timer-stop': true // stop timeout on mouseover and restart timer on mouseout
        }
    ).service(
        'toaster', [
            '$rootScope', 'toasterConfig', function ($rootScope, toasterConfig) {
                this.pop = function (type, title, body, timeout, bodyOutputType, clickHandler, toasterId, showCloseButton, toastId) {
                    if (angular.isObject(type)) {
                        var params = type; // Enable named parameters as pop argument
                        this.toast = {
                            type: params.type,
                            title: params.title,
                            body: params.body,
                            timeout: params.timeout,
                            bodyOutputType: params.bodyOutputType,
                            clickHandler: params.clickHandler,
                            showCloseButton: params.showCloseButton,
                            uid: params.toastId
                        };
                        toastId = params.toastId;
                        toasterId = params.toasterId;
                    } else {
                        this.toast = {
                            type: type,
                            title: title,
                            body: body,
                            timeout: timeout,
                            bodyOutputType: bodyOutputType,
                            clickHandler: clickHandler,
                            showCloseButton: showCloseButton,
                            uid: toastId
                        };
                    }
                    $rootScope.$emit('toaster-newToast', toasterId, toastId);
                };

                this.clear = function (toasterId, toastId) {
                    $rootScope.$emit('toaster-clearToasts', toasterId, toastId);
                };

                // Create one method per icon class, to allow to call toaster.info() and similar
                for (var type in toasterConfig['icon-classes']) {
                    this[type] = (function (toasterType) {
                        return function (title, body, timeout, bodyOutputType, clickHandler, toasterId, showCloseButton, toastId) {
                            if (angular.isString(title)) {
                                this.pop(
                                    toasterType,
                                    title,
                                    body,
                                    timeout,
                                    bodyOutputType,
                                    clickHandler,
                                    toasterId,
                                    showCloseButton,
                                    toastId
                                );
                            } else { // 'title' is actually an object with options
                                this.pop(angular.extend(title, { type: toasterType }));
                            }
                        };
                    })(type);
                }
            }]
    ).factory(
        'toasterEventRegistry', [
            '$rootScope', function ($rootScope) {
                var deregisterNewToast = null, deregisterClearToasts = null, newToastEventSubscribers = [], clearToastsEventSubscribers = [], toasterFactory;

                toasterFactory = {
                    setup: function () {
                        if (!deregisterNewToast) {
                            deregisterNewToast = $rootScope.$on(
                                'toaster-newToast', function (event, toasterId, toastId) {
                                    for (var i = 0, len = newToastEventSubscribers.length; i < len; i++) {
                                        newToastEventSubscribers[i](event, toasterId, toastId);
                                    }
                                }
                            );
                        }

                        if (!deregisterClearToasts) {
                            deregisterClearToasts = $rootScope.$on(
                                'toaster-clearToasts', function (event, toasterId, toastId) {
                                    for (var i = 0, len = clearToastsEventSubscribers.length; i < len; i++) {
                                        clearToastsEventSubscribers[i](event, toasterId, toastId);
                                    }
                                }
                            );
                        }
                    },

                    subscribeToNewToastEvent: function (onNewToast) {
                        newToastEventSubscribers.push(onNewToast);
                    },
                    subscribeToClearToastsEvent: function (onClearToasts) {
                        clearToastsEventSubscribers.push(onClearToasts);
                    },
                    unsubscribeToNewToastEvent: function (onNewToast) {
                        var index = newToastEventSubscribers.indexOf(onNewToast);
                        if (index >= 0) {
                            newToastEventSubscribers.splice(index, 1);
                        }

                        if (newToastEventSubscribers.length === 0) {
                            deregisterNewToast();
                            deregisterNewToast = null;
                        }
                    },
                    unsubscribeToClearToastsEvent: function (onClearToasts) {
                        var index = clearToastsEventSubscribers.indexOf(onClearToasts);
                        if (index >= 0) {
                            clearToastsEventSubscribers.splice(index, 1);
                        }

                        if (clearToastsEventSubscribers.length === 0) {
                            deregisterClearToasts();
                            deregisterClearToasts = null;
                        }
                    }
                };
                return {
                    setup: toasterFactory.setup,
                    subscribeToNewToastEvent: toasterFactory.subscribeToNewToastEvent,
                    subscribeToClearToastsEvent: toasterFactory.subscribeToClearToastsEvent,
                    unsubscribeToNewToastEvent: toasterFactory.unsubscribeToNewToastEvent,
                    unsubscribeToClearToastsEvent: toasterFactory.unsubscribeToClearToastsEvent
                };
            }]
    ).directive(
        'toasterContainer', [
            '$parse', '$rootScope', '$interval', '$sce', 'toasterConfig', 'toaster', 'toasterEventRegistry',
            function ($parse, $rootScope, $interval, $sce, toasterConfig, toaster, toasterEventRegistry) {
                return {
                    replace: true,
                    restrict: 'EA',
                    scope: true, // creates an internal scope for this directive (one per directive instance)
                    link: function (scope, elm, attrs) {
                        var id = 0, mergedConfig;

                        // Merges configuration set in directive with default one
                        mergedConfig = angular.extend({}, toasterConfig, scope.$eval(attrs.toasterOptions));

                        scope.config = {
                            toasterId: mergedConfig['toaster-id'],
                            position: mergedConfig['position-class'],
                            title: mergedConfig['title-class'],
                            message: mergedConfig['message-class'],
                            tap: mergedConfig['tap-to-dismiss'],
                            closeButton: mergedConfig['close-button'],
                            animation: mergedConfig['animation-class'],
                            mouseoverTimer: mergedConfig['mouseover-timer-stop']
                        };

                        scope.$on(
                            "$destroy", function () {
                                toasterEventRegistry.unsubscribeToNewToastEvent(scope._onNewToast);
                                toasterEventRegistry.unsubscribeToClearToastsEvent(scope._onClearToasts);
                            }
                        );

                        function setTimeout(toast, time) {
                            toast.timeoutPromise = $interval(
                                function () {
                                    scope.removeToast(toast.id);
                                }, time, 1
                            );
                        }

                        scope.configureTimer = function (toast) {
                            var timeout = angular.isNumber(toast.timeout) ? toast.timeout : mergedConfig['time-out'];
                            if (typeof timeout === "object") timeout = timeout[toast.type];
                            if (timeout > 0) {
                                setTimeout(toast, timeout);
                            }
                        };

                        function addToast(toast, toastId) {
                            toast.type = mergedConfig['icon-classes'][toast.type];
                            if (!toast.type) {
                                toast.type = mergedConfig['icon-class'];
                            }

                            if (mergedConfig['prevent-duplicates'] === true) {
                                // Prevent adding duplicate toasts if it's set
                                if (isUndefinedOrNull(toastId)) {
                                    if (scope.toasters.length > 0 && scope.toasters[scope.toasters.length - 1].body === toast.body) {
                                        return;
                                    }
                                } else {
                                    var i, len;
                                    for (i = 0, len = scope.toasters.length; i < len; i++) {
                                        if (scope.toasters[i].uid === toastId) {
                                            removeToast(i);
                                            // update loop
                                            i--;
                                            len = scope.toasters.length;
                                        }
                                    }
                                }
                            }

                            toast.id = ++id;
                            // Sure uid defined
                            if (!isUndefinedOrNull(toastId)) {
                                toast.uid = toastId;
                            }

                            // set the showCloseButton property on the toast so that
                            // each template can bind directly to the property to show/hide
                            // the close button
                            var closeButton = mergedConfig['close-button'];

                            // if toast.showCloseButton is a boolean value,
                            // it was specifically overriden in the pop arguments
                            if (typeof toast.showCloseButton === "boolean") {

                            } else if (typeof closeButton === "boolean") {
                                toast.showCloseButton = closeButton;
                            } else if (typeof closeButton === "object") {
                                var closeButtonForType = closeButton[toast.type];

                                if (typeof closeButtonForType !== "undefined" && closeButtonForType !== null) {
                                    toast.showCloseButton = closeButtonForType;
                                }
                            } else {
                                // if an option was not set, default to false.
                                toast.showCloseButton = false;
                            }

                            // Set the toast.bodyOutputType to the default if it isn't set
                            toast.bodyOutputType = toast.bodyOutputType || mergedConfig['body-output-type'];
                            switch (toast.bodyOutputType) {
                                case 'trustedHtml':
                                    toast.html = $sce.trustAsHtml(toast.body);
                                    break;
                                case 'template':
                                    toast.bodyTemplate = toast.body || mergedConfig['body-template'];
                                    break;
                                case 'templateWithData':
                                    var fcGet = $parse(toast.body || mergedConfig['body-template']);
                                    var templateWithData = fcGet(scope);
                                    toast.bodyTemplate = templateWithData.template;
                                    toast.data = templateWithData.data;
                                    break;
                            }

                            scope.configureTimer(toast);
                            if (mergedConfig['newest-on-top'] === true) {
                                scope.toasters.unshift(toast);
                                if (mergedConfig['limit'] > 0 && scope.toasters.length > mergedConfig['limit']) {
                                    scope.toasters.pop();
                                }
                            } else {
                                scope.toasters.push(toast);
                                if (mergedConfig['limit'] > 0 && scope.toasters.length > mergedConfig['limit']) {
                                    scope.toasters.shift();
                                }
                            }
                        }

                        scope.removeToast = function (id) {
                            var i, len, toast;
                            for (i = 0, len = scope.toasters.length; i < len; i++) {
                                if (scope.toasters[i].id === id) {
                                    removeToast(i);
                                    break;
                                }
                            }
                        };

                        function removeToast(toastIndex) {
                            var toast = scope.toasters[toastIndex];
                            if (toast) {
                                if (toast.timeoutPromise) {
                                    $interval.cancel(toast.timeoutPromise);
                                }
                                scope.toasters.splice(toastIndex, 1);
                            }
                        }

                        function removeAllToasts(toastId) {
                            for (var i = scope.toasters.length - 1; i >= 0; i--) {
                                if (isUndefinedOrNull(toastId)) {
                                    removeToast(i);
                                } else {
                                    if (scope.toasters[i].uid == toastId) {
                                        removeToast(i);
                                    }
                                }
                            }
                        }

                        scope.toasters = [];

                        function isUndefinedOrNull(val) {
                            return angular.isUndefined(val) || val === null
                        }

                        scope._onNewToast = function (event, toasterId, toastId) {
                            // Compatibility: if toaster has no toasterId defined, and if call to display
                            // hasn't either, then the request is for us

                            if ((isUndefinedOrNull(scope.config.toasterId) && isUndefinedOrNull(toasterId)) || (!isUndefinedOrNull(scope.config.toasterId) && !isUndefinedOrNull(toasterId) && scope.config.toasterId == toasterId)) {
                                addToast(toaster.toast, toastId);
                            }
                        };
                        scope._onClearToasts = function (event, toasterId, toastId) {
                            // Compatibility: if toaster has no toasterId defined, and if call to display
                            // hasn't either, then the request is for us
                            if (toasterId == '*' || (isUndefinedOrNull(scope.config.toasterId) && isUndefinedOrNull(toasterId)) || (!isUndefinedOrNull(scope.config.toasterId) && !isUndefinedOrNull(toasterId) && scope.config.toasterId == toasterId)) {
                                removeAllToasts(toastId);
                            }
                        };

                        toasterEventRegistry.setup();

                        toasterEventRegistry.subscribeToNewToastEvent(scope._onNewToast);
                        toasterEventRegistry.subscribeToClearToastsEvent(scope._onClearToasts);
                    },
                    controller: [
                        '$scope', '$element', '$attrs', function ($scope, $element, $attrs) {
                            // Called on mouseover
                            $scope.stopTimer = function (toast) {
                                if ($scope.config.mouseoverTimer === true) {
                                    if (toast.timeoutPromise) {
                                        $interval.cancel(toast.timeoutPromise);
                                        toast.timeoutPromise = null;
                                    }
                                }
                            };

                            // Called on mouseout
                            $scope.restartTimer = function (toast) {
                                if ($scope.config.mouseoverTimer === true) {
                                    if (!toast.timeoutPromise) {
                                        $scope.configureTimer(toast);
                                    }
                                } else if (toast.timeoutPromise === null) {
                                    $scope.removeToast(toast.id);
                                }
                            };

                            $scope.click = function (toast, isCloseButton) {
                                if ($scope.config.tap === true || (toast.showCloseButton === true && isCloseButton === true)) {
                                    var removeToast = true;
                                    if (toast.clickHandler) {
                                        if (angular.isFunction(toast.clickHandler)) {
                                            removeToast = toast.clickHandler(toast, true);
                                        } else if (angular.isFunction($scope.$parent.$eval(toast.clickHandler))) {
                                            removeToast = $scope.$parent.$eval(toast.clickHandler)(toast, toast.showCloseButton);
                                        } else {
                                            console.log("TOAST-NOTE: Your click handler is not inside a parent scope of toaster-container.");
                                        }
                                    }
                                    if (removeToast) {
                                        $scope.removeToast(toast.id);
                                    }
                                }
                            };
                        }],
                    template: '<div id="toast-container" ng-class="[config.position, config.animation]">' + '<div ng-repeat="toaster in toasters" class="toast" ng-class="toaster.type" ng-click="click(toaster)" ng-mouseover="stopTimer(toaster)" ng-mouseout="restartTimer(toaster)">' + '<button type="button" class="toast-close-button" ng-show="toaster.showCloseButton" ng-click="click(toaster, true)">&times;</button>' + '<div ng-class="config.title">{{toaster.title}}</div>' + '<div ng-class="config.message" ng-switch on="toaster.bodyOutputType">' + '<div ng-switch-when="trustedHtml" ng-bind-html="toaster.html"></div>' + '<div ng-switch-when="template"><div ng-include="toaster.bodyTemplate"></div></div>' + '<div ng-switch-when="templateWithData"><div ng-include="toaster.bodyTemplate"></div></div>' + '<div ng-switch-default >{{toaster.body}}</div>' + '</div>' + '</div>' + '</div>'
                };
            }]
    );
})(window, document);
/*!
 * ZeroClipboard
 * The ZeroClipboard library provides an easy way to copy text to the clipboard using an invisible Adobe Flash movie and a JavaScript interface.
 * Copyright (c) 2009-2014 Jon Rohan, James M. Greene
 * Licensed MIT
 * http://zeroclipboard.org/
 * v2.2.0
 */
(function(window, undefined) {
  "use strict";
  /**
 * Store references to critically important global functions that may be
 * overridden on certain web pages.
 */
  var _window = window, _document = _window.document, _navigator = _window.navigator, _setTimeout = _window.setTimeout, _clearTimeout = _window.clearTimeout, _setInterval = _window.setInterval, _clearInterval = _window.clearInterval, _getComputedStyle = _window.getComputedStyle, _encodeURIComponent = _window.encodeURIComponent, _ActiveXObject = _window.ActiveXObject, _Error = _window.Error, _parseInt = _window.Number.parseInt || _window.parseInt, _parseFloat = _window.Number.parseFloat || _window.parseFloat, _isNaN = _window.Number.isNaN || _window.isNaN, _now = _window.Date.now, _keys = _window.Object.keys, _defineProperty = _window.Object.defineProperty, _hasOwn = _window.Object.prototype.hasOwnProperty, _slice = _window.Array.prototype.slice, _unwrap = function() {
    var unwrapper = function(el) {
      return el;
    };
    if (typeof _window.wrap === "function" && typeof _window.unwrap === "function") {
      try {
        var div = _document.createElement("div");
        var unwrappedDiv = _window.unwrap(div);
        if (div.nodeType === 1 && unwrappedDiv && unwrappedDiv.nodeType === 1) {
          unwrapper = _window.unwrap;
        }
      } catch (e) {}
    }
    return unwrapper;
  }();
  /**
 * Convert an `arguments` object into an Array.
 *
 * @returns The arguments as an Array
 * @private
 */
  var _args = function(argumentsObj) {
    return _slice.call(argumentsObj, 0);
  };
  /**
 * Shallow-copy the owned, enumerable properties of one object over to another, similar to jQuery's `$.extend`.
 *
 * @returns The target object, augmented
 * @private
 */
  var _extend = function() {
    var i, len, arg, prop, src, copy, args = _args(arguments), target = args[0] || {};
    for (i = 1, len = args.length; i < len; i++) {
      if ((arg = args[i]) != null) {
        for (prop in arg) {
          if (_hasOwn.call(arg, prop)) {
            src = target[prop];
            copy = arg[prop];
            if (target !== copy && copy !== undefined) {
              target[prop] = copy;
            }
          }
        }
      }
    }
    return target;
  };
  /**
 * Return a deep copy of the source object or array.
 *
 * @returns Object or Array
 * @private
 */
  var _deepCopy = function(source) {
    var copy, i, len, prop;
    if (typeof source !== "object" || source == null || typeof source.nodeType === "number") {
      copy = source;
    } else if (typeof source.length === "number") {
      copy = [];
      for (i = 0, len = source.length; i < len; i++) {
        if (_hasOwn.call(source, i)) {
          copy[i] = _deepCopy(source[i]);
        }
      }
    } else {
      copy = {};
      for (prop in source) {
        if (_hasOwn.call(source, prop)) {
          copy[prop] = _deepCopy(source[prop]);
        }
      }
    }
    return copy;
  };
  /**
 * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to keep.
 * The inverse of `_omit`, mostly. The big difference is that these properties do NOT need to be enumerable to
 * be kept.
 *
 * @returns A new filtered object.
 * @private
 */
  var _pick = function(obj, keys) {
    var newObj = {};
    for (var i = 0, len = keys.length; i < len; i++) {
      if (keys[i] in obj) {
        newObj[keys[i]] = obj[keys[i]];
      }
    }
    return newObj;
  };
  /**
 * Makes a shallow copy of `obj` (like `_extend`) but filters its properties based on a list of `keys` to omit.
 * The inverse of `_pick`.
 *
 * @returns A new filtered object.
 * @private
 */
  var _omit = function(obj, keys) {
    var newObj = {};
    for (var prop in obj) {
      if (keys.indexOf(prop) === -1) {
        newObj[prop] = obj[prop];
      }
    }
    return newObj;
  };
  /**
 * Remove all owned, enumerable properties from an object.
 *
 * @returns The original object without its owned, enumerable properties.
 * @private
 */
  var _deleteOwnProperties = function(obj) {
    if (obj) {
      for (var prop in obj) {
        if (_hasOwn.call(obj, prop)) {
          delete obj[prop];
        }
      }
    }
    return obj;
  };
  /**
 * Determine if an element is contained within another element.
 *
 * @returns Boolean
 * @private
 */
  var _containedBy = function(el, ancestorEl) {
    if (el && el.nodeType === 1 && el.ownerDocument && ancestorEl && (ancestorEl.nodeType === 1 && ancestorEl.ownerDocument && ancestorEl.ownerDocument === el.ownerDocument || ancestorEl.nodeType === 9 && !ancestorEl.ownerDocument && ancestorEl === el.ownerDocument)) {
      do {
        if (el === ancestorEl) {
          return true;
        }
        el = el.parentNode;
      } while (el);
    }
    return false;
  };
  /**
 * Get the URL path's parent directory.
 *
 * @returns String or `undefined`
 * @private
 */
  var _getDirPathOfUrl = function(url) {
    var dir;
    if (typeof url === "string" && url) {
      dir = url.split("#")[0].split("?")[0];
      dir = url.slice(0, url.lastIndexOf("/") + 1);
    }
    return dir;
  };
  /**
 * Get the current script's URL by throwing an `Error` and analyzing it.
 *
 * @returns String or `undefined`
 * @private
 */
  var _getCurrentScriptUrlFromErrorStack = function(stack) {
    var url, matches;
    if (typeof stack === "string" && stack) {
      matches = stack.match(/^(?:|[^:@]*@|.+\)@(?=http[s]?|file)|.+?\s+(?: at |@)(?:[^:\(]+ )*[\(]?)((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/);
      if (matches && matches[1]) {
        url = matches[1];
      } else {
        matches = stack.match(/\)@((?:http[s]?|file):\/\/[\/]?.+?\/[^:\)]*?)(?::\d+)(?::\d+)?/);
        if (matches && matches[1]) {
          url = matches[1];
        }
      }
    }
    return url;
  };
  /**
 * Get the current script's URL by throwing an `Error` and analyzing it.
 *
 * @returns String or `undefined`
 * @private
 */
  var _getCurrentScriptUrlFromError = function() {
    var url, err;
    try {
      throw new _Error();
    } catch (e) {
      err = e;
    }
    if (err) {
      url = err.sourceURL || err.fileName || _getCurrentScriptUrlFromErrorStack(err.stack);
    }
    return url;
  };
  /**
 * Get the current script's URL.
 *
 * @returns String or `undefined`
 * @private
 */
  var _getCurrentScriptUrl = function() {
    var jsPath, scripts, i;
    if (_document.currentScript && (jsPath = _document.currentScript.src)) {
      return jsPath;
    }
    scripts = _document.getElementsByTagName("script");
    if (scripts.length === 1) {
      return scripts[0].src || undefined;
    }
    if ("readyState" in scripts[0]) {
      for (i = scripts.length; i--; ) {
        if (scripts[i].readyState === "interactive" && (jsPath = scripts[i].src)) {
          return jsPath;
        }
      }
    }
    if (_document.readyState === "loading" && (jsPath = scripts[scripts.length - 1].src)) {
      return jsPath;
    }
    if (jsPath = _getCurrentScriptUrlFromError()) {
      return jsPath;
    }
    return undefined;
  };
  /**
 * Get the unanimous parent directory of ALL script tags.
 * If any script tags are either (a) inline or (b) from differing parent
 * directories, this method must return `undefined`.
 *
 * @returns String or `undefined`
 * @private
 */
  var _getUnanimousScriptParentDir = function() {
    var i, jsDir, jsPath, scripts = _document.getElementsByTagName("script");
    for (i = scripts.length; i--; ) {
      if (!(jsPath = scripts[i].src)) {
        jsDir = null;
        break;
      }
      jsPath = _getDirPathOfUrl(jsPath);
      if (jsDir == null) {
        jsDir = jsPath;
      } else if (jsDir !== jsPath) {
        jsDir = null;
        break;
      }
    }
    return jsDir || undefined;
  };
  /**
 * Get the presumed location of the "ZeroClipboard.swf" file, based on the location
 * of the executing JavaScript file (e.g. "ZeroClipboard.js", etc.).
 *
 * @returns String
 * @private
 */
  var _getDefaultSwfPath = function() {
    var jsDir = _getDirPathOfUrl(_getCurrentScriptUrl()) || _getUnanimousScriptParentDir() || "";
    return jsDir + "ZeroClipboard.swf";
  };
  /**
 * Keep track of if the page is framed (in an `iframe`). This can never change.
 * @private
 */
  var _pageIsFramed = function() {
    return window.opener == null && (!!window.top && window != window.top || !!window.parent && window != window.parent);
  }();
  /**
 * Keep track of the state of the Flash object.
 * @private
 */
  var _flashState = {
    bridge: null,
    version: "0.0.0",
    pluginType: "unknown",
    disabled: null,
    outdated: null,
    sandboxed: null,
    unavailable: null,
    degraded: null,
    deactivated: null,
    overdue: null,
    ready: null
  };
  /**
 * The minimum Flash Player version required to use ZeroClipboard completely.
 * @readonly
 * @private
 */
  var _minimumFlashVersion = "11.0.0";
  /**
 * The ZeroClipboard library version number, as reported by Flash, at the time the SWF was compiled.
 */
  var _zcSwfVersion;
  /**
 * Keep track of all event listener registrations.
 * @private
 */
  var _handlers = {};
  /**
 * Keep track of the currently activated element.
 * @private
 */
  var _currentElement;
  /**
 * Keep track of the element that was activated when a `copy` process started.
 * @private
 */
  var _copyTarget;
  /**
 * Keep track of data for the pending clipboard transaction.
 * @private
 */
  var _clipData = {};
  /**
 * Keep track of data formats for the pending clipboard transaction.
 * @private
 */
  var _clipDataFormatMap = null;
  /**
 * Keep track of the Flash availability check timeout.
 * @private
 */
  var _flashCheckTimeout = 0;
  /**
 * Keep track of SWF network errors interval polling.
 * @private
 */
  var _swfFallbackCheckInterval = 0;
  /**
 * The `message` store for events
 * @private
 */
  var _eventMessages = {
    ready: "Flash communication is established",
    error: {
      "flash-disabled": "Flash is disabled or not installed. May also be attempting to run Flash in a sandboxed iframe, which is impossible.",
      "flash-outdated": "Flash is too outdated to support ZeroClipboard",
      "flash-sandboxed": "Attempting to run Flash in a sandboxed iframe, which is impossible",
      "flash-unavailable": "Flash is unable to communicate bidirectionally with JavaScript",
      "flash-degraded": "Flash is unable to preserve data fidelity when communicating with JavaScript",
      "flash-deactivated": "Flash is too outdated for your browser and/or is configured as click-to-activate.\nThis may also mean that the ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity.\nMay also be attempting to run Flash in a sandboxed iframe, which is impossible.",
      "flash-overdue": "Flash communication was established but NOT within the acceptable time limit",
      "version-mismatch": "ZeroClipboard JS version number does not match ZeroClipboard SWF version number",
      "clipboard-error": "At least one error was thrown while ZeroClipboard was attempting to inject your data into the clipboard",
      "config-mismatch": "ZeroClipboard configuration does not match Flash's reality",
      "swf-not-found": "The ZeroClipboard SWF object could not be loaded, so please check your `swfPath` configuration and/or network connectivity"
    }
  };
  /**
 * The `name`s of `error` events that can only occur is Flash has at least
 * been able to load the SWF successfully.
 * @private
 */
  var _errorsThatOnlyOccurAfterFlashLoads = [ "flash-unavailable", "flash-degraded", "flash-overdue", "version-mismatch", "config-mismatch", "clipboard-error" ];
  /**
 * The `name`s of `error` events that should likely result in the `_flashState`
 * variable's property values being updated.
 * @private
 */
  var _flashStateErrorNames = [ "flash-disabled", "flash-outdated", "flash-sandboxed", "flash-unavailable", "flash-degraded", "flash-deactivated", "flash-overdue" ];
  /**
 * A RegExp to match the `name` property of `error` events related to Flash.
 * @private
 */
  var _flashStateErrorNameMatchingRegex = new RegExp("^flash-(" + _flashStateErrorNames.map(function(errorName) {
    return errorName.replace(/^flash-/, "");
  }).join("|") + ")$");
  /**
 * A RegExp to match the `name` property of `error` events related to Flash,
 * which is enabled.
 * @private
 */
  var _flashStateEnabledErrorNameMatchingRegex = new RegExp("^flash-(" + _flashStateErrorNames.slice(1).map(function(errorName) {
    return errorName.replace(/^flash-/, "");
  }).join("|") + ")$");
  /**
 * ZeroClipboard configuration defaults for the Core module.
 * @private
 */
  var _globalConfig = {
    swfPath: _getDefaultSwfPath(),
    trustedDomains: window.location.host ? [ window.location.host ] : [],
    cacheBust: true,
    forceEnhancedClipboard: false,
    flashLoadTimeout: 3e4,
    autoActivate: true,
    bubbleEvents: true,
    containerId: "global-zeroclipboard-html-bridge",
    containerClass: "global-zeroclipboard-container",
    swfObjectId: "global-zeroclipboard-flash-bridge",
    hoverClass: "zeroclipboard-is-hover",
    activeClass: "zeroclipboard-is-active",
    forceHandCursor: false,
    title: null,
    zIndex: 999999999
  };
  /**
 * The underlying implementation of `ZeroClipboard.config`.
 * @private
 */
  var _config = function(options) {
    if (typeof options === "object" && options !== null) {
      for (var prop in options) {
        if (_hasOwn.call(options, prop)) {
          if (/^(?:forceHandCursor|title|zIndex|bubbleEvents)$/.test(prop)) {
            _globalConfig[prop] = options[prop];
          } else if (_flashState.bridge == null) {
            if (prop === "containerId" || prop === "swfObjectId") {
              if (_isValidHtml4Id(options[prop])) {
                _globalConfig[prop] = options[prop];
              } else {
                throw new Error("The specified `" + prop + "` value is not valid as an HTML4 Element ID");
              }
            } else {
              _globalConfig[prop] = options[prop];
            }
          }
        }
      }
    }
    if (typeof options === "string" && options) {
      if (_hasOwn.call(_globalConfig, options)) {
        return _globalConfig[options];
      }
      return;
    }
    return _deepCopy(_globalConfig);
  };
  /**
 * The underlying implementation of `ZeroClipboard.state`.
 * @private
 */
  var _state = function() {
    _detectSandbox();
    return {
      browser: _pick(_navigator, [ "userAgent", "platform", "appName" ]),
      flash: _omit(_flashState, [ "bridge" ]),
      zeroclipboard: {
        version: ZeroClipboard.version,
        config: ZeroClipboard.config()
      }
    };
  };
  /**
 * The underlying implementation of `ZeroClipboard.isFlashUnusable`.
 * @private
 */
  var _isFlashUnusable = function() {
    return !!(_flashState.disabled || _flashState.outdated || _flashState.sandboxed || _flashState.unavailable || _flashState.degraded || _flashState.deactivated);
  };
  /**
 * The underlying implementation of `ZeroClipboard.on`.
 * @private
 */
  var _on = function(eventType, listener) {
    var i, len, events, added = {};
    if (typeof eventType === "string" && eventType) {
      events = eventType.toLowerCase().split(/\s+/);
    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
      for (i in eventType) {
        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
          ZeroClipboard.on(i, eventType[i]);
        }
      }
    }
    if (events && events.length) {
      for (i = 0, len = events.length; i < len; i++) {
        eventType = events[i].replace(/^on/, "");
        added[eventType] = true;
        if (!_handlers[eventType]) {
          _handlers[eventType] = [];
        }
        _handlers[eventType].push(listener);
      }
      if (added.ready && _flashState.ready) {
        ZeroClipboard.emit({
          type: "ready"
        });
      }
      if (added.error) {
        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {
          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, "")] === true) {
            ZeroClipboard.emit({
              type: "error",
              name: _flashStateErrorNames[i]
            });
            break;
          }
        }
        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {
          ZeroClipboard.emit({
            type: "error",
            name: "version-mismatch",
            jsVersion: ZeroClipboard.version,
            swfVersion: _zcSwfVersion
          });
        }
      }
    }
    return ZeroClipboard;
  };
  /**
 * The underlying implementation of `ZeroClipboard.off`.
 * @private
 */
  var _off = function(eventType, listener) {
    var i, len, foundIndex, events, perEventHandlers;
    if (arguments.length === 0) {
      events = _keys(_handlers);
    } else if (typeof eventType === "string" && eventType) {
      events = eventType.split(/\s+/);
    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
      for (i in eventType) {
        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
          ZeroClipboard.off(i, eventType[i]);
        }
      }
    }
    if (events && events.length) {
      for (i = 0, len = events.length; i < len; i++) {
        eventType = events[i].toLowerCase().replace(/^on/, "");
        perEventHandlers = _handlers[eventType];
        if (perEventHandlers && perEventHandlers.length) {
          if (listener) {
            foundIndex = perEventHandlers.indexOf(listener);
            while (foundIndex !== -1) {
              perEventHandlers.splice(foundIndex, 1);
              foundIndex = perEventHandlers.indexOf(listener, foundIndex);
            }
          } else {
            perEventHandlers.length = 0;
          }
        }
      }
    }
    return ZeroClipboard;
  };
  /**
 * The underlying implementation of `ZeroClipboard.handlers`.
 * @private
 */
  var _listeners = function(eventType) {
    var copy;
    if (typeof eventType === "string" && eventType) {
      copy = _deepCopy(_handlers[eventType]) || null;
    } else {
      copy = _deepCopy(_handlers);
    }
    return copy;
  };
  /**
 * The underlying implementation of `ZeroClipboard.emit`.
 * @private
 */
  var _emit = function(event) {
    var eventCopy, returnVal, tmp;
    event = _createEvent(event);
    if (!event) {
      return;
    }
    if (_preprocessEvent(event)) {
      return;
    }
    if (event.type === "ready" && _flashState.overdue === true) {
      return ZeroClipboard.emit({
        type: "error",
        name: "flash-overdue"
      });
    }
    eventCopy = _extend({}, event);
    _dispatchCallbacks.call(this, eventCopy);
    if (event.type === "copy") {
      tmp = _mapClipDataToFlash(_clipData);
      returnVal = tmp.data;
      _clipDataFormatMap = tmp.formatMap;
    }
    return returnVal;
  };
  /**
 * The underlying implementation of `ZeroClipboard.create`.
 * @private
 */
  var _create = function() {
    var previousState = _flashState.sandboxed;
    _detectSandbox();
    if (typeof _flashState.ready !== "boolean") {
      _flashState.ready = false;
    }
    if (_flashState.sandboxed !== previousState && _flashState.sandboxed === true) {
      _flashState.ready = false;
      ZeroClipboard.emit({
        type: "error",
        name: "flash-sandboxed"
      });
    } else if (!ZeroClipboard.isFlashUnusable() && _flashState.bridge === null) {
      var maxWait = _globalConfig.flashLoadTimeout;
      if (typeof maxWait === "number" && maxWait >= 0) {
        _flashCheckTimeout = _setTimeout(function() {
          if (typeof _flashState.deactivated !== "boolean") {
            _flashState.deactivated = true;
          }
          if (_flashState.deactivated === true) {
            ZeroClipboard.emit({
              type: "error",
              name: "flash-deactivated"
            });
          }
        }, maxWait);
      }
      _flashState.overdue = false;
      _embedSwf();
    }
  };
  /**
 * The underlying implementation of `ZeroClipboard.destroy`.
 * @private
 */
  var _destroy = function() {
    ZeroClipboard.clearData();
    ZeroClipboard.blur();
    ZeroClipboard.emit("destroy");
    _unembedSwf();
    ZeroClipboard.off();
  };
  /**
 * The underlying implementation of `ZeroClipboard.setData`.
 * @private
 */
  var _setData = function(format, data) {
    var dataObj;
    if (typeof format === "object" && format && typeof data === "undefined") {
      dataObj = format;
      ZeroClipboard.clearData();
    } else if (typeof format === "string" && format) {
      dataObj = {};
      dataObj[format] = data;
    } else {
      return;
    }
    for (var dataFormat in dataObj) {
      if (typeof dataFormat === "string" && dataFormat && _hasOwn.call(dataObj, dataFormat) && typeof dataObj[dataFormat] === "string" && dataObj[dataFormat]) {
        _clipData[dataFormat] = dataObj[dataFormat];
      }
    }
  };
  /**
 * The underlying implementation of `ZeroClipboard.clearData`.
 * @private
 */
  var _clearData = function(format) {
    if (typeof format === "undefined") {
      _deleteOwnProperties(_clipData);
      _clipDataFormatMap = null;
    } else if (typeof format === "string" && _hasOwn.call(_clipData, format)) {
      delete _clipData[format];
    }
  };
  /**
 * The underlying implementation of `ZeroClipboard.getData`.
 * @private
 */
  var _getData = function(format) {
    if (typeof format === "undefined") {
      return _deepCopy(_clipData);
    } else if (typeof format === "string" && _hasOwn.call(_clipData, format)) {
      return _clipData[format];
    }
  };
  /**
 * The underlying implementation of `ZeroClipboard.focus`/`ZeroClipboard.activate`.
 * @private
 */
  var _focus = function(element) {
    if (!(element && element.nodeType === 1)) {
      return;
    }
    if (_currentElement) {
      _removeClass(_currentElement, _globalConfig.activeClass);
      if (_currentElement !== element) {
        _removeClass(_currentElement, _globalConfig.hoverClass);
      }
    }
    _currentElement = element;
    _addClass(element, _globalConfig.hoverClass);
    var newTitle = element.getAttribute("title") || _globalConfig.title;
    if (typeof newTitle === "string" && newTitle) {
      var htmlBridge = _getHtmlBridge(_flashState.bridge);
      if (htmlBridge) {
        htmlBridge.setAttribute("title", newTitle);
      }
    }
    var useHandCursor = _globalConfig.forceHandCursor === true || _getStyle(element, "cursor") === "pointer";
    _setHandCursor(useHandCursor);
    _reposition();
  };
  /**
 * The underlying implementation of `ZeroClipboard.blur`/`ZeroClipboard.deactivate`.
 * @private
 */
  var _blur = function() {
    var htmlBridge = _getHtmlBridge(_flashState.bridge);
    if (htmlBridge) {
      htmlBridge.removeAttribute("title");
      htmlBridge.style.left = "0px";
      htmlBridge.style.top = "-9999px";
      htmlBridge.style.width = "1px";
      htmlBridge.style.height = "1px";
    }
    if (_currentElement) {
      _removeClass(_currentElement, _globalConfig.hoverClass);
      _removeClass(_currentElement, _globalConfig.activeClass);
      _currentElement = null;
    }
  };
  /**
 * The underlying implementation of `ZeroClipboard.activeElement`.
 * @private
 */
  var _activeElement = function() {
    return _currentElement || null;
  };
  /**
 * Check if a value is a valid HTML4 `ID` or `Name` token.
 * @private
 */
  var _isValidHtml4Id = function(id) {
    return typeof id === "string" && id && /^[A-Za-z][A-Za-z0-9_:\-\.]*$/.test(id);
  };
  /**
 * Create or update an `event` object, based on the `eventType`.
 * @private
 */
  var _createEvent = function(event) {
    var eventType;
    if (typeof event === "string" && event) {
      eventType = event;
      event = {};
    } else if (typeof event === "object" && event && typeof event.type === "string" && event.type) {
      eventType = event.type;
    }
    if (!eventType) {
      return;
    }
    eventType = eventType.toLowerCase();
    if (!event.target && (/^(copy|aftercopy|_click)$/.test(eventType) || eventType === "error" && event.name === "clipboard-error")) {
      event.target = _copyTarget;
    }
    _extend(event, {
      type: eventType,
      target: event.target || _currentElement || null,
      relatedTarget: event.relatedTarget || null,
      currentTarget: _flashState && _flashState.bridge || null,
      timeStamp: event.timeStamp || _now() || null
    });
    var msg = _eventMessages[event.type];
    if (event.type === "error" && event.name && msg) {
      msg = msg[event.name];
    }
    if (msg) {
      event.message = msg;
    }
    if (event.type === "ready") {
      _extend(event, {
        target: null,
        version: _flashState.version
      });
    }
    if (event.type === "error") {
      if (_flashStateErrorNameMatchingRegex.test(event.name)) {
        _extend(event, {
          target: null,
          minimumVersion: _minimumFlashVersion
        });
      }
      if (_flashStateEnabledErrorNameMatchingRegex.test(event.name)) {
        _extend(event, {
          version: _flashState.version
        });
      }
    }
    if (event.type === "copy") {
      event.clipboardData = {
        setData: ZeroClipboard.setData,
        clearData: ZeroClipboard.clearData
      };
    }
    if (event.type === "aftercopy") {
      event = _mapClipResultsFromFlash(event, _clipDataFormatMap);
    }
    if (event.target && !event.relatedTarget) {
      event.relatedTarget = _getRelatedTarget(event.target);
    }
    return _addMouseData(event);
  };
  /**
 * Get a relatedTarget from the target's `data-clipboard-target` attribute
 * @private
 */
  var _getRelatedTarget = function(targetEl) {
    var relatedTargetId = targetEl && targetEl.getAttribute && targetEl.getAttribute("data-clipboard-target");
    return relatedTargetId ? _document.getElementById(relatedTargetId) : null;
  };
  /**
 * Add element and position data to `MouseEvent` instances
 * @private
 */
  var _addMouseData = function(event) {
    if (event && /^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {
      var srcElement = event.target;
      var fromElement = event.type === "_mouseover" && event.relatedTarget ? event.relatedTarget : undefined;
      var toElement = event.type === "_mouseout" && event.relatedTarget ? event.relatedTarget : undefined;
      var pos = _getElementPosition(srcElement);
      var screenLeft = _window.screenLeft || _window.screenX || 0;
      var screenTop = _window.screenTop || _window.screenY || 0;
      var scrollLeft = _document.body.scrollLeft + _document.documentElement.scrollLeft;
      var scrollTop = _document.body.scrollTop + _document.documentElement.scrollTop;
      var pageX = pos.left + (typeof event._stageX === "number" ? event._stageX : 0);
      var pageY = pos.top + (typeof event._stageY === "number" ? event._stageY : 0);
      var clientX = pageX - scrollLeft;
      var clientY = pageY - scrollTop;
      var screenX = screenLeft + clientX;
      var screenY = screenTop + clientY;
      var moveX = typeof event.movementX === "number" ? event.movementX : 0;
      var moveY = typeof event.movementY === "number" ? event.movementY : 0;
      delete event._stageX;
      delete event._stageY;
      _extend(event, {
        srcElement: srcElement,
        fromElement: fromElement,
        toElement: toElement,
        screenX: screenX,
        screenY: screenY,
        pageX: pageX,
        pageY: pageY,
        clientX: clientX,
        clientY: clientY,
        x: clientX,
        y: clientY,
        movementX: moveX,
        movementY: moveY,
        offsetX: 0,
        offsetY: 0,
        layerX: 0,
        layerY: 0
      });
    }
    return event;
  };
  /**
 * Determine if an event's registered handlers should be execute synchronously or asynchronously.
 *
 * @returns {boolean}
 * @private
 */
  var _shouldPerformAsync = function(event) {
    var eventType = event && typeof event.type === "string" && event.type || "";
    return !/^(?:(?:before)?copy|destroy)$/.test(eventType);
  };
  /**
 * Control if a callback should be executed asynchronously or not.
 *
 * @returns `undefined`
 * @private
 */
  var _dispatchCallback = function(func, context, args, async) {
    if (async) {
      _setTimeout(function() {
        func.apply(context, args);
      }, 0);
    } else {
      func.apply(context, args);
    }
  };
  /**
 * Handle the actual dispatching of events to client instances.
 *
 * @returns `undefined`
 * @private
 */
  var _dispatchCallbacks = function(event) {
    if (!(typeof event === "object" && event && event.type)) {
      return;
    }
    var async = _shouldPerformAsync(event);
    var wildcardTypeHandlers = _handlers["*"] || [];
    var specificTypeHandlers = _handlers[event.type] || [];
    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);
    if (handlers && handlers.length) {
      var i, len, func, context, eventCopy, originalContext = this;
      for (i = 0, len = handlers.length; i < len; i++) {
        func = handlers[i];
        context = originalContext;
        if (typeof func === "string" && typeof _window[func] === "function") {
          func = _window[func];
        }
        if (typeof func === "object" && func && typeof func.handleEvent === "function") {
          context = func;
          func = func.handleEvent;
        }
        if (typeof func === "function") {
          eventCopy = _extend({}, event);
          _dispatchCallback(func, context, [ eventCopy ], async);
        }
      }
    }
    return this;
  };
  /**
 * Check an `error` event's `name` property to see if Flash has
 * already loaded, which rules out possible `iframe` sandboxing.
 * @private
 */
  var _getSandboxStatusFromErrorEvent = function(event) {
    var isSandboxed = null;
    if (_pageIsFramed === false || event && event.type === "error" && event.name && _errorsThatOnlyOccurAfterFlashLoads.indexOf(event.name) !== -1) {
      isSandboxed = false;
    }
    return isSandboxed;
  };
  /**
 * Preprocess any special behaviors, reactions, or state changes after receiving this event.
 * Executes only once per event emitted, NOT once per client.
 * @private
 */
  var _preprocessEvent = function(event) {
    var element = event.target || _currentElement || null;
    var sourceIsSwf = event._source === "swf";
    delete event._source;
    switch (event.type) {
     case "error":
      var isSandboxed = event.name === "flash-sandboxed" || _getSandboxStatusFromErrorEvent(event);
      if (typeof isSandboxed === "boolean") {
        _flashState.sandboxed = isSandboxed;
      }
      if (_flashStateErrorNames.indexOf(event.name) !== -1) {
        _extend(_flashState, {
          disabled: event.name === "flash-disabled",
          outdated: event.name === "flash-outdated",
          unavailable: event.name === "flash-unavailable",
          degraded: event.name === "flash-degraded",
          deactivated: event.name === "flash-deactivated",
          overdue: event.name === "flash-overdue",
          ready: false
        });
      } else if (event.name === "version-mismatch") {
        _zcSwfVersion = event.swfVersion;
        _extend(_flashState, {
          disabled: false,
          outdated: false,
          unavailable: false,
          degraded: false,
          deactivated: false,
          overdue: false,
          ready: false
        });
      }
      _clearTimeoutsAndPolling();
      break;

     case "ready":
      _zcSwfVersion = event.swfVersion;
      var wasDeactivated = _flashState.deactivated === true;
      _extend(_flashState, {
        disabled: false,
        outdated: false,
        sandboxed: false,
        unavailable: false,
        degraded: false,
        deactivated: false,
        overdue: wasDeactivated,
        ready: !wasDeactivated
      });
      _clearTimeoutsAndPolling();
      break;

     case "beforecopy":
      _copyTarget = element;
      break;

     case "copy":
      var textContent, htmlContent, targetEl = event.relatedTarget;
      if (!(_clipData["text/html"] || _clipData["text/plain"]) && targetEl && (htmlContent = targetEl.value || targetEl.outerHTML || targetEl.innerHTML) && (textContent = targetEl.value || targetEl.textContent || targetEl.innerText)) {
        event.clipboardData.clearData();
        event.clipboardData.setData("text/plain", textContent);
        if (htmlContent !== textContent) {
          event.clipboardData.setData("text/html", htmlContent);
        }
      } else if (!_clipData["text/plain"] && event.target && (textContent = event.target.getAttribute("data-clipboard-text"))) {
        event.clipboardData.clearData();
        event.clipboardData.setData("text/plain", textContent);
      }
      break;

     case "aftercopy":
      _queueEmitClipboardErrors(event);
      ZeroClipboard.clearData();
      if (element && element !== _safeActiveElement() && element.focus) {
        element.focus();
      }
      break;

     case "_mouseover":
      ZeroClipboard.focus(element);
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {
          _fireMouseEvent(_extend({}, event, {
            type: "mouseenter",
            bubbles: false,
            cancelable: false
          }));
        }
        _fireMouseEvent(_extend({}, event, {
          type: "mouseover"
        }));
      }
      break;

     case "_mouseout":
      ZeroClipboard.blur();
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        if (element && element !== event.relatedTarget && !_containedBy(event.relatedTarget, element)) {
          _fireMouseEvent(_extend({}, event, {
            type: "mouseleave",
            bubbles: false,
            cancelable: false
          }));
        }
        _fireMouseEvent(_extend({}, event, {
          type: "mouseout"
        }));
      }
      break;

     case "_mousedown":
      _addClass(element, _globalConfig.activeClass);
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        _fireMouseEvent(_extend({}, event, {
          type: event.type.slice(1)
        }));
      }
      break;

     case "_mouseup":
      _removeClass(element, _globalConfig.activeClass);
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        _fireMouseEvent(_extend({}, event, {
          type: event.type.slice(1)
        }));
      }
      break;

     case "_click":
      _copyTarget = null;
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        _fireMouseEvent(_extend({}, event, {
          type: event.type.slice(1)
        }));
      }
      break;

     case "_mousemove":
      if (_globalConfig.bubbleEvents === true && sourceIsSwf) {
        _fireMouseEvent(_extend({}, event, {
          type: event.type.slice(1)
        }));
      }
      break;
    }
    if (/^_(?:click|mouse(?:over|out|down|up|move))$/.test(event.type)) {
      return true;
    }
  };
  /**
 * Check an "aftercopy" event for clipboard errors and emit a corresponding "error" event.
 * @private
 */
  var _queueEmitClipboardErrors = function(aftercopyEvent) {
    if (aftercopyEvent.errors && aftercopyEvent.errors.length > 0) {
      var errorEvent = _deepCopy(aftercopyEvent);
      _extend(errorEvent, {
        type: "error",
        name: "clipboard-error"
      });
      delete errorEvent.success;
      _setTimeout(function() {
        ZeroClipboard.emit(errorEvent);
      }, 0);
    }
  };
  /**
 * Dispatch a synthetic MouseEvent.
 *
 * @returns `undefined`
 * @private
 */
  var _fireMouseEvent = function(event) {
    if (!(event && typeof event.type === "string" && event)) {
      return;
    }
    var e, target = event.target || null, doc = target && target.ownerDocument || _document, defaults = {
      view: doc.defaultView || _window,
      canBubble: true,
      cancelable: true,
      detail: event.type === "click" ? 1 : 0,
      button: typeof event.which === "number" ? event.which - 1 : typeof event.button === "number" ? event.button : doc.createEvent ? 0 : 1
    }, args = _extend(defaults, event);
    if (!target) {
      return;
    }
    if (doc.createEvent && target.dispatchEvent) {
      args = [ args.type, args.canBubble, args.cancelable, args.view, args.detail, args.screenX, args.screenY, args.clientX, args.clientY, args.ctrlKey, args.altKey, args.shiftKey, args.metaKey, args.button, args.relatedTarget ];
      e = doc.createEvent("MouseEvents");
      if (e.initMouseEvent) {
        e.initMouseEvent.apply(e, args);
        e._source = "js";
        target.dispatchEvent(e);
      }
    }
  };
  /**
 * Continuously poll the DOM until either:
 *  (a) the fallback content becomes visible, or
 *  (b) we receive an event from SWF (handled elsewhere)
 *
 * IMPORTANT:
 * This is NOT a necessary check but it can result in significantly faster
 * detection of bad `swfPath` configuration and/or network/server issues [in
 * supported browsers] than waiting for the entire `flashLoadTimeout` duration
 * to elapse before detecting that the SWF cannot be loaded. The detection
 * duration can be anywhere from 10-30 times faster [in supported browsers] by
 * using this approach.
 *
 * @returns `undefined`
 * @private
 */
  var _watchForSwfFallbackContent = function() {
    var maxWait = _globalConfig.flashLoadTimeout;
    if (typeof maxWait === "number" && maxWait >= 0) {
      var pollWait = Math.min(1e3, maxWait / 10);
      var fallbackContentId = _globalConfig.swfObjectId + "_fallbackContent";
      _swfFallbackCheckInterval = _setInterval(function() {
        var el = _document.getElementById(fallbackContentId);
        if (_isElementVisible(el)) {
          _clearTimeoutsAndPolling();
          _flashState.deactivated = null;
          ZeroClipboard.emit({
            type: "error",
            name: "swf-not-found"
          });
        }
      }, pollWait);
    }
  };
  /**
 * Create the HTML bridge element to embed the Flash object into.
 * @private
 */
  var _createHtmlBridge = function() {
    var container = _document.createElement("div");
    container.id = _globalConfig.containerId;
    container.className = _globalConfig.containerClass;
    container.style.position = "absolute";
    container.style.left = "0px";
    container.style.top = "-9999px";
    container.style.width = "1px";
    container.style.height = "1px";
    container.style.zIndex = "" + _getSafeZIndex(_globalConfig.zIndex);
    return container;
  };
  /**
 * Get the HTML element container that wraps the Flash bridge object/element.
 * @private
 */
  var _getHtmlBridge = function(flashBridge) {
    var htmlBridge = flashBridge && flashBridge.parentNode;
    while (htmlBridge && htmlBridge.nodeName === "OBJECT" && htmlBridge.parentNode) {
      htmlBridge = htmlBridge.parentNode;
    }
    return htmlBridge || null;
  };
  /**
 * Create the SWF object.
 *
 * @returns The SWF object reference.
 * @private
 */
  var _embedSwf = function() {
    var len, flashBridge = _flashState.bridge, container = _getHtmlBridge(flashBridge);
    if (!flashBridge) {
      var allowScriptAccess = _determineScriptAccess(_window.location.host, _globalConfig);
      var allowNetworking = allowScriptAccess === "never" ? "none" : "all";
      var flashvars = _vars(_extend({
        jsVersion: ZeroClipboard.version
      }, _globalConfig));
      var swfUrl = _globalConfig.swfPath + _cacheBust(_globalConfig.swfPath, _globalConfig);
      container = _createHtmlBridge();
      var divToBeReplaced = _document.createElement("div");
      container.appendChild(divToBeReplaced);
      _document.body.appendChild(container);
      var tmpDiv = _document.createElement("div");
      var usingActiveX = _flashState.pluginType === "activex";
      tmpDiv.innerHTML = '<object id="' + _globalConfig.swfObjectId + '" name="' + _globalConfig.swfObjectId + '" ' + 'width="100%" height="100%" ' + (usingActiveX ? 'classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"' : 'type="application/x-shockwave-flash" data="' + swfUrl + '"') + ">" + (usingActiveX ? '<param name="movie" value="' + swfUrl + '"/>' : "") + '<param name="allowScriptAccess" value="' + allowScriptAccess + '"/>' + '<param name="allowNetworking" value="' + allowNetworking + '"/>' + '<param name="menu" value="false"/>' + '<param name="wmode" value="transparent"/>' + '<param name="flashvars" value="' + flashvars + '"/>' + '<div id="' + _globalConfig.swfObjectId + '_fallbackContent">&nbsp;</div>' + "</object>";
      flashBridge = tmpDiv.firstChild;
      tmpDiv = null;
      _unwrap(flashBridge).ZeroClipboard = ZeroClipboard;
      container.replaceChild(flashBridge, divToBeReplaced);
      _watchForSwfFallbackContent();
    }
    if (!flashBridge) {
      flashBridge = _document[_globalConfig.swfObjectId];
      if (flashBridge && (len = flashBridge.length)) {
        flashBridge = flashBridge[len - 1];
      }
      if (!flashBridge && container) {
        flashBridge = container.firstChild;
      }
    }
    _flashState.bridge = flashBridge || null;
    return flashBridge;
  };
  /**
 * Destroy the SWF object.
 * @private
 */
  var _unembedSwf = function() {
    var flashBridge = _flashState.bridge;
    if (flashBridge) {
      var htmlBridge = _getHtmlBridge(flashBridge);
      if (htmlBridge) {
        if (_flashState.pluginType === "activex" && "readyState" in flashBridge) {
          flashBridge.style.display = "none";
          (function removeSwfFromIE() {
            if (flashBridge.readyState === 4) {
              for (var prop in flashBridge) {
                if (typeof flashBridge[prop] === "function") {
                  flashBridge[prop] = null;
                }
              }
              if (flashBridge.parentNode) {
                flashBridge.parentNode.removeChild(flashBridge);
              }
              if (htmlBridge.parentNode) {
                htmlBridge.parentNode.removeChild(htmlBridge);
              }
            } else {
              _setTimeout(removeSwfFromIE, 10);
            }
          })();
        } else {
          if (flashBridge.parentNode) {
            flashBridge.parentNode.removeChild(flashBridge);
          }
          if (htmlBridge.parentNode) {
            htmlBridge.parentNode.removeChild(htmlBridge);
          }
        }
      }
      _clearTimeoutsAndPolling();
      _flashState.ready = null;
      _flashState.bridge = null;
      _flashState.deactivated = null;
      _zcSwfVersion = undefined;
    }
  };
  /**
 * Map the data format names of the "clipData" to Flash-friendly names.
 *
 * @returns A new transformed object.
 * @private
 */
  var _mapClipDataToFlash = function(clipData) {
    var newClipData = {}, formatMap = {};
    if (!(typeof clipData === "object" && clipData)) {
      return;
    }
    for (var dataFormat in clipData) {
      if (dataFormat && _hasOwn.call(clipData, dataFormat) && typeof clipData[dataFormat] === "string" && clipData[dataFormat]) {
        switch (dataFormat.toLowerCase()) {
         case "text/plain":
         case "text":
         case "air:text":
         case "flash:text":
          newClipData.text = clipData[dataFormat];
          formatMap.text = dataFormat;
          break;

         case "text/html":
         case "html":
         case "air:html":
         case "flash:html":
          newClipData.html = clipData[dataFormat];
          formatMap.html = dataFormat;
          break;

         case "application/rtf":
         case "text/rtf":
         case "rtf":
         case "richtext":
         case "air:rtf":
         case "flash:rtf":
          newClipData.rtf = clipData[dataFormat];
          formatMap.rtf = dataFormat;
          break;

         default:
          break;
        }
      }
    }
    return {
      data: newClipData,
      formatMap: formatMap
    };
  };
  /**
 * Map the data format names from Flash-friendly names back to their original "clipData" names (via a format mapping).
 *
 * @returns A new transformed object.
 * @private
 */
  var _mapClipResultsFromFlash = function(clipResults, formatMap) {
    if (!(typeof clipResults === "object" && clipResults && typeof formatMap === "object" && formatMap)) {
      return clipResults;
    }
    var newResults = {};
    for (var prop in clipResults) {
      if (_hasOwn.call(clipResults, prop)) {
        if (prop === "errors") {
          newResults[prop] = clipResults[prop] ? clipResults[prop].slice() : [];
          for (var i = 0, len = newResults[prop].length; i < len; i++) {
            newResults[prop][i].format = formatMap[newResults[prop][i].format];
          }
        } else if (prop !== "success" && prop !== "data") {
          newResults[prop] = clipResults[prop];
        } else {
          newResults[prop] = {};
          var tmpHash = clipResults[prop];
          for (var dataFormat in tmpHash) {
            if (dataFormat && _hasOwn.call(tmpHash, dataFormat) && _hasOwn.call(formatMap, dataFormat)) {
              newResults[prop][formatMap[dataFormat]] = tmpHash[dataFormat];
            }
          }
        }
      }
    }
    return newResults;
  };
  /**
 * Will look at a path, and will create a "?noCache={time}" or "&noCache={time}"
 * query param string to return. Does NOT append that string to the original path.
 * This is useful because ExternalInterface often breaks when a Flash SWF is cached.
 *
 * @returns The `noCache` query param with necessary "?"/"&" prefix.
 * @private
 */
  var _cacheBust = function(path, options) {
    var cacheBust = options == null || options && options.cacheBust === true;
    if (cacheBust) {
      return (path.indexOf("?") === -1 ? "?" : "&") + "noCache=" + _now();
    } else {
      return "";
    }
  };
  /**
 * Creates a query string for the FlashVars param.
 * Does NOT include the cache-busting query param.
 *
 * @returns FlashVars query string
 * @private
 */
  var _vars = function(options) {
    var i, len, domain, domains, str = "", trustedOriginsExpanded = [];
    if (options.trustedDomains) {
      if (typeof options.trustedDomains === "string") {
        domains = [ options.trustedDomains ];
      } else if (typeof options.trustedDomains === "object" && "length" in options.trustedDomains) {
        domains = options.trustedDomains;
      }
    }
    if (domains && domains.length) {
      for (i = 0, len = domains.length; i < len; i++) {
        if (_hasOwn.call(domains, i) && domains[i] && typeof domains[i] === "string") {
          domain = _extractDomain(domains[i]);
          if (!domain) {
            continue;
          }
          if (domain === "*") {
            trustedOriginsExpanded.length = 0;
            trustedOriginsExpanded.push(domain);
            break;
          }
          trustedOriginsExpanded.push.apply(trustedOriginsExpanded, [ domain, "//" + domain, _window.location.protocol + "//" + domain ]);
        }
      }
    }
    if (trustedOriginsExpanded.length) {
      str += "trustedOrigins=" + _encodeURIComponent(trustedOriginsExpanded.join(","));
    }
    if (options.forceEnhancedClipboard === true) {
      str += (str ? "&" : "") + "forceEnhancedClipboard=true";
    }
    if (typeof options.swfObjectId === "string" && options.swfObjectId) {
      str += (str ? "&" : "") + "swfObjectId=" + _encodeURIComponent(options.swfObjectId);
    }
    if (typeof options.jsVersion === "string" && options.jsVersion) {
      str += (str ? "&" : "") + "jsVersion=" + _encodeURIComponent(options.jsVersion);
    }
    return str;
  };
  /**
 * Extract the domain (e.g. "github.com") from an origin (e.g. "https://github.com") or
 * URL (e.g. "https://github.com/zeroclipboard/zeroclipboard/").
 *
 * @returns the domain
 * @private
 */
  var _extractDomain = function(originOrUrl) {
    if (originOrUrl == null || originOrUrl === "") {
      return null;
    }
    originOrUrl = originOrUrl.replace(/^\s+|\s+$/g, "");
    if (originOrUrl === "") {
      return null;
    }
    var protocolIndex = originOrUrl.indexOf("//");
    originOrUrl = protocolIndex === -1 ? originOrUrl : originOrUrl.slice(protocolIndex + 2);
    var pathIndex = originOrUrl.indexOf("/");
    originOrUrl = pathIndex === -1 ? originOrUrl : protocolIndex === -1 || pathIndex === 0 ? null : originOrUrl.slice(0, pathIndex);
    if (originOrUrl && originOrUrl.slice(-4).toLowerCase() === ".swf") {
      return null;
    }
    return originOrUrl || null;
  };
  /**
 * Set `allowScriptAccess` based on `trustedDomains` and `window.location.host` vs. `swfPath`.
 *
 * @returns The appropriate script access level.
 * @private
 */
  var _determineScriptAccess = function() {
    var _extractAllDomains = function(origins) {
      var i, len, tmp, resultsArray = [];
      if (typeof origins === "string") {
        origins = [ origins ];
      }
      if (!(typeof origins === "object" && origins && typeof origins.length === "number")) {
        return resultsArray;
      }
      for (i = 0, len = origins.length; i < len; i++) {
        if (_hasOwn.call(origins, i) && (tmp = _extractDomain(origins[i]))) {
          if (tmp === "*") {
            resultsArray.length = 0;
            resultsArray.push("*");
            break;
          }
          if (resultsArray.indexOf(tmp) === -1) {
            resultsArray.push(tmp);
          }
        }
      }
      return resultsArray;
    };
    return function(currentDomain, configOptions) {
      var swfDomain = _extractDomain(configOptions.swfPath);
      if (swfDomain === null) {
        swfDomain = currentDomain;
      }
      var trustedDomains = _extractAllDomains(configOptions.trustedDomains);
      var len = trustedDomains.length;
      if (len > 0) {
        if (len === 1 && trustedDomains[0] === "*") {
          return "always";
        }
        if (trustedDomains.indexOf(currentDomain) !== -1) {
          if (len === 1 && currentDomain === swfDomain) {
            return "sameDomain";
          }
          return "always";
        }
      }
      return "never";
    };
  }();
  /**
 * Get the currently active/focused DOM element.
 *
 * @returns the currently active/focused element, or `null`
 * @private
 */
  var _safeActiveElement = function() {
    try {
      return _document.activeElement;
    } catch (err) {
      return null;
    }
  };
  /**
 * Add a class to an element, if it doesn't already have it.
 *
 * @returns The element, with its new class added.
 * @private
 */
  var _addClass = function(element, value) {
    var c, cl, className, classNames = [];
    if (typeof value === "string" && value) {
      classNames = value.split(/\s+/);
    }
    if (element && element.nodeType === 1 && classNames.length > 0) {
      if (element.classList) {
        for (c = 0, cl = classNames.length; c < cl; c++) {
          element.classList.add(classNames[c]);
        }
      } else if (element.hasOwnProperty("className")) {
        className = " " + element.className + " ";
        for (c = 0, cl = classNames.length; c < cl; c++) {
          if (className.indexOf(" " + classNames[c] + " ") === -1) {
            className += classNames[c] + " ";
          }
        }
        element.className = className.replace(/^\s+|\s+$/g, "");
      }
    }
    return element;
  };
  /**
 * Remove a class from an element, if it has it.
 *
 * @returns The element, with its class removed.
 * @private
 */
  var _removeClass = function(element, value) {
    var c, cl, className, classNames = [];
    if (typeof value === "string" && value) {
      classNames = value.split(/\s+/);
    }
    if (element && element.nodeType === 1 && classNames.length > 0) {
      if (element.classList && element.classList.length > 0) {
        for (c = 0, cl = classNames.length; c < cl; c++) {
          element.classList.remove(classNames[c]);
        }
      } else if (element.className) {
        className = (" " + element.className + " ").replace(/[\r\n\t]/g, " ");
        for (c = 0, cl = classNames.length; c < cl; c++) {
          className = className.replace(" " + classNames[c] + " ", " ");
        }
        element.className = className.replace(/^\s+|\s+$/g, "");
      }
    }
    return element;
  };
  /**
 * Attempt to interpret the element's CSS styling. If `prop` is `"cursor"`,
 * then we assume that it should be a hand ("pointer") cursor if the element
 * is an anchor element ("a" tag).
 *
 * @returns The computed style property.
 * @private
 */
  var _getStyle = function(el, prop) {
    var value = _getComputedStyle(el, null).getPropertyValue(prop);
    if (prop === "cursor") {
      if (!value || value === "auto") {
        if (el.nodeName === "A") {
          return "pointer";
        }
      }
    }
    return value;
  };
  /**
 * Get the absolutely positioned coordinates of a DOM element.
 *
 * @returns Object containing the element's position, width, and height.
 * @private
 */
  var _getElementPosition = function(el) {
    var pos = {
      left: 0,
      top: 0,
      width: 0,
      height: 0
    };
    if (el.getBoundingClientRect) {
      var elRect = el.getBoundingClientRect();
      var pageXOffset = _window.pageXOffset;
      var pageYOffset = _window.pageYOffset;
      var leftBorderWidth = _document.documentElement.clientLeft || 0;
      var topBorderWidth = _document.documentElement.clientTop || 0;
      var leftBodyOffset = 0;
      var topBodyOffset = 0;
      if (_getStyle(_document.body, "position") === "relative") {
        var bodyRect = _document.body.getBoundingClientRect();
        var htmlRect = _document.documentElement.getBoundingClientRect();
        leftBodyOffset = bodyRect.left - htmlRect.left || 0;
        topBodyOffset = bodyRect.top - htmlRect.top || 0;
      }
      pos.left = elRect.left + pageXOffset - leftBorderWidth - leftBodyOffset;
      pos.top = elRect.top + pageYOffset - topBorderWidth - topBodyOffset;
      pos.width = "width" in elRect ? elRect.width : elRect.right - elRect.left;
      pos.height = "height" in elRect ? elRect.height : elRect.bottom - elRect.top;
    }
    return pos;
  };
  /**
 * Determine is an element is visible somewhere within the document (page).
 *
 * @returns Boolean
 * @private
 */
  var _isElementVisible = function(el) {
    if (!el) {
      return false;
    }
    var styles = _getComputedStyle(el, null);
    var hasCssHeight = _parseFloat(styles.height) > 0;
    var hasCssWidth = _parseFloat(styles.width) > 0;
    var hasCssTop = _parseFloat(styles.top) >= 0;
    var hasCssLeft = _parseFloat(styles.left) >= 0;
    var cssKnows = hasCssHeight && hasCssWidth && hasCssTop && hasCssLeft;
    var rect = cssKnows ? null : _getElementPosition(el);
    var isVisible = styles.display !== "none" && styles.visibility !== "collapse" && (cssKnows || !!rect && (hasCssHeight || rect.height > 0) && (hasCssWidth || rect.width > 0) && (hasCssTop || rect.top >= 0) && (hasCssLeft || rect.left >= 0));
    return isVisible;
  };
  /**
 * Clear all existing timeouts and interval polling delegates.
 *
 * @returns `undefined`
 * @private
 */
  var _clearTimeoutsAndPolling = function() {
    _clearTimeout(_flashCheckTimeout);
    _flashCheckTimeout = 0;
    _clearInterval(_swfFallbackCheckInterval);
    _swfFallbackCheckInterval = 0;
  };
  /**
 * Reposition the Flash object to cover the currently activated element.
 *
 * @returns `undefined`
 * @private
 */
  var _reposition = function() {
    var htmlBridge;
    if (_currentElement && (htmlBridge = _getHtmlBridge(_flashState.bridge))) {
      var pos = _getElementPosition(_currentElement);
      _extend(htmlBridge.style, {
        width: pos.width + "px",
        height: pos.height + "px",
        top: pos.top + "px",
        left: pos.left + "px",
        zIndex: "" + _getSafeZIndex(_globalConfig.zIndex)
      });
    }
  };
  /**
 * Sends a signal to the Flash object to display the hand cursor if `true`.
 *
 * @returns `undefined`
 * @private
 */
  var _setHandCursor = function(enabled) {
    if (_flashState.ready === true) {
      if (_flashState.bridge && typeof _flashState.bridge.setHandCursor === "function") {
        _flashState.bridge.setHandCursor(enabled);
      } else {
        _flashState.ready = false;
      }
    }
  };
  /**
 * Get a safe value for `zIndex`
 *
 * @returns an integer, or "auto"
 * @private
 */
  var _getSafeZIndex = function(val) {
    if (/^(?:auto|inherit)$/.test(val)) {
      return val;
    }
    var zIndex;
    if (typeof val === "number" && !_isNaN(val)) {
      zIndex = val;
    } else if (typeof val === "string") {
      zIndex = _getSafeZIndex(_parseInt(val, 10));
    }
    return typeof zIndex === "number" ? zIndex : "auto";
  };
  /**
 * Attempt to detect if ZeroClipboard is executing inside of a sandboxed iframe.
 * If it is, Flash Player cannot be used, so ZeroClipboard is dead in the water.
 *
 * @see {@link http://lists.w3.org/Archives/Public/public-whatwg-archive/2014Dec/0002.html}
 * @see {@link https://github.com/zeroclipboard/zeroclipboard/issues/511}
 * @see {@link http://zeroclipboard.org/test-iframes.html}
 *
 * @returns `true` (is sandboxed), `false` (is not sandboxed), or `null` (uncertain) 
 * @private
 */
  var _detectSandbox = function(doNotReassessFlashSupport) {
    var effectiveScriptOrigin, frame, frameError, previousState = _flashState.sandboxed, isSandboxed = null;
    doNotReassessFlashSupport = doNotReassessFlashSupport === true;
    if (_pageIsFramed === false) {
      isSandboxed = false;
    } else {
      try {
        frame = window.frameElement || null;
      } catch (e) {
        frameError = {
          name: e.name,
          message: e.message
        };
      }
      if (frame && frame.nodeType === 1 && frame.nodeName === "IFRAME") {
        try {
          isSandboxed = frame.hasAttribute("sandbox");
        } catch (e) {
          isSandboxed = null;
        }
      } else {
        try {
          effectiveScriptOrigin = document.domain || null;
        } catch (e) {
          effectiveScriptOrigin = null;
        }
        if (effectiveScriptOrigin === null || frameError && frameError.name === "SecurityError" && /(^|[\s\(\[@])sandbox(es|ed|ing|[\s\.,!\)\]@]|$)/.test(frameError.message.toLowerCase())) {
          isSandboxed = true;
        }
      }
    }
    _flashState.sandboxed = isSandboxed;
    if (previousState !== isSandboxed && !doNotReassessFlashSupport) {
      _detectFlashSupport(_ActiveXObject);
    }
    return isSandboxed;
  };
  /**
 * Detect the Flash Player status, version, and plugin type.
 *
 * @see {@link https://code.google.com/p/doctype-mirror/wiki/ArticleDetectFlash#The_code}
 * @see {@link http://stackoverflow.com/questions/12866060/detecting-pepper-ppapi-flash-with-javascript}
 *
 * @returns `undefined`
 * @private
 */
  var _detectFlashSupport = function(ActiveXObject) {
    var plugin, ax, mimeType, hasFlash = false, isActiveX = false, isPPAPI = false, flashVersion = "";
    /**
   * Derived from Apple's suggested sniffer.
   * @param {String} desc e.g. "Shockwave Flash 7.0 r61"
   * @returns {String} "7.0.61"
   * @private
   */
    function parseFlashVersion(desc) {
      var matches = desc.match(/[\d]+/g);
      matches.length = 3;
      return matches.join(".");
    }
    function isPepperFlash(flashPlayerFileName) {
      return !!flashPlayerFileName && (flashPlayerFileName = flashPlayerFileName.toLowerCase()) && (/^(pepflashplayer\.dll|libpepflashplayer\.so|pepperflashplayer\.plugin)$/.test(flashPlayerFileName) || flashPlayerFileName.slice(-13) === "chrome.plugin");
    }
    function inspectPlugin(plugin) {
      if (plugin) {
        hasFlash = true;
        if (plugin.version) {
          flashVersion = parseFlashVersion(plugin.version);
        }
        if (!flashVersion && plugin.description) {
          flashVersion = parseFlashVersion(plugin.description);
        }
        if (plugin.filename) {
          isPPAPI = isPepperFlash(plugin.filename);
        }
      }
    }
    if (_navigator.plugins && _navigator.plugins.length) {
      plugin = _navigator.plugins["Shockwave Flash"];
      inspectPlugin(plugin);
      if (_navigator.plugins["Shockwave Flash 2.0"]) {
        hasFlash = true;
        flashVersion = "2.0.0.11";
      }
    } else if (_navigator.mimeTypes && _navigator.mimeTypes.length) {
      mimeType = _navigator.mimeTypes["application/x-shockwave-flash"];
      plugin = mimeType && mimeType.enabledPlugin;
      inspectPlugin(plugin);
    } else if (typeof ActiveXObject !== "undefined") {
      isActiveX = true;
      try {
        ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.7");
        hasFlash = true;
        flashVersion = parseFlashVersion(ax.GetVariable("$version"));
      } catch (e1) {
        try {
          ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash.6");
          hasFlash = true;
          flashVersion = "6.0.21";
        } catch (e2) {
          try {
            ax = new ActiveXObject("ShockwaveFlash.ShockwaveFlash");
            hasFlash = true;
            flashVersion = parseFlashVersion(ax.GetVariable("$version"));
          } catch (e3) {
            isActiveX = false;
          }
        }
      }
    }
    _flashState.disabled = hasFlash !== true;
    _flashState.outdated = flashVersion && _parseFloat(flashVersion) < _parseFloat(_minimumFlashVersion);
    _flashState.version = flashVersion || "0.0.0";
    _flashState.pluginType = isPPAPI ? "pepper" : isActiveX ? "activex" : hasFlash ? "netscape" : "unknown";
  };
  /**
 * Invoke the Flash detection algorithms immediately upon inclusion so we're not waiting later.
 */
  _detectFlashSupport(_ActiveXObject);
  /**
 * Always assess the `sandboxed` state of the page at important Flash-related moments.
 */
  _detectSandbox(true);
  /**
 * A shell constructor for `ZeroClipboard` client instances.
 *
 * @constructor
 */
  var ZeroClipboard = function() {
    if (!(this instanceof ZeroClipboard)) {
      return new ZeroClipboard();
    }
    if (typeof ZeroClipboard._createClient === "function") {
      ZeroClipboard._createClient.apply(this, _args(arguments));
    }
  };
  /**
 * The ZeroClipboard library's version number.
 *
 * @static
 * @readonly
 * @property {string}
 */
  _defineProperty(ZeroClipboard, "version", {
    value: "2.2.0",
    writable: false,
    configurable: true,
    enumerable: true
  });
  /**
 * Update or get a copy of the ZeroClipboard global configuration.
 * Returns a copy of the current/updated configuration.
 *
 * @returns Object
 * @static
 */
  ZeroClipboard.config = function() {
    return _config.apply(this, _args(arguments));
  };
  /**
 * Diagnostic method that describes the state of the browser, Flash Player, and ZeroClipboard.
 *
 * @returns Object
 * @static
 */
  ZeroClipboard.state = function() {
    return _state.apply(this, _args(arguments));
  };
  /**
 * Check if Flash is unusable for any reason: disabled, outdated, deactivated, etc.
 *
 * @returns Boolean
 * @static
 */
  ZeroClipboard.isFlashUnusable = function() {
    return _isFlashUnusable.apply(this, _args(arguments));
  };
  /**
 * Register an event listener.
 *
 * @returns `ZeroClipboard`
 * @static
 */
  ZeroClipboard.on = function() {
    return _on.apply(this, _args(arguments));
  };
  /**
 * Unregister an event listener.
 * If no `listener` function/object is provided, it will unregister all listeners for the provided `eventType`.
 * If no `eventType` is provided, it will unregister all listeners for every event type.
 *
 * @returns `ZeroClipboard`
 * @static
 */
  ZeroClipboard.off = function() {
    return _off.apply(this, _args(arguments));
  };
  /**
 * Retrieve event listeners for an `eventType`.
 * If no `eventType` is provided, it will retrieve all listeners for every event type.
 *
 * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`
 */
  ZeroClipboard.handlers = function() {
    return _listeners.apply(this, _args(arguments));
  };
  /**
 * Event emission receiver from the Flash object, forwarding to any registered JavaScript event listeners.
 *
 * @returns For the "copy" event, returns the Flash-friendly "clipData" object; otherwise `undefined`.
 * @static
 */
  ZeroClipboard.emit = function() {
    return _emit.apply(this, _args(arguments));
  };
  /**
 * Create and embed the Flash object.
 *
 * @returns The Flash object
 * @static
 */
  ZeroClipboard.create = function() {
    return _create.apply(this, _args(arguments));
  };
  /**
 * Self-destruct and clean up everything, including the embedded Flash object.
 *
 * @returns `undefined`
 * @static
 */
  ZeroClipboard.destroy = function() {
    return _destroy.apply(this, _args(arguments));
  };
  /**
 * Set the pending data for clipboard injection.
 *
 * @returns `undefined`
 * @static
 */
  ZeroClipboard.setData = function() {
    return _setData.apply(this, _args(arguments));
  };
  /**
 * Clear the pending data for clipboard injection.
 * If no `format` is provided, all pending data formats will be cleared.
 *
 * @returns `undefined`
 * @static
 */
  ZeroClipboard.clearData = function() {
    return _clearData.apply(this, _args(arguments));
  };
  /**
 * Get a copy of the pending data for clipboard injection.
 * If no `format` is provided, a copy of ALL pending data formats will be returned.
 *
 * @returns `String` or `Object`
 * @static
 */
  ZeroClipboard.getData = function() {
    return _getData.apply(this, _args(arguments));
  };
  /**
 * Sets the current HTML object that the Flash object should overlay. This will put the global
 * Flash object on top of the current element; depending on the setup, this may also set the
 * pending clipboard text data as well as the Flash object's wrapping element's title attribute
 * based on the underlying HTML element and ZeroClipboard configuration.
 *
 * @returns `undefined`
 * @static
 */
  ZeroClipboard.focus = ZeroClipboard.activate = function() {
    return _focus.apply(this, _args(arguments));
  };
  /**
 * Un-overlays the Flash object. This will put the global Flash object off-screen; depending on
 * the setup, this may also unset the Flash object's wrapping element's title attribute based on
 * the underlying HTML element and ZeroClipboard configuration.
 *
 * @returns `undefined`
 * @static
 */
  ZeroClipboard.blur = ZeroClipboard.deactivate = function() {
    return _blur.apply(this, _args(arguments));
  };
  /**
 * Returns the currently focused/"activated" HTML element that the Flash object is wrapping.
 *
 * @returns `HTMLElement` or `null`
 * @static
 */
  ZeroClipboard.activeElement = function() {
    return _activeElement.apply(this, _args(arguments));
  };
  /**
 * Keep track of the ZeroClipboard client instance counter.
 */
  var _clientIdCounter = 0;
  /**
 * Keep track of the state of the client instances.
 *
 * Entry structure:
 *   _clientMeta[client.id] = {
 *     instance: client,
 *     elements: [],
 *     handlers: {}
 *   };
 */
  var _clientMeta = {};
  /**
 * Keep track of the ZeroClipboard clipped elements counter.
 */
  var _elementIdCounter = 0;
  /**
 * Keep track of the state of the clipped element relationships to clients.
 *
 * Entry structure:
 *   _elementMeta[element.zcClippingId] = [client1.id, client2.id];
 */
  var _elementMeta = {};
  /**
 * Keep track of the state of the mouse event handlers for clipped elements.
 *
 * Entry structure:
 *   _mouseHandlers[element.zcClippingId] = {
 *     mouseover:  function(event) {},
 *     mouseout:   function(event) {},
 *     mouseenter: function(event) {},
 *     mouseleave: function(event) {},
 *     mousemove:  function(event) {}
 *   };
 */
  var _mouseHandlers = {};
  /**
 * Extending the ZeroClipboard configuration defaults for the Client module.
 */
  _extend(_globalConfig, {
    autoActivate: true
  });
  /**
 * The real constructor for `ZeroClipboard` client instances.
 * @private
 */
  var _clientConstructor = function(elements) {
    var client = this;
    client.id = "" + _clientIdCounter++;
    _clientMeta[client.id] = {
      instance: client,
      elements: [],
      handlers: {}
    };
    if (elements) {
      client.clip(elements);
    }
    ZeroClipboard.on("*", function(event) {
      return client.emit(event);
    });
    ZeroClipboard.on("destroy", function() {
      client.destroy();
    });
    ZeroClipboard.create();
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.on`.
 * @private
 */
  var _clientOn = function(eventType, listener) {
    var i, len, events, added = {}, meta = _clientMeta[this.id], handlers = meta && meta.handlers;
    if (!meta) {
      throw new Error("Attempted to add new listener(s) to a destroyed ZeroClipboard client instance");
    }
    if (typeof eventType === "string" && eventType) {
      events = eventType.toLowerCase().split(/\s+/);
    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
      for (i in eventType) {
        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
          this.on(i, eventType[i]);
        }
      }
    }
    if (events && events.length) {
      for (i = 0, len = events.length; i < len; i++) {
        eventType = events[i].replace(/^on/, "");
        added[eventType] = true;
        if (!handlers[eventType]) {
          handlers[eventType] = [];
        }
        handlers[eventType].push(listener);
      }
      if (added.ready && _flashState.ready) {
        this.emit({
          type: "ready",
          client: this
        });
      }
      if (added.error) {
        for (i = 0, len = _flashStateErrorNames.length; i < len; i++) {
          if (_flashState[_flashStateErrorNames[i].replace(/^flash-/, "")]) {
            this.emit({
              type: "error",
              name: _flashStateErrorNames[i],
              client: this
            });
            break;
          }
        }
        if (_zcSwfVersion !== undefined && ZeroClipboard.version !== _zcSwfVersion) {
          this.emit({
            type: "error",
            name: "version-mismatch",
            jsVersion: ZeroClipboard.version,
            swfVersion: _zcSwfVersion
          });
        }
      }
    }
    return this;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.off`.
 * @private
 */
  var _clientOff = function(eventType, listener) {
    var i, len, foundIndex, events, perEventHandlers, meta = _clientMeta[this.id], handlers = meta && meta.handlers;
    if (!handlers) {
      return this;
    }
    if (arguments.length === 0) {
      events = _keys(handlers);
    } else if (typeof eventType === "string" && eventType) {
      events = eventType.split(/\s+/);
    } else if (typeof eventType === "object" && eventType && typeof listener === "undefined") {
      for (i in eventType) {
        if (_hasOwn.call(eventType, i) && typeof i === "string" && i && typeof eventType[i] === "function") {
          this.off(i, eventType[i]);
        }
      }
    }
    if (events && events.length) {
      for (i = 0, len = events.length; i < len; i++) {
        eventType = events[i].toLowerCase().replace(/^on/, "");
        perEventHandlers = handlers[eventType];
        if (perEventHandlers && perEventHandlers.length) {
          if (listener) {
            foundIndex = perEventHandlers.indexOf(listener);
            while (foundIndex !== -1) {
              perEventHandlers.splice(foundIndex, 1);
              foundIndex = perEventHandlers.indexOf(listener, foundIndex);
            }
          } else {
            perEventHandlers.length = 0;
          }
        }
      }
    }
    return this;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.handlers`.
 * @private
 */
  var _clientListeners = function(eventType) {
    var copy = null, handlers = _clientMeta[this.id] && _clientMeta[this.id].handlers;
    if (handlers) {
      if (typeof eventType === "string" && eventType) {
        copy = handlers[eventType] ? handlers[eventType].slice(0) : [];
      } else {
        copy = _deepCopy(handlers);
      }
    }
    return copy;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.emit`.
 * @private
 */
  var _clientEmit = function(event) {
    if (_clientShouldEmit.call(this, event)) {
      if (typeof event === "object" && event && typeof event.type === "string" && event.type) {
        event = _extend({}, event);
      }
      var eventCopy = _extend({}, _createEvent(event), {
        client: this
      });
      _clientDispatchCallbacks.call(this, eventCopy);
    }
    return this;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.clip`.
 * @private
 */
  var _clientClip = function(elements) {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to clip element(s) to a destroyed ZeroClipboard client instance");
    }
    elements = _prepClip(elements);
    for (var i = 0; i < elements.length; i++) {
      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {
        if (!elements[i].zcClippingId) {
          elements[i].zcClippingId = "zcClippingId_" + _elementIdCounter++;
          _elementMeta[elements[i].zcClippingId] = [ this.id ];
          if (_globalConfig.autoActivate === true) {
            _addMouseHandlers(elements[i]);
          }
        } else if (_elementMeta[elements[i].zcClippingId].indexOf(this.id) === -1) {
          _elementMeta[elements[i].zcClippingId].push(this.id);
        }
        var clippedElements = _clientMeta[this.id] && _clientMeta[this.id].elements;
        if (clippedElements.indexOf(elements[i]) === -1) {
          clippedElements.push(elements[i]);
        }
      }
    }
    return this;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.unclip`.
 * @private
 */
  var _clientUnclip = function(elements) {
    var meta = _clientMeta[this.id];
    if (!meta) {
      return this;
    }
    var clippedElements = meta.elements;
    var arrayIndex;
    if (typeof elements === "undefined") {
      elements = clippedElements.slice(0);
    } else {
      elements = _prepClip(elements);
    }
    for (var i = elements.length; i--; ) {
      if (_hasOwn.call(elements, i) && elements[i] && elements[i].nodeType === 1) {
        arrayIndex = 0;
        while ((arrayIndex = clippedElements.indexOf(elements[i], arrayIndex)) !== -1) {
          clippedElements.splice(arrayIndex, 1);
        }
        var clientIds = _elementMeta[elements[i].zcClippingId];
        if (clientIds) {
          arrayIndex = 0;
          while ((arrayIndex = clientIds.indexOf(this.id, arrayIndex)) !== -1) {
            clientIds.splice(arrayIndex, 1);
          }
          if (clientIds.length === 0) {
            if (_globalConfig.autoActivate === true) {
              _removeMouseHandlers(elements[i]);
            }
            delete elements[i].zcClippingId;
          }
        }
      }
    }
    return this;
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.elements`.
 * @private
 */
  var _clientElements = function() {
    var meta = _clientMeta[this.id];
    return meta && meta.elements ? meta.elements.slice(0) : [];
  };
  /**
 * The underlying implementation of `ZeroClipboard.Client.prototype.destroy`.
 * @private
 */
  var _clientDestroy = function() {
    if (!_clientMeta[this.id]) {
      return;
    }
    this.unclip();
    this.off();
    delete _clientMeta[this.id];
  };
  /**
 * Inspect an Event to see if the Client (`this`) should honor it for emission.
 * @private
 */
  var _clientShouldEmit = function(event) {
    if (!(event && event.type)) {
      return false;
    }
    if (event.client && event.client !== this) {
      return false;
    }
    var meta = _clientMeta[this.id];
    var clippedEls = meta && meta.elements;
    var hasClippedEls = !!clippedEls && clippedEls.length > 0;
    var goodTarget = !event.target || hasClippedEls && clippedEls.indexOf(event.target) !== -1;
    var goodRelTarget = event.relatedTarget && hasClippedEls && clippedEls.indexOf(event.relatedTarget) !== -1;
    var goodClient = event.client && event.client === this;
    if (!meta || !(goodTarget || goodRelTarget || goodClient)) {
      return false;
    }
    return true;
  };
  /**
 * Handle the actual dispatching of events to a client instance.
 *
 * @returns `undefined`
 * @private
 */
  var _clientDispatchCallbacks = function(event) {
    var meta = _clientMeta[this.id];
    if (!(typeof event === "object" && event && event.type && meta)) {
      return;
    }
    var async = _shouldPerformAsync(event);
    var wildcardTypeHandlers = meta && meta.handlers["*"] || [];
    var specificTypeHandlers = meta && meta.handlers[event.type] || [];
    var handlers = wildcardTypeHandlers.concat(specificTypeHandlers);
    if (handlers && handlers.length) {
      var i, len, func, context, eventCopy, originalContext = this;
      for (i = 0, len = handlers.length; i < len; i++) {
        func = handlers[i];
        context = originalContext;
        if (typeof func === "string" && typeof _window[func] === "function") {
          func = _window[func];
        }
        if (typeof func === "object" && func && typeof func.handleEvent === "function") {
          context = func;
          func = func.handleEvent;
        }
        if (typeof func === "function") {
          eventCopy = _extend({}, event);
          _dispatchCallback(func, context, [ eventCopy ], async);
        }
      }
    }
  };
  /**
 * Prepares the elements for clipping/unclipping.
 *
 * @returns An Array of elements.
 * @private
 */
  var _prepClip = function(elements) {
    if (typeof elements === "string") {
      elements = [];
    }
    return typeof elements.length !== "number" ? [ elements ] : elements;
  };
  /**
 * Add a `mouseover` handler function for a clipped element.
 *
 * @returns `undefined`
 * @private
 */
  var _addMouseHandlers = function(element) {
    if (!(element && element.nodeType === 1)) {
      return;
    }
    var _suppressMouseEvents = function(event) {
      if (!(event || (event = _window.event))) {
        return;
      }
      if (event._source !== "js") {
        event.stopImmediatePropagation();
        event.preventDefault();
      }
      delete event._source;
    };
    var _elementMouseOver = function(event) {
      if (!(event || (event = _window.event))) {
        return;
      }
      _suppressMouseEvents(event);
      ZeroClipboard.focus(element);
    };
    element.addEventListener("mouseover", _elementMouseOver, false);
    element.addEventListener("mouseout", _suppressMouseEvents, false);
    element.addEventListener("mouseenter", _suppressMouseEvents, false);
    element.addEventListener("mouseleave", _suppressMouseEvents, false);
    element.addEventListener("mousemove", _suppressMouseEvents, false);
    _mouseHandlers[element.zcClippingId] = {
      mouseover: _elementMouseOver,
      mouseout: _suppressMouseEvents,
      mouseenter: _suppressMouseEvents,
      mouseleave: _suppressMouseEvents,
      mousemove: _suppressMouseEvents
    };
  };
  /**
 * Remove a `mouseover` handler function for a clipped element.
 *
 * @returns `undefined`
 * @private
 */
  var _removeMouseHandlers = function(element) {
    if (!(element && element.nodeType === 1)) {
      return;
    }
    var mouseHandlers = _mouseHandlers[element.zcClippingId];
    if (!(typeof mouseHandlers === "object" && mouseHandlers)) {
      return;
    }
    var key, val, mouseEvents = [ "move", "leave", "enter", "out", "over" ];
    for (var i = 0, len = mouseEvents.length; i < len; i++) {
      key = "mouse" + mouseEvents[i];
      val = mouseHandlers[key];
      if (typeof val === "function") {
        element.removeEventListener(key, val, false);
      }
    }
    delete _mouseHandlers[element.zcClippingId];
  };
  /**
 * Creates a new ZeroClipboard client instance.
 * Optionally, auto-`clip` an element or collection of elements.
 *
 * @constructor
 */
  ZeroClipboard._createClient = function() {
    _clientConstructor.apply(this, _args(arguments));
  };
  /**
 * Register an event listener to the client.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.on = function() {
    return _clientOn.apply(this, _args(arguments));
  };
  /**
 * Unregister an event handler from the client.
 * If no `listener` function/object is provided, it will unregister all handlers for the provided `eventType`.
 * If no `eventType` is provided, it will unregister all handlers for every event type.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.off = function() {
    return _clientOff.apply(this, _args(arguments));
  };
  /**
 * Retrieve event listeners for an `eventType` from the client.
 * If no `eventType` is provided, it will retrieve all listeners for every event type.
 *
 * @returns array of listeners for the `eventType`; if no `eventType`, then a map/hash object of listeners for all event types; or `null`
 */
  ZeroClipboard.prototype.handlers = function() {
    return _clientListeners.apply(this, _args(arguments));
  };
  /**
 * Event emission receiver from the Flash object for this client's registered JavaScript event listeners.
 *
 * @returns For the "copy" event, returns the Flash-friendly "clipData" object; otherwise `undefined`.
 */
  ZeroClipboard.prototype.emit = function() {
    return _clientEmit.apply(this, _args(arguments));
  };
  /**
 * Register clipboard actions for new element(s) to the client.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.clip = function() {
    return _clientClip.apply(this, _args(arguments));
  };
  /**
 * Unregister the clipboard actions of previously registered element(s) on the page.
 * If no elements are provided, ALL registered elements will be unregistered.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.unclip = function() {
    return _clientUnclip.apply(this, _args(arguments));
  };
  /**
 * Get all of the elements to which this client is clipped.
 *
 * @returns array of clipped elements
 */
  ZeroClipboard.prototype.elements = function() {
    return _clientElements.apply(this, _args(arguments));
  };
  /**
 * Self-destruct and clean up everything for a single client.
 * This will NOT destroy the embedded Flash object.
 *
 * @returns `undefined`
 */
  ZeroClipboard.prototype.destroy = function() {
    return _clientDestroy.apply(this, _args(arguments));
  };
  /**
 * Stores the pending plain text to inject into the clipboard.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.setText = function(text) {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    ZeroClipboard.setData("text/plain", text);
    return this;
  };
  /**
 * Stores the pending HTML text to inject into the clipboard.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.setHtml = function(html) {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    ZeroClipboard.setData("text/html", html);
    return this;
  };
  /**
 * Stores the pending rich text (RTF) to inject into the clipboard.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.setRichText = function(richText) {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    ZeroClipboard.setData("application/rtf", richText);
    return this;
  };
  /**
 * Stores the pending data to inject into the clipboard.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.setData = function() {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to set pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    ZeroClipboard.setData.apply(this, _args(arguments));
    return this;
  };
  /**
 * Clears the pending data to inject into the clipboard.
 * If no `format` is provided, all pending data formats will be cleared.
 *
 * @returns `this`
 */
  ZeroClipboard.prototype.clearData = function() {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to clear pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    ZeroClipboard.clearData.apply(this, _args(arguments));
    return this;
  };
  /**
 * Gets a copy of the pending data to inject into the clipboard.
 * If no `format` is provided, a copy of ALL pending data formats will be returned.
 *
 * @returns `String` or `Object`
 */
  ZeroClipboard.prototype.getData = function() {
    if (!_clientMeta[this.id]) {
      throw new Error("Attempted to get pending clipboard data from a destroyed ZeroClipboard client instance");
    }
    return ZeroClipboard.getData.apply(this, _args(arguments));
  };
  if (typeof define === "function" && define.amd) {
    define(function() {
      return ZeroClipboard;
    });
  } else if (typeof module === "object" && module && typeof module.exports === "object" && module.exports) {
    module.exports = ZeroClipboard;
  } else {
    window.ZeroClipboard = ZeroClipboard;
  }
})(function() {
  return this || window;
}());
!function(a,b){b["true"]=a,/**
 * @license AngularJS v1.3.10
 * (c) 2010-2014 Google, Inc. http://angularjs.org
 * License: MIT
 */
function(a,b){"use strict";function c(){this.$get=["$$sanitizeUri",function(a){return function(b){var c=[];return f(b,k(c,function(b,c){return!/^unsafe/.test(a(b,c))})),c.join("")}}]}function d(a){var c=[],d=k(c,b.noop);return d.chars(a),c.join("")}function e(a){var b,c={},d=a.split(",");for(b=0;b<d.length;b++)c[d[b]]=!0;return c}function f(a,c){function d(a,d,f,h){if(d=b.lowercase(d),A[d])for(;k.last()&&B[k.last()];)e("",k.last());z[d]&&k.last()==d&&e("",d),h=w[d]||!!h,h||k.push(d);var i={};f.replace(o,function(a,b,c,d,e){var f=c||d||e||"";i[b]=g(f)}),c.start&&c.start(d,i,h)}function e(a,d){var e,f=0;if(d=b.lowercase(d))for(f=k.length-1;f>=0&&k[f]!=d;f--);if(f>=0){for(e=k.length-1;e>=f;e--)c.end&&c.end(k[e]);k.length=f}}"string"!=typeof a&&(a=null===a||"undefined"==typeof a?"":""+a);var f,h,i,j,k=[],u=a;for(k.last=function(){return k[k.length-1]};a;){if(j="",h=!0,k.last()&&D[k.last()]?(a=a.replace(new RegExp("([^]*)<\\s*\\/\\s*"+k.last()+"[^>]*>","i"),function(a,b){return b=b.replace(r,"$1").replace(t,"$1"),c.chars&&c.chars(g(b)),""}),e("",k.last())):(0===a.indexOf("<!--")?(f=a.indexOf("--",4),f>=0&&a.lastIndexOf("-->",f)===f&&(c.comment&&c.comment(a.substring(4,f)),a=a.substring(f+3),h=!1)):s.test(a)?(i=a.match(s),i&&(a=a.replace(i[0],""),h=!1)):q.test(a)?(i=a.match(n),i&&(a=a.substring(i[0].length),i[0].replace(n,e),h=!1)):p.test(a)&&(i=a.match(m),i?(i[4]&&(a=a.substring(i[0].length),i[0].replace(m,d)),h=!1):(j+="<",a=a.substring(1))),h&&(f=a.indexOf("<"),j+=0>f?a:a.substring(0,f),a=0>f?"":a.substring(f),c.chars&&c.chars(g(j)))),a==u)throw l("badparse","The sanitizer was unable to parse the following block of html: {0}",a);u=a}e()}function g(a){if(!a)return"";var b=K.exec(a),c=b[1],d=b[3],e=b[2];return e&&(J.innerHTML=e.replace(/</g,"&lt;"),e="textContent"in J?J.textContent:J.innerText),c+e+d}function h(a){return a.replace(/&/g,"&amp;").replace(u,function(a){var b=a.charCodeAt(0),c=a.charCodeAt(1);return"&#"+(1024*(b-55296)+(c-56320)+65536)+";"}).replace(v,function(a){var b=a.charCodeAt(0);return 159>=b||173==b||b>=1536&&1540>=b||1807==b||6068==b||6069==b||b>=8204&&8207>=b||b>=8232&&8239>=b||b>=8288&&8303>=b||65279==b||b>=65520&&65535>=b?"&#"+b+";":a}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function i(a){var c="",d=a.split(";");return b.forEach(d,function(a){var d=a.split(":");if(2==d.length){var e=L(b.lowercase(d[0])),a=L(b.lowercase(d[1]));(("color"===e||"background-color"===e)&&(a.match(/^rgb\([0-9%,\. ]*\)$/i)||a.match(/^rgba\([0-9%,\. ]*\)$/i)||a.match(/^hsl\([0-9%,\. ]*\)$/i)||a.match(/^hsla\([0-9%,\. ]*\)$/i)||a.match(/^#[0-9a-f]{3,6}$/i)||a.match(/^[a-z]*$/i))||"text-align"===e&&("left"===a||"right"===a||"center"===a||"justify"===a)||"float"===e&&("left"===a||"right"===a||"none"===a)||("width"===e||"height"===e)&&a.match(/[0-9\.]*(px|em|rem|%)/)||"direction"===e&&a.match(/^ltr|rtl|initial|inherit$/))&&(c+=e+": "+a+";")}}),c}function j(a,b,c,d){return"img"===a&&b["ta-insert-video"]&&("ta-insert-video"===c||"allowfullscreen"===c||"frameborder"===c||"contenteditable"===c&&"false"===d)?!0:!1}function k(a,c){var d=!1,e=b.bind(a,a.push);return{start:function(a,f,g){a=b.lowercase(a),!d&&D[a]&&(d=a),d||E[a]!==!0||(e("<"),e(a),b.forEach(f,function(d,g){var k=b.lowercase(g),l="img"===a&&"src"===k||"background"===k;("style"===k&&""!==(d=i(d))||j(a,f,k,d)||I[k]===!0&&(F[k]!==!0||c(d,l)))&&(e(" "),e(g),e('="'),e(h(d)),e('"'))}),e(g?"/>":">"))},end:function(a){a=b.lowercase(a),d||E[a]!==!0||(e("</"),e(a),e(">")),a==d&&(d=!1)},chars:function(a){d||e(h(a))}}}var l=b.$$minErr("$sanitize"),m=/^<((?:[a-zA-Z])[\w:-]*)((?:\s+[\w:-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)\s*(>?)/,n=/^<\/\s*([\w:-]+)[^>]*>/,o=/([\w:-]+)(?:\s*=\s*(?:(?:"((?:[^"])*)")|(?:'((?:[^'])*)')|([^>\s]+)))?/g,p=/^</,q=/^<\//,r=/<!--(.*?)-->/g,s=/<!DOCTYPE([^>]*?)>/i,t=/<!\[CDATA\[(.*?)]]>/g,u=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,v=/([^\#-~| |!])/g,w=e("area,br,col,hr,img,wbr"),x=e("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),y=e("rp,rt"),z=b.extend({},y,x),A=b.extend({},x,e("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,script,section,table,ul")),B=b.extend({},y,e("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),C=e("animate,animateColor,animateMotion,animateTransform,circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,set,stop,svg,switch,text,title,tspan,use"),D=e("script,style"),E=b.extend({},w,A,B,z,C),F=e("background,cite,href,longdesc,src,usemap,xlink:href"),G=e("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,id,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,target,title,type,valign,value,vspace,width"),H=e("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,attributeName,attributeType,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan"),I=b.extend({},F,H,G),J=document.createElement("pre"),K=/^(\s*)([\s\S]*?)(\s*)$/,L=function(){return String.prototype.trim?function(a){return b.isString(a)?a.trim():a}:function(a){return b.isString(a)?a.replace(/^\s\s*/,"").replace(/\s\s*$/,""):a}}();b.module("ngSanitize",[]).provider("$sanitize",c),b.module("ngSanitize").filter("linky",["$sanitize",function(a){var c=/((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"”’]/,e=/^mailto:/;return function(f,g){function h(a){a&&n.push(d(a))}function i(a,c){n.push("<a "),b.isDefined(g)&&n.push('target="',g,'" '),n.push('href="',a.replace(/"/g,"&quot;"),'">'),h(c),n.push("</a>")}if(!f)return f;for(var j,k,l,m=f,n=[];j=m.match(c);)k=j[0],j[2]||j[4]||(k=(j[3]?"http://":"mailto:")+k),l=j.index,h(m.substr(0,l)),i(k,j[0].replace(e,"")),m=m.substring(l+j[0].length);return h(m),a(n.join(""))}}])}(window,window.angular)}({},function(){return this}());
!function(a,b){b["true"]=a,/*
@license textAngular
Author : Austin Anderson
License : 2013 MIT
Version 1.3.7

See README.md or https://github.com/fraywing/textAngular/wiki for requirements and use.
*/
angular.module("textAngularSetup",[]).value("taOptions",{toolbar:[["h1","h2","h3","h4","h5","h6","p","pre","quote"],["bold","italics","underline","strikeThrough","ul","ol","redo","undo","clear"],["justifyLeft","justifyCenter","justifyRight","indent","outdent"],["html","insertImage","insertLink","insertVideo","wordcount","charcount"]],classes:{focussed:"focussed",toolbar:"btn-toolbar",toolbarGroup:"btn-group",toolbarButton:"btn btn-default",toolbarButtonActive:"active",disabled:"disabled",textEditor:"form-control",htmlEditor:"form-control"},defaultTagAttributes:{a:{target:""}},setup:{textEditorSetup:function(){},htmlEditorSetup:function(){}},defaultFileDropHandler:function(a,b){var c=new FileReader;return"image"===a.type.substring(0,5)?(c.onload=function(){""!==c.result&&b("insertImage",c.result,!0)},c.readAsDataURL(a),!0):!1}}).value("taSelectableElements",["a","img"]).value("taCustomRenderers",[{selector:"img",customAttribute:"ta-insert-video",renderLogic:function(a){var b=angular.element("<iframe></iframe>"),c=a.prop("attributes");angular.forEach(c,function(a){b.attr(a.name,a.value)}),b.attr("src",b.attr("ta-insert-video")),a.replaceWith(b)}}]).value("taTranslations",{html:{tooltip:"Toggle html / Rich Text"},heading:{tooltip:"Heading "},p:{tooltip:"Paragraph"},pre:{tooltip:"Preformatted text"},ul:{tooltip:"Unordered List"},ol:{tooltip:"Ordered List"},quote:{tooltip:"Quote/unquote selection or paragraph"},undo:{tooltip:"Undo"},redo:{tooltip:"Redo"},bold:{tooltip:"Bold"},italic:{tooltip:"Italic"},underline:{tooltip:"Underline"},strikeThrough:{tooltip:"Strikethrough"},justifyLeft:{tooltip:"Align text left"},justifyRight:{tooltip:"Align text right"},justifyCenter:{tooltip:"Center"},indent:{tooltip:"Increase indent"},outdent:{tooltip:"Decrease indent"},clear:{tooltip:"Clear formatting"},insertImage:{dialogPrompt:"Please enter an image URL to insert",tooltip:"Insert image",hotkey:"the - possibly language dependent hotkey ... for some future implementation"},insertVideo:{tooltip:"Insert video",dialogPrompt:"Please enter a youtube URL to embed"},insertLink:{tooltip:"Insert / edit link",dialogPrompt:"Please enter a URL to insert"},editLink:{reLinkButton:{tooltip:"Relink"},unLinkButton:{tooltip:"Unlink"},targetToggle:{buttontext:"Open in New Window"}},wordcount:{tooltip:"Display words Count"},charcount:{tooltip:"Display characters Count"}}).run(["taRegisterTool","$window","taTranslations","taSelection",function(a,b,c,d){a("html",{iconclass:"fa fa-code",tooltiptext:c.html.tooltip,action:function(){this.$editor().switchView()},activeState:function(){return this.$editor().showHtml}});var e=function(a){return function(){return this.$editor().queryFormatBlockState(a)}},f=function(){return this.$editor().wrapSelection("formatBlock","<"+this.name.toUpperCase()+">")};angular.forEach(["h1","h2","h3","h4","h5","h6"],function(b){a(b.toLowerCase(),{buttontext:b.toUpperCase(),tooltiptext:c.heading.tooltip+b.charAt(1),action:f,activeState:e(b.toLowerCase())})}),a("p",{buttontext:"P",tooltiptext:c.p.tooltip,action:function(){return this.$editor().wrapSelection("formatBlock","<P>")},activeState:function(){return this.$editor().queryFormatBlockState("p")}}),a("pre",{buttontext:"pre",tooltiptext:c.pre.tooltip,action:function(){return this.$editor().wrapSelection("formatBlock","<PRE>")},activeState:function(){return this.$editor().queryFormatBlockState("pre")}}),a("ul",{iconclass:"fa fa-list-ul",tooltiptext:c.ul.tooltip,action:function(){return this.$editor().wrapSelection("insertUnorderedList",null)},activeState:function(){return this.$editor().queryCommandState("insertUnorderedList")}}),a("ol",{iconclass:"fa fa-list-ol",tooltiptext:c.ol.tooltip,action:function(){return this.$editor().wrapSelection("insertOrderedList",null)},activeState:function(){return this.$editor().queryCommandState("insertOrderedList")}}),a("quote",{iconclass:"fa fa-quote-right",tooltiptext:c.quote.tooltip,action:function(){return this.$editor().wrapSelection("formatBlock","<BLOCKQUOTE>")},activeState:function(){return this.$editor().queryFormatBlockState("blockquote")}}),a("undo",{iconclass:"fa fa-undo",tooltiptext:c.undo.tooltip,action:function(){return this.$editor().wrapSelection("undo",null)}}),a("redo",{iconclass:"fa fa-repeat",tooltiptext:c.redo.tooltip,action:function(){return this.$editor().wrapSelection("redo",null)}}),a("bold",{iconclass:"fa fa-bold",tooltiptext:c.bold.tooltip,action:function(){return this.$editor().wrapSelection("bold",null)},activeState:function(){return this.$editor().queryCommandState("bold")},commandKeyCode:98}),a("justifyLeft",{iconclass:"fa fa-align-left",tooltiptext:c.justifyLeft.tooltip,action:function(){return this.$editor().wrapSelection("justifyLeft",null)},activeState:function(a){var b=!1;return a&&(b="left"===a.css("text-align")||"left"===a.attr("align")||"right"!==a.css("text-align")&&"center"!==a.css("text-align")&&"justify"!==a.css("text-align")&&!this.$editor().queryCommandState("justifyRight")&&!this.$editor().queryCommandState("justifyCenter")&&!this.$editor().queryCommandState("justifyFull")),b=b||this.$editor().queryCommandState("justifyLeft")}}),a("justifyRight",{iconclass:"fa fa-align-right",tooltiptext:c.justifyRight.tooltip,action:function(){return this.$editor().wrapSelection("justifyRight",null)},activeState:function(a){var b=!1;return a&&(b="right"===a.css("text-align")),b=b||this.$editor().queryCommandState("justifyRight")}}),a("justifyCenter",{iconclass:"fa fa-align-center",tooltiptext:c.justifyCenter.tooltip,action:function(){return this.$editor().wrapSelection("justifyCenter",null)},activeState:function(a){var b=!1;return a&&(b="center"===a.css("text-align")),b=b||this.$editor().queryCommandState("justifyCenter")}}),a("indent",{iconclass:"fa fa-indent",tooltiptext:c.indent.tooltip,action:function(){return this.$editor().wrapSelection("indent",null)},activeState:function(){return this.$editor().queryFormatBlockState("blockquote")}}),a("outdent",{iconclass:"fa fa-outdent",tooltiptext:c.outdent.tooltip,action:function(){return this.$editor().wrapSelection("outdent",null)},activeState:function(){return!1}}),a("italics",{iconclass:"fa fa-italic",tooltiptext:c.italic.tooltip,action:function(){return this.$editor().wrapSelection("italic",null)},activeState:function(){return this.$editor().queryCommandState("italic")},commandKeyCode:105}),a("underline",{iconclass:"fa fa-underline",tooltiptext:c.underline.tooltip,action:function(){return this.$editor().wrapSelection("underline",null)},activeState:function(){return this.$editor().queryCommandState("underline")},commandKeyCode:117}),a("strikeThrough",{iconclass:"fa fa-strikethrough",tooltiptext:c.strikeThrough.tooltip,action:function(){return this.$editor().wrapSelection("strikeThrough",null)},activeState:function(){return document.queryCommandState("strikeThrough")}}),a("clear",{iconclass:"fa fa-ban",tooltiptext:c.clear.tooltip,action:function(a,b){var c;this.$editor().wrapSelection("removeFormat",null);var e=angular.element(d.getSelectionElement()),f=function(a){a=angular.element(a);var b=a;angular.forEach(a.children(),function(a){var c=angular.element("<p></p>");c.html(angular.element(a).html()),b.after(c),b=c}),a.remove()};if(angular.forEach(e.find("ul"),f),angular.forEach(e.find("ol"),f),"li"===e[0].tagName.toLowerCase()){var g=e[0].parentNode.childNodes,h=[],i=[],j=!1;for(c=0;c<g.length;c++)g[c]===e[0]?j=!0:j?i.push(g[c]):h.push(g[c]);var k=angular.element(e[0].parentNode),l=angular.element("<p></p>");if(l.html(angular.element(e[0]).html()),0===h.length||0===i.length)0===i.length?k.after(l):k[0].parentNode.insertBefore(l[0],k[0]),0===h.length&&0===i.length?k.remove():angular.element(e[0]).remove();else{var m=angular.element("<"+k[0].tagName+"></"+k[0].tagName+">"),n=angular.element("<"+k[0].tagName+"></"+k[0].tagName+">");for(c=0;c<h.length;c++)m.append(angular.element(h[c]));for(c=0;c<i.length;c++)n.append(angular.element(i[c]));k.after(n),k.after(l),k.after(m),k.remove()}d.setSelectionToElementEnd(l[0])}var o=this.$editor(),p=function(a){a=angular.element(a),a[0]!==o.displayElements.text[0]&&a.removeAttr("class"),angular.forEach(a.children(),p)};angular.forEach(e,p),"li"!==e[0].tagName.toLowerCase()&&"ol"!==e[0].tagName.toLowerCase()&&"ul"!==e[0].tagName.toLowerCase()&&this.$editor().wrapSelection("formatBlock","default"),b()}});var g=function(a,b,c){var d=function(){c.updateTaBindtaTextElement(),c.hidePopover()};a.preventDefault(),c.displayElements.popover.css("width","375px");var e=c.displayElements.popoverContainer;e.empty();var f=angular.element('<div class="btn-group" style="padding-right: 6px;">'),g=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">100% </button>');g.on("click",function(a){a.preventDefault(),b.css({width:"100%",height:""}),d()});var h=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">50% </button>');h.on("click",function(a){a.preventDefault(),b.css({width:"50%",height:""}),d()});var i=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">25% </button>');i.on("click",function(a){a.preventDefault(),b.css({width:"25%",height:""}),d()});var j=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1">Reset</button>');j.on("click",function(a){a.preventDefault(),b.css({width:"",height:""}),d()}),f.append(g),f.append(h),f.append(i),f.append(j),e.append(f),f=angular.element('<div class="btn-group" style="padding-right: 6px;">');var k=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-left"></i></button>');k.on("click",function(a){a.preventDefault(),b.css("float","left"),b.css("cssFloat","left"),b.css("styleFloat","left"),d()});var l=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-right"></i></button>');l.on("click",function(a){a.preventDefault(),b.css("float","right"),b.css("cssFloat","right"),b.css("styleFloat","right"),d()});var m=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-align-justify"></i></button>');m.on("click",function(a){a.preventDefault(),b.css("float",""),b.css("cssFloat",""),b.css("styleFloat",""),d()}),f.append(k),f.append(m),f.append(l),e.append(f),f=angular.element('<div class="btn-group">');var n=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" unselectable="on" tabindex="-1"><i class="fa fa-trash-o"></i></button>');n.on("click",function(a){a.preventDefault(),b.remove(),d()}),f.append(n),e.append(f),c.showPopover(b),c.showResizeOverlay(b)};a("insertImage",{iconclass:"fa fa-picture-o",tooltiptext:c.insertImage.tooltip,action:function(){var a;return a=b.prompt(c.insertImage.dialogPrompt,"http://"),a&&""!==a&&"http://"!==a?this.$editor().wrapSelection("insertImage",a,!0):void 0},onElementSelect:{element:"img",action:g}}),a("insertVideo",{iconclass:"fa fa-youtube-play",tooltiptext:c.insertVideo.tooltip,action:function(){var a;if(a=b.prompt(c.insertVideo.dialogPrompt,"https://"),a&&""!==a&&"https://"!==a){var d=a.match(/(\?|&)v=[^&]*/);if(d&&d.length>0){var e="https://www.youtube.com/embed/"+d[0].substring(3),f='<img class="ta-insert-video" src="https://img.youtube.com/vi/'+d[0].substring(3)+'/hqdefault.jpg" ta-insert-video="'+e+'" contenteditable="false" allowfullscreen="true" frameborder="0" />';return this.$editor().wrapSelection("insertHTML",f,!0)}}},onElementSelect:{element:"img",onlyWithAttrs:["ta-insert-video"],action:g}}),a("insertLink",{tooltiptext:c.insertLink.tooltip,iconclass:"fa fa-link",action:function(){var a;return a=b.prompt(c.insertLink.dialogPrompt,"http://"),a&&""!==a&&"http://"!==a?this.$editor().wrapSelection("createLink",a,!0):void 0},activeState:function(a){return a?"A"===a[0].tagName:!1},onElementSelect:{element:"a",action:function(a,d,e){a.preventDefault(),e.displayElements.popover.css("width","436px");var f=e.displayElements.popoverContainer;f.empty(),f.css("line-height","28px");var g=angular.element('<a href="'+d.attr("href")+'" target="_blank">'+d.attr("href")+"</a>");g.css({display:"inline-block","max-width":"200px",overflow:"hidden","text-overflow":"ellipsis","white-space":"nowrap","vertical-align":"middle"}),f.append(g);var h=angular.element('<div class="btn-group pull-right">'),i=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on" title="'+c.editLink.reLinkButton.tooltip+'"><i class="fa fa-edit icon-edit"></i></button>');i.on("click",function(a){a.preventDefault();var f=b.prompt(c.insertLink.dialogPrompt,d.attr("href"));f&&""!==f&&"http://"!==f&&(d.attr("href",f),e.updateTaBindtaTextElement()),e.hidePopover()}),h.append(i);var j=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on" title="'+c.editLink.unLinkButton.tooltip+'"><i class="fa fa-unlink icon-unlink"></i></button>');j.on("click",function(a){a.preventDefault(),d.replaceWith(d.contents()),e.updateTaBindtaTextElement(),e.hidePopover()}),h.append(j);var k=angular.element('<button type="button" class="btn btn-default btn-sm btn-small" tabindex="-1" unselectable="on">'+c.editLink.targetToggle.buttontext+"</button>");"_blank"===d.attr("target")&&k.addClass("active"),k.on("click",function(a){a.preventDefault(),d.attr("target","_blank"===d.attr("target")?"":"_blank"),k.toggleClass("active"),e.updateTaBindtaTextElement()}),h.append(k),f.append(h),e.showPopover(d)}}}),a("wordcount",{display:'<div id="toolbarWC" style="display:block; min-width:100px;">Words: <span ng-bind="wordcount"></span></div>',disabled:!0,wordcount:0,activeState:function(){var a=this.$editor().displayElements.text,b=a[0].innerHTML||"",c=0;return""!==b.replace(/\s*<[^>]*?>\s*/g,"")&&(c=b.replace(/<\/?(b|i|em|strong|span|u|strikethrough|a|img|small|sub|sup|label)( [^>*?])?>/gi,"").replace(/(<[^>]*?>\s*<[^>]*?>)/gi," ").replace(/(<[^>]*?>)/gi,"").replace(/\s+/gi," ").match(/\S+/g).length),this.wordcount=c,this.$editor().wordcount=c,!1}}),a("charcount",{display:'<div id="toolbarCC" style="display:block; min-width:120px;">Characters: <span ng-bind="charcount"></span></div>',disabled:!0,charcount:0,activeState:function(){var a=this.$editor().displayElements.text,b=a[0].innerText||a[0].textContent,c=b.replace(/(\r\n|\n|\r)/gm,"").replace(/^\s+/g," ").replace(/\s+$/g," ").length;return this.charcount=c,this.$editor().charcount=c,!1}})}]),/*
@license textAngular
Author : Austin Anderson
License : 2013 MIT
Version 1.4.1

See README.md or https://github.com/fraywing/textAngular/wiki for requirements and use.
*/
function(){"use strict";function a(a){try{return 0!==angular.element(a).length}catch(b){return!1}}function b(b,c){if(!b||""===b||r.hasOwnProperty(b))throw"textAngular Error: A unique name is required for a Tool Definition";if(c.display&&(""===c.display||!a(c.display))||!c.display&&!c.buttontext&&!c.iconclass)throw'textAngular Error: Tool Definition for "'+b+'" does not have a valid display/iconclass/buttontext value';r[b]=c}var c={ie:function(){for(var a,b=3,c=document.createElement("div"),d=c.getElementsByTagName("i");c.innerHTML="<!--[if gt IE "+ ++b+"]><i></i><![endif]-->",d[0];);return b>4?b:a}(),webkit:/AppleWebKit\/([\d.]+)/i.test(navigator.userAgent)},d=!1;c.webkit&&(document.addEventListener("mousedown",function(a){var b=a||window.event,c=b.target;if(d&&null!==c){for(var e=!1,f=c;null!==f&&"html"!==f.tagName.toLowerCase()&&!e;)e="true"===f.contentEditable,f=f.parentNode;e||(document.getElementById("textAngular-editableFix-010203040506070809").setSelectionRange(0,0),c.focus(),c.select&&c.select())}d=!1},!1),angular.element(document).ready(function(){angular.element(document.body).append(angular.element('<input id="textAngular-editableFix-010203040506070809" class="ta-hidden-input" unselectable="on" tabIndex="-1">'))}));var e=/^(address|article|aside|audio|blockquote|canvas|dd|div|dl|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hgroup|hr|noscript|ol|output|p|pre|section|table|tfoot|ul|video)$/i,f=/^(ul|li|ol)$/i,g=/^(address|article|aside|audio|blockquote|canvas|dd|div|dl|fieldset|figcaption|figure|footer|form|h1|h2|h3|h4|h5|h6|header|hgroup|hr|noscript|ol|output|p|pre|section|table|tfoot|ul|video|li)$/i;String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")});var h,i,j,k,l,m;if(c.ie>8||void 0===c.ie){for(var n=document.styleSheets,o=0;o<n.length;o++)if((0===n[o].media.length||n[o].media.mediaText.match(/(all|screen)/gi))&&n[o].href&&n[o].href.match(/textangular\.(min\.|)css/gi)){h=n[o];break}h||(h=function(){var a=document.createElement("style");return c.webkit&&a.appendChild(document.createTextNode("")),document.getElementsByTagName("head")[0].appendChild(a),a.sheet}()),i=function(a,b){return k(h,a,b)},k=function(a,b,c){var d,e;return a.cssRules?d=Math.max(a.cssRules.length-1,0):a.rules&&(d=Math.max(a.rules.length-1,0)),a.insertRule?a.insertRule(b+"{"+c+"}",d):a.addRule(b,c,d),h.rules?e=h.rules[d]:h.cssRules&&(e=h.cssRules[d]),e},m=function(a,b){var c,d;for(c=0;c<b.length;c++)if(b[c].cssText===a.cssText){d=c;break}return d},j=function(a){l(h,a)},l=function(a,b){var c=a.cssRules||a.rules;if(c){var d=m(b,c);a.removeRule?a.removeRule(d):a.deleteRule(d)}}}angular.module("textAngular.factories",[]).factory("taBrowserTag",[function(){return function(a){return a?""===a?void 0===c.ie?"div":c.ie<=8?"P":"p":c.ie<=8?a.toUpperCase():a:c.ie<=8?"P":"p"}}]).factory("taApplyCustomRenderers",["taCustomRenderers","taDOM",function(a,b){return function(c){var d=angular.element("<div></div>");return d[0].innerHTML=c,angular.forEach(a,function(a){var c=[];a.selector&&""!==a.selector?c=d.find(a.selector):a.customAttribute&&""!==a.customAttribute&&(c=b.getByAttribute(d,a.customAttribute)),angular.forEach(c,function(b){b=angular.element(b),a.selector&&""!==a.selector&&a.customAttribute&&""!==a.customAttribute?void 0!==b.attr(a.customAttribute)&&a.renderLogic(b):a.renderLogic(b)})}),d[0].innerHTML}}]).factory("taFixChrome",function(){var a=function(a){if(!a||!angular.isString(a)||a.length<=0)return a;for(var b,c,d,e=/<([^>\/]+?)style=("([^"]+)"|'([^']+)')([^>]*)>/gi,f="",g=0;b=e.exec(a);)c=b[3]||b[4],c&&c.match(/line-height: 1.[0-9]{3,12};|color: inherit; line-height: 1.1;/i)&&(c=c.replace(/( |)font-family: inherit;|( |)line-height: 1.[0-9]{3,12};|( |)color: inherit;/gi,""),d="<"+b[1].trim(),c.trim().length>0&&(d+=" style="+b[2].substring(0,1)+c+b[2].substring(0,1)),d+=b[5].trim()+">",f+=a.substring(g,b.index)+d,g=b.index+b[0].length);return f+=a.substring(g),g>0?f.replace(/<span\s?>(.*?)<\/span>(<br(\/|)>|)/gi,"$1"):a};return a}).factory("taSanitize",["$sanitize",function(a){function b(a,b){for(var c,d=0,e=0,f=/<[^>]*>/gi;c=f.exec(a);)if(e=c.index,"/"===c[0].substr(1,1)){if(0===d)break;d--}else d++;return b+a.substring(0,e)+angular.element(b)[0].outerHTML.substring(b.length)+a.substring(e)}function c(a){if(!a||!angular.isString(a)||a.length<=0)return a;for(var d,f,g,h,i,k,l=/<([^>\/]+?)style=("([^"]+)"|'([^']+)')([^>]*)>/gi,m="",n="",o=0;f=l.exec(a);){h=f[3]||f[4];var p=new RegExp(j,"i");if(angular.isString(h)&&p.test(h)){i="";for(var q=new RegExp(j,"ig");g=q.exec(h);)for(d=0;d<e.length;d++)g[2*d+2]&&(i+="<"+e[d].tag+">");k=c(a.substring(o,f.index)),n+=m.length>0?b(k,m):k,h=h.replace(new RegExp(j,"ig"),""),n+="<"+f[1].trim(),h.length>0&&(n+=' style="'+h+'"'),n+=f[5]+">",o=f.index+f[0].length,m=i}}return n+=m.length>0?b(a.substring(o),m):a.substring(o)}function d(a){if(!a||!angular.isString(a)||a.length<=0)return a;for(var b,c=/<([^>\/]+?)align=("([^"]+)"|'([^']+)')([^>]*)>/gi,d="",e=0;b=c.exec(a);){d+=a.substring(e,b.index),e=b.index+b[0].length;var f="<"+b[1]+b[5];/style=("([^"]+)"|'([^']+)')/gi.test(f)?f=f.replace(/style=("([^"]+)"|'([^']+)')/i,'style="$2$3 text-align:'+(b[3]||b[4])+';"'):f+=' style="text-align:'+(b[3]||b[4])+';"',f+=">",d+=f}return d+a.substring(e)}for(var e=[{property:"font-weight",values:["bold"],tag:"b"},{property:"font-style",values:["italic"],tag:"i"}],f=[],g=0;g<e.length;g++){for(var h="("+e[g].property+":\\s*(",i=0;i<e[g].values.length;i++)i>0&&(h+="|"),h+=e[g].values[i];h+=");)",f.push(h)}var j="("+f.join("|")+")";return function(b,e,f){if(!f)try{b=c(b)}catch(g){}b=d(b);var h;try{h=a(b),f&&(h=b)}catch(g){h=e||""}var i,j=h.match(/(<pre[^>]*>.*?<\/pre[^>]*>)/gi),k=h.replace(/(&#(9|10);)*/gi,""),l=/<pre[^>]*>.*?<\/pre[^>]*>/gi,m=0,n=0;for(h="";null!==(i=l.exec(k))&&m<j.length;)h+=k.substring(n,i.index)+j[m],n=i.index+i[0].length,m++;return h+k.substring(n)}}]).factory("taToolExecuteAction",["$q","$log",function(a,b){return function(c){void 0!==c&&(this.$editor=function(){return c});var d,e=a.defer(),f=e.promise,g=this.$editor();try{d=this.action(e,g.startAction()),f["finally"](function(){g.endAction.call(g)})}catch(h){b.error(h)}(d||void 0===d)&&e.resolve()}}]),angular.module("textAngular.DOM",["textAngular.factories"]).factory("taExecCommand",["taSelection","taBrowserTag","$document",function(a,b,c){var d=function(b,c){var d,e,f=b.find("li");for(e=f.length-1;e>=0;e--)d=angular.element("<"+c+">"+f[e].innerHTML+"</"+c+">"),b.after(d);b.remove(),a.setSelectionToElementEnd(d[0])},g=function(b){/(<br(|\/)>)$/i.test(b.innerHTML.trim())?a.setSelectionBeforeElement(angular.element(b).find("br")[0]):a.setSelectionToElementEnd(b)},h=function(a,b){var c=angular.element("<"+b+">"+a[0].innerHTML+"</"+b+">");a.after(c),a.remove(),g(c.find("li")[0])},i=function(a,c,d){for(var e="",f=0;f<a.length;f++)e+="<"+b("li")+">"+a[f].innerHTML+"</"+b("li")+">";var h=angular.element("<"+d+">"+e+"</"+d+">");c.after(h),c.remove(),g(h.find("li")[0])};return function(g,j){return g=b(g),function(k,l,m,n){var o,p,q,r,s,t,u,v=angular.element("<"+g+">");try{u=a.getSelectionElement()}catch(w){}var x=angular.element(u);if(void 0!==u){var y=u.tagName.toLowerCase();if("insertorderedlist"===k.toLowerCase()||"insertunorderedlist"===k.toLowerCase()){var z=b("insertorderedlist"===k.toLowerCase()?"ol":"ul");if(y===z)return d(x,g);if("li"===y&&x.parent()[0].tagName.toLowerCase()===z&&1===x.parent().children().length)return d(x.parent(),g);if("li"===y&&x.parent()[0].tagName.toLowerCase()!==z&&1===x.parent().children().length)return h(x.parent(),z);if(y.match(e)&&!x.hasClass("ta-bind")){if("ol"===y||"ul"===y)return h(x,z);var A=!1;return angular.forEach(x.children(),function(a){a.tagName.match(e)&&(A=!0)}),A?i(x.children(),x,z):i([angular.element("<div>"+u.innerHTML+"</div>")[0]],x,z)}if(y.match(e)){if(r=a.getOnlySelectedElements(),0===r.length)p=angular.element("<"+z+"><li>"+u.innerHTML+"</li></"+z+">"),x.html(""),x.append(p);else{if(1===r.length&&("ol"===r[0].tagName.toLowerCase()||"ul"===r[0].tagName.toLowerCase()))return r[0].tagName.toLowerCase()===z?d(angular.element(r[0]),g):h(angular.element(r[0]),z);q="";var B=[];for(o=0;o<r.length;o++)if(3!==r[o].nodeType){var C=angular.element(r[o]);if("li"===r[o].tagName.toLowerCase())continue;q+="ol"===r[o].tagName.toLowerCase()||"ul"===r[o].tagName.toLowerCase()?C[0].innerHTML:"span"!==r[o].tagName.toLowerCase()||"ol"!==r[o].childNodes[0].tagName.toLowerCase()&&"ul"!==r[o].childNodes[0].tagName.toLowerCase()?"<"+b("li")+">"+C[0].innerHTML+"</"+b("li")+">":C[0].childNodes[0].innerHTML,B.unshift(C)}p=angular.element("<"+z+">"+q+"</"+z+">"),B.pop().replaceWith(p),angular.forEach(B,function(a){a.remove()})}return void a.setSelectionToElementEnd(p[0])}}else{if("formatblock"===k.toLowerCase()){for(t=m.toLowerCase().replace(/[<>]/gi,""),"default"===t.trim()&&(t=g,m="<"+g+">"),p="li"===y?x.parent():x;!p[0].tagName||!p[0].tagName.match(e)&&!p.parent().attr("contenteditable");)p=p.parent(),y=(p[0].tagName||"").toLowerCase();if(y===t){r=p.children();var D=!1;for(o=0;o<r.length;o++)D=D||r[o].tagName.match(e);D?(p.after(r),s=p.next(),p.remove(),p=s):(v.append(p[0].childNodes),p.after(v),p.remove(),p=v)}else if(p.parent()[0].tagName.toLowerCase()!==t||p.parent().hasClass("ta-bind"))if(y.match(f))p.wrap(m);else{for(r=a.getOnlySelectedElements(),0===r.length&&(r=[p[0]]),o=0;o<r.length;o++)if(3===r[o].nodeType||!r[o].tagName.match(e))for(;3===r[o].nodeType||!r[o].tagName||!r[o].tagName.match(e);)r[o]=r[o].parentNode;if(angular.element(r[0]).hasClass("ta-bind"))p=angular.element(m),p[0].innerHTML=r[0].innerHTML,r[0].innerHTML=p[0].outerHTML;else if("blockquote"===t){for(q="",o=0;o<r.length;o++)q+=r[o].outerHTML;for(p=angular.element(m),p[0].innerHTML=q,r[0].parentNode.insertBefore(p[0],r[0]),o=r.length-1;o>=0;o--)r[o].parentNode&&r[o].parentNode.removeChild(r[o])}else for(o=0;o<r.length;o++)p=angular.element(m),p[0].innerHTML=r[o].innerHTML,r[o].parentNode.insertBefore(p[0],r[o]),r[o].parentNode.removeChild(r[o])}else{var E=p.parent(),F=E.contents();for(o=0;o<F.length;o++)E.parent().hasClass("ta-bind")&&3===F[o].nodeType&&(v=angular.element("<"+g+">"),v[0].innerHTML=F[o].outerHTML,F[o]=v[0]),E.parent()[0].insertBefore(F[o],E[0]);E.remove()}return void a.setSelectionToElementEnd(p[0])}if("createlink"===k.toLowerCase()){var G='<a href="'+m+'" target="'+(n.a.target?n.a.target:"")+'">',H="</a>",I=a.getSelection();if(I.collapsed)a.insertHtml(G+m+H,j);else if(rangy.getSelection().getRangeAt(0).canSurroundContents()){var J=angular.element(G+H)[0];rangy.getSelection().getRangeAt(0).surroundContents(J)}return}if("inserthtml"===k.toLowerCase())return void a.insertHtml(m,j)}}try{c[0].execCommand(k,l,m)}catch(w){}}}}]).service("taSelection",["$window","$document","taDOM",function(a,b,c){var d=b[0],f=a.rangy,h=function(a,b){return a.tagName&&a.tagName.match(/^br$/i)&&0===b&&!a.previousSibling?{element:a.parentNode,offset:0}:{element:a,offset:b}},i={getSelection:function(){var a=f.getSelection().getRangeAt(0),b=a.commonAncestorContainer,c={start:h(a.startContainer,a.startOffset),end:h(a.endContainer,a.endOffset),collapsed:a.collapsed};return b=3===b.nodeType?b.parentNode:b,c.container=b.parentNode===c.start.element||b.parentNode===c.end.element?b.parentNode:b,c},getOnlySelectedElements:function(){var a=f.getSelection().getRangeAt(0),b=a.commonAncestorContainer;return b=3===b.nodeType?b.parentNode:b,a.getNodes([1],function(a){return a.parentNode===b})},getSelectionElement:function(){return i.getSelection().container},setSelection:function(a,b,c){var d=f.createRange();d.setStart(a,b),d.setEnd(a,c),f.getSelection().setSingleRange(d)},setSelectionBeforeElement:function(a){var b=f.createRange();b.selectNode(a),b.collapse(!0),f.getSelection().setSingleRange(b)},setSelectionAfterElement:function(a){var b=f.createRange();b.selectNode(a),b.collapse(!1),f.getSelection().setSingleRange(b)},setSelectionToElementStart:function(a){var b=f.createRange();b.selectNodeContents(a),b.collapse(!0),f.getSelection().setSingleRange(b)},setSelectionToElementEnd:function(a){var b=f.createRange();b.selectNodeContents(a),b.collapse(!1),a.childNodes&&a.childNodes[a.childNodes.length-1]&&"br"===a.childNodes[a.childNodes.length-1].nodeName&&(b.startOffset=b.endOffset=b.startOffset-1),f.getSelection().setSingleRange(b)},insertHtml:function(a,b){var h,j,k,l,m,n,o,p=angular.element("<div>"+a+"</div>"),q=f.getSelection().getRangeAt(0),r=d.createDocumentFragment(),s=p[0].childNodes,t=!0;if(s.length>0){for(l=[],k=0;k<s.length;k++)"p"===s[k].nodeName.toLowerCase()&&""===s[k].innerHTML.trim()||3===s[k].nodeType&&""===s[k].nodeValue.trim()||(t=t&&!e.test(s[k].nodeName),l.push(s[k]));for(var u=0;u<l.length;u++)n=r.appendChild(l[u]);!t&&q.collapsed&&/^(|<br(|\/)>)$/i.test(q.startContainer.innerHTML)&&q.selectNode(q.startContainer)}else t=!0,n=r=d.createTextNode(a);if(t)q.deleteContents();else if(q.collapsed&&q.startContainer!==b)if(q.startContainer.innerHTML&&q.startContainer.innerHTML.match(/^<[^>]*>$/i))h=q.startContainer,1===q.startOffset?(q.setStartAfter(h),q.setEndAfter(h)):(q.setStartBefore(h),q.setEndBefore(h));else{if(3===q.startContainer.nodeType&&q.startContainer.parentNode!==b)for(h=q.startContainer.parentNode,j=h.cloneNode(),c.splitNodes(h.childNodes,h,j,q.startContainer,q.startOffset);!g.test(h.nodeName);){angular.element(h).after(j),h=h.parentNode;var v=j;j=h.cloneNode(),c.splitNodes(h.childNodes,h,j,v)}else h=q.startContainer,j=h.cloneNode(),c.splitNodes(h.childNodes,h,j,void 0,void 0,q.startOffset);if(angular.element(h).after(j),q.setStartAfter(h),q.setEndAfter(h),/^(|<br(|\/)>)$/i.test(h.innerHTML.trim())&&(q.setStartBefore(h),q.setEndBefore(h),angular.element(h).remove()),/^(|<br(|\/)>)$/i.test(j.innerHTML.trim())&&angular.element(j).remove(),"li"===h.nodeName.toLowerCase()){for(o=d.createDocumentFragment(),m=0;m<r.childNodes.length;m++)p=angular.element("<li>"),c.transferChildNodes(r.childNodes[m],p[0]),c.transferNodeAttributes(r.childNodes[m],p[0]),o.appendChild(p[0]);r=o,n&&(n=r.childNodes[r.childNodes.length-1],n=n.childNodes[n.childNodes.length-1])}}else q.deleteContents();q.insertNode(r),n&&i.setSelectionToElementEnd(n)}};return i}]).service("taDOM",function(){var a={getByAttribute:function(b,c){var d=[],e=b.children();return e.length&&angular.forEach(e,function(b){d=d.concat(a.getByAttribute(angular.element(b),c))}),void 0!==b.attr(c)&&d.push(b),d},transferChildNodes:function(a,b){for(b.innerHTML="";a.childNodes.length>0;)b.appendChild(a.childNodes[0]);return b},splitNodes:function(b,c,d,e,f,g){if(!e&&isNaN(g))throw new Error("taDOM.splitNodes requires a splitNode or splitIndex");for(var h=document.createDocumentFragment(),i=document.createDocumentFragment(),j=0;b.length>0&&(isNaN(g)||g!==j)&&b[0]!==e;)h.appendChild(b[0]),j++;for(!isNaN(f)&&f>=0&&b[0]&&(h.appendChild(document.createTextNode(b[0].nodeValue.substring(0,f))),b[0].nodeValue=b[0].nodeValue.substring(f));b.length>0;)i.appendChild(b[0]);a.transferChildNodes(h,c),a.transferChildNodes(i,d)},transferNodeAttributes:function(a,b){for(var c=0;c<a.attributes.length;c++)b.setAttribute(a.attributes[c].name,a.attributes[c].value);return b}};return a}),angular.module("textAngular.validators",[]).directive("taMaxText",function(){return{restrict:"A",require:"ngModel",link:function(a,b,c,d){var e=parseInt(a.$eval(c.taMaxText));if(isNaN(e))throw"Max text must be an integer";c.$observe("taMaxText",function(a){if(e=parseInt(a),isNaN(e))throw"Max text must be an integer";d.$dirty&&d.$validate()}),d.$validators.taMaxText=function(a){var b=angular.element("<div/>");return b.html(a),b.text().length<=e}}}}).directive("taMinText",function(){return{restrict:"A",require:"ngModel",link:function(a,b,c,d){var e=parseInt(a.$eval(c.taMinText));if(isNaN(e))throw"Min text must be an integer";c.$observe("taMinText",function(a){if(e=parseInt(a),isNaN(e))throw"Min text must be an integer";d.$dirty&&d.$validate()}),d.$validators.taMinText=function(a){var b=angular.element("<div/>");return b.html(a),!b.text().length||b.text().length>=e}}}}),angular.module("textAngular.taBind",["textAngular.factories","textAngular.DOM"]).service("_taBlankTest",[function(){var a=/<(a|abbr|acronym|bdi|bdo|big|cite|code|del|dfn|img|ins|kbd|label|map|mark|q|ruby|rp|rt|s|samp|time|tt|var)[^>]*(>|$)/i;return function(b){return function(c){if(!c)return!0;var d,e=/(^[^<]|>)[^<]/i.exec(c);return e?d=e.index:(c=c.toString().replace(/="[^"]*"/i,"").replace(/="[^"]*"/i,"").replace(/="[^"]*"/i,"").replace(/="[^"]*"/i,""),d=c.indexOf(">")),c=c.trim().substring(d,d+100),/^[^<>]+$/i.test(c)?!1:0===c.length||c===b||/^>(\s|&nbsp;)*<\/[^>]+>$/gi.test(c)?!0:/>\s*[^\s<]/i.test(c)||a.test(c)?!1:!0}}}]).directive("taButton",[function(){return{link:function(a,b){b.attr("unselectable","on"),b.on("mousedown",function(a,b){return b&&angular.extend(a,b),a.preventDefault(),!1})}}}]).directive("taBind",["taSanitize","$timeout","$window","$document","taFixChrome","taBrowserTag","taSelection","taSelectableElements","taApplyCustomRenderers","taOptions","_taBlankTest","$parse","taDOM",function(a,b,f,h,k,l,m,n,o,q,r,s,t){return{priority:2,require:["ngModel","?ngModelOptions"],link:function(l,u,v,w){var x,y,z,A,B=w[0],C=w[1]||{},D=void 0!==u.attr("contenteditable")&&u.attr("contenteditable"),E=D||"textarea"===u[0].tagName.toLowerCase()||"input"===u[0].tagName.toLowerCase(),F=!1,G=!1,H=!1,I=v.taUnsafeSanitizer||q.disableSanitizer,J=/^(9|19|20|27|33|34|35|36|37|38|39|40|45|112|113|114|115|116|117|118|119|120|121|122|123|144|145)$/i,K=/^(8|13|32|46|59|61|107|109|186|187|188|189|190|191|192|219|220|221|222)$/i;void 0===v.taDefaultWrap&&(v.taDefaultWrap="p"),""===v.taDefaultWrap?(z="",A=void 0===c.ie?"<div><br></div>":c.ie>=11?"<p><br></p>":c.ie<=8?"<P>&nbsp;</P>":"<p>&nbsp;</p>"):(z=void 0===c.ie||c.ie>=11?"<"+v.taDefaultWrap+"><br></"+v.taDefaultWrap+">":c.ie<=8?"<"+v.taDefaultWrap.toUpperCase()+"></"+v.taDefaultWrap.toUpperCase()+">":"<"+v.taDefaultWrap+"></"+v.taDefaultWrap+">",A=void 0===c.ie||c.ie>=11?"<"+v.taDefaultWrap+"><br></"+v.taDefaultWrap+">":c.ie<=8?"<"+v.taDefaultWrap.toUpperCase()+">&nbsp;</"+v.taDefaultWrap.toUpperCase()+">":"<"+v.taDefaultWrap+">&nbsp;</"+v.taDefaultWrap+">"),C.$options||(C.$options={});var L=r(A),M=function(a){if(L(a))return a;var b=angular.element("<div>"+a+"</div>");if(0===b.children().length)a="<"+v.taDefaultWrap+">"+a+"</"+v.taDefaultWrap+">";else{var c,d=b[0].childNodes,f=!1;for(c=0;c<d.length&&!(f=d[c].nodeName.toLowerCase().match(e));c++);if(f)for(a="",c=0;c<d.length;c++)if(d[c].nodeName.toLowerCase().match(e))a+=d[c].outerHTML;else{var g=d[c].outerHTML||d[c].nodeValue;a+=""!==g.trim()?"<"+v.taDefaultWrap+">"+g+"</"+v.taDefaultWrap+">":g}else a="<"+v.taDefaultWrap+">"+a+"</"+v.taDefaultWrap+">"}return a};v.taPaste&&(y=s(v.taPaste)),u.addClass("ta-bind");var N;l["$undoManager"+(v.id||"")]=B.$undoManager={_stack:[],_index:0,_max:1e3,push:function(a){return"undefined"==typeof a||null===a||"undefined"!=typeof this.current()&&null!==this.current()&&a===this.current()?a:(this._index<this._stack.length-1&&(this._stack=this._stack.slice(0,this._index+1)),this._stack.push(a),N&&b.cancel(N),this._stack.length>this._max&&this._stack.shift(),this._index=this._stack.length-1,a)},undo:function(){return this.setToIndex(this._index-1)},redo:function(){return this.setToIndex(this._index+1)},setToIndex:function(a){return 0>a||a>this._stack.length-1?void 0:(this._index=a,this.current())},current:function(){return this._stack[this._index]}};var O,P=l["$undoTaBind"+(v.id||"")]=function(){if(!F&&D){var a=B.$undoManager.undo();"undefined"!=typeof a&&null!==a&&(cb(a),S(a,!1),O&&b.cancel(O),O=b(function(){u[0].focus(),m.setSelectionToElementEnd(u[0])},1))}},Q=l["$redoTaBind"+(v.id||"")]=function(){if(!F&&D){var a=B.$undoManager.redo();"undefined"!=typeof a&&null!==a&&(cb(a),S(a,!1),O&&b.cancel(O),O=b(function(){u[0].focus(),m.setSelectionToElementEnd(u[0])},1))}},R=function(){if(D)return u[0].innerHTML;if(E)return u.val();throw"textAngular Error: attempting to update non-editable taBind"},S=function(a,b,c){H=c||!1,("undefined"==typeof b||null===b)&&(b=!0&&D),("undefined"==typeof a||null===a)&&(a=R()),L(a)?(""!==B.$viewValue&&B.$setViewValue(""),b&&""!==B.$undoManager.current()&&B.$undoManager.push("")):(bb(),B.$viewValue!==a&&(B.$setViewValue(a),b&&B.$undoManager.push(a))),B.$render()};l["updateTaBind"+(v.id||"")]=function(){F||S(void 0,void 0,!0)};var T=function(b){return B.$oldViewValue=a(k(b),B.$oldViewValue,I)};if(u.attr("required")&&(B.$validators.required=function(a,b){return!L(a||b)}),B.$parsers.push(T),B.$parsers.unshift(M),B.$formatters.push(T),B.$formatters.unshift(M),B.$formatters.unshift(function(a){return B.$undoManager.push(a||"")}),E)if(l.events={},D){var U=!1,V=function(c){if(c&&c.trim().length){if(c.match(/class=["']*Mso(Normal|List)/i)){var d=c.match(/<!--StartFragment-->([\s\S]*?)<!--EndFragment-->/i);d=d?d[1]:c,d=d.replace(/<o:p>[\s\S]*?<\/o:p>/gi,"").replace(/class=(["']|)MsoNormal(["']|)/gi,"");var e=angular.element("<div>"+d+"</div>"),f=angular.element("<div></div>"),g={element:null,lastIndent:[],lastLi:null,isUl:!1};g.lastIndent.peek=function(){var a=this.length;return a>0?this[a-1]:void 0};for(var h=function(a){g.isUl=a,g.element=angular.element(a?"<ul>":"<ol>"),g.lastIndent=[],g.lastIndent.peek=function(){var a=this.length;return a>0?this[a-1]:void 0},g.lastLevelMatch=null},i=0;i<=e[0].childNodes.length;i++)if(e[0].childNodes[i]&&"#text"!==e[0].childNodes[i].nodeName&&"p"===e[0].childNodes[i].tagName.toLowerCase()){var j=angular.element(e[0].childNodes[i]),k=(j.attr("class")||"").match(/MsoList(Bullet|Number|Paragraph)(CxSp(First|Middle|Last)|)/i);if(k){if(j[0].childNodes.length<2||j[0].childNodes[1].childNodes.length<1)continue;var n="bullet"===k[1].toLowerCase()||"number"!==k[1].toLowerCase()&&!(/^[^0-9a-z<]*[0-9a-z]+[^0-9a-z<>]</i.test(j[0].childNodes[1].innerHTML)||/^[^0-9a-z<]*[0-9a-z]+[^0-9a-z<>]</i.test(j[0].childNodes[1].childNodes[0].innerHTML)),o=(j.attr("style")||"").match(/margin-left:([\-\.0-9]*)/i),p=parseFloat(o?o[1]:0),q=(j.attr("style")||"").match(/mso-list:l([0-9]+) level([0-9]+) lfo[0-9+]($|;)/i);if(q&&q[2]&&(p=parseInt(q[2])),q&&(!g.lastLevelMatch||q[1]!==g.lastLevelMatch[1])||!k[3]||"first"===k[3].toLowerCase()||null===g.lastIndent.peek()||g.isUl!==n&&g.lastIndent.peek()===p)h(n),f.append(g.element);else if(null!=g.lastIndent.peek()&&g.lastIndent.peek()<p)g.element=angular.element(n?"<ul>":"<ol>"),g.lastLi.append(g.element);else if(null!=g.lastIndent.peek()&&g.lastIndent.peek()>p){for(;null!=g.lastIndent.peek()&&g.lastIndent.peek()>p;)if("li"!==g.element.parent()[0].tagName.toLowerCase()){if(!/[uo]l/i.test(g.element.parent()[0].tagName.toLowerCase()))break;g.element=g.element.parent(),g.lastIndent.pop()}else g.element=g.element.parent();g.isUl="ul"===g.element[0].tagName.toLowerCase(),n!==g.isUl&&(h(n),f.append(g.element))}g.lastLevelMatch=q,p!==g.lastIndent.peek()&&g.lastIndent.push(p),g.lastLi=angular.element("<li>"),g.element.append(g.lastLi),g.lastLi.html(j.html().replace(/<!(--|)\[if !supportLists\](--|)>[\s\S]*?<!(--|)\[endif\](--|)>/gi,"")),j.remove()}else h(!1),f.append(j)}var r=function(a){a=angular.element(a);for(var b=a[0].childNodes.length-1;b>=0;b--)a.after(a[0].childNodes[b]);a.remove()};angular.forEach(f.find("span"),function(a){a.removeAttribute("lang"),a.attributes.length<=0&&r(a)}),angular.forEach(f.find("font"),r),c=f.html()}else{if(c=c.replace(/<(|\/)meta[^>]*?>/gi,""),c.match(/<[^>]*?(ta-bind)[^>]*?>/)){if(c.match(/<[^>]*?(text-angular)[^>]*?>/)){var s=angular.element("<div>"+c+"</div>");s.find("textarea").remove();for(var v=t.getByAttribute(s,"ta-bind"),w=0;w<v.length;w++){for(var x=v[w][0].parentNode.parentNode,z=0;z<v[w][0].childNodes.length;z++)x.parentNode.insertBefore(v[w][0].childNodes[z],x);x.parentNode.removeChild(x)}c=s.html().replace('<br class="Apple-interchange-newline">',"")}}else c.match(/^<span/)&&(c=c.replace(/<(|\/)span[^>]*?>/gi,""));c=c.replace(/<br class="Apple-interchange-newline"[^>]*?>/gi,"").replace(/<span class="Apple-converted-space">( |&nbsp;)<\/span>/gi,"&nbsp;")}/<li(\s.*)?>/i.test(c)&&/(<ul(\s.*)?>|<ol(\s.*)?>).*<li(\s.*)?>/i.test(c)===!1&&(c=c.replace(/<li(\s.*)?>.*<\/li(\s.*)?>/i,"<ul>$&</ul>")),y&&(c=y(l,{$html:c})||c),c=a(c,"",I),m.insertHtml(c,u[0]),b(function(){B.$setViewValue(R()),U=!1,u.removeClass("processing-paste")},0)}else U=!1,u.removeClass("processing-paste")};u.on("paste",l.events.paste=function(a,c){if(c&&angular.extend(a,c),F||U)return a.stopPropagation(),a.preventDefault(),!1;U=!0,u.addClass("processing-paste");var d,e=(a.originalEvent||a).clipboardData;if(e&&e.getData&&e.types.length>0){for(var g="",i=0;i<e.types.length;i++)g+=" "+e.types[i];return/text\/html/i.test(g)?d=e.getData("text/html"):/text\/plain/i.test(g)&&(d=e.getData("text/plain")),V(d),a.stopPropagation(),a.preventDefault(),!1}var j=f.rangy.saveSelection(),k=angular.element('<div class="ta-hidden-input" contenteditable="true"></div>');h.find("body").append(k),k[0].focus(),b(function(){f.rangy.restoreSelection(j),V(k[0].innerHTML),u[0].focus(),k.remove()},0)}),u.on("cut",l.events.cut=function(a){F?a.preventDefault():b(function(){B.$setViewValue(R())},0)}),u.on("keydown",l.events.keydown=function(a,b){if(b&&angular.extend(a,b),!F)if(a.altKey||!a.metaKey&&!a.ctrlKey){if(13===a.keyCode&&!a.shiftKey){var c,d=m.getSelectionElement();if(!d.tagName.match(g))return;var e=angular.element(z);if(/^<br(|\/)>$/i.test(d.innerHTML.trim())&&"blockquote"===d.parentNode.tagName.toLowerCase()&&!d.nextSibling){c=angular.element(d);var f=c.parent();f.after(e),c.remove(),0===f.children().length&&f.remove(),m.setSelectionToElementStart(e[0]),a.preventDefault()}else/^<[^>]+><br(|\/)><\/[^>]+>$/i.test(d.innerHTML.trim())&&"blockquote"===d.tagName.toLowerCase()&&(c=angular.element(d),c.after(e),c.remove(),m.setSelectionToElementStart(e[0]),a.preventDefault())}}else 90!==a.keyCode||a.shiftKey?(90===a.keyCode&&a.shiftKey||89===a.keyCode&&!a.shiftKey)&&(Q(),a.preventDefault()):(P(),a.preventDefault())});var W;if(u.on("keyup",l.events.keyup=function(a,c){if(c&&angular.extend(a,c),9===a.keyCode){var d=m.getSelection();return void(d.start.element===u[0]&&u.children().length&&m.setSelectionToElementStart(u.children()[0]))}if(N&&b.cancel(N),!F&&!J.test(a.keyCode)){if(""!==z&&13===a.keyCode&&!a.shiftKey){for(var e=m.getSelectionElement();!e.tagName.match(g)&&e!==u[0];)e=e.parentNode;if(e.tagName.toLowerCase()!==v.taDefaultWrap&&"li"!==e.tagName.toLowerCase()&&(""===e.innerHTML.trim()||"<br>"===e.innerHTML.trim())){var h=angular.element(z);angular.element(e).replaceWith(h),m.setSelectionToElementStart(h[0])}}var i=R();if(""!==z&&""===i.trim())cb(z),m.setSelectionToElementStart(u.children()[0]);else if("<"!==i.substring(0,1)&&""!==v.taDefaultWrap){var j=f.rangy.saveSelection();i=R(),i="<"+v.taDefaultWrap+">"+i+"</"+v.taDefaultWrap+">",cb(i),f.rangy.restoreSelection(j)}var k=x!==a.keyCode&&K.test(a.keyCode);W&&b.cancel(W),W=b(function(){S(i,k,!0)},C.$options.debounce||400),k||(N=b(function(){B.$undoManager.push(i)},250)),x=a.keyCode}}),u.on("blur",l.events.blur=function(){G=!1,F?(H=!0,B.$render()):S(void 0,void 0,!0)}),v.placeholder&&(c.ie>8||void 0===c.ie)){var X;if(!v.id)throw"textAngular Error: An unique ID is required for placeholders to work";X=i("#"+v.id+".placeholder-text:before",'content: "'+v.placeholder+'"'),l.$on("$destroy",function(){j(X)})}u.on("focus",l.events.focus=function(){G=!0,u.removeClass("placeholder-text")}),u.on("mouseup",l.events.mouseup=function(){var a=m.getSelection();a.start.element===u[0]&&u.children().length&&m.setSelectionToElementStart(u.children()[0])}),u.on("mousedown",l.events.mousedown=function(a,b){b&&angular.extend(a,b),a.stopPropagation()})}else{u.on("change blur",l.events.change=l.events.blur=function(){F||B.$setViewValue(R())}),u.on("keydown",l.events.keydown=function(a,b){if(b&&angular.extend(a,b),9===a.keyCode){var c=this.selectionStart,d=this.selectionEnd,e=u.val();if(a.shiftKey){var f=e.lastIndexOf("\n",c),g=e.lastIndexOf("	",c);-1!==g&&g>=f&&(u.val(e.substring(0,g)+e.substring(g+1)),this.selectionStart=this.selectionEnd=c-1)}else u.val(e.substring(0,c)+"	"+e.substring(d)),this.selectionStart=this.selectionEnd=c+1;a.preventDefault()}});var Y=function(a,b){for(var c="",d=0;b>d;d++)c+=a;return c},Z=function(a,b){var c="",d=a.childNodes;b++,c+=Y("	",b-1)+a.outerHTML.substring(0,a.outerHTML.indexOf("<li"));for(var e=0;e<d.length;e++)d[e].outerHTML&&(c+="ul"===d[e].nodeName.toLowerCase()||"ol"===d[e].nodeName.toLowerCase()?"\n"+Z(d[e],b):"\n"+Y("	",b)+d[e].outerHTML);return c+="\n"+Y("	",b-1)+a.outerHTML.substring(a.outerHTML.lastIndexOf("<"))};B.$formatters.unshift(function(a){var b=angular.element("<div>"+a+"</div>")[0].childNodes;if(b.length>0){a="";for(var c=0;c<b.length;c++)b[c].outerHTML&&(a.length>0&&(a+="\n"),a+="ul"===b[c].nodeName.toLowerCase()||"ol"===b[c].nodeName.toLowerCase()?""+Z(b[c],0):""+b[c].outerHTML)}return a})}var $,_=function(a){return l.$emit("ta-element-select",this),a.preventDefault(),!1},ab=function(a,c){if(c&&angular.extend(a,c),!p&&!F){p=!0;var d;d=a.originalEvent?a.originalEvent.dataTransfer:a.dataTransfer,l.$emit("ta-drop-event",this,a,d),b(function(){p=!1,S(void 0,void 0,!0)},100)}},bb=l["reApplyOnSelectorHandlers"+(v.id||"")]=function(){F||angular.forEach(n,function(a){u.find(a).off("click",_).on("click",_)})},cb=function(a){u[0].innerHTML=a},db=!1;B.$render=function(){if(!db){db=!0;var a=B.$viewValue||"";H||(D&&G&&(u.removeClass("placeholder-text"),$&&b.cancel($),$=b(function(){G||(u[0].focus(),m.setSelectionToElementEnd(u.children()[u.children().length-1])),$=void 0},1)),D?(cb(v.placeholder?""===a?z:a:""===a?z:a),F?u.off("drop",ab):(bb(),u.on("drop",ab))):"textarea"!==u[0].tagName.toLowerCase()&&"input"!==u[0].tagName.toLowerCase()?cb(o(a)):u.val(a)),D&&v.placeholder&&(""===a?G?u.removeClass("placeholder-text"):u.addClass("placeholder-text"):u.removeClass("placeholder-text")),db=H=!1}},v.taReadonly&&(F=l.$eval(v.taReadonly),F?(u.addClass("ta-readonly"),("textarea"===u[0].tagName.toLowerCase()||"input"===u[0].tagName.toLowerCase())&&u.attr("disabled","disabled"),void 0!==u.attr("contenteditable")&&u.attr("contenteditable")&&u.removeAttr("contenteditable")):(u.removeClass("ta-readonly"),"textarea"===u[0].tagName.toLowerCase()||"input"===u[0].tagName.toLowerCase()?u.removeAttr("disabled"):D&&u.attr("contenteditable","true")),l.$watch(v.taReadonly,function(a,b){b!==a&&(a?(u.addClass("ta-readonly"),("textarea"===u[0].tagName.toLowerCase()||"input"===u[0].tagName.toLowerCase())&&u.attr("disabled","disabled"),void 0!==u.attr("contenteditable")&&u.attr("contenteditable")&&u.removeAttr("contenteditable"),angular.forEach(n,function(a){u.find(a).on("click",_)}),u.off("drop",ab)):(u.removeClass("ta-readonly"),"textarea"===u[0].tagName.toLowerCase()||"input"===u[0].tagName.toLowerCase()?u.removeAttr("disabled"):D&&u.attr("contenteditable","true"),angular.forEach(n,function(a){u.find(a).off("click",_)}),u.on("drop",ab)),F=a)})),D&&!F&&(angular.forEach(n,function(a){u.find(a).on("click",_)}),u.on("drop",ab),u.on("blur",function(){c.webkit&&(d=!0)}))}}}]);var p=!1,q=angular.module("textAngular",["ngSanitize","textAngularSetup","textAngular.factories","textAngular.DOM","textAngular.validators","textAngular.taBind"]),r={};q.constant("taRegisterTool",b),q.value("taTools",r),q.config([function(){angular.forEach(r,function(a,b){delete r[b]})}]),q.run([function(){if(!window.rangy)throw"rangy-core.js and rangy-selectionsaverestore.js are required for textAngular to work correctly, rangy-core is not yet loaded.";if(window.rangy.init(),!window.rangy.saveSelection)throw"rangy-selectionsaverestore.js is required for textAngular to work correctly."}]),q.directive("textAngular",["$compile","$timeout","taOptions","taSelection","taExecCommand","textAngularManager","$window","$document","$animate","$log","$q","$parse",function(a,b,c,d,e,f,g,h,i,j,k,l){return{require:"?ngModel",scope:{},restrict:"EA",priority:2,link:function(m,n,o,p){var q,r,s,t,u,v,w,x,y,z,A,B=o.serial?o.serial:Math.floor(1e16*Math.random());
m._name=o.name?o.name:"textAngularEditor"+B;var C=function(a,c,d){b(function(){var b=function(){a.off(c,b),d.apply(this,arguments)};a.on(c,b)},100)};if(y=e(o.taDefaultWrap),angular.extend(m,angular.copy(c),{wrapSelection:function(a,b,c){"undo"===a.toLowerCase()?m["$undoTaBindtaTextElement"+B]():"redo"===a.toLowerCase()?m["$redoTaBindtaTextElement"+B]():(y(a,!1,b,m.defaultTagAttributes),c&&m["reApplyOnSelectorHandlerstaTextElement"+B](),m.displayElements.text[0].focus())},showHtml:m.$eval(o.taShowHtml)||!1}),o.taFocussedClass&&(m.classes.focussed=o.taFocussedClass),o.taTextEditorClass&&(m.classes.textEditor=o.taTextEditorClass),o.taHtmlEditorClass&&(m.classes.htmlEditor=o.taHtmlEditorClass),o.taDefaultTagAttributes)try{angular.extend(m.defaultTagAttributes,angular.fromJson(o.taDefaultTagAttributes))}catch(D){j.error(D)}o.taTextEditorSetup&&(m.setup.textEditorSetup=m.$parent.$eval(o.taTextEditorSetup)),o.taHtmlEditorSetup&&(m.setup.htmlEditorSetup=m.$parent.$eval(o.taHtmlEditorSetup)),m.fileDropHandler=o.taFileDrop?m.$parent.$eval(o.taFileDrop):m.defaultFileDropHandler,w=n[0].innerHTML,n[0].innerHTML="",m.displayElements={forminput:angular.element("<input type='hidden' tabindex='-1' style='display: none;'>"),html:angular.element("<textarea></textarea>"),text:angular.element("<div></div>"),scrollWindow:angular.element("<div class='ta-scroll-window'></div>"),popover:angular.element('<div class="popover fade bottom" style="max-width: none; width: 305px;"></div>'),popoverArrow:angular.element('<div class="arrow"></div>'),popoverContainer:angular.element('<div class="popover-content"></div>'),resize:{overlay:angular.element('<div class="ta-resizer-handle-overlay"></div>'),background:angular.element('<div class="ta-resizer-handle-background"></div>'),anchors:[angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-tl"></div>'),angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-tr"></div>'),angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-bl"></div>'),angular.element('<div class="ta-resizer-handle-corner ta-resizer-handle-corner-br"></div>')],info:angular.element('<div class="ta-resizer-handle-info"></div>')}},m.displayElements.popover.append(m.displayElements.popoverArrow),m.displayElements.popover.append(m.displayElements.popoverContainer),m.displayElements.scrollWindow.append(m.displayElements.popover),m.displayElements.popover.on("mousedown",function(a,b){return b&&angular.extend(a,b),a.preventDefault(),!1}),m.showPopover=function(a){m.displayElements.popover.css("display","block"),m.reflowPopover(a),i.addClass(m.displayElements.popover,"in"),C(h.find("body"),"click keyup",function(){m.hidePopover()})},m.reflowPopover=function(a){m.displayElements.text[0].offsetHeight-51>a[0].offsetTop?(m.displayElements.popover.css("top",a[0].offsetTop+a[0].offsetHeight+m.displayElements.scrollWindow[0].scrollTop+"px"),m.displayElements.popover.removeClass("top").addClass("bottom")):(m.displayElements.popover.css("top",a[0].offsetTop-54+m.displayElements.scrollWindow[0].scrollTop+"px"),m.displayElements.popover.removeClass("bottom").addClass("top"));var b=m.displayElements.text[0].offsetWidth-m.displayElements.popover[0].offsetWidth,c=a[0].offsetLeft+a[0].offsetWidth/2-m.displayElements.popover[0].offsetWidth/2;m.displayElements.popover.css("left",Math.max(0,Math.min(b,c))+"px"),m.displayElements.popoverArrow.css("margin-left",Math.min(c,Math.max(0,c-b))-11+"px")},m.hidePopover=function(){var a=function(){m.displayElements.popover.css("display",""),m.displayElements.popoverContainer.attr("style",""),m.displayElements.popoverContainer.attr("class","popover-content")};k.when(i.removeClass(m.displayElements.popover,"in",a)).then(a)},m.displayElements.resize.overlay.append(m.displayElements.resize.background),angular.forEach(m.displayElements.resize.anchors,function(a){m.displayElements.resize.overlay.append(a)}),m.displayElements.resize.overlay.append(m.displayElements.resize.info),m.displayElements.scrollWindow.append(m.displayElements.resize.overlay),m.reflowResizeOverlay=function(a){a=angular.element(a)[0],m.displayElements.resize.overlay.css({display:"block",left:a.offsetLeft-5+"px",top:a.offsetTop-5+"px",width:a.offsetWidth+10+"px",height:a.offsetHeight+10+"px"}),m.displayElements.resize.info.text(a.offsetWidth+" x "+a.offsetHeight)},m.showResizeOverlay=function(a){var b=h.find("body");z=function(c){var d={width:parseInt(a.attr("width")),height:parseInt(a.attr("height")),x:c.clientX,y:c.clientY};(void 0===d.width||isNaN(d.width))&&(d.width=a[0].offsetWidth),(void 0===d.height||isNaN(d.height))&&(d.height=a[0].offsetHeight),m.hidePopover();var e=d.height/d.width,f=function(b){var c={x:Math.max(0,d.width+(b.clientX-d.x)),y:Math.max(0,d.height+(b.clientY-d.y))};if(b.shiftKey){var f=c.y/c.x;c.x=e>f?c.x:c.y/e,c.y=e>f?c.x*e:c.y}var g=angular.element(a);g.attr("height",Math.max(0,c.y)),g.attr("width",Math.max(0,c.x)),m.reflowResizeOverlay(a)};b.on("mousemove",f),C(b,"mouseup",function(c){c.preventDefault(),c.stopPropagation(),b.off("mousemove",f),m.showPopover(a)}),c.stopPropagation(),c.preventDefault()},m.displayElements.resize.anchors[3].on("mousedown",z),m.reflowResizeOverlay(a),C(b,"click",function(){m.hideResizeOverlay()})},m.hideResizeOverlay=function(){m.displayElements.resize.anchors[3].off("mousedown",z),m.displayElements.resize.overlay.css("display","")},m.setup.htmlEditorSetup(m.displayElements.html),m.setup.textEditorSetup(m.displayElements.text),m.displayElements.html.attr({id:"taHtmlElement"+B,"ng-show":"showHtml","ta-bind":"ta-bind","ng-model":"html","ng-model-options":n.attr("ng-model-options")}),m.displayElements.text.attr({id:"taTextElement"+B,contentEditable:"true","ta-bind":"ta-bind","ng-model":"html","ng-model-options":n.attr("ng-model-options")}),m.displayElements.scrollWindow.attr({"ng-hide":"showHtml"}),o.taDefaultWrap&&m.displayElements.text.attr("ta-default-wrap",o.taDefaultWrap),o.taUnsafeSanitizer&&(m.displayElements.text.attr("ta-unsafe-sanitizer",o.taUnsafeSanitizer),m.displayElements.html.attr("ta-unsafe-sanitizer",o.taUnsafeSanitizer)),m.displayElements.scrollWindow.append(m.displayElements.text),n.append(m.displayElements.scrollWindow),n.append(m.displayElements.html),m.displayElements.forminput.attr("name",m._name),n.append(m.displayElements.forminput),o.tabindex&&(n.removeAttr("tabindex"),m.displayElements.text.attr("tabindex",o.tabindex),m.displayElements.html.attr("tabindex",o.tabindex)),o.placeholder&&(m.displayElements.text.attr("placeholder",o.placeholder),m.displayElements.html.attr("placeholder",o.placeholder)),o.taDisabled&&(m.displayElements.text.attr("ta-readonly","disabled"),m.displayElements.html.attr("ta-readonly","disabled"),m.disabled=m.$parent.$eval(o.taDisabled),m.$parent.$watch(o.taDisabled,function(a){m.disabled=a,m.disabled?n.addClass(m.classes.disabled):n.removeClass(m.classes.disabled)})),o.taPaste&&(m._pasteHandler=function(a){return l(o.taPaste)(m.$parent,{$html:a})},m.displayElements.text.attr("ta-paste","_pasteHandler($html)")),a(m.displayElements.scrollWindow)(m),a(m.displayElements.html)(m),m.updateTaBindtaTextElement=m["updateTaBindtaTextElement"+B],m.updateTaBindtaHtmlElement=m["updateTaBindtaHtmlElement"+B],n.addClass("ta-root"),m.displayElements.scrollWindow.addClass("ta-text ta-editor "+m.classes.textEditor),m.displayElements.html.addClass("ta-html ta-editor "+m.classes.htmlEditor),m._actionRunning=!1;var E=!1;if(m.startAction=function(){return m._actionRunning=!0,E=g.rangy.saveSelection(),function(){E&&g.rangy.restoreSelection(E)}},m.endAction=function(){m._actionRunning=!1,E&&(m.showHtml?m.displayElements.html[0].focus():m.displayElements.text[0].focus(),g.rangy.restoreSelection(E),g.rangy.removeMarkers(E)),E=!1,m.updateSelectedStyles(),m.showHtml||m["updateTaBindtaTextElement"+B]()},u=function(){m.focussed=!0,n.addClass(m.classes.focussed),x.focus(),n.triggerHandler("focus")},m.displayElements.html.on("focus",u),m.displayElements.text.on("focus",u),v=function(a){return m._actionRunning||h[0].activeElement===m.displayElements.html[0]||h[0].activeElement===m.displayElements.text[0]||(n.removeClass(m.classes.focussed),x.unfocus(),b(function(){m._bUpdateSelectedStyles=!1,n.triggerHandler("blur"),m.focussed=!1},0)),a.preventDefault(),!1},m.displayElements.html.on("blur",v),m.displayElements.text.on("blur",v),m.displayElements.text.on("paste",function(a){n.triggerHandler("paste",a)}),m.queryFormatBlockState=function(a){return!m.showHtml&&a.toLowerCase()===h[0].queryCommandValue("formatBlock").toLowerCase()},m.queryCommandState=function(a){return m.showHtml?"":h[0].queryCommandState(a)},m.switchView=function(){m.showHtml=!m.showHtml,i.enabled(!1,m.displayElements.html),i.enabled(!1,m.displayElements.text),m.showHtml?b(function(){return i.enabled(!0,m.displayElements.html),i.enabled(!0,m.displayElements.text),m.displayElements.html[0].focus()},100):b(function(){return i.enabled(!0,m.displayElements.html),i.enabled(!0,m.displayElements.text),m.displayElements.text[0].focus()},100)},o.ngModel){var F=!0;p.$render=function(){if(F){F=!1;var a=m.$parent.$eval(o.ngModel);void 0!==a&&null!==a||!w||""===w||p.$setViewValue(w)}m.displayElements.forminput.val(p.$viewValue),m.html=p.$viewValue||""},n.attr("required")&&(p.$validators.required=function(a,b){var c=a||b;return!(!c||""===c.trim())})}else m.displayElements.forminput.val(w),m.html=w;if(m.$watch("html",function(a,b){a!==b&&(o.ngModel&&p.$viewValue!==a&&p.$setViewValue(a),m.displayElements.forminput.val(a))}),o.taTargetToolbars)x=f.registerEditor(m._name,m,o.taTargetToolbars.split(","));else{var G=angular.element('<div text-angular-toolbar name="textAngularToolbar'+B+'">');o.taToolbar&&G.attr("ta-toolbar",o.taToolbar),o.taToolbarClass&&G.attr("ta-toolbar-class",o.taToolbarClass),o.taToolbarGroupClass&&G.attr("ta-toolbar-group-class",o.taToolbarGroupClass),o.taToolbarButtonClass&&G.attr("ta-toolbar-button-class",o.taToolbarButtonClass),o.taToolbarActiveButtonClass&&G.attr("ta-toolbar-active-button-class",o.taToolbarActiveButtonClass),o.taFocussedClass&&G.attr("ta-focussed-class",o.taFocussedClass),n.prepend(G),a(G)(m.$parent),x=f.registerEditor(m._name,m,["textAngularToolbar"+B])}m.$on("$destroy",function(){f.unregisterEditor(m._name)}),m.$on("ta-element-select",function(a,b){x.triggerElementSelect(a,b)&&m["reApplyOnSelectorHandlerstaTextElement"+B]()}),m.$on("ta-drop-event",function(a,c,d,e){m.displayElements.text[0].focus(),e&&e.files&&e.files.length>0?(angular.forEach(e.files,function(a){try{k.when(m.fileDropHandler(a,m.wrapSelection)||m.fileDropHandler!==m.defaultFileDropHandler&&k.when(m.defaultFileDropHandler(a,m.wrapSelection))).then(function(){m["updateTaBindtaTextElement"+B]()})}catch(b){j.error(b)}}),d.preventDefault(),d.stopPropagation()):b(function(){m["updateTaBindtaTextElement"+B]()},0)}),m._bUpdateSelectedStyles=!1,angular.element(window).on("blur",function(){m._bUpdateSelectedStyles=!1,m.focussed=!1}),m.updateSelectedStyles=function(){var a;A&&b.cancel(A),void 0!==(a=d.getSelectionElement())&&a.parentNode!==m.displayElements.text[0]?x.updateSelectedStyles(angular.element(a)):x.updateSelectedStyles(),m._bUpdateSelectedStyles&&(A=b(m.updateSelectedStyles,200))},q=function(){return m.focussed?void(m._bUpdateSelectedStyles||(m._bUpdateSelectedStyles=!0,m.$apply(function(){m.updateSelectedStyles()}))):void(m._bUpdateSelectedStyles=!1)},m.displayElements.html.on("keydown",q),m.displayElements.text.on("keydown",q),r=function(){m._bUpdateSelectedStyles=!1},m.displayElements.html.on("keyup",r),m.displayElements.text.on("keyup",r),s=function(a,b){b&&angular.extend(a,b),m.$apply(function(){return x.sendKeyCommand(a)?(m._bUpdateSelectedStyles||m.updateSelectedStyles(),a.preventDefault(),!1):void 0})},m.displayElements.html.on("keypress",s),m.displayElements.text.on("keypress",s),t=function(){m._bUpdateSelectedStyles=!1,m.$apply(function(){m.updateSelectedStyles()})},m.displayElements.html.on("mouseup",t),m.displayElements.text.on("mouseup",t)}}}]),q.service("textAngularManager",["taToolExecuteAction","taTools","taRegisterTool",function(a,b,c){var d={},e={};return{registerEditor:function(c,f,g){if(!c||""===c)throw"textAngular Error: An editor requires a name";if(!f)throw"textAngular Error: An editor requires a scope";if(e[c])throw'textAngular Error: An Editor with name "'+c+'" already exists';var h=[];return angular.forEach(g,function(a){d[a]&&h.push(d[a])}),e[c]={scope:f,toolbars:g,_registerToolbar:function(a){this.toolbars.indexOf(a.name)>=0&&h.push(a)},editorFunctions:{disable:function(){angular.forEach(h,function(a){a.disabled=!0})},enable:function(){angular.forEach(h,function(a){a.disabled=!1})},focus:function(){angular.forEach(h,function(a){a._parent=f,a.disabled=!1,a.focussed=!0,f.focussed=!0})},unfocus:function(){angular.forEach(h,function(a){a.disabled=!0,a.focussed=!1}),f.focussed=!1},updateSelectedStyles:function(a){angular.forEach(h,function(b){angular.forEach(b.tools,function(c){c.activeState&&(b._parent=f,c.active=c.activeState(a))})})},sendKeyCommand:function(c){var d=!1;return(c.ctrlKey||c.metaKey)&&angular.forEach(b,function(b,e){if(b.commandKeyCode&&b.commandKeyCode===c.which)for(var g=0;g<h.length;g++)if(void 0!==h[g].tools[e]){a.call(h[g].tools[e],f),d=!0;break}}),d},triggerElementSelect:function(a,c){var d=function(a,b){for(var c=!0,d=0;d<b.length;d++)c=c&&a.attr(b[d]);return c},e=[],g={},i=!1;c=angular.element(c);var j=!1;if(angular.forEach(b,function(a,b){a.onElementSelect&&a.onElementSelect.element&&a.onElementSelect.element.toLowerCase()===c[0].tagName.toLowerCase()&&(!a.onElementSelect.filter||a.onElementSelect.filter(c))&&(j=j||angular.isArray(a.onElementSelect.onlyWithAttrs)&&d(c,a.onElementSelect.onlyWithAttrs),(!a.onElementSelect.onlyWithAttrs||d(c,a.onElementSelect.onlyWithAttrs))&&(g[b]=a))}),j?(angular.forEach(g,function(a,b){a.onElementSelect.onlyWithAttrs&&d(c,a.onElementSelect.onlyWithAttrs)&&e.push({name:b,tool:a})}),e.sort(function(a,b){return b.tool.onElementSelect.onlyWithAttrs.length-a.tool.onElementSelect.onlyWithAttrs.length})):angular.forEach(g,function(a,b){e.push({name:b,tool:a})}),e.length>0)for(var k=0;k<e.length;k++){for(var l=e[k].tool,m=e[k].name,n=0;n<h.length;n++)if(void 0!==h[n].tools[m]){l.onElementSelect.action.call(h[n].tools[m],a,c,f),i=!0;break}if(i)break}return i}}},e[c].editorFunctions},retrieveEditor:function(a){return e[a]},unregisterEditor:function(a){delete e[a]},registerToolbar:function(a){if(!a)throw"textAngular Error: A toolbar requires a scope";if(!a.name||""===a.name)throw"textAngular Error: A toolbar requires a name";if(d[a.name])throw'textAngular Error: A toolbar with name "'+a.name+'" already exists';d[a.name]=a,angular.forEach(e,function(b){b._registerToolbar(a)})},retrieveToolbar:function(a){return d[a]},retrieveToolbarsViaEditor:function(a){var b=[],c=this;return angular.forEach(this.retrieveEditor(a).toolbars,function(a){b.push(c.retrieveToolbar(a))}),b},unregisterToolbar:function(a){delete d[a]},updateToolsDisplay:function(a){var b=this;angular.forEach(a,function(a,c){b.updateToolDisplay(c,a)})},resetToolsDisplay:function(){var a=this;angular.forEach(b,function(b,c){a.resetToolDisplay(c)})},updateToolDisplay:function(a,b){var c=this;angular.forEach(d,function(d,e){c.updateToolbarToolDisplay(e,a,b)})},resetToolDisplay:function(a){var b=this;angular.forEach(d,function(c,d){b.resetToolbarToolDisplay(d,a)})},updateToolbarToolDisplay:function(a,b,c){if(!d[a])throw'textAngular Error: No Toolbar with name "'+a+'" exists';d[a].updateToolDisplay(b,c)},resetToolbarToolDisplay:function(a,c){if(!d[a])throw'textAngular Error: No Toolbar with name "'+a+'" exists';d[a].updateToolDisplay(c,b[c],!0)},removeTool:function(a){delete b[a],angular.forEach(d,function(b){delete b.tools[a];for(var c=0;c<b.toolbar.length;c++){for(var d,e=0;e<b.toolbar[c].length;e++){if(b.toolbar[c][e]===a){d={group:c,index:e};break}if(void 0!==d)break}void 0!==d&&(b.toolbar[d.group].slice(d.index,1),b._$element.children().eq(d.group).children().eq(d.index).remove())}})},addTool:function(a,b,e,f){c(a,b),angular.forEach(d,function(c){c.addTool(a,b,e,f)})},addToolToToolbar:function(a,b,e,f,g){c(a,b),d[e].addTool(a,b,f,g)},refreshEditor:function(a){if(!e[a])throw'textAngular Error: No Editor with name "'+a+'" exists';e[a].scope.updateTaBindtaTextElement(),e[a].scope.$$phase||e[a].scope.$digest()}}}]),q.directive("textAngularToolbar",["$compile","textAngularManager","taOptions","taTools","taToolExecuteAction","$window",function(a,b,c,d,e,f){return{scope:{name:"@"},restrict:"EA",link:function(g,h,i){if(!g.name||""===g.name)throw"textAngular Error: A toolbar requires a name";angular.extend(g,angular.copy(c)),i.taToolbar&&(g.toolbar=g.$parent.$eval(i.taToolbar)),i.taToolbarClass&&(g.classes.toolbar=i.taToolbarClass),i.taToolbarGroupClass&&(g.classes.toolbarGroup=i.taToolbarGroupClass),i.taToolbarButtonClass&&(g.classes.toolbarButton=i.taToolbarButtonClass),i.taToolbarActiveButtonClass&&(g.classes.toolbarButtonActive=i.taToolbarActiveButtonClass),i.taFocussedClass&&(g.classes.focussed=i.taFocussedClass),g.disabled=!0,g.focussed=!1,g._$element=h,h[0].innerHTML="",h.addClass("ta-toolbar "+g.classes.toolbar),g.$watch("focussed",function(){g.focussed?h.addClass(g.classes.focussed):h.removeClass(g.classes.focussed)});var j=function(b,c){var d;if(d=angular.element(b&&b.display?b.display:"<button type='button'>"),d.addClass(b&&b["class"]?b["class"]:g.classes.toolbarButton),d.attr("name",c.name),d.attr("ta-button","ta-button"),d.attr("ng-disabled","isDisabled()"),d.attr("tabindex","-1"),d.attr("ng-click","executeAction()"),d.attr("ng-class","displayActiveToolClass(active)"),b&&b.tooltiptext&&d.attr("title",b.tooltiptext),b&&!b.display&&!c._display&&(d[0].innerHTML="",b.buttontext&&(d[0].innerHTML=b.buttontext),b.iconclass)){var e=angular.element("<i>"),f=d[0].innerHTML;e.addClass(b.iconclass),d[0].innerHTML="",d.append(e),f&&""!==f&&d.append("&nbsp;"+f)}return c._lastToolDefinition=angular.copy(b),a(d)(c)};g.tools={},g._parent={disabled:!0,showHtml:!1,queryFormatBlockState:function(){return!1},queryCommandState:function(){return!1}};var k={$window:f,$editor:function(){return g._parent},isDisabled:function(){return"function"!=typeof this.$eval("disabled")&&this.$eval("disabled")||this.$eval("disabled()")||"html"!==this.name&&this.$editor().showHtml||this.$parent.disabled||this.$editor().disabled},displayActiveToolClass:function(a){return a?g.classes.toolbarButtonActive:""},executeAction:e};angular.forEach(g.toolbar,function(a){var b=angular.element("<div>");b.addClass(g.classes.toolbarGroup),angular.forEach(a,function(a){g.tools[a]=angular.extend(g.$new(!0),d[a],k,{name:a}),g.tools[a].$element=j(d[a],g.tools[a]),b.append(g.tools[a].$element)}),h.append(b)}),g.updateToolDisplay=function(a,b,c){var d=g.tools[a];if(d){if(d._lastToolDefinition&&!c&&(b=angular.extend({},d._lastToolDefinition,b)),null===b.buttontext&&null===b.iconclass&&null===b.display)throw'textAngular Error: Tool Definition for updating "'+a+'" does not have a valid display/iconclass/buttontext value';null===b.buttontext&&delete b.buttontext,null===b.iconclass&&delete b.iconclass,null===b.display&&delete b.display;var e=j(b,d);d.$element.replaceWith(e),d.$element=e}},g.addTool=function(a,b,c,e){g.tools[a]=angular.extend(g.$new(!0),d[a],k,{name:a}),g.tools[a].$element=j(d[a],g.tools[a]);var f;void 0===c&&(c=g.toolbar.length-1),f=angular.element(h.children()[c]),void 0===e?(f.append(g.tools[a].$element),g.toolbar[c][g.toolbar[c].length-1]=a):(f.children().eq(e).after(g.tools[a].$element),g.toolbar[c][e]=a)},b.registerToolbar(g),g.$on("$destroy",function(){b.unregisterToolbar(g.name)})}}}])}()}({},function(){return this}());
/*
 CryptoJS v3.1.2
 code.google.com/p/crypto-js
 (c) 2009-2013 by Jeff Mott. All rights reserved.
 code.google.com/p/crypto-js/wiki/License
 */
var CryptoJS=CryptoJS||function(u,l){var d={},n=d.lib={},p=function(){},s=n.Base={extend:function(a){p.prototype=this;var c=new p;a&&c.mixIn(a);c.hasOwnProperty("init")||(c.init=function(){c.$super.init.apply(this,arguments)});c.init.prototype=c;c.$super=this;return c},create:function(){var a=this.extend();a.init.apply(a,arguments);return a},init:function(){},mixIn:function(a){for(var c in a)a.hasOwnProperty(c)&&(this[c]=a[c]);a.hasOwnProperty("toString")&&(this.toString=a.toString)},clone:function(){return this.init.prototype.extend(this)}},
    q=n.WordArray=s.extend({init:function(a,c){a=this.words=a||[];this.sigBytes=c!=l?c:4*a.length},toString:function(a){return(a||v).stringify(this)},concat:function(a){var c=this.words,m=a.words,f=this.sigBytes;a=a.sigBytes;this.clamp();if(f%4)for(var t=0;t<a;t++)c[f+t>>>2]|=(m[t>>>2]>>>24-8*(t%4)&255)<<24-8*((f+t)%4);else if(65535<m.length)for(t=0;t<a;t+=4)c[f+t>>>2]=m[t>>>2];else c.push.apply(c,m);this.sigBytes+=a;return this},clamp:function(){var a=this.words,c=this.sigBytes;a[c>>>2]&=4294967295<<
        32-8*(c%4);a.length=u.ceil(c/4)},clone:function(){var a=s.clone.call(this);a.words=this.words.slice(0);return a},random:function(a){for(var c=[],m=0;m<a;m+=4)c.push(4294967296*u.random()|0);return new q.init(c,a)}}),w=d.enc={},v=w.Hex={stringify:function(a){var c=a.words;a=a.sigBytes;for(var m=[],f=0;f<a;f++){var t=c[f>>>2]>>>24-8*(f%4)&255;m.push((t>>>4).toString(16));m.push((t&15).toString(16))}return m.join("")},parse:function(a){for(var c=a.length,m=[],f=0;f<c;f+=2)m[f>>>3]|=parseInt(a.substr(f,
        2),16)<<24-4*(f%8);return new q.init(m,c/2)}},b=w.Latin1={stringify:function(a){var c=a.words;a=a.sigBytes;for(var m=[],f=0;f<a;f++)m.push(String.fromCharCode(c[f>>>2]>>>24-8*(f%4)&255));return m.join("")},parse:function(a){for(var c=a.length,m=[],f=0;f<c;f++)m[f>>>2]|=(a.charCodeAt(f)&255)<<24-8*(f%4);return new q.init(m,c)}},x=w.Utf8={stringify:function(a){try{return decodeURIComponent(escape(b.stringify(a)))}catch(c){throw Error("Malformed UTF-8 data");}},parse:function(a){return b.parse(unescape(encodeURIComponent(a)))}},
    r=n.BufferedBlockAlgorithm=s.extend({reset:function(){this._data=new q.init;this._nDataBytes=0},_append:function(a){"string"==typeof a&&(a=x.parse(a));this._data.concat(a);this._nDataBytes+=a.sigBytes},_process:function(a){var c=this._data,m=c.words,f=c.sigBytes,t=this.blockSize,b=f/(4*t),b=a?u.ceil(b):u.max((b|0)-this._minBufferSize,0);a=b*t;f=u.min(4*a,f);if(a){for(var e=0;e<a;e+=t)this._doProcessBlock(m,e);e=m.splice(0,a);c.sigBytes-=f}return new q.init(e,f)},clone:function(){var a=s.clone.call(this);
        a._data=this._data.clone();return a},_minBufferSize:0});n.Hasher=r.extend({cfg:s.extend(),init:function(a){this.cfg=this.cfg.extend(a);this.reset()},reset:function(){r.reset.call(this);this._doReset()},update:function(a){this._append(a);this._process();return this},finalize:function(a){a&&this._append(a);return this._doFinalize()},blockSize:16,_createHelper:function(a){return function(c,m){return(new a.init(m)).finalize(c)}},_createHmacHelper:function(a){return function(c,m){return(new e.HMAC.init(a,
    m)).finalize(c)}}});var e=d.algo={};return d}(Math);
(function(){var u=CryptoJS,l=u.lib.WordArray;u.enc.Base64={stringify:function(d){var n=d.words,l=d.sigBytes,s=this._map;d.clamp();d=[];for(var q=0;q<l;q+=3)for(var w=(n[q>>>2]>>>24-8*(q%4)&255)<<16|(n[q+1>>>2]>>>24-8*((q+1)%4)&255)<<8|n[q+2>>>2]>>>24-8*((q+2)%4)&255,v=0;4>v&&q+0.75*v<l;v++)d.push(s.charAt(w>>>6*(3-v)&63));if(n=s.charAt(64))for(;d.length%4;)d.push(n);return d.join("")},parse:function(d){var n=d.length,p=this._map,s=p.charAt(64);s&&(s=d.indexOf(s),-1!=s&&(n=s));for(var s=[],q=0,w=0;w<
    n;w++)if(w%4){var v=p.indexOf(d.charAt(w-1))<<2*(w%4),b=p.indexOf(d.charAt(w))>>>6-2*(w%4);s[q>>>2]|=(v|b)<<24-8*(q%4);q++}return l.create(s,q)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}})();
(function(u){function l(b,e,a,c,m,f,t){b=b+(e&a|~e&c)+m+t;return(b<<f|b>>>32-f)+e}function d(b,e,a,c,m,f,t){b=b+(e&c|a&~c)+m+t;return(b<<f|b>>>32-f)+e}function n(b,e,a,c,m,f,t){b=b+(e^a^c)+m+t;return(b<<f|b>>>32-f)+e}function p(b,e,a,c,m,f,t){b=b+(a^(e|~c))+m+t;return(b<<f|b>>>32-f)+e}for(var s=CryptoJS,q=s.lib,w=q.WordArray,v=q.Hasher,q=s.algo,b=[],x=0;64>x;x++)b[x]=4294967296*u.abs(u.sin(x+1))|0;q=q.MD5=v.extend({_doReset:function(){this._hash=new w.init([1732584193,4023233417,2562383102,271733878])},
    _doProcessBlock:function(r,e){for(var a=0;16>a;a++){var c=e+a,m=r[c];r[c]=(m<<8|m>>>24)&16711935|(m<<24|m>>>8)&4278255360}var a=this._hash.words,c=r[e+0],m=r[e+1],f=r[e+2],t=r[e+3],y=r[e+4],q=r[e+5],s=r[e+6],w=r[e+7],v=r[e+8],u=r[e+9],x=r[e+10],z=r[e+11],A=r[e+12],B=r[e+13],C=r[e+14],D=r[e+15],g=a[0],h=a[1],j=a[2],k=a[3],g=l(g,h,j,k,c,7,b[0]),k=l(k,g,h,j,m,12,b[1]),j=l(j,k,g,h,f,17,b[2]),h=l(h,j,k,g,t,22,b[3]),g=l(g,h,j,k,y,7,b[4]),k=l(k,g,h,j,q,12,b[5]),j=l(j,k,g,h,s,17,b[6]),h=l(h,j,k,g,w,22,b[7]),
        g=l(g,h,j,k,v,7,b[8]),k=l(k,g,h,j,u,12,b[9]),j=l(j,k,g,h,x,17,b[10]),h=l(h,j,k,g,z,22,b[11]),g=l(g,h,j,k,A,7,b[12]),k=l(k,g,h,j,B,12,b[13]),j=l(j,k,g,h,C,17,b[14]),h=l(h,j,k,g,D,22,b[15]),g=d(g,h,j,k,m,5,b[16]),k=d(k,g,h,j,s,9,b[17]),j=d(j,k,g,h,z,14,b[18]),h=d(h,j,k,g,c,20,b[19]),g=d(g,h,j,k,q,5,b[20]),k=d(k,g,h,j,x,9,b[21]),j=d(j,k,g,h,D,14,b[22]),h=d(h,j,k,g,y,20,b[23]),g=d(g,h,j,k,u,5,b[24]),k=d(k,g,h,j,C,9,b[25]),j=d(j,k,g,h,t,14,b[26]),h=d(h,j,k,g,v,20,b[27]),g=d(g,h,j,k,B,5,b[28]),k=d(k,g,
            h,j,f,9,b[29]),j=d(j,k,g,h,w,14,b[30]),h=d(h,j,k,g,A,20,b[31]),g=n(g,h,j,k,q,4,b[32]),k=n(k,g,h,j,v,11,b[33]),j=n(j,k,g,h,z,16,b[34]),h=n(h,j,k,g,C,23,b[35]),g=n(g,h,j,k,m,4,b[36]),k=n(k,g,h,j,y,11,b[37]),j=n(j,k,g,h,w,16,b[38]),h=n(h,j,k,g,x,23,b[39]),g=n(g,h,j,k,B,4,b[40]),k=n(k,g,h,j,c,11,b[41]),j=n(j,k,g,h,t,16,b[42]),h=n(h,j,k,g,s,23,b[43]),g=n(g,h,j,k,u,4,b[44]),k=n(k,g,h,j,A,11,b[45]),j=n(j,k,g,h,D,16,b[46]),h=n(h,j,k,g,f,23,b[47]),g=p(g,h,j,k,c,6,b[48]),k=p(k,g,h,j,w,10,b[49]),j=p(j,k,g,h,
            C,15,b[50]),h=p(h,j,k,g,q,21,b[51]),g=p(g,h,j,k,A,6,b[52]),k=p(k,g,h,j,t,10,b[53]),j=p(j,k,g,h,x,15,b[54]),h=p(h,j,k,g,m,21,b[55]),g=p(g,h,j,k,v,6,b[56]),k=p(k,g,h,j,D,10,b[57]),j=p(j,k,g,h,s,15,b[58]),h=p(h,j,k,g,B,21,b[59]),g=p(g,h,j,k,y,6,b[60]),k=p(k,g,h,j,z,10,b[61]),j=p(j,k,g,h,f,15,b[62]),h=p(h,j,k,g,u,21,b[63]);a[0]=a[0]+g|0;a[1]=a[1]+h|0;a[2]=a[2]+j|0;a[3]=a[3]+k|0},_doFinalize:function(){var b=this._data,e=b.words,a=8*this._nDataBytes,c=8*b.sigBytes;e[c>>>5]|=128<<24-c%32;var m=u.floor(a/
        4294967296);e[(c+64>>>9<<4)+15]=(m<<8|m>>>24)&16711935|(m<<24|m>>>8)&4278255360;e[(c+64>>>9<<4)+14]=(a<<8|a>>>24)&16711935|(a<<24|a>>>8)&4278255360;b.sigBytes=4*(e.length+1);this._process();b=this._hash;e=b.words;for(a=0;4>a;a++)c=e[a],e[a]=(c<<8|c>>>24)&16711935|(c<<24|c>>>8)&4278255360;return b},clone:function(){var b=v.clone.call(this);b._hash=this._hash.clone();return b}});s.MD5=v._createHelper(q);s.HmacMD5=v._createHmacHelper(q)})(Math);
(function(){var u=CryptoJS,l=u.lib,d=l.Base,n=l.WordArray,l=u.algo,p=l.EvpKDF=d.extend({cfg:d.extend({keySize:4,hasher:l.MD5,iterations:1}),init:function(d){this.cfg=this.cfg.extend(d)},compute:function(d,l){for(var p=this.cfg,v=p.hasher.create(),b=n.create(),u=b.words,r=p.keySize,p=p.iterations;u.length<r;){e&&v.update(e);var e=v.update(d).finalize(l);v.reset();for(var a=1;a<p;a++)e=v.finalize(e),v.reset();b.concat(e)}b.sigBytes=4*r;return b}});u.EvpKDF=function(d,l,n){return p.create(n).compute(d,
    l)}})();
CryptoJS.lib.Cipher||function(u){var l=CryptoJS,d=l.lib,n=d.Base,p=d.WordArray,s=d.BufferedBlockAlgorithm,q=l.enc.Base64,w=l.algo.EvpKDF,v=d.Cipher=s.extend({cfg:n.extend(),createEncryptor:function(m,a){return this.create(this._ENC_XFORM_MODE,m,a)},createDecryptor:function(m,a){return this.create(this._DEC_XFORM_MODE,m,a)},init:function(m,a,b){this.cfg=this.cfg.extend(b);this._xformMode=m;this._key=a;this.reset()},reset:function(){s.reset.call(this);this._doReset()},process:function(a){this._append(a);return this._process()},
    finalize:function(a){a&&this._append(a);return this._doFinalize()},keySize:4,ivSize:4,_ENC_XFORM_MODE:1,_DEC_XFORM_MODE:2,_createHelper:function(m){return{encrypt:function(f,b,e){return("string"==typeof b?c:a).encrypt(m,f,b,e)},decrypt:function(f,b,e){return("string"==typeof b?c:a).decrypt(m,f,b,e)}}}});d.StreamCipher=v.extend({_doFinalize:function(){return this._process(!0)},blockSize:1});var b=l.mode={},x=function(a,f,b){var c=this._iv;c?this._iv=u:c=this._prevBlock;for(var e=0;e<b;e++)a[f+e]^=
    c[e]},r=(d.BlockCipherMode=n.extend({createEncryptor:function(a,f){return this.Encryptor.create(a,f)},createDecryptor:function(a,f){return this.Decryptor.create(a,f)},init:function(a,f){this._cipher=a;this._iv=f}})).extend();r.Encryptor=r.extend({processBlock:function(a,f){var b=this._cipher,c=b.blockSize;x.call(this,a,f,c);b.encryptBlock(a,f);this._prevBlock=a.slice(f,f+c)}});r.Decryptor=r.extend({processBlock:function(a,b){var c=this._cipher,e=c.blockSize,d=a.slice(b,b+e);c.decryptBlock(a,b);x.call(this,
    a,b,e);this._prevBlock=d}});b=b.CBC=r;r=(l.pad={}).Pkcs7={pad:function(a,b){for(var c=4*b,c=c-a.sigBytes%c,e=c<<24|c<<16|c<<8|c,d=[],l=0;l<c;l+=4)d.push(e);c=p.create(d,c);a.concat(c)},unpad:function(a){a.sigBytes-=a.words[a.sigBytes-1>>>2]&255}};d.BlockCipher=v.extend({cfg:v.cfg.extend({mode:b,padding:r}),reset:function(){v.reset.call(this);var a=this.cfg,c=a.iv,a=a.mode;if(this._xformMode==this._ENC_XFORM_MODE)var b=a.createEncryptor;else b=a.createDecryptor,this._minBufferSize=1;this._mode=b.call(a,
    this,c&&c.words)},_doProcessBlock:function(a,c){this._mode.processBlock(a,c)},_doFinalize:function(){var a=this.cfg.padding;if(this._xformMode==this._ENC_XFORM_MODE){a.pad(this._data,this.blockSize);var c=this._process(!0)}else c=this._process(!0),a.unpad(c);return c},blockSize:4});var e=d.CipherParams=n.extend({init:function(a){this.mixIn(a)},toString:function(a){return(a||this.formatter).stringify(this)}}),b=(l.format={}).OpenSSL={stringify:function(a){var c=a.ciphertext;a=a.salt;return(a?p.create([1398893684,
    1701076831]).concat(a).concat(c):c).toString(q)},parse:function(a){a=q.parse(a);var c=a.words;if(1398893684==c[0]&&1701076831==c[1]){var b=p.create(c.slice(2,4));c.splice(0,4);a.sigBytes-=16}return e.create({ciphertext:a,salt:b})}},a=d.SerializableCipher=n.extend({cfg:n.extend({format:b}),encrypt:function(a,c,b,d){d=this.cfg.extend(d);var l=a.createEncryptor(b,d);c=l.finalize(c);l=l.cfg;return e.create({ciphertext:c,key:b,iv:l.iv,algorithm:a,mode:l.mode,padding:l.padding,blockSize:a.blockSize,formatter:d.format})},
    decrypt:function(a,c,b,e){e=this.cfg.extend(e);c=this._parse(c,e.format);return a.createDecryptor(b,e).finalize(c.ciphertext)},_parse:function(a,c){return"string"==typeof a?c.parse(a,this):a}}),l=(l.kdf={}).OpenSSL={execute:function(a,c,b,d){d||(d=p.random(8));a=w.create({keySize:c+b}).compute(a,d);b=p.create(a.words.slice(c),4*b);a.sigBytes=4*c;return e.create({key:a,iv:b,salt:d})}},c=d.PasswordBasedCipher=a.extend({cfg:a.cfg.extend({kdf:l}),encrypt:function(c,b,e,d){d=this.cfg.extend(d);e=d.kdf.execute(e,
    c.keySize,c.ivSize);d.iv=e.iv;c=a.encrypt.call(this,c,b,e.key,d);c.mixIn(e);return c},decrypt:function(c,b,e,d){d=this.cfg.extend(d);b=this._parse(b,d.format);e=d.kdf.execute(e,c.keySize,c.ivSize,b.salt);d.iv=e.iv;return a.decrypt.call(this,c,b,e.key,d)}})}();
(function(){function u(b,a){var c=(this._lBlock>>>b^this._rBlock)&a;this._rBlock^=c;this._lBlock^=c<<b}function l(b,a){var c=(this._rBlock>>>b^this._lBlock)&a;this._lBlock^=c;this._rBlock^=c<<b}var d=CryptoJS,n=d.lib,p=n.WordArray,n=n.BlockCipher,s=d.algo,q=[57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4],w=[14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,
    55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32],v=[1,2,4,6,8,10,12,14,15,17,19,21,23,25,27,28],b=[{"0":8421888,268435456:32768,536870912:8421378,805306368:2,1073741824:512,1342177280:8421890,1610612736:8389122,1879048192:8388608,2147483648:514,2415919104:8389120,2684354560:33280,2952790016:8421376,3221225472:32770,3489660928:8388610,3758096384:0,4026531840:33282,134217728:0,402653184:8421890,671088640:33282,939524096:32768,1207959552:8421888,1476395008:512,1744830464:8421378,2013265920:2,
    2281701376:8389120,2550136832:33280,2818572288:8421376,3087007744:8389122,3355443200:8388610,3623878656:32770,3892314112:514,4160749568:8388608,1:32768,268435457:2,536870913:8421888,805306369:8388608,1073741825:8421378,1342177281:33280,1610612737:512,1879048193:8389122,2147483649:8421890,2415919105:8421376,2684354561:8388610,2952790017:33282,3221225473:514,3489660929:8389120,3758096385:32770,4026531841:0,134217729:8421890,402653185:8421376,671088641:8388608,939524097:512,1207959553:32768,1476395009:8388610,
    1744830465:2,2013265921:33282,2281701377:32770,2550136833:8389122,2818572289:514,3087007745:8421888,3355443201:8389120,3623878657:0,3892314113:33280,4160749569:8421378},{"0":1074282512,16777216:16384,33554432:524288,50331648:1074266128,67108864:1073741840,83886080:1074282496,100663296:1073758208,117440512:16,134217728:540672,150994944:1073758224,167772160:1073741824,184549376:540688,201326592:524304,218103808:0,234881024:16400,251658240:1074266112,8388608:1073758208,25165824:540688,41943040:16,58720256:1073758224,
    75497472:1074282512,92274688:1073741824,109051904:524288,125829120:1074266128,142606336:524304,159383552:0,176160768:16384,192937984:1074266112,209715200:1073741840,226492416:540672,243269632:1074282496,260046848:16400,268435456:0,285212672:1074266128,301989888:1073758224,318767104:1074282496,335544320:1074266112,352321536:16,369098752:540688,385875968:16384,402653184:16400,419430400:524288,436207616:524304,452984832:1073741840,469762048:540672,486539264:1073758208,503316480:1073741824,520093696:1074282512,
    276824064:540688,293601280:524288,310378496:1074266112,327155712:16384,343932928:1073758208,360710144:1074282512,377487360:16,394264576:1073741824,411041792:1074282496,427819008:1073741840,444596224:1073758224,461373440:524304,478150656:0,494927872:16400,511705088:1074266128,528482304:540672},{"0":260,1048576:0,2097152:67109120,3145728:65796,4194304:65540,5242880:67108868,6291456:67174660,7340032:67174400,8388608:67108864,9437184:67174656,10485760:65792,11534336:67174404,12582912:67109124,13631488:65536,
    14680064:4,15728640:256,524288:67174656,1572864:67174404,2621440:0,3670016:67109120,4718592:67108868,5767168:65536,6815744:65540,7864320:260,8912896:4,9961472:256,11010048:67174400,12058624:65796,13107200:65792,14155776:67109124,15204352:67174660,16252928:67108864,16777216:67174656,17825792:65540,18874368:65536,19922944:67109120,20971520:256,22020096:67174660,23068672:67108868,24117248:0,25165824:67109124,26214400:67108864,27262976:4,28311552:65792,29360128:67174400,30408704:260,31457280:65796,32505856:67174404,
    17301504:67108864,18350080:260,19398656:67174656,20447232:0,21495808:65540,22544384:67109120,23592960:256,24641536:67174404,25690112:65536,26738688:67174660,27787264:65796,28835840:67108868,29884416:67109124,30932992:67174400,31981568:4,33030144:65792},{"0":2151682048,65536:2147487808,131072:4198464,196608:2151677952,262144:0,327680:4198400,393216:2147483712,458752:4194368,524288:2147483648,589824:4194304,655360:64,720896:2147487744,786432:2151678016,851968:4160,917504:4096,983040:2151682112,32768:2147487808,
    98304:64,163840:2151678016,229376:2147487744,294912:4198400,360448:2151682112,425984:0,491520:2151677952,557056:4096,622592:2151682048,688128:4194304,753664:4160,819200:2147483648,884736:4194368,950272:4198464,1015808:2147483712,1048576:4194368,1114112:4198400,1179648:2147483712,1245184:0,1310720:4160,1376256:2151678016,1441792:2151682048,1507328:2147487808,1572864:2151682112,1638400:2147483648,1703936:2151677952,1769472:4198464,1835008:2147487744,1900544:4194304,1966080:64,2031616:4096,1081344:2151677952,
    1146880:2151682112,1212416:0,1277952:4198400,1343488:4194368,1409024:2147483648,1474560:2147487808,1540096:64,1605632:2147483712,1671168:4096,1736704:2147487744,1802240:2151678016,1867776:4160,1933312:2151682048,1998848:4194304,2064384:4198464},{"0":128,4096:17039360,8192:262144,12288:536870912,16384:537133184,20480:16777344,24576:553648256,28672:262272,32768:16777216,36864:537133056,40960:536871040,45056:553910400,49152:553910272,53248:0,57344:17039488,61440:553648128,2048:17039488,6144:553648256,
    10240:128,14336:17039360,18432:262144,22528:537133184,26624:553910272,30720:536870912,34816:537133056,38912:0,43008:553910400,47104:16777344,51200:536871040,55296:553648128,59392:16777216,63488:262272,65536:262144,69632:128,73728:536870912,77824:553648256,81920:16777344,86016:553910272,90112:537133184,94208:16777216,98304:553910400,102400:553648128,106496:17039360,110592:537133056,114688:262272,118784:536871040,122880:0,126976:17039488,67584:553648256,71680:16777216,75776:17039360,79872:537133184,
    83968:536870912,88064:17039488,92160:128,96256:553910272,100352:262272,104448:553910400,108544:0,112640:553648128,116736:16777344,120832:262144,124928:537133056,129024:536871040},{"0":268435464,256:8192,512:270532608,768:270540808,1024:268443648,1280:2097152,1536:2097160,1792:268435456,2048:0,2304:268443656,2560:2105344,2816:8,3072:270532616,3328:2105352,3584:8200,3840:270540800,128:270532608,384:270540808,640:8,896:2097152,1152:2105352,1408:268435464,1664:268443648,1920:8200,2176:2097160,2432:8192,
    2688:268443656,2944:270532616,3200:0,3456:270540800,3712:2105344,3968:268435456,4096:268443648,4352:270532616,4608:270540808,4864:8200,5120:2097152,5376:268435456,5632:268435464,5888:2105344,6144:2105352,6400:0,6656:8,6912:270532608,7168:8192,7424:268443656,7680:270540800,7936:2097160,4224:8,4480:2105344,4736:2097152,4992:268435464,5248:268443648,5504:8200,5760:270540808,6016:270532608,6272:270540800,6528:270532616,6784:8192,7040:2105352,7296:2097160,7552:0,7808:268435456,8064:268443656},{"0":1048576,
    16:33555457,32:1024,48:1049601,64:34604033,80:0,96:1,112:34603009,128:33555456,144:1048577,160:33554433,176:34604032,192:34603008,208:1025,224:1049600,240:33554432,8:34603009,24:0,40:33555457,56:34604032,72:1048576,88:33554433,104:33554432,120:1025,136:1049601,152:33555456,168:34603008,184:1048577,200:1024,216:34604033,232:1,248:1049600,256:33554432,272:1048576,288:33555457,304:34603009,320:1048577,336:33555456,352:34604032,368:1049601,384:1025,400:34604033,416:1049600,432:1,448:0,464:34603008,480:33554433,
    496:1024,264:1049600,280:33555457,296:34603009,312:1,328:33554432,344:1048576,360:1025,376:34604032,392:33554433,408:34603008,424:0,440:34604033,456:1049601,472:1024,488:33555456,504:1048577},{"0":134219808,1:131072,2:134217728,3:32,4:131104,5:134350880,6:134350848,7:2048,8:134348800,9:134219776,10:133120,11:134348832,12:2080,13:0,14:134217760,15:133152,2147483648:2048,2147483649:134350880,2147483650:134219808,2147483651:134217728,2147483652:134348800,2147483653:133120,2147483654:133152,2147483655:32,
    2147483656:134217760,2147483657:2080,2147483658:131104,2147483659:134350848,2147483660:0,2147483661:134348832,2147483662:134219776,2147483663:131072,16:133152,17:134350848,18:32,19:2048,20:134219776,21:134217760,22:134348832,23:131072,24:0,25:131104,26:134348800,27:134219808,28:134350880,29:133120,30:2080,31:134217728,2147483664:131072,2147483665:2048,2147483666:134348832,2147483667:133152,2147483668:32,2147483669:134348800,2147483670:134217728,2147483671:134219808,2147483672:134350880,2147483673:134217760,
    2147483674:134219776,2147483675:0,2147483676:133120,2147483677:2080,2147483678:131104,2147483679:134350848}],x=[4160749569,528482304,33030144,2064384,129024,8064,504,2147483679],r=s.DES=n.extend({_doReset:function(){for(var b=this._key.words,a=[],c=0;56>c;c++){var d=q[c]-1;a[c]=b[d>>>5]>>>31-d%32&1}b=this._subKeys=[];for(d=0;16>d;d++){for(var f=b[d]=[],l=v[d],c=0;24>c;c++)f[c/6|0]|=a[(w[c]-1+l)%28]<<31-c%6,f[4+(c/6|0)]|=a[28+(w[c+24]-1+l)%28]<<31-c%6;f[0]=f[0]<<1|f[0]>>>31;for(c=1;7>c;c++)f[c]>>>=
    4*(c-1)+3;f[7]=f[7]<<5|f[7]>>>27}a=this._invSubKeys=[];for(c=0;16>c;c++)a[c]=b[15-c]},encryptBlock:function(b,a){this._doCryptBlock(b,a,this._subKeys)},decryptBlock:function(b,a){this._doCryptBlock(b,a,this._invSubKeys)},_doCryptBlock:function(e,a,c){this._lBlock=e[a];this._rBlock=e[a+1];u.call(this,4,252645135);u.call(this,16,65535);l.call(this,2,858993459);l.call(this,8,16711935);u.call(this,1,1431655765);for(var d=0;16>d;d++){for(var f=c[d],n=this._lBlock,p=this._rBlock,q=0,r=0;8>r;r++)q|=b[r][((p^
    f[r])&x[r])>>>0];this._lBlock=p;this._rBlock=n^q}c=this._lBlock;this._lBlock=this._rBlock;this._rBlock=c;u.call(this,1,1431655765);l.call(this,8,16711935);l.call(this,2,858993459);u.call(this,16,65535);u.call(this,4,252645135);e[a]=this._lBlock;e[a+1]=this._rBlock},keySize:2,ivSize:2,blockSize:2});d.DES=n._createHelper(r);s=s.TripleDES=n.extend({_doReset:function(){var b=this._key.words;this._des1=r.createEncryptor(p.create(b.slice(0,2)));this._des2=r.createEncryptor(p.create(b.slice(2,4)));this._des3=
    r.createEncryptor(p.create(b.slice(4,6)))},encryptBlock:function(b,a){this._des1.encryptBlock(b,a);this._des2.decryptBlock(b,a);this._des3.encryptBlock(b,a)},decryptBlock:function(b,a){this._des3.decryptBlock(b,a);this._des2.encryptBlock(b,a);this._des1.decryptBlock(b,a)},keySize:6,ivSize:2,blockSize:2});d.TripleDES=n._createHelper(s)})();
(function(window, angular, undefined) {
  'use strict';

  // Module global settings.
  var settings = {};

  // Module global flags.
  var flags = {
    sdk: false,
    ready: false
  };

  // Deferred Object which will be resolved when the Facebook SDK is ready
  // and the `fbAsyncInit` function is called.
  var loadDeferred;

  /**
   * @name facebook
   * @kind function
   * @description
   * An Angularjs module to take approach of Facebook javascript sdk.
   *
   * @author Luis Carlos Osorio Jayk <luiscarlosjayk@gmail.com>
   */
  angular.module('facebook', []).

    // Declare module settings value
    value('settings', settings).

    // Declare module flags value
    value('flags', flags).

    /**
     * Facebook provider
     */
    provider('Facebook', [
      function() {

        /**
         * Facebook appId
         * @type {Number}
         */
        settings.appId = null;

        this.setAppId = function(appId) {
          settings.appId = appId;
        };

        this.getAppId = function() {
          return settings.appId;
        };

        /**
         * Locale language, english by default
         * @type {String}
         */
        settings.locale = 'en_US';

        this.setLocale = function(locale) {
          settings.locale = locale;
        };

        this.getLocale = function() {
          return settings.locale;
        };

        /**
         * Set if you want to check the authentication status
         * at the start up of the app
         * @type {Boolean}
         */
        settings.status = true;

        this.setStatus = function(status) {
          settings.status = status;
        };

        this.getStatus = function() {
          return settings.status;
        };

        /**
         * Adding a Channel File improves the performance of the javascript SDK,
         * by addressing issues with cross-domain communication in certain browsers.
         * @type {String}
         */
        settings.channelUrl = null;

        this.setChannel = function(channel) {
          settings.channelUrl = channel;
        };

        this.getChannel = function() {
          return settings.channelUrl;
        };

        /**
         * Enable cookies to allow the server to access the session
         * @type {Boolean}
         */
        settings.cookie = true;

        this.setCookie = function(cookie) {
          settings.cookie = cookie;
        };

        this.getCookie = function() {
          return settings.cookie;
        };

        /**
         * Parse XFBML
         * @type {Boolean}
         */
        settings.xfbml = true;

        this.setXfbml = function(enable) {
          settings.xfbml = enable;
        };

        this.getXfbml = function() {
          return settings.xfbml;
        };

        /**
         * Auth Response
         * @type {Object}
         */

        this.setAuthResponse = function(obj) {
          settings.authResponse = obj || true;
        };

        this.getAuthResponse = function() {
          return settings.authResponse;
        };

        /**
         * Frictionless Requests
         * @type {Boolean}
         */
        settings.frictionlessRequests = false;

        this.setFrictionlessRequests = function(enable) {
          settings.frictionlessRequests = enable;
        };

        this.getFrictionlessRequests = function() {
          return settings.frictionlessRequests;
        };

        /**
         * HideFlashCallback
         * @type {Object}
         */
        settings.hideFlashCallback = null;

        this.setHideFlashCallback = function(obj) {
          settings.hideFlashCallback = obj || null;
        };

        this.getHideFlashCallback = function() {
          return settings.hideFlashCallback;
        };

        /**
         * Custom option setting
         * key @type {String}
         * value @type {*}
         * @return {*}
         */
        this.setInitCustomOption = function(key, value) {
          if (!angular.isString(key)) {
            return false;
          }

          settings[key] = value;
          return settings[key];
        };

        /**
         * get init option
         * @param  {String} key
         * @return {*}
         */
        this.getInitOption = function(key) {
          // If key is not String or If non existing key return null
          if (!angular.isString(key) || !settings.hasOwnProperty(key)) {
            return false;
          }

          return settings[key];
        };

        /**
         * load SDK
         */
        settings.loadSDK = true;

        this.setLoadSDK = function(a) {
          settings.loadSDK = !!a;
        };

        this.getLoadSDK = function() {
          return settings.loadSDK;
        };

        /**
         * SDK version
         */
        settings.version = 'v2.1';

        this.setSdkVersion = function(version) {
          settings.version = version;
        };

        this.getSdkVersion = function() {
          return settings.version;
        };

        /**
         * Init Facebook API required stuff
         * This will prepare the app earlier (on settingsuration)
         * @arg {Object/String} initSettings
         * @arg {Boolean} _loadSDK (optional, true by default)
         */
        this.init = function(initSettings, _loadSDK) {
          // If string is passed, set it as appId
          if (angular.isString(initSettings)) {
            settings.appId = initSettings;
          }

          if(angular.isNumber(initSettings)) {
            settings.appId = initSettings.toString();
          }

          // If object is passed, merge it with app settings
          if (angular.isObject(initSettings)) {
            angular.extend(settings, initSettings);
          }

          // Set if Facebook SDK should be loaded automatically or not.
          if (angular.isDefined(_loadSDK)) {
            settings.loadSDK = !!_loadSDK;
          }
        };

        /**
         * This defined the Facebook service
         */
        this.$get = [
          '$q',
          '$rootScope',
          '$timeout',
          '$window',
          function($q, $rootScope, $timeout, $window) {
        	                
            /**
             * This is the NgFacebook class to be retrieved on Facebook Service request.
             */
            function NgFacebook() {
              this.appId = settings.appId;
            }

            /**
             * Ready state method
             * @return {Boolean}
             */
            NgFacebook.prototype.isReady = function() {
              return flags.ready;
            };

            NgFacebook.prototype.login = function () {

              var d = $q.defer(),
                  args = Array.prototype.slice.call(arguments),
                  userFn,
                  userFnIndex; // Converts arguments passed into an array

                // Get user function and it's index in the arguments array,
                // to replace it with custom function, allowing the usage of promises
                angular.forEach(args, function(arg, index) {
                  if (angular.isFunction(arg)) {
                    userFn = arg;
                    userFnIndex = index;
                  }
                });

                // Replace user function intended to be passed to the Facebook API with a custom one
                // for being able to use promises.
                if (angular.isFunction(userFn) && angular.isNumber(userFnIndex)) {
                  args.splice(userFnIndex, 1, function(response) {
                    $timeout(function() {

                      if (response && angular.isUndefined(response.error)) {
                        d.resolve(response);
                      } else {
                        d.reject(response);
                      }

                      if (angular.isFunction(userFn)) {
                        userFn(response);
                      }
                    });
                  });
                }

                // review(mrzmyr): generalize behaviour of isReady check
                if (this.isReady()) {
                  $window.FB.login.apply($window.FB, args);
                } else {
                  $timeout(function() {
                    d.reject("Facebook.login() called before Facebook SDK has loaded.");
                  });
                }

                return d.promise;
            };

            /**
             * Map some asynchronous Facebook SDK methods to NgFacebook
             */
            angular.forEach([
              'logout',
              'api',
              'ui',
              'getLoginStatus'
            ], function(name) {
              NgFacebook.prototype[name] = function() {

                var d = $q.defer(),
                    args = Array.prototype.slice.call(arguments), // Converts arguments passed into an array
                    userFn,
                    userFnIndex;

                // Get user function and it's index in the arguments array,
                // to replace it with custom function, allowing the usage of promises
                angular.forEach(args, function(arg, index) {
                  if (angular.isFunction(arg)) {
                    userFn = arg;
                    userFnIndex = index;
                  }
                });

                // Replace user function intended to be passed to the Facebook API with a custom one
                // for being able to use promises.
                if (angular.isFunction(userFn) && angular.isNumber(userFnIndex)) {
                  args.splice(userFnIndex, 1, function(response) {
                    $timeout(function() {

                      if (response && angular.isUndefined(response.error)) {
                        d.resolve(response);
                      } else {
                        d.reject(response);
                      }

                      if (angular.isFunction(userFn)) {
                        userFn(response);
                      }
                    });
                  });
                }

                $timeout(function() {
                  // Call when loadDeferred be resolved, meaning Service is ready to be used.
                  loadDeferred.promise.then(function() {
                    $window.FB[name].apply(FB, args);
                  });
                });

                return d.promise;
              };
            });

            /**
             * Map Facebook sdk XFBML.parse() to NgFacebook.
             */
            NgFacebook.prototype.parseXFBML = function() {

              var d = $q.defer();

              $timeout(function() {
                // Call when loadDeferred be resolved, meaning Service is ready to be used
                loadDeferred.promise.then(function() {
                  $window.FB.XFBML.parse();
                  d.resolve();
                });
              });

              return d.promise;
            };

            /**
             * Map Facebook SDK subscribe/unsubscribe method to NgFacebook.
             * Use it as Facebook.subscribe / Facebook.unsubscribe in the service.
             */

            angular.forEach([
              'subscribe',
              'unsubscribe',
            ], function(name) {

              NgFacebook.prototype[name] = function() {

                var d = $q.defer(),
                    args = Array.prototype.slice.call(arguments), // Get arguments passed into an array
                    userFn,
                    userFnIndex;

                // Get user function and it's index in the arguments array,
                // to replace it with custom function, allowing the usage of promises
                angular.forEach(args, function(arg, index) {
                  if (angular.isFunction(arg)) {
                    userFn = arg;
                    userFnIndex = index;
                  }
                });

                // Replace user function intended to be passed to the Facebook API with a custom one
                // for being able to use promises.
                if (angular.isFunction(userFn) && angular.isNumber(userFnIndex)) {
                  args.splice(userFnIndex, 1, function(response) {

                    $timeout(function() {

                      if (response && angular.isUndefined(response.error)) {
                        d.resolve(response);
                      } else {
                        d.reject(response);
                      }

                      if (angular.isFunction(userFn)) {
                        userFn(response);
                      }
                    });
                  });
                }

                $timeout(function() {
                  // Call when loadDeferred be resolved, meaning Service is ready to be used
                  loadDeferred.promise.then(function() {
                    $window.FB.Event[name].apply(FB, args);
                  });
                });

                return d.promise;
              };
            });

            return new NgFacebook(); // Singleton
          }
        ];

      }
    ]).

    /**
     * Module initialization
     */
    run([
      '$rootScope',
      '$q',
      '$window',
      '$timeout',
      function($rootScope, $q, $window, $timeout) {
        // Define global loadDeffered to notify when Service callbacks are safe to use
        loadDeferred = $q.defer();

        var loadSDK = settings.loadSDK;
        delete(settings['loadSDK']); // Remove loadSDK from settings since this isn't part from Facebook API.

        /**
         * Define fbAsyncInit required by Facebook API
         */
        
        /**
         * Inject Facebook root element in DOM
         */
        (function addFBRoot() {
          var fbroot = document.getElementById('fb-root');

          if (!fbroot) {
            fbroot = document.createElement('div');
            fbroot.id = 'fb-root';
            document.body.insertBefore(fbroot, document.body.childNodes[0]);
          }

          return fbroot;
        })();

        var libonload = function() {
        	flags.sdk = true;
        	 $timeout(function() {
                 if (!settings.appId) {
                   throw 'Missing appId setting.';
                 }

                 FB.init(settings);

                 flags.ready = true;

                 /**
                  * Subscribe to Facebook API events and broadcast through app.
                  */
                 angular.forEach({
                   'auth.login': 'login',
                   'auth.logout': 'logout',
                   'auth.prompt': 'prompt',
                   'auth.sessionChange': 'sessionChange',
                   'auth.statusChange': 'statusChange',
                   'auth.authResponseChange': 'authResponseChange',
                   'xfbml.render': 'xfbmlRender',
                   'edge.create': 'like',
                   'edge.remove': 'unlike',
                   'comment.create': 'comment',
                   'comment.remove': 'uncomment'
                 }, function(mapped, name) {
                   FB.Event.subscribe(name, function(response) {
                     $timeout(function() {
                       $rootScope.$broadcast('Facebook:' + mapped, response);
                     });
                   });
                 });

                 // Broadcast Facebook:load event
                 $rootScope.$broadcast('Facebook:load');

                 loadDeferred.resolve(FB);
               });
        };
    	  
        /**
         * SDK script injecting
         */
         if(loadSDK) {
          (function injectScript() {
            var src           = '//connect.facebook.net/' + settings.locale + '/sdk.js',
                script        = document.createElement('script');
                script.id     = 'facebook-jssdk';
                script.async  = true;

            // Prefix protocol
            // for sure we don't want to ignore things, but this tests exists,
            // but it isn't recognized by istanbul, so we give it a 'ignore if'
            /* istanbul ignore if */
            if ($window.location.protocol.indexOf('file:') !== -1) {
              src = 'https:' + src;
            }

            script.src = src;
            script.onload = libonload;
            script.onreadystatechange = function() {
            	if (this.readyState == 'complete') {
            		libonload();
            	}
            }
            
            // Fix for IE < 9, and yet supported by latest browsers
            document.getElementsByTagName('head')[0].appendChild(script);
          })();
        }
      }
    ]);

})(window, angular);
(function(window, angular,undefined) {
  'use strict';
  /**
  * Options object available for module
  * options/services definition.
  * @type {Object}
  */
  
  
  var settings = {};
  var flags = {
		    sdk: false,
		    ready: false
		  };
  /**
  * googleplus module
  */
  angular.module('googleplus', []).
  	value('settings', settings).
	value('flags', flags).
    /**
    * GooglePlus provider
    */
    provider('GooglePlus', [function() {

      /**
      * clientId
      * @type {Number}
      */
    	settings.clientId = null;

      this.setClientId = function(clientId) {
    	  settings.clientId = clientId;
        return this;
      };

      this.getClientId = function() {
        return settings.clientId;
      };


      settings.loadSDK = true;

      this.setLoadSDK = function(a) {
        settings.loadSDK = !!a;
      };

      this.getLoadSDK = function() {
        return settings.loadSDK;
      };
      
      /**
      * apiKey
      * @type {String}
      */
      settings.apiKey = null;

      this.setApiKey = function(apiKey) {
    	  settings.apiKey = apiKey;
        return this;
      };

      this.getApiKey = function() {
        return settings.apiKey;
      };
      
      

      /**
      * Scopes
      * @default 'https://www.googleapis.com/auth/plus.login'
      * @type {Boolean}
      */
      settings.scopes = 'https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/userinfo.email';

      this.setScopes = function(scopes) {
    	  settings.scopes = scopes;




        return this;
      };

      this.getScopes = function() {
        return settings.scopes;
      };

      
      /**
      * Init Google Plus API
      */
      this.init = function(customOptions, _loadSDK) {
        angular.extend(settings, customOptions);
        
        if (angular.isDefined(_loadSDK)) {
            settings.loadSDK = !!_loadSDK;
        }
      };

      /**
      * This defines the Google Plus Service on run.
      */
      this.$get = ['$q', '$rootScope', '$window','$timeout', function($q, $rootScope, $window, $timeout) {

      
        /**
        * Create a deferred instance to implement asynchronous calls
        * @type {Object}
        */
        var deferred  = $q.defer();

        /**
        * NgGooglePlus Class
        * @type {Class}
        */
        var NgGooglePlus = function () {};

        

 	   /**
        * Ready state method
        * @return {Boolean}
        */
        NgGooglePlus.prototype.isReady = function() {
          return flags.ready;
        };
        
        NgGooglePlus.prototype.login =  function () {
          gapi.auth.authorize({
            client_id: settings.clientId,
            scope: settings.scopes,
            immediate: false
          }, this.handleAuthResult);
          return deferred.promise;
        };

        NgGooglePlus.prototype.checkAuth = function() {
          gapi.auth.authorize({
            client_id: settings.clientId, 
            scope: settings.scopes,
            immediate: true
          }, this.handleAuthResult);
          return deferred.promise;
        };

        NgGooglePlus.prototype.handleClientLoad = function () {
          gapi.client.setApiKey(settings.apiKey);
          gapi.auth.init(function () { });
          $timeout(this.checkAuth, 1);
        };
        
        NgGooglePlus.prototype.handleAuthResult = function(authResult) {
            if (authResult && !authResult.error) {
              authResult.status="loggin";
           	  $rootScope.$broadcast('GooglePlus:statusChange', authResult);
              deferred.resolve(authResult);
              $rootScope.$apply();
            } else {
              deferred.reject('error');
            }
        };

        NgGooglePlus.prototype.getUser = function() {
            var deferred = $q.defer();

            gapi.client.load('oauth2', 'v2', function () {
              gapi.client.oauth2.userinfo.get().execute(function (resp) {
                deferred.resolve(resp);
                $rootScope.$apply();
              });
            });

            return deferred.promise;
        };
        
        NgGooglePlus.prototype.logout = function(){
        	 var token = gapi.auth.getToken();
        	 var revokeUrl = 'https://accounts.google.com/o/oauth2/revoke?token='+token.access_token;
        	 console.log(revokeUrl);
    	      // 비동기 GET 요청을 수행합니다.
    	      $.ajax({
    	        type: 'GET',
    	        url: revokeUrl,
    	        async: false,
    	        contentType: "application/json",
    	        dataType: 'jsonp',
    	        success: function(nullResponse) {
    	          // 사용자가 연결 해제되었으므로 작업을 수행합니다.
    	          // 응답은 항상 정의되지 않음입니다.
    	        	var disconnect = {};
    	        	disconnect.status = 'disconnect';
    	        	console.log('logout success');
    	          $rootScope.$broadcast('GooglePlus:statusChange', disconnect);
    	        },
    	        error: function(e) {
    	          // 오류 처리
    	          // console.log(e);
    	          // 실패한 경우 사용자가 수동으로 연결 해제하게 할 수 있습니다.
    	          // https://plus.google.com/apps
      	          console.log('logout fail');
    	        }
    	      });
    	   
        };
        
        NgGooglePlus.prototype.getToken = function() {
          return gapi.auth.getToken();
        };

        NgGooglePlus.prototype.setToken = function(token) {
          return gapi.auth.setToken(token);
        };

        return new NgGooglePlus();
      }];
  }])

  // Initialization of module
  .run(['$rootScope', '$timeout' , function($rootScope, $timeout) {
	    var libonload = function() {
	    	flags.sdk = true;
	    	
	    	$timeout(function(){
		    	flags.ready = true;

	    		gapi.auth.authorize({
	                client_id: settings.clientId, 
	                scope: settings.scopes,
	                immediate: true
	              }, function(authResult){
	            	  //console.log(authResult);
	            	  if (authResult && !authResult.error) {
	                	  authResult.status='connected';
	                	  $rootScope.$broadcast('GooglePlus:statusChange', authResult);
	            	  }
	            	  
	            	  //$rootScope.$broadcast('GooglePlus:statusChange', authResult);
	              });
	    	}, 1500);
	    };
		  
	    var loadSDK = settings.loadSDK;
	    delete(settings['loadSDK']); // Remove loadSDK from settings since this isn't part from Facebook API.
	
	    if(loadSDK) {
	        (function injectScript(){
			    var po = document.createElement('script');
			    po.type = 'text/javascript';
			    po.async = true;
			    po.src = 'https://apis.google.com/js/client:plusone.js';
			    po.onload = libonload
			    po.onreadystatechange = function() {
			    	if (this.readyState == 'complete') {
			    		libonload();
			    	}
			    }
			    
			    var s = document.getElementsByTagName('script')[0];
			    s.parentNode.insertBefore(po, s);
			  })();
	  	}; // end loadSDK
  	}])
})(window, angular);
(function(window, angular) {
  'use strict';

  // Deferred Object which will be resolved when the Facebook SDK is ready
  // and the `fbAsyncInit` function is called.

  /**
   * @name User
   * @kind function
   * @description
   * An Angularjs module to take approach of User javascript sdk.
   *
   * @author parkjungun <pheadra4@gmail.com>
   */
  angular.module('user', ['facebook',
                          'googleplus']).
    /**
     * UserService Servie
     */
    service('UserService', ['$rootScope', '$http', '$state', 'Facebook', 'GooglePlus', '$localStorage','$sessionStorage', '$q',
                    function($rootScope,   $http,   $state,   Facebook,   GooglePlus, $localStorage, $sessionStorage, $q) {
    	
		 this.UserInfo = function(csrftoken, authtoken) {
		      var deferred = $q.defer();

		      $http({url:'user/getfortoken', 
		    	  method:'POST',
		    	  data:'csrf-token=' + csrftoken + '&token=' + authtoken +'&provider=WEB',
		    	  headers:{'Content-Type': 'application/x-www-form-urlencoded'}})
		      .then(function(response) {
		        if (response.data.user) {
		          deferred.resolve(response.data);
		        }else{
		          deferred.reject(response.data)
		        }
		      }, function(x) {
		        deferred.reject({ error: "Server Error" });
		      });
		      return deferred.promise;
			};
			
	    this.Login = function(email, password, token) {
	      var deferred = $q.defer();

	      $http({url:'user/login', 
	    	  method:'POST',
	    	  data:'csrf-token='+token+'&email=' +email+ '&password='+password+'&provider=WEB',
	    	  headers:{'Content-Type': 'application/x-www-form-urlencoded'}})
	      .then(function(response) {
	        if (response.data.user) {
	          var data = response.data;
	          deferred.resolve(data);
	        }else{
	          deferred.reject(response.data);
	        }
	      }, function(x) {
	        deferred.reject({ error: "Server Error" });
	      });
	      
	      return deferred.promise;
		};
		
		    
		this.Signup = function(name, email, password, token){
                            var deferred = $q.defer();
                            $http({url:'user/add',
                                method:'POST',
                                data:'csrf-token='+token+'&email=' +email+ '&password='+password+'&name='+name+'&provider=WEB',
                                headers:{'Content-Type': 'application/x-www-form-urlencoded'}})
                                .then(function(response) {
                                    console.log(response);
                                    if ( response.data.email ) {
                                        deferred.resolve(response.data);
                                    }else{
                                        deferred.reject(response.data);
                                    }
                                }, function(x) {
                                    deferred.reject({ error: "Server Error" });
                                });
                            return deferred.promise;
                        };
		
	    this.Logout = function(provider){
	    	try{
		    	if (provider =='FACEBOOK') {
		    		Facebook.logout();
		    	} else if (provider == 'GOOGLE') {
		    		GooglePlus.logout();
		    	}
	    	}catch(exception){
	    	}
	    };
		
		this.FacebookIsReady = function(){
			return Facebook.isReady()
		};
	
	    this.FacebookMe = function(csrftoken, authtoken) {
	    	var deferred = $q.defer();
	    	
	          Facebook.api('/me', function(response) {
	        	 $http({url:'snsuser/add', 
			    	  method:'POST',
			    	  data:'csrf-token='+csrftoken+'&email=' +response.email+ '&password=&name='+response.name+'&provider=FACEBOOK&timezone='+response.timezone+'&locale='+response.locale+'&gender='+response.gender+'&token='+authtoken,
			    	  headers:{'Content-Type': 'application/x-www-form-urlencoded'}})
		        .then(function(response) {
		          if ( response.data ) {
		        	deferred.resolve(response.data);
		          } else {
		        	deferred.reject(response);
		          }
		        }, function(x) {
		    	  deferred.reject({error:'Server Error'});
		        });
	          });
	        return deferred.promise;
	    };
	    
	    this.FacebookLogin = function() {
	       Facebook.login(function(response) {
	    	   
	       });
	    };
	   
	      
	    this.GooglePlusIsReady = function(){
			return GooglePlus.isReady()
		};
	   
	     this.GoogleMe = function(csrftoken, authtoken){
	    	 var deferred = $q.defer();
	    	 
	    	 GooglePlus.getUser().then(function (user) {
	    		 console.log(JSON.stringify(user));
            	$sessionStorage.user = user;

	        	 $http({url:'snsuser/add', 
			    	  method:'POST',
			    	  data:'csrf-token='+csrftoken+'&email=' +user.email+ '&password=&name='+user.name+'&provider=GOOGLE&timezone='+user.timezone+'&locale='+user.locale+'&gender='+user.gender+'&token='+authtoken,
			    	  headers:{'Content-Type': 'application/x-www-form-urlencoded'}})
		       .then(function(response) {
		    	  if ( response.data ) {
		    		deferred.resolve(response.data);
		          } else {
					console.log(response);
		        	deferred.reject(response);
		          }
		       }, function(x) {
		    	  deferred.reject({error:'Server Error'});
			   });
	         });
	    	 
	    	 return deferred.promise;
		 };
		 
		 this.GoogleLogin = function () {
		        GooglePlus.login().then(function (authResult) {

		        }, function (err) {
		            console.log(err);
		        });
		      };
        
    }]).

    /**
     * Module initialization
     */
    run([
      '$rootScope',
      '$q',
      '$window',
      '$timeout',
      function($rootScope,  $q, $window, $timeout) {
    	 
      }
    ]);

})(window, angular);
/*
 * GoJS v1.4.27 JavaScript Library for HTML Canvas Diagrams
 * Northwoods Software, http://www.nwoods.com/
 * GoJS and Northwoods Software are registered trademarks of Northwoods Software Corporation.
 * Copyright (C) 1998-2015 by Northwoods Software Corporation.  All Rights Reserved.
 * THIS SOFTWARE IS LICENSED.  THE LICENSE AGREEMENT IS AT: http://www.gojs.net/1.4.27/doc/license.html.
 */
(function(window) { var aa,ba={};if(void 0===document.createElement("canvas").getContext)throw window.console&&window.console.log("The HTML Canvas element is not supported in this browser,or this browser is in Compatibility mode."),Error("The HTML Canvas element is not supported in this browser,or this browser is in Compatibility mode.");if(!Object.prototype.__defineGetter__&&!Object.defineProperty)throw Error("GoJS requires a newer version of JavaScript");
Object.prototype.__defineGetter__&&!Object.defineProperty&&(Object.defineProperty=function(a,b,c){c.get&&a.__defineGetter__(b,c.get);c.set&&a.__defineSetter__(b,c.set)});Object.prototype.__lookupGetter__&&!Object.getOwnPropertyDescriptor&&(Object.getOwnPropertyDescriptor=function(a,b){return{get:a.__lookupGetter__(b),set:a.__lookupSetter__(b)}});Object.getPrototypeOf||(Object.getPrototypeOf=function(a){return a.__proto__});Object.isFrozen||(Object.isFrozen=function(a){return!0===a.pH});
Object.freeze||(Object.freeze=function(a){a.pH=!0});Array.isArray||(Array.isArray=function(a){return"[object Array]"===Object.prototype.toString.call(a)});Function.prototype.bind||(Function.prototype.bind=function(a){function b(){return g.apply(a,f.concat(d.call(arguments)))}function c(){}var d=Array.prototype.slice,f=d.call(arguments,1),g=this;c.prototype=this.prototype;b.prototype=new c;return b});
(function(){for(var a=0,b=["ms","moz","webkit","o"],c=0;c<b.length&&!window.requestAnimationFrame;++c)window.requestAnimationFrame=window[b[c]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[b[c]+"CancelAnimationFrame"]||window[b[c]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(b){var c=(new Date).getTime(),g=Math.max(8,16-(c-a)),h=window.setTimeout(function(){b(c+g)},g);a=c+g;return h});window.cancelAnimationFrame||(window.cancelAnimationFrame=
function(a){clearTimeout(a)})})();var e={Rz:!1,uK:!1,FF:!1,QE:!1,ZH:!1,assert:!1,hK:null,kK:function(){},mK:function(){},lK:function(){},jK:function(){},rK:function(){},nK:function(){},pK:function(){},oK:function(){},iK:!1,OK:!1,LK:!1,MK:!1,BI:!1,qK:function(){}},e=null;ba.Debug=null;
var t={ji:Object.freeze([]),gA:{},CE:0,Gw:{},fA:0,$s:"...",kt:{},Lw:0,lB:[],lx:null,ln:document.createElement("canvas").getContext("2d"),Tp:"",fK:document.createElement("img"),$z:[],gB:"ontouchstart"in window,RK:"ongesturestart"in window,lE:!1,Ts:null,Us:null,Ss:null,lw:"",Um:window.navigator&&0<window.navigator.userAgent.indexOf("534.30")&&0<window.navigator.userAgent.indexOf("Android"),Qw:window.navigator&&0<window.navigator.userAgent.indexOf("MSIE 10.0"),tA:window.navigator&&0<window.navigator.userAgent.indexOf("Trident/7"),
Vm:0<=navigator.platform.toUpperCase().indexOf("MAC"),WI:navigator.platform.match(/(iPhone|iPod|iPad)/i),TG:!1,WG:!1,VG:!1,UG:!1,mE:null,Zp:!1,RG:!1,SG:!1,iE:function(a,b,c){var d;return function(){var f=this,g=arguments;clearTimeout(d);d=setTimeout(function(){d=null;c||a.apply(f,g)},b);c&&!d&&a.apply(f,g)}},m:function(a){e&&e.ZH&&alert(a);throw Error(a);},L:function(a,b){if(a.nb){var c="The object is frozen, so its properties cannot be set: "+a.toString();void 0!==b&&(c+="  to value: "+b);t.m(c)}},
l:function(a,b,c,d){a instanceof b||(c=t.$h(c),void 0!==d&&(c+="."+d),t.bc(a,b,c))},i:function(a,b,c,d){typeof a!==b&&(c=t.$h(c),void 0!==d&&(c+="."+d),t.bc(a,b,c))},q:function(a,b,c){"number"===typeof a&&isFinite(a)||(b=t.$h(b),void 0!==c&&(b+="."+c),t.m(b+" must be a real number type, and not NaN or Infinity: "+a))},Aa:function(a,b,c,d){a instanceof ca&&a.Re===b||(c=t.$h(c),void 0!==d&&(c+="."+d),t.bc(a,"a constant of class "+t.xg(b),c))},To:function(a,b){"string"===typeof a?da(a)||t.m('Color "'+
a+'" is not a valid color string for '+b):a instanceof ea||t.m("Value for "+b+" must be a color string or a Brush, not "+a)},bc:function(a,b,c,d){b=t.$h(b);c=t.$h(c);void 0!==d&&(c+="."+d);"string"===typeof a?t.m(c+" value is not an instance of "+b+': "'+a+'"'):t.m(c+" value is not an instance of "+b+": "+a)},ka:function(a,b,c,d){c=t.$h(c);void 0!==d&&(c+="."+d);t.m(c+" is not in the range "+b+": "+a)},ad:function(a){t.m(t.xg(a)+" constructor cannot take any arguments.")},Qb:function(a){t.m("Collection was modified during iteration: "+
a.toString()+"\n  Perhaps you should iterate over a copy of the collection,\n  or you could collect items to be removed from the collection after the iteration.")},trace:function(a){window&&window.console&&window.console.log(a)},qb:function(a){return"object"===typeof a&&null!==a},zc:null,Ym:function(a,b,c,d){for(b=0;b<a.length;b++){var f=a[b];t.qb(f)&&(f=t.yf(f,c,d));a[b]=f}return d||t.zc(a)?a:window.ko.observableArray(a)},yf:function(a,b,c){if(a)for(var d in a)"__gohashid"!==d&&(a[d]=t.hJ(a,d,b,
c));return a},hJ:function(a,b,c,d){var f=a[b],g;g=t.zc(f)?f:Array.isArray(f)?t.Ym(f,b,c,d):window.ko.observable(f);if(d){if(d=g.DB){h=c.__gohashid;d[h]&&(d[h].dispose(),delete d[h]);var h=!1,k;for(k in d){h=!0;break}}!h&&g.pu&&(g.pu.dispose(),delete g.pu)}else{g.pu||(g.pu=g.subscribe(function(a){g.to=a},null,"beforeChange"));d=g.DB;d||(g.DB=d={});var h=c.__gohashid;d[h]||(d[h]=g.subscribe(function(d){c.mx(a,b,g.to,d)}))}return g},isArray:function(a){return Array.isArray(a)||t.zc&&t.zc(a)||a instanceof
NodeList||a instanceof HTMLCollection},YI:function(a){return Array.isArray(a)||t.zc&&t.zc(a)},Rs:function(a,b,c){t.isArray(a)||t.bc(a,"Array or NodeList or HTMLCollection",b,c)},ub:function(a){t.zc&&t.zc(a)&&(a=a());return a.length},lb:function(a,b){t.zc&&t.zc(a)&&(a=a());Array.isArray(a);return a[b]},MD:function(a,b,c){t.zc&&t.zc(a)&&(a=a());Array.isArray(a)?a[b]=c:t.m("Cannot replace an object in an HTMLCollection or NodeList at "+b)},Pz:function(a,b){t.zc&&t.zc(a)&&(a=a());if(Array.isArray(a))return a.indexOf(b);
for(var c=a.length,d=0;d<c;d++)if(a[d]===b)return d;return-1},Ti:function(a,b,c){t.zc&&t.zc(a)&&(a=a());Array.isArray(a)?b>=a.length?a.push(c):a.splice(b,0,c):t.m("Cannot insert an object into an HTMLCollection or NodeList: "+c+" at "+b)},Ui:function(a,b){t.zc&&t.zc(a)&&(a=a());Array.isArray(a)?b>=a.length?a.pop():a.splice(b,1):t.m("Cannot remove an object from an HTMLCollection or NodeList at "+b)},by:[],K:function(){var a=t.by.pop();return void 0===a?new w:a},mc:function(a,b){var c=t.by.pop();if(void 0===
c)return new w(a,b);c.x=a;c.y=b;return c},B:function(a){t.by.push(a)},zB:[],Cl:function(){var a=t.zB.pop();return void 0===a?new fa:a},ck:function(a){t.zB.push(a)},ey:[],Gf:function(){var a=t.ey.pop();return void 0===a?new x:a},ik:function(a,b,c,d){var f=t.ey.pop();if(void 0===f)return new x(a,b,c,d);f.x=a;f.y=b;f.width=c;f.height=d;return f},hc:function(a){t.ey.push(a)},AB:[],oh:function(){var a=t.AB.pop();return void 0===a?new ga:a},We:function(a){t.AB.push(a)},gy:null,u:function(){var a=t.gy;return null!==
a?(t.gy=null,a):new ha},v:function(a){a.reset();t.gy=a},yB:[],Db:function(){var a=t.yB.pop();return void 0===a?[]:a},ya:function(a){a.length=0;t.yB.push(a)},BB:1,Ac:function(a){a.__gohashid=t.BB++},jt:function(a){var b=a.__gohashid;void 0===b&&(b=t.BB++,a.__gohashid=b);return b},od:function(a){return a.__gohashid},g:function(a,b,c){"name"!==b&&"length"!==b&&(a[b]=c)},ga:function(a,b){b.oy=a;ba[a]=b},Ka:function(a,b){function c(){}c.prototype=b.prototype;a.prototype=new c;a.prototype.constructor=a},
Xh:function(a){a.tH=!0},defineProperty:function(a,b,c,d,f){t.i(a,"function","Util.defineProperty:classfunc");t.i(b,"object","Util.defineProperty:propobj");t.i(c,"function","Util.defineProperty:getter");t.i(d,"function","Util.defineProperty:setter");for(var g in b){var h=b[g];b={get:c,set:d};if(void 0!==f)for(var k in f)b[k]=f[k];Object.defineProperty(a.prototype,g,b);f=Object.getOwnPropertyDescriptor(a.prototype,g);h&&f&&Object.defineProperty(a.prototype,h,f);if(e&&h){var l=h.charAt(0).toUpperCase()+
h.slice(1);h===l&&t.m('Defining capitalized property "'+l+'"!?');Object.defineProperty(a.prototype,l,{get:function(){t.Qw||t.tA||t.trace('Getting the property "'+l+'" is probably not what you intended: it is capitalized but should be spelled "'+h+'"')},set:function(){t.m('Setting the property "'+l+'" is probably not what you intended: it is capitalized but should be spelled "'+h+'"')}})}break}},A:function(a,b,c,d){t.i(a,"function","Util.defineReadOnlyProperty:classfunc");t.i(b,"object","Util.defineReadOnlyProperty:propobj");
t.i(c,"function","Util.defineReadOnlyProperty:getter");for(var f in b){var g=b[f];b={get:c,set:function(a){t.m('The property "'+g+'" is read-only and cannot be set to '+a)}};if(void 0!==d)for(var h in d)b[h]=d[h];Object.defineProperty(a.prototype,f,b);d=Object.getOwnPropertyDescriptor(a.prototype,f);g&&d&&Object.defineProperty(a.prototype,g,d);if(e&&g){var k=g.charAt(0).toUpperCase()+g.slice(1);Object.defineProperty(a.prototype,k,{get:function(){t.Qw||t.tA||t.trace('Getting the property "'+k+'" is probably not what you intended: it is capitalized but should be spelled "'+
g+'"')},set:function(){t.m('Setting the read-only property "'+k+'" is probably not what you intended: it is capitalized but should be spelled "'+g+'", and cannot be set anyway')}})}break}},Vd:function(a,b){for(var c in b)b[c]=!0;a.prototype.WC=b},$h:function(a){return void 0===a?"":"string"===typeof a?a:"function"===typeof a?t.xg(a):null===a?"*":""},xg:function(a){if("function"===typeof a){if(a.oy)return a.oy;if(a.name)return a.name;var b=a.toString(),c=b.indexOf("(");if(b=b.substring(9,c).trim())return a.oy=
b}else if("object"===typeof a&&a.constructor)return t.xg(a.constructor);return typeof a},w:function(a,b,c){t.i(a,"function","Util.defineEnumValue:classfunc");t.i(b,"string","Util.defineEnumValue:name");t.i(c,"number","Util.defineEnumValue:num");c=new ca(a,b,c);Object.freeze(c);a[b]=c;var d=a.cu;d||(d=new ia("string",ca),a.cu=d);d.add(b,c);return c},Pm:function(a,b){if(!b)return null;t.i(a,"function","Util.findEnumValueForName:classfunc");t.i(b,"string","Util.findEnumValueForName:name");var c=a.cu;
return c?c.za(b):null},gI:function(a,b,c,d){var f={},g;for(g in a){for(var h=!1,k=1;k<arguments.length;k++)if(arguments[k]===g){h=!0;break}h||(f[g]=a[g])}return f},ib:function(a,b){if(!a||!b)return null;var c=void 0;try{"function"===typeof b?c=b(a):"function"===typeof a.getAttribute?(c=a.getAttribute(b),null===c&&(c=void 0)):(c=a[b],t.zc&&t.zc(c)&&(c=c()))}catch(d){e&&t.trace("property get error: "+d.toString())}return c},Qa:function(a,b,c){if(a&&b)try{if("function"===typeof b)b(a,c);else if("function"===
typeof a.setAttribute)a.setAttribute(b,c);else if(t.zc){var d=a[b];t.zc(d)?d(c):a[b]=c}else a[b]=c}catch(f){e&&t.trace("property set error: "+f.toString())}},tx:function(a,b){t.i(a,"object","Setting properties requires Objects as arguments");t.i(b,"object","Setting properties requires Objects as arguments");var c=e;c||(e=t);var d=a instanceof y,f=a instanceof z,g;for(g in b){g||t.m("Setting properties requires non-empty property names");var h=a,k=g;if(d||f){var l=g.indexOf(".");if(0<l){var m=g.substring(0,
l);d?h=a.oe(m):(h=a[m])||(h=a.wb[m]);h?k=g.substr(l+1):t.m("Unable to find object named: "+m+" in "+a.toString()+" when trying to set property: "+g)}}if("_"!==k[0]&&!t.Jw(h,k))if(f&&t.Jw(a.wb,k))h=a.wb;else if(f&&ja(a,k)){a.Jz(k,b[k]);continue}else t.m('Trying to set undefined property "'+k+'" on object: '+h.toString());h[k]=b[g];"_"===k[0]&&(l=h.Ml,l||(l=[],h.Ml=l),l.push(k))}e=c;return a},Jw:function(a,b){for(var c=Object.getPrototypeOf(a);c&&c!==Function;){if(c.hasOwnProperty(b))return!0;var d=
c.WC;if(d&&d[b])return!0;c=Object.getPrototypeOf(c)}return!1},SD:function(a,b){if(!t.qb(b)||b instanceof Element||b instanceof CanvasRenderingContext2D)return"";var c="",d;for(d in b)if("string"!==typeof d)""===c&&(c=b+"\n"),c+="  "+d+" is not a string property\n";else if("_"!==d.charAt(0)&&!(2>=d.length)){var f=t.ib(b,d);null===f||"function"===typeof f||t.Jw(b,d)||(""===c&&(c=b+"\n"),c+='  unknown property "'+d+'" has value: '+f+" at "+a+"\n")}return c},jw:function(a,b){if(b&&"number"!==typeof b&&
"string"!==typeof b&&"boolean"!==typeof b&&"function"!==typeof b)if(void 0!==t.od(b)){if(!t.Gv.contains(b))if(t.Gv.add(b),t.gv.add(t.SD(a,b)),b instanceof B||b instanceof ma||b instanceof ia)for(var c=b.k;c.next();)t.jw(a+"["+c.key+"]",c.value);else for(c in b){var d=t.ib(b,c);if(void 0!==d&&null!==d&&t.qb(d)&&d!==b.WC){if(b instanceof na){if(d===b.no)continue}else if(b instanceof y){if("data"===c||d===b.Ol)continue;if("itemArray"===c||d===b.yi)continue;if(b instanceof C&&d===b.Fj)continue}else if(!(b instanceof
z))if(b instanceof oa){if("archetypeGroupData"===c||d===b.jy)continue}else if(b instanceof qa){if("archetypeLinkData"===c||d===b.ly)continue;if("archetypeLabelNodeData"===c||d===b.ky)continue}else if(b instanceof ra){if("archetypeNodeData"===c||d===b.xk)continue}else if(b instanceof E){if("nodeDataArray"===c||d===b.Me)continue;if("linkDataArray"===c||d===b.Xg||d===b.em)continue;if(d===b.Bc)continue;if(d===b.xh)continue}else if(b instanceof ta||b instanceof ua||b instanceof va)continue;t.jw(a+"."+
c,d)}}}else if(Array.isArray(b))for(c=0;c<b.length;c++)t.jw(a+"["+c+"]",b[c]);else t.gv.add(t.SD(a,b))},bI:function(a){void 0===t.Gv?t.Gv=new ma:t.Gv.clear();t.gv=new xa;t.jw("",a);a=t.gv.toString();t.gv=null;return a},EJ:function(a){for(var b=[],c=0;256>c;c++)b[c]=c;for(var d=0,f,c=0;256>c;c++)d=(d+b[c]+119)%256,f=b[c],b[c]=b[d],b[d]=f;for(var d=c=0,g="",h=0;h<a.length;h++)c=(c+1)%256,d=(d+b[c])%256,f=b[c],b[c]=b[d],b[d]=f,g+=String.fromCharCode(a.charCodeAt(h)^b[(b[c]+b[d])%256]);return g},OI:function(a){for(var b=
[],c=0;256>c;c++)b["0123456789abcdef".charAt(c>>4)+"0123456789abcdef".charAt(c&15)]=String.fromCharCode(c);a.length%2&&(a="0"+a);for(var d=[],f=0,c=0;c<a.length;c+=2)d[f++]=b[a.substr(c,2)];a=d.join("");return""===a?"0":a},Ha:function(a){return t.EJ(t.OI(a))},Gl:null,dw:"7da71ca0ad381e90",cI:"@COLOR1",dI:"@COLOR2"};
t.Gl=function(){var a=document.createElement("canvas"),b=a.getContext("2d");b[t.Ha("7ca11abfd022028846")]=t.Ha("398c3597c01238");for(var c=["5da73c80a3330d854f9e5e671d6633","32ab5ff3b26f42dc0ed90f22412913b54ae6247590da4bb21c324ba3a84e385776","54a702f3e53909c447824c6706603faf4cfb236cdfda5de14c134ba1a95a2d4c7cc6f93c1387","74bf19bce72555874c86"],d=1;5>d;d++)b[t.Ha("7ca11abfd7330390")](t.Ha(c[d-1]),10,15*d+0);b[t.Ha("7ca11abfd022028846")]=t.Ha("39f046ebb36e4b");for(d=1;5>d;d++)b[t.Ha("7ca11abfd7330390")](t.Ha(c[d-
1]),10,15*d+0);if(4!==c.length||"5"!==c[0][0]||"7"!==c[3][0])t.w=function(a,b){var c=new ca(a,b,2);Object.freeze(c);a[b]=c;var d=a.cu;d||(d=new ia("string",ca),a.cu=d);d.add(b,c);return c};return a}();function ca(a,b,c){t.Ac(this);this.JB=a;this.Zb=b;this.yH=c}ca.prototype.toString=function(){return t.xg(this.JB)+"."+this.Zb};t.A(ca,{Re:"classType"},function(){return this.JB});t.A(ca,{name:"name"},function(){return this.Zb});t.A(ca,{value:"value"},function(){return this.yH});
function xa(){this.IB=[]}xa.prototype.toString=function(){return this.IB.join("")};xa.prototype.add=function(a){a&&this.IB.push(a)};function ya(){}t.A(ya,{k:"iterator"},function(){return this});ya.prototype.reset=ya.prototype.reset=function(){};ya.prototype.next=ya.prototype.hasNext=ya.prototype.next=function(){return!1};ya.prototype.first=ya.prototype.$a=function(){return null};ya.prototype.any=function(){return!1};ya.prototype.all=function(){return!0};ya.prototype.each=function(){};
t.A(ya,{count:"count"},function(){return 0});ya.prototype.cg=function(){};ya.prototype.toString=function(){return"EmptyIterator"};t.ag=new ya;function Aa(a){this.key=-1;this.value=a}t.Vd(Aa,{key:!0,value:!0});t.A(Aa,{k:"iterator"},function(){return this});Aa.prototype.reset=Aa.prototype.reset=function(){this.key=-1};Aa.prototype.next=Aa.prototype.hasNext=Aa.prototype.next=function(){return-1===this.key?(this.key=0,!0):!1};Aa.prototype.first=Aa.prototype.$a=function(){this.key=0;return this.value};
Aa.prototype.any=function(a){this.key=-1;return a(this.value)};Aa.prototype.all=function(a){this.key=-1;return a(this.value)};Aa.prototype.each=function(a){this.key=-1;a(this.value)};t.A(Aa,{count:"count"},function(){return 1});Aa.prototype.cg=function(){this.value=null};Aa.prototype.toString=function(){return"SingletonIterator("+this.value+")"};function Ba(a){this.Dd=a;this.Ij=null;this.reset()}t.Vd(Ba,{key:!0,value:!0});t.A(Ba,{k:"iterator"},function(){return this});t.g(Ba,"predicate",Ba.prototype.tl);
t.defineProperty(Ba,{tl:"predicate"},function(){return this.Ij},function(a){this.Ij=a});Ba.prototype.reset=Ba.prototype.reset=function(){var a=this.Dd;a.Cd=null;this.Ya=a.V;this.Vc=-1};Ba.prototype.next=Ba.prototype.hasNext=Ba.prototype.next=function(){var a=this.Dd;a.V!==this.Ya&&t.Qb(a);var a=a.n,b=a.length,c=++this.Vc,d=this.Ij;if(null!==d)for(;c<b;){var f=a[c];if(d(f))return this.key=this.Vc=c,this.value=f,!0;c++}else{if(c<b)return this.key=c,this.value=a[c],!0;this.cg()}return!1};
Ba.prototype.first=Ba.prototype.$a=function(){var a=this.Dd;this.Ya=a.V;this.Vc=0;var a=a.n,b=a.length,c=this.Ij;if(null!==c){for(var d=0;d<b;){var f=a[d];if(c(f))return this.key=this.Vc=d,this.value=f;d++}return null}return 0<b?(f=a[0],this.key=0,this.value=f):null};Ba.prototype.any=function(a){var b=this.Dd;b.Cd=null;var c=b.V;this.Vc=-1;for(var d=b.n,f=d.length,g=this.Ij,h=0;h<f;h++){var k=d[h];if(null===g||g(k)){if(a(k))return!0;b.V!==c&&t.Qb(b)}}return!1};
Ba.prototype.all=function(a){var b=this.Dd;b.Cd=null;var c=b.V;this.Vc=-1;for(var d=b.n,f=d.length,g=this.Ij,h=0;h<f;h++){var k=d[h];if(null===g||g(k)){if(!a(k))return!1;b.V!==c&&t.Qb(b)}}return!0};Ba.prototype.each=function(a){var b=this.Dd;b.Cd=null;var c=b.V;this.Vc=-1;for(var d=b.n,f=d.length,g=this.Ij,h=0;h<f;h++){var k=d[h];if(null===g||g(k))a(k),b.V!==c&&t.Qb(b)}};t.A(Ba,{count:"count"},function(){var a=this.Ij;if(null!==a){for(var b=0,c=this.Dd.n,d=c.length,f=0;f<d;f++)a(c[f])&&b++;return b}return this.Dd.n.length});
Ba.prototype.cg=function(){this.key=-1;this.value=null;this.Ya=-1;this.Ij=null;this.Dd.Cd=this};Ba.prototype.toString=function(){return"ListIterator@"+this.Vc+"/"+this.Dd.count};function Ca(a){this.Dd=a;this.reset()}t.Vd(Ca,{key:!0,value:!0});t.A(Ca,{k:"iterator"},function(){return this});Ca.prototype.reset=Ca.prototype.reset=function(){var a=this.Dd;a.fo=null;this.Ya=a.V;this.Vc=a.n.length};
Ca.prototype.next=Ca.prototype.hasNext=Ca.prototype.next=function(){var a=this.Dd;a.V!==this.Ya&&t.Qb(a);var b=--this.Vc;if(0<=b)return this.key=b,this.value=a.n[b],!0;this.cg();return!1};Ca.prototype.first=Ca.prototype.$a=function(){var a=this.Dd;this.Ya=a.V;var b=a.n;this.Vc=a=b.length-1;return 0<=a?(b=b[a],this.key=a,this.value=b):null};Ca.prototype.any=function(a){var b=this.Dd;b.fo=null;var c=b.V,d=b.n,f=d.length;this.Vc=f;for(f-=1;0<=f;f++){if(a(d[f]))return!0;b.V!==c&&t.Qb(b)}return!1};
Ca.prototype.all=function(a){var b=this.Dd;b.fo=null;var c=b.V,d=b.n,f=d.length;this.Vc=f;for(f-=1;0<=f;f++){if(!a(d[f]))return!1;b.V!==c&&t.Qb(b)}return!0};Ca.prototype.each=function(a){var b=this.Dd;b.fo=null;var c=b.V,d=b.n,f=d.length;this.Vc=f;for(f-=1;0<=f;f++)a(d[f]),b.V!==c&&t.Qb(b)};t.A(Ca,{count:"count"},function(){return this.Dd.n.length});Ca.prototype.cg=function(){this.key=-1;this.value=null;this.Ya=-1;this.Dd.fo=this};
Ca.prototype.toString=function(){return"ListIteratorBackwards("+this.Vc+"/"+this.Dd.count+")"};
function B(a){t.Ac(this);this.nb=!1;this.n=[];this.V=0;this.fo=this.Cd=null;void 0===a||null===a?this.da=null:"string"===typeof a?"object"===a||"string"===a||"number"===a||"boolean"===a||"function"===a?this.da=a:t.ka(a,"the string 'object', 'number', 'string', 'boolean', or 'function'","List constructor: type"):"function"===typeof a?this.da=a===Object?"object":a===String?"string":a===Number?"number":a===Boolean?"boolean":a===Function?"function":a:t.ka(a,"null, a primitive type name, or a class type",
"List constructor: type")}t.ga("List",B);B.prototype.Pg=function(a){null!==this.da&&("string"===typeof this.da?typeof a===this.da&&null!==a||t.bc(a,this.da):a instanceof this.da||t.bc(a,this.da))};B.prototype.Qd=function(){var a=this.V;a++;999999999<a&&(a=0);this.V=a};B.prototype.freeze=B.prototype.freeze=function(){this.nb=!0;return this};B.prototype.thaw=B.prototype.Ma=function(){this.nb=!1;return this};B.prototype.toString=function(){return"List("+t.$h(this.da)+")#"+t.od(this)};
B.prototype.add=B.prototype.add=function(a){null!==a&&(e&&this.Pg(a),t.L(this,a),this.n.push(a),this.Qd())};B.prototype.addAll=B.prototype.Oe=function(a){if(null===a)return this;t.L(this);var b=this.n;if(t.isArray(a))for(var c=t.ub(a),d=0;d<c;d++){var f=t.lb(a,d);e&&this.Pg(f);b.push(f)}else for(a=a.k;a.next();)f=a.value,e&&this.Pg(f),b.push(f);this.Qd();return this};B.prototype.clear=B.prototype.clear=function(){t.L(this);this.n.length=0;this.Qd()};
B.prototype.contains=B.prototype.has=B.prototype.contains=function(a){if(null===a)return!1;e&&this.Pg(a);return-1!==this.n.indexOf(a)};B.prototype.indexOf=B.prototype.indexOf=function(a){if(null===a)return-1;e&&this.Pg(a);return this.n.indexOf(a)};B.prototype.elt=B.prototype.get=B.prototype.wa=function(a){e&&t.q(a,B,"elt:i");var b=this.n;(0>a||a>=b.length)&&t.ka(a,"0 <= i < length",B,"elt:i");return b[a]};
B.prototype.setElt=B.prototype.set=B.prototype.Mg=function(a,b){e&&(this.Pg(b),t.q(a,B,"setElt:i"));var c=this.n;(0>a||a>=c.length)&&t.ka(a,"0 <= i < length",B,"setElt:i");t.L(this,a);c[a]=b};B.prototype.first=B.prototype.$a=function(){var a=this.n;return 0===a.length?null:a[0]};B.prototype.any=function(a){for(var b=this.n,c=this.V,d=b.length,f=0;f<d;f++){if(a(b[f]))return!0;this.V!==c&&t.Qb(this)}return!1};
B.prototype.all=function(a){for(var b=this.n,c=this.V,d=b.length,f=0;f<d;f++){if(!a(b[f]))return!1;this.V!==c&&t.Qb(this)}return!0};B.prototype.each=function(a){for(var b=this.n,c=this.V,d=b.length,f=0;f<d;f++)a(b[f]),this.V!==c&&t.Qb(this)};B.prototype.insertAt=B.prototype.Jd=function(a,b){e&&(this.Pg(b),t.q(a,B,"insertAt:i"));0>a&&t.ka(a,">= 0",B,"insertAt:i");t.L(this,a);var c=this.n;a>=c.length?c.push(b):c.splice(a,0,b);this.Qd();return!0};
B.prototype.remove=B.prototype["delete"]=B.prototype.remove=function(a){if(null===a)return!1;e&&this.Pg(a);t.L(this,a);var b=this.n;a=b.indexOf(a);if(-1===a)return!1;a===b.length-1?b.pop():b.splice(a,1);this.Qd();return!0};B.prototype.removeAt=B.prototype.qd=function(a){e&&t.q(a,B,"removeAt:i");var b=this.n;(0>a||a>=b.length)&&t.ka(a,"0 <= i < length",B,"removeAt:i");t.L(this,a);a===b.length-1?b.pop():b.splice(a,1);this.Qd()};
B.prototype.removeRange=B.prototype.removeRange=function(a,b){e&&(t.q(a,B,"removeRange:from"),t.q(b,B,"removeRange:to"));var c=this.n;(0>a||a>=c.length)&&t.ka(a,"0 <= from < length",B,"elt:from");(0>b||b>=c.length)&&t.ka(b,"0 <= to < length",B,"elt:to");t.L(this,a);var d=c.slice((b||a)+1||c.length);c.length=0>a?c.length+a:a;c.push.apply(c,d);this.Qd()};B.prototype.copy=function(){for(var a=new B(this.da),b=this.n,c=this.count,d=0;d<c;d++)a.add(b[d]);return a};
B.prototype.toArray=B.prototype.Ie=function(){for(var a=this.n,b=this.count,c=Array(b),d=0;d<b;d++)c[d]=a[d];return c};B.prototype.toSet=function(){for(var a=new ma(this.da),b=this.n,c=this.count,d=0;d<c;d++)a.add(b[d]);return a};B.prototype.sort=B.prototype.sort=function(a){e&&t.i(a,"function",B,"sort:sortfunc");t.L(this);this.n.sort(a);this.Qd();return this};
B.prototype.sortRange=B.prototype.Up=function(a,b,c){var d=this.n,f=d.length;void 0===b&&(b=0);void 0===c&&(c=f);e&&(t.i(a,"function",B,"sortRange:sortfunc"),t.q(b,B,"sortRange:from"),t.q(c,B,"sortRange:to"));t.L(this);var g=c-b;if(1>=g)return this;(0>b||b>=f-1)&&t.ka(b,"0 <= from < length",B,"sortRange:from");if(2===g)return c=d[b],f=d[b+1],0<a(c,f)&&(d[b]=f,d[b+1]=c,this.Qd()),this;if(0===b)if(c>=f)d.sort(a);else for(g=d.slice(0,c),g.sort(a),a=0;a<c;a++)d[a]=g[a];else if(c>=f)for(g=d.slice(b),g.sort(a),
a=b;a<f;a++)d[a]=g[a-b];else for(g=d.slice(b,c),g.sort(a),a=b;a<c;a++)d[a]=g[a-b];this.Qd();return this};B.prototype.reverse=B.prototype.reverse=function(){t.L(this);this.n.reverse();this.Qd();return this};t.A(B,{count:"count"},function(){return this.n.length});t.A(B,{size:"size"},function(){return this.n.length});t.A(B,{length:"length"},function(){return this.n.length});t.A(B,{k:"iterator"},function(){if(0>=this.n.length)return t.ag;var a=this.Cd;return null!==a?(a.reset(),a):new Ba(this)});
t.A(B,{Xm:"iteratorBackwards"},function(){if(0>=this.n.length)return t.ag;var a=this.fo;return null!==a?(a.reset(),a):new Ca(this)});function Da(a){this.p=a;this.reset()}t.Vd(Da,{key:!0,value:!0});t.A(Da,{k:"iterator"},function(){return this});Da.prototype.reset=Da.prototype.reset=function(){var a=this.p;a.Cd=null;this.Ya=a.V;this.yb=null};
Da.prototype.next=Da.prototype.hasNext=Da.prototype.next=function(){var a=this.p;a.V!==this.Ya&&t.Qb(a);var b=this.yb,b=null===b?a.cb:b.Tb;if(null!==b)return this.yb=b,this.value=b.value,this.key=b.key,!0;this.cg();return!1};Da.prototype.first=Da.prototype.$a=function(){var a=this.p;this.Ya=a.V;a=a.cb;if(null!==a){this.yb=a;var b=a.value;this.key=a.key;return this.value=b}return null};
Da.prototype.any=function(a){var b=this.p;b.Cd=null;var c=b.V;this.yb=null;for(var d=b.cb;null!==d;){if(a(d.value))return!0;b.V!==c&&t.Qb(b);d=d.Tb}return!1};Da.prototype.all=function(a){var b=this.p;b.Cd=null;var c=b.V;this.yb=null;for(var d=b.cb;null!==d;){if(!a(d.value))return!1;b.V!==c&&t.Qb(b);d=d.Tb}return!0};Da.prototype.each=function(a){var b=this.p;b.Cd=null;var c=b.V;this.yb=null;for(var d=b.cb;null!==d;)a(d.value),b.V!==c&&t.Qb(b),d=d.Tb};t.A(Da,{count:"count"},function(){return this.p.ed});
Da.prototype.cg=function(){this.value=this.key=null;this.Ya=-1;this.p.Cd=this};Da.prototype.toString=function(){return null!==this.yb?"SetIterator@"+this.yb.value:"SetIterator"};
function ma(a){t.Ac(this);this.nb=!1;void 0===a||null===a?this.da=null:"string"===typeof a?"object"===a||"string"===a||"number"===a?this.da=a:t.ka(a,"the string 'object', 'number' or 'string'","Set constructor: type"):"function"===typeof a?this.da=a===Object?"object":a===String?"string":a===Number?"number":a:t.ka(a,"null, a primitive type name, or a class type","Set constructor: type");this.fd={};this.ed=0;this.Cd=null;this.V=0;this.Ih=this.cb=null}t.ga("Set",ma);
ma.prototype.Pg=function(a){null!==this.da&&("string"===typeof this.da?typeof a===this.da&&null!==a||t.bc(a,this.da):a instanceof this.da||t.bc(a,this.da))};ma.prototype.Qd=function(){var a=this.V;a++;999999999<a&&(a=0);this.V=a};ma.prototype.freeze=ma.prototype.freeze=function(){this.nb=!0;return this};ma.prototype.thaw=ma.prototype.Ma=function(){this.nb=!1;return this};ma.prototype.toString=function(){return"Set("+t.$h(this.da)+")#"+t.od(this)};
ma.prototype.add=ma.prototype.add=function(a){if(null===a)return!1;e&&this.Pg(a);t.L(this,a);var b=a;t.qb(a)&&(b=t.jt(a));return void 0===this.fd[b]?(this.ed++,a=new Ea(a,a),this.fd[b]=a,b=this.Ih,null===b?this.cb=a:(a.uo=b,b.Tb=a),this.Ih=a,this.Qd(),!0):!1};ma.prototype.addAll=ma.prototype.Oe=function(a){if(null===a)return this;t.L(this);if(t.isArray(a))for(var b=t.ub(a),c=0;c<b;c++)this.add(t.lb(a,c));else for(a=a.k;a.next();)this.add(a.value);return this};
ma.prototype.contains=ma.prototype.has=ma.prototype.contains=function(a){if(null===a)return!1;e&&this.Pg(a);var b=a;return t.qb(a)&&(b=t.od(a),void 0===b)?!1:void 0!==this.fd[b]};ma.prototype.containsAll=function(a){if(null===a)return!0;for(a=a.k;a.next();)if(!this.contains(a.value))return!1;return!0};ma.prototype.containsAny=function(a){if(null===a)return!0;for(a=a.k;a.next();)if(this.contains(a.value))return!0;return!1};
ma.prototype.first=ma.prototype.$a=function(){var a=this.cb;return null===a?null:a.value};ma.prototype.any=function(a){for(var b=this.V,c=this.cb;null!==c;){if(a(c.value))return!0;this.V!==b&&t.Qb(this);c=c.Tb}return!1};ma.prototype.all=function(a){for(var b=this.V,c=this.cb;null!==c;){if(!a(c.value))return!1;this.V!==b&&t.Qb(this);c=c.Tb}return!0};ma.prototype.each=function(a){for(var b=this.V,c=this.cb;null!==c;)a(c.value),this.V!==b&&t.Qb(this),c=c.Tb};
ma.prototype.remove=ma.prototype["delete"]=ma.prototype.remove=function(a){if(null===a)return!1;e&&this.Pg(a);t.L(this,a);var b=a;if(t.qb(a)&&(b=t.od(a),void 0===b))return!1;a=this.fd[b];if(void 0===a)return!1;var c=a.Tb,d=a.uo;null!==c&&(c.uo=d);null!==d&&(d.Tb=c);this.cb===a&&(this.cb=c);this.Ih===a&&(this.Ih=d);delete this.fd[b];this.ed--;this.Qd();return!0};
ma.prototype.removeAll=function(a){if(null===a)return this;t.L(this);if(t.isArray(a))for(var b=t.ub(a),c=0;c<b;c++)this.remove(t.lb(a,c));else for(a=a.k;a.next();)this.remove(a.value);return this};ma.prototype.retainAll=function(a){if(null===a||0===this.count)return this;t.L(this);var b=new ma(this.da);b.Oe(a);a=new B(this.da);for(var c=this.k;c.next();)b.contains(c.value)||a.add(c.value);for(b=a.k;b.next();)this.remove(b.value);return this};
ma.prototype.clear=ma.prototype.clear=function(){t.L(this);this.fd={};this.ed=0;this.Ih=this.cb=null;this.Qd()};ma.prototype.copy=function(){var a=new ma(this.da),b=this.fd,c;for(c in b)a.add(b[c].value);return a};ma.prototype.toArray=ma.prototype.Ie=function(){var a=Array(this.ed),b=this.fd,c=0,d;for(d in b)a[c]=b[d].value,c++;return a};ma.prototype.toList=function(){var a=new B(this.da),b=this.fd,c;for(c in b)a.add(b[c].value);return a};t.A(ma,{count:"count"},function(){return this.ed});
t.A(ma,{size:"size"},function(){return this.ed});t.A(ma,{k:"iterator"},function(){if(0>=this.ed)return t.ag;var a=this.Cd;return null!==a?(a.reset(),a):new Da(this)});function Fa(a){this.Xa=a;this.reset()}t.Vd(Fa,{key:!0,value:!0});t.A(Fa,{k:"iterator"},function(){return this});Fa.prototype.reset=Fa.prototype.reset=function(){this.Ya=this.Xa.V;this.yb=null};
Fa.prototype.next=Fa.prototype.hasNext=Fa.prototype.next=function(){var a=this.Xa;a.V!==this.Ya&&t.Qb(a);var b=this.yb,b=null===b?a.cb:b.Tb;if(null!==b)return this.yb=b,this.value=this.key=a=b.key,!0;this.cg();return!1};Fa.prototype.first=Fa.prototype.$a=function(){var a=this.Xa;this.Ya=a.V;a=a.cb;return null!==a?(this.yb=a,this.value=this.key=a=a.key):null};Fa.prototype.any=function(a){var b=this.Xa,c=b.V;this.yb=null;for(var d=b.cb;null!==d;){if(a(d.key))return!0;b.V!==c&&t.Qb(b);d=d.Tb}return!1};
Fa.prototype.all=function(a){var b=this.Xa,c=b.V;this.yb=null;for(var d=b.cb;null!==d;){if(!a(d.key))return!1;b.V!==c&&t.Qb(b);d=d.Tb}return!0};Fa.prototype.each=function(a){var b=this.Xa,c=b.V;this.yb=null;for(var d=b.cb;null!==d;)a(d.key),b.V!==c&&t.Qb(b),d=d.Tb};t.A(Fa,{count:"count"},function(){return this.Xa.ed});Fa.prototype.cg=function(){this.value=this.key=null;this.Ya=-1};Fa.prototype.toString=function(){return null!==this.yb?"MapKeySetIterator@"+this.yb.value:"MapKeySetIterator"};
function Ha(a){t.Ac(this);this.nb=!0;this.Xa=a}t.Ka(Ha,ma);Ha.prototype.freeze=function(){return this};Ha.prototype.Ma=function(){return this};Ha.prototype.toString=function(){return"MapKeySet("+this.Xa.toString()+")"};Ha.prototype.add=Ha.prototype.set=Ha.prototype.add=function(){t.m("This Set is read-only: "+this.toString());return!1};Ha.prototype.contains=Ha.prototype.has=Ha.prototype.contains=function(a){return this.Xa.contains(a)};
Ha.prototype.remove=Ha.prototype["delete"]=Ha.prototype.remove=function(){t.m("This Set is read-only: "+this.toString());return!1};Ha.prototype.clear=Ha.prototype.clear=function(){t.m("This Set is read-only: "+this.toString())};Ha.prototype.first=Ha.prototype.$a=function(){var a=this.Xa.cb;return null!==a?a.key:null};Ha.prototype.any=function(a){for(var b=this.Xa.cb;null!==b;){if(a(b.key))return!0;b=b.Tb}return!1};
Ha.prototype.all=function(a){for(var b=this.Xa.cb;null!==b;){if(!a(b.key))return!1;b=b.Tb}return!0};Ha.prototype.each=function(a){for(var b=this.Xa.cb;null!==b;)a(b.key),b=b.Tb};Ha.prototype.copy=function(){return new Ha(this.Xa)};Ha.prototype.toSet=function(){var a=new ma(this.Xa.Hh),b=this.Xa.fd,c;for(c in b)a.add(b[c].key);return a};Ha.prototype.toArray=Ha.prototype.Ie=function(){var a=this.Xa.fd,b=Array(this.Xa.ed),c=0,d;for(d in a)b[c]=a[d].key,c++;return b};
Ha.prototype.toList=function(){var a=new B(this.da),b=this.Xa.fd,c;for(c in b)a.add(b[c].key);return a};t.A(Ha,{count:"count"},function(){return this.Xa.ed});t.A(Ha,{size:"size"},function(){return this.Xa.ed});t.A(Ha,{k:"iterator"},function(){return 0>=this.Xa.ed?t.ag:new Fa(this.Xa)});function Ka(a){this.Xa=a;this.reset()}t.Vd(Ka,{key:!0,value:!0});t.A(Ka,{k:"iterator"},function(){return this});Ka.prototype.reset=Ka.prototype.reset=function(){var a=this.Xa;a.ho=null;this.Ya=a.V;this.yb=null};
Ka.prototype.next=Ka.prototype.hasNext=Ka.prototype.next=function(){var a=this.Xa;a.V!==this.Ya&&t.Qb(a);var b=this.yb,b=null===b?a.cb:b.Tb;if(null!==b)return this.yb=b,this.value=b.value,this.key=b.key,!0;this.cg();return!1};Ka.prototype.first=Ka.prototype.$a=function(){var a=this.Xa;this.Ya=a.V;a=a.cb;if(null!==a){this.yb=a;var b=a.value;this.key=a.key;return this.value=b}return null};
Ka.prototype.any=function(a){var b=this.Xa;b.ho=null;var c=b.V;this.yb=null;for(var d=b.cb;null!==d;){if(a(d.value))return!0;b.V!==c&&t.Qb(b);d=d.Tb}return!1};Ka.prototype.all=function(a){var b=this.Xa;b.ho=null;var c=b.V;this.yb=null;for(var d=b.cb;null!==d;){if(!a(d.value))return!1;b.V!==c&&t.Qb(b);d=d.Tb}return!0};Ka.prototype.each=function(a){var b=this.Xa;b.ho=null;var c=b.V;this.yb=null;for(var d=b.cb;null!==d;)a(d.value),b.V!==c&&t.Qb(b),d=d.Tb};t.A(Ka,{count:"count"},function(){return this.Xa.ed});
Ka.prototype.cg=function(){this.value=this.key=null;this.Ya=-1;this.Xa.ho=this};Ka.prototype.toString=function(){return null!==this.yb?"MapValueSetIterator@"+this.yb.value:"MapValueSetIterator"};function Ea(a,b){this.key=a;this.value=b;this.uo=this.Tb=null}t.Vd(Ea,{key:!0,value:!0});Ea.prototype.toString=function(){return"{"+this.key+":"+this.value+"}"};function La(a){this.Xa=a;this.reset()}t.Vd(La,{key:!0,value:!0});t.A(La,{k:"iterator"},function(){return this});
La.prototype.reset=La.prototype.reset=function(){var a=this.Xa;a.Cd=null;this.Ya=a.V;this.yb=null};La.prototype.next=La.prototype.hasNext=La.prototype.next=function(){var a=this.Xa;a.V!==this.Ya&&t.Qb(a);var b=this.yb,b=null===b?a.cb:b.Tb;if(null!==b)return this.yb=b,this.key=b.key,this.value=b.value,!0;this.cg();return!1};La.prototype.first=La.prototype.$a=function(){var a=this.Xa;this.Ya=a.V;a=a.cb;return null!==a?(this.yb=a,this.key=a.key,this.value=a.value,a):null};
La.prototype.any=function(a){var b=this.Xa;b.Cd=null;var c=b.V;this.yb=null;for(var d=b.cb;null!==d;){if(a(d))return!0;b.V!==c&&t.Qb(b);d=d.Tb}return!1};La.prototype.all=function(a){var b=this.Xa;b.Cd=null;var c=b.V;this.yb=null;for(var d=b.cb;null!==d;){if(!a(d))return!1;b.V!==c&&t.Qb(b);d=d.Tb}return!0};La.prototype.each=function(a){var b=this.Xa;b.Cd=null;var c=b.V;this.yb=null;for(var d=b.cb;null!==d;)a(d),b.V!==c&&t.Qb(b),d=d.Tb};t.A(La,{count:"count"},function(){return this.Xa.ed});
La.prototype.cg=function(){this.value=this.key=null;this.Ya=-1;this.Xa.Cd=this};La.prototype.toString=function(){return null!==this.yb?"MapIterator@"+this.yb:"MapIterator"};
function ia(a,b){t.Ac(this);this.nb=!1;void 0===a||null===a?this.Hh=null:"string"===typeof a?"object"===a||"string"===a||"number"===a?this.Hh=a:t.ka(a,"the string 'object', 'number' or 'string'","Map constructor: keytype"):"function"===typeof a?this.Hh=a===Object?"object":a===String?"string":a===Number?"number":a:t.ka(a,"null, a primitive type name, or a class type","Map constructor: keytype");void 0===b||null===b?this.Ri=null:"string"===typeof b?"object"===b||"string"===b||"boolean"===b||"number"===
b||"function"===b?this.Ri=b:t.ka(b,"the string 'object', 'number', 'string', 'boolean', or 'function'","Map constructor: valtype"):"function"===typeof b?this.Ri=b===Object?"object":b===String?"string":b===Number?"number":b===Boolean?"boolean":b===Function?"function":b:t.ka(b,"null, a primitive type name, or a class type","Map constructor: valtype");this.fd={};this.ed=0;this.ho=this.Cd=null;this.V=0;this.Ih=this.cb=null}t.ga("Map",ia);
function Ma(a,b){null!==a.Hh&&("string"===typeof a.Hh?typeof b===a.Hh&&null!==b||t.bc(b,a.Hh):b instanceof a.Hh||t.bc(b,a.Hh))}ia.prototype.Qd=function(){var a=this.V;a++;999999999<a&&(a=0);this.V=a};ia.prototype.freeze=ia.prototype.freeze=function(){this.nb=!0;return this};ia.prototype.thaw=ia.prototype.Ma=function(){this.nb=!1;return this};ia.prototype.toString=function(){return"Map("+t.$h(this.Hh)+","+t.$h(this.Ri)+")#"+t.od(this)};
ia.prototype.add=ia.prototype.set=ia.prototype.add=function(a,b){e&&(Ma(this,a),null!==this.Ri&&("string"===typeof this.Ri?typeof b===this.Ri&&null!==b||t.bc(b,this.Ri):b instanceof this.Ri||t.bc(b,this.Ri)));t.L(this,a);var c=a;t.qb(a)&&(c=t.jt(a));var d=this.fd[c];if(void 0===d)return this.ed++,d=new Ea(a,b),this.fd[c]=d,c=this.Ih,null===c?this.cb=d:(d.uo=c,c.Tb=d),this.Ih=d,this.Qd(),!0;d.value=b;return!1};
ia.prototype.addAll=ia.prototype.Oe=function(a){if(null===a)return this;if(t.isArray(a))for(var b=t.ub(a),c=0;c<b;c++){var d=t.lb(a,c);this.add(d.key,d.value)}else for(e&&t.l(a,ia,ia,"addAll:map"),a=a.k;a.next();)this.add(a.key,a.value);return this};ia.prototype.first=ia.prototype.$a=function(){return this.cb};ia.prototype.any=function(a){for(var b=this.V,c=this.cb;null!==c;){if(a(c))return!0;this.V!==b&&t.Qb(this);c=c.Tb}return!1};
ia.prototype.all=function(a){for(var b=this.V,c=this.cb;null!==c;){if(!a(c))return!1;this.V!==b&&t.Qb(this);c=c.Tb}return!0};ia.prototype.each=function(a){for(var b=this.V,c=this.cb;null!==c;)a(c),this.V!==b&&t.Qb(this),c=c.Tb};ia.prototype.contains=ia.prototype.has=ia.prototype.contains=function(a){e&&Ma(this,a);var b=a;return t.qb(a)&&(b=t.od(a),void 0===b)?!1:void 0!==this.fd[b]};
ia.prototype.getValue=ia.prototype.get=ia.prototype.za=function(a){e&&Ma(this,a);var b=a;if(t.qb(a)&&(b=t.od(a),void 0===b))return null;a=this.fd[b];return void 0===a?null:a.value};
ia.prototype.remove=ia.prototype["delete"]=ia.prototype.remove=function(a){if(null===a)return!1;e&&Ma(this,a);t.L(this,a);var b=a;if(t.qb(a)&&(b=t.od(a),void 0===b))return!1;a=this.fd[b];if(void 0===a)return!1;var c=a.Tb,d=a.uo;null!==c&&(c.uo=d);null!==d&&(d.Tb=c);this.cb===a&&(this.cb=c);this.Ih===a&&(this.Ih=d);delete this.fd[b];this.ed--;this.Qd();return!0};ia.prototype.clear=ia.prototype.clear=function(){t.L(this);this.fd={};this.ed=0;this.Ih=this.cb=null;this.Qd()};
ia.prototype.copy=function(){var a=new ia(this.Hh,this.Ri),b=this.fd,c;for(c in b){var d=b[c];a.add(d.key,d.value)}return a};ia.prototype.toArray=ia.prototype.Ie=function(){var a=this.fd,b=Array(this.ed),c=0,d;for(d in a){var f=a[d];b[c]=new Ea(f.key,f.value);c++}return b};ia.prototype.toKeySet=ia.prototype.Fl=function(){return new Ha(this)};t.A(ia,{count:"count"},function(){return this.ed});t.A(ia,{size:"size"},function(){return this.ed});
t.A(ia,{k:"iterator"},function(){if(0>=this.count)return t.ag;var a=this.Cd;return null!==a?(a.reset(),a):new La(this)});t.A(ia,{BK:"iteratorKeys"},function(){return 0>=this.count?t.ag:new Fa(this)});t.A(ia,{jF:"iteratorValues"},function(){if(0>=this.count)return t.ag;var a=this.ho;return null!==a?(a.reset(),a):new Ka(this)});function w(a,b){void 0===a||void 0===b?this.y=this.x=0:!e||"number"===typeof a&&"number"===typeof b?(this.x=a,this.y=b):t.m("Invalid arguments to Point constructor")}
t.ga("Point",w);t.Xh(w);t.Vd(w,{x:!0,y:!0});w.prototype.assign=function(a){this.x=a.x;this.y=a.y};w.prototype.p=function(a,b){this.x=a;this.y=b};w.prototype.setTo=w.prototype.Sp=function(a,b){e&&(t.i(a,"number",w,"setTo:x"),t.i(b,"number",w,"setTo:y"));t.L(this);this.x=a;this.y=b;return this};w.prototype.set=w.prototype.set=function(a){e&&t.l(a,w,w,"set:p");t.L(this);this.x=a.x;this.y=a.y;return this};w.prototype.copy=function(){var a=new w;a.x=this.x;a.y=this.y;return a};
w.prototype.Ja=function(){this.nb=!0;Object.freeze(this);return this};w.prototype.Z=function(){return Object.isFrozen(this)?this:this.copy().freeze()};w.prototype.freeze=function(){this.nb=!0;return this};w.prototype.Ma=function(){Object.isFrozen(this)&&t.m("cannot thaw constant: "+this);this.nb=!1;return this};
w.parse=function(a){if("string"===typeof a){a=a.split(" ");for(var b=0,c=0;""===a[b];)b++;var d=a[b++];d&&(c=parseFloat(d));for(var f=0;""===a[b];)b++;(d=a[b++])&&(f=parseFloat(d));return new w(c,f)}return new w};w.stringify=function(a){return a instanceof w?a.x.toString()+" "+a.y.toString():a.toString()};w.prototype.toString=function(){return"Point("+this.x+","+this.y+")"};w.prototype.equals=w.prototype.M=function(a){return a instanceof w?this.x===a.x&&this.y===a.y:!1};
w.prototype.equalTo=function(a,b){return this.x===a&&this.y===b};w.prototype.equalsApprox=w.prototype.tf=function(a){return F.I(this.x,a.x)&&F.I(this.y,a.y)};w.prototype.add=w.prototype.add=function(a){e&&t.l(a,w,w,"add:p");t.L(this);this.x+=a.x;this.y+=a.y;return this};w.prototype.subtract=w.prototype.Vt=function(a){e&&t.l(a,w,w,"subtract:p");t.L(this);this.x-=a.x;this.y-=a.y;return this};
w.prototype.offset=w.prototype.offset=function(a,b){e&&(t.q(a,w,"offset:dx"),t.q(b,w,"offset:dy"));t.L(this);this.x+=a;this.y+=b;return this};w.prototype.rotate=w.prototype.rotate=function(a){e&&t.q(a,w,"rotate:angle");t.L(this);if(0===a)return this;var b=this.x,c=this.y;if(0===b&&0===c)return this;var d;90===a?(a=0,d=1):180===a?(a=-1,d=0):270===a?(a=0,d=-1):(d=a*Math.PI/180,a=Math.cos(d),d=Math.sin(d));this.x=a*b-d*c;this.y=d*b+a*c;return this};
w.prototype.scale=w.prototype.scale=function(a,b){e&&(t.q(a,w,"scale:sx"),t.q(b,w,"scale:sy"));this.x*=a;this.y*=b;return this};w.prototype.distanceSquaredPoint=w.prototype.Zj=function(a){e&&t.l(a,w,w,"distanceSquaredPoint:p");var b=a.x-this.x;a=a.y-this.y;return b*b+a*a};w.prototype.distanceSquared=w.prototype.Zs=function(a,b){e&&(t.q(a,w,"distanceSquared:px"),t.q(b,w,"distanceSquared:py"));var c=a-this.x,d=b-this.y;return c*c+d*d};
w.prototype.normalize=w.prototype.normalize=function(){t.L(this);var a=this.x,b=this.y,c=Math.sqrt(a*a+b*b);0<c&&(this.x=a/c,this.y=b/c);return this};w.prototype.directionPoint=w.prototype.aj=function(a){e&&t.l(a,w,w,"directionPoint:p");return Oa(a.x-this.x,a.y-this.y)};w.prototype.direction=w.prototype.direction=function(a,b){e&&(t.q(a,w,"direction:px"),t.q(b,w,"direction:py"));return Oa(a-this.x,b-this.y)};
function Oa(a,b){if(0===a)return 0<b?90:0>b?270:0;if(0===b)return 0<a?0:180;if(isNaN(a)||isNaN(b))return 0;var c=180*Math.atan(Math.abs(b/a))/Math.PI;0>a?c=0>b?c+180:180-c:0>b&&(c=360-c);return c}w.prototype.projectOntoLineSegment=function(a,b,c,d){e&&(t.q(a,w,"projectOntoLineSegment:px"),t.q(b,w,"projectOntoLineSegment:py"),t.q(c,w,"projectOntoLineSegment:qx"),t.q(d,w,"projectOntoLineSegment:qy"));F.dn(a,b,c,d,this.x,this.y,this);return this};
w.prototype.projectOntoLineSegmentPoint=function(a,b){e&&(t.l(a,w,w,"projectOntoLineSegmentPoint:p"),t.l(b,w,w,"projectOntoLineSegmentPoint:q"));F.dn(a.x,a.y,b.x,b.y,this.x,this.y,this);return this};w.prototype.snapToGrid=function(a,b,c,d){e&&(t.q(a,w,"snapToGrid:originx"),t.q(b,w,"snapToGrid:originy"),t.q(c,w,"snapToGrid:cellwidth"),t.q(d,w,"snapToGrid:cellheight"));F.dt(this.x,this.y,a,b,c,d,this);return this};
w.prototype.snapToGridPoint=function(a,b){e&&(t.l(a,w,w,"snapToGridPoint:p"),t.l(b,fa,w,"snapToGridPoint:q"));F.dt(this.x,this.y,a.x,a.y,b.width,b.height,this);return this};w.prototype.setRectSpot=w.prototype.Qt=function(a,b){e&&(t.l(a,x,w,"setRectSpot:r"),t.l(b,H,w,"setRectSpot:spot"));t.L(this);this.x=a.x+b.x*a.width+b.offsetX;this.y=a.y+b.y*a.height+b.offsetY;return this};
w.prototype.setSpot=w.prototype.Rt=function(a,b,c,d,f){e&&(t.q(a,w,"setSpot:x"),t.q(b,w,"setSpot:y"),t.q(c,w,"setSpot:w"),t.q(d,w,"setSpot:h"),(0>c||0>d)&&t.m("Point.setSpot:Width and height cannot be negative"),t.l(f,H,w,"setSpot:spot"));t.L(this);this.x=a+f.x*c+f.offsetX;this.y=b+f.y*d+f.offsetY;return this};w.prototype.transform=function(a){e&&t.l(a,ga,w,"transform:t");a.Sa(this);return this};function Qa(a,b){e&&t.l(b,ga,w,"transformInverted:t");b.ai(a);return a}var Ra;
w.distanceLineSegmentSquared=Ra=function(a,b,c,d,f,g){e&&(t.q(a,w,"distanceLineSegmentSquared:px"),t.q(b,w,"distanceLineSegmentSquared:py"),t.q(c,w,"distanceLineSegmentSquared:ax"),t.q(d,w,"distanceLineSegmentSquared:ay"),t.q(f,w,"distanceLineSegmentSquared:bx"),t.q(g,w,"distanceLineSegmentSquared:by"));var h=f-c,k=g-d,l=h*h+k*k;c-=a;d-=b;var m=-c*h-d*k;if(0>=m||m>=l)return h=f-a,k=g-b,Math.min(c*c+d*d,h*h+k*k);a=h*d-k*c;return a*a/l};var Sa;
w.distanceSquared=Sa=function(a,b,c,d){e&&(t.q(a,w,"distanceSquared:px"),t.q(b,w,"distanceSquared:py"),t.q(c,w,"distanceSquared:qx"),t.q(d,w,"distanceSquared:qy"));a=c-a;b=d-b;return a*a+b*b};var Ta;
w.direction=Ta=function(a,b,c,d){e&&(t.q(a,w,"direction:px"),t.q(b,w,"direction:py"),t.q(c,w,"direction:qx"),t.q(d,w,"direction:qy"));a=c-a;b=d-b;if(0===a)return 0<b?90:0>b?270:0;if(0===b)return 0<a?0:180;if(isNaN(a)||isNaN(b))return 0;d=180*Math.atan(Math.abs(b/a))/Math.PI;0>a?d=0>b?d+180:180-d:0>b&&(d=360-d);return d};w.prototype.isReal=w.prototype.N=function(){return isFinite(this.x)&&isFinite(this.y)};
function fa(a,b){void 0===a||void 0===b?this.height=this.width=0:!e||"number"===typeof a&&(0<=a||isNaN(a))&&"number"===typeof b&&(0<=b||isNaN(b))?(this.width=a,this.height=b):t.m("Invalid arguments to Size constructor")}t.ga("Size",fa);t.Xh(fa);t.Vd(fa,{width:!0,height:!0});fa.prototype.assign=function(a){this.width=a.width;this.height=a.height};fa.prototype.p=function(a,b){this.width=a;this.height=b};
fa.prototype.setTo=fa.prototype.Sp=function(a,b){e&&(t.i(a,"number",fa,"setTo:w"),t.i(b,"number",fa,"setTo:h"));0>a&&t.ka(a,">= 0",fa,"setTo:w");0>b&&t.ka(b,">= 0",fa,"setTo:h");t.L(this);this.width=a;this.height=b;return this};fa.prototype.set=fa.prototype.set=function(a){e&&t.l(a,fa,fa,"set:s");t.L(this);this.width=a.width;this.height=a.height;return this};fa.prototype.copy=function(){var a=new fa;a.width=this.width;a.height=this.height;return a};
fa.prototype.Ja=function(){this.nb=!0;Object.freeze(this);return this};fa.prototype.Z=function(){return Object.isFrozen(this)?this:this.copy().freeze()};fa.prototype.freeze=function(){this.nb=!0;return this};fa.prototype.Ma=function(){Object.isFrozen(this)&&t.m("cannot thaw constant: "+this);this.nb=!1;return this};
fa.parse=function(a){if("string"===typeof a){a=a.split(" ");for(var b=0,c=0;""===a[b];)b++;var d=a[b++];d&&(c=parseFloat(d));for(var f=0;""===a[b];)b++;(d=a[b++])&&(f=parseFloat(d));return new fa(c,f)}return new fa};fa.stringify=function(a){return a instanceof fa?a.width.toString()+" "+a.height.toString():a.toString()};fa.prototype.toString=function(){return"Size("+this.width+","+this.height+")"};
fa.prototype.equals=fa.prototype.M=function(a){return a instanceof fa?this.width===a.width&&this.height===a.height:!1};fa.prototype.equalTo=function(a,b){return this.width===a&&this.height===b};fa.prototype.equalsApprox=fa.prototype.tf=function(a){return F.I(this.width,a.width)&&F.I(this.height,a.height)};fa.prototype.isReal=fa.prototype.N=function(){return isFinite(this.width)&&isFinite(this.height)};
function x(a,b,c,d){void 0===a?this.height=this.width=this.y=this.x=0:a instanceof w?b instanceof w?(this.x=Math.min(a.x,b.x),this.y=Math.min(a.y,b.y),this.width=Math.abs(a.x-b.x),this.height=Math.abs(a.y-b.y)):b instanceof fa?(this.x=a.x,this.y=a.y,this.width=b.width,this.height=b.height):t.m("Incorrect arguments supplied"):!e||"number"===typeof a&&"number"===typeof b&&"number"===typeof c&&(0<=c||isNaN(c))&&"number"===typeof d&&(0<=d||isNaN(d))?(this.x=a,this.y=b,this.width=c,this.height=d):t.m("Invalid arguments to Rect constructor")}
t.ga("Rect",x);t.Xh(x);t.Vd(x,{x:!0,y:!0,width:!0,height:!0});x.prototype.assign=function(a){this.x=a.x;this.y=a.y;this.width=a.width;this.height=a.height};x.prototype.p=function(a,b,c,d){this.x=a;this.y=b;this.width=c;this.height=d};function Va(a,b,c){a.width=b;a.height=c}
x.prototype.setTo=x.prototype.Sp=function(a,b,c,d){e&&(t.i(a,"number",x,"setTo:x"),t.i(b,"number",x,"setTo:y"),t.i(c,"number",x,"setTo:w"),t.i(d,"number",x,"setTo:h"));0>c&&t.ka(c,">= 0",x,"setTo:w");0>d&&t.ka(d,">= 0",x,"setTo:h");t.L(this);this.x=a;this.y=b;this.width=c;this.height=d;return this};x.prototype.set=x.prototype.set=function(a){e&&t.l(a,x,x,"set:r");t.L(this);this.x=a.x;this.y=a.y;this.width=a.width;this.height=a.height;return this};
x.prototype.setPoint=x.prototype.Ef=function(a){e&&t.l(a,w,x,"setPoint:p");t.L(this);this.x=a.x;this.y=a.y;return this};x.prototype.setSize=function(a){e&&t.l(a,fa,x,"setSize:s");t.L(this);this.width=a.width;this.height=a.height;return this};x.prototype.copy=function(){var a=new x;a.x=this.x;a.y=this.y;a.width=this.width;a.height=this.height;return a};x.prototype.Ja=function(){this.nb=!0;Object.freeze(this);return this};x.prototype.Z=function(){return Object.isFrozen(this)?this:this.copy().freeze()};
x.prototype.freeze=function(){this.nb=!0;return this};x.prototype.Ma=function(){Object.isFrozen(this)&&t.m("cannot thaw constant: "+this);this.nb=!1;return this};x.parse=function(a){if("string"===typeof a){a=a.split(" ");for(var b=0,c=0;""===a[b];)b++;var d=a[b++];d&&(c=parseFloat(d));for(var f=0;""===a[b];)b++;(d=a[b++])&&(f=parseFloat(d));for(var g=0;""===a[b];)b++;(d=a[b++])&&(g=parseFloat(d));for(var h=0;""===a[b];)b++;(d=a[b++])&&(h=parseFloat(d));return new x(c,f,g,h)}return new x};
x.stringify=function(a){return a instanceof x?a.x.toString()+" "+a.y.toString()+" "+a.width.toString()+" "+a.height.toString():a.toString()};x.prototype.toString=function(){return"Rect("+this.x+","+this.y+","+this.width+","+this.height+")"};x.prototype.equals=x.prototype.M=function(a){return a instanceof x?this.x===a.x&&this.y===a.y&&this.width===a.width&&this.height===a.height:!1};x.prototype.equalTo=function(a,b,c,d){return this.x===a&&this.y===b&&this.width===c&&this.height===d};
x.prototype.equalsApprox=x.prototype.tf=function(a){return F.I(this.x,a.x)&&F.I(this.y,a.y)&&F.I(this.width,a.width)&&F.I(this.height,a.height)};x.prototype.containsPoint=x.prototype.Fa=function(a){e&&t.l(a,w,x,"containsPoint:p");return this.x<=a.x&&this.x+this.width>=a.x&&this.y<=a.y&&this.y+this.height>=a.y};x.prototype.containsRect=x.prototype.Vj=function(a){e&&t.l(a,x,x,"containsRect:r");return this.x<=a.x&&a.x+a.width<=this.x+this.width&&this.y<=a.y&&a.y+a.height<=this.y+this.height};
x.prototype.contains=x.prototype.contains=function(a,b,c,d){e?(t.q(a,x,"contains:x"),t.q(b,x,"contains:y"),void 0===c?c=0:t.q(c,x,"contains:w"),void 0===d?d=0:t.q(d,x,"contains:h"),(0>c||0>d)&&t.m("Rect.contains:Width and height cannot be negative")):(void 0===c&&(c=0),void 0===d&&(d=0));return this.x<=a&&a+c<=this.x+this.width&&this.y<=b&&b+d<=this.y+this.height};x.prototype.reset=function(){t.L(this);this.height=this.width=this.y=this.x=0};
x.prototype.offset=x.prototype.offset=function(a,b){e&&(t.q(a,x,"offset:dx"),t.q(b,x,"offset:dy"));t.L(this);this.x+=a;this.y+=b;return this};x.prototype.inflate=x.prototype.Sf=function(a,b){e&&(t.q(a,x,"inflate:w"),t.q(b,x,"inflate:h"));return Wa(this,b,a,b,a)};x.prototype.addMargin=x.prototype.bw=function(a){e&&t.l(a,ab,x,"addMargin:m");return Wa(this,a.top,a.right,a.bottom,a.left)};
x.prototype.subtractMargin=x.prototype.YJ=function(a){e&&t.l(a,ab,x,"subtractMargin:m");return Wa(this,-a.top,-a.right,-a.bottom,-a.left)};x.prototype.grow=function(a,b,c,d){e&&(t.q(a,x,"grow:t"),t.q(b,x,"grow:r"),t.q(c,x,"grow:b"),t.q(d,x,"grow:l"));return Wa(this,a,b,c,d)};function Wa(a,b,c,d,f){t.L(a);var g=a.width;c+f<=-g?(a.x+=g/2,a.width=0):(a.x-=f,a.width+=c+f);c=a.height;b+d<=-c?(a.y+=c/2,a.height=0):(a.y-=b,a.height+=b+d);return a}
x.prototype.intersectRect=function(a){e&&t.l(a,x,x,"intersectRect:r");return cb(this,a.x,a.y,a.width,a.height)};x.prototype.intersect=function(a,b,c,d){e&&(t.q(a,x,"intersect:x"),t.q(b,x,"intersect:y"),t.q(c,x,"intersect:w"),t.q(d,x,"intersect:h"),(0>c||0>d)&&t.m("Rect.intersect:Width and height cannot be negative"));return cb(this,a,b,c,d)};
function cb(a,b,c,d,f){t.L(a);var g=Math.max(a.x,b),h=Math.max(a.y,c);b=Math.min(a.x+a.width,b+d);c=Math.min(a.y+a.height,c+f);a.x=g;a.y=h;a.width=Math.max(0,b-g);a.height=Math.max(0,c-h);return a}x.prototype.intersectsRect=x.prototype.Tf=function(a){e&&t.l(a,x,x,"intersectsRect:r");return this.$E(a.x,a.y,a.width,a.height)};
x.prototype.intersects=x.prototype.$E=function(a,b,c,d){e&&(t.q(a,x,"intersects:x"),t.q(b,x,"intersects:y"),t.q(a,x,"intersects:w"),t.q(b,x,"intersects:h"),(0>c||0>d)&&t.m("Rect.intersects:Width and height cannot be negative"));var f=this.width,g=this.x;if(Infinity!==f&&Infinity!==c&&(f+=g,c+=a,isNaN(c)||isNaN(f)||g>c||a>f))return!1;a=this.height;c=this.y;return Infinity!==a&&Infinity!==d&&(a+=c,d+=b,isNaN(d)||isNaN(a)||c>d||b>a)?!1:!0};
function eb(a,b){var c=a.width,d=b.width+10+10,f=a.x,g=b.x-10;if(f>d+g||g>c+f)return!1;c=a.height;d=b.height+10+10;f=a.y;g=b.y-10;return f>d+g||g>c+f?!1:!0}x.prototype.unionPoint=x.prototype.kj=function(a){e&&t.l(a,w,x,"unionPoint:p");return hb(this,a.x,a.y,0,0)};x.prototype.unionRect=x.prototype.ii=function(a){e&&t.l(a,x,x,"unionRect:r");return hb(this,a.x,a.y,a.width,a.height)};
x.prototype.union=x.prototype.OG=function(a,b,c,d){t.L(this);e?(t.q(a,x,"union:x"),t.q(b,x,"union:y"),void 0===c?c=0:t.q(c,x,"union:w"),void 0===d?d=0:t.q(d,x,"union:h"),(0>c||0>d)&&t.m("Rect.union:Width and height cannot be negative")):(void 0===c&&(c=0),void 0===d&&(d=0));return hb(this,a,b,c,d)};function hb(a,b,c,d,f){var g=Math.min(a.x,b),h=Math.min(a.y,c);b=Math.max(a.x+a.width,b+d);c=Math.max(a.y+a.height,c+f);a.x=g;a.y=h;a.width=b-g;a.height=c-h;return a}
x.prototype.setSpot=x.prototype.Rt=function(a,b,c){e&&(t.q(a,x,"setSpot:x"),t.q(b,x,"setSpot:y"),t.l(c,H,x,"setSpot:spot"));t.L(this);this.x=a-c.offsetX-c.x*this.width;this.y=b-c.offsetY-c.y*this.height;return this};var mb;
x.contains=mb=function(a,b,c,d,f,g,h,k){e?(t.q(a,x,"contains:rx"),t.q(b,x,"contains:ry"),t.q(c,x,"contains:rw"),t.q(d,x,"contains:rh"),t.q(f,x,"contains:x"),t.q(g,x,"contains:y"),void 0===h?h=0:t.q(h,x,"contains:w"),void 0===k?k=0:t.q(k,x,"contains:h"),(0>c||0>d||0>h||0>k)&&t.m("Rect.contains:Width and height cannot be negative")):(void 0===h&&(h=0),void 0===k&&(k=0));return a<=f&&f+h<=a+c&&b<=g&&g+k<=b+d};
x.intersects=function(a,b,c,d,f,g,h,k){e&&(t.q(a,x,"intersects:rx"),t.q(b,x,"intersects:ry"),t.q(c,x,"intersects:rw"),t.q(d,x,"intersects:rh"),t.q(f,x,"intersects:x"),t.q(g,x,"intersects:y"),t.q(h,x,"intersects:w"),t.q(k,x,"intersects:h"),(0>c||0>d||0>h||0>k)&&t.m("Rect.intersects:Width and height cannot be negative"));c+=a;h+=f;if(a>h||f>c)return!1;a=d+b;k+=g;return b>k||g>a?!1:!0};t.g(x,"left",x.prototype.left);
t.defineProperty(x,{left:"left"},function(){return this.x},function(a){t.L(this,a);e&&t.i(a,"number",x,"left");this.x=a});t.g(x,"top",x.prototype.top);t.defineProperty(x,{top:"top"},function(){return this.y},function(a){t.L(this,a);e&&t.i(a,"number",x,"top");this.y=a});t.g(x,"right",x.prototype.right);t.defineProperty(x,{right:"right"},function(){return this.x+this.width},function(a){t.L(this,a);e&&t.q(a,x,"right");this.x+=a-(this.x+this.width)});t.g(x,"bottom",x.prototype.bottom);
t.defineProperty(x,{bottom:"bottom"},function(){return this.y+this.height},function(a){t.L(this,a);e&&t.q(a,x,"top");this.y+=a-(this.y+this.height)});t.g(x,"position",x.prototype.position);t.defineProperty(x,{position:"position"},function(){return new w(this.x,this.y)},function(a){t.L(this,a);e&&t.l(a,w,x,"position");this.x=a.x;this.y=a.y});t.g(x,"size",x.prototype.size);
t.defineProperty(x,{size:"size"},function(){return new fa(this.width,this.height)},function(a){t.L(this,a);e&&t.l(a,fa,x,"size");this.width=a.width;this.height=a.height});t.g(x,"center",x.prototype.Sz);t.defineProperty(x,{Sz:"center"},function(){return new w(this.x+this.width/2,this.y+this.height/2)},function(a){t.L(this,a);e&&t.l(a,w,x,"center");this.x=a.x-this.width/2;this.y=a.y-this.height/2});t.g(x,"centerX",x.prototype.Da);
t.defineProperty(x,{Da:"centerX"},function(){return this.x+this.width/2},function(a){t.L(this,a);e&&t.q(a,x,"centerX");this.x=a-this.width/2});t.g(x,"centerY",x.prototype.Oa);t.defineProperty(x,{Oa:"centerY"},function(){return this.y+this.height/2},function(a){t.L(this,a);e&&t.q(a,x,"centerY");this.y=a-this.height/2});x.prototype.isReal=x.prototype.N=function(){return isFinite(this.x)&&isFinite(this.y)&&isFinite(this.width)&&isFinite(this.height)};
x.prototype.isEmpty=function(){return 0===this.width&&0===this.height};function ab(a,b,c,d){void 0===a?this.left=this.bottom=this.right=this.top=0:void 0===b?this.left=this.bottom=this.right=this.top=a:void 0===c?(d=b,this.top=a,this.right=b,this.bottom=a,this.left=d):void 0!==d?(this.top=a,this.right=b,this.bottom=c,this.left=d):t.m("Invalid arguments to Margin constructor")}t.ga("Margin",ab);t.Xh(ab);t.Vd(ab,{top:!0,right:!0,bottom:!0,left:!0});
ab.prototype.assign=function(a){this.top=a.top;this.right=a.right;this.bottom=a.bottom;this.left=a.left};ab.prototype.setTo=ab.prototype.Sp=function(a,b,c,d){e&&(t.i(a,"number",ab,"setTo:t"),t.i(b,"number",ab,"setTo:r"),t.i(c,"number",ab,"setTo:b"),t.i(d,"number",ab,"setTo:l"));t.L(this);this.top=a;this.right=b;this.bottom=c;this.left=d;return this};
ab.prototype.set=ab.prototype.set=function(a){e&&t.l(a,ab,ab,"assign:m");t.L(this);this.top=a.top;this.right=a.right;this.bottom=a.bottom;this.left=a.left;return this};ab.prototype.copy=function(){var a=new ab;a.top=this.top;a.right=this.right;a.bottom=this.bottom;a.left=this.left;return a};ab.prototype.Ja=function(){this.nb=!0;Object.freeze(this);return this};ab.prototype.Z=function(){return Object.isFrozen(this)?this:this.copy().freeze()};ab.prototype.freeze=function(){this.nb=!0;return this};
ab.prototype.Ma=function(){Object.isFrozen(this)&&t.m("cannot thaw constant: "+this);this.nb=!1;return this};ab.parse=function(a){if("string"===typeof a){a=a.split(" ");for(var b=0,c=0;""===a[b];)b++;var d=a[b++];d&&(c=parseFloat(d));for(var f=void 0;""===a[b];)b++;(d=a[b++])&&(f=parseFloat(d));for(var g=void 0;""===a[b];)b++;(d=a[b++])&&(g=parseFloat(d));for(var h=void 0;""===a[b];)b++;(d=a[b++])&&(h=parseFloat(d));return new ab(c,f,g,h)}return new ab};
ab.stringify=function(a){return a instanceof ab?a.top.toString()+" "+a.right.toString()+" "+a.bottom.toString()+" "+a.left.toString():a.toString()};ab.prototype.toString=function(){return"Margin("+this.top+","+this.right+","+this.bottom+","+this.left+")"};ab.prototype.equals=ab.prototype.M=function(a){return a instanceof ab?this.top===a.top&&this.right===a.right&&this.bottom===a.bottom&&this.left===a.left:!1};
ab.prototype.equalTo=function(a,b,c,d){return this.top===a&&this.right===b&&this.bottom===c&&this.left===d};ab.prototype.equalsApprox=ab.prototype.tf=function(a){return F.I(this.top,a.top)&&F.I(this.right,a.right)&&F.I(this.bottom,a.bottom)&&F.I(this.left,a.left)};ab.prototype.isReal=ab.prototype.N=function(){return isFinite(this.top)&&isFinite(this.right)&&isFinite(this.bottom)&&isFinite(this.left)};function ga(){this.m11=1;this.m21=this.m12=0;this.m22=1;this.dy=this.dx=0}t.Xh(ga);
t.Vd(ga,{m11:!0,m12:!0,m21:!0,m22:!0,dx:!0,dy:!0});ga.prototype.set=ga.prototype.set=function(a){e&&t.l(a,ga,ga,"set:t");this.m11=a.m11;this.m12=a.m12;this.m21=a.m21;this.m22=a.m22;this.dx=a.dx;this.dy=a.dy;return this};ga.prototype.copy=function(){var a=new ga;a.m11=this.m11;a.m12=this.m12;a.m21=this.m21;a.m22=this.m22;a.dx=this.dx;a.dy=this.dy;return a};ga.prototype.toString=function(){return"Transform("+this.m11+","+this.m12+","+this.m21+","+this.m22+","+this.dx+","+this.dy+")"};
ga.prototype.equals=ga.prototype.M=function(a){return a instanceof ga?this.m11===a.m11&&this.m12===a.m12&&this.m21===a.m21&&this.m22===a.m22&&this.dx===a.dx&&this.dy===a.dy:!1};ga.prototype.reset=ga.prototype.reset=function(){this.m11=1;this.m21=this.m12=0;this.m22=1;this.dy=this.dx=0};
ga.prototype.multiply=ga.prototype.multiply=function(a){e&&t.l(a,ga,ga,"multiply:matrix");var b=this.m12*a.m11+this.m22*a.m12,c=this.m11*a.m21+this.m21*a.m22,d=this.m12*a.m21+this.m22*a.m22,f=this.m11*a.dx+this.m21*a.dy+this.dx,g=this.m12*a.dx+this.m22*a.dy+this.dy;this.m11=this.m11*a.m11+this.m21*a.m12;this.m12=b;this.m21=c;this.m22=d;this.dx=f;this.dy=g;return this};
ga.prototype.multiplyInverted=ga.prototype.DF=function(a){e&&t.l(a,ga,ga,"multiplyInverted:matrix");var b=1/(a.m11*a.m22-a.m12*a.m21),c=a.m22*b,d=-a.m12*b,f=-a.m21*b,g=a.m11*b,h=b*(a.m21*a.dy-a.m22*a.dx),k=b*(a.m12*a.dx-a.m11*a.dy);a=this.m12*c+this.m22*d;b=this.m11*f+this.m21*g;f=this.m12*f+this.m22*g;g=this.m11*h+this.m21*k+this.dx;h=this.m12*h+this.m22*k+this.dy;this.m11=this.m11*c+this.m21*d;this.m12=a;this.m21=b;this.m22=f;this.dx=g;this.dy=h;return this};
ga.prototype.invert=ga.prototype.nA=function(){var a=1/(this.m11*this.m22-this.m12*this.m21),b=-this.m12*a,c=-this.m21*a,d=this.m11*a,f=a*(this.m21*this.dy-this.m22*this.dx),g=a*(this.m12*this.dx-this.m11*this.dy);this.m11=this.m22*a;this.m12=b;this.m21=c;this.m22=d;this.dx=f;this.dy=g};
ga.prototype.rotate=ga.prototype.rotate=function(a,b,c){e&&(t.q(a,ga,"rotate:angle"),t.q(b,ga,"rotate:rx"),t.q(c,ga,"rotate:ry"));this.translate(b,c);var d;0===a?(a=1,d=0):90===a?(a=0,d=1):180===a?(a=-1,d=0):270===a?(a=0,d=-1):(d=a*Math.PI/180,a=Math.cos(d),d=Math.sin(d));var f=this.m12*a+this.m22*d,g=this.m11*-d+this.m21*a,h=this.m12*-d+this.m22*a;this.m11=this.m11*a+this.m21*d;this.m12=f;this.m21=g;this.m22=h;this.translate(-b,-c)};
ga.prototype.translate=ga.prototype.translate=function(a,b){e&&(t.q(a,ga,"translate:x"),t.q(b,ga,"translate:y"));this.dx+=this.m11*a+this.m21*b;this.dy+=this.m12*a+this.m22*b};ga.prototype.scale=ga.prototype.scale=function(a,b){void 0===b&&(b=a);e&&(t.q(a,ga,"translate:sx"),t.q(b,ga,"translate:sy"));this.m11*=a;this.m12*=a;this.m21*=b;this.m22*=b};
ga.prototype.transformPoint=ga.prototype.Sa=function(a){e&&t.l(a,w,ga,"transformPoint:p");var b=a.x,c=a.y;a.x=b*this.m11+c*this.m21+this.dx;a.y=b*this.m12+c*this.m22+this.dy;return a};ga.prototype.invertedTransformPoint=ga.prototype.ai=function(a){e&&t.l(a,w,ga,"invertedTransformPoint:p");var b=1/(this.m11*this.m22-this.m12*this.m21),c=-this.m12*b,d=this.m11*b,f=b*(this.m12*this.dx-this.m11*this.dy),g=a.x,h=a.y;a.x=g*this.m22*b+h*-this.m21*b+b*(this.m21*this.dy-this.m22*this.dx);a.y=g*c+h*d+f;return a};
ga.prototype.transformRect=ga.prototype.JG=function(a){e&&t.l(a,x,ga,"transformRect:rect");var b=a.x,c=a.y,d=b+a.width,f=c+a.height,g=this.m11,h=this.m12,k=this.m21,l=this.m22,m=this.dx,n=this.dy,p=b*g+c*k+m,q=b*h+c*l+n,r=d*g+c*k+m,c=d*h+c*l+n,s=b*g+f*k+m,b=b*h+f*l+n,g=d*g+f*k+m,d=d*h+f*l+n,f=p,h=q,p=Math.min(p,r),f=Math.max(f,r),h=Math.min(h,c),q=Math.max(q,c),p=Math.min(p,s),f=Math.max(f,s),h=Math.min(h,b),q=Math.max(q,b),p=Math.min(p,g),f=Math.max(f,g),h=Math.min(h,d),q=Math.max(q,d);a.x=p;a.y=
h;a.width=f-p;a.height=q-h};ga.prototype.isIdentity=ga.prototype.qt=function(){return 1===this.m11&&0===this.m12&&0===this.m21&&1===this.m22&&0===this.dx&&0===this.dy};function H(a,b,c,d){void 0===a?this.offsetY=this.offsetX=this.y=this.x=0:(void 0===b&&(b=0),void 0===c&&(c=0),void 0===d&&(d=0),this.x=a,this.y=b,this.offsetX=c,this.offsetY=d)}t.ga("Spot",H);t.Xh(H);t.Vd(H,{x:!0,y:!0,offsetX:!0,offsetY:!0});H.prototype.assign=function(a){this.x=a.x;this.y=a.y;this.offsetX=a.offsetX;this.offsetY=a.offsetY};
H.prototype.setTo=H.prototype.Sp=function(a,b,c,d){e&&(pb(a,"setTo:x"),pb(b,"setTo:y"),qb(c,"setTo:offx"),qb(d,"setTo:offy"));t.L(this);this.x=a;this.y=b;this.offsetX=c;this.offsetY=d;return this};H.prototype.set=H.prototype.set=function(a){e&&t.l(a,H,H,"set:s");t.L(this);this.x=a.x;this.y=a.y;this.offsetX=a.offsetX;this.offsetY=a.offsetY;return this};H.prototype.copy=function(){var a=new H;a.x=this.x;a.y=this.y;a.offsetX=this.offsetX;a.offsetY=this.offsetY;return a};
H.prototype.Ja=function(){this.nb=!0;Object.freeze(this);return this};H.prototype.Z=function(){return Object.isFrozen(this)?this:this.copy().freeze()};H.prototype.freeze=function(){this.nb=!0;return this};H.prototype.Ma=function(){Object.isFrozen(this)&&t.m("cannot thaw constant: "+this);this.nb=!1;return this};function ub(a,b){a.x=NaN;a.y=NaN;a.offsetX=b;return a}function pb(a,b){(isNaN(a)||1<a||0>a)&&t.ka(a,"0 <= "+b+" <= 1",H,b)}
function qb(a,b){(isNaN(a)||Infinity===a||-Infinity===a)&&t.ka(a,"real number, not NaN or Infinity",H,b)}var vb;
H.parse=vb=function(a){if("string"===typeof a){a=a.trim();if("None"===a)return t.NONE;if("TopLeft"===a)return t.Xx;if("Top"===a||"TopCenter"===a||"MiddleTop"===a)return t.eq;if("TopRight"===a)return t.Zx;if("Left"===a||"LeftCenter"===a||"MiddleLeft"===a)return t.bq;if("Center"===a)return t.Lx;if("Right"===a||"RightCenter"===a||"MiddleRight"===a)return t.cq;if("BottomLeft"===a)return t.Gx;if("Bottom"===a||"BottomCenter"===a||"MiddleBottom"===a)return t.aq;if("BottomRight"===a)return t.Ix;if("TopSide"===
a)return t.ay;if("LeftSide"===a)return t.Px;if("RightSide"===a)return t.Vx;if("BottomSide"===a)return t.Kx;if("TopBottomSides"===a)return t.Wx;if("LeftRightSides"===a)return t.Ox;if("TopLeftSides"===a)return t.Yx;if("TopRightSides"===a)return t.$x;if("BottomLeftSides"===a)return t.Hx;if("BottomRightSides"===a)return t.Jx;if("NotTopSide"===a)return t.Tx;if("NotLeftSide"===a)return t.Rx;if("NotRightSide"===a)return t.Sx;if("NotBottomSide"===a)return t.Qx;if("AllSides"===a)return t.Fx;if("Default"===
a)return t.Mx;a=a.split(" ");for(var b=0,c=0;""===a[b];)b++;var d=a[b++];d&&(c=parseFloat(d));for(var f=0;""===a[b];)b++;(d=a[b++])&&(f=parseFloat(d));for(var g=0;""===a[b];)b++;(d=a[b++])&&(g=parseFloat(d));for(var h=0;""===a[b];)b++;(d=a[b++])&&(h=parseFloat(d));return new H(c,f,g,h)}return new H};H.stringify=function(a){return a instanceof H?a.xd()?a.x.toString()+" "+a.y.toString()+" "+a.offsetX.toString()+" "+a.offsetY.toString():a.toString():a.toString()};
H.prototype.toString=function(){return this.xd()?0===this.offsetX&&0===this.offsetY?"Spot("+this.x+","+this.y+")":"Spot("+this.x+","+this.y+","+this.offsetX+","+this.offsetY+")":this.M(t.NONE)?"None":this.M(t.Xx)?"TopLeft":this.M(t.eq)?"Top":this.M(t.Zx)?"TopRight":this.M(t.bq)?"Left":this.M(t.Lx)?"Center":this.M(t.cq)?"Right":this.M(t.Gx)?"BottomLeft":this.M(t.aq)?"Bottom":this.M(t.Ix)?"BottomRight":this.M(t.ay)?"TopSide":this.M(t.Px)?"LeftSide":this.M(t.Vx)?"RightSide":this.M(t.Kx)?"BottomSide":
this.M(t.Wx)?"TopBottomSides":this.M(t.Ox)?"LeftRightSides":this.M(t.Yx)?"TopLeftSides":this.M(t.$x)?"TopRightSides":this.M(t.Hx)?"BottomLeftSides":this.M(t.Jx)?"BottomRightSides":this.M(t.Tx)?"NotTopSide":this.M(t.Rx)?"NotLeftSide":this.M(t.Sx)?"NotRightSide":this.M(t.Qx)?"NotBottomSide":this.M(t.Fx)?"AllSides":this.M(t.Mx)?"Default":"None"};
H.prototype.equals=H.prototype.M=function(a){return a instanceof H?(this.x===a.x||isNaN(this.x)&&isNaN(a.x))&&(this.y===a.y||isNaN(this.y)&&isNaN(a.y))&&this.offsetX===a.offsetX&&this.offsetY===a.offsetY:!1};H.prototype.opposite=function(){return new H(0.5-(this.x-0.5),0.5-(this.y-0.5),-this.offsetX,-this.offsetY)};H.prototype.includesSide=function(a){if(!this.rp()||!a.rp())return!1;a=a.offsetY;return(this.offsetY&a)===a};H.prototype.isSpot=H.prototype.xd=function(){return!isNaN(this.x)&&!isNaN(this.y)};
H.prototype.isNoSpot=H.prototype.Ge=function(){return isNaN(this.x)||isNaN(this.y)};H.prototype.isSide=H.prototype.rp=function(){return this.Ge()&&1===this.offsetX&&0!==this.offsetY};H.prototype.isDefault=H.prototype.Pc=function(){return isNaN(this.x)&&isNaN(this.y)&&-1===this.offsetX&&0===this.offsetY};t.bd=1;t.Jc=2;t.Tc=4;t.Sc=8;t.NONE=ub(new H(0,0,0,0),0).Ja();t.Mx=ub(new H(0,0,-1,0),-1).Ja();t.Xx=(new H(0,0,0,0)).Ja();t.eq=(new H(0.5,0,0,0)).Ja();t.Zx=(new H(1,0,0,0)).Ja();
t.bq=(new H(0,0.5,0,0)).Ja();t.Lx=(new H(0.5,0.5,0,0)).Ja();t.cq=(new H(1,0.5,0,0)).Ja();t.Gx=(new H(0,1,0,0)).Ja();t.aq=(new H(0.5,1,0,0)).Ja();t.Ix=(new H(1,1,0,0)).Ja();t.ay=ub(new H(0,0,1,t.bd),1).Ja();t.Px=ub(new H(0,0,1,t.Jc),1).Ja();t.Vx=ub(new H(0,0,1,t.Tc),1).Ja();t.Kx=ub(new H(0,0,1,t.Sc),1).Ja();t.Wx=ub(new H(0,0,1,t.bd|t.Sc),1).Ja();t.Ox=ub(new H(0,0,1,t.Jc|t.Tc),1).Ja();t.Yx=ub(new H(0,0,1,t.bd|t.Jc),1).Ja();t.$x=ub(new H(0,0,1,t.bd|t.Tc),1).Ja();t.Hx=ub(new H(0,0,1,t.Sc|t.Jc),1).Ja();
t.Jx=ub(new H(0,0,1,t.Sc|t.Tc),1).Ja();t.Tx=ub(new H(0,0,1,t.Jc|t.Tc|t.Sc),1).Ja();t.Rx=ub(new H(0,0,1,t.bd|t.Tc|t.Sc),1).Ja();t.Sx=ub(new H(0,0,1,t.bd|t.Jc|t.Sc),1).Ja();t.Qx=ub(new H(0,0,1,t.bd|t.Jc|t.Tc),1).Ja();t.Fx=ub(new H(0,0,1,t.bd|t.Jc|t.Tc|t.Sc),1).Ja();var wb;H.None=wb=t.NONE;var xb;H.Default=xb=t.Mx;var Eb;H.TopLeft=Eb=t.Xx;var Fb;H.TopCenter=Fb=t.eq;var Gb;H.TopRight=Gb=t.Zx;H.LeftCenter=t.bq;var Hb;H.Center=Hb=t.Lx;H.RightCenter=t.cq;var Lb;H.BottomLeft=Lb=t.Gx;var Mb;
H.BottomCenter=Mb=t.aq;var Pb;H.BottomRight=Pb=t.Ix;var Qb;H.MiddleTop=Qb=t.eq;var Vb;H.MiddleLeft=Vb=t.bq;var Wb;H.MiddleRight=Wb=t.cq;var Xb;H.MiddleBottom=Xb=t.aq;H.Top=t.eq;var Yb;H.Left=Yb=t.bq;var Zb;H.Right=Zb=t.cq;H.Bottom=t.aq;var ac;H.TopSide=ac=t.ay;var bc;H.LeftSide=bc=t.Px;var cc;H.RightSide=cc=t.Vx;var dc;H.BottomSide=dc=t.Kx;H.TopBottomSides=t.Wx;H.LeftRightSides=t.Ox;H.TopLeftSides=t.Yx;H.TopRightSides=t.$x;H.BottomLeftSides=t.Hx;H.BottomRightSides=t.Jx;H.NotTopSide=t.Tx;
H.NotLeftSide=t.Rx;H.NotRightSide=t.Sx;H.NotBottomSide=t.Qx;var gc;H.AllSides=gc=t.Fx;function hc(){this.cf=[1,0,0,1,0,0]}hc.prototype.copy=function(){var a=new hc;a.cf[0]=this.cf[0];a.cf[1]=this.cf[1];a.cf[2]=this.cf[2];a.cf[3]=this.cf[3];a.cf[4]=this.cf[4];a.cf[5]=this.cf[5];return a};function mc(a){this.type=a;this.r2=this.y2=this.x2=this.r1=this.y1=this.x1=0;this.XD=[]}mc.prototype.addColorStop=function(a,b){this.XD.push({offset:a,color:b})};
function nc(a,b,c){this.fillStyle="#000000";this.font="10px sans-serif";this.globalAlpha=1;this.lineCap="butt";this.Zw=0;this.lineJoin="miter";this.lineWidth=1;this.miterLimit=10;this.shadowBlur=0;this.shadowColor="rgba(0, 0, 0, 0)";this.shadowOffsetY=this.shadowOffsetX=0;this.strokeStyle="#000000";this.textAlign="start";this.document=b||document;this.wE=c;this.Vw=null;this.path=[];this.$i=new hc;this.stack=[];this.vf=[];this.qG=this.KE=this.mw=0;this.zw=a;this.tJ="http://www.w3.org/2000/svg";this.width=
this.zw.width;this.height=this.zw.height;this.Bl=oc(this,"svg",{width:this.width+"px",height:this.height+"px",UK:"0 0 "+this.zw.width+" "+this.zw.height});this.Bl.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns","http://www.w3.org/2000/svg");this.Bl.setAttributeNS("http://www.w3.org/2000/xmlns/","xmlns:xlink","http://www.w3.org/1999/xlink");rc(this,1,0,0,1,0,0);a=oc(this,"clipPath",{id:"mainClip"});a.appendChild(oc(this,"rect",{x:0,y:0,width:this.width,height:this.height}));this.Bl.appendChild(a);
this.vf[0].setAttributeNS(null,"clip-path","url(#mainClip)")}aa=nc.prototype;aa.arc=function(a,b,c,d,f,g){sc(this,a,b,c,d,f,g)};aa.beginPath=function(){this.path=[]};aa.bezierCurveTo=function(a,b,c,d,f,g){this.path.push(["C",a,b,c,d,f,g])};aa.clearRect=function(){};aa.clip=function(){tc(this,"clipPath",this.path,new hc)};aa.closePath=function(){this.path.push(["z"])};aa.createLinearGradient=function(a,b,c,d){var f=new mc("linear");f.x1=a;f.y1=b;f.x2=c;f.y2=d;return f};aa.createPattern=function(){};
aa.createRadialGradient=function(a,b,c,d,f,g){var h=new mc("radial");h.x1=a;h.y1=b;h.r1=c;h.x2=d;h.y2=f;h.r2=g;return h};
aa.drawImage=function(a,b,c,d,f,g,h,k,l){a=[b,c,d,f,g,h,k,l,a];b=this.$i;f=a[8];c={x:0,y:0,width:f.naturalWidth,height:f.naturalHeight,href:f.src};d="";g=a[6]/a[2];h=a[7]/a[3];if(0!==a[4]||0!==a[5])d+=" translate("+a[4]+", "+a[5]+")";if(1!==g||1!==h)d+=" scale("+g+", "+h+")";if(0!==a[0]||0!==a[1])d+=" translate("+-a[0]+", "+-a[1]+")";if(0!==a[0]||0!==a[1]||a[2]!==f.naturalWidth||a[3]!==f.naturalHeight)f="CLIP"+this.mw,this.mw++,g=oc(this,"clipPath",{id:f}),g.appendChild(oc(this,"rect",{x:a[0],y:a[1],
width:a[2],height:a[3]})),this.Bl.appendChild(g),c["clip-path"]="url(#"+f+")";uc(this,"image",c,b,d);this.addElement("image",c)};aa.fill=function(){tc(this,"fill",this.path,this.$i)};aa.fillRect=function(a,b,c,d){vc(this,"fill",[a,b,c,d],this.$i)};aa.fillText=function(a,b,c){a=[a,b,c];b=this.textAlign;"left"===b?b="start":"right"===b?b="end":"center"===b&&(b="middle");b={x:a[1],y:a[2],style:"font: "+this.font,"text-anchor":b};uc(this,"fill",b,this.$i);this.addElement("text",b,a[0])};
aa.lineTo=function(a,b){this.path.push(["L",a,b])};aa.moveTo=function(a,b){this.path.push(["M",a,b])};aa.quadraticCurveTo=function(a,b,c,d){this.path.push(["Q",a,b,c,d])};aa.rect=function(a,b,c,d){this.path.push(["M",a,b],["L",a+c,b],["L",a+c,b+d],["L",a,b+d],["z"])};
aa.restore=function(){this.$i=this.stack.pop();this.path=this.stack.pop();var a=this.stack.pop();this.fillStyle=a.fillStyle;this.font=a.font;this.globalAlpha=a.globalAlpha;this.lineCap=a.lineCap;this.Zw=a.Zw;this.lineJoin=a.lineJoin;this.lineWidth=a.lineWidth;this.miterLimit=a.miterLimit;this.shadowBlur=a.shadowBlur;this.shadowColor=a.shadowColor;this.shadowOffsetX=a.shadowOffsetX;this.shadowOffsetY=a.shadowOffsetY;this.strokeStyle=a.strokeStyle;this.textAlign=a.textAlign};
aa.save=function(){this.stack.push({fillStyle:this.fillStyle,font:this.font,globalAlpha:this.globalAlpha,lineCap:this.lineCap,Zw:this.Zw,lineJoin:this.lineJoin,lineWidth:this.lineWidth,miterLimit:this.miterLimit,shadowBlur:this.shadowBlur,shadowColor:this.shadowColor,shadowOffsetX:this.shadowOffsetX,shadowOffsetY:this.shadowOffsetY,strokeStyle:this.strokeStyle,textAlign:this.textAlign});for(var a=[],b=0;b<this.path.length;b++)a.push(this.path[b]);this.stack.push(a);this.stack.push(this.$i.copy())};
aa.setTransform=function(a,b,c,d,f,g){1===a&&0===b&&0===c&&1===d&&0===f&&0===g||rc(this,a,b,c,d,f,g)};aa.scale=function(){};aa.stroke=function(){tc(this,"stroke",this.path,this.$i)};aa.strokeRect=function(a,b,c,d){vc(this,"stroke",[a,b,c,d],this.$i)};function oc(a,b,c,d){a=a.document.createElementNS(a.tJ,b);if(c)for(var f in c)a.setAttributeNS("href"===f?"http://www.w3.org/1999/xlink":"",f,c[f]);d&&(a.textContent=d);return a}
aa.addElement=function(a,b,c){a=oc(this,a,b,c);0<this.vf.length?this.vf[this.vf.length-1].appendChild(a):this.Bl.appendChild(a);return this.Vw=a};
function uc(a,b,c,d,f){1!==a.globalAlpha&&(c.opacity=a.globalAlpha);"fill"==b?(/^rgba\(/.test(a.fillStyle)?(a=/^\s*rgba\s*\(([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\)\s*$/i.exec(a.fillStyle),c.fill="rgb("+a[1]+","+a[2]+","+a[3]+")",c["fill-opacity"]=a[4]):c.fill=a.fillStyle instanceof mc?wc(a,a.fillStyle):a.fillStyle,c.stroke="none"):"stroke"==b&&(c.fill="none",/^rgba\(/.test(a.strokeStyle)?(b=/^\s*rgba\s*\(([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\)\s*$/i.exec(a.strokeStyle),
c.stroke="rgb("+b[1]+","+b[2]+","+b[3]+")",c["stroke-opacity"]=b[4]):c.stroke=a.strokeStyle instanceof mc?wc(a,a.strokeStyle):a.strokeStyle,c["stroke-width"]=a.lineWidth,c["stroke-linecap"]=a.lineCap,c["stroke-linejoin"]=a.lineJoin,c["stroke-miterlimit"]=a.miterLimit);d=d.cf;d="matrix("+d[0]+", "+d[1]+", "+d[2]+", "+d[3]+", "+d[4]+", "+d[5]+")";void 0!==f&&(d+=f);c.transform=d}
function wc(a,b){var c="GRAD"+a.KE;a.KE++;var d;if("linear"===b.type)d={x1:b.x1,x2:b.x2,y1:b.y1,y2:b.y2,id:c,gradientUnits:"userSpaceOnUse"},d=oc(a,"linearGradient",d);else if("radial"===b.type)d={x1:b.x1,x2:b.x2,y1:b.y1,y2:b.y2,r1:b.r1,r2:b.r2,id:c},d=oc(a,"radialGradient",d);else throw Error("invalid gradient");for(var f=b.XD,g=f.length,h=[],k=0;k<g;k++){var l=f[k],m=l.color,l={offset:l.offset,"stop-color":m};/^rgba\(/.test(m)&&(m=/^\s*rgba\s*\(([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\s*,\s*([^,\s]+)\)\s*$/i.exec(m),
l["stop-color"]="rgb("+m[1]+","+m[2]+","+m[3]+")",l["stop-opacity"]=m[4]);h.push(l)}h.sort(function(a,b){return a.offset>b.offset?1:-1});for(k=0;k<g;k++)d.appendChild(oc(a,"stop",h[k]));a.Bl.appendChild(d);return"url(#"+c+")"}function vc(a,b,c,d){c={x:c[0],y:c[1],width:c[2],height:c[3]};uc(a,b,c,d);a.addElement("rect",c)}
function tc(a,b,c,d){for(var f=[],g=0;g<c.length;g++){var h=Array.prototype.slice.call(c[g]),k=[h.shift()];if("A"==k[0])k.push(h.shift()+","+h.shift(),h.shift(),h.shift()+","+h.shift(),h.shift()+","+h.shift());else for(;h.length;)k.push(h.shift()+","+h.shift());f.push(k.join(" "))}c={d:f.join(" ")};uc(a,b,c,d);"clipPath"===b?(b="CLIP"+a.mw,a.mw++,d=oc(a,"clipPath",{id:b}),d.appendChild(oc(a,"path",c)),a.Bl.appendChild(d),0<a.vf.length&&a.vf[a.vf.length-1].setAttributeNS(null,"clip-path","url(#"+b+
")")):a.addElement("path",c)}function sc(a,b,c,d,f,g,h){var k=Math.abs(f-g);if(f!=g){var l=b+d*Math.cos(g);g=c+d*Math.sin(g);k>=2*Math.PI?(sc(a,b,c,d,f,f+Math.PI,h),sc(a,b,c,d,f+Math.PI,f+2*Math.PI,h),a.path.push(["M",l,g])):(b+=d*Math.cos(f),c+=d*Math.sin(f),k=180*k/Math.PI,f=h?0:1,h=180<=k==!!h?0:1,0!==a.path.length?a.path.push(["L",b,c]):a.path.push(["M",b,c]),a.path.push(["A",d,d,k,h,f,l,g]))}}
function rc(a,b,c,d,f,g,h){var k=new hc;k.cf=[b,c,d,f,g,h];b={};uc(a,"g",b,k);k=a.addElement("g",b);a.vf.push(k)}
aa.bb=function(){if(0!==this.shadowOffsetX||0!==this.shadowOffsetY||0!==this.shadowBlur){var a="SHADOW"+this.qG;this.qG++;var b=this.addElement("filter",{id:a,x:"-100%",y:"-100%",width:"300%",height:"300%"},null),c,d,f,g,h;c=oc(this,"feGaussianBlur",{"in":"SourceAlpha",result:"blur",QK:this.shadowBlur/2});d=oc(this,"feFlood",{"in":"blur",result:"flood","flood-color":this.shadowColor});f=oc(this,"feComposite",{"in":"flood",in2:"blur",operator:"in",result:"comp"});g=oc(this,"feOffset",{"in":"comp",
result:"offsetBlur",dx:this.shadowOffsetX,dy:this.shadowOffsetY});h=oc(this,"feMerge",{});h.appendChild(oc(this,"feMergeNode",{"in":"offsetBlur"}));h.appendChild(oc(this,"feMergeNode",{"in":"SourceGraphic"}));b.appendChild(c);b.appendChild(d);b.appendChild(f);b.appendChild(g);b.appendChild(h);0<this.vf.length&&this.vf[this.vf.length-1].setAttributeNS(null,"filter","url(#"+a+")")}};
var F={va:4*((Math.sqrt(2)-1)/3),mj:(new w(0,0)).Ja(),gH:(new x(0,0,0,0)).Ja(),fq:(new ab(0,0,0,0)).Ja(),eH:(new ab(2,2,2,2)).Ja(),fH:(new fa(Infinity,Infinity)).Ja(),cH:(new w(-Infinity,-Infinity)).Ja(),bH:(new w(Infinity,Infinity)).Ja(),gq:(new fa(0,0)).Ja(),Ux:(new fa(1,1)).Ja(),dq:(new fa(6,6)).Ja(),Nx:(new fa(8,8)).Ja(),dH:(new w(NaN,NaN)).Ja(),wB:null,sqrt:function(a){if(0>=a)return 0;var b=F.wB;if(null===b){for(var b=[],c=0;2E3>=c;c++)b[c]=Math.sqrt(c);F.wB=b}return 1>a?(c=1/a,2E3>=c?1/b[c|
0]:Math.sqrt(a)):2E3>=a?b[a|0]:Math.sqrt(a)},I:function(a,b){var c=a-b;return 0.5>c&&-0.5<c},mb:function(a,b){var c=a-b;return 5E-8>c&&-5E-8<c},Md:function(a,b,c,d,f,g,h){0>=f&&(f=1E-6);var k,l,m,n;a<c?(l=a,k=c):(l=c,k=a);b<d?(n=b,m=d):(n=d,m=b);if(a===c)return n<=h&&h<=m&&a-f<=g&&g<=a+f;if(b===d)return l<=g&&g<=k&&b-f<=h&&h<=b+f;k+=f;l-=f;if(l<=g&&g<=k&&(m+=f,n-=f,n<=h&&h<=m))if(k-l>m-n)if(a-c>f||c-a>f){if(g=(d-b)/(c-a)*(g-a)+b,g-f<=h&&h<=g+f)return!0}else return!0;else if(b-d>f||d-b>f){if(h=(c-
a)/(d-b)*(h-b)+a,h-f<=g&&g<=h+f)return!0}else return!0;return!1},hw:function(a,b,c,d,f,g,h,k,l,m,n,p){if(F.Md(a,b,h,k,p,c,d)&&F.Md(a,b,h,k,p,f,g))return F.Md(a,b,h,k,p,m,n);var q=(a+c)/2,r=(b+d)/2,s=(c+f)/2,u=(d+g)/2;f=(f+h)/2;g=(g+k)/2;d=(q+s)/2;c=(r+u)/2;var s=(s+f)/2,u=(u+g)/2,v=(d+s)/2,D=(c+u)/2;return F.hw(a,b,q,r,d,c,v,D,l,m,n,p)||F.hw(v,D,s,u,f,g,h,k,l,m,n,p)},aI:function(a,b,c,d,f,g,h,k,l){var m=(c+f)/2,n=(d+g)/2;l.x=(((a+c)/2+m)/2+(m+(f+h)/2)/2)/2;l.y=(((b+d)/2+n)/2+(n+(g+k)/2)/2)/2;return l},
$H:function(a,b,c,d,f,g,h,k){var l=(c+f)/2,m=(d+g)/2;return Ta(((a+c)/2+l)/2,((b+d)/2+m)/2,(l+(f+h)/2)/2,(m+(g+k)/2)/2)},So:function(a,b,c,d,f,g,h,k,l,m){if(F.Md(a,b,h,k,l,c,d)&&F.Md(a,b,h,k,l,f,g))hb(m,a,b,0,0),hb(m,h,k,0,0);else{var n=(a+c)/2,p=(b+d)/2,q=(c+f)/2,r=(d+g)/2;f=(f+h)/2;g=(g+k)/2;d=(n+q)/2;c=(p+r)/2;var q=(q+f)/2,r=(r+g)/2,s=(d+q)/2,u=(c+r)/2;F.So(a,b,n,p,d,c,s,u,l,m);F.So(s,u,q,r,f,g,h,k,l,m)}return m},ze:function(a,b,c,d,f,g,h,k,l,m){if(F.Md(a,b,h,k,l,c,d)&&F.Md(a,b,h,k,l,f,g))0===
m.length&&m.push([a,b]),m.push([h,k]);else{var n=(a+c)/2,p=(b+d)/2,q=(c+f)/2,r=(d+g)/2;f=(f+h)/2;g=(g+k)/2;d=(n+q)/2;c=(p+r)/2;var q=(q+f)/2,r=(r+g)/2,s=(d+q)/2,u=(c+r)/2;F.ze(a,b,n,p,d,c,s,u,l,m);F.ze(s,u,q,r,f,g,h,k,l,m)}return m},OA:function(a,b,c,d,f,g,h,k,l,m){if(F.Md(a,b,f,g,m,c,d))return F.Md(a,b,f,g,m,k,l);var n=(a+c)/2,p=(b+d)/2;c=(c+f)/2;d=(d+g)/2;var q=(n+c)/2,r=(p+d)/2;return F.OA(a,b,n,p,q,r,h,k,l,m)||F.OA(q,r,c,d,f,g,h,k,l,m)},PK:function(a,b,c,d,f,g,h){h.x=((a+c)/2+(c+f)/2)/2;h.y=((b+
d)/2+(d+g)/2)/2;return h},NA:function(a,b,c,d,f,g,h,k){if(F.Md(a,b,f,g,h,c,d))hb(k,a,b,0,0),hb(k,f,g,0,0);else{var l=(a+c)/2,m=(b+d)/2;c=(c+f)/2;d=(d+g)/2;var n=(l+c)/2,p=(m+d)/2;F.NA(a,b,l,m,n,p,h,k);F.NA(n,p,c,d,f,g,h,k)}return k},Jp:function(a,b,c,d,f,g,h,k){if(F.Md(a,b,f,g,h,c,d))0===k.length&&k.push([a,b]),k.push([f,g]);else{var l=(a+c)/2,m=(b+d)/2;c=(c+f)/2;d=(d+g)/2;var n=(l+c)/2,p=(m+d)/2;F.Jp(a,b,l,m,n,p,h,k);F.Jp(n,p,c,d,f,g,h,k)}return k},Ps:function(a,b,c,d,f,g,h,k,l,m,n,p,q,r){0>=q&&
(q=1E-6);if(F.Md(a,b,h,k,q,c,d)&&F.Md(a,b,h,k,q,f,g)){var s=(a-h)*(m-p)-(b-k)*(l-n);if(!s)return!1;q=((a*k-b*h)*(l-n)-(a-h)*(l*p-m*n))/s;s=((a*k-b*h)*(m-p)-(b-k)*(l*p-m*n))/s;if((l>n?l-n:n-l)<(m>p?m-p:p-m)){if(b<k?(l=b,h=k):(l=k,h=b),s<l||s>h)return!1}else if(a<h?l=a:(l=h,h=a),q<l||q>h)return!1;r.x=q;r.y=s;return!0}var s=(a+c)/2,u=(b+d)/2;c=(c+f)/2;d=(d+g)/2;f=(f+h)/2;g=(g+k)/2;var v=(s+c)/2,D=(u+d)/2;c=(c+f)/2;d=(d+g)/2;var A=(v+c)/2,G=(D+d)/2,K=(n-l)*(n-l)+(p-m)*(p-m),N=!1;F.Ps(a,b,s,u,v,D,A,G,
l,m,n,p,q,r)&&(a=(r.x-l)*(r.x-l)+(r.y-m)*(r.y-m),a<K&&(K=a,N=!0));b=r.x;s=r.y;F.Ps(A,G,c,d,f,g,h,k,l,m,n,p,q,r)&&(a=(r.x-l)*(r.x-l)+(r.y-m)*(r.y-m),a<K?N=!0:(r.x=b,r.y=s));return N},Qs:function(a,b,c,d,f,g,h,k,l,m,n,p,q){var r=0;0>=q&&(q=1E-6);if(F.Md(a,b,h,k,q,c,d)&&F.Md(a,b,h,k,q,f,g)){q=(a-h)*(m-p)-(b-k)*(l-n);if(!q)return r;var s=((a*k-b*h)*(l-n)-(a-h)*(l*p-m*n))/q,u=((a*k-b*h)*(m-p)-(b-k)*(l*p-m*n))/q;if(s>=n)return r;if((l>n?l-n:n-l)<(m>p?m-p:p-m)){if(b<k?(l=b,a=k):(l=k,a=b),u<l||u>a)return r}else if(a<
h?(l=a,a=h):l=h,s<l||s>a)return r;0<q?r++:0>q&&r--}else{var s=(a+c)/2,u=(b+d)/2,v=(c+f)/2,D=(d+g)/2;f=(f+h)/2;g=(g+k)/2;d=(s+v)/2;c=(u+D)/2;var v=(v+f)/2,D=(D+g)/2,A=(d+v)/2,G=(c+D)/2,r=r+F.Qs(a,b,s,u,d,c,A,G,l,m,n,p,q),r=r+F.Qs(A,G,v,D,f,g,h,k,l,m,n,p,q)}return r},dn:function(a,b,c,d,f,g,h){if(F.mb(a,c)){var k;b<d?(k=b,c=d):(k=d,c=b);d=g;if(d<k)return h.x=a,h.y=k,!1;if(d>c)return h.x=a,h.y=c,!1;h.x=a;h.y=d;return!0}if(F.mb(b,d)){a<c?k=a:(k=c,c=a);d=f;if(d<k)return h.x=k,h.y=b,!1;if(d>c)return h.x=
c,h.y=b,!1;h.x=d;h.y=b;return!0}k=((a-f)*(a-c)+(b-g)*(b-d))/((c-a)*(c-a)+(d-b)*(d-b));if(-5E-6>k)return h.x=a,h.y=b,!1;if(1.000005<k)return h.x=c,h.y=d,!1;h.x=a+k*(c-a);h.y=b+k*(d-b);return!0},ih:function(a,b,c,d,f,g,h,k,l){if(F.I(a,c)&&F.I(b,d))return l.x=a,l.y=b,!1;if(F.mb(f,h)){if(F.mb(a,c))return F.dn(a,b,c,d,f,g,l),!1;g=(d-b)/(c-a)*(f-a)+b;return F.dn(a,b,c,d,f,g,l)}k=(k-g)/(h-f);if(F.mb(a,c)){g=k*(a-f)+g;b<d?(h=b,c=d):(h=d,c=b);if(g<h)return l.x=a,l.y=h,!1;if(g>c)return l.x=a,l.y=c,!1;l.x=a;
l.y=g;return!0}h=(d-b)/(c-a);if(F.mb(k,h))return F.dn(a,b,c,d,f,g,l),!1;f=(h*a-k*f+g-b)/(h-k);if(F.mb(h,0)){a<c?h=a:(h=c,c=a);if(f<h)return l.x=h,l.y=b,!1;if(f>c)return l.x=c,l.y=b,!1;l.x=f;l.y=b;return!0}g=h*(f-a)+b;return F.dn(a,b,c,d,f,g,l)},CK:function(a,b,c,d,f){return F.ih(c.x,c.y,d.x,d.y,a.x,a.y,b.x,b.y,f)},yK:function(a,b,c,d,f,g,h,k,l,m){function n(c,d){var f=(c-a)*(c-a)+(d-b)*(d-b);f<p&&(p=f,l.x=c,l.y=d)}var p=Infinity;n(l.x,l.y);var q,r,s,u;f<h?(q=f,r=h):(q=h,r=f);g<k?(s=f,u=h):(s=h,u=
f);q=(r-q)/2+m;m=(u-s)/2+m;f=(f+h)/2;g=(g+k)/2;if(0===q||0===m)return l;if(0.5>(c>a?c-a:a-c)){q=1-(c-f)*(c-f)/(q*q);if(0>q)return l;q=Math.sqrt(q);d=-m*q+g;n(c,m*q+g);n(c,d)}else{c=(d-b)/(c-a);d=1/(q*q)+c*c/(m*m);k=2*c*(b-c*a)/(m*m)-2*c*g/(m*m)-2*f/(q*q);q=k*k-4*d*(2*c*a*g/(m*m)-2*b*g/(m*m)+g*g/(m*m)+f*f/(q*q)-1+(b-c*a)*(b-c*a)/(m*m));if(0>q)return l;q=Math.sqrt(q);m=(-k+q)/(2*d);n(m,c*m-c*a+b);q=(-k-q)/(2*d);n(q,c*q-c*a+b)}return l},ll:function(a,b,c,d,f,g,h,k,l){var m=1E21,n=a,p=b;if(F.ih(a,b,a,
d,f,g,h,k,l)){var q=(l.x-f)*(l.x-f)+(l.y-g)*(l.y-g);q<m&&(m=q,n=l.x,p=l.y)}F.ih(c,b,c,d,f,g,h,k,l)&&(q=(l.x-f)*(l.x-f)+(l.y-g)*(l.y-g),q<m&&(m=q,n=l.x,p=l.y));F.ih(a,b,c,b,f,g,h,k,l)&&(q=(l.x-f)*(l.x-f)+(l.y-g)*(l.y-g),q<m&&(m=q,n=l.x,p=l.y));F.ih(a,d,c,d,f,g,h,k,l)&&(q=(l.x-f)*(l.x-f)+(l.y-g)*(l.y-g),q<m&&(m=q,n=l.x,p=l.y));l.x=n;l.y=p;return 1E21>m},Nw:function(a,b,c){var d=b.x,f=b.y,g=c.x,h=c.y,k=a.left,l=a.right,m=a.top,n=a.bottom;return d===g?(f<h?(a=f,g=h):(a=h,g=f),k<=d&&d<=l&&a<=n&&g>=m):
f===h?(d<g?a=d:(a=g,g=d),m<=f&&f<=n&&a<=l&&g>=k):a.Fa(b)||a.Fa(c)||F.Mw(k,m,l,m,d,f,g,h)||F.Mw(l,m,l,n,d,f,g,h)||F.Mw(l,n,k,n,d,f,g,h)||F.Mw(k,n,k,m,d,f,g,h)?!0:!1},Mw:function(a,b,c,d,f,g,h,k){return 0>=F.nw(a,b,c,d,f,g)*F.nw(a,b,c,d,h,k)&&0>=F.nw(f,g,h,k,a,b)*F.nw(f,g,h,k,c,d)},nw:function(a,b,c,d,f,g){c-=a;d-=b;a=f-a;b=g-b;g=a*d-b*c;0===g&&(g=a*c+b*d,0<g&&(g=(a-c)*c+(b-d)*d,0>g&&(g=0)));return 0>g?-1:0<g?1:0},Dt:function(a){0>a&&(a+=360);360<=a&&(a-=360);return a},gE:function(a,b,c,d,f,g){var h=
Math.PI;g||(d*=h/180,f*=h/180);g=d<f?1:-1;var k=[],l=h/2,m=d;for(d=Math.min(2*h+1E-5,Math.abs(f-d));1E-5<d;)f=m+g*Math.min(d,l),k.push(F.jI(c,m,f,a,b)),d-=Math.abs(f-m),m=f;return k},jI:function(a,b,c,d,f){var g=(c-b)/2,h=a*Math.cos(g),k=a*Math.sin(g),l=0.5522847498*Math.tan(g),m=h+l*k,h=-k+l*h,k=-h,l=g+b,g=Math.cos(l),l=Math.sin(l);return{x1:d+a*Math.cos(b),y1:f+a*Math.sin(b),x2:d+m*g-h*l,y2:f+m*l+h*g,ge:d+m*g-k*l,he:f+m*l+k*g,Vb:d+a*Math.cos(c),Wb:f+a*Math.sin(c)}},dt:function(a,b,c,d,f,g,h){c=
Math.floor((a-c)/f)*f+c;d=Math.floor((b-d)/g)*g+d;var k=c;c+f-a<f/2&&(k=c+f);a=d;d+g-b<g/2&&(a=d+g);h.p(k,a);return h},GE:function(a,b){var c=Math.max(a,b),d=Math.min(a,b),f=1,g=1;do f=c%d,c=g=d,d=f;while(0<f);return g},yI:function(a,b,c,d){var f=0>c,g=0>d,h,k;a<b?(h=1,k=0):(h=0,k=1);var l,m;l=0===h?a:b;m=0===h?c:d;if(0===h?f:g)m=-m;h=k;c=0===h?c:d;if(0===h?f:g)c=-c;return F.zI(l,0===h?a:b,m,c,0,0)},zI:function(a,b,c,d,f,g){if(0<d)if(0<c){g=a*a;f=b*b;a*=c;var h=b*d,k=-f+h,l=-f+Math.sqrt(a*a+h*h);
b=k;for(var m=0;9999999999>m;++m){b=0.5*(k+l);if(b===k||b===l)break;var n=a/(b+g),p=h/(b+f),n=n*n+p*p-1;if(0<n)k=b;else if(0>n)l=b;else break}c=g*c/(b+g)-c;d=f*d/(b+f)-d;c=Math.sqrt(c*c+d*d)}else c=Math.abs(d-b);else d=a*a-b*b,f=a*c,f<d?(d=f/d,f=a*d,g=b*Math.sqrt(Math.abs(1-d*d)),c=f-c,c=Math.sqrt(c*c+g*g)):c=Math.abs(c-a);return c}};
function zc(a){1<arguments.length&&t.m("Geometry constructor can take at most one optional argument, the Geometry type.");t.Ac(this);void 0===a?a=Ac:e&&t.Aa(a,zc,zc,"constructor:type");this.da=a;this.tb=this.jb=this.yc=this.oc=0;this.Ck=new B(Bc);this.Iu=this.Ck.V;this.tu=(new x).freeze();this.Va=!0;this.Mi=Eb;this.Ni=Pb;this.Zn=this.$n=NaN;this.Hc=Cc}t.ga("Geometry",zc);t.Xh(zc);
zc.prototype.copy=function(){var a=new zc;a.da=this.da;a.oc=this.oc;a.yc=this.yc;a.jb=this.jb;a.tb=this.tb;for(var b=this.Ck,c=b.length,d=a.Ck,f=0;f<c;f++){var g=b.n[f].copy();d.add(g)}a.Iu=this.Iu;a.tu.assign(this.tu);a.Va=this.Va;a.Mi=this.Mi.Z();a.Ni=this.Ni.Z();a.$n=this.$n;a.Zn=this.Zn;a.Hc=this.Hc;return a};var Dc;zc.Line=Dc=t.w(zc,"Line",0);var Ec;zc.Rectangle=Ec=t.w(zc,"Rectangle",1);var Mc;zc.Ellipse=Mc=t.w(zc,"Ellipse",2);var Ac;zc.Path=Ac=t.w(zc,"Path",3);
zc.prototype.Ja=function(){this.freeze();Object.freeze(this);return this};zc.prototype.freeze=function(){this.nb=!0;var a=this.Bb;a.freeze();for(var b=a.length,c=0;c<b;c++)a.n[c].freeze();return this};zc.prototype.Ma=function(){Object.isFrozen(this)&&t.m("cannot thaw constant: "+this);this.nb=!1;var a=this.Bb;a.Ma();for(var b=a.length,c=0;c<b;c++)a.n[c].Ma();return this};
zc.prototype.equalsApprox=zc.prototype.tf=function(a){if(!(a instanceof zc))return!1;if(this.type!==a.type)return this.type===Dc&&a.type===Ac?Nc(this,a):a.type===Dc&&this.type===Ac?Nc(a,this):!1;if(this.type===Ac){var b=this.Bb;a=a.Bb;var c=b.length;if(c!==a.length)return!1;for(var d=0;d<c;d++)if(!b.n[d].tf(a.n[d]))return!1;return!0}return F.I(this.qa,a.qa)&&F.I(this.ra,a.ra)&&F.I(this.D,a.D)&&F.I(this.F,a.F)};
function Nc(a,b){if(a.type!==Dc||b.type!==Ac)return!1;if(1===b.Bb.count){var c=b.Bb.wa(0);if(1===c.Ea.count&&F.I(a.qa,c.qa)&&F.I(a.ra,c.ra)&&(c=c.Ea.wa(0),c.type===Oc&&F.I(a.D,c.D)&&F.I(a.F,c.F)))return!0}return!1}var Pc;zc.stringify=Pc=function(a){return a.toString()};
zc.prototype.toString=function(a){switch(this.type){case Dc:return void 0===a?"M"+this.qa.toString()+" "+this.ra.toString()+"L"+this.D.toString()+" "+this.F.toString():"M"+this.qa.toFixed(a)+" "+this.ra.toFixed(a)+"L"+this.D.toFixed(a)+" "+this.F.toFixed(a);case Ec:var b=new x(this.qa,this.ra,0,0);b.OG(this.D,this.F,0,0);return void 0===a?"M"+b.x.toString()+" "+b.y.toString()+"H"+b.right.toString()+"V"+b.bottom.toString()+"H"+b.left.toString()+"z":"M"+b.x.toFixed(a)+" "+b.y.toFixed(a)+"H"+b.right.toFixed(a)+
"V"+b.bottom.toFixed(a)+"H"+b.left.toFixed(a)+"z";case Mc:b=new x(this.qa,this.ra,0,0);b.OG(this.D,this.F,0,0);if(void 0===a){var c=b.left.toString()+" "+(b.y+b.height/2).toString(),d=b.right.toString()+" "+(b.y+b.height/2).toString();return"M"+c+"A"+(b.width/2).toString()+" "+(b.height/2).toString()+" 0 0 1 "+d+"A"+(b.width/2).toString()+" "+(b.height/2).toString()+" 0 0 1 "+c}c=b.left.toFixed(a)+" "+(b.y+b.height/2).toFixed(a);d=b.right.toFixed(a)+" "+(b.y+b.height/2).toFixed(a);return"M"+c+"A"+
(b.width/2).toFixed(a)+" "+(b.height/2).toFixed(a)+" 0 0 1 "+d+"A"+(b.width/2).toFixed(a)+" "+(b.height/2).toFixed(a)+" 0 0 1 "+c;case Ac:for(var b="",c=this.Bb,d=c.length,f=0;f<d;f++){var g=c.n[f];0<f&&(b+=" x ");g.pp&&(b+="F ");b+=g.toString(a)}return b;default:return this.type.toString()}};var Qc;
zc.fillPath=Qc=function(a){"string"!==typeof a&&t.bc(a,"string",zc,"fillPath:str");a=a.split(/[Xx]/);for(var b=a.length,c="",d=0;d<b;d++)var f=a[d],c=null!==f.match(/[Ff]/)?0===d?c+f:c+("X"+(" "===f[0]?"":" ")+f):c+((0===d?"":"X ")+"F"+(" "===f[0]?"":" ")+f);return c};var Rc;
zc.parse=Rc=function(a,b){function c(){return n>=v-1?!0:null!==m[n+1].match(/[A-Za-z]/)}function d(){n++;return m[n]}function f(){var a=new w(parseFloat(d()),parseFloat(d()));p===p.toLowerCase()&&(a.x=u.x+a.x,a.y=u.y+a.y);return a}function g(){return u=f()}function h(){return s=f()}function k(){var a=[parseFloat(d()),parseFloat(d()),parseFloat(d()),parseFloat(d()),parseFloat(d())];c()||(a.push(parseFloat(d())),c()||a.push(parseFloat(d())));p===p.toLowerCase()&&(a[2]+=u.x,a[3]+=u.y);return a}function l(){return"c"!==
q.toLowerCase()&&"s"!==q.toLowerCase()?u:new w(2*u.x-s.x,2*u.y-s.y)}void 0===b&&(b=!1);"string"!==typeof a&&t.bc(a,"string",zc,"parse:str");a=a.replace(/,/gm," ");a=a.replace(/([UuBbMmZzLlHhVvCcSsQqTtAaFf])([UuBbMmZzLlHhVvCcSsQqTtAaFf])/gm,"$1 $2");a=a.replace(/([UuBbMmZzLlHhVvCcSsQqTtAaFf])([UuBbMmZzLlHhVvCcSsQqTtAaFf])/gm,"$1 $2");a=a.replace(/([UuBbMmZzLlHhVvCcSsQqTtAaFf])([^\s])/gm,"$1 $2");a=a.replace(/([^\s])([UuBbMmZzLlHhVvCcSsQqTtAaFf])/gm,"$1 $2");a=a.replace(/([0-9])([+\-])/gm,"$1 $2");
a=a.replace(/(\.[0-9]*)(\.)/gm,"$1 $2");a=a.replace(/([Aa](\s+[0-9]+){3})\s+([01])\s*([01])/gm,"$1 $3 $4 ");a=a.replace(/[\s\r\t\n]+/gm," ");a=a.replace(/^\s+|\s+$/g,"");for(var m=a.split(" "),n=-1,p="",q="",r=new w(0,0),s=new w(0,0),u=new w(0,0),v=m.length,D=t.u(),A,G=!1,K=!1,N=!0;!(n>=v-1);)if(q=p,p=d(),""!==p)switch(p.toUpperCase()){case "X":N=!0;K=G=!1;break;case "M":A=g();null===D.Xb||!0===N?(I(D,A.x,A.y,G,!1,!K),N=!1):D.moveTo(A.x,A.y);for(r=u;!c();)A=g(),D.lineTo(A.x,A.y);break;case "L":for(;!c();)A=
g(),D.lineTo(A.x,A.y);break;case "H":for(;!c();)u=A=new w((p===p.toLowerCase()?u.x:0)+parseFloat(d()),u.y),D.lineTo(u.x,u.y);break;case "V":for(;!c();)u=A=new w(u.x,(p===p.toLowerCase()?u.y:0)+parseFloat(d())),D.lineTo(u.x,u.y);break;case "C":for(;!c();){var O=f(),U=h();A=g();J(D,O.x,O.y,U.x,U.y,A.x,A.y)}break;case "S":for(;!c();)O=l(),U=h(),A=g(),J(D,O.x,O.y,U.x,U.y,A.x,A.y);break;case "Q":for(;!c();)U=h(),A=g(),Sc(D,U.x,U.y,A.x,A.y);break;case "T":for(;!c();)s=U=l(),A=g(),Sc(D,U.x,U.y,A.x,A.y);
break;case "B":for(;!c();)A=k(),D.arcTo(A[0],A[1],A[2],A[3],A[4],A[5],A[6]);break;case "A":for(;!c();){var O=Math.abs(parseFloat(d())),U=Math.abs(parseFloat(d())),X=parseFloat(d()),Z=!!parseFloat(d()),P=!!parseFloat(d());A=g();Tc(D,O,U,X,Z,P,A.x,A.y)}break;case "Z":L(D);u=r;break;case "F":A=null;for(O=1;m[n+O];)if(null!==m[n+O].match(/[Uu]/))O++;else if(null===m[n+O].match(/[A-Za-z]/))O++;else{A=m[n+O];break}A.match(/[Mm]/)?G=!0:Zc(D);break;case "U":A=null;for(O=1;m[n+O];)if(null!==m[n+O].match(/[Ff]/))O++;
else if(null===m[n+O].match(/[A-Za-z]/))O++;else{A=m[n+O];break}A.match(/[Mm]/)?K=!0:D.bb(!1)}r=D.s;t.v(D);if(b)for(D=r.Bb.k;D.next();)D.value.pp=!0;return r};function $c(a,b){for(var c=a.length,d=t.K(),f=0;f<c;f++){var g=a[f];d.x=g.x1;d.y=g.y1;b.Sa(d);g.x1=d.x;g.y1=d.y;d.x=g.x2;d.y=g.y2;b.Sa(d);g.x2=d.x;g.y2=d.y;d.x=g.ge;d.y=g.he;b.Sa(d);g.ge=d.x;g.he=d.y;d.x=g.Vb;d.y=g.Wb;b.Sa(d);g.Vb=d.x;g.Wb=d.y}t.B(d)}
zc.prototype.uA=function(){if(this.Va)return!0;var a=this.Bb;if(this.Iu!==a.V)return!0;for(var b=a.length,c=0;c<b;c++)if(a.n[c].uA())return!0;return!1};zc.prototype.oB=function(){this.Va=!1;var a=this.Bb;this.Iu=a.V;for(var b=a.length,c=0;c<b;c++)a.n[c].oB()};zc.prototype.qf=function(){var a=this.tu;a.Ma();isNaN(this.$n)||isNaN(this.Zn)?a.p(0,0,0,0):a.p(0,0,this.$n,this.Zn);ad(this,a,!1);hb(a,0,0,0,0);a.freeze()};
zc.prototype.computeBoundsWithoutOrigin=zc.prototype.fI=function(){var a=new x;ad(this,a,!0);return a};
function ad(a,b,c){switch(a.type){case Dc:case Ec:case Mc:c?b.p(a.oc,a.yc,0,0):hb(b,a.oc,a.yc,0,0);hb(b,a.jb,a.tb,0,0);break;case Ac:a=a.Bb;for(var d=a.length,f=0;f<d;f++){var g=a.n[f];c&&0===f?b.p(g.qa,g.ra,0,0):hb(b,g.qa,g.ra,0,0);for(var h=g.Ea,k=h.length,l=g.qa,m=g.ra,n=0;n<k;n++){var p=h.n[n];switch(p.type){case Oc:case bd:l=p.D;m=p.F;hb(b,l,m,0,0);break;case cd:F.So(l,m,p.Cb,p.Sb,p.re,p.se,p.D,p.F,0.5,b);l=p.D;m=p.F;break;case dd:F.NA(l,m,p.Cb,p.Sb,p.D,p.F,0.5,b);l=p.D;m=p.F;break;case ed:case fd:for(var p=
p.type===ed?gd(p,g):hd(p,g,l,m),q=p.length,r=null,s=0;s<q;s++)r=p[s],F.So(r.x1,r.y1,r.x2,r.y2,r.ge,r.he,r.Vb,r.Wb,0.5,b);null!==r&&(l=r.Vb,m=r.Wb);break;default:t.m("Unknown Segment type: "+p.type)}}}break;default:t.m("Unknown Geometry type: "+a.type)}}zc.prototype.normalize=zc.prototype.normalize=function(){t.L(this);var a=this.fI();this.offset(-a.x,-a.y);return new w(-a.x,-a.y)};
zc.prototype.offset=zc.prototype.offset=function(a,b){t.L(this);e&&(t.q(a,zc,"offset"),t.q(b,zc,"offset"));this.transform(1,0,0,1,a,b)};zc.prototype.scale=zc.prototype.scale=function(a,b){t.L(this);e&&(t.q(a,zc,"scale:x"),t.q(b,zc,"scale:y"),0>=a&&t.ka(a,"scale must be greater than zero",zc,"scale:x"),0>=b&&t.ka(b,"scale must be greater than zero",zc,"scale:y"));this.transform(a,0,0,b,0,0)};
zc.prototype.rotate=zc.prototype.rotate=function(a,b,c){t.L(this);void 0===b&&(b=0);void 0===c&&(c=0);e&&(t.q(a,zc,"rotate:angle"),t.q(b,zc,"rotate:x"),t.q(c,zc,"rotate:y"));var d=t.oh();d.reset();d.rotate(a,b,c);this.transform(d.m11,d.m12,d.m21,d.m22,d.dx,d.dy);t.We(d)};
zc.prototype.transform=zc.prototype.transform=function(a,b,c,d,f,g){var h,k;switch(this.type){case Dc:case Ec:case Mc:h=this.oc;k=this.yc;this.oc=h*a+k*c+f;this.yc=h*b+k*d+g;h=this.jb;k=this.tb;this.jb=h*a+k*c+f;this.tb=h*b+k*d+g;break;case Ac:for(var l=this.Bb,m=l.length,n=0;n<m;n++){var p=l.n[n];h=p.qa;k=p.ra;p.qa=h*a+k*c+f;p.ra=h*b+k*d+g;for(var p=p.Ea,q=p.length,r=0;r<q;r++){var s=p.n[r];switch(s.type){case Oc:case bd:h=s.D;k=s.F;s.D=h*a+k*c+f;s.F=h*b+k*d+g;break;case cd:h=s.Cb;k=s.Sb;s.Cb=h*
a+k*c+f;s.Sb=h*b+k*d+g;h=s.re;k=s.se;s.re=h*a+k*c+f;s.se=h*b+k*d+g;h=s.D;k=s.F;s.D=h*a+k*c+f;s.F=h*b+k*d+g;break;case dd:h=s.Cb;k=s.Sb;s.Cb=h*a+k*c+f;s.Sb=h*b+k*d+g;h=s.D;k=s.F;s.D=h*a+k*c+f;s.F=h*b+k*d+g;break;case ed:h=s.Da;k=s.Oa;s.Da=h*a+k*c+f;s.Oa=h*b+k*d+g;s.radiusX*=Math.sqrt(a*a+c*c);void 0!==s.radiusY&&(s.radiusY*=Math.sqrt(b*b+d*d));break;case fd:h=s.D;k=s.F;s.D=h*a+k*c+f;s.F=h*b+k*d+g;s.radiusX*=Math.sqrt(a*a+c*c);s.radiusY*=Math.sqrt(b*b+d*d);break;default:t.m("Unknown Segment type: "+
s.type)}}}}this.Va=!0};zc.prototype.Ds=function(a,b){var c=this.oc,d=this.yc,f=this.jb,g=this.tb,h=Math.min(c,f),k=Math.min(d,g),c=Math.abs(f-c),d=Math.abs(g-d),g=t.K();g.x=h;g.y=k;b.Sa(g);f=new Bc(g.x,g.y);g.x=h+c;g.y=k;b.Sa(g);f.Ea.add(new id(Oc,g.x,g.y));g.x=h+c;g.y=k+d;b.Sa(g);f.Ea.add(new id(Oc,g.x,g.y));g.x=h;g.y=k+d;b.Sa(g);f.Ea.add((new id(Oc,g.x,g.y)).close());t.B(g);a.type=Ac;a.Bb.add(f);return a};
zc.prototype.Fa=function(a,b,c,d){var f=a.x,g=a.y,h=this.Pb.x-20;a=a.y;for(var k=0,l,m,n,p,q,r,s,u=this.Bb.n,v=u.length,D=0;D<v;D++){var A=u[D];if(A.pp){if(c&&A.Fa(f,g,b))return!0;var G=A.Ea;l=A.qa;m=A.ra;for(var K=l,N=m,O=0;O<=G.length;O++){O!==G.length?(n=G.n[O],p=n.type,r=n.D,s=n.F):(p=Oc,r=K,s=N);switch(p){case bd:q=jd(f,g,h,a,l,m,K,N);if(!0===q)return!0;k+=q;K=r;N=s;break;case Oc:q=jd(f,g,h,a,l,m,r,s);if(!0===q)return!0;k+=q;break;case cd:q=F.Qs(l,m,n.Cb,n.Sb,n.re,n.se,r,s,h,a,f,g,0.5);k+=q;
break;case dd:q=F.Qs(l,m,(l+2*n.Cb)/3,(m+2*n.Sb)/3,(n.Cb+2*r)/3,(n.Cb+2*r)/3,r,s,h,a,f,g,0.5);k+=q;break;case ed:case fd:p=n.type===ed?gd(n,A):hd(n,A,l,m);for(var U=p.length,X=null,Z=0;Z<U;Z++){X=p[Z];if(0===Z){q=jd(f,g,h,a,l,m,X.x1,X.y1);if(!0===q)return!0;k+=q}q=F.Qs(X.x1,X.y1,X.x2,X.y2,X.ge,X.he,X.Vb,X.Wb,h,a,f,g,0.5);k+=q}null!==X&&(r=X.Vb,s=X.Wb);break;default:t.m("Unknown Segment type: "+n.type)}l=r;m=s}if(0!==k)return!0;k=0}else if(A.Fa(f,g,d?b:b+2))return!0}return 0!==k};
function jd(a,b,c,d,f,g,h,k){if(F.Md(f,g,h,k,0.05,a,b))return!0;var l=(a-c)*(g-k);if(0===l)return 0;var m=((a*d-b*c)*(f-h)-(a-c)*(f*k-g*h))/l;b=(a*d-b*c)*(g-k)/l;if(m>=a)return 0;if((f>h?f-h:h-f)<(g>k?g-k:k-g)){if(g<k?(a=g,f=k):(a=k,f=g),b<a||b>f)return 0}else if(f<h?(a=f,f=h):a=h,m<a||m>f)return 0;return 0<l?1:-1}function kd(a,b,c,d){for(var f=a.Bb.length,g=0;g<f;g++)if(a.Bb.n[g].Fa(b,c,d))return!0;return!1}
zc.prototype.getPointAlongPath=function(a){(0>a||1<a)&&t.ka(a,"0 <= fraction <= 1",zc,"getPointAlongPath:fraction");var b=this.Bb.$a(),c=t.Db(),d=[];d.push([b.qa,b.ra]);for(var f=b.qa,g=b.ra,h=f,k=g,l=b.Ea.n,m=l.length,n=0;n<m;n++){var p=l[n];switch(p.da){case bd:c.push(d);d=[];d.push([p.D,p.F]);f=p.D;g=p.F;h=f;k=g;break;case Oc:d.push([p.D,p.F]);f=p.D;g=p.F;break;case cd:F.ze(f,g,p.jd,p.ye,p.ng,p.og,p.jb,p.tb,0.5,d);f=p.D;g=p.F;break;case dd:F.Jp(f,g,p.jd,p.ye,p.jb,p.tb,0.5,d);f=p.D;g=p.F;break;
case ed:for(var q=gd(p,b),r=q.length,s=0;s<r;s++){var u=q[s];F.ze(f,g,u.x2,u.y2,u.ge,u.he,u.Vb,u.Wb,0.5,d);f=u.Vb;g=u.Wb}break;case fd:q=hd(p,b,f,g);r=q.length;for(s=0;s<r;s++)u=q[s],F.ze(f,g,u.x2,u.y2,u.ge,u.he,u.Vb,u.Wb,0.5,d),f=u.Vb,g=u.Wb;break;default:t.m("Segment not of valid type")}p.Gh&&d.push([h,k])}c.push(d);m=0;f=c.length;b=null;for(g=0;g<f;g++)for(h=c[g],k=h.length,n=0;n<k;n++)d=h[n],0!==n&&(l=Math.sqrt(Sa(b[0],b[1],d[0],d[1])),m+=l),b=d;a*=m;for(g=m=0;g<f;g++)for(h=c[g],k=h.length,n=
0;n<k;n++){d=h[n];if(0!==n){l=Math.sqrt(Sa(b[0],b[1],d[0],d[1]));if(m+l>a)return n=(a-m)/l,t.ya(c),new w(b[0]+(d[0]-b[0])*n,b[1]+(d[1]-b[1])*n);m+=l}b=d}t.ya(c);return null};t.g(zc,"type",zc.prototype.type);t.defineProperty(zc,{type:"type"},function(){return this.da},function(a){this.da!==a&&(e&&t.Aa(a,zc,zc,"type"),t.L(this,a),this.da=a,this.Va=!0)});t.g(zc,"startX",zc.prototype.qa);
t.defineProperty(zc,{qa:"startX"},function(){return this.oc},function(a){this.oc!==a&&(e&&t.q(a,zc,"startX"),t.L(this,a),this.oc=a,this.Va=!0)});t.g(zc,"startY",zc.prototype.ra);t.defineProperty(zc,{ra:"startY"},function(){return this.yc},function(a){this.yc!==a&&(e&&t.q(a,zc,"startY"),t.L(this,a),this.yc=a,this.Va=!0)});t.g(zc,"endX",zc.prototype.D);t.defineProperty(zc,{D:"endX"},function(){return this.jb},function(a){this.jb!==a&&(e&&t.q(a,zc,"endX"),t.L(this,a),this.jb=a,this.Va=!0)});
t.g(zc,"endY",zc.prototype.F);t.defineProperty(zc,{F:"endY"},function(){return this.tb},function(a){this.tb!==a&&(e&&t.q(a,zc,"endY"),t.L(this,a),this.tb=a,this.Va=!0)});t.g(zc,"figures",zc.prototype.Bb);t.defineProperty(zc,{Bb:"figures"},function(){return this.Ck},function(a){this.Ck!==a&&(e&&t.l(a,B,zc,"figures"),t.L(this,a),this.Ck=a,this.Va=!0)});t.defineProperty(zc,{G:"spot1"},function(){return this.Mi},function(a){e&&t.l(a,H,zc,"spot1");t.L(this,a);this.Mi=a.Z()});
t.defineProperty(zc,{H:"spot2"},function(){return this.Ni},function(a){e&&t.l(a,H,zc,"spot2");t.L(this,a);this.Ni=a.Z()});t.A(zc,{Pb:"bounds"},function(){this.uA()&&(this.oB(),this.qf());return this.tu});function Bc(a,b,c){t.Ac(this);void 0===c&&(c=!0);this.Wl=c;this.bo=!0;void 0!==a?(e&&t.q(a,Bc,"sx"),this.oc=a):this.oc=0;void 0!==b?(e&&t.q(b,Bc,"sy"),this.yc=b):this.yc=0;this.hs=new B(id);this.Hv=this.hs.V;this.Va=!0}t.ga("PathFigure",Bc);t.Xh(Bc);
Bc.prototype.copy=function(){var a=new Bc;a.Wl=this.Wl;a.bo=this.bo;a.oc=this.oc;a.yc=this.yc;for(var b=this.hs,c=b.length,d=a.hs,f=0;f<c;f++){var g=b.n[f].copy();d.add(g)}a.Hv=this.Hv;a.Va=this.Va;return a};Bc.prototype.equalsApprox=Bc.prototype.tf=function(a){if(!(a instanceof Bc&&F.I(this.qa,a.qa)&&F.I(this.ra,a.ra)))return!1;var b=this.Ea;a=a.Ea;var c=b.length;if(c!==a.length)return!1;for(var d=0;d<c;d++)if(!b.n[d].tf(a.n[d]))return!1;return!0};aa=Bc.prototype;
aa.toString=function(a){for(var b=void 0===a?"M"+this.qa.toString()+" "+this.ra.toString():"M"+this.qa.toFixed(a)+" "+this.ra.toFixed(a),c=this.Ea,d=c.length,f=0;f<d;f++)b+=" "+c.n[f].toString(a);return b};aa.freeze=function(){this.nb=!0;var a=this.Ea;a.freeze();for(var b=a.length,c=0;c<b;c++)a.n[c].freeze();return this};aa.Ma=function(){this.nb=!1;var a=this.Ea;a.Ma();for(var b=a.length,c=0;c<b;c++)a.n[c].Ma();return this};
aa.uA=function(){if(this.Va)return!0;var a=this.Ea;if(this.Hv!==a.V)return!0;for(var b=a.length,c=0;c<b;c++)if(a.n[c].Va)return!0;return!1};aa.oB=function(){this.Va=!1;var a=this.Ea;this.Hv=a.V;for(var b=a.length,c=0;c<b;c++){var d=a.n[c];d.Va=!1;d.nj=null}};t.g(Bc,"isFilled",Bc.prototype.pp);t.defineProperty(Bc,{pp:"isFilled"},function(){return this.Wl},function(a){e&&t.i(a,"boolean",Bc,"isFilled");t.L(this,a);this.Wl=a});t.g(Bc,"isShadowed",Bc.prototype.gj);
t.defineProperty(Bc,{gj:"isShadowed"},function(){return this.bo},function(a){e&&t.i(a,"boolean",Bc,"isShadowed");t.L(this,a);this.bo=a});t.g(Bc,"startX",Bc.prototype.qa);t.defineProperty(Bc,{qa:"startX"},function(){return this.oc},function(a){e&&t.q(a,Bc,"startX");t.L(this,a);this.oc=a;this.Va=!0});t.g(Bc,"startY",Bc.prototype.ra);t.defineProperty(Bc,{ra:"startY"},function(){return this.yc},function(a){e&&t.q(a,Bc,"startY");t.L(this,a);this.yc=a;this.Va=!0});t.g(Bc,"segments",Bc.prototype.Ea);
t.defineProperty(Bc,{Ea:"segments"},function(){return this.hs},function(a){e&&t.l(a,B,Bc,"segments");t.L(this,a);this.hs=a;this.Va=!0});
Bc.prototype.Fa=function(a,b,c){for(var d=this.qa,f=this.ra,g=d,h=f,k=this.Ea.n,l=k.length,m=0;m<l;m++){var n=k[m];switch(n.type){case bd:g=n.D;h=n.F;d=n.D;f=n.F;break;case Oc:if(F.Md(d,f,n.D,n.F,c,a,b))return!0;d=n.D;f=n.F;break;case cd:if(F.hw(d,f,n.Cb,n.Sb,n.re,n.se,n.D,n.F,0.5,a,b,c))return!0;d=n.D;f=n.F;break;case dd:if(F.OA(d,f,n.Cb,n.Sb,n.D,n.F,0.5,a,b,c))return!0;d=n.D;f=n.F;break;case ed:case fd:for(var p=n.type===ed?gd(n,this):hd(n,this,d,f),q=p.length,r=null,s=0;s<q;s++)if(r=p[s],0===s&&
F.Md(d,f,r.x1,r.y1,c,a,b)||F.hw(r.x1,r.y1,r.x2,r.y2,r.ge,r.he,r.Vb,r.Wb,0.5,a,b,c))return!0;null!==r&&(d=r.Vb,f=r.Wb);break;default:t.m("Unknown Segment type: "+n.type)}if(n.ot&&(d!==g||f!==h)&&F.Md(d,f,g,h,c,a,b))return!0}return!1};
function id(a,b,c,d,f,g,h,k){t.Ac(this);void 0===a?a=Oc:e&&t.Aa(a,id,id,"constructor:type");this.da=a;void 0!==b?(e&&t.q(b,id,"ex"),this.jb=b):this.jb=0;void 0!==c?(e&&t.q(c,id,"ey"),this.tb=c):this.tb=0;a===fd?(void 0!==g&&(a=g%360,0>a&&(a+=360),this.jd=a),void 0!==d&&(e&&t.q(d,id,"x1"),this.ng=Math.max(d,0)),void 0!==f&&(e&&t.q(f,id,"y1"),this.og=Math.max(f,0)),this.jo=!!h,this.yn=!!k):(void 0!==d&&(e&&t.q(d,id,"x1"),this.jd=d),void 0!==f&&(e&&t.q(f,id,"y1"),this.ye=f),void 0!==g&&(e&&t.q(g,id,
"x2"),a===ed&&(g=Math.max(g,0)),this.ng=g),void 0!==h&&"number"===typeof h&&(e&&t.q(h,id,"y2"),a===ed&&(h=Math.max(h,0)),this.og=h));this.Gh=!1;this.Va=!0;this.nj=null}t.ga("PathSegment",id);t.Xh(id);
id.prototype.copy=function(){var a=new id;a.da=this.da;a.jb=this.jb;a.tb=this.tb;void 0!==this.jd&&(a.jd=this.jd);void 0!==this.ye&&(a.ye=this.ye);void 0!==this.ng&&(a.ng=this.ng);void 0!==this.og&&(a.og=this.og);void 0!==this.jo&&(a.jo=this.jo);void 0!==this.yn&&(a.yn=this.yn);a.Gh=this.Gh;a.Va=this.Va;return a};
id.prototype.equalsApprox=id.prototype.tf=function(a){if(!(a instanceof id)||this.type!==a.type||this.ot!==a.ot)return!1;switch(this.type){case bd:case Oc:return F.I(this.D,a.D)&&F.I(this.F,a.F);case cd:return F.I(this.D,a.D)&&F.I(this.F,a.F)&&F.I(this.Cb,a.Cb)&&F.I(this.Sb,a.Sb)&&F.I(this.re,a.re)&&F.I(this.se,a.se);case dd:return F.I(this.D,a.D)&&F.I(this.F,a.F)&&F.I(this.Cb,a.Cb)&&F.I(this.Sb,a.Sb);case ed:return F.I(this.mh,a.mh)&&F.I(this.gi,a.gi)&&F.I(this.Da,a.Da)&&F.I(this.Oa,a.Oa)&&F.I(this.radiusX,
a.radiusX)&&F.I(this.radiusY,a.radiusY);case fd:return this.Pw===a.Pw&&this.Sw===a.Sw&&F.I(this.Ex,a.Ex)&&F.I(this.D,a.D)&&F.I(this.F,a.F)&&F.I(this.radiusX,a.radiusX)&&F.I(this.radiusY,a.radiusY);default:return!1}};
id.prototype.toString=function(a){switch(this.type){case bd:a=void 0===a?"M"+this.D.toString()+" "+this.F.toString():"M"+this.D.toFixed(a)+" "+this.F.toFixed(a);break;case Oc:a=void 0===a?"L"+this.D.toString()+" "+this.F.toString():"L"+this.D.toFixed(a)+" "+this.F.toFixed(a);break;case cd:a=void 0===a?"C"+this.Cb.toString()+" "+this.Sb.toString()+" "+this.re.toString()+" "+this.se.toString()+" "+this.D.toString()+" "+this.F.toString():"C"+this.Cb.toFixed(a)+" "+this.Sb.toFixed(a)+" "+this.re.toFixed(a)+
" "+this.se.toFixed(a)+" "+this.D.toFixed(a)+" "+this.F.toFixed(a);break;case dd:a=void 0===a?"Q"+this.Cb.toString()+" "+this.Sb.toString()+" "+this.D.toString()+" "+this.F.toString():"Q"+this.Cb.toFixed(a)+" "+this.Sb.toFixed(a)+" "+this.D.toFixed(a)+" "+this.F.toFixed(a);break;case ed:a=void 0===a?"B"+this.mh.toString()+" "+this.gi.toString()+" "+this.Da.toString()+" "+this.Oa.toString()+" "+this.radiusX:"B"+this.mh.toFixed(a)+" "+this.gi.toFixed(a)+" "+this.Da.toFixed(a)+" "+this.Oa.toFixed(a)+
" "+this.radiusX;break;case fd:a=void 0===a?"A"+this.radiusX.toString()+" "+this.radiusY.toString()+" "+this.Ex.toString()+" "+(this.Sw?1:0)+" "+(this.Pw?1:0)+" "+this.D.toString()+" "+this.F.toString():"A"+this.radiusX.toFixed(a)+" "+this.radiusY.toFixed(a)+" "+this.Ex.toFixed(a)+" "+(this.Sw?1:0)+" "+(this.Pw?1:0)+" "+this.D.toFixed(a)+" "+this.F.toFixed(a);break;default:a=this.type.toString()}return a+(this.Gh?"z":"")};var bd;id.Move=bd=t.w(id,"Move",0);var Oc;id.Line=Oc=t.w(id,"Line",1);var cd;
id.Bezier=cd=t.w(id,"Bezier",2);var dd;id.QuadraticBezier=dd=t.w(id,"QuadraticBezier",3);var ed;id.Arc=ed=t.w(id,"Arc",4);var fd;id.SvgArc=fd=t.w(id,"SvgArc",4);id.prototype.freeze=function(){this.nb=!0;return this};id.prototype.Ma=function(){this.nb=!1;return this};id.prototype.close=id.prototype.close=function(){this.Gh=!0;return this};
function gd(a,b){if(null!==a.nj&&!1===b.Va)return a.nj;var c=a.radiusX,d=a.radiusY;void 0===d&&(d=c);var f=a.jd,g=a.ye,h=F.gE(0,0,c<d?c:d,a.mh,a.mh+a.gi);if(c!==d){var k=t.oh();k.reset();c<d?k.scale(1,d/c):k.scale(c/d,1);for(var c=h.length,d=t.K(),l=0;l<c;l++){var m=h[l];d.x=m.x1;d.y=m.y1;k.Sa(d);m.x1=d.x;m.y1=d.y;d.x=m.x2;d.y=m.y2;k.Sa(d);m.x2=d.x;m.y2=d.y;d.x=m.ge;d.y=m.he;k.Sa(d);m.ge=d.x;m.he=d.y;d.x=m.Vb;d.y=m.Wb;k.Sa(d);m.Vb=d.x;m.Wb=d.y}t.B(d);t.We(k)}k=h.length;for(c=0;c<k;c++)d=h[c],d.x1+=
f,d.y1+=g,d.x2+=f,d.y2+=g,d.ge+=f,d.he+=g,d.Vb+=f,d.Wb+=g;a.nj=h;return a.nj}
function hd(a,b,c,d){function f(a,b){return(a[0]*b[1]<a[1]*b[0]?-1:1)*Math.acos(g(a,b))}function g(a,b){return(a[0]*b[0]+a[1]*b[1])/(Math.sqrt(Math.pow(a[0],2)+Math.pow(a[1],2))*Math.sqrt(Math.pow(b[0],2)+Math.pow(b[1],2)))}if(null!==a.nj&&!1===b.Va)return a.nj;b=a.ng;var h=a.og,k=Math.PI/180*a.jd,l=a.jo,m=a.yn,n=a.jb,p=a.tb,q=Math.cos(k)*(c-n)/2+Math.sin(k)*(d-p)/2,r=-Math.sin(k)*(c-n)/2+Math.cos(k)*(d-p)/2,s=Math.pow(q,2)/Math.pow(b,2)+Math.pow(r,2)/Math.pow(h,2);1<s&&(b*=Math.sqrt(s),h*=Math.sqrt(s));
s=(l===m?-1:1)*Math.sqrt((Math.pow(b,2)*Math.pow(h,2)-Math.pow(b,2)*Math.pow(r,2)-Math.pow(h,2)*Math.pow(q,2))/(Math.pow(b,2)*Math.pow(r,2)+Math.pow(h,2)*Math.pow(q,2)));isNaN(s)&&(s=0);l=s*b*r/h;s=s*-h*q/b;isNaN(l)&&(l=0);isNaN(s)&&(s=0);c=(c+n)/2+Math.cos(k)*l-Math.sin(k)*s;d=(d+p)/2+Math.sin(k)*l+Math.cos(k)*s;k=f([1,0],[(q-l)/b,(r-s)/h]);p=[(q-l)/b,(r-s)/h];r=[(-q-l)/b,(-r-s)/h];q=f(p,r);-1>=g(p,r)&&(q=Math.PI);1<=g(p,r)&&(q=0);!m&&0<q&&(q-=2*Math.PI);m&&0>q&&(q+=2*Math.PI);m=b>h?1:b/h;r=b>h?
h/b:1;b=F.gE(0,0,b>h?b:h,k,k+q,!0);h=t.oh();h.reset();h.translate(c,d);h.rotate(a.jd,0,0);h.scale(m,r);$c(b,h);t.We(h);a.nj=b;return a.nj}t.g(id,"isClosed",id.prototype.ot);t.defineProperty(id,{ot:"isClosed"},function(){return this.Gh},function(a){this.Gh!==a&&(this.Gh=a,this.Va=!0)});t.g(id,"type",id.prototype.type);t.defineProperty(id,{type:"type"},function(){return this.da},function(a){e&&t.Aa(a,id,id,"type");t.L(this,a);this.da=a;this.Va=!0});t.g(id,"endX",id.prototype.D);
t.defineProperty(id,{D:"endX"},function(){return this.jb},function(a){e&&t.q(a,id,"endX");t.L(this,a);this.jb=a;this.Va=!0});t.g(id,"endY",id.prototype.F);t.defineProperty(id,{F:"endY"},function(){return this.tb},function(a){e&&t.q(a,id,"endY");t.L(this,a);this.tb=a;this.Va=!0});t.defineProperty(id,{Cb:"point1X"},function(){return this.jd},function(a){e&&t.q(a,id,"point1X");t.L(this,a);this.jd=a;this.Va=!0});
t.defineProperty(id,{Sb:"point1Y"},function(){return this.ye},function(a){e&&t.q(a,id,"point1Y");t.L(this,a);this.ye=a;this.Va=!0});t.defineProperty(id,{re:"point2X"},function(){return this.ng},function(a){e&&t.q(a,id,"point2X");t.L(this,a);this.ng=a;this.Va=!0});t.defineProperty(id,{se:"point2Y"},function(){return this.og},function(a){e&&t.q(a,id,"point2Y");t.L(this,a);this.og=a;this.Va=!0});
t.defineProperty(id,{Da:"centerX"},function(){return this.jd},function(a){e&&t.q(a,id,"centerX");t.L(this,a);this.jd=a;this.Va=!0});t.defineProperty(id,{Oa:"centerY"},function(){return this.ye},function(a){e&&t.q(a,id,"centerY");t.L(this,a);this.ye=a;this.Va=!0});t.defineProperty(id,{radiusX:"radiusX"},function(){return this.ng},function(a){e&&t.q(a,id,"radiusX");0>a&&t.ka(a,">= zero",id,"radiusX");t.L(this,a);this.ng=a;this.Va=!0});
t.defineProperty(id,{radiusY:"radiusY"},function(){return this.og},function(a){e&&t.q(a,id,"radiusY");0>a&&t.ka(a,">= zero",id,"radiusY");t.L(this,a);this.og=a;this.Va=!0});t.defineProperty(id,{mh:"startAngle"},function(){return this.jb},function(a){this.jb!==a&&(t.L(this,a),e&&t.q(a,id,"startAngle"),a%=360,0>a&&(a+=360),this.jb=a,this.Va=!0)});
t.defineProperty(id,{gi:"sweepAngle"},function(){return this.tb},function(a){e&&t.q(a,id,"sweepAngle");t.L(this,a);360<a&&(a=360);-360>a&&(a=-360);this.tb=a;this.Va=!0});t.defineProperty(id,{Pw:"isClockwiseArc"},function(){return this.yn},function(a){t.L(this,a);this.yn=a;this.Va=!0});t.defineProperty(id,{Sw:"isLargeArc"},function(){return this.jo},function(a){t.L(this,a);this.jo=a;this.Va=!0});
t.defineProperty(id,{Ex:"xAxisRotation"},function(){return this.jd},function(a){e&&t.q(a,id,"xAxisRotation");a%=360;0>a&&(a+=360);t.L(this,a);this.jd=a;this.Va=!0});function ld(){this.U=null;this.Cz=(new w(0,0)).freeze();this.Jy=(new w(0,0)).freeze();this.qu=this.jv=0;this.Yu="";this.Vv=this.Fu=!1;this.Cu=this.su=0;this.oj=this.Nu=!1;this.Mq=null;this.Tv=0;this.pg=this.Rv=null}t.ga("InputEvent",ld);
ld.prototype.copy=function(){var a=new ld;a.U=this.U;a.Cz.assign(this.Ke);a.Jy.assign(this.ea);a.jv=this.jv;a.qu=this.qu;a.Yu=this.Yu;a.Fu=this.Fu;a.Vv=this.Vv;a.su=this.su;a.Cu=this.Cu;a.Nu=this.Nu;a.oj=this.oj;a.Mq=this.Mq;a.Tv=this.Tv;a.Rv=this.Rv;a.pg=this.pg;return a};
ld.prototype.toString=function(){var a="^";this.$c&&(a+="M:"+this.$c);this.button&&(a+="B:"+this.button);this.key&&(a+="K:"+this.key);this.Ae&&(a+="C:"+this.Ae);this.Yj&&(a+="D:"+this.Yj);this.Ee&&(a+="h");this.bubbles&&(a+="b");null!==this.ea&&(a+="@"+this.ea.toString());return a};t.g(ld,"diagram",ld.prototype.h);t.defineProperty(ld,{h:"diagram"},function(){return this.U},function(a){this.U=a});t.g(ld,"viewPoint",ld.prototype.Ke);
t.defineProperty(ld,{Ke:"viewPoint"},function(){return this.Cz},function(a){t.l(a,w,ld,"viewPoint");this.Cz.assign(a)});t.g(ld,"documentPoint",ld.prototype.ea);t.defineProperty(ld,{ea:"documentPoint"},function(){return this.Jy},function(a){t.l(a,w,ld,"documentPoint");this.Jy.assign(a)});t.g(ld,"modifiers",ld.prototype.$c);t.defineProperty(ld,{$c:"modifiers"},function(){return this.jv},function(a){this.jv=a});t.g(ld,"button",ld.prototype.button);
t.defineProperty(ld,{button:"button"},function(){return this.qu},function(a){this.qu=a});t.g(ld,"key",ld.prototype.key);t.defineProperty(ld,{key:"key"},function(){return this.Yu},function(a){this.Yu=a});t.g(ld,"down",ld.prototype.ak);t.defineProperty(ld,{ak:"down"},function(){return this.Fu},function(a){this.Fu=a});t.g(ld,"up",ld.prototype.lj);t.defineProperty(ld,{lj:"up"},function(){return this.Vv},function(a){this.Vv=a});t.g(ld,"clickCount",ld.prototype.Ae);
t.defineProperty(ld,{Ae:"clickCount"},function(){return this.su},function(a){this.su=a});t.g(ld,"delta",ld.prototype.Yj);t.defineProperty(ld,{Yj:"delta"},function(){return this.Cu},function(a){this.Cu=a});t.g(ld,"handled",ld.prototype.Ee);t.defineProperty(ld,{Ee:"handled"},function(){return this.Nu},function(a){this.Nu=a});t.g(ld,"bubbles",ld.prototype.bubbles);t.defineProperty(ld,{bubbles:"bubbles"},function(){return this.oj},function(a){this.oj=a});t.g(ld,"event",ld.prototype.event);
t.defineProperty(ld,{event:"event"},function(){return this.Mq},function(a){this.Mq=a});t.A(ld,{Uw:"isTouchEvent"},function(){var a=window.TouchEvent;return a&&this.event instanceof a});t.g(ld,"timestamp",ld.prototype.timestamp);t.defineProperty(ld,{timestamp:"timestamp"},function(){return this.Tv},function(a){this.Tv=a});t.g(ld,"targetDiagram",ld.prototype.nh);t.defineProperty(ld,{nh:"targetDiagram"},function(){return this.Rv},function(a){this.Rv=a});t.g(ld,"targetObject",ld.prototype.ce);
t.defineProperty(ld,{ce:"targetObject"},function(){return this.pg},function(a){this.pg=a});t.g(ld,"control",ld.prototype.control);t.defineProperty(ld,{control:"control"},function(){return 0!==(this.$c&1)},function(a){this.$c=a?this.$c|1:this.$c&-2});t.g(ld,"shift",ld.prototype.shift);t.defineProperty(ld,{shift:"shift"},function(){return 0!==(this.$c&4)},function(a){this.$c=a?this.$c|4:this.$c&-5});t.g(ld,"alt",ld.prototype.alt);
t.defineProperty(ld,{alt:"alt"},function(){return 0!==(this.$c&2)},function(a){this.$c=a?this.$c|2:this.$c&-3});t.g(ld,"meta",ld.prototype.Bp);t.defineProperty(ld,{Bp:"meta"},function(){return 0!==(this.$c&8)},function(a){this.$c=a?this.$c|8:this.$c&-9});t.g(ld,"left",ld.prototype.left);t.defineProperty(ld,{left:"left"},function(){return 0===this.button},function(a){this.button=a?0:2});t.g(ld,"middle",ld.prototype.pJ);
t.defineProperty(ld,{pJ:"middle"},function(){return 1===this.button},function(a){this.button=a?1:0});t.g(ld,"right",ld.prototype.right);t.defineProperty(ld,{right:"right"},function(){return 2===this.button},function(a){this.button=a?2:0});function rd(){this.U=null;this.Zb="";this.xv=this.Nv=null;this.ru=!1}t.ga("DiagramEvent",rd);rd.prototype.copy=function(){var a=new rd;a.U=this.U;a.Zb=this.Zb;a.Nv=this.Nv;a.xv=this.xv;a.ru=this.ru;return a};
rd.prototype.toString=function(){var a="*"+this.name;this.cancel&&(a+="x");null!==this.Ax&&(a+=":"+this.Ax.toString());null!==this.kx&&(a+="("+this.kx.toString()+")");return a};t.g(rd,"diagram",rd.prototype.h);t.defineProperty(rd,{h:"diagram"},function(){return this.U},function(a){this.U=a});t.g(rd,"name",rd.prototype.name);t.defineProperty(rd,{name:"name"},function(){return this.Zb},function(a){this.Zb=a});t.g(rd,"subject",rd.prototype.Ax);
t.defineProperty(rd,{Ax:"subject"},function(){return this.Nv},function(a){this.Nv=a});t.g(rd,"parameter",rd.prototype.kx);t.defineProperty(rd,{kx:"parameter"},function(){return this.xv},function(a){this.xv=a});t.g(rd,"cancel",rd.prototype.cancel);t.defineProperty(rd,{cancel:"cancel"},function(){return this.ru},function(a){this.ru=a});function td(){this.clear()}t.ga("ChangedEvent",td);var ud;td.Transaction=ud=t.w(td,"Transaction",-1);var vd;td.Property=vd=t.w(td,"Property",0);var wd;
td.Insert=wd=t.w(td,"Insert",1);var xd;td.Remove=xd=t.w(td,"Remove",2);td.prototype.clear=td.prototype.clear=function(){this.sq=vd;this.om=this.iv="";this.mv=this.nv=this.tv=this.to=this.sv=this.U=this.ke=null};
td.prototype.copy=function(){var a=new td;a.ke=this.ke;a.U=this.U;a.sq=this.sq;a.iv=this.iv;a.om=this.om;a.sv=this.sv;var b=this.to;a.to=t.qb(b)&&"function"===typeof b.Z?b.Z():b;b=this.tv;a.tv=t.qb(b)&&"function"===typeof b.Z?b.Z():b;b=this.nv;a.nv=t.qb(b)&&"function"===typeof b.Z?b.Z():b;b=this.mv;a.mv=t.qb(b)&&"function"===typeof b.Z?b.Z():b;return a};
td.prototype.toString=function(){var a="",a=this.td===ud?a+"* ":this.td===vd?a+(null!==this.ba?"!m":"!d"):a+((null!==this.ba?"!m":"!d")+this.td);this.propertyName&&"string"===typeof this.propertyName&&(a+=" "+this.propertyName);this.Af&&this.Af!==this.propertyName&&(a+=" "+this.Af);a+=": ";this.td===ud?null!==this.oldValue&&(a+=" "+this.oldValue):(null!==this.object&&(a+=yd(this.object)),null!==this.oldValue&&(a+="  old: "+yd(this.oldValue)),null!==this.Yf&&(a+=" "+this.Yf),null!==this.newValue&&
(a+="  new: "+yd(this.newValue)),null!==this.Wf&&(a+=" "+this.Wf));return a};td.prototype.getValue=td.prototype.za=function(a){return a?this.oldValue:this.newValue};td.prototype.getParam=function(a){return a?this.Yf:this.Wf};td.prototype.canUndo=td.prototype.canUndo=function(){return null!==this.ba||null!==this.h?!0:!1};td.prototype.undo=td.prototype.undo=function(){this.canUndo()&&(null!==this.ba?this.ba.changeState(this,!0):null!==this.h&&this.h.changeState(this,!0))};
td.prototype.canRedo=td.prototype.canRedo=function(){return null!==this.ba||null!==this.h?!0:!1};td.prototype.redo=td.prototype.redo=function(){this.canRedo()&&(null!==this.ba?this.ba.changeState(this,!1):null!==this.h&&this.h.changeState(this,!1))};t.g(td,"model",td.prototype.ba);t.defineProperty(td,{ba:"model"},function(){return this.ke},function(a){this.ke=a});t.g(td,"diagram",td.prototype.h);t.defineProperty(td,{h:"diagram"},function(){return this.U},function(a){this.U=a});t.g(td,"change",td.prototype.td);
t.defineProperty(td,{td:"change"},function(){return this.sq},function(a){e&&t.Aa(a,td,td,"change");this.sq=a});t.g(td,"modelChange",td.prototype.Af);t.defineProperty(td,{Af:"modelChange"},function(){return this.iv},function(a){e&&t.i(a,"string",td,"modelChange");this.iv=a});t.g(td,"propertyName",td.prototype.propertyName);t.defineProperty(td,{propertyName:"propertyName"},function(){return this.om},function(a){e&&"string"!==typeof a&&t.l(a,Function,td,"propertyName");this.om=a});
t.g(td,"isTransactionFinished",td.prototype.aJ);t.A(td,{aJ:"isTransactionFinished"},function(){return this.sq===ud&&("CommittedTransaction"===this.om||"FinishedUndo"===this.om||"FinishedRedo"===this.om)});t.g(td,"object",td.prototype.object);t.defineProperty(td,{object:"object"},function(){return this.sv},function(a){this.sv=a});t.g(td,"oldValue",td.prototype.oldValue);t.defineProperty(td,{oldValue:"oldValue"},function(){return this.to},function(a){this.to=a});t.g(td,"oldParam",td.prototype.Yf);
t.defineProperty(td,{Yf:"oldParam"},function(){return this.tv},function(a){this.tv=a});t.g(td,"newValue",td.prototype.newValue);t.defineProperty(td,{newValue:"newValue"},function(){return this.nv},function(a){this.nv=a});t.g(td,"newParam",td.prototype.Wf);t.defineProperty(td,{Wf:"newParam"},function(){return this.mv},function(a){this.mv=a});
function E(a){1<arguments.length&&t.m("Model constructor can only take one optional argument, the Array of node data.");t.Ac(this);this.Dy=this.Zb="";this.Jk=this.yC=!1;this.hz={};this.Me=[];this.Bc=new ia(null,Object);this.jm="key";this.wu=this.bv=null;this.vy=this.wy=!1;this.Hr="category";this.xh=new ia(null,ma);this.Bj=null;this.Li=!1;this.Bz=null;this.la=new zd;void 0!==a&&(this.Gg=a)}t.ga("Model",E);
E.prototype.clear=E.prototype.clear=function(){this.Zd&&t.Ym(this.Me,"nodeDataArray",this,!0);this.Me=[];this.Bc.clear();this.xh.clear();this.la.clear()};aa=E.prototype;
aa.$t=function(){var a="";""!==this.name&&(a+=',\n  "name": '+this.quote(this.name));""!==this.Wj&&(a+=',\n  "dataFormat": '+this.quote(this.Wj));this.ab&&(a+=',\n  "isReadOnly": '+this.ab);"key"!==this.ij&&"string"===typeof this.ij&&(a+=',\n  "nodeKeyProperty": '+this.quote(this.ij));this.rw&&(a+=',\n  "copiesArrays": true');this.qw&&(a+=',\n  "copiesArrayObjects": true');"category"!==this.rl&&"string"===typeof this.rl&&(a+=',\n  "nodeCategoryProperty": '+this.quote(this.rl));return a};
aa.rB=function(){var a="",b=this.BA,c=!1,d;for(d in b)if(!Ad(d,b[d])){c=!0;break}c&&(a=',\n  "modelData": '+Bd(this,b));return a+',\n  "nodeDataArray": '+Cd(this,this.Gg,!0)};aa.Ht=function(a){a.name&&(this.name=a.name);a.dataFormat&&(this.Wj=a.dataFormat);a.isReadOnly&&(this.ab=a.isReadOnly);a.nodeKeyProperty&&(this.ij=a.nodeKeyProperty);a.copiesArrays&&(this.rw=a.copiesArrays);a.copiesArrayObjects&&(this.qw=a.copiesArrayObjects);a.nodeCategoryProperty&&(this.rl=a.nodeCategoryProperty)};
aa.PA=function(a){var b=a.modelData;b&&(this.Jt(b),this.BA=b);if(a=a.nodeDataArray)this.Jt(a),this.Gg=a};aa.toString=function(a){void 0===a&&(a=0);if(1<a)return this.iB();var b=(""!==this.name?this.name:"")+" Model";if(0<a){b+="\n node data:";a=this.Gg;var c=t.ub(a),d;for(d=0;d<c;d++)var f=t.lb(a,d),b=b+(" "+this.Hb(f)+":"+yd(f))}return b};
E.prototype.toJson=E.prototype.toJSON=E.prototype.iB=function(a){void 0===a&&(a=this.constructor===E?"go.Model":this.constructor===M?"go.GraphLinksModel":this.constructor===Kd?"go.TreeModel":t.xg(this));return'{ "class": '+this.quote(a)+this.$t()+this.rB()+"}"};
E.fromJson=E.fromJSON=function(a,b){void 0===b&&(b=null);b&&t.l(b,E,E,"fromJson:model");var c=null;if("string"===typeof a)if(window&&window.JSON&&window.JSON.parse)try{c=window.JSON.parse(a)}catch(d){e&&t.trace("JSON.parse error: "+d.toString())}else t.trace("WARNING: no JSON.parse available");else"object"===typeof a?c=a:t.m("Unable to construct a Model from: "+a);if(null===b){var f;f=null;var g=c["class"];if("string"===typeof g)try{var h=null;0===g.indexOf("go.")?(g=g.substr(3),h=ba[g]):(h=ba[g])||
(h=window[g]);"function"===typeof h&&(f=new h)}catch(k){}null===f||f instanceof E?b=f:t.m("Unable to construct a Model of declared class: "+c["class"])}null===b&&(b=new M);b.Ht(c);b.PA(c);return b};
E.prototype.replaceJsonObjects=E.prototype.Jt=function(a){if(t.isArray(a))for(var b=t.ub(a),c=0;c<b;c++){var d=t.lb(a,c);t.qb(d)&&t.MD(a,c,this.Jt(d))}else if(t.qb(a)){for(c in a)if(d=a[c],t.qb(d)&&(d=this.Jt(d),a[c]=d,"points"===c&&Array.isArray(d))){for(var f=0===d.length%2,g=0;g<d.length;g++)if("number"!==typeof d[g]){f=!1;break}if(f){f=new B(w);for(g=0;g<d.length/2;g++){var h=new w(d[2*g],d[2*g+1]);f.add(h)}f.freeze();a[c]=f}}if("object"===typeof a){c=a;d=a["class"];if("NaN"===d)c=NaN;else if("Date"===
d)c=new Date(a.value);else if("go.Point"===d)c=new w(Ld(a.x),Ld(a.y));else if("go.Size"===d)c=new fa(Ld(a.width),Ld(a.height));else if("go.Rect"===d)c=new x(Ld(a.x),Ld(a.y),Ld(a.width),Ld(a.height));else if("go.Margin"===d)c=new ab(Ld(a.top),Ld(a.right),Ld(a.bottom),Ld(a.left));else if("go.Spot"===d)c="string"===typeof a["enum"]?vb(a["enum"]):new H(Ld(a.x),Ld(a.y),Ld(a.offsetX),Ld(a.offsetY));else if("go.Brush"===d){if(c=new ea,c.type=t.Pm(ea,a.type),a.start instanceof H&&(c.start=a.start),a.end instanceof
H&&(c.end=a.end),"number"===typeof a.startRadius&&(c.Vp=Ld(a.startRadius)),"number"===typeof a.endRadius&&(c.ap=Ld(a.endRadius)),a=a.colorStops)for(b in a)c.addColorStop(parseFloat(b),a[b])}else"go.Geometry"===d&&(c="string"===typeof a.path?Rc(a.path):new zc,c.type=t.Pm(zc,a.type),"number"===typeof a.startX&&(c.qa=Ld(a.startX)),"number"===typeof a.startY&&(c.ra=Ld(a.startY)),"number"===typeof a.endX&&(c.D=Ld(a.endX)),"number"===typeof a.endY&&(c.F=Ld(a.endY)),a.spot1 instanceof H&&(c.G=a.spot1),a.spot2 instanceof
H&&(c.H=a.spot2));a=c}}return a};E.prototype.quote=function(a){for(var b="",c=a.length,d=0;d<c;d++)var f=a[d],b='"'===f||"\\"===f?b+("\\"+f):"\b"===f?b+"\\b":"\f"===f?b+"\\f":"\n"===f?b+"\\n":"\r"===f?b+"\\r":"\t"===f?b+"\\t":b+f;return'"'+b+'"'};
E.prototype.writeJsonValue=E.prototype.au=function(a){return void 0===a?"undefined":null===a?"null":!0===a?"true":!1===a?"false":"string"===typeof a?this.quote(a):"number"===typeof a?Infinity===a?"9e9999":-Infinity===a?"-9e9999":isNaN(a)?'{"class":"NaN"}':a.toString():a instanceof Date?'{"class":"Date", "value":"'+a.toJSON()+'"}':a instanceof Number?this.au(a.valueOf()):t.isArray(a)?Cd(this,a):t.qb(a)?Bd(this,a):"function"===typeof a?"null":a.toString()};
function Cd(a,b,c){var d=t.ub(b),f="[ ";c&&1<d&&(f+="\n");for(var g=0;g<d;g++){var h=t.lb(b,g);void 0!==h&&(0<g&&(f+=",",c&&(f+="\n")),f+=a.au(h))}c&&1<d&&(f+="\n");return f+" ]"}function Ad(a,b){return void 0===b||"__gohashid"===a||"_"===a[0]||"function"===typeof b?!0:!1}function Md(a){return isNaN(a)?"NaN":Infinity===a?"9e9999":-Infinity===a?"-9e9999":a}
function Bd(a,b){var c=b;if(c instanceof w)b={"class":"go.Point",x:Md(c.x),y:Md(c.y)};else if(c instanceof fa)b={"class":"go.Size",width:Md(c.width),height:Md(c.height)};else if(c instanceof x)b={"class":"go.Rect",x:Md(c.x),y:Md(c.y),width:Md(c.width),height:Md(c.height)};else if(c instanceof ab)b={"class":"go.Margin",top:Md(c.top),right:Md(c.right),bottom:Md(c.bottom),left:Md(c.left)};else if(c instanceof H)b=c.xd()?{"class":"go.Spot",x:Md(c.x),y:Md(c.y),offsetX:Md(c.offsetX),offsetY:Md(c.offsetY)}:
{"class":"go.Spot","enum":c.toString()};else if(c instanceof ea){b={"class":"go.Brush",type:c.type.name};if(c.type===Nd)b.color=c.color;else if(c.type===Yd||c.type===Zd)b.start=c.start,b.end=c.end,c.type===Zd&&(0!==c.Vp&&(b.startRadius=Md(c.Vp)),isNaN(c.ap)||(b.endRadius=Md(c.ap)));if(null!==c.Vo){for(var d={},c=c.Vo.k;c.next();)d[c.key.toString()]=c.value;b.colorStops=d}}else if(c instanceof zc)b={"class":"go.Geometry",type:c.type.name},0!==c.qa&&(b.startX=Md(c.qa)),0!==c.ra&&(b.startY=Md(c.ra)),
0!==c.D&&(b.endX=Md(c.D)),0!==c.F&&(b.endY=Md(c.F)),c.G.M(Eb)||(b.spot1=c.G),c.H.M(Pb)||(b.spot2=c.H),c.type===Ac&&(b.path=Pc(c));else if(c instanceof Q||c instanceof z||c instanceof $d||c instanceof E||c instanceof ae||c instanceof oa||c instanceof be||c instanceof ta||c instanceof zd||c instanceof ce)return t.trace("ERROR: trying to convert a GraphObject or Diagram or Model or Tool or Layout or UndoManager into JSON text: "+c.toString()),"{}";var d="{",f=!0,g;for(g in b)if(c=t.ib(b,g),!Ad(g,c))if(f?
f=!1:d+=", ",d+='"'+g+'":',"points"===g&&c instanceof B&&c.da===w){for(var h="[",c=c.k;c.next();){var k=c.value;1<h.length&&(h+=",");h+=a.au(k.x);h+=",";h+=a.au(k.y)}h+="]";d+=h}else d+=a.au(c);return d+"}"}function Ld(a){return"number"===typeof a?a:"NaN"===a?NaN:"9e9999"===a?Infinity:"-9e9999"===a?-Infinity:parseFloat(a)}t.g(E,"name",E.prototype.name);t.defineProperty(E,{name:"name"},function(){return this.Zb},function(a){var b=this.Zb;b!==a&&(t.i(a,"string",E,"name"),this.Zb=a,this.j("name",b,a))});
t.g(E,"dataFormat",E.prototype.Wj);t.defineProperty(E,{Wj:"dataFormat"},function(){return this.Dy},function(a){var b=this.Dy;b!==a&&(t.i(a,"string",E,"dataFormat"),this.Dy=a,this.j("dataFormat",b,a))});t.g(E,"knockoutJS",E.prototype.Zd);t.defineProperty(E,{Zd:"knockoutJS"},function(){return this.yC},function(a){this.yC=a;t.zc||(t.zc="object"===typeof window.ko&&"function"===typeof window.ko.isObservable?window.ko.isObservable:null,a&&null===t.zc&&t.trace("No value for ko.isObservable: is KnockoutJS library not loaded?"))});
t.g(E,"isReadOnly",E.prototype.ab);t.defineProperty(E,{ab:"isReadOnly"},function(){return this.Jk},function(a){var b=this.Jk;b!==a&&(t.i(a,"boolean",E,"isReadOnly"),this.Jk=a,this.j("isReadOnly",b,a))});t.g(E,"modelData",E.prototype.BA);t.defineProperty(E,{BA:"modelData"},function(){return this.hz},function(a){var b=this.hz;b!==a&&(t.i(a,"object",E,"modelData"),this.hz=a,this.j("modelData",b,a))});
E.prototype.addChangedListener=E.prototype.Iz=function(a){t.i(a,"function",E,"addChangedListener:listener");null===this.Bj&&(this.Bj=new B("function"));this.Bj.add(a)};E.prototype.removeChangedListener=E.prototype.TA=function(a){t.i(a,"function",E,"removeChangedListener:listener");null!==this.Bj&&(this.Bj.remove(a),0===this.Bj.count&&(this.Bj=null))};
E.prototype.iw=function(a){this.Wa||this.la.PE(a);if(null!==this.Bj){var b=this.Bj,c=b.length;if(1===c)b=b.wa(0),b(a);else if(0!==c)for(var d=b.Ie(),f=0;f<c;f++)b=d[f],b(a)}};E.prototype.raiseChangedEvent=E.prototype.Ic=function(a,b,c,d,f,g,h){me(this,"",a,b,c,d,f,g,h)};E.prototype.raiseChanged=E.prototype.j=function(a,b,c,d,f){me(this,"",vd,a,this,b,c,d,f)};E.prototype.raiseDataChanged=E.prototype.mx=function(a,b,c,d,f,g){me(this,"",vd,b,a,c,d,f,g)};
function me(a,b,c,d,f,g,h,k,l){void 0===k&&(k=null);void 0===l&&(l=null);var m=new td;m.ba=a;m.td=c;m.Af=b;m.propertyName=d;m.object=f;m.oldValue=g;m.Yf=k;m.newValue=h;m.Wf=l;a.iw(m)}t.g(E,"undoManager",E.prototype.la);t.defineProperty(E,{la:"undoManager"},function(){return this.Bz},function(a){var b=this.Bz;b!==a&&(t.l(a,zd,E,"undoManager"),null!==b&&b.JJ(this),this.Bz=a,null!==a&&a.EH(this))});t.g(E,"skipsUndoManager",E.prototype.Wa);
t.defineProperty(E,{Wa:"skipsUndoManager"},function(){return this.Li},function(a){t.i(a,"boolean",E,"skipsUndoManager");this.Li=a});
E.prototype.changeState=function(a,b){if(null!==a&&a.ba===this)if(a.td===vd){var c=a.object,d=a.propertyName,f=a.za(b);t.Qa(c,d,f)}else a.td===wd?"nodeDataArray"===a.Af?(c=a.newValue,t.qb(c)&&(d=this.Hb(c),void 0!==d&&(b?(this.Zd&&t.yf(c,this,!0),t.Ui(this.Me,a.Wf),this.Bc.remove(d)):(this.Zd&&t.yf(c,this,!1),t.Ti(this.Me,a.Wf,c),this.Bc.add(d,c))))):""===a.Af?(c=a.object,!t.isArray(c)&&a.propertyName&&(c=t.ib(a.object,a.propertyName)),t.isArray(c)&&(d=a.newValue,f=a.Wf,b?t.Ui(c,f):t.Ti(c,f,d))):
t.m("unknown ChangedEvent.Insert object: "+a.toString()):a.td===xd?"nodeDataArray"===a.Af?(c=a.oldValue,t.qb(c)&&(d=this.Hb(c),void 0!==d&&(b?(this.Zd&&t.yf(c,this,!1),t.Ti(this.Me,a.Yf,c),this.Bc.add(d,c)):(this.Zd&&t.yf(c,this,!0),t.Ui(this.Me,a.Yf),this.Bc.remove(d))))):""===a.Af?(c=a.object,!t.isArray(c)&&a.propertyName&&(c=t.ib(a.object,a.propertyName)),t.isArray(c)&&(d=a.oldValue,f=a.Yf,b?t.Ti(c,f,d):t.Ui(c,f))):t.m("unknown ChangedEvent.Remove object: "+a.toString()):a.td!==ud&&t.m("unknown ChangedEvent: "+
a.toString())};E.prototype.startTransaction=E.prototype.uc=function(a){return this.la.uc(a)};E.prototype.commitTransaction=E.prototype.Ce=function(a){return this.la.Ce(a)};E.prototype.rollbackTransaction=E.prototype.Np=function(){return this.la.Np()};E.prototype.updateTargetBindings=E.prototype.Kb=function(a,b){void 0===b&&(b="");me(this,"SourceChanged",ud,b,a,null,null)};t.g(E,"nodeKeyProperty",E.prototype.ij);
t.defineProperty(E,{ij:"nodeKeyProperty"},function(){return this.jm},function(a){var b=this.jm;b!==a&&(ne(a,E,"nodeKeyProperty"),0<this.Bc.count&&t.m("Cannot set Model.nodeKeyProperty when there is existing node data"),this.jm=a,this.j("nodeKeyProperty",b,a))});function ne(a,b,c){"string"!==typeof a&&"function"!==typeof a&&t.bc(a,"string or function",b,c)}
E.prototype.getKeyForNodeData=E.prototype.Hb=function(a){if(null!==a){var b=this.jm;if(""!==b&&(b=t.ib(a,b),void 0!==b)){if(oe(b))return b;t.m("Key value for node data "+a+" is not a number or a string: "+b)}}};
E.prototype.setKeyForNodeData=E.prototype.aB=function(a,b){null===b&&(b=void 0);void 0===b||oe(b)||t.bc(b,"number or string",E,"setKeyForNodeData:key");if(null!==a){var c=this.jm;if(""!==c)if(this.ne(a)){var d=t.ib(a,c);d!==b&&null===this.uf(b)&&(t.Qa(a,c,b),this.Bc.remove(d),this.Bc.add(b,a),me(this,"nodeKey",vd,c,a,d,b),"string"===typeof c&&this.Kb(a,c),this.It(d,b))}else t.Qa(a,c,b)}};t.g(E,"makeUniqueKeyFunction",E.prototype.lJ);
t.defineProperty(E,{lJ:"makeUniqueKeyFunction"},function(){return this.bv},function(a){var b=this.bv;b!==a&&(null!==a&&t.i(a,"function",E,"makeUniqueKeyFunction"),this.bv=a,this.j("makeUniqueKeyFunction",b,a))});function oe(a){return"number"===typeof a||"string"===typeof a}E.prototype.containsNodeData=E.prototype.ne=function(a){a=this.Hb(a);return void 0===a?!1:this.Bc.contains(a)};
E.prototype.findNodeDataForKey=E.prototype.uf=function(a){null===a&&t.m("Model.findNodeDataForKey:key must not be null");return void 0!==a&&oe(a)?this.Bc.za(a):null};t.g(E,"nodeDataArray",E.prototype.Gg);
t.defineProperty(E,{Gg:"nodeDataArray"},function(){return this.Me},function(a){var b=this.Me;if(b!==a){t.Rs(a,E,"nodeDataArray");this.Zd&&t.zc&&(null!==b&&t.Ym(b,"nodeDataArray",this,!0),a=t.Ym(a,"nodeDataArray",this,!1));this.Bc.clear();this.mB();for(var c=t.ub(a),d=0;d<c;d++){var f=t.lb(a,d);if(!t.qb(f)){t.m("Model.nodeDataArray must only contain Objects, not: "+f);return}t.jt(f)}this.Me=a;for(var g=new B(Object),d=0;d<c;d++){var f=t.lb(a,d),h=this.Hb(f);void 0===h?g.add(f):null!==this.Bc.za(h)?
g.add(f):this.Bc.add(h,f)}for(d=g.k;d.next();)f=d.value,this.sF(f),g=this.Hb(f),this.Bc.add(g,f);me(this,"nodeDataArray",vd,"nodeDataArray",this,b,a);for(d=0;d<c;d++)f=t.lb(a,d),this.Mp(f),this.Lp(f);this.UD();t.YI(a)||(this.ab=!0)}});
E.prototype.makeNodeDataKeyUnique=E.prototype.sF=function(a){if(null!==a){var b=this.jm;if(""!==b){var c=this.Hb(a);if(void 0===c||this.Bc.contains(c)){var d=this.bv;if(null!==d&&(c=d(this,a),void 0!==c&&null!==c&&!this.Bc.contains(c))){t.Qa(a,b,c);return}if("string"===typeof c){for(d=2;this.Bc.contains(c+d);)d++;t.Qa(a,b,c+d)}else if(void 0===c||"number"===typeof c){for(d=-this.Bc.count-1;this.Bc.contains(d);)d--;t.Qa(a,b,d)}else t.m("Model.getKeyForNodeData returned something other than a string or a number: "+
c)}}}};E.prototype.addNodeData=E.prototype.Am=function(a){if(null!==a){this.Zd&&t.yf(a,this,!1);t.jt(a);var b=this.Hb(a);if(void 0===b||this.Bc.za(b)!==a)this.sF(a),b=this.Hb(a),this.Bc.add(b,a),b=t.ub(this.Me),t.Ti(this.Me,b,a),me(this,"nodeDataArray",wd,"nodeDataArray",this,null,a,null,b),this.Mp(a),this.Lp(a)}};E.prototype.addNodeDataCollection=function(a){if(t.isArray(a))for(var b=t.ub(a),c=0;c<b;c++)this.Am(t.lb(a,c));else for(a=a.k;a.next();)this.Am(a.value)};
E.prototype.removeNodeData=E.prototype.nx=function(a){if(null!==a){var b=this.Hb(a);void 0!==b&&this.Bc.contains(b)&&(this.Zd&&t.yf(a,this,!0),this.Bc.remove(b),b=t.Pz(this.Me,a),0>b||(t.Ui(this.Me,b),me(this,"nodeDataArray",xd,"nodeDataArray",this,a,null,b,null),this.Zt(a)))}};E.prototype.removeNodeDataCollection=function(a){if(t.isArray(a))for(var b=t.ub(a),c=0;c<b;c++)this.nx(t.lb(a,c));else for(a=a.k;a.next();)this.nx(a.value)};aa=E.prototype;
aa.It=function(a,b){var c=pe(this,a);c instanceof ma&&this.xh.add(b,c)};aa.mB=function(){};aa.Mp=function(){};aa.Lp=function(){};aa.Zt=function(){};function qe(a,b,c){if(void 0!==b){var d=a.xh.za(b);null===d&&(d=new ma,a.xh.add(b,d));d.add(c)}}function re(a,b,c){if(void 0!==b){var d=a.xh.za(b);d instanceof ma&&(void 0===c||null===c?a.xh.remove(b):(d.remove(c),0===d.count&&a.xh.remove(b)))}}function pe(a,b){if(void 0===b)return null;var c=a.xh.za(b);return c instanceof ma?c:null}
E.prototype.clearUnresolvedReferences=E.prototype.UD=function(a){void 0===a?this.xh.clear():this.xh.remove(a)};t.g(E,"copyNodeDataFunction",E.prototype.iI);t.defineProperty(E,{iI:"copyNodeDataFunction"},function(){return this.wu},function(a){var b=this.wu;b!==a&&(null!==a&&t.i(a,"function",E,"copyNodeDataFunction"),this.wu=a,this.j("copyNodeDataFunction",b,a))});t.g(E,"copiesArrays",E.prototype.rw);
t.defineProperty(E,{rw:"copiesArrays"},function(){return this.wy},function(a){var b=this.wy;b!==a&&(null!==a&&t.i(a,"boolean",E,"copiesArrays"),this.wy=a,this.j("copiesArrays",b,a))});t.g(E,"copiesArrayObjects",E.prototype.qw);t.defineProperty(E,{qw:"copiesArrayObjects"},function(){return this.vy},function(a){var b=this.vy;b!==a&&(null!==a&&t.i(a,"boolean",E,"copiesArrayObjects"),this.vy=a,this.j("copiesArrayObjects",b,a))});
E.prototype.copyNodeData=function(a){if(null===a)return null;var b=null,b=this.wu;if(null!==b)b=b(a,this);else{var b=new a.constructor,c;for(c in a){var d=t.ib(a,c);if((!e||!ze(a,c,d))&&this.rw&&Array.isArray(d)){for(var f=[],g=0;g<d.length;g++){var h=d[g];if(this.qw&&t.qb(h)){var k=new h.constructor,l;for(l in h){var m=t.ib(h,l);e&&ze(h,l,m);t.Qa(k,l,m)}h=k}f.push(h)}d=f}t.Qa(b,c,d)}this.Zd&&t.yf(b,this,!1)}b&&t.Ac(b);return b};
function ze(a,b,c){return c instanceof Q||c instanceof z||c instanceof $d||c instanceof Ae||c instanceof Be||c instanceof ae||c instanceof oa||c instanceof be||c instanceof ld||c instanceof rd?("_"!==b[0]&&t.trace("Warning: found GraphObject or Diagram reference when copying model data on property '"+b+"' of data object: "+a.toString()+"  \nModel data should not have any references to a Diagram or any part of a diagram, such as: "+c.toString()),!0):c instanceof E||c instanceof zd||c instanceof ce||
c instanceof td?!0:!1}
E.prototype.setDataProperty=function(a,b,c){e&&(t.i(a,"object",E,"setDataProperty:data"),t.i(b,"string",E,"setDataProperty:propname"),""===b&&t.m("Model.setDataProperty: property name must not be an empty string when setting "+a+" to "+c));if(this.ne(a))if(b===this.ij)this.aB(a,c);else{if(b===this.rl){this.sx(a,c);return}}else!t.Zp&&a instanceof Q&&(t.Zp=!0,t.trace('Model.setDataProperty is modifying a GraphObject, "'+a.toString()+'"'),t.trace("  Is that really your intent?"));var d=t.ib(a,b);d!==
c&&(t.Qa(a,b,c),this.mx(a,b,d,c))};E.prototype.addArrayItem=function(a,b){this.UI(a,-1,b)};E.prototype.insertArrayItem=E.prototype.UI=function(a,b,c){e&&(t.Rs(a,E,"insertArrayItem:arr"),t.q(b,E,"insertArrayItem:idx"));a===this.Me&&t.m("Model.insertArrayItem or Model.addArrayItem should not be called on the Model.nodeDataArray");0>b&&(b=t.ub(a));t.Ti(a,b,c);me(this,"",wd,"",a,null,c,null,b)};
E.prototype.removeArrayItem=function(a,b){void 0===b&&(b=-1);e&&(t.Rs(a,E,"removeArrayItem:arr"),t.q(b,E,"removeArrayItem:idx"));a===this.Me&&t.m("Model.removeArrayItem should not be called on the Model.nodeDataArray");-1===b&&(b=t.ub(a)-1);var c=t.lb(a,b);t.Ui(a,b);me(this,"",xd,"",a,c,null,b,null)};t.g(E,"nodeCategoryProperty",E.prototype.rl);
t.defineProperty(E,{rl:"nodeCategoryProperty"},function(){return this.Hr},function(a){var b=this.Hr;b!==a&&(ne(a,E,"nodeCategoryProperty"),this.Hr=a,this.j("nodeCategoryProperty",b,a))});E.prototype.getCategoryForNodeData=E.prototype.getCategoryForNodeData=function(a){if(null===a)return"";var b=this.Hr;if(""===b)return"";b=t.ib(a,b);if(void 0===b)return"";if("string"===typeof b)return b;t.m("getCategoryForNodeData found a non-string category for "+a+": "+b);return""};
E.prototype.setCategoryForNodeData=E.prototype.sx=function(a,b){t.i(b,"string",E,"setCategoryForNodeData:cat");if(null!==a){var c=this.Hr;if(""!==c)if(this.ne(a)){var d=t.ib(a,c);void 0===d&&(d="");d!==b&&(t.Qa(a,c,b),me(this,"nodeCategory",vd,c,a,d,b))}else t.Qa(a,c,b)}};
function M(a,b){2<arguments.length&&t.m("GraphLinksModel constructor can only take two optional arguments, the Array of node data and the Array of link data.");E.call(this);this.Xg=[];this.em=new ma(Object);this.xk=this.vu=null;this.xj="from";this.Aj="to";this.pr=this.or="";this.lr="category";this.Jh=this.pv="";this.ov="isGroup";this.Gj="group";this.xy=!1;void 0!==a&&(this.Gg=a);void 0!==b&&(this.hj=b)}t.ga("GraphLinksModel",M);t.Ka(M,E);
M.prototype.clear=M.prototype.clear=function(){E.prototype.clear.call(this);this.Zd&&t.Ym(this.Xg,"linkDataArray",this,!0);this.Xg=[];this.em.clear()};aa=M.prototype;aa.toString=function(a){void 0===a&&(a=0);if(2<=a)return this.iB();var b=(""!==this.name?this.name:"")+" GraphLinksModel";if(0<a){b+="\n node data:";a=this.Gg;var c=t.ub(a),d;for(d=0;d<c;d++)var f=t.lb(a,d),b=b+(" "+this.Hb(f)+":"+yd(f));b+="\n link data:";a=this.hj;c=t.ub(a);for(d=0;d<c;d++)f=t.lb(a,d),b+=" "+this.il(f)+"--\x3e"+this.ml(f)}return b};
aa.$t=function(){var a=E.prototype.$t.call(this),b="";"category"!==this.up&&"string"===typeof this.up&&(b+=',\n  "linkCategoryProperty": '+this.quote(this.up));"from"!==this.Zm&&"string"===typeof this.Zm&&(b+=',\n  "linkFromKeyProperty": '+this.quote(this.Zm));"to"!==this.$m&&"string"===typeof this.$m&&(b+=',\n  "linkToKeyProperty": '+this.quote(this.$m));""!==this.vp&&"string"===typeof this.vp&&(b+=',\n  "linkFromPortIdProperty": '+this.quote(this.vp));""!==this.zp&&"string"===typeof this.zp&&(b+=
',\n  "linkToPortIdProperty": '+this.quote(this.zp));""!==this.Ct&&"string"===typeof this.Ct&&(b+=',\n  "nodeIsLinkLabelProperty": '+this.quote(this.Ct));""!==this.wp&&"string"===typeof this.wp&&(b+=',\n  "linkLabelKeysProperty": '+this.quote(this.wp));"isGroup"!==this.Ip&&"string"===typeof this.Ip&&(b+=',\n  "nodeIsGroupProperty": '+this.quote(this.Ip));"group"!==this.en&&"string"===typeof this.en&&(b+=',\n  "nodeGroupKeyProperty": '+this.quote(this.en));return a+b};
aa.rB=function(){var a=E.prototype.rB.call(this),b=',\n  "linkDataArray": '+Cd(this,this.hj,!0);return a+b};
aa.Ht=function(a){E.prototype.Ht.call(this,a);a.linkFromKeyProperty&&(this.Zm=a.linkFromKeyProperty);a.linkToKeyProperty&&(this.$m=a.linkToKeyProperty);a.linkFromPortIdProperty&&(this.vp=a.linkFromPortIdProperty);a.linkToPortIdProperty&&(this.zp=a.linkToPortIdProperty);a.linkCategoryProperty&&(this.up=a.linkCategoryProperty);a.nodeIsLinkLabelProperty&&(this.Ct=a.nodeIsLinkLabelProperty);a.linkLabelKeysProperty&&(this.wp=a.linkLabelKeysProperty);a.nodeIsGroupProperty&&(this.Ip=a.nodeIsGroupProperty);
a.nodeGroupKeyProperty&&(this.en=a.nodeGroupKeyProperty)};aa.PA=function(a){E.prototype.PA.call(this,a);if(a=a.linkDataArray)this.Jt(a),this.hj=a};
M.prototype.changeState=function(a,b){if(a.td===wd){var c=null;"linkDataArray"===a.Af?c=this.Xg:"linkLabelKeys"===a.Af&&(c=this.kl(a.object));if(t.isArray(c)){b?(this.Zd&&t.qb(a.newValue)&&t.yf(a.newValue,this,!0),t.Ui(c,a.Wf)):(this.Zd&&t.qb(a.newValue)&&t.yf(a.newValue,this,!1),t.Ti(c,a.Wf,a.newValue));return}}else if(a.td===xd&&(c=null,"linkDataArray"===a.Af?c=this.Xg:"linkLabelKeys"===a.Af&&(c=this.kl(a.object)),t.isArray(c))){b?(this.Zd&&t.qb(a.oldValue)&&t.yf(a.oldValue,this,!1),t.Ti(c,a.Yf,
a.oldValue)):(this.Zd&&t.qb(a.oldValue)&&t.yf(a.oldValue,this,!0),t.Ui(c,a.Yf));return}E.prototype.changeState.call(this,a,b)};t.g(M,"archetypeNodeData",M.prototype.Os);t.defineProperty(M,{Os:"archetypeNodeData"},function(){return this.xk},function(a){var b=this.xk;b!==a&&(null!==a&&t.l(a,Object,M,"archetypeNodeData"),this.xk=a,this.j("archetypeNodeData",b,a))});
M.prototype.bn=function(a){if(void 0!==a){var b=this.xk;if(null!==b){var c=this.uf(a);null===c&&(c=this.copyNodeData(b),t.Qa(c,this.jm,a),this.Am(c))}return a}};t.g(M,"linkFromKeyProperty",M.prototype.Zm);t.defineProperty(M,{Zm:"linkFromKeyProperty"},function(){return this.xj},function(a){var b=this.xj;b!==a&&(ne(a,M,"linkFromKeyProperty"),this.xj=a,this.j("linkFromKeyProperty",b,a))});
M.prototype.getFromKeyForLinkData=M.prototype.il=function(a){if(null!==a){var b=this.xj;if(""!==b&&(b=t.ib(a,b),void 0!==b)){if(oe(b))return b;t.m("FromKey value for link data "+a+" is not a number or a string: "+b)}}};
M.prototype.setFromKeyForLinkData=M.prototype.ux=function(a,b){null===b&&(b=void 0);void 0===b||oe(b)||t.bc(b,"number or string",M,"setFromKeyForLinkData:key");if(null!==a){var c=this.xj;if(""!==c)if(b=this.bn(b),this.Yi(a)){var d=t.ib(a,c);d!==b&&(re(this,d,a),t.Qa(a,c,b),null===this.uf(b)&&qe(this,b,a),me(this,"linkFromKey",vd,c,a,d,b),"string"===typeof c&&this.Kb(a,c))}else t.Qa(a,c,b)}};t.g(M,"linkToKeyProperty",M.prototype.$m);
t.defineProperty(M,{$m:"linkToKeyProperty"},function(){return this.Aj},function(a){var b=this.Aj;b!==a&&(ne(a,M,"linkToKeyProperty"),this.Aj=a,this.j("linkToKeyProperty",b,a))});M.prototype.getToKeyForLinkData=M.prototype.ml=function(a){if(null!==a){var b=this.Aj;if(""!==b&&(b=t.ib(a,b),void 0!==b)){if(oe(b))return b;t.m("ToKey value for link data "+a+" is not a number or a string: "+b)}}};
M.prototype.setToKeyForLinkData=M.prototype.wx=function(a,b){null===b&&(b=void 0);void 0===b||oe(b)||t.bc(b,"number or string",M,"setToKeyForLinkData:key");if(null!==a){var c=this.Aj;if(""!==c)if(b=this.bn(b),this.Yi(a)){var d=t.ib(a,c);d!==b&&(re(this,d,a),t.Qa(a,c,b),null===this.uf(b)&&qe(this,b,a),me(this,"linkToKey",vd,c,a,d,b),"string"===typeof c&&this.Kb(a,c))}else t.Qa(a,c,b)}};t.g(M,"linkFromPortIdProperty",M.prototype.vp);
t.defineProperty(M,{vp:"linkFromPortIdProperty"},function(){return this.or},function(a){var b=this.or;b!==a&&(ne(a,M,"linkFromPortIdProperty"),this.or=a,this.j("linkFromPortIdProperty",b,a))});M.prototype.getFromPortIdForLinkData=M.prototype.HI=function(a){if(null===a)return"";var b=this.or;if(""===b)return"";a=t.ib(a,b);return void 0===a?"":a};
M.prototype.setFromPortIdForLinkData=M.prototype.$A=function(a,b){t.i(b,"string",M,"setFromPortIdForLinkData:portname");if(null!==a){var c=this.or;if(""!==c)if(this.Yi(a)){var d=t.ib(a,c);void 0===d&&(d="");d!==b&&(t.Qa(a,c,b),me(this,"linkFromPortId",vd,c,a,d,b),"string"===typeof c&&this.Kb(a,c))}else t.Qa(a,c,b)}};t.g(M,"linkToPortIdProperty",M.prototype.zp);
t.defineProperty(M,{zp:"linkToPortIdProperty"},function(){return this.pr},function(a){var b=this.pr;b!==a&&(ne(a,M,"linkToPortIdProperty"),this.pr=a,this.j("linkToPortIdProperty",b,a))});M.prototype.getToPortIdForLinkData=M.prototype.KI=function(a){if(null===a)return"";var b=this.pr;if(""===b)return"";a=t.ib(a,b);return void 0===a?"":a};
M.prototype.setToPortIdForLinkData=M.prototype.cB=function(a,b){t.i(b,"string",M,"setToPortIdForLinkData:portname");if(null!==a){var c=this.pr;if(""!==c)if(this.Yi(a)){var d=t.ib(a,c);void 0===d&&(d="");d!==b&&(t.Qa(a,c,b),me(this,"linkToPortId",vd,c,a,d,b),"string"===typeof c&&this.Kb(a,c))}else t.Qa(a,c,b)}};t.g(M,"nodeIsLinkLabelProperty",M.prototype.Ct);
t.defineProperty(M,{Ct:"nodeIsLinkLabelProperty"},function(){return this.pv},function(a){var b=this.pv;b!==a&&(ne(a,M,"nodeIsLinkLabelProperty"),this.pv=a,this.j("nodeIsLinkLabelProperty",b,a))});M.prototype.isLinkLabelForNodeData=M.prototype.XI=function(a){if(null===a)return!1;var b=this.pv;return""===b?!1:t.ib(a,b)?!0:!1};t.g(M,"linkLabelKeysProperty",M.prototype.wp);
t.defineProperty(M,{wp:"linkLabelKeysProperty"},function(){return this.Jh},function(a){var b=this.Jh;b!==a&&(ne(a,M,"linkLabelKeysProperty"),this.Jh=a,this.j("linkLabelKeysProperty",b,a))});M.prototype.getLabelKeysForLinkData=M.prototype.kl=function(a){if(null===a)return t.ji;var b=this.Jh;if(""===b)return t.ji;a=t.ib(a,b);return void 0===a?t.ji:a};
M.prototype.setLabelKeysForLinkData=M.prototype.mG=function(a,b){t.Rs(b,M,"setLabelKeysForLinkData:arr");if(null!==a){var c=this.Jh;if(""!==c)if(this.Yi(a)){var d=t.ib(a,c);void 0===d&&(d=t.ji);if(d!==b){for(var f=t.ub(d),g=0;g<f;g++){var h=t.lb(d,g);re(this,h,a)}t.Qa(a,c,b);f=t.ub(b);for(g=0;g<f;g++)h=t.lb(b,g),null===this.uf(h)&&qe(this,h,a);me(this,"linkLabelKeys",vd,c,a,d,b);"string"===typeof c&&this.Kb(a,c)}}else t.Qa(a,c,b)}};
M.prototype.addLabelKeyForLinkData=M.prototype.GD=function(a,b){if(null!==b&&void 0!==b&&(oe(b)||t.bc(b,"number or string",M,"addLabelKeyForLinkData:key"),null!==a)){var c=this.Jh;if(""!==c){var d=t.ib(a,c);void 0===d?this.mG(a,[b]):t.isArray(d)?0<=t.Pz(d,b)||(t.Ti(d,Infinity,b),this.Yi(a)&&(null===this.uf(b)&&qe(this,b,a),me(this,"linkLabelKeys",wd,c,a,null,b))):t.m(c+" property is not an Array; cannot addLabelKeyForLinkData: "+a)}}};
M.prototype.removeLabelKeyForLinkData=M.prototype.IJ=function(a,b){if(null!==b&&void 0!==b&&(oe(b)||t.bc(b,"number or string",M,"removeLabelKeyForLinkData:key"),null!==a)){var c=this.Jh;if(""!==c){var d=t.ib(a,c);if(t.isArray(d)){var f=t.Pz(d,b);0>f||(t.Ui(d,f),this.Yi(a)&&(re(this,b,a),me(this,"linkLabelKeys",xd,c,a,b,null)))}else void 0!==d&&t.m(c+" property is not an Array; cannot removeLabelKeyforLinkData: "+a)}}};t.g(M,"linkDataArray",M.prototype.hj);
t.defineProperty(M,{hj:"linkDataArray"},function(){return this.Xg},function(a){var b=this.Xg;if(b!==a){t.Rs(a,M,"linkDataArray");this.Zd&&t.zc&&(null!==b&&t.Ym(b,"linkDataArray",this,!0),a=t.Ym(a,"linkDataArray",this,!1));for(var c=t.ub(a),d=0;d<c;d++){var f=t.lb(a,d);if(!t.qb(f)){t.m("GraphLinksModel.linkDataArray must only contain Objects, not: "+f);return}t.jt(f)}this.Xg=a;for(var g=new ma(Object),d=0;d<c;d++)f=t.lb(a,d),g.add(f);this.em=g;me(this,"linkDataArray",vd,"linkDataArray",this,b,a);for(d=
0;d<c;d++)f=t.lb(a,d),Ce(this,f)}});M.prototype.containsLinkData=M.prototype.Yi=function(a){return null===a?!1:this.em.contains(a)};M.prototype.addLinkData=M.prototype.aw=function(a){if(null!==a){this.Zd&&t.yf(a,this,!1);if(void 0===t.od(a))t.Ac(a);else if(this.Yi(a))return;this.em.add(a);var b=t.ub(this.Xg);t.Ti(this.Xg,b,a);me(this,"linkDataArray",wd,"linkDataArray",this,null,a,null,b);Ce(this,a)}};
M.prototype.addLinkDataCollection=function(a){if(t.isArray(a))for(var b=t.ub(a),c=0;c<b;c++)this.aw(t.lb(a,c));else for(a=a.k;a.next();)this.aw(a.value)};
M.prototype.removeLinkData=M.prototype.UA=function(a){if(null!==a){this.Zd&&t.yf(a,this,!0);this.em.remove(a);var b=this.Xg.indexOf(a);if(!(0>b)){t.Ui(this.Xg,b);me(this,"linkDataArray",xd,"linkDataArray",this,a,null,b,null);b=this.il(a);re(this,b,a);b=this.ml(a);re(this,b,a);var c=this.kl(a);if(t.isArray(c))for(var d=t.ub(c),f=0;f<d;f++)b=t.lb(c,f),re(this,b,a)}}};M.prototype.removeLinkDataCollection=function(a){if(t.isArray(a))for(var b=t.ub(a),c=0;c<b;c++)this.UA(t.lb(a,c));else for(a=a.k;a.next();)this.UA(a.value)};
function Ce(a,b){var c=a.il(b),c=a.bn(c);null===a.uf(c)&&qe(a,c,b);c=a.ml(b);c=a.bn(c);null===a.uf(c)&&qe(a,c,b);var d=a.kl(b);if(t.isArray(d))for(var f=t.ub(d),g=0;g<f;g++)c=t.lb(d,g),null===a.uf(c)&&qe(a,c,b)}t.g(M,"copyLinkDataFunction",M.prototype.hI);t.defineProperty(M,{hI:"copyLinkDataFunction"},function(){return this.vu},function(a){var b=this.vu;b!==a&&(null!==a&&t.i(a,"function",M,"copyLinkDataFunction"),this.vu=a,this.j("copyLinkDataFunction",b,a))});
M.prototype.copyLinkData=M.prototype.eE=function(a){if(null===a)return null;var b=null,b=this.vu;if(null!==b)b=b(a,this);else{var b=new a.constructor,c;for(c in a){var d=t.ib(a,c);e&&ze(a,c,d);t.Qa(b,c,d)}this.Zd&&t.yf(b,this,!1)}b&&(t.Ac(b),""!==this.xj&&t.Qa(b,this.xj,void 0),""!==this.Aj&&t.Qa(b,this.Aj,void 0),""!==this.Jh&&t.Qa(b,this.Jh,[]));return b};t.g(M,"nodeIsGroupProperty",M.prototype.Ip);
t.defineProperty(M,{Ip:"nodeIsGroupProperty"},function(){return this.ov},function(a){var b=this.ov;b!==a&&(ne(a,M,"nodeIsGroupProperty"),this.ov=a,this.j("nodeIsGroupProperty",b,a))});M.prototype.isGroupForNodeData=M.prototype.sA=function(a){if(null===a)return!1;var b=this.ov;return""===b?!1:t.ib(a,b)?!0:!1};t.g(M,"nodeGroupKeyProperty",M.prototype.en);
t.defineProperty(M,{en:"nodeGroupKeyProperty"},function(){return this.Gj},function(a){var b=this.Gj;b!==a&&(ne(a,M,"nodeGroupKeyProperty"),this.Gj=a,this.j("nodeGroupKeyProperty",b,a))});t.g(M,"copiesGroupKeyOfNodeData",M.prototype.bl);t.defineProperty(M,{bl:"copiesGroupKeyOfNodeData"},function(){return this.xy},function(a){this.xy!==a&&(t.i(a,"boolean",M,"copiesGroupKeyOfNodeData"),this.xy=a)});
M.prototype.getGroupKeyForNodeData=M.prototype.Sm=function(a){if(null!==a){var b=this.Gj;if(""!==b&&(b=t.ib(a,b),void 0!==b)){if(oe(b))return b;t.m("GroupKey value for node data "+a+" is not a number or a string: "+b)}}};
M.prototype.setGroupKeyForNodeData=M.prototype.vx=function(a,b){null===b&&(b=void 0);void 0===b||oe(b)||t.bc(b,"number or string",M,"setGroupKeyForNodeData:key");if(null!==a){var c=this.Gj;if(""!==c)if(this.ne(a)){var d=t.ib(a,c);d!==b&&(re(this,d,a),t.Qa(a,c,b),null===this.uf(b)&&qe(this,b,a),me(this,"nodeGroupKey",vd,c,a,d,b),"string"===typeof c&&this.Kb(a,c))}else t.Qa(a,c,b)}};
M.prototype.copyNodeData=function(a){if(null===a)return null;a=E.prototype.copyNodeData.call(this,a);this.bl||""===this.Gj||t.Qa(a,this.Gj,void 0);return a};
M.prototype.setDataProperty=function(a,b,c){e&&(t.i(a,"object",M,"setDataProperty:data"),t.i(b,"string",M,"setDataProperty:propname"),""===b&&t.m("GraphLinksModel.setDataProperty: property name must not be an empty string when setting "+a+" to "+c));if(this.ne(a))if(b===this.ij)this.aB(a,c);else{if(b===this.rl){this.sx(a,c);return}if(b===this.en){this.vx(a,c);return}b===this.Ip&&t.m("GraphLinksModel.setDataProperty: property name must not be the nodeIsGroupProperty: "+b)}else if(this.Yi(a)){if(b===
this.Zm){this.ux(a,c);return}if(b===this.$m){this.wx(a,c);return}if(b===this.vp){this.$A(a,c);return}if(b===this.zp){this.cB(a,c);return}if(b===this.up){this.lG(a,c);return}if(b===this.wp){this.mG(a,c);return}}else!t.Zp&&a instanceof Q&&(t.Zp=!0,t.trace('GraphLinksModel.setDataProperty is modifying a GraphObject, "'+a.toString()+'"'),t.trace("  Is that really your intent?"));var d=t.ib(a,b);d!==c&&(t.Qa(a,b,c),this.mx(a,b,d,c))};aa=M.prototype;
aa.It=function(a,b){E.prototype.It.call(this,a,b);for(var c=this.Bc.k;c.next();)this.WA(c.value,a,b);for(c=this.em.k;c.next();){var d=c.value,f=a,g=b;if(this.il(d)===f){var h=this.xj;t.Qa(d,h,g);me(this,"linkFromKey",vd,h,d,f,g);"string"===typeof h&&this.Kb(d,h)}this.ml(d)===f&&(h=this.Aj,t.Qa(d,h,g),me(this,"linkToKey",vd,h,d,f,g),"string"===typeof h&&this.Kb(d,h));var k=this.kl(d);if(t.isArray(k))for(var l=t.ub(k),h=this.Jh,m=0;m<l;m++)t.lb(k,m)===f&&(t.MD(k,m,g),me(this,"linkLabelKeys",wd,h,d,
f,g))}};aa.WA=function(a,b,c){if(this.Sm(a)===b){var d=this.Gj;t.Qa(a,d,c);me(this,"nodeGroupKey",vd,d,a,b,c);"string"===typeof d&&this.Kb(a,d)}};aa.mB=function(){E.prototype.mB.call(this);for(var a=this.hj,b=t.ub(a),c=0;c<b;c++){var d=t.lb(a,c);Ce(this,d)}};
aa.Mp=function(a){E.prototype.Mp.call(this,a);a=this.Hb(a);var b=pe(this,a);if(null!==b){for(var c=new B(Object),b=b.k;b.next();){var d=b.value;if(this.ne(d)){if(this.Sm(d)===a){var f=this.Gj;me(this,"nodeGroupKey",vd,f,d,a,a);"string"===typeof f&&this.Kb(d,f);c.add(d)}}else{this.il(d)===a&&(f=this.xj,me(this,"linkFromKey",vd,f,d,a,a),"string"===typeof f&&this.Kb(d,f),c.add(d));this.ml(d)===a&&(f=this.Aj,me(this,"linkToKey",vd,f,d,a,a),"string"===typeof f&&this.Kb(d,f),c.add(d));var g=this.kl(d);
if(t.isArray(g))for(var h=t.ub(g),f=this.Jh,k=0;k<h;k++)t.lb(g,k)===a&&(me(this,"linkLabelKeys",wd,f,d,a,a),c.add(d))}}for(c=c.k;c.next();)re(this,a,c.value)}};aa.Lp=function(a){E.prototype.Lp.call(this,a);var b=this.Sm(a);null===this.uf(b)&&qe(this,b,a)};aa.Zt=function(a){E.prototype.Zt.call(this,a);var b=this.Sm(a);re(this,b,a)};t.g(M,"linkCategoryProperty",M.prototype.up);
t.defineProperty(M,{up:"linkCategoryProperty"},function(){return this.lr},function(a){var b=this.lr;b!==a&&(ne(a,M,"linkCategoryProperty"),this.lr=a,this.j("linkCategoryProperty",b,a))});M.prototype.getCategoryForLinkData=M.prototype.getCategoryForLinkData=function(a){if(null===a)return"";var b=this.lr;if(""===b)return"";b=t.ib(a,b);if(void 0===b)return"";if("string"===typeof b)return b;t.m("getCategoryForLinkData found a non-string category for "+a+": "+b);return""};
M.prototype.setCategoryForLinkData=M.prototype.lG=function(a,b){t.i(b,"string",M,"setCategoryForLinkData:cat");if(null!==a){var c=this.lr;if(""===c)return"";if(this.Yi(a)){var d=t.ib(a,c);void 0===d&&(d="");d!==b&&(t.Qa(a,c,b),me(this,"linkCategory",vd,c,a,d,b),"string"===typeof c&&this.Kb(a,c))}else t.Qa(a,c,b)}};
function Kd(a){1<arguments.length&&t.m("TreeModel constructor can only take one optional argument, the Array of node data.");E.call(this);this.Hj="parent";this.yy=!1;this.Lr="parentLinkCategory";void 0!==a&&(this.Gg=a)}t.ga("TreeModel",Kd);t.Ka(Kd,E);Kd.prototype.toString=function(a){void 0===a&&(a=0);if(2<=a)return this.iB();var b=(""!==this.name?this.name:"")+" TreeModel";if(0<a){b+="\n node data:";a=this.Gg;var c=t.ub(a),d;for(d=0;d<c;d++)var f=t.lb(a,d),b=b+(" "+this.Hb(f)+":"+yd(f))}return b};
Kd.prototype.$t=function(){var a=E.prototype.$t.call(this),b="";"parent"!==this.fn&&"string"===typeof this.fn&&(b+=',\n  "nodeParentKeyProperty": '+this.quote(this.fn));return a+b};Kd.prototype.Ht=function(a){E.prototype.Ht.call(this,a);a.nodeParentKeyProperty&&(this.fn=a.nodeParentKeyProperty)};Kd.prototype.bn=function(a){return a};t.g(Kd,"nodeParentKeyProperty",Kd.prototype.fn);
t.defineProperty(Kd,{fn:"nodeParentKeyProperty"},function(){return this.Hj},function(a){var b=this.Hj;b!==a&&(ne(a,Kd,"nodeParentKeyProperty"),this.Hj=a,this.j("nodeParentKeyProperty",b,a))});t.g(Kd,"copiesParentKeyOfNodeData",Kd.prototype.cl);t.defineProperty(Kd,{cl:"copiesParentKeyOfNodeData"},function(){return this.yy},function(a){this.yy!==a&&(t.i(a,"boolean",Kd,"copiesParentKeyOfNodeData"),this.yy=a)});
Kd.prototype.getParentKeyForNodeData=Kd.prototype.Tm=function(a){if(null!==a){var b=this.Hj;if(""!==b&&(b=t.ib(a,b),void 0!==b)){if(oe(b))return b;t.m("ParentKey value for node data "+a+" is not a number or a string: "+b)}}};
Kd.prototype.setParentKeyForNodeData=Kd.prototype.lh=function(a,b){null===b&&(b=void 0);void 0===b||oe(b)||t.bc(b,"number or string",Kd,"setParentKeyForNodeData:key");if(null!==a){var c=this.Hj;if(""!==c)if(b=this.bn(b),this.ne(a)){var d=t.ib(a,c);d!==b&&(re(this,d,a),t.Qa(a,c,b),null===this.uf(b)&&qe(this,b,a),me(this,"nodeParentKey",vd,c,a,d,b),"string"===typeof c&&this.Kb(a,c))}else t.Qa(a,c,b)}};t.g(Kd,"parentLinkCategoryProperty",Kd.prototype.CJ);
t.defineProperty(Kd,{CJ:"parentLinkCategoryProperty"},function(){return this.Lr},function(a){var b=this.Lr;b!==a&&(ne(a,Kd,"parentLinkCategoryProperty"),this.Lr=a,this.j("parentLinkCategoryProperty",b,a))});Kd.prototype.getParentLinkCategoryForNodeData=Kd.prototype.JI=function(a){if(null===a)return"";var b=this.Lr;if(""===b)return"";b=t.ib(a,b);if(void 0===b)return"";if("string"===typeof b)return b;t.m("getParentLinkCategoryForNodeData found a non-string category for "+a+": "+b);return""};
Kd.prototype.setParentLinkCategoryForNodeData=Kd.prototype.OJ=function(a,b){t.i(b,"string",Kd,"setParentLinkCategoryForNodeData:cat");if(null!==a){var c=this.Lr;if(""===c)return"";if(this.ne(a)){var d=t.ib(a,c);void 0===d&&(d="");d!==b&&(t.Qa(a,c,b),me(this,"parentLinkCategory",vd,c,a,d,b),"string"===typeof c&&this.Kb(a,c))}else t.Qa(a,c,b)}};Kd.prototype.copyNodeData=function(a){if(null===a)return null;a=E.prototype.copyNodeData.call(this,a);this.cl||""===this.Hj||t.Qa(a,this.Hj,void 0);return a};
Kd.prototype.setDataProperty=function(a,b,c){e&&(t.i(a,"object",Kd,"setDataProperty:data"),t.i(b,"string",Kd,"setDataProperty:propname"),""===b&&t.m("TreeModel.setDataProperty: property name must not be an empty string when setting "+a+" to "+c));if(this.ne(a))if(b===this.ij)this.aB(a,c);else{if(b===this.rl){this.sx(a,c);return}if(b===this.fn){this.lh(a,c);return}}else!t.Zp&&a instanceof Q&&(t.Zp=!0,t.trace('TreeModel.setDataProperty is modifying a GraphObject, "'+a.toString()+'"'),t.trace("  Is that really your intent?"));
var d=t.ib(a,b);d!==c&&(t.Qa(a,b,c),this.mx(a,b,d,c))};aa=Kd.prototype;aa.It=function(a,b){E.prototype.It.call(this,a,b);for(var c=this.Bc.k;c.next();)this.WA(c.value,a,b)};aa.WA=function(a,b,c){if(this.Tm(a)===b){var d=this.Hj;t.Qa(a,d,c);me(this,"nodeParentKey",vd,d,a,b,c);"string"===typeof d&&this.Kb(a,d)}};
aa.Mp=function(a){E.prototype.Mp.call(this,a);a=this.Hb(a);var b=pe(this,a);if(null!==b){for(var c=new B(Object),b=b.k;b.next();){var d=b.value;if(this.ne(d)&&this.Tm(d)===a){var f=this.Hj;me(this,"nodeParentKey",vd,f,d,a,a);"string"===typeof f&&this.Kb(d,f);c.add(d)}}for(c=c.k;c.next();)re(this,a,c.value)}};aa.Lp=function(a){E.prototype.Lp.call(this,a);var b=this.Tm(a),b=this.bn(b);null===this.uf(b)&&qe(this,b,a)};aa.Zt=function(a){E.prototype.Zt.call(this,a);var b=this.Tm(a);re(this,b,a)};
function De(a,b,c){t.Ac(this);void 0===a?a="":t.i(a,"string",De,"constructor:targetprop");void 0===b?b=a:t.i(b,"string",De,"constructor:sourceprop");void 0===c?c=null:null!==c&&t.i(c,"function",De,"constructor:conv");this.kD="";this.pg=null;this.Sv=a;this.Qv=this.xz=0;this.fD=null;this.Kv=b;this.uy=c;this.gz=Ee;this.my=null}t.ga("Binding",De);var Ee;De.OneWay=Ee=t.w(De,"OneWay",1);var Fe;De.TwoWay=Fe=t.w(De,"TwoWay",2);
De.parseEnum=function(a,b){t.i(a,"function",De,"parseEnum:ctor");t.Aa(b,a,De,"parseEnum:defval");return function(c){return t.Pm(a,c)||b}};var yd;De.toString=yd=function(a){var b=a;t.qb(a)&&(a.text?b=a.text:a.name?b=a.name:void 0!==a.key?b=a.key:void 0!==a.id?b=a.id:a.constructor===Object&&(a.Text?b=a.Text:a.Name?b=a.Name:void 0!==a.Key?b=a.Key:void 0!==a.Id?b=a.Id:void 0!==a.ID&&(b=a.ID)));return void 0===b?"undefined":null===b?"null":b.toString()};
De.prototype.toString=function(){return"Binding("+this.nn+" "+this.Wt+":"+this.eB+")"};De.prototype.freeze=function(){this.nb=!0;return this};De.prototype.Ma=function(){this.nb=!1;return this};t.g(De,"targetId",De.prototype.nn);t.defineProperty(De,{nn:null},function(){return this.kD},function(a){t.L(this);t.i(a,"string",De,"targetId");this.kD=a});t.g(De,"targetProperty",De.prototype.Wt);
t.defineProperty(De,{Wt:"targetProperty"},function(){return this.Sv},function(a){t.L(this);t.i(a,"string",De,"targetProperty");this.Sv=a});t.g(De,"sourceName",De.prototype.Ut);t.defineProperty(De,{Ut:"sourceName"},function(){return this.fD},function(a){t.L(this);t.i(a,"string",De,"sourceName");this.fD=a});t.g(De,"sourceProperty",De.prototype.eB);t.defineProperty(De,{eB:"sourceProperty"},function(){return this.Kv},function(a){t.L(this);t.i(a,"string",De,"sourceProperty");this.Kv=a});
t.g(De,"converter",De.prototype.bE);t.defineProperty(De,{bE:"converter"},function(){return this.uy},function(a){t.L(this);null!==a&&t.i(a,"function",De,"converter");this.uy=a});t.g(De,"backConverter",De.prototype.QD);t.defineProperty(De,{QD:"backConverter"},function(){return this.my},function(a){t.L(this);null!==a&&t.i(a,"function",De,"backConverter");this.my=a});t.g(De,"mode",De.prototype.mode);
t.defineProperty(De,{mode:"mode"},function(){return this.gz},function(a){t.L(this);t.Aa(a,De,De,"mode");this.gz=a});De.prototype.makeTwoWay=function(a){void 0===a&&(a=null);null!==a&&t.i(a,"function",De,"makeTwoWay");this.mode=Fe;this.QD=a;return this};De.prototype.ofObject=De.prototype.JA=function(a){void 0===a&&(a="");e&&t.i(a,"string",De,"ofObject:srcname");this.Ut=a;return this};
De.prototype.updateTarget=De.prototype.PG=function(a,b,c){var d=this.Kv;if(!c||d===c){c=this.Sv;var f=this.uy;if(null===f&&""===c)t.trace("Binding error: target property is the empty string: "+this.toString());else{e&&"string"===typeof c&&("function"!==typeof a.setAttribute&&0<c.length&&"_"!==c[0]&&!t.Jw(a,c)?t.trace("Binding error: undefined target property: "+c+" on "+a.toString()):"name"===c&&a instanceof Q&&t.trace("Binding error: cannot modify GraphObject.name on "+a.toString()));var g=b;""!==
d&&(g=t.ib(b,d));if(void 0!==g)if(null===f)""!==c&&t.Qa(a,c,g);else try{if(""!==c){var h=f(g,a);e&&void 0===h&&t.trace('Binding warning: conversion function returned undefined when setting target property "'+c+'" on '+a.toString()+", function is: "+f);t.Qa(a,c,h)}else f(g,a)}catch(k){e&&t.trace("Binding error: "+k.toString()+' setting target property "'+c+'" on '+a.toString()+" with conversion function: "+f)}}}};
De.prototype.updateSource=De.prototype.nB=function(a,b,c,d){if(this.gz===Fe){var f=this.Sv;if(!c||f===c){c=this.Kv;var g=this.my;if(null!==g||""!==c){var h=a;""!==f&&(h=t.ib(a,f));if(void 0!==h)if(null===g)d&&d.ba?(e&&d.ba.ij===c&&d.ba.ne(b)&&t.trace("Binding error: cannot have TwoWay Binding on node data key property: "+this.toString()),d.ba.setDataProperty(b,c,h)):t.Qa(b,c,h);else try{if(""!==c){var k=g(h,b);d&&d.ba?(e&&(d.ba.ij===c&&d.ba.ne(b)&&t.trace("Binding error: cannot have TwoWay Binding on node data key property: "+
this.toString()),void 0===k&&t.trace('Binding warning: conversion function returned undefined when setting source property "'+c+'" on '+b.toString()+", function is: "+g)),d.ba.setDataProperty(b,c,k)):t.Qa(b,c,k)}else g(h,b)}catch(l){e&&t.trace("Binding error: "+l.toString()+' setting source property "'+c+'" on '+b.toString()+" with conversion function: "+g)}}}}};function ce(){this.iH=(new B(td)).freeze();this.Zb="";this.nC=!1}t.ga("Transaction",ce);
ce.prototype.toString=function(a){var b="Transaction: "+this.name+" "+this.dh.count.toString()+(this.op?"":", incomplete");if(void 0!==a&&0<a)for(var c=this.dh.count,d=0;d<c;d++){var f=this.dh.wa(d);null!==f&&(b+="\n  "+f.toString(a-1))}return b};ce.prototype.clear=ce.prototype.clear=function(){var a=this.dh;a.Ma();for(var b=a.count-1;0<=b;b--){var c=a.wa(b);null!==c&&c.clear()}a.clear();a.freeze()};ce.prototype.canUndo=ce.prototype.canUndo=function(){return this.op};
ce.prototype.undo=ce.prototype.undo=function(){if(this.canUndo())for(var a=this.dh.count-1;0<=a;a--){var b=this.dh.wa(a);null!==b&&b.undo()}};ce.prototype.canRedo=ce.prototype.canRedo=function(){return this.op};ce.prototype.redo=ce.prototype.redo=function(){if(this.canRedo())for(var a=this.dh.count,b=0;b<a;b++){var c=this.dh.wa(b);null!==c&&c.redo()}};t.A(ce,{dh:"changes"},function(){return this.iH});t.g(ce,"name",ce.prototype.name);
t.defineProperty(ce,{name:"name"},function(){return this.Zb},function(a){this.Zb=a});t.g(ce,"isComplete",ce.prototype.op);t.defineProperty(ce,{op:"isComplete"},function(){return this.nC},function(a){this.nC=a});function zd(){this.iz=new ma(E);this.Le=!1;this.oH=(new B(ce)).freeze();this.Ug=-1;this.CC=999;this.xi=!1;this.Bu=null;this.Vk=0;this.ny=!1;e&&(this.ny=!0);this.$g=(new B("string")).freeze();this.ro=new B("number");this.Ry=!0;this.cz=!1}t.ga("UndoManager",zd);
zd.prototype.toString=function(a){for(var b="UndoManager "+this.cj+"<"+this.history.count+"<="+this.AA,b=b+"[",c=this.EF.count,d=0;d<c;d++)0<d&&(b+=" "),b+=this.EF.wa(d);b+="]";if(void 0!==a&&0<a)for(c=this.history.count,d=0;d<c;d++)b+="\n "+this.history.wa(d).toString(a-1);return b};
zd.prototype.clear=zd.prototype.clear=function(){var a=this.history;a.Ma();for(var b=a.count-1;0<=b;b--){var c=a.wa(b);null!==c&&c.clear()}a.clear();this.Ug=-1;a.freeze();this.xi=!1;this.Bu=null;this.Vk=0;this.$g.Ma();this.$g.clear();this.$g.freeze();this.ro.clear()};zd.prototype.addModel=zd.prototype.EH=function(a){this.iz.add(a)};zd.prototype.removeModel=zd.prototype.JJ=function(a){this.iz.remove(a)};
zd.prototype.startTransaction=zd.prototype.uc=function(a){void 0===a&&(a="");null===a&&(a="");if(this.vb)return!1;!0===this.Ry&&(this.Ry=!1,this.Vk++,this.Xc("StartingFirstTransaction",a,this.Zi),0<this.Vk&&this.Vk--);this.isEnabled&&(this.$g.Ma(),this.$g.add(a),this.$g.freeze(),null===this.Zi?this.ro.add(0):this.ro.add(this.Zi.dh.count));this.Vk++;var b=1===this.Je;b&&this.Xc("StartedTransaction",a,this.Zi);return b};zd.prototype.commitTransaction=zd.prototype.Ce=function(a){return Ge(this,!0,a)};
zd.prototype.rollbackTransaction=zd.prototype.Np=function(){return Ge(this,!1,"")};
function Ge(a,b,c){if(a.vb)return!1;a.Tz&&1>a.Je&&t.trace("Ending transaction without having started a transaction: "+c);var d=1===a.Je;d&&b&&a.isEnabled&&a.Xc("CommittingTransaction",c,a.Zi);var f=0;if(0<a.Je&&(a.Vk--,a.isEnabled)){var g=a.$g.count;0<g&&(""===c&&(c=a.$g.wa(0)),a.$g.Ma(),a.$g.qd(g-1),a.$g.freeze());g=a.ro.count;0<g&&(f=a.ro.wa(g-1),a.ro.qd(g-1))}g=a.Zi;if(d){if(b){a.cz=!1;if(a.isEnabled&&null!==g){b=g;b.op=!0;b.name=c;d=a.history;d.Ma();for(f=d.count-1;f>a.cj;f--)g=d.wa(f),null!==
g&&g.clear(),d.qd(f),a.cz=!0;f=a.AA;0===f&&(f=1);0<f&&d.count>=f&&(g=d.wa(0),null!==g&&g.clear(),d.qd(0),a.Ug--);d.add(b);a.Ug++;d.freeze();g=b}a.Xc("CommittedTransaction",c,g)}else{a.xi=!0;try{a.isEnabled&&null!==g&&(g.op=!0,g.undo())}finally{a.Xc("RolledBackTransaction",c,g),a.xi=!1}null!==g&&g.clear()}a.Bu=null;return!0}if(a.isEnabled&&!b&&null!==g){a=f;c=g.dh;for(b=c.count-1;b>=a;b--)d=c.wa(b),null!==d&&d.undo(),c.Ma(),c.qd(b);c.freeze()}return!1}
zd.prototype.canUndo=zd.prototype.canUndo=function(){if(!this.isEnabled||0<this.Je||this.vb)return!1;var a=this.HG;return null!==a&&a.canUndo()?!0:!1};zd.prototype.undo=zd.prototype.undo=function(){if(this.canUndo()){var a=this.HG;try{this.Xc("StartingUndo","Undo",a),this.xi=!0,this.Ug--,a.undo()}catch(b){t.trace("undo error: "+b.toString())}finally{this.xi=!1,this.Xc("FinishedUndo","Undo",a)}}};
zd.prototype.canRedo=zd.prototype.canRedo=function(){if(!this.isEnabled||0<this.Je||this.vb)return!1;var a=this.GG;return null!==a&&a.canRedo()?!0:!1};zd.prototype.redo=zd.prototype.redo=function(){if(this.canRedo()){var a=this.GG;try{this.Xc("StartingRedo","Redo",a),this.xi=!0,this.Ug++,a.redo()}catch(b){t.trace("redo error: "+b.toString())}finally{this.xi=!1,this.Xc("FinishedRedo","Redo",a)}}};
zd.prototype.Xc=function(a,b,c){void 0===c&&(c=null);var d=new td;d.td=ud;d.propertyName=a;d.object=c;d.oldValue=b;for(a=this.qJ;a.next();)b=a.value,d.ba=b,b.iw(d)};zd.prototype.handleChanged=zd.prototype.PE=function(a){if(this.isEnabled&&!this.vb&&!this.skipsEvent(a)){var b=this.Zi;null===b&&(this.Bu=b=new ce);var c=a.copy(),b=b.dh;b.Ma();b.add(c);b.freeze();this.Tz&&0>=this.Je&&!this.Ry&&(a=a.h,null!==a&&!1===a.lf||t.trace("Change not within a transaction: "+c.toString()))}};
zd.prototype.skipsEvent=function(a){if(null===a||0>a.td.value)return!0;a=a.object;if(a instanceof Q){if(a=a.layer,null!==a&&a.rc)return!0}else if(a instanceof $d&&a.rc)return!0;return!1};t.A(zd,{qJ:"models"},function(){return this.iz.k});t.g(zd,"isEnabled",zd.prototype.isEnabled);t.defineProperty(zd,{isEnabled:"isEnabled"},function(){return this.Le},function(a){this.Le=a});t.A(zd,{HG:"transactionToUndo"},function(){return 0<=this.cj&&this.cj<=this.history.count-1?this.history.wa(this.cj):null});
t.A(zd,{GG:"transactionToRedo"},function(){return this.cj<this.history.count-1?this.history.wa(this.cj+1):null});t.A(zd,{vb:"isUndoingRedoing"},function(){return this.xi});t.A(zd,{history:"history"},function(){return this.oH});t.g(zd,"maxHistoryLength",zd.prototype.AA);t.defineProperty(zd,{AA:"maxHistoryLength"},function(){return this.CC},function(a){this.CC=a});t.A(zd,{cj:"historyIndex"},function(){return this.Ug});t.A(zd,{Zi:"currentTransaction"},function(){return this.Bu});
t.A(zd,{Je:"transactionLevel"},function(){return this.Vk});t.A(zd,{dF:"isInTransaction"},function(){return 0<this.Vk});t.defineProperty(zd,{Tz:"checksTransactionLevel"},function(){return this.ny},function(a){this.ny=a});t.A(zd,{EF:"nestedTransactionNames"},function(){return this.$g});function oa(){0<arguments.length&&t.ad(oa);t.Ac(this);this.U=null;this.MB=this.NB=this.YB=this.OB=!1;this.Ok=this.jy=null;this.CD=1.05;this.WB=1;this.dz=NaN;this.zC=null;this.DD=NaN}t.ga("CommandHandler",oa);
oa.prototype.toString=function(){return"CommandHandler"};t.A(oa,{h:"diagram"},function(){return this.U});oa.prototype.yd=function(a){e&&null!==a&&t.l(a,z,oa,"setDiagram");this.U=a};
oa.prototype.doKeyDown=function(){var a=this.h;if(null!==a){var b=a.R,c=t.Vm?b.Bp:b.control,d=b.shift,f=b.alt,g=b.key;!c||"C"!==g&&"Insert"!==g?c&&"X"===g||d&&"Del"===g?this.canCutSelection()&&this.cutSelection():"Del"===g?this.canDeleteSelection()&&this.deleteSelection():c&&"V"===g||d&&"Insert"===g?this.canPasteSelection()&&this.pasteSelection():c&&"Y"===g||f&&d&&"Backspace"===g?this.canRedo()&&this.redo():c&&"Z"===g||f&&"Backspace"===g?this.canUndo()&&this.undo():c&&"A"===g?this.canSelectAll()&&
this.selectAll():"Esc"===g?this.canStopCommand()&&this.stopCommand():"Up"===g?a.pf&&(c?a.scroll("pixel","up"):a.scroll("line","up")):"Down"===g?a.pf&&(c?a.scroll("pixel","down"):a.scroll("line","down")):"Left"===g?a.of&&(c?a.scroll("pixel","left"):a.scroll("line","left")):"Right"===g?a.of&&(c?a.scroll("pixel","right"):a.scroll("line","right")):"PageUp"===g?d&&a.of?a.scroll("page","left"):a.pf&&a.scroll("page","up"):"PageDown"===g?d&&a.of?a.scroll("page","right"):a.pf&&a.scroll("page","down"):"Home"===
g?(b=a.Gd,c&&a.pf?a.position=new w(a.position.x,b.y):!c&&a.of&&(a.position=new w(b.x,a.position.y))):"End"===g?(b=a.Gd,d=a.xb,c&&a.pf?a.position=new w(d.x,b.bottom-d.height):!c&&a.of&&(a.position=new w(b.right-d.width,d.y))):"Subtract"===g?this.canDecreaseZoom()&&this.decreaseZoom():"Add"===g?this.canIncreaseZoom()&&this.increaseZoom():c&&"0"===g?this.canResetZoom()&&this.resetZoom():d&&"Z"===g?this.canZoomToFit()&&this.zoomToFit():c&&!d&&"G"===g?this.canGroupSelection()&&this.groupSelection():c&&
d&&"G"===g?this.canUngroupSelection()&&this.ungroupSelection():b.event&&113===b.event.which?this.canEditTextBlock()&&this.editTextBlock():b.event&&93===b.event.which?this.canShowContextMenu()&&this.showContextMenu():b.bubbles=!0:this.canCopySelection()&&this.copySelection()}};oa.prototype.doKeyUp=function(){var a=this.h;null!==a&&(a.R.bubbles=!0)};oa.prototype.stopCommand=function(){var a=this.h;if(null!==a){var b=a.Ua;b instanceof He&&a.Pe&&a.kw();null!==b&&b.doCancel()}};
oa.prototype.canStopCommand=function(){return!0};oa.prototype.selectAll=function(){var a=this.h;if(null!==a){a.fa();try{a.$b="wait";a.Ba("ChangingSelection");for(var b=a.sl;b.next();)b.value.eb=!0;for(b=a.jh;b.next();)b.value.eb=!0;for(b=a.links;b.next();)b.value.eb=!0}finally{a.Ba("ChangedSelection"),a.$b=""}}};oa.prototype.canSelectAll=function(){var a=this.h;return null!==a&&a.Pe};
oa.prototype.deleteSelection=function(){var a=this.h;if(null!==a&&!a.Ba("SelectionDeleting",a.selection))try{a.$b="wait";a.uc("Delete");a.Ba("ChangingSelection");for(var b=new ma(C),c=a.selection.k;c.next();)Ie(b,c.value,!0,this.sE?Infinity:0,function(a){return a.canDelete()});a.VA(b,!0);a.Ba("SelectionDeleted",b)}finally{a.Ba("ChangedSelection"),a.Ce("Delete"),a.$b=""}};oa.prototype.canDeleteSelection=function(){var a=this.h;return null===a||a.ab||a.Ze||!a.Zk||0===a.selection.count?!1:!0};
function Ie(a,b,c,d,f){if(!(a.contains(b)||(void 0===f&&(f=null),null!==f&&!f(b)||b instanceof Je)))if(a.add(b),b instanceof R){if(c&&b instanceof S)for(var g=b.Rc;g.next();){var h=g.value;Ie(a,h,c,d,f)}for(h=b.qe;h.next();)if(g=h.value,!a.contains(g)){var k=g.aa,l=g.ca;null!==k&&a.contains(k)&&null!==l&&a.contains(l)?Ie(a,g,c,d,f):null!==k&&null!==l||Ie(a,g,c,d,f)}if(1<d)for(b=b.BE();b.next();)h=b.value,Ie(a,h,c,d-1,f)}else if(b instanceof T)for(h=b.fk;h.next();)Ie(a,h.value,c,d,f)}
oa.prototype.Wo=function(a,b,c){var d=new ia(C,C);for(a=a.k;a.next();){var f=a.value;Ke(this,f,b,d,c)}if(null!==b){c=b.ba;a=!1;null!==b.wb.Hd&&(a=b.wb.Hd.Zh);for(var g=new ma(T),h=new ia(T,T),k=d.k;k.next();)if(f=k.value,f instanceof T)a||null!==f.aa&&null!==f.ca||g.add(f);else if(c instanceof Kd&&f instanceof R&&null!==f.data){var l=f,f=k.key,m=f.dA();null!==m&&((m=d.za(m))?(c.lh(l.data,c.Hb(m.data)),l=b.Qf(l.data),f=f.ft(),null!==f&&null!==l&&h.add(f,l)):c.lh(l.data,void 0))}0<g.count&&b.VA(g,!1);
if(0<h.count)for(b=h.k;b.next();)d.add(b.key,b.value)}for(b=d.k;b.next();)b.value.Kb();return d};
function Ke(a,b,c,d,f){if(null===b||f&&!b.canCopy())return null;if(d.contains(b))return a=d.za(b),a instanceof C?a:null;var g=null,h=b.data;if(null!==h&&null!==c){var k=c.ba;b instanceof T?k instanceof M&&(h=k.eE(h),t.qb(h)&&(k.aw(h),g=c.Qf(h))):(h=k.copyNodeData(h),t.qb(h)&&(k.Am(h),g=c.fh(h)))}else Le(b),g=b.copy(),null!==c&&g instanceof C&&c.add(g);if(!(g instanceof C))return null;g.eb=!1;g.zg=!1;d.add(b,g);if(b instanceof R){for(k=b.qe;k.next();){h=k.value;if(h.aa===b){var l=d.za(h);null!==l&&
(l.aa=g)}h.ca===b&&(l=d.za(h),null!==l&&(l.ca=g))}if(b instanceof S&&g instanceof S)for(b=b.Rc;b.next();)k=Ke(a,b.value,c,d,f),k instanceof T||null===k||(k.hb=g)}else if(b instanceof T)for(k=b.aa,null!==k&&(k=d.za(k),null!==k&&(g.aa=k)),k=b.ca,null!==k&&(k=d.za(k),null!==k&&(g.ca=k)),b=b.fk;b.next();)k=Ke(a,b.value,c,d,f),null!==k&&(k.$d=g);return g}
oa.prototype.copySelection=function(){var a=this.h;if(null!==a){for(var b=new ma(C),a=a.selection.k;a.next();)Ie(b,a.value,!0,this.dE?Infinity:0,function(a){return a.canCopy()});this.copyToClipboard(b)}};oa.prototype.canCopySelection=function(){var a=this.h;return null!==a&&a.Si&&a.ew&&0!==a.selection.count?!0:!1};oa.prototype.cutSelection=function(){this.copySelection();this.deleteSelection()};
oa.prototype.canCutSelection=function(){var a=this.h;return null!==a&&!a.ab&&!a.Ze&&a.Si&&a.Zk&&a.ew&&0!==a.selection.count?!0:!1};oa.prototype.copyToClipboard=function(a){var b=this.h;if(null!==b){var c=null;if(null===a)t.Ss=null,t.lw="";else{var c=b.ba,d=!1,f=!1,g=null;try{c instanceof Kd&&(d=c.cl,c.cl=this.Yz),c instanceof M&&(f=c.bl,c.bl=this.Xz),g=b.Wo(a,null,!0)}finally{c instanceof Kd&&(c.cl=d),c instanceof M&&(c.bl=f),c=new B(C),c.Oe(g),t.Ss=c,t.lw=b.ba.Wj}}b.Ba("ClipboardChanged",c)}};
oa.prototype.pasteFromClipboard=function(){var a=new ma(C),b=t.Ss;if(null===b)return a;var c=this.h;if(null===c||t.lw!==c.ba.Wj)return a;var d=c.ba,f=!1,g=!1,h=null;try{d instanceof Kd&&(f=d.cl,d.cl=this.Yz),d instanceof M&&(g=d.bl,d.bl=this.Xz),h=c.Wo(b,c,!1)}finally{for(d instanceof Kd&&(d.cl=f),d instanceof M&&(d.bl=g),b=h.k;b.next();)c=b.value,d=b.key,c.location.N()||(d.location.N()?c.location=d.location:!c.position.N()&&d.position.N()&&(c.position=d.position)),a.add(c)}return a};
oa.prototype.pasteSelection=function(a){var b=this.h;if(null!==b)try{b.$b="wait";b.uc("Paste");b.Ba("ChangingSelection");var c=this.pasteFromClipboard();0<c.count&&Me(b);for(var d=c.k;d.next();)d.value.eb=!0;b.Ba("ChangedSelection");if(a instanceof w){var f=b.computePartsBounds(b.selection);if(f){var g=b.wb.Hd,h=g.computeEffectiveCollection(b.selection);g.moveParts(h,new w(a.x-f.Da,a.y-f.Oa),!1)}}b.Ba("ClipboardPasted",c)}finally{b.Ce("Paste"),b.$b=""}};
oa.prototype.canPasteSelection=function(){var a=this.h;return null===a||a.ab||a.Ze||!a.Bm||!a.ew||null===t.Ss||t.lw!==a.ba.Wj?!1:!0};oa.prototype.undo=function(){var a=this.h;null!==a&&a.la.undo()};oa.prototype.canUndo=function(){var a=this.h;return null===a||a.ab||a.Ze?!1:a.Lz&&a.la.canUndo()};oa.prototype.redo=function(){var a=this.h;null!==a&&a.la.redo()};oa.prototype.canRedo=function(){var a=this.h;return null===a||a.ab||a.Ze?!1:a.Lz&&a.la.canRedo()};
oa.prototype.decreaseZoom=function(a){void 0===a&&(a=1/this.bu);t.q(a,oa,"decreaseZoom:factor");var b=this.h;null!==b&&b.Fm===Xe&&(a*=b.scale,a<b.Cg||a>b.Bg||(b.scale=a))};oa.prototype.canDecreaseZoom=function(a){void 0===a&&(a=1/this.bu);t.q(a,oa,"canDecreaseZoom:factor");var b=this.h;if(null===b||b.Fm!==Xe)return!1;a*=b.scale;return a<b.Cg||a>b.Bg?!1:b.Ns};
oa.prototype.increaseZoom=function(a){void 0===a&&(a=this.bu);t.q(a,oa,"increaseZoom:factor");var b=this.h;null!==b&&b.Fm===Xe&&(a*=b.scale,a<b.Cg||a>b.Bg||(b.scale=a))};oa.prototype.canIncreaseZoom=function(a){void 0===a&&(a=this.bu);t.q(a,oa,"canIncreaseZoom:factor");var b=this.h;if(null===b||b.Fm!==Xe)return!1;a*=b.scale;return a<b.Cg||a>b.Bg?!1:b.Ns};oa.prototype.resetZoom=function(a){void 0===a&&(a=this.Ys);t.q(a,oa,"resetZoom:newscale");var b=this.h;null===b||a<b.Cg||a>b.Bg||(b.scale=a)};
oa.prototype.canResetZoom=function(a){void 0===a&&(a=this.Ys);t.q(a,oa,"canResetZoom:newscale");var b=this.h;return null===b||a<b.Cg||a>b.Bg?!1:b.Ns};oa.prototype.zoomToFit=function(){var a=this.h;if(null!==a){var b=a.scale,c=a.position;b!==this.DD||isNaN(this.dz)?(this.dz=b,this.zC=c.copy(),a.zoomToFit(),a.Uf(),this.DD=a.scale):(a.scale=this.dz,a.position=this.zC)}};oa.prototype.canZoomToFit=function(){var a=this.h;return null===a?!1:a.Ns};
oa.prototype.collapseTree=function(a){void 0===a&&(a=null);var b=this.h;if(null===b)return!1;b.uc("Collapse Tree");var c=new B(R);if(a instanceof R&&a.Qc)a.collapseTree(),c.add(a);else for(a=b.selection.k;a.next();){var d=a.value;d instanceof R&&d.Qc&&(d.collapseTree(),c.add(d))}b.Ba("TreeCollapsed",c);b.Ce("Collapse Tree")};
oa.prototype.canCollapseTree=function(a){void 0===a&&(a=null);var b=this.h;if(null===b||b.ab)return!1;if(a instanceof R){if(!a.Qc)return!1;if(0<a.Fw().count)return!0}else for(a=b.selection.k;a.next();)if(b=a.value,b instanceof R&&b.Qc&&0<b.Fw().count)return!0;return!1};
oa.prototype.expandTree=function(a){void 0===a&&(a=null);var b=this.h;if(null===b)return!1;b.uc("Expand Tree");var c=new B(R);if(a instanceof R&&!a.Qc)a.expandTree(),c.add(a);else for(a=b.selection.k;a.next();){var d=a.value;d instanceof R&&!d.Qc&&(d.expandTree(),c.add(d))}b.Ba("TreeExpanded",c);b.Ce("Expand Tree")};
oa.prototype.canExpandTree=function(a){void 0===a&&(a=null);var b=this.h;if(null===b||b.ab)return!1;if(a instanceof R){if(a.Qc)return!1;if(0<a.Fw().count)return!0}else for(a=b.selection.k;a.next();)if(b=a.value,b instanceof R&&!b.Qc&&0<b.Fw().count)return!0;return!1};
oa.prototype.groupSelection=function(){var a=this.h;if(null!==a){var b=a.ba;if(null!==b&&b instanceof M){var c=this.Nz;if(null!==c){var d=null;try{a.$b="wait";a.uc("Group");a.Ba("ChangingSelection");for(var f=new B(C),g=a.selection.k;g.next();){var h=g.value;h.Ld()&&h.canGroup()&&f.add(h)}for(var k=new B(C),l=f.k;l.next();){for(var m=l.value,h=!1,g=f.k;g.next();)if(m.nl(g.value)){h=!0;break}h||k.add(m)}if(0<k.count){g=k.k;g.next();var n=g.value.hb;if(null!==n)for(;null!==n;){g=k.k;g.next();for(f=
!1;g.next();)if(m=g.value,!m.nl(n)){f=!0;break}if(f)n=n.hb;else break}if(c instanceof S)Le(c),d=c.copy(),d instanceof S&&a.add(d);else if(b.sA(c)){var p=b.copyNodeData(c);t.qb(p)&&(b.Am(p),d=a.Ew(p))}if(d instanceof S){null!==n&&this.isValidMember(n,d)&&(d.hb=n);for(g=k.k;g.next();)m=g.value,this.isValidMember(d,m)&&(m.hb=d);a.select(d)}}a.Ba("ChangedSelection");a.Ba("SelectionGrouped",d)}finally{a.Ce("Group"),a.$b=""}}}}};
oa.prototype.canGroupSelection=function(){var a=this.h;if(null===a||a.ab||a.Ze||!a.Bm||!a.Mo)return!1;var b=a.ba;if(null===b||!(b instanceof M)||null===this.Nz)return!1;for(a=a.selection.k;a.next();)if(b=a.value,b.Ld()&&b.canGroup())return!0;return!1};function Ye(a){var b=t.Db();for(a=a.k;a.next();){var c=a.value;c instanceof T||b.push(c)}a=new ma(C);for(var c=b.length,d=0;d<c;d++){for(var f=b[d],g=!0,h=0;h<c;h++)if(f.nl(b[h])){g=!1;break}g&&a.add(f)}t.ya(b);return a}
oa.prototype.isValidMember=function(a,b){if(null===b||a===b||b instanceof T)return!1;if(null!==a){if(a===b||a.nl(b))return!1;var c=a.vt;if(null!==c&&!c(a,b)||null===a.data&&null!==b.data||null!==a.data&&null===b.data)return!1}c=this.vt;return null!==c?c(a,b):!0};
oa.prototype.ungroupSelection=function(a){void 0===a&&(a=null);var b=this.h;if(null!==b){var c=b.ba;if(null!==c&&c instanceof M)try{b.$b="wait";b.uc("Ungroup");b.Ba("ChangingSelection");var d=new B(S);if(a instanceof S)d.add(a);else for(var f=b.selection.k;f.next();){var g=f.value;g instanceof S&&g.canUngroup()&&d.add(g)}if(0<d.count)for(b.kw(),f=d.k;f.next();){var h=f.value;h.expandSubGraph();var k=h.data,l=h.hb,m=null!==l&&null!==l.data?c.Hb(l.data):void 0,n=new B(C);n.Oe(h.Rc);for(var p=n.k;p.next();){var q=
p.value;if(!(q instanceof T)){var r=q.data;null!==r?c.vx(r,m):q.hb=l;q.eb=!0}}null!==k?c.nx(k):b.remove(h)}b.Ba("ChangedSelection");b.Ba("SelectionUngrouped",d,n)}finally{b.Ce("Ungroup"),b.$b=""}}};
oa.prototype.canUngroupSelection=function(a){void 0===a&&(a=null);var b=this.h;if(null===b||b.ab||b.Ze||!b.Zk||!b.Ro)return!1;var c=b.ba;if(null===c||!(c instanceof M))return!1;if(a instanceof S){if(a.canUngroup())return!0}else for(a=b.selection.k;a.next();)if(b=a.value,b instanceof S&&b.canUngroup())return!0;return!1};oa.prototype.addTopLevelParts=function(a,b){for(var c=!0,d=Ye(a).k;d.next();){var f=d.value;null!==f.hb&&(!b||this.isValidMember(null,f)?f.hb=null:c=!1)}return c};
oa.prototype.collapseSubGraph=function(a){void 0===a&&(a=null);var b=this.h;if(null===b)return!1;b.uc("Collapse SubGraph");var c=new B(S);if(a instanceof S&&a.Yd)a.collapseSubGraph(),c.add(a);else for(a=b.selection.k;a.next();){var d=a.value;d instanceof S&&d.Yd&&(d.collapseSubGraph(),c.add(d))}b.Ba("SubGraphCollapsed",c);b.Ce("Collapse SubGraph")};
oa.prototype.canCollapseSubGraph=function(a){void 0===a&&(a=null);var b=this.h;if(null===b||b.ab)return!1;if(a instanceof S)return a.Yd?!0:!1;for(a=b.selection.k;a.next();)if(b=a.value,b instanceof S&&b.Yd)return!0;return!1};
oa.prototype.expandSubGraph=function(a){void 0===a&&(a=null);var b=this.h;if(null===b)return!1;b.uc("Expand SubGraph");var c=new B(S);if(a instanceof S&&!a.Yd)a.expandSubGraph(),c.add(a);else for(a=b.selection.k;a.next();){var d=a.value;d instanceof S&&!d.Yd&&(d.expandSubGraph(),c.add(d))}b.Ba("SubGraphExpanded",c);b.Ce("Expand SubGraph")};
oa.prototype.canExpandSubGraph=function(a){void 0===a&&(a=null);var b=this.h;if(null===b||b.ab)return!1;if(a instanceof S)return a.Yd?!1:!0;for(a=b.selection.k;a.next();)if(b=a.value,b instanceof S&&!b.Yd)return!0;return!1};
oa.prototype.editTextBlock=function(a){void 0===a&&(a=null);var b=this.h;if(null!==b){var c=b.wb.Bx;if(null!==c){if(null===a){a=b.selection.k;for(var d=null;a.next();){var f=a.value;if(f.canEdit()){d=f;break}}if(null===d)return;a=d.bt(function(a){return a instanceof na&&a.yw})}null!==a&&a instanceof na&&(c.Ng=a,b.Ua=c)}}};
oa.prototype.canEditTextBlock=function(a){void 0===a&&(a=null);var b=this.h;if(null===b||b.ab||b.Ze||!b.Qo||null===b.wb.Bx)return!1;if(a instanceof na){if(a=a.S,null!==a&&a.canEdit())return!0}else for(b=b.selection.k;b.next();)if(a=b.value,a.canEdit()&&(a=a.bt(function(a){return a instanceof na&&a.yw}),null!==a))return!0;return!1};
oa.prototype.showContextMenu=function(a){var b=this.h;if(null!==b){var c=b.wb.pw;if(null!==c&&(void 0===a&&(a=0<b.selection.count?b.selection.$a():b),a=c.findObjectWithContextMenu(a),null!==a)){var d=new ld,f=null;a instanceof Q?f=a.pb(Hb):b.ao||(f=b.xb,f=new w(f.x+f.width/2,f.y+f.height/2));null!==f&&(d.Ke=b.IG(f),d.ea=f,b.ec=d);b.Ua=c;Ze(c,!1,a)}}};
oa.prototype.canShowContextMenu=function(a){var b=this.h;if(null===b)return!1;var c=b.wb.pw;if(null===c)return!1;void 0===a&&(a=0<b.selection.count?b.selection.$a():b);return null===c.findObjectWithContextMenu(a)?!1:!0};t.g(oa,"copiesTree",oa.prototype.dE);t.defineProperty(oa,{dE:"copiesTree"},function(){return this.OB},function(a){t.i(a,"boolean",oa,"copiesTree");this.OB=a});t.g(oa,"deletesTree",oa.prototype.sE);
t.defineProperty(oa,{sE:"deletesTree"},function(){return this.YB},function(a){t.i(a,"boolean",oa,"deletesTree");this.YB=a});t.g(oa,"copiesParentKey",oa.prototype.Yz);t.defineProperty(oa,{Yz:"copiesParentKey"},function(){return this.NB},function(a){t.i(a,"boolean",oa,"copiesParentKey");this.NB=a});t.g(oa,"copiesGroupKey",oa.prototype.Xz);t.defineProperty(oa,{Xz:"copiesGroupKey"},function(){return this.MB},function(a){t.i(a,"boolean",oa,"copiesGroupKey");this.MB=a});t.g(oa,"archetypeGroupData",oa.prototype.Nz);
t.defineProperty(oa,{Nz:"archetypeGroupData"},function(){return this.jy},function(a){null!==a&&t.l(a,Object,oa,"archetypeGroupData");var b=this.h;null!==b&&(b=b.ba,b instanceof M&&(a instanceof S||b.sA(a)||t.m("CommandHandler.archetypeGroupData must be either a Group or a data object for which GraphLinksModel.isGroupForNodeData is true: "+a)));this.jy=a});t.g(oa,"memberValidation",oa.prototype.vt);
t.defineProperty(oa,{vt:"memberValidation"},function(){return this.Ok},function(a){null!==a&&t.i(a,"function",oa,"memberValidation");this.Ok=a});t.g(oa,"defaultScale",oa.prototype.Ys);t.defineProperty(oa,{Ys:"defaultScale"},function(){return this.WB},function(a){t.q(a,oa,"defaultScale");0<a||t.m("defaultScale must be larger than zero, not: "+a);this.WB=a});t.g(oa,"zoomFactor",oa.prototype.bu);
t.defineProperty(oa,{bu:"zoomFactor"},function(){return this.CD},function(a){t.q(a,oa,"zoomFactor");1<a||t.m("zoomFactor must be larger than 1.0, not: "+a);this.CD=a});function ae(){0<arguments.length&&t.ad(ae);t.Ac(this);this.U=null;this.Zb="";this.Le=!0;this.lC=!1;this.yD=null;this.Zv=-1}t.ga("Tool",ae);ae.prototype.yd=function(a){e&&null!==a&&t.l(a,z,ae,"setDiagram");this.U=a};ae.prototype.toString=function(){return""!==this.name?this.name+" Tool":t.xg(Object.getPrototypeOf(this))};
ae.prototype.updateAdornments=function(){};ae.prototype.canStart=function(){return this.isEnabled};ae.prototype.doStart=function(){};ae.prototype.doActivate=function(){this.ia=!0};ae.prototype.doDeactivate=function(){this.ia=!1};ae.prototype.doStop=function(){};ae.prototype.doCancel=function(){this.stopTool()};ae.prototype.stopTool=function(){var a=this.h;null!==a&&a.Ua===this&&(a.Ua=null,a.$b="")};ae.prototype.doMouseDown=function(){!this.ia&&this.canStart()&&this.doActivate()};
ae.prototype.doMouseMove=function(){};ae.prototype.doMouseUp=function(){this.stopTool()};ae.prototype.doMouseWheel=function(){};ae.prototype.doKeyDown=function(){var a=this.h;null!==a&&"Esc"===a.R.key&&this.doCancel()};ae.prototype.doKeyUp=function(){};ae.prototype.startTransaction=ae.prototype.uc=function(a){this.gf=null;var b=this.h;return null===b?!1:b.uc(a)};ae.prototype.stopTransaction=ae.prototype.hk=function(){var a=this.h;return null===a?!1:null===this.gf?a.Np():a.Ce(this.gf)};
ae.prototype.standardMouseSelect=function(){var a=this.h;if(null!==a&&a.Pe){var b=a.R,c=a.et(b.ea,!1);if(null!==c)if(t.Vm?b.Bp:b.control){a.Ba("ChangingSelection");for(b=c;null!==b&&!b.canSelect();)b=b.hb;null!==b&&(b.eb=!b.eb);a.Ba("ChangedSelection")}else if(b.shift){if(!c.eb){a.Ba("ChangingSelection");for(b=c;null!==b&&!b.canSelect();)b=b.hb;null!==b&&(b.eb=!0);a.Ba("ChangedSelection")}}else{if(!c.eb){for(b=c;null!==b&&!b.canSelect();)b=b.hb;null!==b&&a.select(b)}}else!b.left||(t.Vm?b.Bp:b.control)||
b.shift||a.kw()}};ae.prototype.standardMouseClick=function(a,b){void 0===a&&(a=null);void 0===b&&(b=function(a){return!a.layer.rc});var c=this.h;if(null!==c){var d=c.R,f=c.pe(d.ea,a,b);d.ce=f;$e(f,d,c)}};
function $e(a,b,c){var d=0;b.left?d=1===b.Ae?1:2===b.Ae?2:1:b.right&&1===b.Ae&&(d=3);var f="";if(null!==a){switch(d){case 1:f="ObjectSingleClicked";break;case 2:f="ObjectDoubleClicked";break;case 3:f="ObjectContextClicked"}0!==d&&c.Ba(f,a)}else{switch(d){case 1:f="BackgroundSingleClicked";break;case 2:f="BackgroundDoubleClicked";break;case 3:f="BackgroundContextClicked"}0!==d&&c.Ba(f)}if(null!==a)for(;null!==a;){f=null;switch(d){case 1:f=a.click;break;case 2:f=a.Om?a.Om:a.click;break;case 3:f=a.Ws}if(null!==
f&&(f(b,a),b.Ee))break;a=a.ja}else{f=null;switch(d){case 1:f=c.click;break;case 2:f=c.Om?c.Om:c.click;break;case 3:f=c.Ws}null!==f&&f(b)}}
ae.prototype.standardMouseOver=function(){var a=this.h;if(null!==a){var b=a.R;if(null!==b.h&&!0!==a.Ub.sd){var c=a.Wa;a.Wa=!0;var d=a.pe(b.ea,null,null);b.ce=d;var f=!1;if(d!==a.Bn){var g=a.Bn,h=g;a.Bn=d;for(this.doCurrentObjectChanged(g,d);null!==g;){var k=g.EA;if(null!==k){if(d===g)break;if(null!==d&&d.ej(g))break;k(b,g,d);f=!0;if(b.Ee)break}g=g.ja}for(g=h;null!==d;){k=d.DA;if(null!==k){if(g===d)break;if(null!==g&&g.ej(d))break;k(b,d,g);f=!0;if(b.Ee)break}d=d.ja}d=a.Bn}if(null!==d){g=d;for(k="";null!==
g;){k=g.cursor;if(""!==k)break;g=g.ja}a.$b=k;for(g=d;null!==g;){k=g.zt;if(null!==k&&(k(b,g),f=!0,b.Ee))break;g=g.ja}}else a.$b="",k=a.zt,null!==k&&(k(b),f=!0);f&&a.te();a.Wa=c}}};ae.prototype.doCurrentObjectChanged=function(){};
ae.prototype.standardMouseWheel=function(){var a=this.h;if(null!==a){var b=a.R,c=b.Yj;if(0!==c&&a.Gd.N()){var d=a.Se,f=a.wb.cn;if((f===af&&!b.shift||f===bf&&b.control)&&(0<c?d.canIncreaseZoom():d.canDecreaseZoom()))f=a.$f,a.$f=b.Ke,0<c?d.increaseZoom():d.decreaseZoom(),a.$f=f,b.bubbles=!1;else if(f===af&&b.shift||f===bf&&!b.control){d=a.position.copy();f=0<c?c:-c;if(!b.shift&&a.pf){var g=a.Rp,f=f/40*g;0<c?a.scroll("pixel","up",f):a.scroll("pixel","down",f)}else b.shift&&a.of&&(g=a.Qp,f=f/40*g,0<c?
a.scroll("pixel","left",f):a.scroll("pixel","right",f));a.position.M(d)||(b.bubbles=!1)}}}};ae.prototype.standardWaitAfter=function(a){t.i(a,"number",ae,"standardWaitAfter:delay");this.cancelWaitAfter();var b=this;this.Zv=window.setTimeout(function(){b.doWaitAfter()},a)};ae.prototype.cancelWaitAfter=function(){-1!==this.Zv&&window.clearTimeout(this.Zv);this.Zv=-1};ae.prototype.doWaitAfter=function(){};
ae.prototype.findToolHandleAt=function(a,b){var c=this.h;if(null===c)return null;c=c.pe(a,null,function(a){a=a.S;return null===a?!1:null!==a.pc});if(null===c)return null;var d=c.S;return null===d||d.Zc!==b?null:c};ae.prototype.isBeyondDragSize=function(a,b){var c=this.h;if(null===c)return!1;void 0===a&&(a=c.Nc.Ke);void 0===b&&(b=c.R.Ke);var d=c.wb.uE,c=d.width,d=d.height;t.gB&&(c+=6,d+=6);return Math.abs(b.x-a.x)>c||Math.abs(b.y-a.y)>d};t.A(ae,{h:"diagram"},function(){return this.U});
t.g(ae,"name",ae.prototype.name);t.defineProperty(ae,{name:"name"},function(){return this.Zb},function(a){t.i(a,"string",ae,"name");this.Zb=a});t.g(ae,"isEnabled",ae.prototype.isEnabled);t.defineProperty(ae,{isEnabled:"isEnabled"},function(){return this.Le},function(a){t.i(a,"boolean",ae,"isEnabled");this.Le=a});t.g(ae,"isActive",ae.prototype.ia);t.defineProperty(ae,{ia:"isActive"},function(){return this.lC},function(a){t.i(a,"boolean",ae,"isActive");this.lC=a});t.g(ae,"transactionResult",ae.prototype.gf);
t.defineProperty(ae,{gf:"transactionResult"},function(){return this.yD},function(a){null!==a&&t.i(a,"string",ae,"transactionResult");this.yD=a});
function cf(){0<arguments.length&&t.ad(cf);ae.call(this);this.name="Dragging";this.LB=this.pC=!0;this.Wq=this.cC=!1;this.tC=!0;this.Ty=(new fa(NaN,NaN)).freeze();this.Uy=Eb;this.Vy=(new w(NaN,NaN)).freeze();this.bC=!1;this.$B=this.KB=this.aC=this.RB=this.Ki=null;this.Iq=this.rC=!1;this.Bo=new w(NaN,NaN);this.Lv=new w;this.Ov=!1;this.Jv=this.oC=!0;this.Ln=100;this.Nl=this.zv=null}t.ga("DraggingTool",cf);t.Ka(cf,ae);t.g(cf,"isCopyEnabled",cf.prototype.qA);
t.defineProperty(cf,{qA:"isCopyEnabled"},function(){return this.pC},function(a){t.i(a,"boolean",cf,"isCopyEnabled");this.pC=a});t.g(cf,"copiesEffectiveCollection",cf.prototype.cE);t.defineProperty(cf,{cE:"copiesEffectiveCollection"},function(){return this.LB},function(a){t.i(a,"boolean",cf,"copiesEffectiveCollection");this.LB=a});t.g(cf,"dragsTree",cf.prototype.vE);t.defineProperty(cf,{vE:"dragsTree"},function(){return this.cC},function(a){t.i(a,"boolean",cf,"dragsTree");this.cC=a});
t.g(cf,"isGridSnapEnabled",cf.prototype.qp);t.defineProperty(cf,{qp:"isGridSnapEnabled"},function(){return this.Wq},function(a){t.i(a,"boolean",cf,"isGridSnapEnabled");this.Wq=a});t.g(cf,"isComplexRoutingRealtime",cf.prototype.aF);t.defineProperty(cf,{aF:"isComplexRoutingRealtime"},function(){return this.oC},function(a){t.i(a,"boolean",cf,"isComplexRoutingRealtime");this.oC=a});t.g(cf,"isGridSnapRealtime",cf.prototype.cF);
t.defineProperty(cf,{cF:"isGridSnapRealtime"},function(){return this.tC},function(a){t.i(a,"boolean",cf,"isGridSnapRealtime");this.tC=a});t.g(cf,"gridSnapCellSize",cf.prototype.lA);t.defineProperty(cf,{lA:"gridSnapCellSize"},function(){return this.Ty},function(a){t.l(a,fa,cf,"gridSnapCellSize");this.Ty.M(a)||(this.Ty=a=a.Z())});t.g(cf,"gridSnapCellSpot",cf.prototype.LE);
t.defineProperty(cf,{LE:"gridSnapCellSpot"},function(){return this.Uy},function(a){t.l(a,H,cf,"gridSnapCellSpot");this.Uy.M(a)||(this.Uy=a=a.Z())});t.g(cf,"gridSnapOrigin",cf.prototype.ME);t.defineProperty(cf,{ME:"gridSnapOrigin"},function(){return this.Vy},function(a){t.l(a,w,cf,"gridSnapOrigin");this.Vy.M(a)||(this.Vy=a=a.Z())});t.g(cf,"dragsLink",cf.prototype.Zh);t.defineProperty(cf,{Zh:"dragsLink"},function(){return this.bC},function(a){t.i(a,"boolean",cf,"dragsLink");this.bC=a});
t.g(cf,"currentPart",cf.prototype.Yo);t.defineProperty(cf,{Yo:"currentPart"},function(){return this.RB},function(a){null!==a&&t.l(a,C,cf,"currentPart");this.RB=a});t.g(cf,"copiedParts",cf.prototype.Dc);t.defineProperty(cf,{Dc:"copiedParts"},function(){return this.KB},function(a){this.KB=a});t.g(cf,"draggedParts",cf.prototype.qc);t.defineProperty(cf,{qc:"draggedParts"},function(){return this.aC},function(a){this.aC=a});t.g(cf,"draggedLink",cf.prototype.Mc);
t.defineProperty(cf,{Mc:"draggedLink"},function(){return this.$B},function(a){null!==a&&t.l(a,T,cf,"draggedLink");this.$B=a});t.g(cf,"isDragOutStarted",cf.prototype.pt);t.defineProperty(cf,{pt:"isDragOutStarted"},function(){return this.rC},function(a){this.rC=a});t.g(cf,"startPoint",cf.prototype.jj);t.defineProperty(cf,{jj:"startPoint"},function(){return this.Lv},function(a){t.l(a,w,cf,"startPoint");this.Lv.M(a)||(this.Lv=a=a.Z())});t.g(cf,"delay",cf.prototype.vw);
t.defineProperty(cf,{vw:"delay"},function(){return this.Ln},function(a){t.i(a,"number",cf,"delay");this.Ln=a});cf.prototype.canStart=function(){if(!this.isEnabled)return!1;var a=this.h;if(null===a||!a.Rj&&!a.Si&&!a.Ms||!a.Pe)return!1;var b=a.R;return!b.left||a.Ua!==this&&(!this.isBeyondDragSize()||b.Uw&&b.timestamp-a.Nc.timestamp<this.Ln)?!1:null!==this.findDraggablePart()};
cf.prototype.findDraggablePart=function(){var a=this.h;if(null===a)return null;a=a.et(a.Nc.ea,!1);if(null===a)return null;for(;null!==a&&!a.canSelect();)a=a.hb;return null!==a&&(a.canMove()||a.canCopy())?a:null};cf.prototype.standardMouseSelect=function(){var a=this.h;if(null!==a&&a.Pe){var b=a.et(a.Nc.ea,!1);if(null!==b){for(;null!==b&&!b.canSelect();)b=b.hb;this.Yo=b;this.Yo.eb||(a.Ba("ChangingSelection"),b=a.R,(t.Vm?b.Bp:b.control)||b.shift||Me(a),this.Yo.eb=!0,a.Ba("ChangedSelection"))}}};
cf.prototype.doActivate=function(){var a=this.h;if(null!==a){this.standardMouseSelect();var b=this.Yo;null!==b&&(b.canMove()||b.canCopy())&&(this.ia=!0,this.Bo.set(a.position),df(this,a.selection),this.Nl=this.zv=null,this.qc=this.computeEffectiveCollection(a.selection),a.yo=!0,ef(this,this.qc),this.uc("Drag"),this.jj=a.Nc.ea,a.Kd=!0,a.Ms&&(this.pt=!0,this.Iq=!1,ff=this,gf=this.h,this.doSimulatedDragOut()))}};
function df(a,b){if(a.Zh){var c=a.h;null!==c&&c.Sj&&(c.ba instanceof M&&1===b.count&&b.$a()instanceof T?(a.Mc=b.$a(),a.Mc.canRelinkFrom()&&a.Mc.canRelinkTo()&&a.Mc.Wi(),a.Ki=c.wb.SA,null===a.Ki&&(a.Ki=new hf,a.Ki.h=c)):(a.Mc=null,a.Ki=null))}}
cf.prototype.computeEffectiveCollection=function(a){var b=null!==this.h&&this.h.Ua===this,c=new ia(C,Object);if(null===a)return c;for(var d=a.k;d.next();){var f=d.value;jf(this,c,f,b)}if(null!==this.Mc&&this.Zh)return c;for(d=a.k;d.next();)f=d.value,f instanceof T&&(a=f,b=a.aa,null===b||c.contains(b)?(b=a.ca,null===b||c.contains(b)||c.remove(a)):c.remove(a));return c};function kf(a){return void 0===a?{point:F.mj,tz:F.mj}:{point:a.copy(),tz:F.mj}}
function jf(a,b,c,d){if(!b.contains(c)&&(!d||c.canMove()||c.canCopy()))if(c instanceof R){b.add(c,kf(c.location));if(c instanceof S)for(var f=c.Rc;f.next();){var g=f.value;jf(a,b,g,d)}for(g=c.qe;g.next();)if(f=g.value,!b.contains(f)){var h=f.aa,k=f.ca;null!==h&&b.contains(h)&&null!==k&&b.contains(k)&&jf(a,b,f,d)}if(a.vE)for(c=c.BE();c.next();)g=c.value,jf(a,b,g,d)}else if(c instanceof T)for(f=c,b.add(f,kf()),g=f.fk;g.next();)jf(a,b,g.value,d);else c instanceof Je||b.add(c,kf(c.location))}
cf.prototype.doDeactivate=function(){this.ia=!1;var a=this.h;null!==a&&tf(a);uf(this);vf(this,this.qc);this.qc=null;this.Iq=this.pt=!1;if(0<wf.count){for(var b=wf.length,c=0;c<b;c++){var d=wf.n[c];xf(d);yf(d);uf(d);null!==d.h&&tf(d.h)}wf.clear()}xf(this);this.Bo.Sp(NaN,NaN);ff=gf=null;yf(this);a.Kd=!1;a.$b="";a.yo=!1;this.hk()};
function uf(a){var b=a.h;if(null!==b){var c=b.Wa;b.Wa=!0;for(var d=b.R,f=a.Nl;null!==f;){var g=f.CA;if(null!==g&&(g(d,f,null),d.Ee))break;f=f.ja}b.Wa=c}a.zv=null;a.Nl=null}function zf(){var a=ff;yf(a);Af(a);var b=a.h;null!==b&&a.Bo.N()&&(b.position=a.Bo);null!==b&&tf(b)}cf.prototype.doCancel=function(){yf(this);Af(this);var a=this.h;null!==a&&this.Bo.N()&&(a.position=this.Bo);this.stopTool()};function ef(a,b){if(null!==b){a.Ov=!0;for(var c=b.k;c.next();){var d=c.key;d instanceof T&&(d.Wp=!0)}}}
function vf(a,b){if(null!==b){for(var c=b.k;c.next();){var d=c.key;d instanceof T&&(d.Wp=!1,d.dj&&Bf(d)&&d.ac())}a.Ov=!1}}cf.prototype.doKeyDown=function(){var a=this.h;null!==a&&(a=a.R,null!==a&&this.ia&&("Esc"===a.key?this.doCancel():this.doMouseMove()))};cf.prototype.doKeyUp=function(){var a=this.h;null!==a&&null!==a.R&&this.ia&&this.doMouseMove()};
function Cf(a,b){for(var c=Infinity,d=Infinity,f=-Infinity,g=-Infinity,h=a.k;h.next();){var k=h.value;if(k.Ld()&&k.La()){var l=k.location,k=l.x,l=l.y;isNaN(k)||isNaN(l)||(k<c&&(c=k),l<d&&(d=l),k>f&&(f=k),l>g&&(g=l))}}Infinity===c?b.p(0,0,0,0):b.p(c,d,f-c,g-d)}
function Df(a,b){if(null===a.Dc){var c=a.h;if(!(null===c||b&&(c.ab||c.Ze))&&null!==a.qc){var d=c.la;d.isEnabled&&d.dF?null!==d.Zi&&0<d.Zi.dh.count&&(c.la.Np(),c.uc("Drag")):Af(a);c.Wa=!b;c.un=!b;a.jj=c.Nc.ea;d=a.cE?a.qc.Fl():c.selection;c=c.Wo(d,c,!0);for(d=c.k;d.next();)d.value.location=d.key.location;d=t.Gf();Cf(c,d);t.hc(d);for(var d=new ia(C,Object),f=a.qc.k;f.next();){var g=f.key;g.Ld()&&g.canCopy()&&(g=c.za(g),null!==g&&(g.sf(),d.add(g,kf(g.location))))}for(c=c.k;c.next();)f=c.value,f instanceof
T&&f.canCopy()&&d.add(f,kf());a.Dc=d;df(a,d.Fl());null!==a.Mc&&(c=a.Mc,d=c.uj(),c.ql(a.jj.x-(d.x+d.width/2),a.jj.y-(d.y+d.height/2)))}}}function yf(a){var b=a.h;if(null!==b){if(null!==a.Dc&&(b.VA(a.Dc.Fl(),!1),a.Dc=null,null!==a.qc))for(var c=a.qc.k;c.next();)c.key instanceof T&&(c.value.point=new w(0,0));b.Wa=!1;b.un=!1;a.jj=b.Nc.ea}}function xf(a){if(null!==a.Mc){if(a.Zh&&null!==a.Ki){var b=a.Ki;b.h.remove(b.de);b.h.remove(b.ee)}a.Mc=null;a.Ki=null}}
function Ef(a,b,c){var d=a.h;if(null!==d){var f=a.jj,g=t.K();g.assign(d.R.ea);a.moveParts(b,g.Vt(f),c);t.B(g)}}
cf.prototype.moveParts=function(a,b,c){if(null!==a&&(t.l(a,ia,cf,"moveParts:parts"),0!==a.count)){var d=t.K(),f=t.K();f.assign(b);isNaN(f.x)&&(f.x=0);isNaN(f.y)&&(f.y=0);var g=this.Ov;g||ef(this,a);for(var h=new B,k=new B(Ea),l=a.k;l.next();){var m=l.key;if(m.Ld()){var n=Ff(this,m,a);if(null!==n)h.add({Fc:m,info:l.value,LI:n});else if(!c||m.canMove()){n=l.value.point;d.assign(n);var p=t.K();this.computeMove(m,d.add(f),a,p);m.location=p;t.B(p);l.value.tz=p.Vt(n)}}else l.key instanceof T&&k.add(l.yb)}for(c=
h.k;c.next();)h=c.value,n=h.info.point,d.assign(n),h.Fc.location=d.add(h.LI.tz);n=t.K();c=t.K();for(k=k.k;k.next();)if(p=k.value,h=p.key,h instanceof T)if(h.Wp)if(l=h.aa,m=h.ca,null!==this.Mc&&this.Zh)p=p.value.point,a.add(h,kf(f)),l=b.x-p.x,m=b.y-p.y,h.ql(l,m);else{if(null!==l){n.assign(l.location);var q=a.za(l);null!==q&&n.Vt(q.point)}null!==m&&(c.assign(m.location),q=a.za(m),null!==q&&c.Vt(q.point));null!==l&&null!==m?n.tf(c)?(p=p.value.point,l=d,l.assign(n),l.Vt(p),a.add(h,kf(n)),h.ql(l.x,l.y)):
(h.Wp=!1,h.ac()):(p=p.value.point,a.add(h,kf(null!==l?n:null!==m?c:b)),l=f.x-p.x,m=f.y-p.y,h.ql(l,m))}else if(null===h.aa||null===h.ca)p=p.value.point,a.add(h,kf(b)),l=f.x-p.x,m=f.y-p.y,h.ql(l,m);t.B(d);t.B(f);t.B(n);t.B(c);g||vf(this,a)}};function Ff(a,b,c){b=b.hb;if(null!==b){a=Ff(a,b,c);if(null!==a)return a;a=c.za(b);if(null!==a)return a}return null}
function Af(a){if(null!==a.qc){for(var b=a.h,c=a.qc.k;c.next();){var d=c.key;d.Ld()&&(d.location=c.value.point)}for(c=a.qc.k;c.next();)if(d=c.key,d instanceof T&&d.Wp){var f=c.value.point;a.qc.add(d,kf());d.ql(-f.x,-f.y)}b.Uf()}}
cf.prototype.computeMove=function(a,b,c,d){void 0===d&&(d=new w);d.assign(b);if(null===a)return d;void 0===c&&(c=null);var f=b;if(this.qp&&(this.cF||null===c||this.h.R.lj)&&(f=t.K(),c=f,c.assign(b),null!==a)){var g=this.h;if(null!==g){var h=g.lp,k=this.lA,g=k.width,k=k.height,l=this.ME,m=l.x,l=l.y,n=this.LE;if(null!==h){var p=h.ht;isNaN(g)&&(g=p.width);isNaN(k)&&(k=p.height);h=h.kA;isNaN(m)&&(m=h.x);isNaN(l)&&(l=h.y)}h=t.mc(0,0);h.Rt(0,0,g,k,n);F.dt(b.x,b.y,m+h.x,l+h.y,g,k,c);t.B(h)}}c=null!==a.aA?
a.aA(a,b,f):f;k=a.zF;g=k.x;isNaN(g)&&(g=a.location.x);k=k.y;isNaN(k)&&(k=a.location.y);h=a.tF;m=h.x;isNaN(m)&&(m=a.location.x);h=h.y;isNaN(h)&&(h=a.location.y);d.p(Math.max(g,Math.min(c.x,m)),Math.max(k,Math.min(c.y,h)));f!==b&&t.B(f);return d};function Gf(a,b){if(null===b)return!0;var c=b.S;return null===c||c instanceof Je||c.layer.rc||a.qc&&a.qc.contains(c)||a.Dc&&a.Dc.contains(c)?!0:!1}
function Hf(a,b,c,d){var f=a.h;if(null!==f){a.Zh&&(null!==a.Mc&&(a.Mc.aa=null,a.Mc.ca=null),If(a,!1));var g=!1;!1===a.Jv&&(g=f.Wa,f.Wa=!0);var h=!1,k=Jf(f,b,null,function(b){return!Gf(a,b)}),l=f.R;l.ce=k;var m=f.Wa;f.Wa=!0;if(k!==a.Nl){var n=a.Nl;a.zv=n;for(a.Nl=k;null!==n;){var p=n.CA;if(null!==p){if(k===n)break;if(null!==k&&k.ej(n))break;p(l,n,k);h=!0;if(l.Ee)break}n=n.ja}n=a.zv;if(!a.ia&&null===ff)return;for(;null!==k;){p=k.AF;if(null!==p){if(n===k)break;if(null!==n&&n.ej(k))break;p(l,k,n);h=!0;
if(l.Ee)break}k=k.ja}k=a.Nl;if(!a.ia&&null===ff)return}null===k&&(p=f.BF,null!==p&&(p(l),h=!0));if(a.ia||null!==ff)if(a.doDragOver(b,k),a.ia||null!==ff)f.Wa=m,h&&f.Uf(),!1===a.Jv&&(f.Wa=g),(f.of||f.pf)&&(c||d)&&Uf(f,l.Ke)}}function Vf(a,b,c){var d=a.Ki;if(null===d)return null;var f=a.h.Qm(b,d.LA,function(a){return d.findValidLinkablePort(a,c)});a=t.K();for(var g=Infinity,h=null,f=f.k;f.next();){var k=f.value;if(null!==k.S){var l=k.pb(Hb,a),l=b.Zj(l);l<g&&(h=k,g=l)}}t.B(a);return h}
function If(a,b){var c=a.Mc;if(null!==c&&!(2>c.pa)){var d=a.h;if(null!==d&&!d.ab&&(d=a.Ki,null!==d)){var f=null,g=null;null===c.aa&&(f=Vf(a,c.o(0),!1),null!==f&&(g=f.S));var h=null,k=null;null===c.ca&&(h=Vf(a,c.o(c.pa-1),!0),null!==h&&(k=h.S));if((null===g||g instanceof R)&&(null===k||k instanceof R)){var l=d.isValidLink(g,f,k,h);b?(c.Fn=c.o(0).copy(),c.Jn=c.o(c.pa-1).copy(),c.Wp=!1,c.aa=g,null!==f&&(c.Rf=f.Nd),c.ca=k,null!==h&&(c.Og=h.Nd)):l?Wf(d,g,f,k,h):Wf(d,null,null,null,null)}}}}
cf.prototype.doDragOver=function(){};function Xf(a,b){var c=a.h;if(null!==c&&null!==c.ba){a.Zh&&If(a,!0);uf(a);var d=Jf(c,b,null,function(b){return!Gf(a,b)}),f=c.R;f.ce=d;if(null!==d)for(var g=d;null!==g;){var h=g.wt;if(null!==h&&(h(f,g),f.Ee))break;g=g.ja}else h=c.wt,null!==h&&h(f);if(a.ia||null!==ff)if(a.doDropOnto(b,d),a.ia||null!==ff)for(d=c.selection.k;d.next();)f=d.value,f instanceof R&&Yf(c,f.oa)}}cf.prototype.doDropOnto=function(){};
cf.prototype.doMouseMove=function(){if(this.ia){var a=this.h;if(null!==a&&null!==this.Yo&&null!==this.qc){var b=!1,c=!1;this.mayCopy()?(b=!0,a.$b="copy",Df(this,!1),ef(this,this.Dc),Ef(this,this.Dc,!1),vf(this,this.Dc)):this.mayMove()?(c=!0,a.$b="default",yf(this),Ef(this,this.qc,!0)):this.mayDragOut()?(a.$b="no-drop",Df(this,!1),Ef(this,this.Dc,!1)):yf(this);Hf(this,a.R.ea,c,b)}}};
cf.prototype.doMouseUp=function(){if(this.ia){var a=this.h;if(null!==a){var b=!1,c=this.mayCopy();c&&null!==this.Dc?(yf(this),Df(this,!0),ef(this,this.Dc),Ef(this,this.Dc,!1),vf(this,this.Dc),null!==this.Dc&&a.gG(this.Dc.Fl())):(b=!0,yf(this),this.mayMove()&&(Ef(this,this.qc,!0),this.Jv=!1,Hf(this,a.R.ea,!0,!1),this.Jv=!0));this.Iq=!0;Xf(this,a.R.ea);if(this.ia){this.Dc=null;if(b&&null!==this.qc)for(b=this.qc.k;b.next();){var d=b.key;d instanceof R&&(d=d.hb,null===d||null===d.placeholder||this.qc.contains(d)||
d.Vz&&d.ha())}a.Oc();vf(this,this.qc);this.gf=c?"Copy":"Move";a.Ba(c?"SelectionCopied":"SelectionMoved",a.selection)}this.stopTool()}}};cf.prototype.mayCopy=function(){if(!this.qA)return!1;var a=this.h;if(null===a||a.ab||a.Ze||!a.Bm||!a.Si||(t.Vm?!a.R.alt:!a.R.control))return!1;for(a=a.selection.k;a.next();){var b=a.value;if(b.Ld()&&b.canCopy())return!0}return null!==this.Mc&&this.Zh&&this.Mc.canCopy()?!0:!1};
cf.prototype.mayDragOut=function(){if(!this.qA)return!1;var a=this.h;if(null===a||!a.Ms||!a.Si||a.Rj)return!1;for(a=a.selection.k;a.next();){var b=a.value;if(b.Ld()&&b.canCopy())return!0}return null!==this.Mc&&this.Zh&&this.Mc.canCopy()?!0:!1};cf.prototype.mayMove=function(){var a=this.h;if(null===a||a.ab||!a.Rj)return!1;for(a=a.selection.k;a.next();){var b=a.value;if(b.Ld()&&b.canMove())return!0}return null!==this.Mc&&this.Zh&&this.Mc.canMove()?!0:!1};var wf=new B(cf),ff=null,gf=null;
cf.prototype.mayDragIn=function(){var a=this.h;if(null===a||!a.Kz||a.ab||a.Ze||!a.Bm)return!1;var b=ff;return null===b||b.h.ba.Wj!==a.ba.Wj?!1:!0};cf.prototype.doSimulatedDragEnter=function(){if(this.mayDragIn()){var a=this.h;a.Ub.Al();Zf(a);a=ff;null!==a&&(a.h.$b="copy")}};cf.prototype.doSimulatedDragLeave=function(){var a=ff;null!==a&&a.doSimulatedDragOut();this.doCancel()};
cf.prototype.doSimulatedDragOver=function(){var a=this.h;if(null!==a){var b=ff;null!==b&&null!==b.qc&&this.mayDragIn()&&(a.$b="copy",$f(this,b.qc.Fl(),!1),Ef(this,this.Dc,!1),Hf(this,a.R.ea,!1,!0))}};
cf.prototype.doSimulatedDrop=function(){var a=this.h;if(null!==a){var b=ff;null!==b&&(b.Iq=!0,yf(this),this.mayDragIn()&&(this.uc("Drop"),$f(this,b.qc.Fl(),!0),Ef(this,this.Dc,!1),null!==this.Dc&&a.gG(this.Dc.Fl()),this.gf="ExternalCopy",Xf(this,a.R.ea),a.Oc(),this.Dc=null,a.Ba("ExternalObjectsDropped",a.selection),this.hk()))}};
function $f(a,b,c){if(null===a.Dc){var d=a.h;if(null!==d&&!d.ab&&!d.Ze&&null!==d.ba){d.Wa=!c;d.un=!c;a.jj=d.R.ea;d=d.Wo(b,d,!0);c=t.Gf();Cf(b,c);var f=c.x+c.width/2,g=c.y+c.height/2;t.hc(c);var h=a.Lv;c=new ia(C,Object);var k=t.K();for(b=b.k;b.next();){var l=b.value;if(l.Ld()&&l.canCopy()){var m=l.location,l=d.za(l);k.p(h.x-(f-m.x),h.y-(g-m.y));l.location=k;l.sf();c.add(l,kf(k))}}t.B(k);for(d=d.k;d.next();)f=d.value,f instanceof T&&f.canCopy()&&c.add(f,kf());a.Dc=c;df(a,c.Fl());null!==a.Mc&&(c=a.Mc,
d=c.uj(),c.ql(a.jj.x-(d.x+d.width/2),a.jj.y-(d.y+d.height/2)))}}}cf.prototype.doSimulatedDragOut=function(){var a=this.h;null!==a&&(this.mayCopy()||this.mayMove()?a.$b="":a.$b="no-drop")};
function ag(){0<arguments.length&&t.ad(ag);ae.call(this);this.XC=100;this.wC=!1;var a=new T,b=new V;b.fj=!0;b.stroke="blue";a.add(b);b=new V;b.on="Standard";b.fill="blue";b.stroke="blue";a.add(b);a.af="Tool";this.rD=a;a=new R;b=new V;b.Nd="";b.Ab="Rectangle";b.fill=null;b.stroke="magenta";b.fb=2;b.Ca=F.Ux;a.add(b);a.wl=!1;a.af="Tool";this.pD=a;this.qD=b;a=new R;b=new V;b.Nd="";b.Ab="Rectangle";b.fill=null;b.stroke="magenta";b.fb=2;b.Ca=F.Ux;a.add(b);a.wl=!1;a.af="Tool";this.sD=a;this.tD=b;this.VC=
this.UC=this.QC=this.PC=this.RC=null;this.sC=!0;this.xH=new ia(Q,"boolean");this.YC=this.Lk=this.lD=null}t.ga("LinkingBaseTool",ag);t.Ka(ag,ae);ag.prototype.doStop=function(){var a=this.h;null!==a&&tf(a);this.Kg=this.Jg=this.Ig=this.Hg=this.sc=null;this.Cx.clear();this.Ff=null};t.g(ag,"portGravity",ag.prototype.LA);t.defineProperty(ag,{LA:"portGravity"},function(){return this.XC},function(a){t.i(a,"number",ag,"portGravity");0<=a&&(this.XC=a)});t.g(ag,"isUnconnectedLinkValid",ag.prototype.Wm);
t.defineProperty(ag,{Wm:"isUnconnectedLinkValid"},function(){return this.wC},function(a){t.i(a,"boolean",ag,"isUnconnectedLinkValid");this.wC=a});t.g(ag,"temporaryLink",ag.prototype.Zf);t.defineProperty(ag,{Zf:"temporaryLink"},function(){return this.rD},function(a){t.l(a,T,ag,"temporaryLink");this.rD=a});t.g(ag,"temporaryFromNode",ag.prototype.de);t.defineProperty(ag,{de:"temporaryFromNode"},function(){return this.pD},function(a){t.l(a,R,ag,"temporaryFromNode");this.pD=a});
t.g(ag,"temporaryFromPort",ag.prototype.Dl);t.defineProperty(ag,{Dl:"temporaryFromPort"},function(){return this.qD},function(a){t.l(a,Q,ag,"temporaryFromPort");this.qD=a});t.g(ag,"temporaryToNode",ag.prototype.ee);t.defineProperty(ag,{ee:"temporaryToNode"},function(){return this.sD},function(a){t.l(a,R,ag,"temporaryToNode");this.sD=a});t.g(ag,"temporaryToPort",ag.prototype.El);t.defineProperty(ag,{El:"temporaryToPort"},function(){return this.tD},function(a){t.l(a,Q,ag,"temporaryToPort");this.tD=a});
t.g(ag,"originalLink",ag.prototype.sc);t.defineProperty(ag,{sc:"originalLink"},function(){return this.RC},function(a){null!==a&&t.l(a,T,ag,"originalLink");this.RC=a});t.g(ag,"originalFromNode",ag.prototype.Hg);t.defineProperty(ag,{Hg:"originalFromNode"},function(){return this.PC},function(a){null!==a&&t.l(a,R,ag,"originalFromNode");this.PC=a});t.g(ag,"originalFromPort",ag.prototype.Ig);
t.defineProperty(ag,{Ig:"originalFromPort"},function(){return this.QC},function(a){null!==a&&t.l(a,Q,ag,"originalFromPort");this.QC=a});t.g(ag,"originalToNode",ag.prototype.Jg);t.defineProperty(ag,{Jg:"originalToNode"},function(){return this.UC},function(a){null!==a&&t.l(a,R,ag,"originalToNode");this.UC=a});t.g(ag,"originalToPort",ag.prototype.Kg);t.defineProperty(ag,{Kg:"originalToPort"},function(){return this.VC},function(a){null!==a&&t.l(a,Q,ag,"originalToPort");this.VC=a});
t.defineProperty(ag,{Xd:"isForwards"},function(){return this.sC},function(a){t.i(a,"boolean",ag,"isForwards");this.sC=a});t.A(ag,{Cx:"validPortsCache"},function(){return this.xH});t.g(ag,"targetPort",ag.prototype.Ff);t.defineProperty(ag,{Ff:"targetPort"},function(){return this.lD},function(a){null!==a&&t.l(a,Q,ag,"targetPort");this.lD=a});
ag.prototype.copyPortProperties=function(a,b,c,d,f){if(null!==a&&null!==b&&null!==c&&null!==d){d.Ca=b.oa.size;f?(d.rb=b.rb,d.jk=b.jk):(d.ob=b.ob,d.dk=b.dk);c.bf=Hb;var g=t.K();c.location=b.pb(Hb,g);t.B(g);d.angle=b.hl();null!==this.Gt&&this.Gt(a,b,c,d,f)}};ag.prototype.setNoTargetPortProperties=function(a,b,c){null!==b&&(b.Ca=F.Ux,b.ob=wb,b.rb=wb);null!==a&&(a.location=this.h.R.ea);null!==this.Gt&&this.Gt(null,null,a,b,c)};ag.prototype.doMouseDown=function(){this.ia&&this.doMouseMove()};
ag.prototype.doMouseMove=function(){if(this.ia){var a=this.h;if(null!==a){this.Ff=this.findTargetPort(this.Xd);if(null!==this.Ff){var b=this.Ff.S;if(b instanceof R){this.Xd?this.copyPortProperties(b,this.Ff,this.ee,this.El,!0):this.copyPortProperties(b,this.Ff,this.de,this.Dl,!1);return}}this.Xd?this.setNoTargetPortProperties(this.ee,this.El,!0):this.setNoTargetPortProperties(this.de,this.Dl,!1);(a.of||a.pf)&&Uf(a,a.R.Ke)}}};
ag.prototype.findValidLinkablePort=function(a,b){if(null===a)return null;var c=a.S;if(!(c instanceof R))return null;for(;null!==a;){var d=b?a.jB:a.hA;if(!0===d&&(null!==a.Nd||a instanceof R)&&(b?this.isValidTo(c,a):this.isValidFrom(c,a)))return a;if(!1===d)break;a=a.ja}return null};
ag.prototype.findTargetPort=function(a){var b=this.h,c=b.R.ea,d=this.LA;0>=d&&(d=0.1);for(var f=this,g=b.Qm(c,d,function(b){return f.findValidLinkablePort(b,a)},null,!0),d=Infinity,b=null,g=g.k;g.next();){var h=g.value,k=h.S;if(k instanceof R){var l=h.pb(Hb,t.K()),m=c.x-l.x,n=c.y-l.y;t.B(l);l=m*m+n*n;l<d&&(m=this.Cx.za(h),null!==m?m&&(b=h,d=l):a&&this.isValidLink(this.Hg,this.Ig,k,h)||!a&&this.isValidLink(k,h,this.Jg,this.Kg)?(this.Cx.add(h,!0),b=h,d=l):this.Cx.add(h,!1))}}return null!==b&&(c=b.S,
c instanceof R&&(null===c.layer||c.layer.Cm))?b:null};ag.prototype.isValidFrom=function(a,b){if(null===a||null===b)return this.Wm;if(this.h.Ua===this&&(null!==a.layer&&!a.layer.Cm||!0!==b.hA))return!1;var c=b.FE;if(Infinity>c){if(null!==this.sc&&a===this.Hg&&b===this.Ig)return!0;var d=b.Nd;null===d&&(d="");if(a.Cw(d).count>=c)return!1}return!0};
ag.prototype.isValidTo=function(a,b){if(null===a||null===b)return this.Wm;if(this.h.Ua===this&&(null!==a.layer&&!a.layer.Cm||!0!==b.jB))return!1;var c=b.CG;if(Infinity>c){if(null!==this.sc&&a===this.Jg&&b===this.Kg)return!0;var d=b.Nd;null===d&&(d="");if(a.wg(d).count>=c)return!1}return!0};ag.prototype.isInSameNode=function(a,b){if(null===a||null===b)return!1;if(a===b)return!0;var c=a.S,d=b.S;return null!==c&&c===d};
ag.prototype.isLinked=function(a,b){if(null===a||null===b)return!1;var c=a.S;if(!(c instanceof R))return!1;var d=a.Nd;null===d&&(d="");var f=b.S;if(!(f instanceof R))return!1;var g=b.Nd;null===g&&(g="");for(f=f.wg(g);f.next();)if(g=f.value,g.aa===c&&g.Rf===d)return!0;return!1};
ag.prototype.isValidLink=function(a,b,c,d){if(!this.isValidFrom(a,b)||!this.isValidTo(c,d)||!(null===b||null===d||(b.EE&&d.BG||!this.isInSameNode(b,d))&&(b.DE&&d.AG||!this.isLinked(b,d)))||null!==this.sc&&(null!==a&&bg(this,a,this.sc)||null!==c&&bg(this,c,this.sc))||null!==a&&null!==c&&(null===a.data&&null!==c.data||null!==a.data&&null===c.data)||!cg(this,a,c,this.sc))return!1;if(null!==a){var f=a.Ap;if(null!==f&&!f(a,b,c,d,this.sc))return!1}if(null!==c&&(f=c.Ap,null!==f&&!f(a,b,c,d,this.sc)))return!1;
f=this.Ap;return null!==f?f(a,b,c,d,this.sc):!0};function bg(a,b,c){if(null===b)return!1;var d=b.$d;if(null===d)return!1;if(d===c)return!0;var f=new ma(R);f.add(b);return dg(a,d,c,f)}function dg(a,b,c,d){if(b===c)return!0;var f=b.aa;if(null!==f&&f.bi&&(d.add(f),dg(a,f.$d,c,d)))return!0;b=b.ca;return null!==b&&b.bi&&(d.add(b),dg(a,b.$d,c,d))?!0:!1}
function cg(a,b,c,d){if(null===b||null===c)return a.Wm;var f=a.h.QG;if(f!==eg){if(f===fg){if(null!==d&&!d.Ec)return!0;for(f=c.qe;f.next();){var g=f.value;if(g!==d&&g.Ec&&g.ca===c)return!1}return!mg(a,b,c,d,!0)}if(f===ng){if(null!==d&&!d.Ec)return!0;for(f=b.qe;f.next();)if(g=f.value,g!==d&&g.Ec&&g.aa===b)return!1;return!mg(a,b,c,d,!0)}if(f===og)return b===c?a=!0:(f=new ma(R),f.add(c),a=pg(a,f,b,c,d)),!a;if(f===qg)return!mg(a,b,c,d,!1);if(f===rg)return b===c?a=!0:(f=new ma(R),f.add(c),a=sg(a,f,b,c,
d)),!a}return!0}function mg(a,b,c,d,f){if(b===c)return!0;if(null===b||null===c)return!1;for(var g=b.qe;g.next();){var h=g.value;if(h!==d&&(!f||h.Ec)&&h.ca===b&&(h=h.aa,h!==b&&mg(a,h,c,d,f)))return!0}return!1}function pg(a,b,c,d,f){if(c===d)return!0;if(null===c||null===d||b.contains(c))return!1;b.add(c);for(var g=c.qe;g.next();){var h=g.value;if(h!==f&&h.ca===c&&(h=h.aa,h!==c&&pg(a,b,h,d,f)))return!0}return!1}
function sg(a,b,c,d,f){if(c===d)return!0;if(null===c||null===d||b.contains(c))return!1;b.add(c);for(var g=c.qe;g.next();){var h=g.value;if(h!==f){var k=h.aa,h=h.ca,k=k===c?h:k;if(k!==c&&sg(a,b,k,d,f))return!0}}return!1}t.g(ag,"linkValidation",ag.prototype.Ap);t.defineProperty(ag,{Ap:"linkValidation"},function(){return this.Lk},function(a){null!==a&&t.i(a,"function",ag,"linkValidation");this.Lk=a});t.g(ag,"portTargeted",ag.prototype.Gt);
t.defineProperty(ag,{Gt:"portTargeted"},function(){return this.YC},function(a){null!==a&&t.i(a,"function",ag,"portTargeted");this.YC=a});function qa(){0<arguments.length&&t.ad(qa);ag.call(this);this.name="Linking";this.ly={};this.ky=null;this.sa=tg;this.uz=this.hD=null}t.ga("LinkingTool",qa);t.Ka(qa,ag);var tg;qa.Either=tg=t.w(qa,"Either",0);var ug;qa.ForwardsOnly=ug=t.w(qa,"ForwardsOnly",0);var vg;qa.BackwardsOnly=vg=t.w(qa,"BackwardsOnly",0);t.g(qa,"archetypeLinkData",qa.prototype.KD);
t.defineProperty(qa,{KD:"archetypeLinkData"},function(){return this.ly},function(a){null!==a&&t.l(a,Object,qa,"archetypeLinkData");a instanceof Q&&t.l(a,T,qa,"archetypeLinkData");this.ly=a});t.g(qa,"archetypeLabelNodeData",qa.prototype.Oz);t.defineProperty(qa,{Oz:"archetypeLabelNodeData"},function(){return this.ky},function(a){null!==a&&t.l(a,Object,qa,"archetypeLabelNodeData");a instanceof Q&&t.l(a,R,qa,"archetypeLabelNodeData");this.ky=a});t.g(qa,"direction",qa.prototype.direction);
t.defineProperty(qa,{direction:"direction"},function(){return this.sa},function(a){t.Aa(a,qa,qa,"direction");this.sa=a});t.g(qa,"startObject",qa.prototype.fB);t.defineProperty(qa,{fB:"startObject"},function(){return this.hD},function(a){null!==a&&t.l(a,Q,qa,"startObject");this.hD=a});t.A(qa,{yx:"startPort"},function(){return this.uz});
qa.prototype.canStart=function(){if(!this.isEnabled)return!1;var a=this.h;if(null===a||a.ab||a.Ze||!a.Cm)return!1;var b=a.ba;return null!==b&&(b instanceof M||b instanceof Kd)&&a.R.left&&(a.Ua===this||this.isBeyondDragSize())?null!==this.findLinkablePort():!1};
qa.prototype.findLinkablePort=function(){var a=this.h;if(null===a)return null;var b=this.fB;null===b&&(b=a.pe(a.Nc.ea,null,null));if(null===b||!(b.S instanceof R))return null;var c=this.direction;if(c===tg||c===ug)if(a=this.findValidLinkablePort(b,!1),null!==a)return this.Xd=!0,a;if(c===tg||c===vg)if(a=this.findValidLinkablePort(b,!0),null!==a)return this.Xd=!1,a;return null};
qa.prototype.doActivate=function(){var a=this.h;if(null!==a&&(null===this.yx&&(this.uz=this.findLinkablePort()),null!==this.yx)){this.uc(this.name);a.Kd=!0;a.$b="pointer";if(this.Xd){this.Ig=this.yx;var b=this.Ig.S;b instanceof R&&(this.Hg=b);this.copyPortProperties(this.Hg,this.Ig,this.de,this.Dl,!1)}else this.Kg=this.yx,b=this.Kg.S,b instanceof R&&(this.Jg=b),this.copyPortProperties(this.Jg,this.Kg,this.ee,this.El,!0);a.add(this.de);a.add(this.ee);null!==this.Zf&&(null!==this.de&&(this.Zf.aa=this.de),
null!==this.ee&&(this.Zf.ca=this.ee),this.Zf.ac(),a.add(this.Zf));this.ia=!0}};qa.prototype.doDeactivate=function(){this.ia=!1;var a=this.h;null!==a&&(a.remove(this.Zf),a.remove(this.de),a.remove(this.ee),a.Kd=!1,a.$b="",this.hk())};qa.prototype.doStop=function(){ag.prototype.doStop.call(this);this.fB=this.uz=null};
qa.prototype.doMouseUp=function(){if(this.ia){var a=this.h;if(null===a)return;var b=this.gf=null,c=null,d=null,f=null,g=this.Ff=this.findTargetPort(this.Xd),h=null;null!==g?(h=g.S,h instanceof R&&(this.Xd?(null!==this.Hg&&(b=this.Hg,c=this.Ig),d=h,f=g):(b=h,c=g,null!==this.Jg&&(d=this.Jg,f=this.Kg)))):this.Xd?null!==this.Hg&&this.Wm&&(b=this.Hg,c=this.Ig):null!==this.Jg&&this.Wm&&(d=this.Jg,f=this.Kg);if(null!==b||null!==d)b=this.insertLink(b,c,d,f),null!==b?(null===g&&(this.Xd?b.Jn=a.R.ea.copy():
b.Fn=a.R.ea.copy()),a.Pe&&a.select(b),this.gf=this.name,a.Ba("LinkDrawn",b)):a.ba.UD()}this.stopTool()};
qa.prototype.insertLink=function(a,b,c,d){var f=this.h;if(null===f)return null;var g=f.ba;if(null===g)return null;if(g instanceof Kd){var h=a;b=c;f.pd||(h=c,b=a);if(null!==h&&null!==b)return g.lh(b.data,g.Hb(h.data)),b.ft()}else if(g instanceof M)if(h="",null!==a&&(null===b&&(b=a),h=b.Nd,null===h&&(h="")),b="",null!==c&&(null===d&&(d=c),b=d.Nd,null===b&&(b="")),d=this.KD,d instanceof T){if(Le(d),g=d.copy(),g instanceof T)return g.aa=a,g.Rf=h,g.ca=c,g.Og=b,f.add(g),a=this.Oz,a instanceof R&&(Le(a),
a=a.copy(),a instanceof R&&(a.$d=g,f.add(a))),g}else if(null!==d&&(d=g.eE(d),t.qb(d)))return null!==a&&g.ux(d,g.Hb(a.data)),g.$A(d,h),null!==c&&g.wx(d,g.Hb(c.data)),g.cB(d,b),g.aw(d),a=this.Oz,null===a||a instanceof R||(a=g.copyNodeData(a),t.qb(a)&&(g.Am(a),a=g.Hb(a),void 0!==a&&g.GD(d,a))),g=f.Qf(d);return null};
function hf(){0<arguments.length&&t.ad(hf);ag.call(this);this.name="Relinking";var a=new V;a.Ab="Diamond";a.Ca=F.Nx;a.fill="lightblue";a.stroke="dodgerblue";a.cursor="pointer";a.Cf=0;this.hC=a;a=new V;a.Ab="Diamond";a.Ca=F.Nx;a.fill="lightblue";a.stroke="dodgerblue";a.cursor="pointer";a.Cf=-1;this.uD=a;this.dc=null;this.SC=new x}t.ga("RelinkingTool",hf);t.Ka(hf,ag);
hf.prototype.updateAdornments=function(a){if(null!==a&&a instanceof T){var b="RelinkFrom",c=null;if(a.eb&&!this.h.ab){var d=a.Pt;null!==d&&a.canRelinkFrom()&&a.oa.N()&&a.La()&&d.oa.N()&&d.pl()&&(c=a.bp(b),null===c&&(c=this.makeAdornment(d,!1),null!==c&&(c.Zc=b),a.Wk(b,c)))}null===c&&a.vl(b);b="RelinkTo";c=null;a.eb&&!this.h.ab&&(d=a.Pt,null!==d&&a.canRelinkTo()&&a.oa.N()&&a.La()&&d.oa.N()&&d.pl()&&(c=a.bp(b),null===c&&(c=this.makeAdornment(d,!0),null!==c&&(c.Zc=b),a.Wk(b,c))));null===c&&a.vl(b)}};
hf.prototype.makeAdornment=function(a,b){var c=new Je;c.type=wg;var d=b?this.aK:this.GI;null!==d&&c.add(d.copy());c.pc=a;return c};t.defineProperty(hf,{GI:"fromHandleArchetype"},function(){return this.hC},function(a){null!==a&&t.l(a,Q,hf,"fromHandleArchetype");this.hC=a});t.defineProperty(hf,{aK:"toHandleArchetype"},function(){return this.uD},function(a){null!==a&&t.l(a,Q,hf,"toHandleArchetype");this.uD=a});t.A(hf,{handle:"handle"},function(){return this.dc});
hf.prototype.canStart=function(){if(!this.isEnabled)return!1;var a=this.h;if(null===a||a.ab||a.Ze||!a.Sj)return!1;var b=a.ba;if(null===b||!(b instanceof M||b instanceof Kd)||!a.R.left)return!1;b=this.findToolHandleAt(a.Nc.ea,"RelinkFrom");null===b&&(b=this.findToolHandleAt(a.Nc.ea,"RelinkTo"));return null!==b};
hf.prototype.doActivate=function(){var a=this.h;if(null!==a){if(null===this.sc){var b=this.findToolHandleAt(a.Nc.ea,"RelinkFrom");null===b&&(b=this.findToolHandleAt(a.Nc.ea,"RelinkTo"));if(null===b)return;var c=b.S;if(!(c instanceof Je&&c.Wh instanceof T))return;this.dc=b;this.Xd=null===c||"RelinkTo"===c.Zc;this.sc=c.Wh}this.uc(this.name);a.Kd=!0;a.$b="pointer";this.Ig=this.sc.ud;this.Hg=this.sc.aa;this.Kg=this.sc.fe;this.Jg=this.sc.ca;this.SC.set(this.sc.oa);null!==this.sc&&0<this.sc.pa&&(null===
this.sc.aa&&(null!==this.Dl&&(this.Dl.Ca=F.gq),null!==this.de&&(this.de.location=this.sc.o(0))),null===this.sc.ca&&(null!==this.El&&(this.El.Ca=F.gq),null!==this.ee&&(this.ee.location=this.sc.o(this.sc.pa-1))));this.copyPortProperties(this.Hg,this.Ig,this.de,this.Dl,!1);this.copyPortProperties(this.Jg,this.Kg,this.ee,this.El,!0);a.add(this.de);a.add(this.ee);null!==this.Zf&&(null!==this.de&&(this.Zf.aa=this.de),null!==this.ee&&(this.Zf.ca=this.ee),this.copyLinkProperties(this.sc,this.Zf),this.Zf.ac(),
a.add(this.Zf));this.ia=!0}};hf.prototype.copyLinkProperties=function(a,b){if(null!==a&&null!==b){b.Lo=a.Lo;b.sw=a.sw;var c=a.De;if(c===xg||c===yg)c=zg;b.De=c;b.Xs=a.Xs;b.Lt=a.Lt;b.mn=a.mn;b.ob=a.ob;b.dk=a.dk;b.hp=a.hp;b.ip=a.ip;b.rb=a.rb;b.jk=a.jk;b.Xp=a.Xp;b.Yp=a.Yp}};hf.prototype.doDeactivate=function(){this.ia=!1;var a=this.h;null!==a&&(a.remove(this.Zf),a.remove(this.de),a.remove(this.ee),a.Kd=!1,a.$b="",this.hk())};hf.prototype.doStop=function(){ag.prototype.doStop.call(this);this.dc=null};
hf.prototype.doMouseUp=function(){if(this.ia){var a=this.h;if(null===a)return;this.gf=null;var b=this.Hg,c=this.Ig,d=this.Jg,f=this.Kg,g=this.sc;this.Ff=this.findTargetPort(this.Xd);if(null!==this.Ff){var h=this.Ff.S;h instanceof R&&(this.Xd?(d=h,f=this.Ff):(b=h,c=this.Ff))}else this.Wm?this.Xd?f=d=null:c=b=null:g=null;null!==g&&(this.reconnectLink(g,this.Xd?d:b,this.Xd?f:c,this.Xd),null===this.Ff&&(this.Xd?g.Jn=a.R.ea.copy():g.Fn=a.R.ea.copy(),g.ac()),a.Pe&&(g.eb=!0),this.gf=this.name,a.Ba("LinkRelinked",
g,this.Xd?this.Kg:this.Ig));Ag(this.sc,this.SC)}this.stopTool()};hf.prototype.reconnectLink=function(a,b,c,d){if(null===this.h)return!1;c=null!==c&&null!==c.Nd?c.Nd:"";d?(a.ca=b,a.Og=c):(a.aa=b,a.Rf=c);return!0};function Wf(a,b,c,d,f){null!==b?(a.copyPortProperties(b,c,a.de,a.Dl,!1),a.h.add(a.de)):a.h.remove(a.de);null!==d?(a.copyPortProperties(d,f,a.ee,a.El,!0),a.h.add(a.ee)):a.h.remove(a.ee)}
function Bg(){0<arguments.length&&t.ad(Bg);ae.call(this);this.name="LinkReshaping";var a=new V;a.Ab="Rectangle";a.Ca=F.dq;a.fill="lightblue";a.stroke="dodgerblue";this.Fk=a;a=new V;a.Ab="Diamond";a.Ca=F.dq;a.fill="lightblue";a.stroke="dodgerblue";this.DC=a;this.ZC=3;this.iy=this.dc=null;this.TC=new w;this.mz=null}t.ga("LinkReshapingTool",Bg);t.Ka(Bg,ae);var Jg;Bg.None=Jg=t.w(Bg,"None",0);var Lg;Bg.Horizontal=Lg=t.w(Bg,"Horizontal",1);var Mg;Bg.Vertical=Mg=t.w(Bg,"Vertical",2);var Ng;
Bg.All=Ng=t.w(Bg,"All",3);function Og(a,b){t.l(a,Q,Bg,"setReshapingBehavior:obj");t.Aa(b,Bg,Bg,"setReshapingBehavior:behavior");a.Av=b}Bg.prototype.updateAdornments=function(a){if(null!==a&&a instanceof T){if(a.eb&&!this.h.ab){var b=a.path;if(null!==b&&a.canReshape()&&a.oa.N()&&a.La()&&b.oa.N()&&b.pl()){var c=a.bp(this.name);if(null===c||c.qH!==a.pa||c.zH!==a.Kp)c=this.makeAdornment(b),null!==c&&(c.qH=a.pa,c.zH=a.Kp,a.Wk(this.name,c));if(null!==c){c.location=a.position;return}}}a.vl(this.name)}};
Bg.prototype.makeAdornment=function(a){var b=a.S,c=b.pa,d=b.ic,f=null;if(null!==b.points&&1<c){f=new Je;f.type=wg;var c=b.gt,g=b.Ww,h=d?1:0;if(b.Kp&&b.De!==Pg)for(var k=c+h;k<g-h;k++){var l=this.makeResegmentHandle(a,k);null!==l&&(l.Cf=k,l.Nt=0.5,f.add(l))}for(k=c+1;k<g;k++)if(l=this.makeHandle(a,k),null!==l){l.Cf=k;if(k!==c)if(k===c+1&&d){var h=b.o(c),m=b.o(c+1);F.I(h.x,m.x)&&F.I(h.y,m.y)&&(m=b.o(c-1));F.I(h.x,m.x)?(Og(l,Mg),l.cursor="n-resize"):F.I(h.y,m.y)&&(Og(l,Lg),l.cursor="w-resize")}else k===
g-1&&d?(h=b.o(g-1),m=b.o(g),F.I(h.x,m.x)&&F.I(h.y,m.y)&&(h=b.o(g+1)),F.I(h.x,m.x)?(Og(l,Mg),l.cursor="n-resize"):F.I(h.y,m.y)&&(Og(l,Lg),l.cursor="w-resize")):k!==g&&(Og(l,Ng),l.cursor="move");f.add(l)}f.Zc=this.name;f.pc=a}return f};Bg.prototype.makeHandle=function(){var a=this.it;return null===a?null:a.copy()};t.defineProperty(Bg,{it:"handleArchetype"},function(){return this.Fk},function(a){null!==a&&t.l(a,Q,Bg,"handleArchetype");this.Fk=a});
Bg.prototype.makeResegmentHandle=function(){var a=this.oJ;return null===a?null:a.copy()};t.defineProperty(Bg,{oJ:"midHandleArchetype"},function(){return this.DC},function(a){null!==a&&t.l(a,Q,Bg,"midHandleArchetype");this.DC=a});t.A(Bg,{handle:"handle"},function(){return this.dc});t.A(Bg,{Ls:"adornedLink"},function(){return this.iy});Bg.prototype.canStart=function(){if(!this.isEnabled)return!1;var a=this.h;return null!==a&&!a.ab&&a.No&&a.R.left?null!==this.findToolHandleAt(a.Nc.ea,this.name):!1};
Bg.prototype.doActivate=function(){var a=this.h;if(null!==a&&(this.dc=this.findToolHandleAt(a.Nc.ea,this.name),null!==this.dc)){var b=this.dc.S.Wh;if(b instanceof T){this.iy=b;a.Kd=!0;this.uc(this.name);if(b.Kp&&0.5===this.dc.Nt){var c=b.points.copy(),d=this.dc.pb(Hb);c.Jd(this.dc.Cf+1,d);b.ic&&c.Jd(this.dc.Cf+1,d);b.points=c;b.Wi();b.updateAdornments();this.dc=this.findToolHandleAt(a.Nc.ea,this.name)}this.TC=b.o(this.dc.Cf);this.mz=b.points.copy();this.ia=!0}}};
Bg.prototype.doDeactivate=function(){this.hk();this.iy=this.dc=null;var a=this.h;null!==a&&(a.Kd=!1);this.ia=!1};Bg.prototype.doCancel=function(){var a=this.Ls;null!==a&&(a.points=this.mz);this.stopTool()};Bg.prototype.doMouseMove=function(){var a=this.h;this.ia&&null!==a&&(a=this.computeReshape(a.R.ea),this.reshape(a))};
Bg.prototype.doMouseUp=function(){var a=this.h;if(this.ia&&null!==a){var b=this.computeReshape(a.R.ea);this.reshape(b);b=this.Ls;if(null!==b&&b.Kp){var c=this.handle.Cf,d=b.o(c-1),f=b.o(c),g=b.o(c+1);if(b.ic){if(c>b.gt+1&&c<b.Ww-1){var h=b.o(c-2);if(Math.abs(d.x-f.x)<this.Lg&&Math.abs(d.y-f.y)<this.Lg&&(Qg(this,h,d,f,g,!0)||Qg(this,h,d,f,g,!1))){var k=b.points.copy();Qg(this,h,d,f,g,!0)?(k.Mg(c-2,new w(h.x,(g.y+h.y)/2)),k.Mg(c+1,new w(g.x,(g.y+h.y)/2))):(k.Mg(c-2,new w((g.x+h.x)/2,h.y)),k.Mg(c+1,
new w((g.x+h.x)/2,g.y)));k.qd(c);k.qd(c-1);b.points=k;b.Wi();b.updateAdornments()}else h=b.o(c+2),Math.abs(f.x-g.x)<this.Lg&&Math.abs(f.y-g.y)<this.Lg&&(Qg(this,d,f,g,h,!0)||Qg(this,d,f,g,h,!1))&&(k=b.points.copy(),Qg(this,d,f,g,h,!0)?(k.Mg(c-1,new w(d.x,(d.y+h.y)/2)),k.Mg(c+2,new w(h.x,(d.y+h.y)/2))):(k.Mg(c-1,new w((d.x+h.x)/2,d.y)),k.Mg(c+2,new w((d.x+h.x)/2,h.y))),k.qd(c+1),k.qd(c),b.points=k,b.Wi(),b.updateAdornments())}}else h=t.K(),F.dn(d.x,d.y,g.x,g.y,f.x,f.y,h)&&h.Zj(f)<this.Lg*this.Lg&&
(k=b.points.copy(),k.qd(c),b.points=k,b.Wi(),b.updateAdornments()),t.B(h)}a.Oc();this.gf=this.name;a.Ba("LinkReshaped",this.Ls)}this.stopTool()};function Qg(a,b,c,d,f,g){return g?Math.abs(b.y-c.y)<a.Lg&&Math.abs(c.y-d.y)<a.Lg&&Math.abs(d.y-f.y)<a.Lg:Math.abs(b.x-c.x)<a.Lg&&Math.abs(c.x-d.x)<a.Lg&&Math.abs(d.x-f.x)<a.Lg}t.g(Bg,"resegmentingDistance",Bg.prototype.Lg);
t.defineProperty(Bg,{Lg:"resegmentingDistance"},function(){return this.ZC},function(a){t.i(a,"number",Bg,"resegmentingDistance");this.ZC=a});
Bg.prototype.reshape=function(a){var b=this.Ls;b.zl();var c=this.handle.Cf,d=this.handle&&this.handle.Av?this.handle.Av:Jg;if(b.ic)if(c===b.gt+1)c=b.gt+1,d===Mg?(b.Y(c,b.o(c-1).x,a.y),b.Y(c+1,b.o(c+2).x,a.y)):d===Lg&&(b.Y(c,a.x,b.o(c-1).y),b.Y(c+1,a.x,b.o(c+2).y));else if(c===b.Ww-1)c=b.Ww-1,d===Mg?(b.Y(c-1,b.o(c-2).x,a.y),b.Y(c,b.o(c+1).x,a.y)):d===Lg&&(b.Y(c-1,a.x,b.o(c-2).y),b.Y(c,a.x,b.o(c+1).y));else{var d=c,f=b.o(d),g=b.o(d-1),h=b.o(d+1);F.I(g.x,f.x)&&F.I(f.y,h.y)?(F.I(g.x,b.o(d-2).x)&&!F.I(g.y,
b.o(d-2).y)?(b.C(d,a.x,g.y),c++,d++):b.Y(d-1,a.x,g.y),F.I(h.y,b.o(d+2).y)&&!F.I(h.x,b.o(d+2).x)?b.C(d+1,h.x,a.y):b.Y(d+1,h.x,a.y)):F.I(g.y,f.y)&&F.I(f.x,h.x)?(F.I(g.y,b.o(d-2).y)&&!F.I(g.x,b.o(d-2).x)?(b.C(d,g.x,a.y),c++,d++):b.Y(d-1,g.x,a.y),F.I(h.x,b.o(d+2).x)&&!F.I(h.y,b.o(d+2).y)?b.C(d+1,a.x,h.y):b.Y(d+1,a.x,h.y)):F.I(g.x,f.x)&&F.I(f.x,h.x)?(F.I(g.x,b.o(d-2).x)&&!F.I(g.y,b.o(d-2).y)?(b.C(d,a.x,g.y),c++,d++):b.Y(d-1,a.x,g.y),F.I(h.x,b.o(d+2).x)&&!F.I(h.y,b.o(d+2).y)?b.C(d+1,a.x,h.y):b.Y(d+1,a.x,
h.y)):F.I(g.y,f.y)&&F.I(f.y,h.y)&&(F.I(g.y,b.o(d-2).y)&&!F.I(g.x,b.o(d-2).x)?(b.C(d,g.x,a.y),c++,d++):b.Y(d-1,g.x,a.y),F.I(h.y,b.o(d+2).y)&&!F.I(h.x,b.o(d+2).x)?b.C(d+1,h.x,a.y):b.Y(d+1,h.x,a.y));b.Y(c,a.x,a.y)}else b.Y(c,a.x,a.y),1===c&&b.computeSpot(!0).Ge()&&(f=b.aa,g=b.ud,null===f||f.La()||(f=f.findVisibleNode(),f!==b.aa&&(g=f.gl(""))),d=g.pb(Hb,t.K()),f=b.getLinkPointFromPoint(f,g,d,a,!0,t.K()),b.Y(0,f.x,f.y),t.B(d),t.B(f)),c===b.pa-2&&b.computeSpot(!1).Ge()&&(c=b.ca,f=b.fe,null===c||c.La()||
(c=c.findVisibleNode(),c!==b.ca&&(f=c.gl(""))),d=f.pb(Hb,t.K()),f=b.getLinkPointFromPoint(c,f,d,a,!1,t.K()),b.Y(b.pa-1,f.x,f.y),t.B(d),t.B(f));b.Xi()};Bg.prototype.computeReshape=function(a){var b=this.Ls,c=this.handle.Cf;switch(this.handle&&this.handle.Av?this.handle.Av:Jg){case Ng:return a;case Mg:return b=b.o(c),new w(b.x,a.y);case Lg:return b=b.o(c),new w(a.x,b.y);default:case Jg:return b.o(c)}};t.g(Bg,"originalPoint",Bg.prototype.yJ);t.A(Bg,{yJ:"originalPoint"},function(){return this.TC});
t.g(Bg,"originalPoints",Bg.prototype.zJ);t.A(Bg,{zJ:"originalPoints"},function(){return this.mz});
function Rg(){0<arguments.length&&t.ad(Rg);ae.call(this);this.name="Resizing";this.Ej=(new fa(1,1)).freeze();this.Dj=(new fa(9999,9999)).freeze();this.pj=(new fa(NaN,NaN)).freeze();this.Wq=!1;this.sb=null;var a=new V;a.Qj=Hb;a.Ab="Rectangle";a.Ca=F.dq;a.fill="lightblue";a.stroke="dodgerblue";a.fb=1;a.cursor="pointer";this.Fk=a;this.dc=null;this.vv=new fa;this.lz=new w;this.Qy=new fa(0,0);this.Py=new fa(Infinity,Infinity);this.Oy=new fa(1,1);this.MC=!0}t.ga("ResizingTool",Rg);t.Ka(Rg,ae);
Rg.prototype.updateAdornments=function(a){if(!(null===a||a instanceof T)){if(a.eb&&!this.h.ab){var b=a.WF;if(null!==b&&a.canResize()&&a.oa.N()&&a.La()&&b.oa.N()&&b.pl()){var c=a.bp(this.name);null===c&&(c=this.makeAdornment(b));if(null!==c){var d=b.hl();c.angle=d;var f=b.pb(c.bf,t.K()),g=b.ek();c.location=f;t.B(f);f=c.placeholder;if(null!==f){var b=b.Pa,h=t.Cl();h.p(b.width*g,b.height*g);f.Ca=h;t.ck(h)}Sg(this,c,d);a.Wk(this.name,c);return}}}a.vl(this.name)}};
Rg.prototype.makeAdornment=function(a){var b=null,b=a.S.UF;if(null===b){b=new Je;b.type=Tg;b.bf=Hb;var c=new Ug;c.fj=!0;b.add(c);b.add(this.makeHandle(a,Eb));b.add(this.makeHandle(a,Gb));b.add(this.makeHandle(a,Pb));b.add(this.makeHandle(a,Lb));b.add(this.makeHandle(a,Qb));b.add(this.makeHandle(a,Wb));b.add(this.makeHandle(a,Xb));b.add(this.makeHandle(a,Vb))}else if(Le(b),b=b.copy(),!(b instanceof Je))return null;b.Zc=this.name;b.pc=a;return b};
Rg.prototype.makeHandle=function(a,b){var c=this.it;if(null===c)return null;c=c.copy();c.alignment=b;return c};
function Sg(a,b,c){if(null!==b)if(!b.alignment.Pc()&&""!==b.cursor)a:{a=b.alignment;a.Ge()&&(a=Hb);if(0>=a.x)c=0>=a.y?c+225:1<=a.y?c+135:c+180;else if(1<=a.x)0>=a.y?c+=315:1<=a.y&&(c+=45);else if(0>=a.y)c+=270;else if(1<=a.y)c+=90;else break a;0>c?c+=360:360<=c&&(c-=360);b.cursor=22.5>c?"e-resize":67.5>c?"se-resize":112.5>c?"s-resize":157.5>c?"sw-resize":202.5>c?"w-resize":247.5>c?"nw-resize":292.5>c?"n-resize":337.5>c?"ne-resize":"e-resize"}else if(b instanceof y)for(b=b.elements;b.next();)Sg(a,
b.value,c)}t.defineProperty(Rg,{it:"handleArchetype"},function(){return this.Fk},function(a){null!==a&&t.l(a,Q,Rg,"handleArchetype");this.Fk=a});t.A(Rg,{handle:"handle"},function(){return this.dc});t.defineProperty(Rg,{pc:"adornedObject"},function(){return this.sb},function(a){null!==a&&t.l(a,Q,Rg,"adornedObject");this.sb=a});Rg.prototype.canStart=function(){if(!this.isEnabled)return!1;var a=this.h;return null!==a&&!a.ab&&a.Oo&&a.R.left?null!==this.findToolHandleAt(a.Nc.ea,this.name)?!0:!1:!1};
Rg.prototype.doActivate=function(){var a=this.h;null!==a&&(this.dc=this.findToolHandleAt(a.Nc.ea,this.name),null!==this.dc&&(this.sb=this.dc.S.pc,this.lz.set(this.sb.S.location),this.vv.set(this.sb.Ca),this.Oy=this.computeCellSize(),this.Qy=this.computeMinSize(),this.Py=this.computeMaxSize(),a.Kd=!0,this.MC=a.Ub.isEnabled,a.Ub.isEnabled=!1,this.uc(this.name),this.ia=!0))};Rg.prototype.doDeactivate=function(){var a=this.h;null!==a&&(this.hk(),this.sb=this.dc=null,this.ia=a.Kd=!1,a.Ub.isEnabled=this.MC)};
Rg.prototype.doCancel=function(){this.sb.Ca=this.vv;this.sb.S.location=this.lz;this.stopTool()};Rg.prototype.doMouseMove=function(){var a=this.h;if(this.ia&&null!==a){var b=this.Qy,c=this.Py,d=this.Oy,f=this.sb.JE(a.R.ea,t.K()),g=Vg;this.sb instanceof V&&(g=Wg(this.sb));b=this.computeResize(f,this.dc.alignment,b,c,d,!(g===Xg||g===Yg||a.R.shift));this.resize(b);a.Uf();t.B(f)}};
Rg.prototype.doMouseUp=function(){var a=this.h;if(this.ia&&null!==a){var b=this.Qy,c=this.Py,d=this.Oy,f=this.sb.JE(a.R.ea,t.K()),g=Vg;this.sb instanceof V&&(g=Wg(this.sb));b=this.computeResize(f,this.dc.alignment,b,c,d,!(g===Xg||g===Yg||a.R.shift));this.resize(b);t.B(f);a.Oc();this.gf=this.name;a.Ba("PartResized",this.sb,this.vv)}this.stopTool()};
Rg.prototype.resize=function(a){if(null!==this.h){var b=this.pc,c=b.S,d=b.hl(),f=b.ek(),g=Math.PI*d/180,h=Math.cos(g),g=Math.sin(g),k=0<d&&180>d?1:0,l=90<d&&270>d?1:0,d=180<d&&360>d?1:0,m=a.width-b.Pa.width,n=a.height-b.Pa.height,p=c.position.copy();p.x+=f*((a.x+m*l)*h-(a.y+n*k)*g);p.y+=f*((a.x+m*d)*g+(a.y+n*l)*h);b.Ca=a.size;c.sf();c.move(p)}};
Rg.prototype.computeResize=function(a,b,c,d,f,g){b.Ge()&&(b=Hb);var h=this.pc.Pa,k=h.x,l=h.y,m=h.x+h.width,n=h.y+h.height,p=1;if(!g){var p=h.width,q=h.height;0>=p&&(p=1);0>=q&&(q=1);p=q/p}q=t.K();F.dt(a.x,a.y,k,l,f.width,f.height,q);a=h.copy();0>=b.x?0>=b.y?(a.x=Math.max(q.x,m-d.width),a.x=Math.min(a.x,m-c.width),a.width=Math.max(m-a.x,c.width),a.y=Math.max(q.y,n-d.height),a.y=Math.min(a.y,n-c.height),a.height=Math.max(n-a.y,c.height),g||(b=a.height/a.width,p<b?(a.height=p*a.width,a.y=n-a.height):
(a.width=a.height/p,a.x=m-a.width))):1<=b.y?(a.x=Math.max(q.x,m-d.width),a.x=Math.min(a.x,m-c.width),a.width=Math.max(m-a.x,c.width),a.height=Math.max(Math.min(q.y-l,d.height),c.height),g||(b=a.height/a.width,p<b?a.height=p*a.width:(a.width=a.height/p,a.x=m-a.width))):(a.x=Math.max(q.x,m-d.width),a.x=Math.min(a.x,m-c.width),a.width=m-a.x,g||(a.height=p*a.width,a.y=l+0.5*(n-l-a.height))):1<=b.x?0>=b.y?(a.width=Math.max(Math.min(q.x-k,d.width),c.width),a.y=Math.max(q.y,n-d.height),a.y=Math.min(a.y,
n-c.height),a.height=Math.max(n-a.y,c.height),g||(b=a.height/a.width,p<b?(a.height=p*a.width,a.y=n-a.height):a.width=a.height/p)):1<=b.y?(a.width=Math.max(Math.min(q.x-k,d.width),c.width),a.height=Math.max(Math.min(q.y-l,d.height),c.height),g||(b=a.height/a.width,p<b?a.height=p*a.width:a.width=a.height/p)):(a.width=Math.max(Math.min(q.x-k,d.width),c.width),g||(a.height=p*a.width,a.y=l+0.5*(n-l-a.height))):0>=b.y?(a.y=Math.max(q.y,n-d.height),a.y=Math.min(a.y,n-c.height),a.height=n-a.y,g||(a.width=
a.height/p,a.x=k+0.5*(m-k-a.width))):1<=b.y&&(a.height=Math.max(Math.min(q.y-l,d.height),c.height),g||(a.width=a.height/p,a.x=k+0.5*(m-k-a.width)));t.B(q);return a};Rg.prototype.computeMinSize=function(){var a=this.pc.Vf.copy(),b=this.Vf;!isNaN(b.width)&&b.width>a.width&&(a.width=b.width);!isNaN(b.height)&&b.height>a.height&&(a.height=b.height);return a};
Rg.prototype.computeMaxSize=function(){var a=this.pc.He.copy(),b=this.He;!isNaN(b.width)&&b.width<a.width&&(a.width=b.width);!isNaN(b.height)&&b.height<a.height&&(a.height=b.height);return a};
Rg.prototype.computeCellSize=function(){var a=new fa(NaN,NaN),b=this.pc.S;if(b){var c=b.VF;!isNaN(c.width)&&0<c.width&&(a.width=c.width);!isNaN(c.height)&&0<c.height&&(a.height=c.height)}c=this.al;isNaN(a.width)&&!isNaN(c.width)&&0<c.width&&(a.width=c.width);isNaN(a.height)&&!isNaN(c.height)&&0<c.height&&(a.height=c.height);b=this.h;(isNaN(a.width)||isNaN(a.height))&&b&&(c=b.wb.Hd,null!==c&&c.qp&&(c=c.lA,isNaN(a.width)&&!isNaN(c.width)&&0<c.width&&(a.width=c.width),isNaN(a.height)&&!isNaN(c.height)&&
0<c.height&&(a.height=c.height)),b=b.lp,null!==b&&b.visible&&this.qp&&(c=b.ht,isNaN(a.width)&&!isNaN(c.width)&&0<c.width&&(a.width=c.width),isNaN(a.height)&&!isNaN(c.height)&&0<c.height&&(a.height=c.height)));if(isNaN(a.width)||0===a.width||Infinity===a.width)a.width=1;if(isNaN(a.height)||0===a.height||Infinity===a.height)a.height=1;return a};t.g(Rg,"minSize",Rg.prototype.Vf);
t.defineProperty(Rg,{Vf:"minSize"},function(){return this.Ej},function(a){t.l(a,fa,Rg,"minSize");if(!this.Ej.M(a)){var b=a.width;isNaN(b)&&(b=0);a=a.height;isNaN(a)&&(a=0);this.Ej.p(b,a)}});t.g(Rg,"maxSize",Rg.prototype.He);t.defineProperty(Rg,{He:"maxSize"},function(){return this.Dj},function(a){t.l(a,fa,Rg,"maxSize");if(!this.Dj.M(a)){var b=a.width;isNaN(b)&&(b=Infinity);a=a.height;isNaN(a)&&(a=Infinity);this.Dj.p(b,a)}});t.g(Rg,"cellSize",Rg.prototype.al);
t.defineProperty(Rg,{al:"cellSize"},function(){return this.pj},function(a){t.l(a,fa,Rg,"cellSize");this.pj.M(a)||this.pj.assign(a)});t.g(Rg,"isGridSnapEnabled",Rg.prototype.qp);t.defineProperty(Rg,{qp:"isGridSnapEnabled"},function(){return this.Wq},function(a){t.i(a,"boolean",Rg,"isGridSnapEnabled");this.Wq=a});t.g(Rg,"originalDesiredSize",Rg.prototype.wJ);t.A(Rg,{wJ:"originalDesiredSize"},function(){return this.vv});t.g(Rg,"originalLocation",Rg.prototype.xJ);t.A(Rg,{xJ:"originalLocation"},function(){return this.lz});
function Zg(){0<arguments.length&&t.ad(Zg);ae.call(this);this.name="Rotating";this.eD=45;this.dD=2;this.sb=null;var a=new V;a.Ab="Ellipse";a.Ca=F.Nx;a.fill="lightblue";a.stroke="dodgerblue";a.fb=1;a.cursor="pointer";this.Fk=a;this.dc=null;this.uv=0;this.$C=new w}t.ga("RotatingTool",Zg);t.Ka(Zg,ae);
Zg.prototype.updateAdornments=function(a){if(!(null===a||a instanceof T)){if(a.eb&&!this.h.ab){var b=a.aG;if(null!==b&&a.canRotate()&&a.oa.N()&&a.La()&&b.oa.N()&&b.pl()){var c=a.bp(this.name);null===c&&(c=this.makeAdornment(b));if(null!==c){c.angle=b.hl();var d=null,f=null;b===a||b===a.kc?(d=a.kc,f=a.bf):(d=b,f=Hb);for(var g=d.Pa,f=t.mc(g.width*f.x+f.offsetX,g.height*f.y+f.offsetY);null!==d&&d!==b;)d.transform.Sa(f),d=d.ja;var d=f.y,g=Math.max(f.x-b.Pa.width,0),h=t.K();c.location=b.pb(new H(1,0,50+
g,d),h);t.B(h);t.B(f);a.Wk(this.name,c);return}}}a.vl(this.name)}};Zg.prototype.makeAdornment=function(a){var b=null,b=a.S.$F;if(null===b){b=new Je;b.type=$g;b.bf=Hb;var c=this.it;null!==c&&b.add(c.copy())}else if(Le(b),b=b.copy(),!(b instanceof Je))return null;b.Zc=this.name;b.pc=a;return b};t.defineProperty(Zg,{it:"handleArchetype"},function(){return this.Fk},function(a){null!==a&&t.l(a,Q,Zg,"handleArchetype");this.Fk=a});t.A(Zg,{handle:"handle"},function(){return this.dc});
t.defineProperty(Zg,{pc:"adornedObject"},function(){return this.sb},function(a){null!==a&&t.l(a,Q,Zg,"adornedObject");this.sb=a});Zg.prototype.canStart=function(){if(!this.isEnabled)return!1;var a=this.h;return null!==a&&!a.ab&&a.Po&&a.R.left?null!==this.findToolHandleAt(a.Nc.ea,this.name)?!0:!1:!1};
Zg.prototype.doActivate=function(){var a=this.h;if(null!==a&&(this.dc=this.findToolHandleAt(a.Nc.ea,this.name),null!==this.dc)){this.sb=this.dc.S.pc;var b=this.sb.S,c=b.kc;this.$C=this.sb===b||this.sb===c?c.pb(b.bf):this.sb.pb(Hb);this.uv=this.sb.angle;a.Kd=!0;a.ww=!0;this.uc(this.name);this.ia=!0}};Zg.prototype.doDeactivate=function(){var a=this.h;null!==a&&(this.hk(),this.sb=this.dc=null,this.ia=a.Kd=!1)};Zg.prototype.doCancel=function(){var a=this.h;a&&(a.ww=!1);this.rotate(this.uv);this.stopTool()};
Zg.prototype.doMouseMove=function(){var a=this.h;this.ia&&null!==a&&(a=this.computeRotate(a.R.ea),this.rotate(a))};Zg.prototype.doMouseUp=function(){var a=this.h;if(this.ia&&null!==a){a.ww=!1;var b=this.computeRotate(a.R.ea);this.rotate(b);a.Oc();this.gf=this.name;a.Ba("PartRotated",this.sb,this.uv)}this.stopTool()};Zg.prototype.rotate=function(a){e&&t.q(a,Zg,"rotate:newangle");null!==this.sb&&(this.sb.angle=a)};
Zg.prototype.computeRotate=function(a){a=this.$C.aj(a);var b=this.sb.ja;b&&(a-=b.hl(),360<=a?a-=360:0>a&&(a+=360));var b=Math.min(Math.abs(this.uG),180),c=Math.min(Math.abs(this.tG),b/2);!this.h.R.shift&&0<b&&0<c&&(a%b<c?a=Math.floor(a/b)*b:a%b>b-c&&(a=(Math.floor(a/b)+1)*b));360<=a?a-=360:0>a&&(a+=360);return a};t.g(Zg,"snapAngleMultiple",Zg.prototype.uG);t.defineProperty(Zg,{uG:"snapAngleMultiple"},function(){return this.eD},function(a){t.i(a,"number",Zg,"snapAngleMultiple");this.eD=a});
t.g(Zg,"snapAngleEpsilon",Zg.prototype.tG);t.defineProperty(Zg,{tG:"snapAngleEpsilon"},function(){return this.dD},function(a){t.i(a,"number",Zg,"snapAngleEpsilon");this.dD=a});t.g(Zg,"originalAngle",Zg.prototype.vJ);t.A(Zg,{vJ:"originalAngle"},function(){return this.uv});function ah(){0<arguments.length&&t.ad(ah);ae.call(this);this.name="ClickSelecting"}t.ga("ClickSelectingTool",ah);t.Ka(ah,ae);ah.prototype.canStart=function(){return!this.isEnabled||null===this.h||this.isBeyondDragSize()?!1:!0};
ah.prototype.doMouseUp=function(){this.ia&&(this.standardMouseSelect(),this.standardMouseClick());this.stopTool()};function bh(){0<arguments.length&&t.ad(bh);ae.call(this);this.name="Action";this.tn=null}t.ga("ActionTool",bh);t.Ka(bh,ae);bh.prototype.canStart=function(){if(!this.isEnabled)return!1;var a=this.h;if(null===a)return!1;var b=a.R,c=a.pe(b.ea,function(a){for(;null!==a.ja&&!a.Ow;)a=a.ja;return a},function(a){return a.Ow});return null!==c?(this.tn=c,a.Bn=a.pe(b.ea,null,null),!0):!1};
bh.prototype.doMouseDown=function(){if(this.ia){var a=this.h.R,b=this.tn;null!==b&&(a.ce=b,null!==b.Fz&&b.Fz(a,b))}else this.canStart()&&this.doActivate()};bh.prototype.doMouseMove=function(){if(this.ia){var a=this.h.R,b=this.tn;null!==b&&(a.ce=b,null!==b.Gz&&b.Gz(a,b))}};bh.prototype.doMouseUp=function(){if(this.ia){var a=this.h,b=a.R,c=this.tn;if(null===c)return;b.ce=c;null!==c.Hz&&c.Hz(b,c);this.isBeyondDragSize()||$e(c,b,a)}this.stopTool()};
bh.prototype.doCancel=function(){var a=this.h;if(null!==a){var a=a.R,b=this.tn;if(null===b)return;a.ce=b;null!==b.Ez&&b.Ez(a,b)}this.stopTool()};bh.prototype.doStop=function(){this.tn=null};function ra(){0<arguments.length&&t.ad(ra);ae.call(this);this.name="ClickCreating";this.xk=null;this.qC=!0;this.gC=new w(0,0)}t.ga("ClickCreatingTool",ra);t.Ka(ra,ae);
ra.prototype.canStart=function(){if(!this.isEnabled||null===this.Os)return!1;var a=this.h;if(null===a||a.ab||a.Ze||!a.Bm||!a.R.left||this.isBeyondDragSize())return!1;if(this.bF){if(1===a.R.Ae&&(this.gC=a.R.Ke.copy()),2!==a.R.Ae||this.isBeyondDragSize(this.gC))return!1}else if(1!==a.R.Ae)return!1;return a.Ua!==this&&null!==a.et(a.R.ea,!0)?!1:!0};ra.prototype.doMouseUp=function(){var a=this.h;this.ia&&null!==a&&this.insertPart(a.R.ea);this.stopTool()};
ra.prototype.insertPart=function(a){var b=this.h;if(null===b)return null;var c=this.Os;if(null===c)return null;this.uc(this.name);var d=null;c instanceof C?c.Ld()&&(Le(c),d=c.copy(),d instanceof C&&b.add(d)):null!==c&&(c=b.ba.copyNodeData(c),t.qb(c)&&(b.ba.Am(c),d=b.fh(c)));d instanceof C&&(d.location=a,b.Pe&&b.select(d));b.Oc();this.gf=this.name;b.Ba("PartCreated",d);this.hk();return d instanceof C?d:null};t.g(ra,"archetypeNodeData",ra.prototype.Os);
t.defineProperty(ra,{Os:"archetypeNodeData"},function(){return this.xk},function(a){null!==a&&t.l(a,Object,ra,"archetypeNodeData");this.xk=a});t.g(ra,"isDoubleClick",ra.prototype.bF);t.defineProperty(ra,{bF:"isDoubleClick"},function(){return this.qC},function(a){t.i(a,"boolean",ra,"isDoubleClick");this.qC=a});
function ch(){0<arguments.length&&t.ad(ch);ae.call(this);this.name="ContextMenu";this.Cn=this.PB=null;this.GC=new w;this.Kn=null;if(!0===t.gB){this.Kn=new Je;this.Ey=null;var a=this;this.vD=function(){a.stopTool()};if(!1===t.lE){var b=document.createElement("div"),c=document.createElement("div");b.style.cssText="top: 0px;z-index:300;position: fixed;display: none;text-align: center;left: 25%;width: 50%;background-color: #F5F5F5;padding: 16px;border: 16px solid #444;border-radius: 10px;margin-top: 10px";
c.style.cssText="z-index:299;position: fixed;display: none;top: 0;left: 0;width: 100%;height: 100%;background-color: black;-moz-opacity: 0.8;opacity:.80;filter: alpha(opacity=80);";var d=document.createElement("style");document.getElementsByTagName("head")[0].appendChild(d);d.sheet.insertRule(".defaultCXul { list-style: none; }",0);d.sheet.insertRule(".defaultCXli {font:700 1.5em Helvetica, Arial, sans-serif;position: relative;min-width: 60px; }",0);d.sheet.insertRule(".defaultCXa {color: #444;display: inline-block;padding: 4px;text-decoration: none;margin: 2px;border: 1px solid gray;border-radius: 10px; }",
0);b.addEventListener("contextmenu",function(a){a.preventDefault();return!1},!1);b.addEventListener("selectstart",function(a){a.preventDefault();return!1},!1);c.addEventListener("contextmenu",function(a){a.preventDefault();return!1},!1);document.body&&(document.body.appendChild(b),document.body.appendChild(c));t.Us=b;t.Ts=c;t.lE=!0}}}t.ga("ContextMenuTool",ch);t.Ka(ch,ae);
ch.prototype.canStart=function(){if(!this.isEnabled)return!1;var a=this.h;return null===a||this.isBeyondDragSize()||!a.R.right?!1:(null===this.Kn||a.R.event instanceof MouseEvent)&&null===this.findObjectWithContextMenu()?!1:!0};ch.prototype.doStart=function(){var a=this.h;null!==a&&this.GC.set(a.Nc.ea)};ch.prototype.doStop=function(){this.hideDefaultContextMenu();this.hideContextMenu();this.Cn=null};
ch.prototype.findObjectWithContextMenu=function(a){var b=this.h;if(null===b)return null;var c=b.R,d=null,d=void 0!==a?a:b.pe(c.ea,null,function(a){return!a.layer.rc});if(null!==d){for(a=d;null!==a;){c=a.contextMenu;if(null!==c)return a;a=a.ja}if(null!==this.Kn&&!(b.R.event instanceof MouseEvent))return d.S}else if(c=b.contextMenu,null!==c)return b;return null};ch.prototype.doActivate=function(){};
ch.prototype.doMouseDown=function(){if(this.ia){var a=this.h;if(null!==a&&null!==this.rf){var b=a.pe(a.R.ea,null,null);null!==b&&b.ej(this.rf)?(this.standardMouseClick(null,null),this.stopTool()):(this.stopTool(),a.Ua.doMouseDown())}}};ch.prototype.doMouseUp=function(){this.ia||this.canStart()&&Ze(this,!0)};
function Ze(a,b,c){a.ia=!0;b&&a.standardMouseSelect();a.standardMouseClick();a.Cn=null;void 0===c&&(c=a.findObjectWithContextMenu());null!==c?(b=c.contextMenu,null!==b?(a.Cn=c instanceof Q?c:null,a.showContextMenu(b,a.Cn)):a.showDefaultContextMenu()):a.showDefaultContextMenu()}ch.prototype.doMouseMove=function(){this.ia&&this.standardMouseOver()};
ch.prototype.showContextMenu=function(a,b){t.l(a,Je,ch,"showContextMenu:contextmenu");null!==b&&t.l(b,Q,ch,"showContextMenu:obj");var c=this.h;if(null!==c){a!==this.rf&&this.hideContextMenu();a.af="Tool";a.wl=!1;a.scale=1/c.scale;a.Zc=this.name;c.add(a);if(null!==b){var c=null,d=b.ep();null!==d&&(c=d.data);a.pc=b;a.data=c}else a.data=c.ba;a.sf();this.positionContextMenu(a,b);this.rf=a}};
ch.prototype.positionContextMenu=function(a){var b=this.h;if(null!==b){var c=b.R.ea.copy(),d=a.Ga,f=b.xb;b.R.Uw&&(c.x-=d.width);c.x+d.width>f.right&&(c.x-=d.width+5);c.x<f.x&&(c.x=f.x);c.y+d.height>f.bottom&&(c.y-=d.height+5);c.y<f.y&&(c.y=f.y);a.position=c}};ch.prototype.hideContextMenu=function(){var a=this.h;null!==a&&null!==this.rf&&(this.rf.data=null,this.rf.pc=null,a.remove(this.rf),this.rf=null,this.standardMouseOver())};
ch.prototype.initializeDefaultButtons=function(){if(null===this.h)return null;var a=new B,b=this.h.Se;a.add({text:"Copy",eh:function(){b.copySelection()},visible:function(){return b.canCopySelection()}});a.add({text:"Cut",eh:function(){b.cutSelection()},visible:function(){return b.canCutSelection()}});a.add({text:"Delete",eh:function(){b.deleteSelection()},visible:function(){return b.canDeleteSelection()}});a.add({text:"Paste",eh:function(a){b.pasteSelection(a.R.ea)},visible:function(){return b.canPasteSelection()}});
a.add({text:"Select All",eh:function(){b.selectAll()},visible:function(){return b.canSelectAll()}});a.add({text:"Undo",eh:function(){b.undo()},visible:function(){return b.canUndo()}});a.add({text:"Redo",eh:function(){b.redo()},visible:function(){return b.canRedo()}});a.add({text:"Zoom To Fit",eh:function(){b.zoomToFit()},visible:function(){return b.canZoomToFit()}});a.add({text:"Reset Zoom",eh:function(){b.resetZoom()},visible:function(){return b.canResetZoom()}});a.add({text:"Group Selection",eh:function(){b.groupSelection()},
visible:function(){return b.canGroupSelection()}});a.add({text:"Ungroup Selection",eh:function(){b.ungroupSelection()},visible:function(){return b.canUngroupSelection()}});a.add({text:"Edit Text",eh:function(){b.editTextBlock()},visible:function(){return b.canEditTextBlock()}});return a};
ch.prototype.showDefaultContextMenu=function(){var a=this.h;if(null!==a){null===this.Ey&&(this.Ey=this.initializeDefaultButtons());this.Kn!==this.rf&&this.hideContextMenu();t.Us.innerHTML="";t.Ts.addEventListener("click",this.vD,!1);var b=this,c=document.createElement("ul");c.className="defaultCXul";t.Us.appendChild(c);c.innerHTML="";for(var d=this.Ey.k;d.next();){var f=d.value,g=f.text,h=f.visible;if("function"!==typeof h||h()){h=document.createElement("li");h.className="defaultCXli";var k=document.createElement("a");
k.className="defaultCXa";k.href="#";k.jH=f.eh;k.addEventListener("click",function(c){this.jH(a);b.stopTool();c.preventDefault();return!1},!1);k.textContent=g;h.appendChild(k);c.appendChild(h)}}t.Us.style.display="block";t.Ts.style.display="block";this.rf=this.Kn}};ch.prototype.hideDefaultContextMenu=function(){null!==this.rf&&this.rf===this.Kn&&(t.Us.style.display="none",t.Ts.style.display="none",t.Ts.removeEventListener("click",this.vD,!1),this.rf=null)};t.g(ch,"currentContextMenu",ch.prototype.rf);
t.defineProperty(ch,{rf:"currentContextMenu"},function(){return this.PB},function(a){null!==a&&t.l(a,Je,ch,"currentContextMenu");this.PB=a});t.g(ch,"currentObject",ch.prototype.kI);t.defineProperty(ch,{kI:"currentObject"},function(){return this.Cn},function(a){null!==a&&t.l(a,Q,ch,"currentObject");this.Cn=a});t.A(ch,{HK:"mouseDownPoint"},function(){return this.GC});
function dh(){0<arguments.length&&t.ad(dh);ae.call(this);this.name="DragSelecting";this.Ln=175;this.vC=!1;var a=new C;a.af="Tool";a.wl=!1;var b=new V;b.name="SHAPE";b.Ab="Rectangle";b.fill=null;b.stroke="magenta";a.add(b);this.Kl=a}t.ga("DragSelectingTool",dh);t.Ka(dh,ae);
dh.prototype.canStart=function(){if(!this.isEnabled)return!1;var a=this.h;if(null===a||!a.Pe)return!1;var b=a.R;return!b.left||a.Ua!==this&&(!this.isBeyondDragSize()||b.timestamp-a.Nc.timestamp<this.vw||null!==a.et(b.ea,!0))?!1:!0};dh.prototype.doActivate=function(){var a=this.h;null!==a&&(this.ia=!0,a.Kd=!0,a.Wa=!0,a.add(this.vg),this.doMouseMove())};dh.prototype.doDeactivate=function(){var a=this.h;null!==a&&(a.remove(this.vg),a.Wa=!1,this.ia=a.Kd=!1)};
dh.prototype.doMouseMove=function(){if(null!==this.h&&this.ia&&null!==this.vg){var a=this.computeBoxBounds(),b=this.vg.oe("SHAPE");null===b&&(b=this.vg.Dw());b.Ca=a.size;this.vg.position=a.position}};dh.prototype.doMouseUp=function(){if(this.ia){var a=this.h;a.remove(this.vg);try{a.$b="wait",this.selectInRect(this.computeBoxBounds())}finally{a.$b=""}}this.stopTool()};dh.prototype.computeBoxBounds=function(){var a=this.h;return null===a?new x(0,0,0,0):new x(a.Nc.ea,a.R.ea)};
dh.prototype.selectInRect=function(a){var b=this.h;if(null!==b){var c=b.R;b.Ba("ChangingSelection");a=b.bk(a,null,function(a){return a instanceof C&&a.canSelect()},this.gF);if(t.Vm?c.Bp:c.control)if(c.shift)for(a=a.k;a.next();)c=a.value,c.eb&&(c.eb=!1);else for(a=a.k;a.next();)c=a.value,c.eb=!c.eb;else{if(!c.shift){for(var d=new B(C),f=b.selection.k;f.next();)c=f.value,a.contains(c)||d.add(c);for(d=d.k;d.next();)c=d.value,c.eb=!1}for(a=a.k;a.next();)c=a.value,c.eb||(c.eb=!0)}b.Ba("ChangedSelection")}};
t.g(dh,"delay",dh.prototype.vw);t.defineProperty(dh,{vw:"delay"},function(){return this.Ln},function(a){t.i(a,"number",dh,"delay");this.Ln=a});t.g(dh,"isPartialInclusion",dh.prototype.gF);t.defineProperty(dh,{gF:"isPartialInclusion"},function(){return this.vC},function(a){t.i(a,"boolean",dh,"isPartialInclusion");this.vC=a});t.g(dh,"box",dh.prototype.vg);t.defineProperty(dh,{vg:"box"},function(){return this.Kl},function(a){null!==a&&t.l(a,C,dh,"box");this.Kl=a});
function eh(){0<arguments.length&&t.ad(eh);ae.call(this);this.name="Panning";this.nz=new w;this.oj=!1;var a=this;this.jD=function(){document.removeEventListener("scroll",a.jD,!1);a.stopTool()}}t.ga("PanningTool",eh);t.Ka(eh,ae);eh.prototype.canStart=function(){if(!this.isEnabled)return!1;var a=this.h;return null===a||!a.of&&!a.pf||!a.R.left||a.Ua!==this&&!this.isBeyondDragSize()?!1:!0};
eh.prototype.doActivate=function(){var a=this.h;null!==a&&(this.oj?(a.R.bubbles=!0,document.addEventListener("scroll",this.jD,!1)):(a.$b="move",a.Kd=!0,this.nz=a.position.copy()),this.ia=!0)};eh.prototype.doDeactivate=function(){var a=this.h;null!==a&&(a.$b="",this.ia=a.Kd=!1)};eh.prototype.doCancel=function(){var a=this.h;null!==a&&(a.position=this.nz,a.Kd=!1);this.stopTool()};eh.prototype.doMouseMove=function(){this.move()};eh.prototype.doMouseUp=function(){this.move();this.stopTool()};
eh.prototype.move=function(){var a=this.h;if(this.ia&&a)if(this.oj)a.R.bubbles=!0;else{var b=a.position,c=a.Nc.ea,d=a.R.ea,f=b.x+c.x-d.x,c=b.y+c.y-d.y;a.of||(f=b.x);a.pf||(c=b.y);a.position=new w(f,c)}};t.g(eh,"bubbles",eh.prototype.bubbles);t.defineProperty(eh,{bubbles:"bubbles"},function(){return this.oj},function(a){t.i(a,"boolean",eh,"bubbles");this.oj=a});t.g(eh,"originalPosition",eh.prototype.AJ);t.A(eh,{AJ:"originalPosition"},function(){return this.nz});
function fh(){0<arguments.length&&t.ad(fh);ae.call(this);this.name="TextEditing";this.nD=null;this.Xy=0;this.SB=this.Az=null;this.iD=gh;this.Tk=null;this.Ya=hh;this.Pk=null;var a=document.createElement("textarea");a.CB=!0;this.XB=a;a.addEventListener("input",function(){var a=this.textEditingTool,c=a.nD;c.text=this.value;ih(c,a.Xy,Infinity);this.rows=c.nF},!1);a.addEventListener("keydown",function(a){var c=a.which,d=this.textEditingTool;if(null!==d)if(13===c)d.acceptText(jh);else{if(9===c)return d.acceptText(kh),
a.preventDefault(),!1;27===c&&(d.doCancel(),d.h&&d.h.focus())}},!1);a.addEventListener("focus",function(){var a=this.textEditingTool;a.Ya===lh?a.Ya=mh:a.Ya===nh?a.Ya=wh:a.Ya===wh&&(a.Ya=mh);"function"===typeof this.select&&this.select()},!1);a.addEventListener("blur",function(){"function"===typeof this.focus&&this.focus();"function"===typeof this.select&&this.select()},!1)}t.ga("TextEditingTool",fh);t.Ka(fh,ae);var xh;fh.LostFocus=xh=t.w(fh,"LostFocus",0);var yh;
fh.MouseDown=yh=t.w(fh,"MouseDown",1);var kh;fh.Tab=kh=t.w(fh,"Tab",2);var jh;fh.Enter=jh=t.w(fh,"Enter",3);fh.SingleClick=t.w(fh,"SingleClick",0);var gh;fh.SingleClickSelected=gh=t.w(fh,"SingleClickSelected",1);var hh=t.w(fh,"StateNone",0),lh=t.w(fh,"StateActive",1),mh=t.w(fh,"StateEditing",2),wh=t.w(fh,"StateEditing2",3),zh=t.w(fh,"StateValidating",4),nh=t.w(fh,"StateValidated",5);t.g(fh,"textBlock",fh.prototype.Ng);
t.defineProperty(fh,{Ng:"textBlock"},function(){return this.Az},function(a){null!==a&&t.l(a,na,fh,"textBlock");this.Az=a});t.g(fh,"currentTextEditor",fh.prototype.Pf);t.defineProperty(fh,{Pf:"currentTextEditor"},function(){return this.SB},function(a){this.SB=a});t.g(fh,"defaultTextEditor",fh.prototype.nE);t.defineProperty(fh,{nE:"defaultTextEditor"},function(){return this.XB},function(a){this.XB=a});t.g(fh,"starting",fh.prototype.vG);
t.defineProperty(fh,{vG:"starting"},function(){return this.iD},function(a){t.Aa(a,fh,fh,"starting");this.iD=a});fh.prototype.canStart=function(){if(!this.isEnabled)return!1;var a=this.h;if(null===a||a.ab||!a.R.left||this.isBeyondDragSize())return!1;a=a.pe(a.R.ea,null,function(a){return a instanceof na});if(!(a instanceof na&&a.yw&&a.S.canEdit()))return!1;a=a.S;return null===a||this.vG===gh&&!a.eb?!1:!0};fh.prototype.doStart=function(){this.ia||null===this.Ng||this.doActivate()};
fh.prototype.doActivate=function(){if(!this.ia){var a=this.h;if(null!==a){var b=this.Ng;null===b&&(b=a.pe(a.R.ea,function(a){return a instanceof na?a:null}),b=b instanceof na?b:null);if(null!==b&&(this.Ng=b,null!==b.S)){this.ia=!0;this.Ya=lh;var c=this.nE,d=!1;null!==b.hB&&(c=b.hB);null===c||c.CB||(d=!0);this.nD=this.Ng.copy();if(c.CB){var f=b.pb(Hb),g=a.position,h=a.scale,k=b.ek()*h;this.Xy=b.Pa.width;var l=this.Xy*k;Ah(b);var m=(f.x-g.x)*h,f=(f.y-g.y)*h;c.value=b.text;a.$j.style.font=b.font;c.style.font=
"inherit";c.style.fontSize=100*k+"%";c.style.lineHeight="normal";l=20+l;c.style.width=l+"px";c.style.height="";c.rows=b.nF;a.$j.appendChild(c);c.style.left=(m-l/2|0)+"px";c.style.top=(f-c.clientHeight/2|0)+"px";c.style.textAlign=b.textAlign}else a.$j.appendChild(c);c.style.position="absolute";c.style.zIndex=100;c.className="start";c.textEditingTool=this;c.SK=k;if(d&&void 0!==c.onActivate)c.onActivate();this.Pf=c;"function"===typeof c.focus&&c.focus();"function"===typeof c.select&&c.select()}}}};
fh.prototype.doCancel=function(){null!==this.Pk&&(this.Pf.style.border=this.Pk,this.Pk=null);this.stopTool()};fh.prototype.doMouseUp=function(){!this.ia&&this.canStart()&&this.doActivate()};fh.prototype.doMouseDown=function(){this.ia&&this.acceptText(yh)};
fh.prototype.acceptText=function(a){switch(a){case yh:if(this.Ya===nh||this.Ya===wh)"function"===typeof this.Pf.focus&&this.Pf.focus();else if(this.Ya===lh||this.Ya===mh)this.Ya=zh,Bh(this);break;case xh:case jh:case kh:if(jh===a&&!0===this.Az.Tw)break;if(this.Ya===lh||this.Ya===mh)this.Ya=zh,Bh(this)}};
function Bh(a){if(null!==a.Ng&&null!==a.Pf){var b=a.Ng,c=a.Ng.text,d=a.Pf.value,f="",f="function"===typeof d?d():d;if(!a.isValidText(a.Ng,c,f)){a.Ya=mh;null!==b.at&&b.at(a,c,f);null===a.Pk&&(a.Pk=a.Pf.style.border,a.Pf.style.border="3px solid red");"function"===typeof a.Pf.focus&&a.Pf.focus();return}a.uc(a.name);a.Ya=nh;c!==f&&(a.Ng.text=f);a.gf=a.name;b=a.h;null!==b&&b.Ba("TextEdited",a.Ng,c);a.hk();a.stopTool();null!==b&&b.focus()}null!==a.Pk&&(a.Pf.style.border=a.Pk,a.Pk=null)}
fh.prototype.doDeactivate=function(){var a=this.h;if(null!==a){this.Ya=hh;this.Ng=null;if(null!==this.Pf){var b=this.Pf;if(void 0!==b.onDeactivate)b.onDeactivate();null!==b&&a.$j.removeChild(b)}this.ia=!1}};fh.prototype.isValidText=function(a,b,c){t.l(a,na,fh,"isValidText:textblock");var d=this.Xt;if(null!==d&&!d(a,b,c))return!1;d=a.Xt;return null===d||d(a,b,c)?!0:!1};t.g(fh,"textValidation",fh.prototype.Xt);
t.defineProperty(fh,{Xt:"textValidation"},function(){return this.Tk},function(a){null!==a&&t.i(a,"function",fh,"textValidation");this.Tk=a});function He(){ae.call(this);this.name="ToolManager";this.HC=new B(ae);this.IC=new B(ae);this.JC=new B(ae);this.jC=this.kC=1E3;this.ZB=(new fa(2,2)).Ja();this.Au=this.Cy=null;this.KC=bf}t.ga("ToolManager",He);t.Ka(He,ae);var bf;He.WheelScroll=bf=t.w(He,"WheelScroll",0);var af;He.WheelZoom=af=t.w(He,"WheelZoom",1);He.WheelNone=t.w(He,"WheelNone",2);
t.g(He,"mouseWheelBehavior",He.prototype.cn);t.defineProperty(He,{cn:"mouseWheelBehavior"},function(){return this.KC},function(a){t.Aa(a,He,He,"mouseWheelBehavior");this.KC=a});He.prototype.initializeStandardTools=function(){this.ED=new bh;this.SA=new hf;this.qF=new Bg;this.YF=new Rg;this.cG=new Zg;this.zA=new qa;this.Hd=new cf;this.tE=new dh;this.JF=new eh;this.pw=new ch;this.Bx=new fh;this.VD=new ra;this.WD=new ah};
He.prototype.doMouseDown=function(){var a=this.h;if(null!==a){var b=a.la;b.Tz&&0!==b.Je&&t.trace("WARNING: In ToolManager.doMouseDown: UndoManager.transactionLevel is not zero");for(var b=this.ef.length,c=0;c<b;c++){var d=this.ef.wa(c);null===d.h&&d.yd(this.h);if(d.canStart()){a.Ua=d;a.Ua===d&&(d.ia||d.doActivate(),d.doMouseDown());return}}1===a.R.button&&(this.cn===bf?this.cn=af:this.cn===af&&(this.cn=bf));this.doActivate();this.standardWaitAfter(this.mA)}};
He.prototype.doMouseMove=function(){var a=this.h;if(null!==a){if(this.ia)for(var b=this.Dg.length,c=0;c<b;c++){var d=this.Dg.wa(c);null===d.h&&d.yd(this.h);if(d.canStart()){a.Ua=d;a.Ua===d&&(d.ia||d.doActivate(),d.doMouseMove());return}}this.standardMouseOver();this.isBeyondDragSize()&&this.standardWaitAfter(this.ia?this.mA:this.TE)}};He.prototype.doCurrentObjectChanged=function(a,b){var c=this.el;null===c||null!==b&&(b===c||b.ej(c))||this.hideToolTip()};
He.prototype.doWaitAfter=function(){this.h&&this.h.gb&&(this.doMouseHover(),this.ia||this.doToolTip())};He.prototype.doMouseHover=function(){var a=this.h;if(null!==a){var b=a.R;null===b.ce&&(b.ce=a.pe(b.ea,null,null));var c=b.ce;if(null!==c)for(;null!==c;){a=this.ia?c.xt:c.yt;if(null!==a&&(a(b,c),b.Ee))break;c=c.ja}else a=this.ia?a.xt:a.yt,null!==a&&a(b)}};
He.prototype.doToolTip=function(){var a=this.h;if(null!==a){var b=a.R;null===b.ce&&(b.ce=a.pe(b.ea,null,null));b=b.ce;if(null!==b){if(b!==this.el&&!b.ej(this.el)){for(;null!==b;){a=b.Yt;if(null!==a){this.showToolTip(a,b);return}b=b.ja}this.hideToolTip()}}else a=a.Yt,null!==a?this.showToolTip(a,null):this.hideToolTip()}};
He.prototype.showToolTip=function(a,b){t.l(a,Je,He,"showToolTip:tooltip");null!==b&&t.l(b,Q,He,"showToolTip:obj");var c=this.h;if(null!==c){a!==this.el&&this.hideToolTip();a.af="Tool";a.wl=!1;a.scale=1/c.scale;c.add(a);if(null!==b&&b!==this.Au){var c=null,d=b.ep();null!==d&&(c=d.data);a.pc=b;a.data=c}else null===b&&(a.data=c.ba);if(null===b||b!==this.Au)a.sf(),this.positionToolTip(a,b);this.Cy=a;this.Au=b}};
He.prototype.positionToolTip=function(a){var b=this.h;if(null!==b){var c=b.R.ea.copy(),d=a.Ga,f=b.xb;b.R.Uw&&(c.x-=d.width);c.x+d.width>f.right&&(c.x-=d.width+5);c.x<f.x&&(c.x=f.x);c.y=c.y+20+d.height>f.bottom?c.y-(d.height+5):c.y+20;c.y<f.y&&(c.y=f.y);a.position=c}};He.prototype.hideToolTip=function(){if(null!==this.el){var a=this.h;null!==a&&(this.el.data=null,this.el.pc=null,a.remove(this.el),this.Au=this.Cy=null)}};t.A(He,{el:"currentToolTip"},function(){return this.Cy});
He.prototype.doMouseUp=function(){this.cancelWaitAfter();if(this.ia){var a=this.h;if(null===a)return;for(var b=this.Eg.length,c=0;c<b;c++){var d=this.Eg.wa(c);null===d.h&&d.yd(this.h);if(d.canStart()){a.Ua=d;a.Ua===d&&(d.ia||d.doActivate(),d.doMouseUp());return}}}this.doDeactivate()};He.prototype.doMouseWheel=function(){this.standardMouseWheel()};He.prototype.doKeyDown=function(){var a=this.h;null!==a&&a.Se.doKeyDown()};He.prototype.doKeyUp=function(){var a=this.h;null!==a&&a.Se.doKeyUp()};
He.prototype.doCancel=function(){null!==ff&&ff.doCancel();ae.prototype.doCancel.call(this)};He.prototype.findTool=function(a){t.i(a,"string",He,"findTool:name");for(var b=this.ef.length,c=0;c<b;c++){var d=this.ef.wa(c);if(d.name===a)return d}b=this.Dg.length;for(c=0;c<b;c++)if(d=this.Dg.wa(c),d.name===a)return d;b=this.Eg.length;for(c=0;c<b;c++)if(d=this.Eg.wa(c),d.name===a)return d;return null};
He.prototype.replaceTool=function(a,b){t.i(a,"string",He,"replaceTool:name");null!==b&&(t.l(b,ae,He,"replaceTool:newtool"),b.h&&b.h!==this.h&&t.m("Cannot share tools between Diagrams: "+b.toString()),b.yd(this.h));for(var c=this.ef.length,d=0;d<c;d++){var f=this.ef.wa(d);if(f.name===a)return null!==b?this.ef.Mg(d,b):this.ef.qd(d),f}c=this.Dg.length;for(d=0;d<c;d++)if(f=this.Dg.wa(d),f.name===a)return null!==b?this.Dg.Mg(d,b):this.Dg.qd(d),f;c=this.Eg.length;for(d=0;d<c;d++)if(f=this.Eg.wa(d),f.name===
a)return null!==b?this.Eg.Mg(d,b):this.Eg.qd(d),f;return null};function Ch(a,b,c,d){t.i(b,"string",He,"replaceStandardTool:name");t.l(d,B,He,"replaceStandardTool:list");null!==c&&(t.l(c,ae,He,"replaceStandardTool:newtool"),c.h&&c.h!==a.h&&t.m("Cannot share tools between Diagrams: "+c.toString()),c.name=b,c.yd(a.h));a.findTool(b)?a.replaceTool(b,c):null!==c&&d.add(c)}t.A(He,{ef:"mouseDownTools"},function(){return this.HC});t.A(He,{Dg:"mouseMoveTools"},function(){return this.IC});
t.A(He,{Eg:"mouseUpTools"},function(){return this.JC});t.g(He,"hoverDelay",He.prototype.TE);t.defineProperty(He,{TE:"hoverDelay"},function(){return this.kC},function(a){t.i(a,"number",He,"hoverDelay");this.kC=a});t.g(He,"holdDelay",He.prototype.mA);t.defineProperty(He,{mA:"holdDelay"},function(){return this.jC},function(a){t.i(a,"number",He,"holdDelay");this.jC=a});t.g(He,"dragSize",He.prototype.uE);
t.defineProperty(He,{uE:"dragSize"},function(){return this.ZB},function(a){t.l(a,fa,He,"dragSize");this.ZB=a.Z()});t.g(He,"actionTool",He.prototype.ED);t.defineProperty(He,{ED:"actionTool"},function(){return this.findTool("Action")},function(a){Ch(this,"Action",a,this.ef)});t.g(He,"relinkingTool",He.prototype.SA);t.defineProperty(He,{SA:"relinkingTool"},function(){return this.findTool("Relinking")},function(a){Ch(this,"Relinking",a,this.ef)});t.g(He,"linkReshapingTool",He.prototype.qF);
t.defineProperty(He,{qF:"linkReshapingTool"},function(){return this.findTool("LinkReshaping")},function(a){Ch(this,"LinkReshaping",a,this.ef)});t.g(He,"resizingTool",He.prototype.YF);t.defineProperty(He,{YF:"resizingTool"},function(){return this.findTool("Resizing")},function(a){Ch(this,"Resizing",a,this.ef)});t.g(He,"rotatingTool",He.prototype.cG);t.defineProperty(He,{cG:"rotatingTool"},function(){return this.findTool("Rotating")},function(a){Ch(this,"Rotating",a,this.ef)});
t.g(He,"linkingTool",He.prototype.zA);t.defineProperty(He,{zA:"linkingTool"},function(){return this.findTool("Linking")},function(a){Ch(this,"Linking",a,this.Dg)});t.g(He,"draggingTool",He.prototype.Hd);t.defineProperty(He,{Hd:"draggingTool"},function(){return this.findTool("Dragging")},function(a){Ch(this,"Dragging",a,this.Dg)});t.g(He,"dragSelectingTool",He.prototype.tE);
t.defineProperty(He,{tE:"dragSelectingTool"},function(){return this.findTool("DragSelecting")},function(a){Ch(this,"DragSelecting",a,this.Dg)});t.g(He,"panningTool",He.prototype.JF);t.defineProperty(He,{JF:"panningTool"},function(){return this.findTool("Panning")},function(a){Ch(this,"Panning",a,this.Dg)});t.g(He,"contextMenuTool",He.prototype.pw);t.defineProperty(He,{pw:"contextMenuTool"},function(){return this.findTool("ContextMenu")},function(a){Ch(this,"ContextMenu",a,this.Eg)});
t.g(He,"textEditingTool",He.prototype.Bx);t.defineProperty(He,{Bx:"textEditingTool"},function(){return this.findTool("TextEditing")},function(a){Ch(this,"TextEditing",a,this.Eg)});t.g(He,"clickCreatingTool",He.prototype.VD);t.defineProperty(He,{VD:"clickCreatingTool"},function(){return this.findTool("ClickCreating")},function(a){Ch(this,"ClickCreating",a,this.Eg)});t.g(He,"clickSelectingTool",He.prototype.WD);
t.defineProperty(He,{WD:"clickSelectingTool"},function(){return this.findTool("ClickSelecting")},function(a){Ch(this,"ClickSelecting",a,this.Eg)});function Be(){this.lH=Dh;this.U=null;new ia;this.Sl=this.Tl=null;this.FB=this.sd=this.cr=this.wj=!1;this.Le=!0;this.zu=this.yu=this.QB=null;this.Ay=0;this.Ly=600;this.rH=new w(0,0);this.HB=this.GB=this.zD=!1;this.so=new ia}function Dh(a,b,c,d){a/=d/2;return 1>a?c/2*a*a+b:-c/2*(--a*(a-2)-1)+b}
Be.prototype.prepareAnimation=Be.prototype.ul=function(){this.Le&&(this.wj&&this.Al(),this.sd=!0,this.FB=!1)};function Eh(a){a.Le&&requestAnimationFrame(function(){!1===a.sd||a.wj||(a.sd=!1,a.U.Ba("AnimationStarting"),Fh(a))})}
function Gh(a,b,c,d){if(a.sd&&(e&&(b instanceof Q||t.m("addToAnimation:object must be a GraphObject.")),!(b instanceof C)||b.oA)){var f=a.so,g;f.contains(b)?(b=f.za(b),a=b[0],g=b[1],void 0===a.position&&(a.position=Hh(c)),g.position=Hh(d)):(a={},g={},a.position=Hh(c),g.position=Hh(d),f.add(b,[a,g]))}}function Hh(a){return a instanceof w?a.copy():a instanceof fa?a.copy():a}
function Fh(a){var b,c=a.U;if(null!==c)if(0===a.so.count)a.wj=!1,c.Uf();else{a.wj=!0;b||(b={});var d=b.xK||a.lH,f=b.JK||null,g=b.KK||null,h=b.duration||a.Ly;b=a.so.k;for(var k=a.rH;b.next();){var l=b.value[0].position;l&&!l.N()&&l.assign(k)}a.QB=d;a.yu=f;a.zu=g;a.Ay=h;var m=a.kH=a.so;Ih(a);Jh(a,c,m,d,0,h,null!==a.Tl&&null!==a.Sl);Zf(a.U);Kh(a);requestAnimationFrame(function(b){var f=b||+new Date,g=f+h,k;(function u(b){!1!==a.wj&&(k=b||+new Date,b=k>g?h:k-f,Ih(a),Jh(a,c,m,d,b,h,null!==a.Tl&&null!==
a.Sl),a.yu&&a.yu(),Zf(c),Kh(a),k>g?Lh(a):requestAnimationFrame(u))})(f)})}}var Mh={opacity:function(a,b,c,d,f,g){a.opacity=d(f,b,c-b,g)},position:function(a,b,c,d,f,g){f!==g?a.oG(d(f,b.x,c.x-b.x,g),d(f,b.y,c.y-b.y,g)):a.position=new w(d(f,b.x,c.x-b.x,g),d(f,b.y,c.y-b.y,g))},scale:function(a,b,c,d,f,g){a.scale=d(f,b,c-b,g)},visible:function(a,b,c,d,f,g){a.visible=f!==g?b:c}};function Ih(a){if(!a.cr){var b=a.U;a.zD=b.Wa;a.GB=b.Tt;a.HB=b.yo;b.Wa=!0;b.Tt=!0;b.yo=!0;a.cr=!0}}
function Kh(a){var b=a.U;b.Wa=a.zD;b.Tt=a.GB;b.yo=a.HB;a.cr=!1}function Jh(a,b,c,d,f,g,h){for(c=c.k;c.next();){var k=c.key,l=c.value,m=l[0],l=l[1],n;for(n in l)if(void 0!==Mh[n])Mh[n](k,m[n],l[n],d,f,g)}h&&(h=a.Tl,a=a.Sl,n=a.y-h.y,a=d(f,h.x,a.x-h.x,g),d=d(f,h.y,n,g),f=b.Yb,b.Yb=!0,b.position=new w(a,d),b.Yb=f)}
Be.prototype.stopAnimation=Be.prototype.Al=function(){!0===this.sd&&(this.sd=!1,this.FB&&this.U.te());this.wj&&this.Le&&(Ih(this),Jh(this,this.U,this.kH,this.QB,this.Ay,this.Ay,null!==this.Tl&&null!==this.Sl),Kh(this),Lh(this))};function Lh(a){a.wj=!1;a.Tl=null;a.Sl=null;a.so=new ia;Ih(a);for(var b=a.U.links;b.next();){var c=b.value;null!==c.xo&&(c.points=c.xo,c.xo=null)}b=a.U;b.Oc();b.Uf();Kh(a);a.zu&&a.zu();a.zu=null;a.yu=null;b.Ba("AnimationFinished")}
function Nh(a,b,c){var d=b.oa,f=c.oa;c instanceof S&&c.placeholder?(c=c.placeholder,d=c.pb(Eb),d.x+=c.padding.left,d.y+=c.padding.top,Gh(a,b,d,b.position)):Gh(a,b,new w(f.x+f.width/2-d.width/2,f.y+f.height/2-d.height/2),b.position)}function Oh(a,b,c){a.sd&&(null===a.Tl&&b.N()&&null===a.Sl&&(a.Tl=b.copy()),a.Sl=c.copy())}t.g(Be,"isEnabled",Be.prototype.isEnabled);t.defineProperty(Be,{isEnabled:"isEnabled"},function(){return this.Le},function(a){t.i(a,"boolean",Be,"isEnabled");this.Le=a});
t.g(Be,"duration",Be.prototype.duration);t.defineProperty(Be,{duration:"duration"},function(){return this.Ly},function(a){t.i(a,"number",Be,"duration");1>a&&t.ka(a,">= 1",Be,"duration");this.Ly=a});t.A(Be,{yg:"isAnimating"},function(){return this.wj});t.A(Be,{AK:"isTicking"},function(){return this.cr});
function $d(){0<arguments.length&&t.ad($d);t.Ac(this);this.U=null;this.zb=new B(C);this.Zb="";this.Lf=1;this.bz=!1;this.Rk=this.Dz=this.uk=this.tk=this.sk=this.rk=this.pk=this.qk=this.ok=this.wk=this.nk=this.vk=this.mk=this.lk=!0;this.Zy=!1;this.wv=[]}t.ga("Layer",$d);$d.prototype.yd=function(a){this.U=a};
$d.prototype.toString=function(a){void 0===a&&(a=0);var b='Layer "'+this.name+'"';if(0>=a)return b;for(var c=0,d=0,f=0,g=0,h=0,k=this.zb.k;k.next();){var l=k.value;l instanceof S?f++:l instanceof R?d++:l instanceof T?g++:l instanceof Je?h++:c++}k="";0<c&&(k+=c+" Parts ");0<d&&(k+=d+" Nodes ");0<f&&(k+=f+" Groups ");0<g&&(k+=g+" Links ");0<h&&(k+=h+" Adornments ");if(1<a)for(c=this.zb.k;c.next();)d=c.value,k+="\n    "+d.toString(a-1),(f=d.data)&&t.od(f)&&(k+=" #"+t.od(f)),d instanceof R?k+=" "+yd(f):
d instanceof T&&(k+=" "+yd(d.aa)+" "+yd(d.ca));return b+" "+this.zb.count+": "+k};
$d.prototype.findObjectAt=$d.prototype.pe=function(a,b,c){void 0===b&&(b=null);void 0===c&&(c=null);if(!1===this.Rk)return null;e&&!a.N()&&t.m("findObjectAt: Point must have a real value.");var d=this.zb,f=!1;this.h.xb.Fa(a)&&(f=!0);for(var g=t.K(),h=d.length;h--;){var k=d.wa(h);if((!0!==f||!1!==Ph(k))&&k.La()&&(g.assign(a),Qa(g,k.me),k=k.pe(g,b,c),null!==k&&(null!==b&&(k=b(k)),k&&(null===c||c(k)))))return t.B(g),k}t.B(g);return null};
$d.prototype.findObjectsAt=$d.prototype.cp=function(a,b,c,d){void 0===b&&(b=null);void 0===c&&(c=null);d instanceof B||d instanceof ma||(d=new ma(Q));if(!1===this.Rk)return d;e&&!a.N()&&t.m("findObjectsAt: Point must have a real value.");var f=this.zb,g=!1;this.h.xb.Fa(a)&&(g=!0);for(var h=t.K(),k=f.length;k--;){var l=f.wa(k);!0===g&&!1===Ph(l)||!l.La()||(h.assign(a),Qa(h,l.me),l.cp(h,b,c,d)&&(null!==b&&(l=b(l)),l&&(null===c||c(l))&&d.add(l)))}t.B(h);return d};
$d.prototype.findObjectsIn=$d.prototype.bk=function(a,b,c,d,f){void 0===b&&(b=null);void 0===c&&(c=null);void 0===d&&(d=!1);f instanceof B||f instanceof ma||(f=new ma(Q));if(!1===this.Rk)return f;e&&!a.N()&&t.m("findObjectsIn: Rect must have a real value.");var g=this.zb,h=!1;this.h.xb.Vj(a)&&(h=!0);for(var k=g.length,g=g.n;k--;){var l=g[k];(!0!==h||!1!==Ph(l))&&l.La()&&l.bk(a,b,c,d,f)&&(null!==b&&(l=b(l)),l&&(null===c||c(l))&&f.add(l))}return f};
$d.prototype.cA=function(a,b,c,d,f,g,h){if(!1===this.Rk)return f;for(var k=this.zb,l=k.length,k=k.n;l--;){var m=k[l];(!0!==h||!1!==Ph(m))&&g(m)&&m.La()&&m.bk(a,b,c,d,f)&&(null!==b&&(m=b(m)),m&&(null===c||c(m))&&f.add(m))}return f};
$d.prototype.findObjectsNear=$d.prototype.Qm=function(a,b,c,d,f,g){void 0===c&&(c=null);void 0===d&&(d=null);void 0===f&&(f=!0);if(!1!==f&&!0!==f){if(f instanceof B||f instanceof ma)g=f;f=!0}g instanceof B||g instanceof ma||(g=new ma(Q));if(!1===this.Rk)return g;e&&!a.N()&&t.m("findObjectsNear: Point must have a real value.");var h=this.zb,k=!1;this.h.xb.Fa(a)&&(k=!0);for(var l=t.K(),m=t.K(),n=h.length;n--;){var p=h.n[n];!0===k&&!1===Ph(p)||!p.La()||(l.assign(a),Qa(l,p.me),m.p(a.x+b,a.y),Qa(m,p.me),
p.Qm(l,m,c,d,f,g)&&(null!==c&&(p=c(p)),p&&(null===d||d(p))&&g.add(p)))}t.B(l);t.B(m);return g};aa=$d.prototype;aa.Df=function(a,b){if(this.visible){var c=this.zb,d;d=b?b:a.xb;for(var f=c.length,g=0;g<f;g++){var h=c.n[g];h.BC=g;if(!(h instanceof T&&!1===h.rg||h instanceof Je&&null!==h.Wh))if(eb(h.oa,d))for(h.Df(!0),Qh(h),h=h.cw;h.next();){var k=h.value;ih(k,Infinity,Infinity);k.Lc();k.Df(!0)}else h.Df(!1),null!==h.cw&&0<h.cw.count&&Qh(h)}}};
aa.Ue=function(a,b,c,d){if(this.visible&&(void 0===d&&(d=!0),d||!this.rc)){1!==this.Lf&&(a.globalAlpha=this.Lf);c=this.zb;d=this.wv;d.length=0;for(var f=b.scale,g=c.length,h=0;h<g;h++){var k=c.n[h];if(Ph(k)){if(k instanceof T&&(k.ic&&d.push(k),!1===k.rg))continue;var l=k.oa;1<l.width*f||1<l.height*f?k.Ue(a,b):Rh(k,a)}}a.globalAlpha=1}};
function Sh(a,b,c,d){if(a.visible){b.globalAlpha=a.Lf;var f=a.zb;a=a.wv;a.length=0;for(var g=c.scale,h=f.length,k=d.length,l=0;l<h;l++){var m=f.n[l];if(Ph(m)){if(m instanceof T&&(m.ic&&a.push(m),!1===m.rg))continue;var n=Th(m,m.oa),p;a:{p=n;for(var q=d,r=k,s=2/g,u=4/g,v=0;v<r;v++){var D=q[v];if(0!==D[2]&&0!==D[3]&&p.$E(D[0]-s,D[1]-s,D[2]+u,D[3]+u)){p=!0;break a}}p=!1}p&&(1<n.width*g||1<n.height*g?m.Ue(b,c):Rh(m,b))}}b.globalAlpha=1}}
aa.j=function(a,b,c,d,f){var g=this.h;null!==g&&g.Ic(vd,a,this,b,c,d,f)};aa.np=function(a,b,c){var d=this.zb;b.lo=this;if(a>=d.count)a=d.count;else if(d.wa(a)===b)return-1;d.Jd(a,b);b.lt(c);d=this.h;null!==d&&(c?d.fa():d.np(b));b instanceof S&&this.xx(b);return a};aa.Xe=function(a,b,c){var d=this.zb;if(0>a||a>=d.length){if(a=d.indexOf(b),0>a)return-1}else if(d.wa(a)!==b&&(a=d.indexOf(b),0>a))return-1;b.mt(c);d.qd(a);d=this.h;null!==d&&(c?d.fa():d.Xe(b));b.lo=null;return a};
aa.xx=function(a){for(;null!==a;){if(a.layer===this){var b=a;if(b.Rc.next()){for(var c=-1,d=-1,f=this.zb.n,g=f.length,h=0;h<g;h++){var k=f[h];if(k===b&&(c=h,0<=d))break;if(0>d&&k.hb===b&&(d=h,0<=c))break}!(0>d)&&d<c&&(f=this.zb,f.qd(c),f.Jd(d,b))}}a=a.hb}};aa.clear=function(){for(var a=this.zb.Ie(),b=a.length,c=0;c<b;c++)a[c].Df(!1),this.Xe(-1,a[c],!1)};t.A($d,{sl:"parts"},function(){return this.zb.k});t.A($d,{NK:"partsBackwards"},function(){return this.zb.Xm});t.A($d,{h:"diagram"},function(){return this.U});
t.g($d,"name",$d.prototype.name);t.defineProperty($d,{name:"name"},function(){return this.Zb},function(a){t.i(a,"string",$d,"name");var b=this.Zb;if(b!==a){var c=this.h;if(null!==c)for(""===b&&t.m("Cannot rename default Layer to: "+a),c=c.Yw;c.next();)c.value.name===a&&t.m("Layer.name is already present in this diagram: "+a);this.Zb=a;this.j("name",b,a);for(a=this.zb.k;a.next();)a.value.af=this.Zb}});t.g($d,"opacity",$d.prototype.opacity);
t.defineProperty($d,{opacity:"opacity"},function(){return this.Lf},function(a){var b=this.Lf;b!==a&&(t.i(a,"number",$d,"opacity"),(0>a||1<a)&&t.ka(a,"0 <= val <= 1",$d,"opacity"),this.Lf=a,this.j("opacity",b,a),a=this.h,null!==a&&a.fa())});t.g($d,"isTemporary",$d.prototype.rc);t.defineProperty($d,{rc:"isTemporary"},function(){return this.bz},function(a){var b=this.bz;b!==a&&(t.i(a,"boolean",$d,"isTemporary"),this.bz=a,this.j("isTemporary",b,a))});t.g($d,"visible",$d.prototype.visible);
t.defineProperty($d,{visible:"visible"},function(){return this.Dz},function(a){var b=this.Dz;if(b!==a){t.i(a,"boolean",$d,"visible");this.Dz=a;this.j("visible",b,a);for(b=this.zb.k;b.next();)b.value.df(a);a=this.h;null!==a&&a.fa()}});t.g($d,"pickable",$d.prototype.Bf);t.defineProperty($d,{Bf:"pickable"},function(){return this.Rk},function(a){var b=this.Rk;b!==a&&(t.i(a,"boolean",$d,"pickable"),this.Rk=a,this.j("pickable",b,a))});t.g($d,"isBoundsIncluded",$d.prototype.pA);
t.defineProperty($d,{pA:"isBoundsIncluded"},function(){return this.Zy},function(a){this.Zy!==a&&(this.Zy=a,null!==this.h&&this.h.Oc())});t.g($d,"allowCopy",$d.prototype.Si);t.defineProperty($d,{Si:"allowCopy"},function(){return this.lk},function(a){var b=this.lk;b!==a&&(t.i(a,"boolean",$d,"allowCopy"),this.lk=a,this.j("allowCopy",b,a))});t.g($d,"allowDelete",$d.prototype.Zk);
t.defineProperty($d,{Zk:"allowDelete"},function(){return this.mk},function(a){var b=this.mk;b!==a&&(t.i(a,"boolean",$d,"allowDelete"),this.mk=a,this.j("allowDelete",b,a))});t.g($d,"allowTextEdit",$d.prototype.Qo);t.defineProperty($d,{Qo:"allowTextEdit"},function(){return this.vk},function(a){var b=this.vk;b!==a&&(t.i(a,"boolean",$d,"allowTextEdit"),this.vk=a,this.j("allowTextEdit",b,a))});t.g($d,"allowGroup",$d.prototype.Mo);
t.defineProperty($d,{Mo:"allowGroup"},function(){return this.nk},function(a){var b=this.nk;b!==a&&(t.i(a,"boolean",$d,"allowGroup"),this.nk=a,this.j("allowGroup",b,a))});t.g($d,"allowUngroup",$d.prototype.Ro);t.defineProperty($d,{Ro:"allowUngroup"},function(){return this.wk},function(a){var b=this.wk;b!==a&&(t.i(a,"boolean",$d,"allowUngroup"),this.wk=a,this.j("allowUngroup",b,a))});t.g($d,"allowLink",$d.prototype.Cm);
t.defineProperty($d,{Cm:"allowLink"},function(){return this.ok},function(a){var b=this.ok;b!==a&&(t.i(a,"boolean",$d,"allowLink"),this.ok=a,this.j("allowLink",b,a))});t.g($d,"allowRelink",$d.prototype.Sj);t.defineProperty($d,{Sj:"allowRelink"},function(){return this.qk},function(a){var b=this.qk;b!==a&&(t.i(a,"boolean",$d,"allowRelink"),this.qk=a,this.j("allowRelink",b,a))});t.g($d,"allowMove",$d.prototype.Rj);
t.defineProperty($d,{Rj:"allowMove"},function(){return this.pk},function(a){var b=this.pk;b!==a&&(t.i(a,"boolean",$d,"allowMove"),this.pk=a,this.j("allowMove",b,a))});t.g($d,"allowReshape",$d.prototype.No);t.defineProperty($d,{No:"allowReshape"},function(){return this.rk},function(a){var b=this.rk;b!==a&&(t.i(a,"boolean",$d,"allowReshape"),this.rk=a,this.j("allowReshape",b,a))});t.g($d,"allowResize",$d.prototype.Oo);
t.defineProperty($d,{Oo:"allowResize"},function(){return this.sk},function(a){var b=this.sk;b!==a&&(t.i(a,"boolean",$d,"allowResize"),this.sk=a,this.j("allowResize",b,a))});t.g($d,"allowRotate",$d.prototype.Po);t.defineProperty($d,{Po:"allowRotate"},function(){return this.tk},function(a){var b=this.tk;b!==a&&(t.i(a,"boolean",$d,"allowRotate"),this.tk=a,this.j("allowRotate",b,a))});t.g($d,"allowSelect",$d.prototype.Pe);
t.defineProperty($d,{Pe:"allowSelect"},function(){return this.uk},function(a){var b=this.uk;b!==a&&(t.i(a,"boolean",$d,"allowSelect"),this.uk=a,this.j("allowSelect",b,a))});
function z(a){function b(){document.removeEventListener("DOMContentLoaded",b,!1);Uh(c)}1<arguments.length&&t.m("Diagram constructor can only take one optional argument, the DIV HTML element or its id.");t.Ac(this);t.$z=[];this.Yb=!0;this.li=new Be;this.li.U=this;this.nf=17;var c=this;null!==document.body?Uh(this):document.addEventListener("DOMContentLoaded",b,!1);this.Rb=new B($d);this.Eb=this.Fb=0;this.Nb=this.Sg=this.gb=null;this.Sk={};this.RF();this.Yy={};this.Yy.twoTouchPan=!0;this.Ra=(new w(NaN,
NaN)).freeze();this.xc=1;this.Su=(new w(NaN,NaN)).freeze();this.Tu=NaN;this.hv=1E-4;this.ev=100;this.md=new ga;this.$v=(new w(NaN,NaN)).freeze();this.Ju=(new x(NaN,NaN,NaN,NaN)).freeze();this.Hl=Xe;this.An=xb;this.Hk=Xe;this.Xn=xb;this.Uu=this.Ru=Eb;this.fg=new ma(Q);this.ve=!0;this.Rl=new ia(T,x);this.Mn=!0;this.hH=250;this.Il=null;this.ou=(new ab(16,16,16,16)).freeze();this.Du=this.Nf=!1;this.Qn=!0;this.Dk=new ld;this.Ed=new ld;this.ec=new ld;this.qj=null;this.Pv=-1;this.wz=!1;this.Iy=new ia("string",
B);this.Hy=new ia("string","string");Vh(this);this.rv=new ma(R);this.Uk=new ma(S);this.av=new ma(T);this.zb=new ma(C);this.Wu=!0;this.mC=!1;this.Wv=eg;this.yj=10;this.By=this.Fy=this.Uv=null;this.zy="";this.Gq="auto";this.qi=this.Oi=this.Bi=this.kv=this.Ci=this.Di=this.Ei=this.pi=this.ti=this.ni=null;this.vi=!0;this.jz=!1;this.py=null;this.Xu=this.un=this.Gy=this.yo=this.cD=this.Li=!1;this.xC=!0;this.Bd=!1;this.ke=null;var d=this;this.EC=function(a){if(a.ba===d.ba&&d.Na){d.Na=!1;try{var b=a.td;""===
a.Af&&b===vd&&Wh(d,a.object,a.propertyName)}finally{d.Na=!0}}};this.FC=function(a){Xh(d,a)};this.BD=!0;this.Ug=-2;this.ri=new ia(Object,C);this.Ak=new ia(Object,T);this.$l=new ia(Object,Array);this.Jk=!1;this.mk=this.lk=this.eu=this.Le=!0;this.gu=this.fu=!1;this.lu=this.ju=this.uk=this.tk=this.sk=this.rk=this.pk=this.qk=this.ok=this.iu=this.wk=this.nk=this.vk=!0;this.ao=this.uC=!1;this.ku=this.hu=this.Pu=this.Ou=!0;this.Fv=this.Ev=16;this.qz=this.Dv=!1;this.sz=this.rz=this.Lj=this.Kj=null;this.Ne=
(new ab(5)).freeze();this.Iv=(new ma(C)).freeze();this.fv=999999999;this.Qu=(new ma(C)).freeze();this.Ik=this.vj=this.wi=!0;this.Vl=this.Ul=!1;this.Pd=null;this.mu=!0;this.lf=!1;this.Sd=null;this.km=1;this.Tn=!1;this.gD=0;this.po=null;this.AD=(new x(NaN,NaN,NaN,NaN)).freeze();this.Eu=(new x(NaN,NaN,NaN,NaN)).freeze();this.lm=new ma;Yh(this);this.$u=this.Lu=this.qv=this.UB=this.TB=this.VB=this.zj=this.Ek=this.Fi=null;Zh(this);this.gd=null;this.Ku=!1;this.Bn=null;this.wb=new He;this.wb.initializeStandardTools();
this.Ua=this.uw=this.wb;this.Se=new oa;this.ba=new M;this.Li=!0;this.jc=new be;this.Li=!1;this.dC=this.Ky=null;this.Yv=!0;t.WI&&(this.Yv=!1);this.pz=!1;this.tj=null;this.mg=1;this.Gk=new $h;void 0!==a&&ai(this,a);this.bm=1;this.cm=0;this.AC=new w;this.xD=500;this.nu=new w;this.ns=null;this.Yb=!1}t.ga("Diagram",z);
function Zh(a){a.Fi=new ia("string",C);var b=new R,c=new na;c.bind(new De("text","",yd));b.add(c);a.VB=b;a.Fi.add("",b);b=new R;c=new na;c.stroke="brown";c.bind(new De("text","",yd));b.add(c);a.Fi.add("Comment",b);b=new R;b.wl=!1;b.Qz=!1;c=new V;c.Ab="Ellipse";c.fill="black";c.stroke=null;c.Ca=(new fa(3,3)).Ja();b.add(c);a.Fi.add("LinkLabel",b);a.Ek=new ia("string",S);b=new S;b.qx="GROUPPANEL";b.type=bi;c=new na;c.font="bold 12pt sans-serif";c.bind(new De("text","",yd));b.add(c);c=new y(ci);c.name=
"GROUPPANEL";var d=new V;d.Ab="Rectangle";d.fill="rgba(128,128,128,0.2)";d.stroke="black";c.add(d);d=new Ug;d.padding=(new ab(5,5,5,5)).Ja();c.add(d);b.add(c);a.TB=b;a.Ek.add("",b);a.zj=new ia("string",T);b=new T;c=new V;c.fj=!0;b.add(c);c=new V;c.on="Standard";c.fill="black";c.stroke=null;c.fb=0;b.add(c);a.UB=b;a.zj.add("",b);b=new T;c=new V;c.fj=!0;c.stroke="brown";b.add(c);a.zj.add("Comment",b);b=new Je;b.type=ci;c=new V;c.fill=null;c.stroke="dodgerblue";c.fb=3;b.add(c);c=new Ug;c.margin=(new ab(1.5,
1.5,1.5,1.5)).Ja();b.add(c);a.qv=b;a.Lu=b;b=new Je;b.type=wg;c=new V;c.fj=!0;c.fill=null;c.stroke="dodgerblue";c.fb=3;b.add(c);a.$u=b}
function Uh(a){var b=document.createElement("p");b.style.width="100%";b.style.height="200px";b.style.boxSizing="content-box";var c=document.createElement("div");c.style.position="absolute";c.style.visibility="hidden";c.style.width="200px";c.style.height="150px";c.style.overflow="hidden";c.style.boxSizing="content-box";c.appendChild(b);document.body.appendChild(c);var d=b.offsetWidth;c.style.overflow="scroll";b=b.offsetWidth;d===b&&(b=c.clientWidth);document.body.removeChild(c);a.nf=d-b}
z.prototype.toString=function(a){void 0===a&&(a=0);var b="";this.id&&(b=this.id);this.$j&&this.$j.id&&(b=this.$j.id);b='Diagram "'+b+'"';if(0>=a)return b;for(var c=this.Rb.k;c.next();)b+="\n  "+c.value.toString(a-1);return b};z.prototype.checkProperties=function(){return t.bI(this)};z.fromDiv=function(a){var b=a;"string"===typeof a&&(b=document.getElementById(a));return b instanceof HTMLDivElement&&b.U instanceof z?b.U:null};t.g(z,"div",z.prototype.$j);
t.defineProperty(z,{$j:"div"},function(){return this.Nb},function(a){null!==a&&t.l(a,HTMLDivElement,z,"div");if(this.Nb!==a){t.$z=[];var b=this.Nb;if(null!==b){b.U=void 0;b.innerHTML="";null!==this.gb&&(this.gb.U=null,this.gb.removeEventListener("touchstart",this.FG,!1),this.gb.removeEventListener("touchmove",this.EG,!1),this.gb.removeEventListener("touchend",this.DG,!1));b=this.Uv;if(null!==b){for(var c=b.HC.n,d=c.length,f=0;f<d;f++)c[f].cancelWaitAfter();c=b.IC.n;d=c.length;for(f=0;f<d;f++)c[f].cancelWaitAfter();
c=b.JC.n;d=c.length;for(f=0;f<d;f++)c[f].cancelWaitAfter()}b.cancelWaitAfter();this.Ua.doCancel();this.Sg=this.gb=null;window.removeEventListener("resize",this.YG,!1);window.removeEventListener("mousemove",this.Dp,!0);window.removeEventListener("mousedown",this.Cp,!0);window.removeEventListener("mouseup",this.Fp,!0);window.removeEventListener("mousewheel",this.hh,!0);window.removeEventListener("DOMMouseScroll",this.hh,!0);window.removeEventListener("mouseout",this.Ep,!0);null!==this.po&&(this.po=
this.po.target=null)}else this.lf=!1;this.Nb=null;if(null!==a){if(b=a.U)b.$j=null;ai(this,a);this.RA()}}});
function di(a){var b=a.gb;b.addEventListener("touchstart",a.FG,!1);b.addEventListener("touchmove",a.EG,!1);b.addEventListener("touchend",a.DG,!1);b.addEventListener("gesturestart",function(){!1!==a.vi&&(a.km=a.scale,a.Ua.doCancel(),a.iC=0)},!1);b.addEventListener("gesturechange",function(b){if(!1!==a.vi){var d=b.scale;a.iC++;if(a.Yy.twoTouchPan){if(1===a.iC)if(1.02<d||0.98>d)b.preventDefault();else{a.km=null;return}}else b.preventDefault();if(null!==a.km){var f=a.Fb,g=a.Eb,h=a.gb.getBoundingClientRect();
b=new w(b.pageX-window.scrollX-f/h.width*h.left,b.pageY-window.scrollY-g/h.height*h.top);d*=a.km;f=a.Se;d!==a.scale&&f.canResetZoom(d)&&(g=a.$f,a.$f=b,f.resetZoom(d),a.$f=g)}}},!1);window.MSGesture&&(a.po=new window.MSGesture,a.po.target=b,b.addEventListener("pointerdown",function(b){a.po.addPointer(b.pointerId)},!1),b.addEventListener("MSGestureStart",function(b){!1!==a.vi&&(a.km=a.scale,a.Tn=!0,b.preventDefault())},!1),b.addEventListener("MSGestureChange",function(b){if(!1!==a.vi){var d=b.scale;
if(1===d)b.gestureObject.stop(),b.preventDefault();else{a.Tn&&(a.Ua.doCancel(),a.Tn=!1);b=a.IG(a.Un(b));var d=a.scale*d,f=a.Se;if(d!==a.scale&&f.canResetZoom(d)){var g=a.$f;a.$f=b;f.resetZoom(d);a.$f=g}}}},!1));b.addEventListener("mousemove",a.Dp,!1);b.addEventListener("mousedown",a.Cp,!1);b.addEventListener("mouseup",a.Fp,!1);b.addEventListener("mousewheel",a.hh,!1);b.addEventListener("DOMMouseScroll",a.hh,!1);b.addEventListener("mouseout",a.Ep,!1);b.addEventListener("keydown",a.fJ,!1);b.addEventListener("keyup",
a.gJ,!1);b.addEventListener("selectstart",function(a){a.preventDefault();return!1},!1);b.addEventListener("contextmenu",function(a){a.preventDefault();return!1},!1);window.addEventListener("resize",a.YG,!1)}function $h(){this.wH="63ad05bbe23a1786468a4c741b6d2";this.wH===this._tk?this.yh=!0:ei(this,!1)}
function ei(a,b){var c="p",d=window[t.Ha("76a715b2f73f148a")][t.Ha("72ba13b5")];if(t.Ha("77bb5bb2f32603de")===window[t.Ha("76a715b2f73f148a")][t.Ha("6aba19a7ec351488")])try{a.yh=!window[t.Ha("4da118b7ec2108")]([t.Ha("5bb806bfea351a904a84515e1b6d38b6")])([t.Ha("49bc19a1e6")])([t.Ha("59bd04a1e6380fa5539b")])([t.Ha("7bb8069ae7")]===t.Ha(t.dw));if(!1===a.yh)return;a.yh=!window[t.Ha("4da118b7ec2108")]([t.Ha("5bb806bfea351a904a84515e1b6d38b6")])([t.Ha("49bc19a1e6")])([t.Ha("59bd04a1e6380fa5539b6c7a197c31bb4cfd3e")])([t.Ha("7bb8069ae7")]===
t.Ha(t.dw));if(!1===a.yh)return}catch(f){}for(var g=d[t.Ha("76ad18b4f73e")],h=d[t.Ha("73a612b6fb191d")](t.Ha("35e7"))+2;h<g;h++)c+=d[h];d=c[t.Ha("73a612b6fb191d")](t.Ha(t.dw));0>=d&&t.Ha(t.dw)!==t.Ha("7da71ca0ad381e90")&&(d=c[t.Ha("73a612b6fb191d")](t.Ha("76a715b2ef3e149757")));a.yh=!(0<d&&d<c[t.Ha("73a612b6fb191d")](t.Ha("35")));a.yh&&(c=document[t.Ha("79ba13b2f7333e8846865a7d00")]("div"),d=t.Ha("02cncncn"),"."===d[0]&&(d=d[t.Ha("69bd14a0f724128a44")](1)),c[t.Ha("79a417a0f0181a8946")]=d,document[t.Ha("78a712aa")]?
(document[t.Ha("78a712aa")][t.Ha("7bb806b6ed32388c4a875b")](c),d=window[t.Ha("7dad0290ec3b0b91578e5b40007031bf")](c)[t.Ha("7dad0283f1390b81519f4645156528bf")](t.Ha("78a704b7e62456904c9b12701b6532a8")),document[t.Ha("78a712aa")][t.Ha('"68ad1bbcf533388c4a875b')](c),d&&-1!==d.indexOf(t.Ha(t.cI))&&-1!==d.indexOf(t.Ha(t.dI))&&(a.yh=!1)):(a.yh=null,b&&(a.yh=!1)))}$h.prototype.Gl=function(a){a.Sg.setTransform(a.mg,0,0,a.mg,0,0);null===this.yh&&ei(this,!0);return 0<this.yh&&this!==this.uH?!0:!1};
$h.prototype.t=function(){this.uH=null};
function ai(a,b){void 0!==b&&null!==b||t.m("Diagram setup requires an argument DIV.");null!==a.Nb&&t.m("Diagram has already completed setup.");"string"===typeof b?a.Nb=document.getElementById(b):b instanceof HTMLDivElement?a.Nb=b:t.m("No DIV or DIV id supplied: "+b);null===a.Nb&&t.m("Invalid DIV id; could not get element with id: "+b);void 0!==a.Nb.U&&t.m("Invalid div id; div already has a Diagram associated with it.");"static"===window.getComputedStyle(a.Nb,null).position&&(a.Nb.style.position="relative");
a.Nb.style["-webkit-tap-highlight-color"]="rgba(255, 255, 255, 0)";a.Nb.style["-ms-touch-action"]="none";a.Nb.innerHTML="";a.Nb.U=a;var c=document.createElement("canvas");if(c.getContext&&c.getContext("2d")){c.innerHTML="This text is displayed if your browser does not support the Canvas HTML element.";void 0!==c.style&&(c.style.position="absolute",c.style.top="0px",c.style.left="0px",c.style.zIndex="2",c.style.TK="none",c.style.webkitUserSelect="none",c.style.MozUserSelect="none");a.Fb=a.Nb.clientWidth||
1;a.Eb=a.Nb.clientHeight||1;a.gb=c;a.Sg=c.getContext("2d");var d=a.Sg;a.mg=a.computePixelRatio();fi(a,a.Fb,a.Eb);c.U=a;a.hy=d[t.Ha("7eba17a4ca3b1a8346")][t.Ha("78a118b7")](d,t.Gl,4,4);a.Nb.insertBefore(c,a.Nb.firstChild);d=document.createElement("canvas");d.width=1;d.height=1;a.Ky=d;a.dC=d.getContext("2d");var d=document.createElement("div"),f=document.createElement("div"),g=document.createElement("div"),h=document.createElement("div");d.style.position="absolute";d.style.overflow="auto";d.style.width=
a.Fb+"px";d.style.height=a.Eb+"px";d.style.zIndex="1";f.style.position="absolute";f.style.overflow="auto";f.style.width=a.Fb+"px";f.style.height=a.Eb+"px";f.style.zIndex="1";g.style.position="absolute";g.style.width="1px";g.style.height="1px";h.style.position="absolute";h.style.width="1px";h.style.height="1px";a.Nb.appendChild(d);a.Nb.appendChild(f);d.appendChild(g);f.appendChild(h);d.onscroll=a.NC;d.onmousedown=a.OC;d.U=a;d.aD=!0;f.onscroll=a.NC;f.onmousedown=a.OC;f.U=a;f.bD=!0;a.Kj=d;a.Lj=f;a.rz=
g;a.sz=h;a.FJ=t.iE(function(){a.fa()},300,!1);a.YG=t.iE(function(){gi(a)},250,!1);a.preventDefault=function(a){a.preventDefault();return!1};a.Dp=function(b){if(a.isEnabled){a.ao=!0;var c=a.Ed;t.Um&&c.Uw?(b.preventDefault(),b.simulated=!0,a.ns=b):(a.Ed=a.ec,a.ec=c,hi(a,a,b,c,!0),a.dB(b,null,b.target.U)||(a.doMouseMove(),a.Ua.isBeyondDragSize()&&(ii(a),a.bm=0)))}};a.Cp=function(b){if(a.isEnabled){a.ao=!0;var c=a.Ed;if(t.Um&&null!==a.ns)a.ns=b,b.preventDefault();else if(t.Um&&400>b.timeStamp-a.cm)b.preventDefault();
else if(a.Ed=a.ec,a.ec=c,hi(a,a,b,c,!0),c.ak=!0,c.Ae=b.detail,a.Dk=c.copy(),!0===c.Mq.simulated)b.preventDefault(),b.simulated=!0;else if(e&&e.FF&&(window.FF=a.cp(c.ea)),ff=null,a.doMouseDown(),1===b.button)return b.preventDefault(),!1}};a.Fp=function(b){if(a.isEnabled){a.ao=!0;var c=a.Ed;if(t.Um){if(400>b.timeStamp-a.cm){b.preventDefault();return}a.cm=b.timeStamp}if(t.Um&&null!==a.ns)a.ns=null,b.preventDefault();else{a.Ed=a.ec;a.ec=c;hi(a,a,b,c,!0);c.lj=!0;c.Ae=b.detail;if(t.Qw||t.tA)b.timeStamp-
a.cm<a.xD&&!a.Ua.isBeyondDragSize()?a.bm++:a.bm=1,a.cm=b.timeStamp,c.Ae=a.bm;c.bubbles=b.bubbles;b.target.U&&(c.nh=b.target.U);a.rG(b,null,new w,c.nh)||(a.doMouseUp(),tf(a),ti(a,c,b))}}};a.hh=function(b){if(a.isEnabled){var c=a.Ed;a.Ed=a.ec;a.ec=c;hi(a,a,b,c,!0);c.bubbles=!0;c.Yj=void 0!==b.wheelDelta?b.wheelDelta:-40*b.detail;a.doMouseWheel();ti(a,c,b)}};a.Ep=function(){if(a.isEnabled){a.ao=!1;var b=a.Ua;b.cancelWaitAfter();b instanceof He&&b.hideToolTip()}};a.FG=function(b){if(a.isEnabled){a.wz=
!1;if(1<b.touches.length){a.Ua.doCancel();if(a.vi){a.Tn=!0;a.km=a.scale;var c=a.Fb,d=a.Eb,f=a.gb.getBoundingClientRect(),g=b.targetTouches[0],h=g.clientX-c/f.width*f.left,r=g.clientY-d/f.height*f.top,g=b.targetTouches[1],c=g.clientX-c/f.width*f.left-h,d=g.clientY-d/f.height*f.top-r,d=Math.sqrt(c*c+d*d);a.gD=d;b.preventDefault();b.cancelBubble=!0;return!1}ii(a);b.cancelBubble=!1;return!0}d=a.Ed;a.Ed=a.ec;a.ec=d;d.h=a;ui(a,b.targetTouches[0],d);d.$c=0;d.button=0;d.ak=!0;d.lj=!1;d.Ae=1;d.Yj=0;d.Ee=!1;
d.bubbles=!1;d.event=b;d.timestamp=Date.now();d.nh=b.target.U?b.target.U:null;d.ce=null;a.Dk=d.copy();ff=null;a.doMouseDown();vi(a,d);ti(a,d,b)}};a.EG=function(b){if(a.isEnabled){if(1<b.touches.length){a.Ua.doCancel();ii(a);if(a.vi&&a.Tn&&1<b.targetTouches.length){var c=a.Fb,d=a.Eb,f=a.gb.getBoundingClientRect(),g=b.targetTouches[0],h=g.clientX-c/f.width*f.left,r=g.clientY-d/f.height*f.top,g=b.targetTouches[1],c=g.clientX-c/f.width*f.left,g=g.clientY-d/f.height*f.top,d=c-h,f=g-r,d=Math.sqrt(d*d+f*
f)/a.gD,g=new w((Math.min(c,h)+Math.max(c,h))/2,(Math.min(g,r)+Math.max(g,r))/2),h=a.km*d,r=a.Se;h!==a.scale&&r.canResetZoom(h)&&(c=a.$f,a.$f=g,r.resetZoom(h),a.$f=c);b.preventDefault();b.cancelBubble=!0;return!1}b.cancelBubble=!1;return!0}h=a.Ed;a.Ed=a.ec;a.ec=h;g=r=null;0<b.changedTouches.length?g=b.changedTouches[0]:0<b.targetTouches.length&&(g=b.targetTouches[0]);h.h=a;g?((r=document.elementFromPoint(g.clientX,g.clientY))&&r.U?(d=g,c=r.U):(d=b.changedTouches[0],c=a),ui(c,d,h)):null!==a.Ed?(h.ea=
a.Ed.ea,h.Ke=a.Ed.Ke,r=a.Ed.nh):null!==a.Dk&&(h.ea=a.Dk.ea,h.Ke=a.Dk.Ke,r=a.Dk.nh);h.$c=0;h.button=0;h.ak=!1;h.lj=!1;h.Ae=1;h.Yj=0;h.Ee=!1;h.bubbles=!1;h.event=b;h.timestamp=Date.now();h.nh=null===r?b.target.U:r.U?r.U:null;h.ce=null;a.Ua.isBeyondDragSize()&&ii(a);a.dB(g?g:b,null,h.nh)||(a.doMouseMove(),ti(a,h,b))}};a.DG=function(b){if(a.isEnabled){ii(a);if(a.wz)return b.preventDefault(),!1;var c=a.Ed;a.Ed=a.ec;a.ec=c;if(1<b.touches.length)a.vi&&(a.Tn=!1);else{var d=null,f=null;0<b.changedTouches.length?
f=b.changedTouches[0]:0<b.targetTouches.length&&(f=b.targetTouches[0]);c.h=a;c.Ae=1;if(f){var d=document.elementFromPoint(f.clientX,f.clientY),g,h;d&&d.U?(h=f,g=d.U):(h=b.changedTouches[0],g=a);ui(g,h,c);g=f.screenX;h=f.screenY;var r=a.AC;b.timeStamp-a.cm<a.xD&&!(25<Math.abs(r.x-g)||25<Math.abs(r.y-h))?a.bm++:a.bm=1;c.Ae=a.bm;a.cm=b.timeStamp;a.AC.p(g,h)}else d=c.nh;c.$c=0;c.button=0;c.ak=!1;c.lj=!0;c.Yj=0;c.Ee=!1;c.bubbles=!1;c.event=b;c.timestamp=Date.now();c.nh=null===d?b.target.U:d.U?d.U:null;
c.ce=null;a.rG(f?f:b,null,new w,c.nh)||(a.doMouseUp(),ti(a,c,b))}}};c.tabIndex=0;wi(a);di(a)}else a.Nb.innerHTML="This text is displayed if your browser does not support the Canvas HTML element."}z.prototype.computePixelRatio=function(){var a=this.Sg;return Math.round((window.devicePixelRatio||1)/(a.webkitBackingStorePixelRatio||a.mozBackingStorePixelRatio||a.msBackingStorePixelRatio||a.oBackingStorePixelRatio||a.backingStorePixelRatio||1))};z.prototype.doMouseMove=function(){this.Ua.doMouseMove()};
z.prototype.doMouseDown=function(){this.Ua.doMouseDown()};z.prototype.doMouseUp=function(){this.Ua.doMouseUp()};z.prototype.doMouseWheel=function(){this.Ua.doMouseWheel()};z.prototype.doKeyDown=function(){this.Ua.doKeyDown()};z.prototype.doKeyUp=function(){this.Ua.doKeyUp()};
function gi(a){if(null!==a.gb){var b=a.Nb;if(0!==b.clientWidth&&0!==b.clientHeight){var c=a.Vl?a.nf:0,d=a.Ul?a.nf:0,f=a.mg;a.mg=a.computePixelRatio();a.mg!==f&&(fi(a,a.Fb,a.Eb),wi(a),a.te());if(b.clientWidth!==a.Fb+c||b.clientHeight!==a.Eb+d)a.vj=!0,a.ve=!0,b=a.jc,null!==b&&b.st&&b.J(),a.Bd||a.te()}}}z.prototype.focus=z.prototype.focus=function(){this.gb&&this.gb.focus()};function wi(a,b,c){void 0===b&&(b=a.Sg);void 0===c&&(c=!0);c&&(b.du="");b.sn="";b.rn=""}
function Yh(a){var b=new $d;b.name="Background";a.Js(b);b=new $d;b.name="";a.Js(b);b=new $d;b.name="Foreground";a.Js(b);b=new $d;b.name="Adornment";b.rc=!0;a.Js(b);b=new $d;b.name="Tool";b.rc=!0;b.pA=!0;a.Js(b);b=new $d;b.name="Grid";b.Pe=!1;b.Bf=!1;b.rc=!0;a.DH(b,a.ct("Background"))}
function xi(a){a.gd=new y(yi);a.gd.name="GRID";var b=new V;b.Ab="LineH";b.stroke="lightgray";b.fb=0.5;b.interval=1;a.gd.add(b);b=new V;b.Ab="LineH";b.stroke="gray";b.fb=0.5;b.interval=5;a.gd.add(b);b=new V;b.Ab="LineH";b.stroke="gray";b.fb=1;b.interval=10;a.gd.add(b);b=new V;b.Ab="LineV";b.stroke="lightgray";b.fb=0.5;b.interval=1;a.gd.add(b);b=new V;b.Ab="LineV";b.stroke="gray";b.fb=0.5;b.interval=5;a.gd.add(b);b=new V;b.Ab="LineV";b.stroke="gray";b.fb=1;b.interval=10;a.gd.add(b);b=new C;b.add(a.gd);
b.af="Grid";b.Rw=!1;b.oA=!1;b.Bf=!1;b.ax="GRID";a.add(b);a.zb.remove(b);a.gd.visible=!1}
z.prototype.NC=function(){if(this.U.isEnabled){var a=this.U;if(a.qz&&null!==a.gb){a.Dv=!0;var b=a.Gd,c=a.xb,d=b.width,f=c.width,g=b.height,h=c.height,k=b.right,l=c.right,m=b.bottom,n=c.bottom,p=b.x,q=c.x,b=b.y,c=c.y,r=a.scale;if(f<d||h<g){var s=t.K();this.aD&&a.of?(s.p(this.scrollLeft/r+p,a.position.y),a.position=s):this.bD&&a.pf&&(s.p(a.position.x,this.scrollTop/r+b),a.position=s);t.B(s);a.Dv=!1;a.vj=!1}else s=t.K(),this.aD&&a.of&&(p<q&&(a.position=new w(this.scrollLeft+p,a.position.y)),k>l&&(a.position=
new w(-(a.Kj.scrollWidth-a.Fb)+this.scrollLeft-a.Fb/r+a.Gd.right,a.position.y))),this.bD&&a.pf&&(b<c&&(a.position=new w(a.position.x,this.scrollTop+b)),m>n&&(a.position=new w(a.position.x,-(a.Lj.scrollHeight-a.Eb)+this.scrollTop-a.Eb/r+a.Gd.bottom))),t.B(s),zi(a),a.Dv=!1,a.vj=!1,b=a.Gd,c=a.xb,k=b.right,l=c.right,m=b.bottom,n=c.bottom,p=b.x,q=c.x,b=b.y,c=c.y,f>=d&&p>=q&&k<=l&&(a.rz.style.width="1px"),h>=g&&b>=c&&m<=n&&(a.sz.style.height="1px")}}else Ai(this.U)};
z.prototype.OC=function(){this.U.isEnabled?this.U.qz=!0:Ai(this.U)};z.prototype.computeBounds=z.prototype.qf=function(){0<this.fg.count&&Bi(this);return Ci(this)};function Ci(a){if(a.eA.N()){var b=a.eA.copy();b.bw(a.padding);return b}for(var c=!0,d=a.Rb.n,f=d.length,g=0;g<f;g++){var h=d[g];if(h.visible&&(!h.rc||h.pA))for(var h=h.zb.n,k=h.length,l=0;l<k;l++){var m=h[l];m.Rw&&m.La()&&(m=m.oa,m.N()&&(c?(c=!1,b=m.copy()):b.ii(m)))}}c&&(b=new x(0,0,0,0));b.bw(a.padding);return b}
z.prototype.computePartsBounds=function(a){var b=null;for(a=a.k;a.next();){var c=a.value;c instanceof T||(c.sf(),null===b?b=c.oa.copy():b.ii(c.oa))}return null===b?new x(NaN,NaN,0,0):b};
function Di(a,b){if(!a.Ub.yg&&(void 0===b&&(b=!1),(b||a.lf)&&!a.Yb&&a.Gd.N()&&null!==a.gb)){a.Yb=!0;var c=a.Hl;b&&a.Hk!==Xe&&(c=a.Hk);var d=c!==Xe?Ei(a,c):a.scale,c=a.xb.copy(),f=a.Fb/d,g=a.Eb/d,h=null,k=a.Ub;k.sd&&(h=a.Ra.copy());a.position.Ma();var l=a.An;b&&a.Xn.xd()&&(l=a.Xn);Fi(a,a.Ra,a.Gd,f,g,l);a.position.freeze();null!==h&&Oh(k,h,a.Ra);a.scale=d;a.Yb=!1;d=a.xb;d.tf(c)||a.Et(c,d)}}
function Ei(a,b){if(null!==a.gb){a.wi&&Gi(a,a.qf());var c=a.Se.Ys,d=a.Gd;if(!d.N())return c;var f=d.width,d=d.height,g=a.Fb,h=a.Eb,k=g/f,l=h/d;return b===Hi?(f=Math.min(l,k),f>c&&(f=c),f<a.Cg&&(f=a.Cg),f>a.Bg&&(f=a.Bg),f):b===Ii?(f=l>k?(h-a.nf)/d:(g-a.nf)/f,f>c&&(f=c),f<a.Cg&&(f=a.Cg),f>a.Bg&&(f=a.Bg),f):a.scale}}z.prototype.zoomToFit=z.prototype.zoomToFit=function(){this.scale=Ei(this,Hi)};
z.prototype.zoomToRect=function(a,b){void 0===b&&(b=Hi);var c=a.width,d=a.height;if(!(0===c||0===d||isNaN(c)&&isNaN(d))){var f=1;if(b===Hi||b===Ii)if(isNaN(c))f=this.xb.height*this.scale/d;else if(isNaN(d))f=this.xb.width*this.scale/c;else var f=this.Fb,g=this.Eb,f=b===Ii?g/d>f/c?(g-(this.Ul?this.nf:0))/d:(f-(this.Vl?this.nf:0))/c:Math.min(g/d,f/c);this.scale=f;this.position=new w(a.x,a.y)}};
z.prototype.alignDocument=function(a,b){this.wi&&Gi(this,this.qf());var c=this.Gd,d=this.xb,f=this.Yb;this.Yb=!0;this.position=new w(c.x+(a.x*c.width+a.offsetX)-(b.x*d.width-b.offsetX),c.y+(a.y*c.height+a.offsetY)-(b.y*d.height-b.offsetY));this.Yb=f;this.fa()};
function Fi(a,b,c,d,f,g){var h;h=b.x;var k=b.y;g.xd()&&(d>c.width&&(h=c.x+(g.x*c.width+g.offsetX)-(g.x*d-g.offsetX)),f>c.height&&(k=c.y+(g.y*c.height+g.offsetY)-(g.y*f-g.offsetY)));d<c.width?(h=Math.min(h+d/2,c.right-d/2),h=Math.max(h,c.left+d/2),h-=d/2):h>c.left?h=c.left:h<c.right-d&&(h=c.right-d);f<c.height?(d=Math.min(k+f/2,c.bottom-f/2),d=Math.max(d,c.top+f/2),k=d-f/2):k>c.top?k=c.top:k<c.bottom-f&&(k=c.bottom-f);b.x=isFinite(h)?h:-a.padding.left;b.y=isFinite(k)?k:-a.padding.top}
z.prototype.findPartAt=z.prototype.et=function(a,b){var c=b?Jf(this,a,function(a){return a.S},function(a){return a.canSelect()}):Jf(this,a,function(a){return a.S});return c instanceof C?c:null};z.prototype.findObjectAt=z.prototype.pe=function(a,b,c){void 0===b&&(b=null);void 0===c&&(c=null);var d=this.Rb.Xm;for(Bi(this);d.next();){var f=d.value;if(f.visible&&(f=f.pe(a,b,c),null!==f))return f}return null};
function Jf(a,b,c,d){void 0===c&&(c=null);void 0===d&&(d=null);var f=a.Rb.Xm;for(Bi(a);f.next();)if(a=f.value,a.visible&&!a.rc&&(a=a.pe(b,c,d),null!==a))return a;return null}z.prototype.findObjectsAt=z.prototype.cp=function(a,b,c,d){void 0===b&&(b=null);void 0===c&&(c=null);d instanceof B||d instanceof ma||(d=new ma(Q));Bi(this);for(var f=this.Rb.Xm;f.next();){var g=f.value;g.visible&&g.cp(a,b,c,d)}return d};
z.prototype.findObjectsIn=z.prototype.bk=function(a,b,c,d,f){void 0===b&&(b=null);void 0===c&&(c=null);void 0===d&&(d=!1);f instanceof B||f instanceof ma||(f=new ma(Q));Bi(this);for(var g=this.Rb.Xm;g.next();){var h=g.value;h.visible&&h.bk(a,b,c,d,f)}return f};z.prototype.cA=function(a,b,c,d,f,g){var h=new ma(Q);Bi(this);for(var k=this.Rb.Xm;k.next();){var l=k.value;l.visible&&l.cA(a,b,c,d,h,f,g)}return h};
z.prototype.findObjectsNear=z.prototype.Qm=function(a,b,c,d,f,g){void 0===c&&(c=null);void 0===d&&(d=null);void 0===f&&(f=!0);if(!1!==f&&!0!==f){if(f instanceof B||f instanceof ma)g=f;f=!0}g instanceof B||g instanceof ma||(g=new ma(Q));Bi(this);for(var h=this.Rb.Xm;h.next();){var k=h.value;k.visible&&k.Qm(a,b,c,d,f,g)}return g};function ii(a){-1!==a.Pv&&(clearTimeout(a.Pv),a.Pv=-1)}function vi(a,b){var c=b.copy();a.Pv=setTimeout(function(){c.button=2;a.R=c;a.wz=!0;a.doMouseUp()},850)}
z.prototype.acceptEvent=function(a){var b=this.Ed;this.Ed=this.ec;this.ec=b;hi(this,this,a,b,a instanceof MouseEvent);return b};function hi(a,b,c,d,f){d.h=b;f?ui(a,c,d):(d.Ke=b.ec.Ke,d.ea=b.ec.ea);a=0;c.ctrlKey&&(a+=1);c.altKey&&(a+=2);c.shiftKey&&(a+=4);c.metaKey&&(a+=8);d.$c=a;d.button=c.button;t.Vm&&0===c.button&&c.ctrlKey&&(d.button=2);d.ak=!1;d.lj=!1;d.Ae=1;d.Yj=0;d.Ee=!1;d.bubbles=!1;d.event=c;d.timestamp=Date.now();d.nh=c.target.U?c.target.U:null;d.ce=null}
function ti(a,b,c){if(b.bubbles)return e&&e.QE&&t.trace("NOT handled "+c.type+" "+b.toString()),!0;e&&e.QE&&t.trace("handled "+c.type+" "+a.Ua.name+" "+b.toString());void 0!==c.stopPropagation&&c.stopPropagation();(void 0===c.touches||2>c.touches.length)&&c.preventDefault();c.cancelBubble=!0;return!1}
z.prototype.fJ=function(a){if(this.U.isEnabled){var b=this.U.ec;hi(this.U,this.U,a,b,!1);b.key=String.fromCharCode(a.which);b.ak=!0;switch(a.which){case 33:b.key="PageUp";break;case 34:b.key="PageDown";break;case 35:b.key="End";break;case 36:b.key="Home";break;case 37:b.key="Left";break;case 38:b.key="Up";break;case 39:b.key="Right";break;case 40:b.key="Down";break;case 45:b.key="Insert";break;case 46:b.key="Del";break;case 48:b.key="0";break;case 187:case 61:case 107:b.key="Add";break;case 189:case 173:case 109:b.key=
"Subtract";break;case 27:b.key="Esc"}this.U.doKeyDown();return 187!==a.which&&189!==a.which&&48!==a.which&&107!==a.which&&109!==a.which&&61!==a.which&&173!==a.which||!0!==a.ctrlKey?ti(this.U,b,a):(a.cancelBubble=!0,a.preventDefault(),a.stopPropagation(),!1)}};
z.prototype.gJ=function(a){if(this.U.isEnabled){var b=this.U.ec;hi(this.U,this.U,a,b,!1);b.key=String.fromCharCode(a.which);b.lj=!0;switch(a.which){case 33:b.key="PageUp";break;case 34:b.key="PageDown";break;case 35:b.key="End";break;case 36:b.key="Home";break;case 37:b.key="Left";break;case 38:b.key="Up";break;case 39:b.key="Right";break;case 40:b.key="Down";break;case 45:b.key="Insert";break;case 46:b.key="Del";break;case 93:a.preventDefault()}this.U.doKeyUp();return ti(this.U,b,a)}};
z.prototype.Un=function(a){var b=this.gb;if(null===b)return new w(0,0);var c=this.Fb,d=this.Eb,b=b.getBoundingClientRect(),c=a.clientX-c/b.width*b.left;a=a.clientY-d/b.height*b.top;return null!==this.md?(a=new w(c,a),Qa(a,this.md),a):new w(c,a)};function ui(a,b,c){var d=a.gb,f=a.Fb,g=a.Eb,h=0,k=0;null!==d&&(d=d.getBoundingClientRect(),h=b.clientX-f/d.width*d.left,k=b.clientY-g/d.height*d.top);c.Ke.p(h,k);null!==a.md?(b=t.mc(h,k),a.md.ai(b),c.ea.assign(b),t.B(b)):c.ea.p(h,k)}
z.prototype.invalidateDocumentBounds=z.prototype.Oc=function(){this.wi||(this.wi=!0,this.te())};function Ji(a){a.Bd||Bi(a);a.wi&&Gi(a,a.qf());Di(a);for(a=a.lm.k;a.next();)Ji(a.value)}z.prototype.redraw=z.prototype.RA=function(){this.Yb||this.Bd||(this.fa(),Ki(this),zi(this),this.Oc(),this.Uf())};z.prototype.isUpdateRequested=function(){return this.Nf};z.prototype.delayInitialization=function(a){var b=this.Ub,c=b.isEnabled;b.isEnabled=!1;Zf(this);this.lf=!1;b.isEnabled=c;a&&setTimeout(a,1)};
z.prototype.requestUpdate=z.prototype.te=function(a){void 0===a&&(a=!1);if(!0!==this.Nf&&!(this.Yb||!1===a&&this.Bd)){this.Nf=!0;var b=this;requestAnimationFrame(function(){b.Nf&&b.Uf()})}};z.prototype.maybeUpdate=z.prototype.Uf=function(){if(!this.Qn||this.Nf)this.Qn&&(this.Qn=!1),Zf(this)};
function Zf(a){if(!a.Bd&&(a.Nf=!1,null!==a.Nb)){a.Bd=!0;var b=a.li,c=!1,d=!1;b.yg?(d=!0,c=a.Wa,a.Wa=!0):b.sd||gi(a);a.Yb||b.yg||!a.vj||Ai(a)||Ai(a);null!==a.gd&&(a.gd.visible&&!a.Ku&&(Li(a),a.Ku=!0),!a.gd.visible&&a.Ku&&(a.Ku=!1));Bi(a);0!==a.Rl.count&&(Mi(a),Bi(a));var f=!1;if(!a.lf||a.mu)a.lf?Ni(a,!a.Du):(a.uc("Initial Layout"),!1===b.isEnabled&&b.Al(),Ni(a,!1)),f=!0;a.Du=!1;Bi(a);a.yo||b.yg||Ji(a);if(f){if(!a.lf){var g=a.Rb.n;a.Df(g,g.length,a);Oi(a);Li(a)}a.Ba("LayoutCompleted")}Bi(a);a.Yb||b.yg||
!a.vj||Ai(a)||(Ai(a),Bi(a));f&&!a.lf&&(a.lf=!0,a.Ce("Initial Layout"),a.Wa||a.la.clear(),setTimeout(function(){a.gh=!1},1));a.Ue();d&&(a.Wa=c);a.Bd=!1}}
function Oi(a){if(a.Hk!==Xe)a.scale=Ei(a,a.Hk);else if(a.Hl!==Xe)a.scale=Ei(a,a.Hl);else{var b=a.XE;isFinite(b)&&0<b&&(a.scale=b)}a.wi&&Gi(a,a.qf());b=a.WE;if(b.N())a.position=b;else{b=t.K();b.Qt(a.Gd,a.VE);var c=a.xb,c=t.ik(0,0,c.width,c.height),d=t.K();d.Qt(c,a.YE);a.position=new w(b.x-d.x,b.y-d.y);t.hc(c);t.B(d);t.B(b);Di(a,!0)}a.Ba("InitialLayoutCompleted")}
function Bi(a){if((a.Bd||!a.Ub.yg)&&0!==a.fg.count)for(var b=0;23>b;b++){var c=a.fg.k;if(null===c||0===a.fg.count)break;a.fg=new ma(Q);var d=a,f=a.fg;for(c.reset();c.next();){var g=c.value;!g.Ld()||g instanceof S||(g.ol()?(ih(g,Infinity,Infinity),g.Lc()):f.add(g))}for(c.reset();c.next();)g=c.value,g instanceof S&&Pi(d,g);for(c.reset();c.next();)d=c.value,d instanceof T&&(d.ol()?(ih(d,Infinity,Infinity),d.Lc(),d.bx()):f.add(d));for(c.reset();c.next();)d=c.value,d instanceof Je&&(d.ol()?(ih(d,Infinity,
Infinity),d.Lc()):f.add(d))}}function Pi(a,b){for(var c=b.Rc,d=t.Db();c.next();){var f=c.value;f.La()&&(f instanceof S?(Qi(f)||Ri(f)||Si(f))&&Pi(a,f):f instanceof T?d.push(f):(ih(f,Infinity,Infinity),f.Lc()))}c=d.length;for(f=0;f<c;f++){var g=d[f];ih(g,Infinity,Infinity);g.Lc()}t.ya(d);ih(b,Infinity,Infinity);b.Lc()}z.prototype.Df=function(a,b,c,d){var f=this.li;if(this.Ik||f.yg)for(f=0;f<b;f++)a[f].Df(c,d)};
z.prototype.Ue=function(a,b){null===this.Nb&&t.m("No div specified");var c=this.gb;null===c&&t.m("No canvas specified");if(this.li.sd)0===this.la.Je&&this.te(!0);else{a||(a=this.Sg);var d=a!==this.Sg,f=this.Rb.n,g=f.length,h=this;this.Df(f,g,h);if(d)wi(this,a),zi(this);else if(!this.ve&&void 0===b)return;var k=this.Ra,g=this.xc,l=Math.round(k.x*g)/g,m=Math.round(k.y*g)/g,n=this.md;n.reset();1!==g&&n.scale(g);0===k.x&&0===k.y||n.translate(-l,-m);var p=this.tj;if(k=null!==p&&0<p.length&&!0===this.pz){m=
t.Qw;a.save();a.beginPath();g=p.length;for(l=0;l<g;l++){var q=p[l];if(0!==q[2]||0!==q[3])q=Ti(this,q),a.rect(Math.floor(q[0])-1,Math.floor(q[1])-1,Math.ceil(q[2])+2,Math.ceil(q[3])+2),m&&a.clearRect(Math.floor(q[0])-1,Math.floor(q[1])-1,Math.ceil(q[2])+2,Math.ceil(q[3])+2)}a.clip()}g=this.mg;t.Um?(c.width=c.width,k=!1,wi(this,a),a.scale(g,g)):(a.setTransform(1,0,0,1,0,0),a.scale(g,g),a.clearRect(0,0,this.Fb,this.Eb));a.miterLimit=9;a.setTransform(1,0,0,1,0,0);a.scale(g,g);a.transform(n.m11,n.m12,
n.m21,n.m22,n.dx,n.dy);e&&e.Rz&&e.AI(this,a);c=b?function(c){var d=a;if(c.visible){d.globalAlpha=c.Lf;var f=c.zb;c=c.wv;c.length=0;for(var g=h.scale,k=f.length,l=0;l<k;l++){var m=f.n[l];if(Ph(m)&&!b.contains(m)){if(m instanceof T&&(m.ic&&c.push(m),!1===m.rg))continue;var n=m.oa;1<n.width*g||1<n.height*g?m.Ue(d,h):Rh(m,d)}}d.globalAlpha=1}}:k?function(b){Sh(b,a,h,p)}:function(b){b.Ue(a,h)};Ui(this,a);g=f.length;for(l=0;l<g;l++)c(f[l]);this.tj=[];this.Gk?this.Gk.Gl(this)&&this.hy():this.Un=function(){};
k&&(a.restore(),wi(this,a),e&&e.wK&&e.vK(p,a,this));d?(wi(this),zi(this)):this.ve=this.Ik=!1}};
function Vi(a,b,c,d,f){null===a.Nb&&t.m("No div specified");var g=a.gb;null===g&&t.m("No canvas specified");var h=a.Sg;if(a.ve){var k=a.mg;t.Um?(g.width=g.width,wi(a,h)):(h.setTransform(1,0,0,1,0,0),h.clearRect(0,0,a.Fb*k,a.Eb*k));h.UE=!1;h.drawImage(a.Ky,0<d?0:Math.round(-d),0<f?0:Math.round(-f));f=a.Ra;var g=a.xc,l=Math.round(f.x*g)/g,m=Math.round(f.y*g)/g;d=a.md;d.reset();1!==g&&d.scale(g);0===f.x&&0===f.y||d.translate(-l,-m);h.save();h.beginPath();f=c.length;for(g=0;g<f;g++)l=c[g],0!==l[2]&&0!==
l[3]&&h.rect(Math.floor(l[0]),Math.floor(l[1]),Math.ceil(l[2]),Math.ceil(l[3]));h.clip();h.setTransform(1,0,0,1,0,0);h.scale(k,k);h.transform(d.m11,d.m12,d.m21,d.m22,d.dx,d.dy);e&&e.Rz&&e.AI(a,h);c=a.Rb.n;f=c.length;a.Df(c,f,a);Ui(a,h);for(g=0;g<f;g++)Sh(c[g],h,a,b);h.restore();wi(a);a.Gk?a.Gk.Gl(a)&&a.hy():a.Un=function(){};a.Ik=!1;a.ve=!1;a.FJ()}}
function Wi(a,b,c,d,f,g,h,k,l,m){null===a.Nb&&t.m("No div specified");null===a.gb&&t.m("No canvas specified");wi(a);zi(a);var n=void 0;g&&d&&f&&(n=new x(g.x,g.y,d.width/f,d.height/f));var p=n.copy();p.bw(c);Li(a,p);Bi(a);var p=a.Rb.n,q=p.length;a.Df(p,q,a,n);var r=a.mg;b.setTransform(1,0,0,1,0,0);b.scale(r,r);b.clearRect(0,0,d.width,d.height);k&&(b.fillStyle=k,b.fillRect(0,0,d.width,d.height));d=t.oh();d.reset();d.translate(c.left,c.top);d.scale(f);0===g.x&&0===g.y||d.translate(-g.x,-g.y);b.setTransform(d.m11,
d.m12,d.m21,d.m22,d.dx,d.dy);t.We(d);Ui(a,b);if(h){var s=new ma;c=h.k;for(c.reset();c.next();)f=c.value.S,!1===m&&"Grid"===f.layer.name||null===f||s.add(f);c=function(c){var d=l;if(c.visible&&(void 0===d&&(d=!0),d||!c.rc)){b.globalAlpha=c.Lf;d=c.zb;c=c.wv;c.length=0;for(var f=a.scale,g=d.length,h=0;h<g;h++){var k=d.n[h];if(Ph(k)&&s.contains(k)){if(k instanceof T&&(k.ic&&c.push(k),!1===k.rg))continue;var m=k.oa;1<m.width*f||1<m.height*f?k.Ue(b,a):Rh(k,b)}}b.globalAlpha=1}}}else if(!l&&m){var u=a.lp.S,
v=u.layer;c=function(c){c===v?u.Ue(b,a):c.Ue(b,a,n,l,m)}}else c=function(c){c.Ue(b,a,n,l,m)};for(f=0;f<q;f++)c(p[f]);a.Gk?a.Gk.Gl(a)&&a.hy():a.Un=function(){};wi(a);zi(a);a.Df(p,q,a);Li(a)}z.prototype.getRenderingHint=function(a){return this.Sk[a]};z.prototype.setRenderingHint=z.prototype.PJ=function(a,b){this.Sk[a]=b;this.RA()};z.prototype.resetRenderingHints=z.prototype.RF=function(){this.Sk={drawShadows:!0}};
function Ui(a,b){var c=a.Sk;if(null!==c){if(void 0!==c.imageSmoothingEnabled){var d=!!c.imageSmoothingEnabled;b.UE=d;b.IK=d}c=c.defaultFont;void 0!==c&&null!==c&&(b.font=c,b.du=c)}}z.prototype.setInputOption=function(a,b){this.Yy[a]=b};function Mi(a){if(0===a.la.Je){for(var b=a.Rl.k;b.next();){var c=b.key,d=b.value;c.Ye();Ag(c,d)}a.Rl.clear()}}
z.prototype.fa=function(a,b){if(this.pz&&void 0!==a&&null!==this.tj){var c=this.xb;if(a&&c.Tf(a)||b&&c.Tf(b))null!==this.tj&&(a&&a.N()&&Xi(this,a.x-2,a.y-2,a.width+4,a.height+4),b&&b.N()&&Xi(this,b.x-2,b.y-2,b.width+4,b.height+4)),this.ve=!0,this.te()}else this.tj=null,this.ve=!0,this.te();for(c=this.lm.k;c.next();)c.value.fa(a,b)};t.g(z,"viewportOptimizations",z.prototype.dK);
t.defineProperty(z,{dK:"viewportOptimizations"},function(){return this.Yv},function(a){t.i(a,"boolean",z,"viewportOptimizations");this.tj=null;this.Yv=a});
function Xi(a,b,c,d,f){b=Math.floor(b);c=Math.floor(c);d=Math.ceil(d);f=Math.ceil(f);for(var g=a.tj,h=g.length,k=0;k<h;k++){var l=g[k];if(b>=l[0]&&c>=l[1]&&b+d<=l[0]+l[2]&&c+f<=l[1]+l[3])return!1;b<=l[0]&&c<=l[1]&&b+d>=l[0]+l[2]&&c+f>=l[1]+l[3]?(g[k][2]=0,g[k][3]=0):b>=l[0]&&b<l[0]+l[2]&&c>=l[1]&&c+f<=l[1]+l[3]?(d=b+d-(l[0]+l[2]),b=l[0]+l[2],k=-1):b+d>l[0]&&b+d<=l[0]+l[2]&&c>=l[1]&&c+f<=l[1]+l[3]?(d=l[0]-b,k=-1):b>=l[0]&&b+d<=l[0]+l[2]&&c>=l[1]&&c<l[1]+l[3]?(f=c+f-(l[1]+l[3]),c=l[1]+l[3],k=-1):b>=
l[0]&&b+d<=l[0]+l[2]&&c+f>l[1]&&c+f<=l[1]+l[3]?(f=l[1]-c,k=-1):g[k][0]>=b&&g[k][0]<b+d&&g[k][1]>=c&&g[k][1]+g[k][3]<=c+f?(g[k][2]-=b+d-g[k][0],g[k][0]=b+d,k=-1):g[k][0]+g[k][2]>b&&g[k][0]+g[k][2]<=b+d&&g[k][1]>=c&&g[k][1]+g[k][3]<=c+f?(g[k][2]=b-g[k][0],k=-1):g[k][0]>=b&&g[k][0]+g[k][2]<=b+d&&g[k][1]>=c&&g[k][1]<c+f?(g[k][3]-=c+f-g[k][1],g[k][1]=c+f,k=-1):g[k][0]>=b&&g[k][0]+g[k][2]<=b+d&&g[k][1]+g[k][3]>c&&g[k][1]+g[k][3]<=c+f&&(g[k][3]=c-g[k][1],k=-1)}for(k=0;k<h;k++)if(l=g[k],0<d&&0<f&&0<l[2]&&
0<l[3]&&(Math.max(b+d,l[0]+l[2])-Math.min(b,l[0]))*(Math.max(c+f,l[1]+l[3])-Math.min(c,l[1]))<d*f+l[2]*l[3]+50){var h=Math.min(l[0],b),m=Math.min(l[1],c);b=Math.max(b+d,l[0]+l[2])-Math.min(l[0],b);c=Math.max(c+f,l[1]+l[3])-Math.min(l[1],c);g[k][2]=0;g[k][3]=0;return Xi(a,h,m,b,c)}g.push([b,c,d,f]);return!0}
function Yi(a,b,c){if(!0!==a.ve){a.ve=!0;if(a instanceof Zi)$i(a);else if(!0===a.Yv&&c.width===b.width&&c.height===b.height){var d=a.scale,f=t.Gf(),g=Math.max(b.x,c.x),h=Math.max(b.y,c.y),k=Math.min(b.x+b.width,c.x+c.width),l=Math.min(b.y+b.height,c.y+c.height);f.x=g;f.y=h;f.width=Math.max(0,k-g)*d;f.height=Math.max(0,l-h)*d;if(0<f.width&&0<f.height){if(!a.Bd&&(a.Nf=!1,null!==a.Nb)){a.Bd=!0;Bi(a);0!==a.Rl.count&&(Mi(a),Bi(a));a.Gd.N()||Gi(a,a.qf());var m=a.gb;if(null!==m){k=a.mg;g=a.Fb*k;h=a.Eb*k;
l=a.scale*k;d=Math.round(Math.round(c.x*l)-Math.round(b.x*l));b=Math.round(Math.round(c.y*l)-Math.round(b.y*l));c=a.Ky;var n=a.dC;c.width!==g&&(c.width=g);c.height!==h&&(c.height=h);n.clearRect(0,0,g,h);c=190*a.mg;var l=70*a.mg,p=Math.max(d,0),q=Math.max(b,0),r=g-p,s=h-q;n.UE=!1;n.drawImage(m,p,q,r,s,0,0,r,s);a.Gk.Gl(a)&&n.clearRect(0,0,c,l);var m=t.Db(),n=t.Db(),s=Math.abs(d),r=Math.abs(b),u=0===p?0:g-s,p=t.mc(u,0),s=t.mc(s+u,h);n.push([Math.min(p.x,s.x),Math.min(p.y,s.y),Math.abs(p.x-s.x),Math.abs(p.y-
s.y)]);var v=a.md;v.reset();v.scale(k,k);1!==a.xc&&v.scale(a.xc);k=a.Ra;(0!==k.x||0!==k.y)&&isFinite(k.x)&&isFinite(k.y)&&v.translate(-k.x,-k.y);Qa(p,v);Qa(s,v);m.push([Math.min(p.x,s.x),Math.min(p.y,s.y),Math.abs(p.x-s.x),Math.abs(p.y-s.y)]);u=0===q?0:h-r;p.p(0,u);s.p(g,r+u);n.push([Math.min(p.x,s.x),Math.min(p.y,s.y),Math.abs(p.x-s.x),Math.abs(p.y-s.y)]);Qa(p,v);Qa(s,v);m.push([Math.min(p.x,s.x),Math.min(p.y,s.y),Math.abs(p.x-s.x),Math.abs(p.y-s.y)]);a.Gk.Gl(a)&&(g=0<d?0:-d,h=0<b?0:-b,p.p(g,h),
s.p(c+g,l+h),n.push([Math.min(p.x,s.x),Math.min(p.y,s.y),Math.abs(p.x-s.x),Math.abs(p.y-s.y)]),Qa(p,v),Qa(s,v),m.push([Math.min(p.x,s.x),Math.min(p.y,s.y),Math.abs(p.x-s.x),Math.abs(p.y-s.y)]));t.B(p);t.B(s);!a.Yb&&a.vj&&(Ai(a)||Ai(a));Vi(a,m,n,d,b);t.ya(m);t.ya(n);a.Bd=!1}}}else a.Uf();t.hc(f)}else a.Uf();for(a=a.lm.k;a.next();)Yi(a.value)}}function Ki(a){!1===a.vj&&(a.vj=!0)}function zi(a){!1===a.Ik&&(a.Ik=!0)}
function fi(a,b,c){var d=a.gb,f=a.mg,g=b*f,f=c*f;if(d.width!==g||d.height!==f)d.width=g,d.height=f,d.style.width=b+"px",d.style.height=c+"px",a.ve=!0}
function Ai(a){if(null!==a.gb&&!a.Ub.sd){var b=a.Nb,c=a.Fb,d=a.Eb,f=a.AD.copy(),g=!1,h=a.Vl?a.nf:0,k=a.Ul?a.nf:0,l=b.clientWidth||c+h,b=b.clientHeight||d+k;if(l!==c+h||b!==d+k)a.Vl=!1,a.Ul=!1,a.Fb=l,a.Eb=b,fi(a,l,b),g=!0;a.vj=!1;if(a.Dv)c===a.Fb&&d===a.Eb||a.Uf();else{var m=a.xb,n=a.Gd,h=n.width,k=n.height,p=m.width,q=m.height,r=n.x,s=m.x,u=n.right,v=m.right,D=n.y,A=m.y,G=n.bottom,K=m.bottom,n=m="1px",N=a.scale;l/N>h&&b/N>k||(a.RE&&a.of&&(p+1<h?(m=(h-p)*N+a.Fb+"px",a.Kj.scrollLeft=(a.position.x-r)*
N):r+1<s?(m=(s-r)*N+a.Fb+"px",a.Kj.scrollLeft=a.Kj.scrollWidth-a.Kj.clientWidth):u>v+1&&(m=(u-v)*N+a.Fb+"px",a.Kj.scrollLeft=a.position.x*N)),a.SE&&a.pf&&(q+1<k?(n=(k-q)*N+a.Eb+"px",a.Lj.scrollTop=(a.position.y-D)*N):D+1<A?(n=(A-D)*N+a.Eb+"px",a.Lj.scrollTop=a.Lj.scrollHeight-a.Lj.clientHeight):G>K+1&&(n=(G-K)*N+a.Eb+"px",a.Lj.scrollTop=a.position.y*N)));l="1px"!==m;b="1px"!==n;l!==a.Ul&&(a.Eb="1px"===m?a.Eb+a.nf:Math.max(a.Eb-a.nf,1),g=!0);a.Ul=l;a.rz.style.width=m;b!==a.Vl&&(a.Fb="1px"===n?a.Fb+
a.nf:Math.max(a.Fb-a.nf,1),g=!0);a.Vl=b;a.sz.style.height=n;g&&(fi(a,a.Fb,a.Eb),wi(a));l=a.Fb;b=a.Eb;a.Lj.style.height=b+"px";a.Lj.style.width=l+(a.Vl?a.nf:0)+"px";a.Kj.style.width=l+"px";a.Kj.style.height=b+(a.Ul?a.nf:0)+"px";a.qz=!1;return c!==l||d!==b?(m=a.xb,a.Et(f,m,g?!0:void 0),!1):!0}}}
z.prototype.add=z.prototype.add=function(a){t.l(a,C,z,"add:part");var b=a.h;if(b!==this){null!==b&&t.m("Cannot add part "+a.toString()+" to "+this.toString()+". It is already a part of "+b.toString());this.un&&(a.Kk="Tool");var c=a.af,b=this.ct(c);null===b&&(b=this.ct(""));null===b&&t.m('Cannot add a Part when unable find a Layer named "'+c+'" and there is no default Layer');a.layer!==b&&(c=b.np(99999999,a,a.h===this),0<=c&&this.Ic(wd,"parts",b,null,a,null,c),b.rc||this.Oc(),a.J(aj),c=a.tp,null!==
c&&c(a,null,b))}};
z.prototype.np=function(a){if(a instanceof R){if(this.rv.add(a),a instanceof S){var b=a.hb;null===b?this.Uk.add(a):b.qo.add(a);b=a.jc;null!==b&&(b.h=this)}}else a instanceof T?this.av.add(a):a instanceof Je||this.zb.add(a);a.Jb&&a.ha();if(b=a.data){a instanceof Je||(a instanceof T?this.Ak.add(b,a):this.ri.add(b,a));var c=this;bj(a,function(a){cj(c,a)})}!0!==Ri(a)&&!0!==Si(a)||this.fg.add(a);dj(a,!0,this);ej(a)?(a.oa.N()&&this.fa(Th(a,a.oa)),this.Oc()):a.La()&&a.oa.N()&&this.fa(Th(a,a.oa));this.te()};
z.prototype.Xe=function(a){a.Wi();if(a instanceof R){if(this.rv.remove(a),a instanceof S){var b=a.hb;null===b?this.Uk.remove(a):b.qo.remove(a);b=a.jc;null!==b&&(b.h=null)}}else a instanceof T?this.av.remove(a):a instanceof Je||this.zb.remove(a);if(b=a.data){a instanceof Je||(a instanceof T?this.Ak.remove(b):this.ri.remove(b));var c=this;bj(a,function(a){fj(c,a)})}this.fg.remove(a);ej(a)?(a.oa.N()&&this.fa(Th(a,a.oa)),this.Oc()):a.La()&&a.oa.N()&&this.fa(Th(a,a.oa));this.te()};
z.prototype.remove=z.prototype.remove=function(a){t.l(a,C,z,"remove:part");a.eb=!1;a.zg=!1;var b=a.layer;if(null!==b&&b.h===this){a.J(gj);a.Nm();var c=b.Xe(-1,a,!1);0<=c&&this.Ic(xd,"parts",b,a,null,c,null);c=a.tp;null!==c&&c(a,b,null)}};z.prototype.removeParts=z.prototype.VA=function(a,b){if(a===this.selection){var c=new ma;c.Oe(a);a=c}for(c=a.k;c.next();){var d=c.value;d.h===this&&(b&&!d.canDelete()||this.remove(d))}};z.prototype.copyParts=z.prototype.Wo=function(a,b,c){return this.Se.Wo(a,b,c)};
z.prototype.moveParts=z.prototype.moveParts=function(a,b,c){t.l(b,w,z,"moveParts:offset");var d=this.wb;if(null!==d){d=d.Hd;null===d&&(d=new cf,d.h=this);var f=new ia(C,Object);if(a)a=a.k;else{for(a=this.sl;a.next();)jf(d,f,a.value,c);for(a=this.jh;a.next();)jf(d,f,a.value,c);a=this.links}for(;a.next();)jf(d,f,a.value,c);d.moveParts(f,b,c)}};
function hj(a,b,c){t.l(b,$d,z,"addLayer:layer");null!==b.h&&b.h!==a&&t.m("Cannot share a Layer with another Diagram: "+b+" of "+b.h);null===c?null!==b.h&&t.m("Cannot add an existing Layer to this Diagram again: "+b):(t.l(c,$d,z,"addLayer:existingLayer"),c.h!==a&&t.m("Existing Layer must be in this Diagram: "+c+" not in "+c.h),b===c&&t.m("Cannot move a Layer before or after itself: "+b));if(b.h!==a){b=b.name;a=a.Rb;c=a.count;for(var d=0;d<c;d++)a.wa(d).name===b&&t.m("Cannot add Layer with the name '"+
b+"'; a Layer with the same name is already present in this Diagram.")}}z.prototype.addLayer=z.prototype.Js=function(a){hj(this,a,null);a.yd(this);var b=this.Rb,c=b.count-1;if(!a.rc)for(;0<=c&&b.wa(c).rc;)c--;b.Jd(c+1,a);null!==this.ke&&this.Ic(wd,"layers",this,null,a,null,c+1);this.fa();this.Oc()};
z.prototype.addLayerBefore=z.prototype.DH=function(a,b){hj(this,a,b);a.yd(this);var c=this.Rb,d=c.indexOf(a);0<=d&&(c.remove(a),null!==this.ke&&this.Ic(xd,"layers",this,a,null,d,null));for(var f=c.count,g=0;g<f;g++)if(c.wa(g)===b){c.Jd(g,a);break}null!==this.ke&&this.Ic(wd,"layers",this,null,a,null,g);this.fa();0>d&&this.Oc()};
z.prototype.addLayerAfter=function(a,b){hj(this,a,b);a.yd(this);var c=this.Rb,d=c.indexOf(a);0<=d&&(c.remove(a),null!==this.ke&&this.Ic(xd,"layers",this,a,null,d,null));for(var f=c.count,g=0;g<f;g++)if(c.wa(g)===b){c.Jd(g+1,a);break}null!==this.ke&&this.Ic(wd,"layers",this,null,a,null,g+1);this.fa();0>d&&this.Oc()};
z.prototype.removeLayer=function(a){t.l(a,$d,z,"removeLayer:layer");a.h!==this&&t.m("Cannot remove a Layer from another Diagram: "+a+" of "+a.h);if(""!==a.name){var b=this.Rb,c=b.indexOf(a);if(b.remove(a)){for(b=a.zb.copy().k;b.next();){var d=b.value,f=d.af;d.af=f!==a.name?f:""}null!==this.ke&&this.Ic(xd,"layers",this,a,null,c,null);this.fa();this.Oc()}}};z.prototype.findLayer=z.prototype.ct=function(a){for(var b=this.Yw;b.next();){var c=b.value;if(c.name===a)return c}return null};
z.prototype.addChangedListener=z.prototype.Iz=function(a){t.i(a,"function",z,"addChangedListener:listener");null===this.qj&&(this.qj=new B("function"));this.qj.add(a)};z.prototype.removeChangedListener=z.prototype.TA=function(a){t.i(a,"function",z,"removeChangedListener:listener");null!==this.qj&&(this.qj.remove(a),0===this.qj.count&&(this.qj=null))};
z.prototype.iw=function(a){this.Wa||this.la.PE(a);a.td!==ud&&(this.gh=!0);if(null!==this.qj){var b=this.qj,c=b.length;if(1===c)b=b.wa(0),b(a);else if(0!==c)for(var d=b.Ie(),f=0;f<c;f++)b=d[f],b(a)}};z.prototype.raiseChangedEvent=z.prototype.Ic=function(a,b,c,d,f,g,h){void 0===g&&(g=null);void 0===h&&(h=null);var k=new td;k.h=this;k.td=a;k.propertyName=b;k.object=c;k.oldValue=d;k.Yf=g;k.newValue=f;k.Wf=h;this.iw(k)};
z.prototype.raiseChanged=z.prototype.j=function(a,b,c,d,f){this.Ic(vd,a,this,b,c,d,f)};t.A(z,{Ub:"animationManager"},function(){return this.li});t.A(z,{la:"undoManager"},function(){return this.ke.la});t.g(z,"skipsUndoManager",z.prototype.Wa);t.defineProperty(z,{Wa:"skipsUndoManager"},function(){return this.Li},function(a){t.i(a,"boolean",z,"skipsUndoManager");this.Li=a;this.ke.Li=a});t.g(z,"delaysLayout",z.prototype.ww);
t.defineProperty(z,{ww:"delaysLayout"},function(){return this.Gy},function(a){this.Gy=a});
z.prototype.changeState=function(a,b){if(null!==a&&a.h===this){var c=a.td;if(c===vd){var d=a.object,c=a.propertyName,f=a.za(b);t.Qa(d,c,f);d instanceof Q&&(c=d.S,null!==c&&ij(c));this.gh=!0}else if(c===wd){f=a.object;c=a.Wf;d=a.newValue;if(f instanceof y)if("number"===typeof c&&d instanceof Q){var g=f;b?g.Xe(c):g.Jd(c,d);c=f.S;null!==c&&ij(c)}else"number"===typeof c&&d instanceof Ae&&(g=f,b?d.xf?g.QF(c):g.NF(c):(c=d.xf?g.wd(d.index):g.vd(d.index),jj(c,d)));else f instanceof $d?(g=!0===a.Yf,"number"===
typeof c&&d instanceof C&&(b?(ij(d),g?f.Xe(c,d,g):this.remove(d)):f.np(c,d,g))):f instanceof z?"number"===typeof c&&d instanceof $d&&(b?this.Rb.qd(c):(d.yd(this),this.Rb.Jd(c,d))):t.m("unknown ChangedEvent.Insert object: "+a.toString());this.gh=!0}else c===xd?(f=a.object,c=a.Yf,d=a.oldValue,f instanceof y?"number"===typeof c&&d instanceof Q?(g=f,b?g.Jd(c,d):g.Xe(c)):"number"===typeof c&&d instanceof Ae&&(g=f,b?(c=d.xf?g.wd(d.index):g.vd(d.index),jj(c,d)):d.xf?g.QF(c):g.NF(c)):f instanceof $d?(g=!0===
a.Wf,"number"===typeof c&&d instanceof C&&(b?f.np(c,d,g):(ij(d),g?f.Xe(c,d,g):this.remove(d)))):f instanceof z?"number"===typeof c&&d instanceof $d&&(b?(d.yd(this),this.Rb.Jd(c,d)):this.Rb.qd(c)):t.m("unknown ChangedEvent.Remove object: "+a.toString()),this.gh=!0):c!==ud&&t.m("unknown ChangedEvent: "+a.toString())}};z.prototype.startTransaction=z.prototype.uc=function(a){return this.la.uc(a)};z.prototype.commitTransaction=z.prototype.Ce=function(a){return this.la.Ce(a)};
z.prototype.rollbackTransaction=z.prototype.Np=function(){return this.la.Np()};z.prototype.updateAllTargetBindings=function(a){void 0===a&&(a="");for(var b=this.sl;b.next();)b.value.Kb(a);for(b=this.jh;b.next();)b.value.Kb(a);for(b=this.links;b.next();)b.value.Kb(a)};z.prototype.updateAllModelDataReferences=function(){for(var a=this.sl;a.next();)a.value.updateModelDataReferences();for(a=this.jh;a.next();)a.value.updateModelDataReferences();for(a=this.links;a.next();)a.value.updateModelDataReferences()};
z.prototype.Et=function(a,b,c){Ki(this);zi(this);var d=this.jc;null===d||!d.st||c||a.width===b.width&&a.height===b.height||d.J();this.Yb||Di(this);Li(this);d=this.Ua;!0===this.ao&&d instanceof He&&(this.R.ea=this.KG(this.R.Ke),d.doMouseMove());Yi(this,a,b);this.Ba("ViewportBoundsChanged",c?{}:null,a)};
function Li(a,b){var c=a.gd;if(null!==c&&c.visible){for(var d=t.Cl(),f=1,g=1,h=c.xa.length,k=0;k<h;k++){var l=c.xa.n[k],m=l.interval;2>m||(kj(l.Ab)?g=g*m/F.GE(g,m):f=f*m/F.GE(f,m))}h=c.ht;d.p(g*h.width,f*h.height);if(b)k=b.width,l=b.height,g=b.x,h=b.y;else{f=t.Gf();g=a.xb;f.p(g.x,g.y,g.width,g.height);for(h=a.lm.k;h.next();)g=h.value.xb,g.N()&&hb(f,g.x,g.y,g.width,g.height);k=f.width;l=f.height;g=f.x;h=f.y;if(!f.N())return}c.width=k+2*d.width;c.height=l+2*d.height;f=t.K();F.dt(g,h,0,0,d.width,d.height,
f);f.offset(-d.width,-d.height);t.ck(d);c.S.location=f;t.B(f)}}z.prototype.clearSelection=z.prototype.kw=function(){var a=0<this.selection.count;a&&this.Ba("ChangingSelection");Me(this);a&&this.Ba("ChangedSelection")};function Me(a){a=a.selection;if(0<a.count){for(var b=a.Ie(),c=b.length,d=0;d<c;d++)b[d].eb=!1;a.Ma();a.clear();a.freeze()}}
z.prototype.select=z.prototype.select=function(a){null!==a&&a.layer.h===this&&(t.l(a,C,z,"select:part"),!a.eb||1<this.selection.count)&&(this.Ba("ChangingSelection"),Me(this),a.eb=!0,this.Ba("ChangedSelection"))};
z.prototype.selectCollection=z.prototype.gG=function(a){this.Ba("ChangingSelection");Me(this);if(t.isArray(a))for(var b=t.ub(a),c=0;c<b;c++){var d=t.lb(a,c);d instanceof C||t.m("Diagram.selectCollection given something that is not a Part: "+d);d.eb=!0}else for(a=a.k;a.next();)d=a.value,d instanceof C||t.m("Diagram.selectCollection given something that is not a Part: "+d),d.eb=!0;this.Ba("ChangedSelection")};
z.prototype.clearHighlighteds=z.prototype.TD=function(){var a=this.Kw;if(0<a.count){for(var b=a.Ie(),c=b.length,d=0;d<c;d++)b[d].zg=!1;a.Ma();a.clear();a.freeze()}};z.prototype.highlight=function(a){null!==a&&a.layer.h===this&&(t.l(a,C,z,"highlight:part"),!a.zg||1<this.Kw.count)&&(this.TD(),a.zg=!0)};
z.prototype.highlightCollection=function(a){this.TD();if(t.isArray(a))for(var b=t.ub(a),c=0;c<b;c++){var d=t.lb(a,c);d instanceof C||t.m("Diagram.highlightCollection given something that is not a Part: "+d);d.zg=!0}else for(a=a.k;a.next();)d=a.value,d instanceof C||t.m("Diagram.highlightCollection given something that is not a Part: "+d),d.zg=!0};
z.prototype.scroll=function(a,b,c){void 0===c&&(c=1);var d="up"===b||"down"===b,f;"pixel"===a?f=c:"line"===a?f=c*(d?this.Rp:this.Qp):"page"===a?(a=d?this.xb.height:this.xb.width,a*=this.scale,0!==a&&(f=Math.max(a-(d?this.Rp:this.Qp),0),f*=c)):t.m("scrolling unit must be 'pixel', 'line', or 'page', not: "+a);f/=this.scale;c=this.position.copy();"up"===b?c.y=this.position.y-f:"down"===b?c.y=this.position.y+f:"left"===b?c.x=this.position.x-f:"right"===b?c.x=this.position.x+f:t.m("scrolling direction must be 'up', 'down', 'left', or 'right', not: "+
b);this.position=c};z.prototype.scrollToRect=function(a){var b=this.xb;b.Vj(a)||(a=a.Sz,a.x-=b.width/2,a.y-=b.height/2,this.position=a)};z.prototype.centerRect=function(a){var b=this.xb;a=a.Sz;a.x-=b.width/2;a.y-=b.height/2;this.position=a};z.prototype.transformDocToView=z.prototype.IG=function(a){var b=this.md;b.reset();1!==this.xc&&b.scale(this.xc);var c=this.Ra;(0!==c.x||0!==c.y)&&isFinite(c.x)&&isFinite(c.y)&&b.translate(-c.x,-c.y);return a.copy().transform(this.md)};
function Ti(a,b){var c=a.md,d=b[0],f=b[1],g=d+b[2],h=f+b[3],k=c.m11,l=c.m12,m=c.m21,n=c.m22,p=c.dx,q=c.dy,r=d*k+f*m+p,s=d*l+f*n+q,c=g*k+f*m+p,f=g*l+f*n+q,u=d*k+h*m+p,d=d*l+h*n+q,k=g*k+h*m+p,g=g*l+h*n+q,h=r,l=s,r=Math.min(r,c),h=Math.max(h,c),l=Math.min(l,f),s=Math.max(s,f),r=Math.min(r,u),h=Math.max(h,u),l=Math.min(l,d),s=Math.max(s,d),r=Math.min(r,k),h=Math.max(h,k),l=Math.min(l,g),s=Math.max(s,g);return[r,l,h-r,s-l]}
z.prototype.transformViewToDoc=z.prototype.KG=function(a){var b=this.md;b.reset();1!==this.xc&&b.scale(this.xc);var c=this.Ra;(0!==c.x||0!==c.y)&&isFinite(c.x)&&isFinite(c.y)&&b.translate(-c.x,-c.y);return Qa(a.copy(),this.md)};var Xe;z.None=Xe=t.w(z,"None",0);var Hi;z.Uniform=Hi=t.w(z,"Uniform",1);var Ii;z.UniformToFill=Ii=t.w(z,"UniformToFill",2);var eg;z.CycleAll=eg=t.w(z,"CycleAll",10);var og;z.CycleNotDirected=og=t.w(z,"CycleNotDirected",11);var qg;
z.CycleNotDirectedFast=qg=t.w(z,"CycleNotDirectedFast",12);var rg;z.CycleNotUndirected=rg=t.w(z,"CycleNotUndirected",13);var fg;z.CycleDestinationTree=fg=t.w(z,"CycleDestinationTree",14);var ng;z.CycleSourceTree=ng=t.w(z,"CycleSourceTree",15);t.g(z,"validCycle",z.prototype.QG);t.defineProperty(z,{QG:"validCycle"},function(){return this.Wv},function(a){var b=this.Wv;b!==a&&(t.Aa(a,z,z,"validCycle"),this.Wv=a,this.j("validCycle",b,a))});t.g(z,"linkSpacing",z.prototype.yp);
t.defineProperty(z,{yp:"linkSpacing"},function(){return this.yj},function(a){var b=this.yj;b!==a&&(t.q(a,z,"linkSpacing"),0>a&&t.ka(a,">= zero",z,"linkSpacing"),this.yj=a,this.j("linkSpacing",b,a))});t.A(z,{Yw:"layers"},function(){return this.Rb.k});t.g(z,"isModelReadOnly",z.prototype.Ze);t.defineProperty(z,{Ze:"isModelReadOnly"},function(){var a=this.ke;return null===a?!1:a.ab},function(a){var b=this.ke;null!==b&&(b.ab=a)});t.g(z,"isReadOnly",z.prototype.ab);
t.defineProperty(z,{ab:"isReadOnly"},function(){return this.Jk},function(a){var b=this.Jk;b!==a&&(t.i(a,"boolean",z,"isReadOnly"),this.Jk=a,this.j("isReadOnly",b,a))});t.g(z,"isEnabled",z.prototype.isEnabled);t.defineProperty(z,{isEnabled:"isEnabled"},function(){return this.Le},function(a){var b=this.Le;b!==a&&(t.i(a,"boolean",z,"isEnabled"),this.Le=a,this.j("isEnabled",b,a))});t.g(z,"allowClipboard",z.prototype.ew);
t.defineProperty(z,{ew:"allowClipboard"},function(){return this.eu},function(a){var b=this.eu;b!==a&&(t.i(a,"boolean",z,"allowClipboard"),this.eu=a,this.j("allowClipboard",b,a))});t.g(z,"allowCopy",z.prototype.Si);t.defineProperty(z,{Si:"allowCopy"},function(){return this.lk},function(a){var b=this.lk;b!==a&&(t.i(a,"boolean",z,"allowCopy"),this.lk=a,this.j("allowCopy",b,a))});t.g(z,"allowDelete",z.prototype.Zk);
t.defineProperty(z,{Zk:"allowDelete"},function(){return this.mk},function(a){var b=this.mk;b!==a&&(t.i(a,"boolean",z,"allowDelete"),this.mk=a,this.j("allowDelete",b,a))});t.g(z,"allowDragOut",z.prototype.Ms);t.defineProperty(z,{Ms:"allowDragOut"},function(){return this.fu},function(a){var b=this.fu;b!==a&&(t.i(a,"boolean",z,"allowDragOut"),this.fu=a,this.j("allowDragOut",b,a))});t.g(z,"allowDrop",z.prototype.Kz);
t.defineProperty(z,{Kz:"allowDrop"},function(){return this.gu},function(a){var b=this.gu;b!==a&&(t.i(a,"boolean",z,"allowDrop"),this.gu=a,this.j("allowDrop",b,a))});t.g(z,"allowTextEdit",z.prototype.Qo);t.defineProperty(z,{Qo:"allowTextEdit"},function(){return this.vk},function(a){var b=this.vk;b!==a&&(t.i(a,"boolean",z,"allowTextEdit"),this.vk=a,this.j("allowTextEdit",b,a))});t.g(z,"allowGroup",z.prototype.Mo);
t.defineProperty(z,{Mo:"allowGroup"},function(){return this.nk},function(a){var b=this.nk;b!==a&&(t.i(a,"boolean",z,"allowGroup"),this.nk=a,this.j("allowGroup",b,a))});t.g(z,"allowUngroup",z.prototype.Ro);t.defineProperty(z,{Ro:"allowUngroup"},function(){return this.wk},function(a){var b=this.wk;b!==a&&(t.i(a,"boolean",z,"allowUngroup"),this.wk=a,this.j("allowUngroup",b,a))});t.g(z,"allowInsert",z.prototype.Bm);
t.defineProperty(z,{Bm:"allowInsert"},function(){return this.iu},function(a){var b=this.iu;b!==a&&(t.i(a,"boolean",z,"allowInsert"),this.iu=a,this.j("allowInsert",b,a))});t.g(z,"allowLink",z.prototype.Cm);t.defineProperty(z,{Cm:"allowLink"},function(){return this.ok},function(a){var b=this.ok;b!==a&&(t.i(a,"boolean",z,"allowLink"),this.ok=a,this.j("allowLink",b,a))});t.g(z,"allowRelink",z.prototype.Sj);
t.defineProperty(z,{Sj:"allowRelink"},function(){return this.qk},function(a){var b=this.qk;b!==a&&(t.i(a,"boolean",z,"allowRelink"),this.qk=a,this.j("allowRelink",b,a))});t.g(z,"allowMove",z.prototype.Rj);t.defineProperty(z,{Rj:"allowMove"},function(){return this.pk},function(a){var b=this.pk;b!==a&&(t.i(a,"boolean",z,"allowMove"),this.pk=a,this.j("allowMove",b,a))});t.g(z,"allowReshape",z.prototype.No);
t.defineProperty(z,{No:"allowReshape"},function(){return this.rk},function(a){var b=this.rk;b!==a&&(t.i(a,"boolean",z,"allowReshape"),this.rk=a,this.j("allowReshape",b,a))});t.g(z,"allowResize",z.prototype.Oo);t.defineProperty(z,{Oo:"allowResize"},function(){return this.sk},function(a){var b=this.sk;b!==a&&(t.i(a,"boolean",z,"allowResize"),this.sk=a,this.j("allowResize",b,a))});t.g(z,"allowRotate",z.prototype.Po);
t.defineProperty(z,{Po:"allowRotate"},function(){return this.tk},function(a){var b=this.tk;b!==a&&(t.i(a,"boolean",z,"allowRotate"),this.tk=a,this.j("allowRotate",b,a))});t.g(z,"allowSelect",z.prototype.Pe);t.defineProperty(z,{Pe:"allowSelect"},function(){return this.uk},function(a){var b=this.uk;b!==a&&(t.i(a,"boolean",z,"allowSelect"),this.uk=a,this.j("allowSelect",b,a))});t.g(z,"allowUndo",z.prototype.Lz);
t.defineProperty(z,{Lz:"allowUndo"},function(){return this.ju},function(a){var b=this.ju;b!==a&&(t.i(a,"boolean",z,"allowUndo"),this.ju=a,this.j("allowUndo",b,a))});t.g(z,"allowZoom",z.prototype.Ns);t.defineProperty(z,{Ns:"allowZoom"},function(){return this.lu},function(a){var b=this.lu;b!==a&&(t.i(a,"boolean",z,"allowZoom"),this.lu=a,this.j("allowZoom",b,a))});t.g(z,"hasVerticalScrollbar",z.prototype.SE);
t.defineProperty(z,{SE:"hasVerticalScrollbar"},function(){return this.Pu},function(a){var b=this.Pu;b!==a&&(t.i(a,"boolean",z,"hasVerticalScrollbar"),this.Pu=a,Ki(this),this.fa(),this.j("hasVerticalScrollbar",b,a),Di(this))});t.g(z,"hasHorizontalScrollbar",z.prototype.RE);t.defineProperty(z,{RE:"hasHorizontalScrollbar"},function(){return this.Ou},function(a){var b=this.Ou;b!==a&&(t.i(a,"boolean",z,"hasHorizontalScrollbar"),this.Ou=a,Ki(this),this.fa(),this.j("hasHorizontalScrollbar",b,a),Di(this))});
t.g(z,"allowHorizontalScroll",z.prototype.of);t.defineProperty(z,{of:"allowHorizontalScroll"},function(){return this.hu},function(a){var b=this.hu;b!==a&&(t.i(a,"boolean",z,"allowHorizontalScroll"),this.hu=a,this.j("allowHorizontalScroll",b,a),Di(this))});t.g(z,"allowVerticalScroll",z.prototype.pf);t.defineProperty(z,{pf:"allowVerticalScroll"},function(){return this.ku},function(a){var b=this.ku;b!==a&&(t.i(a,"boolean",z,"allowVerticalScroll"),this.ku=a,this.j("allowVerticalScroll",b,a),Di(this))});
t.g(z,"scrollHorizontalLineChange",z.prototype.Qp);t.defineProperty(z,{Qp:"scrollHorizontalLineChange"},function(){return this.Ev},function(a){var b=this.Ev;b!==a&&(t.i(a,"number",z,"scrollHorizontalLineChange"),0>a&&t.ka(a,">= 0",z,"scrollHorizontalLineChange"),this.Ev=a,this.j("scrollHorizontalLineChange",b,a))});t.g(z,"scrollVerticalLineChange",z.prototype.Rp);
t.defineProperty(z,{Rp:"scrollVerticalLineChange"},function(){return this.Fv},function(a){var b=this.Fv;b!==a&&(t.i(a,"number",z,"scrollVerticalLineChange"),0>a&&t.ka(a,">= 0",z,"scrollVerticalLineChange"),this.Fv=a,this.j("scrollVerticalLineChange",b,a))});t.g(z,"lastInput",z.prototype.R);t.defineProperty(z,{R:"lastInput"},function(){return this.ec},function(a){e&&t.l(a,ld,z,"lastInput");this.ec=a});t.g(z,"firstInput",z.prototype.Nc);
t.defineProperty(z,{Nc:"firstInput"},function(){return this.Dk},function(a){e&&t.l(a,ld,z,"firstInput");this.Dk=a});t.g(z,"currentCursor",z.prototype.$b);t.defineProperty(z,{$b:"currentCursor"},function(){return this.zy},function(a){""===a&&(a=this.Gq);this.zy!==a&&(t.i(a,"string",z,"currentCursor"),null!==this.gb&&(this.zy=a,this.gb.style.cursor=a,this.Nb.style.cursor=a))});t.g(z,"defaultCursor",z.prototype.oI);
t.defineProperty(z,{oI:"defaultCursor"},function(){return this.Gq},function(a){""===a&&(a="auto");var b=this.Gq;b!==a&&(t.i(a,"string",z,"defaultCursor"),this.Gq=a,this.j("defaultCursor",b,a))});t.g(z,"hasGestureZoom",z.prototype.NI);t.defineProperty(z,{NI:"hasGestureZoom"},function(){return this.vi},function(a){var b=this.vi;b!==a&&(t.i(a,"boolean",z,"hasGestureZoom"),this.vi=a,this.j("hasGestureZoom",b,a))});t.g(z,"click",z.prototype.click);
t.defineProperty(z,{click:"click"},function(){return this.ni},function(a){var b=this.ni;b!==a&&(null!==a&&t.i(a,"function",z,"click"),this.ni=a,this.j("click",b,a))});t.g(z,"doubleClick",z.prototype.Om);t.defineProperty(z,{Om:"doubleClick"},function(){return this.ti},function(a){var b=this.ti;b!==a&&(null!==a&&t.i(a,"function",z,"doubleClick"),this.ti=a,this.j("doubleClick",b,a))});t.g(z,"contextClick",z.prototype.Ws);
t.defineProperty(z,{Ws:"contextClick"},function(){return this.pi},function(a){var b=this.pi;b!==a&&(null!==a&&t.i(a,"function",z,"contextClick"),this.pi=a,this.j("contextClick",b,a))});t.g(z,"mouseOver",z.prototype.zt);t.defineProperty(z,{zt:"mouseOver"},function(){return this.Ei},function(a){var b=this.Ei;b!==a&&(null!==a&&t.i(a,"function",z,"mouseOver"),this.Ei=a,this.j("mouseOver",b,a))});t.g(z,"mouseHover",z.prototype.yt);
t.defineProperty(z,{yt:"mouseHover"},function(){return this.Di},function(a){var b=this.Di;b!==a&&(null!==a&&t.i(a,"function",z,"mouseHover"),this.Di=a,this.j("mouseHover",b,a))});t.g(z,"mouseHold",z.prototype.xt);t.defineProperty(z,{xt:"mouseHold"},function(){return this.Ci},function(a){var b=this.Ci;b!==a&&(null!==a&&t.i(a,"function",z,"mouseHold"),this.Ci=a,this.j("mouseHold",b,a))});t.g(z,"mouseDragOver",z.prototype.BF);
t.defineProperty(z,{BF:"mouseDragOver"},function(){return this.kv},function(a){var b=this.kv;b!==a&&(null!==a&&t.i(a,"function",z,"mouseDragOver"),this.kv=a,this.j("mouseDragOver",b,a))});t.g(z,"mouseDrop",z.prototype.wt);t.defineProperty(z,{wt:"mouseDrop"},function(){return this.Bi},function(a){var b=this.Bi;b!==a&&(null!==a&&t.i(a,"function",z,"mouseDrop"),this.Bi=a,this.j("mouseDrop",b,a))});t.g(z,"toolTip",z.prototype.Yt);
t.defineProperty(z,{Yt:"toolTip"},function(){return this.Oi},function(a){var b=this.Oi;b!==a&&(null!==a&&t.l(a,Je,z,"toolTip"),this.Oi=a,this.j("toolTip",b,a))});t.g(z,"contextMenu",z.prototype.contextMenu);t.defineProperty(z,{contextMenu:"contextMenu"},function(){return this.qi},function(a){var b=this.qi;b!==a&&(null!==a&&t.l(a,Je,z,"contextMenu"),this.qi=a,this.j("contextMenu",b,a))});t.g(z,"commandHandler",z.prototype.Se);
t.defineProperty(z,{Se:"commandHandler"},function(){return this.py},function(a){var b=this.py;b!==a&&(t.l(a,oa,z,"commandHandler"),null!==a.h&&t.m("Cannot share CommandHandlers between Diagrams: "+a.toString()),null!==b&&b.yd(null),this.py=a,a.yd(this))});t.g(z,"toolManager",z.prototype.wb);
t.defineProperty(z,{wb:"toolManager"},function(){return this.Uv},function(a){var b=this.Uv;b!==a&&(t.l(a,He,z,"toolManager"),null!==a.h&&t.m("Cannot share ToolManagers between Diagrams: "+a.toString()),null!==b&&b.yd(null),this.Uv=a,a.yd(this))});t.g(z,"defaultTool",z.prototype.uw);t.defineProperty(z,{uw:"defaultTool"},function(){return this.Fy},function(a){var b=this.Fy;b!==a&&(t.l(a,ae,z,"defaultTool"),this.Fy=a,this.Ua===b&&(this.Ua=a))});t.g(z,"currentTool",z.prototype.Ua);
t.defineProperty(z,{Ua:"currentTool"},function(){return this.By},function(a){var b=this.By;if(null!==b)for(b.ia&&b.doDeactivate(),b.cancelWaitAfter(),b.doStop(),b=this.lm.k;b.next();)b.value.fa();null===a&&(a=this.uw);null!==a&&(t.l(a,ae,z,"currentTool"),this.By=a,a.yd(this),a.doStart())});t.A(z,{selection:"selection"},function(){return this.Iv});t.g(z,"maxSelectionCount",z.prototype.uF);
t.defineProperty(z,{uF:"maxSelectionCount"},function(){return this.fv},function(a){var b=this.fv;if(b!==a)if(t.i(a,"number",z,"maxSelectionCount"),0<=a&&!isNaN(a)){if(this.fv=a,this.j("maxSelectionCount",b,a),!this.la.vb&&(a=this.selection.count-a,0<a)){this.Ba("ChangingSelection");for(var b=this.selection.Ie(),c=0;c<a;c++)b[c].eb=!1;this.Ba("ChangedSelection")}}else t.ka(a,">= 0",z,"maxSelectionCount")});t.g(z,"nodeSelectionAdornmentTemplate",z.prototype.GF);
t.defineProperty(z,{GF:"nodeSelectionAdornmentTemplate"},function(){return this.qv},function(a){var b=this.qv;b!==a&&(t.l(a,Je,z,"nodeSelectionAdornmentTemplate"),this.qv=a,this.j("nodeSelectionAdornmentTemplate",b,a))});t.g(z,"groupSelectionAdornmentTemplate",z.prototype.NE);t.defineProperty(z,{NE:"groupSelectionAdornmentTemplate"},function(){return this.Lu},function(a){var b=this.Lu;b!==a&&(t.l(a,Je,z,"groupSelectionAdornmentTemplate"),this.Lu=a,this.j("groupSelectionAdornmentTemplate",b,a))});
t.g(z,"linkSelectionAdornmentTemplate",z.prototype.rF);t.defineProperty(z,{rF:"linkSelectionAdornmentTemplate"},function(){return this.$u},function(a){var b=this.$u;b!==a&&(t.l(a,Je,z,"linkSelectionAdornmentTemplate"),this.$u=a,this.j("linkSelectionAdornmentTemplate",b,a))});t.A(z,{Kw:"highlighteds"},function(){return this.Qu});t.g(z,"isModified",z.prototype.gh);
t.defineProperty(z,{gh:"isModified"},function(){var a=this.la;return a.isEnabled?null!==a.Zi?!0:this.$y&&this.Ug!==a.cj:this.$y},function(a){if(this.$y!==a){t.i(a,"boolean",z,"isModified");this.$y=a;var b=this.la;!a&&b.isEnabled&&(this.Ug=b.cj);a||lj(this)}});function lj(a){var b=a.gh;a.BD!==b&&(a.BD=b,a.Ba("Modified"))}t.g(z,"model",z.prototype.ba);
t.defineProperty(z,{ba:"model"},function(){return this.ke},function(a){var b=this.ke;if(b!==a){t.l(a,E,z,"model");this.Ua.doCancel();null!==b&&b.la!==a.la&&b.la.dF&&t.m("Do not replace a Diagram.model while a transaction is in progress.");this.Ub.Al();this.kw();this.lf=!1;this.Qn=!0;this.Ug=-2;this.Nf=!1;var c=this.Bd;this.Bd=!0;this.Ub.ul();null!==b&&(b.TA(this.FC),b instanceof M&&mj(this,b.hj),mj(this,b.Gg));this.ke=a;a.Iz(this.EC);nj(this,a.Gg);a instanceof M&&oj(this,a.hj);a.TA(this.EC);a.Iz(this.FC);
this.Bd=c;this.Yb||this.fa();null!==b&&(a.la.isEnabled=b.la.isEnabled)}});t.defineProperty(z,{Na:null},function(){return this.xC},function(a){this.xC=a});
function Xh(a,b){if(b.ba===a.ba){var c=b.td,d=b.propertyName;if(c===ud&&"S"===d[0])if("StartingFirstTransaction"===d){c=a.wb;for(d=c.ef.k;d.next();)d.value.yd(a);for(d=c.Dg.k;d.next();)d.value.yd(a);for(d=c.Eg.k;d.next();)d.value.yd(a);a.Bd||a.lf||(a.Du=!0,a.Qn&&(a.Nf=!0),a.li.ul())}else if("StartingUndo"===d||"StartingRedo"===d){var f=a.Ub;f.yg&&!a.Wa&&f.Al();a.Ba("ChangingSelection")}else"StartedTransaction"===d&&(f=a.Ub,f.yg&&!a.Wa&&f.Al(),a.Xu&&f.ul());else if(a.Na){a.Na=!1;try{var g=b.Af;if(""!==
g)if(c===vd){if("linkFromKey"===g){var h=b.object,k=a.Qf(h);if(null!==k){var l=b.newValue,m=a.Ve(l);k.aa=m}}else if("linkToKey"===g)h=b.object,k=a.Qf(h),null!==k&&(l=b.newValue,m=a.Ve(l),k.ca=m);else if("linkFromPortId"===g){if(h=b.object,k=a.Qf(h),null!==k){var n=b.newValue;"string"===typeof n&&(k.Rf=n)}}else if("linkToPortId"===g)h=b.object,k=a.Qf(h),null!==k&&(n=b.newValue,"string"===typeof n&&(k.Og=n));else if("nodeGroupKey"===g){var h=b.object,p=a.fh(h);if(null!==p){var q=b.newValue;if(void 0!==
q){var r=a.Ve(q);p.hb=r instanceof S?r:null}else p.hb=null}}else if("linkLabelKeys"===g){if(h=b.object,k=a.Qf(h),null!==k){var s=b.oldValue,u=b.newValue;if(t.isArray(s))for(var v=t.ub(s),D=0;D<v;D++){var A=t.lb(s,D),m=a.Ve(A);null!==m&&(m.$d=null)}if(t.isArray(u))for(v=t.ub(u),D=0;D<v;D++)A=t.lb(u,D),m=a.Ve(A),null!==m&&(m.$d=k)}}else if("nodeParentKey"===g){var G=b.object,K=a.Ve(b.newValue),N=a.Ew(G);if(null!==N){var O=N.ft();null!==O?null===K?a.remove(O):a.pd?O.aa=K:O.ca=K:pj(a,K,N)}}else if("parentLinkCategory"===
g){var G=b.object,N=a.Ew(G),U=b.newValue;null!==N&&"string"===typeof U&&(O=N.ft(),null!==O&&(O.Zc=U))}else if("nodeCategory"===g){var h=b.object,X=a.fh(h),U=b.newValue;null!==X&&"string"===typeof U&&(X.Zc=U)}else if("linkCategory"===g){var h=b.object,Z=a.Qf(h),U=b.newValue;null!==Z&&"string"===typeof U&&(Z.Zc=U)}else if("nodeDataArray"===g){a.fa();var P=b.oldValue;mj(a,P);var pa=b.newValue;nj(a,pa)}else"linkDataArray"===g&&(a.fa(),P=b.oldValue,mj(a,P),pa=b.newValue,oj(a,pa));a.gh=!0}else if(c===wd)pa=
b.newValue,"nodeDataArray"===g&&t.qb(pa)?qj(a,pa):"linkDataArray"===g&&t.qb(pa)?rj(a,pa):"linkLabelKeys"===g&&oe(pa)&&(k=a.Qf(b.object),m=a.Ve(pa),null!==k&&null!==m&&(m.$d=k)),a.gh=!0;else if(c===xd)P=b.oldValue,"nodeDataArray"===g&&t.qb(P)?sj(a,P):"linkDataArray"===g&&t.qb(P)?sj(a,P):"linkLabelKeys"===g&&oe(P)&&(m=a.Ve(P),null!==m&&(m.$d=null)),a.gh=!0;else{if(c===ud&&"SourceChanged"===g){var p=a.fh(b.object),Ya=b.propertyName;null!==p&&"string"===typeof Ya&&(p.Kb(Ya),a.ba instanceof Kd&&(k=a.Qf(b.object),
null!==k&&k.Kb(Ya)))}}else if(c===vd){var za=b.propertyName,h=b.object;if(h===a.ba){if("nodeKeyProperty"===za||"nodeCategoryProperty"===za||"linkFromKeyProperty"===za||"linkToKeyProperty"===za||"linkFromPortIdProperty"===za||"linkToPortIdProperty"===za||"linkLabelKeysProperty"===za||"nodeIsGroupProperty"===za||"nodeGroupKeyProperty"===za||"nodeParentKeyProperty"===za||"linkCategoryProperty"===za)a.la.vb||a.hn()}else Wh(a,h,za);a.gh=!0}else if(c===wd||c===xd)tj(a,b),a.gh=!0;else if(c===ud){if("FinishedUndo"===
d||"FinishedRedo"===d)a.la.xi=!0,a.Ba("ChangedSelection"),Bi(a),a.la.xi=!1;a.Du=!0;a.Uf();f=a.li;f.sd&&0===a.la.Je&&Eh(f);"CommittedTransaction"===d&&a.la.cz&&(a.Ug=Math.min(a.Ug,a.la.cj-1));lj(a);a.jz||"CommittedTransaction"!==d||(a.jz=!0,setTimeout(function(){a.Ua.standardMouseOver();a.jz=!1},10))}}finally{a.Na=!0}}}}
function Wh(a,b,c){var d=a.fh(b);if(null!==d&&"string"===typeof c)d.Kb(c),a.ba instanceof Kd&&(b=a.Qf(b),null!==b&&b.Kb(c));else if("string"===typeof c){d=null;for(a=a.$l.k;a.next();){for(var f=a.value,g=0;g<f.length;g++){var h=f[g];null!==h.gg&&(h=h.gg.za(b),null!==h&&(null===d&&(d=t.Db()),d.push(h)))}if(null!==d)break}b=d;if(null!==b){for(d=0;d<b.length;d++)b[d].Kb(c);t.ya(b)}}}t.g(z,"skipsModelSourceBindings",z.prototype.Tt);
t.defineProperty(z,{Tt:"skipsModelSourceBindings"},function(){return this.cD},function(a){this.cD=a});function tj(a,b){var c=b.td===wd,d=c?b.Wf:b.Yf,f=c?b.newValue:b.oldValue,g=a.$l.za(b.object);if(Array.isArray(g)&&"number"===typeof d)for(var h=0;h<g.length;h++){var k=g[h];k.type!==Tg&&k.type!==ci||d++;c?uj(k,f,d):(k.Xe(d),vj(k,d-1))}}function cj(a,b){var c=b.yi;if(t.isArray(c)){var d=a.$l.za(c);if(null===d)a.$l.add(c,[b]);else{for(c=0;c<d.length;c++)if(d[c]===b)return;d.push(b)}}}
function fj(a,b){var c=b.yi;if(t.isArray(c)){var d=a.$l.za(c);if(null!==d)for(var f=0;f<d.length;f++)if(d[f]===b){d.splice(f,1);0===d.length&&a.$l.remove(c);break}}}
z.prototype.clear=z.prototype.clear=function(){var a=null;null!==this.gd&&(a=this.gd.S);this.ba.clear();for(var b=this.Rb.length,c=0;c<b;c++)this.Rb.n[c].clear();this.fg.clear();this.Rl.clear();this.rv.clear();this.Uk.clear();this.av.clear();this.zb.clear();this.ri.clear();this.Ak.clear();this.$l.clear();this.Iv.Ma();this.Iv.clear();this.Iv.freeze();this.Qu.Ma();this.Qu.clear();this.Qu.freeze();this.Bn=null;t.Ss=null;this.Eu=(new x(NaN,NaN,NaN,NaN)).freeze();null!==a&&(this.add(a),this.zb.remove(a));
this.fa()};
z.prototype.reset=z.prototype.reset=function(){this.Yb=!0;this.clear();this.Rb=new B($d);this.Sk={};this.RF();this.Ra=(new w(NaN,NaN)).freeze();this.xc=1;this.Su=(new w(NaN,NaN)).freeze();this.Tu=NaN;this.hv=1E-4;this.ev=100;this.$v=(new w(NaN,NaN)).freeze();this.Ju=(new x(NaN,NaN,NaN,NaN)).freeze();this.Hl=Xe;this.An=xb;this.Hk=Xe;this.Xn=xb;this.Uu=this.Ru=Eb;this.ou=(new ab(16,16,16,16)).freeze();this.Wu=!0;this.Wv=eg;this.Gq="auto";this.qi=this.Oi=this.Bi=this.kv=this.Ci=this.Di=this.Ei=this.pi=
this.ti=this.ni=null;this.Jk=!1;this.mk=this.lk=this.eu=this.Le=!0;this.gu=this.fu=!1;this.ku=this.hu=this.Pu=this.Ou=this.lu=this.ju=this.uk=this.tk=this.sk=this.rk=this.pk=this.qk=this.ok=this.iu=this.wk=this.nk=this.vk=!0;this.Fv=this.Ev=16;this.Ne=(new ab(5)).freeze();this.fv=999999999;this.Pd=null;Zh(this);this.gd=null;this.Li=!0;Yh(this);this.jc=new be;this.Li=!1;this.ba=new M;this.lf=!1;this.Qn=!0;this.Yb=this.Nf=!1;this.fa()};
z.prototype.rebuildParts=z.prototype.hn=function(){for(var a=this.gx.k;a.next();){var b=a.value;(!b.Ld()||b instanceof S)&&t.m('Invalid node template in Diagram.nodeTemplateMap: template for "'+a.key+'" must be a Node or a simple Part, not a Group or Link: '+b)}for(a=this.Iw.k;a.next();)b=a.value,b instanceof S||t.m('Invalid group template in Diagram.groupTemplateMap: template for "'+a.key+'" must be a Group, not a normal Node or Link: '+b);for(a=this.$w.k;a.next();)b=a.value,b instanceof T||t.m('Invalid link template in Diagram.linkTemplateMap: template for "'+
a.key+'" must be a Link, not a normal Node or simple Part: '+b);a=t.Db();for(b=this.selection.k;b.next();){var c=b.value.data;c&&a.push(c)}for(var b=t.Db(),d=this.Kw.k;d.next();)(c=d.value.data)&&b.push(c);for(var c=t.Db(),f=this.jh.k;f.next();)d=f.value,d.data&&(c.push(d.data),c.push(d.location));for(f=this.links.k;f.next();)d=f.value,d.data&&(c.push(d.data),c.push(d.location));for(f=this.sl.k;f.next();)d=f.value,d.data&&(c.push(d.data),c.push(d.location));d=this.ba;d instanceof M&&mj(this,d.hj);
mj(this,d.Gg);nj(this,d.Gg);d instanceof M&&oj(this,d.hj);for(d=0;d<a.length;d++)if(f=this.fh(a[d]))f.eb=!0;for(d=0;d<b.length;d++)if(f=this.fh(b[d]))f.zg=!0;for(d=0;d<c.length;d+=2)if(f=this.fh(c[d]))f.location=c[d+1];t.ya(a);t.ya(b);t.ya(c)};
function nj(a,b){if(null!==b){for(var c=a.ba,d=t.ub(b),f=0;f<d;f++){var g=t.lb(b,f);c.ne(g)?qj(a,g,!1):c instanceof M&&rj(a,g)}if(c instanceof M||c instanceof Kd){for(f=0;f<d;f++)g=t.lb(b,f),c.ne(g)&&yj(a,g);if(c instanceof M)for(c=a.links;c.next();)Lj(c.value)}Mj(a,!1)}}
function qj(a,b,c){if(void 0!==b&&null!==b&&!a.la.vb&&!a.ri.contains(b)){void 0===c&&(c=!0);var d=a.getCategoryForNodeData(b),f=a.findTemplateForNodeData(b,d);f instanceof C&&(Le(f),f=f.copy(),f instanceof C&&(f.rh=d,a.un&&(f.Kk="Tool"),a.add(f),f.data=b,c&&yj(a,b)))}}z.prototype.getCategoryForNodeData=function(a){var b=this.ba,c=b.getCategoryForNodeData(a),d=!1;b instanceof M&&(d=b.XI(a));d&&""===c&&(c="LinkLabel");return c};
z.prototype.findTemplateForNodeData=function(a,b){var c=!1,d=this.ba;d instanceof M&&(c=d.sA(a));c?(c=this.Iw.za(b),null===c&&(c=this.Iw.za(""),null===c&&(t.TG||(t.TG=!0,t.trace('No Group template found for category "'+b+'"'),t.trace("  Using default group template")),c=this.TB))):(c=this.gx.za(b),null===c&&(c=this.gx.za(""),null===c&&(t.WG||(t.WG=!0,t.trace('No Node template found for category "'+b+'"'),t.trace("  Using default node template")),c=this.VB)));return c instanceof C?c:null};
function yj(a,b){var c=a.ba;if(c instanceof M||c instanceof Kd){var d=c.Hb(b);if(void 0!==d){var f=pe(c,d),g=a.fh(b);if(null!==f&&null!==g){for(f=f.k;f.next();){var h=f.value;if(c instanceof M)if(c.ne(h)){if(g instanceof S&&c.Sm(h)===d){var k=a.fh(h);null!==k&&(k.hb=g)}}else{if(k=a.Qf(h),null!==k&&g instanceof R&&(c.il(h)===d&&(k.aa=g),c.ml(h)===d&&(k.ca=g),h=c.kl(h),t.isArray(h)))for(var l=0;l<t.ub(h);l++)if(t.lb(h,l)===d){g.$d=k;break}}else c instanceof Kd&&c.ne(h)&&g instanceof R&&c.Tm(h)===d&&
(k=a.Ew(h),pj(a,g,k))}re(c,d)}c instanceof M?(c=c.Sm(b),void 0!==c&&(c=a.Ve(c),c instanceof S&&(g.hb=c))):c instanceof Kd&&(c=c.Tm(b),void 0!==c&&g instanceof R&&(c=a.Ve(c),pj(a,c,g)))}}}
function pj(a,b,c){if(null!==b&&null!==c){var d=a.wb.zA,f=b,g=c;if(a.pd)for(b=g.qe;b.next();){var h=b.value;if(h.ca===g)return}else for(f=c,g=b,b=f.qe;b.next();)if(h=b.value,h.aa===f)return;null!==d&&mg(d,f,g,null,!0)||(d=a.getCategoryForLinkData(c.data),b=a.findTemplateForLinkData(c.data,d),b instanceof T&&(Le(b),b=b.copy(),b instanceof T&&(b.rh=d,b.aa=f,b.ca=g,a.add(b),b.data=c.data)))}}function oj(a,b){if(null!==b){for(var c=t.ub(b),d=0;d<c;d++){var f=t.lb(b,d);rj(a,f)}Mj(a,!1)}}
function rj(a,b){if(void 0!==b&&null!==b&&!a.la.vb&&!a.Ak.contains(b)){var c=a.getCategoryForLinkData(b),d=a.findTemplateForLinkData(b,c);if(d instanceof T&&(Le(d),d=d.copy(),d instanceof T)){d.rh=c;var c=a.ba,f=c.HI(b);""!==f&&(d.Rf=f);f=c.il(b);void 0!==f&&(f=a.Ve(f),f instanceof R&&(d.aa=f));f=c.KI(b);""!==f&&(d.Og=f);f=c.ml(b);void 0!==f&&(f=a.Ve(f),f instanceof R&&(d.ca=f));c=c.kl(b);if(t.isArray(c))for(var f=t.ub(c),g=0;g<f;g++){var h=t.lb(c,g),h=a.Ve(h);null!==h&&(h.$d=d)}a.add(d);d.data=b}}}
z.prototype.getCategoryForLinkData=function(a){var b=this.ba,c="";b instanceof M?c=b.getCategoryForLinkData(a):b instanceof Kd&&(c=b.JI(a));return c};z.prototype.findTemplateForLinkData=function(a,b){var c=this.$w.za(b);null===c&&(c=this.$w.za(""),null===c&&(t.VG||(t.VG=!0,t.trace('No Link template found for category "'+b+'"'),t.trace("  Using default link template")),c=this.UB));return c instanceof T?c:null};function mj(a,b){for(var c=t.ub(b),d=0;d<c;d++){var f=t.lb(b,d);sj(a,f)}}
function sj(a,b){if(void 0!==b&&null!==b){var c=a.fh(b);if(c instanceof C){c.eb=!1;c.zg=!1;var d=c.layer;if(null!==d&&d.h===a){var f=a.ba;if(f instanceof M&&c instanceof R){var g=f.Hb(c.data);if(void 0!==g){for(var h=c.qe;h.next();){var k=h.value.data;qe(f,g,k)}c.bi&&(h=c.$d,null!==h&&(k=h.data,qe(f,g,k)));if(c instanceof S)for(h=c.Rc;h.next();)k=h.value.data,f.ne(k)&&qe(f,g,k)}}else if(f instanceof Kd&&c instanceof R){h=a.Qf(c.data);if(null!==h&&(h.eb=!1,h.zg=!1,k=h.layer,null!==k)){var l=k.Xe(-1,
h,!1);0<=l&&a.Ic(xd,"parts",k,h,null,l,null);l=h.tp;null!==l&&l(h,k,null)}h=a.pd;for(k=c.qe;k.next();)l=k.value,l=(h?l.ca:l.aa).data,f.ne(l)&&qe(f,g,l)}f=d.Xe(-1,c,!1);0<=f&&a.Ic(xd,"parts",d,c,null,f,null);f=c.tp;null!==f&&f(c,d,null)}}}}z.prototype.findPartForKey=z.prototype.FI=function(a){if(null===a||void 0===a)return null;a=this.ba.uf(a);if(null===a)return null;a=this.ri.za(a);return a instanceof C?a:null};
z.prototype.findNodeForKey=z.prototype.Ve=function(a){if(null===a||void 0===a)return null;a=this.ba.uf(a);if(null===a)return null;a=this.ri.za(a);return a instanceof R?a:null};z.prototype.findPartForData=z.prototype.fh=function(a){if(null===a)return null;var b=this.ri.za(a);if(b instanceof C)return b;b=this.Ak.za(a);return b instanceof C?b:null};z.prototype.findNodeForData=z.prototype.Ew=function(a){if(null===a)return null;a=this.ri.za(a);return a instanceof R?a:null};
z.prototype.findLinkForData=z.prototype.Qf=function(a){if(null===a)return null;a=this.Ak.za(a);return a instanceof T?a:null};t.g(z,"nodeTemplate",z.prototype.sJ);t.defineProperty(z,{sJ:"nodeTemplate"},function(){return this.Fi.za("")},function(a){var b=this.Fi.za("");b!==a&&(t.l(a,C,z,"nodeTemplate"),this.Fi.add("",a),this.j("nodeTemplate",b,a),this.la.vb||this.hn())});t.g(z,"nodeTemplateMap",z.prototype.gx);
t.defineProperty(z,{gx:"nodeTemplateMap"},function(){return this.Fi},function(a){var b=this.Fi;b!==a&&(t.l(a,ia,z,"nodeTemplateMap"),this.Fi=a,this.j("nodeTemplateMap",b,a),this.la.vb||this.hn())});t.g(z,"groupTemplate",z.prototype.MI);t.defineProperty(z,{MI:"groupTemplate"},function(){return this.Ek.za("")},function(a){var b=this.Ek.za("");b!==a&&(t.l(a,S,z,"groupTemplate"),this.Ek.add("",a),this.j("groupTemplate",b,a),this.la.vb||this.hn())});t.g(z,"groupTemplateMap",z.prototype.Iw);
t.defineProperty(z,{Iw:"groupTemplateMap"},function(){return this.Ek},function(a){var b=this.Ek;b!==a&&(t.l(a,ia,z,"groupTemplateMap"),this.Ek=a,this.j("groupTemplateMap",b,a),this.la.vb||this.hn())});t.g(z,"linkTemplate",z.prototype.jJ);t.defineProperty(z,{jJ:"linkTemplate"},function(){return this.zj.za("")},function(a){var b=this.zj.za("");b!==a&&(t.l(a,T,z,"linkTemplate"),this.zj.add("",a),this.j("linkTemplate",b,a),this.la.vb||this.hn())});t.g(z,"linkTemplateMap",z.prototype.$w);
t.defineProperty(z,{$w:"linkTemplateMap"},function(){return this.zj},function(a){var b=this.zj;b!==a&&(t.l(a,ia,z,"linkTemplateMap"),this.zj=a,this.j("linkTemplateMap",b,a),this.la.vb||this.hn())});t.g(z,"isMouseCaptured",z.prototype.Kd);
t.defineProperty(z,{Kd:"isMouseCaptured"},function(){return this.uC},function(a){var b=this.gb;null!==b&&(a?(this.R.bubbles=!1,b.removeEventListener("mousemove",this.Dp,!1),b.removeEventListener("mousedown",this.Cp,!1),b.removeEventListener("mouseup",this.Fp,!1),b.removeEventListener("mousewheel",this.hh,!1),b.removeEventListener("DOMMouseScroll",this.hh,!1),b.removeEventListener("mouseout",this.Ep,!1),window.addEventListener("mousemove",this.Dp,!0),window.addEventListener("mousedown",this.Cp,!0),
window.addEventListener("mouseup",this.Fp,!0),window.addEventListener("mousewheel",this.hh,!0),window.addEventListener("DOMMouseScroll",this.hh,!0),window.addEventListener("mouseout",this.Ep,!0),window.addEventListener("selectstart",this.preventDefault,!1)):(window.removeEventListener("mousemove",this.Dp,!0),window.removeEventListener("mousedown",this.Cp,!0),window.removeEventListener("mouseup",this.Fp,!0),window.removeEventListener("mousewheel",this.hh,!0),window.removeEventListener("DOMMouseScroll",
this.hh,!0),window.removeEventListener("mouseout",this.Ep,!0),window.removeEventListener("selectstart",this.preventDefault,!1),b.addEventListener("mousemove",this.Dp,!1),b.addEventListener("mousedown",this.Cp,!1),b.addEventListener("mouseup",this.Fp,!1),b.addEventListener("mousewheel",this.hh,!1),b.addEventListener("DOMMouseScroll",this.hh,!1),b.addEventListener("mouseout",this.Ep,!1)),this.uC=a)});t.g(z,"position",z.prototype.position);
t.defineProperty(z,{position:"position"},function(){return this.Ra},function(a){var b=this.Ra;if(!b.M(a)){t.l(a,w,z,"position");var c=this.xb.copy();c.x=b.x;c.y=b.y;a=a.copy();if(!this.Yb&&null!==this.gb){this.Yb=!0;var d=this.scale;Fi(this,a,this.Gd,this.Fb/d,this.Eb/d,this.An);this.Yb=!1}this.Ra=a.Z();a=this.Ub;a.sd&&Oh(a,b,this.Ra);this.Yb||this.Et(c,this.xb)}});t.g(z,"initialPosition",z.prototype.WE);
t.defineProperty(z,{WE:"initialPosition"},function(){return this.Su},function(a){this.Su.M(a)||(t.l(a,w,z,"initialPosition"),this.Su=a.Z())});t.g(z,"initialScale",z.prototype.XE);t.defineProperty(z,{XE:"initialScale"},function(){return this.Tu},function(a){this.Tu!==a&&(t.i(a,"number",z,"initialScale"),this.Tu=a)});t.g(z,"grid",z.prototype.lp);
t.defineProperty(z,{lp:"grid"},function(){null===this.gd&&xi(this);return this.gd},function(a){var b=this.gd;if(b!==a){null===b&&(xi(this),b=this.gd);t.l(a,y,z,"grid");a.type!==yi&&t.m("Diagram.grid must be a Panel of type Panel.Grid");var c=b.ja;null!==c&&c.remove(b);this.gd=a;a.name="GRID";null!==c&&c.add(a);Li(this);this.fa();this.j("grid",b,a)}});
t.A(z,{xb:"viewportBounds"},function(){var a=this.AD;if(null===this.gb)return a;var b=this.Ra,c=this.xc;a.p(b.x,b.y,Math.max(this.Fb,0)/c,Math.max(this.Eb,0)/c);return a});t.g(z,"fixedBounds",z.prototype.eA);t.defineProperty(z,{eA:"fixedBounds"},function(){return this.Ju},function(a){var b=this.Ju;b.M(a)||(t.l(a,x,z,"fixedBounds"),this.Ju=a=a.Z(),this.Oc(),this.j("fixedBounds",b,a))});t.A(z,{Gd:"documentBounds"},function(){return this.Eu});
function Gi(a,b){a.wi=!1;var c=a.Eu;c.M(b)||(b=b.Z(),a.Eu=b,a.tj=null,Di(a),a.Ba("DocumentBoundsChanged",null,c.copy()),Ki(a))}t.g(z,"scale",z.prototype.scale);
t.defineProperty(z,{scale:"scale"},function(){return this.xc},function(a){var b=this.xc;t.q(a,z,"scale");a<this.Cg&&(a=this.Cg);a>this.Bg&&(a=this.Bg);if(b!==a){this.xc=a;if(!this.Yb&&!this.Bd&&(this.Yb=!0,null!==this.gb)){var c=this.xb.copy(),d=this.Fb,f=this.Eb;c.width=this.Fb/b;c.height=this.Eb/b;var g=this.$f.copy();if(isNaN(g.x))switch(this.ow){case bc:g.x=0;break;case cc:g.x=d-1;break;case Hb:g.x=d/2;break;case xb:case gc:g.x=d/2}if(isNaN(g.y))switch(this.ow){case ac:g.y=0;break;case dc:g.y=
f-1;break;case Hb:g.y=f/2;break;case xb:case gc:g.y=f/2}this.position=new w(this.Ra.x+g.x/b-g.x/a,this.Ra.y+g.y/b-g.y/a);this.Yb=!1;this.Et(c,this.xb)}this.fa();Ki(this)}});t.g(z,"autoScale",z.prototype.Fm);t.defineProperty(z,{Fm:"autoScale"},function(){return this.Hl},function(a){var b=this.Hl;b!==a&&(t.Aa(a,z,z,"autoScale"),this.Hl=a,this.j("autoScale",b,a),a!==Xe&&Di(this))});t.g(z,"initialAutoScale",z.prototype.SI);
t.defineProperty(z,{SI:"initialAutoScale"},function(){return this.Hk},function(a){var b=this.Hk;b!==a&&(t.Aa(a,z,z,"initialAutoScale"),this.Hk=a,this.j("initialAutoScale",b,a))});t.g(z,"initialViewportSpot",z.prototype.YE);t.defineProperty(z,{YE:"initialViewportSpot"},function(){return this.Uu},function(a){var b=this.Uu;b!==a&&(t.l(a,H,z,"initialViewportSpot"),a.xd()||t.m("initialViewportSpot must be a real Spot: "+a),this.Uu=a,this.j("initialViewportSpot",b,a))});t.g(z,"initialDocumentSpot",z.prototype.VE);
t.defineProperty(z,{VE:"initialDocumentSpot"},function(){return this.Ru},function(a){var b=this.Ru;b!==a&&(t.l(a,H,z,"initialDocumentSpot"),a.xd()||t.m("initialViewportSpot must be a real Spot: "+a),this.Ru=a,this.j("initialDocumentSpot",b,a))});t.g(z,"minScale",z.prototype.Cg);t.defineProperty(z,{Cg:"minScale"},function(){return this.hv},function(a){t.q(a,z,"minScale");var b=this.hv;b!==a&&(0<a?(this.hv=a,this.j("minScale",b,a),a>this.scale&&(this.scale=a)):t.ka(a,"> 0",z,"minScale"))});
t.g(z,"maxScale",z.prototype.Bg);t.defineProperty(z,{Bg:"maxScale"},function(){return this.ev},function(a){t.q(a,z,"maxScale");var b=this.ev;b!==a&&(0<a?(this.ev=a,this.j("maxScale",b,a),a<this.scale&&(this.scale=a)):t.ka(a,"> 0",z,"maxScale"))});t.g(z,"zoomPoint",z.prototype.$f);t.defineProperty(z,{$f:"zoomPoint"},function(){return this.$v},function(a){this.$v.M(a)||(t.l(a,w,z,"zoomPoint"),this.$v=a=a.Z())});t.g(z,"contentAlignment",z.prototype.ow);
t.defineProperty(z,{ow:"contentAlignment"},function(){return this.An},function(a){var b=this.An;b.M(a)||(t.l(a,H,z,"contentAlignment"),this.An=a=a.Z(),this.j("contentAlignment",b,a),Di(this))});t.g(z,"initialContentAlignment",z.prototype.TI);t.defineProperty(z,{TI:"initialContentAlignment"},function(){return this.Xn},function(a){var b=this.Xn;b.M(a)||(t.l(a,H,z,"initialContentAlignment"),this.Xn=a=a.Z(),this.j("initialContentAlignment",b,a))});t.g(z,"padding",z.prototype.padding);
t.defineProperty(z,{padding:"padding"},function(){return this.Ne},function(a){"number"===typeof a?a=new ab(a):t.l(a,ab,z,"padding");var b=this.Ne;b.M(a)||(this.Ne=a=a.Z(),this.Oc(),this.j("padding",b,a))});t.A(z,{jh:"nodes"},function(){return this.rv.k});t.A(z,{links:"links"},function(){return this.av.k});t.A(z,{sl:"parts"},function(){return this.zb.k});z.prototype.findTopLevelGroups=function(){return this.Uk.k};t.g(z,"layout",z.prototype.jc);
t.defineProperty(z,{jc:"layout"},function(){return this.Pd},function(a){var b=this.Pd;b!==a&&(t.l(a,be,z,"layout"),null!==b&&(b.h=null,b.group=null),this.Pd=a,a.h=this,a.group=null,this.mu=!0,this.j("layout",b,a),this.te())});z.prototype.layoutDiagram=function(a){Bi(this);a&&Mj(this,!0);Ni(this,!1)};function Mj(a,b){for(var c=a.Uk.k;c.next();)Nj(a,c.value,b);null!==a.jc&&(b?a.jc.$e=!1:a.jc.J())}
function Nj(a,b,c){if(null!==b){for(var d=b.qo.k;d.next();)Nj(a,d.value,c);null!==b.jc&&(c?b.jc.$e=!1:b.jc.J())}}function Ni(a,b){if(!a.Gy){var c=a.jc,d=a.Xu;a.Xu=!0;var f=a.Na;a.Na=!0;try{for(var g=a.Uk.k;g.next();)Oj(a,g.value,b);c.$e||b&&!c.wA||(c.doLayout(a),Bi(a),c.$e=!0)}finally{a.mu=!c.$e,a.Xu=d,a.Na=f}}}function Oj(a,b,c){if(null!==b){for(var d=b.qo.k;d.next();)Oj(a,d.value,c);d=b.jc;null===d||d.$e||c&&!d.wA||(b.LC=!b.location.N(),d.doLayout(b),b.J(Pj),d.$e=!0,Pi(a,b))}}
t.g(z,"isTreePathToChildren",z.prototype.pd);t.defineProperty(z,{pd:"isTreePathToChildren"},function(){return this.Wu},function(a){var b=this.Wu;if(b!==a&&(t.i(a,"boolean",z,"isTreePathToChildren"),this.Wu=a,this.j("isTreePathToChildren",b,a),!this.la.vb))for(a=this.jh;a.next();)Qj(a.value)});z.prototype.findTreeRoots=function(){for(var a=new B(R),b=this.jh.k;b.next();){var c=b.value;c.sp&&null===c.ft()&&a.add(c)}return a.k};t.g(z,"isCollapsingExpanding",z.prototype.Wd);
t.defineProperty(z,{Wd:null},function(){return this.mC},function(a){this.mC=a});
function Vh(a){function b(a){var b=a.toLowerCase(),h=new B("function");c.add(a,h);c.add(b,h);d.add(a,a);d.add(b,a)}var c=new ia("string",B),d=new ia("string","string");b("AnimationStarting");b("AnimationFinished");b("BackgroundSingleClicked");b("BackgroundDoubleClicked");b("BackgroundContextClicked");b("ClipboardChanged");b("ClipboardPasted");b("DocumentBoundsChanged");b("ExternalObjectsDropped");b("InitialLayoutCompleted");b("LayoutCompleted");b("LinkDrawn");b("LinkRelinked");b("LinkReshaped");b("Modified");
b("ObjectSingleClicked");b("ObjectDoubleClicked");b("ObjectContextClicked");b("PartCreated");b("PartResized");b("PartRotated");b("SelectionMoved");b("SelectionCopied");b("SelectionDeleting");b("SelectionDeleted");b("SelectionGrouped");b("SelectionUngrouped");b("ChangingSelection");b("ChangedSelection");b("SubGraphCollapsed");b("SubGraphExpanded");b("TextEdited");b("TreeCollapsed");b("TreeExpanded");b("ViewportBoundsChanged");a.Iy=c;a.Hy=d}
function ja(a,b){var c=a.Hy.za(b);return null!==c?c:a.Hy.za(b.toLowerCase())}function Rj(a,b){var c=a.Iy.za(b);if(null!==c)return c;c=a.Iy.za(b.toLowerCase());if(null!==c)return c;t.m("Unknown DiagramEvent name: "+b);return null}z.prototype.addDiagramListener=z.prototype.Jz=function(a,b){t.i(a,"string",z,"addDiagramListener:name");t.i(b,"function",z,"addDiagramListener:listener");var c=Rj(this,a);null!==c&&c.add(b)};
z.prototype.removeDiagramListener=z.prototype.OF=function(a,b){t.i(a,"string",z,"removeDiagramListener:name");t.i(b,"function",z,"addDiagramListener:listener");var c=Rj(this,a);null!==c&&c.remove(b)};z.prototype.raiseDiagramEvent=z.prototype.Ba=function(a,b,c){e&&t.i(a,"string",z,"raiseDiagramEvent:name");var d=Rj(this,a),f=new rd;f.h=this;f.name=ja(this,a);void 0!==b&&(f.Ax=b);void 0!==c&&(f.kx=c);a=d.length;if(1===a)d=d.wa(0),d(f);else if(0!==a)for(b=d.Ie(),c=0;c<a;c++)d=b[c],d(f);return f.cancel};
function Yf(a,b){var c=!1;a.xb.Vj(b)&&(c=!0);c=a.cA(b,function(a){return a.S},function(a){return a instanceof T},!0,function(a){return a instanceof T},c);if(0!==c.count)for(c=c.k;c.next();){var d=c.value;d.dj&&d.ac()}}
function Sj(a,b){null===a.Sd&&(a.Sd=new Tj);var c=null!==b?b.hb:null;if(a.Sd.nt||a.Sd.group!==c){if(null===c){var d;d=a.wi?Ci(a):a.Gd.copy();d.Sf(100,100);a.Sd.initialize(d);d=t.Gf();for(var f=a.jh;f.next();){var g=f.value,h=g.layer;null!==h&&h.visible&&!h.rc&&Uj(a,g,null,d)}}else for(c.oa.N()||c.sf(),d=c.oa.copy(),d.Sf(20,20),a.Sd.initialize(d),d=t.Gf(),f=c.Rc;f.next();)g=f.value,g instanceof R&&Uj(a,g,null,d);t.hc(d);a.Sd.group=c;a.Sd.nt=!1}else Vj(a.Sd);return a.Sd}
function Uj(a,b,c,d){if(b!==c)if(b.La()&&b.canAvoid()){c=b.getAvoidableRect(d);d=a.Sd.Hm;b=a.Sd.Gm;for(var f=c.x+c.width,g=c.y+c.height,h=c.x;h<f;h+=d){for(var k=c.y;k<g;k+=b)Wj(a.Sd,h,k);Wj(a.Sd,h,g)}for(k=c.y;k<g;k+=b)Wj(a.Sd,f,k);Wj(a.Sd,f,g)}else if(b instanceof S)for(b=b.Rc;b.next();)f=b.value,f instanceof R&&Uj(a,f,c,d)}function Xj(a,b){null===a.Sd||a.Sd.nt||null!==b&&!b.canAvoid()||(a.Sd.nt=!0)}
z.prototype.simulatedMouseMove=z.prototype.dB=function(a,b,c){if(null!==ff){var d=ff.h;c instanceof z||(c=null);var f=gf;c!==f&&(null!==f&&f!==d&&null!==f.wb.Hd&&(tf(f),ff.pt=!1,f.wb.Hd.doSimulatedDragLeave()),gf=c,null!==c&&c!==d&&null!==c.wb.Hd&&(zf(),f=c.wb.Hd,wf.contains(f)||wf.add(f),c.wb.Hd.doSimulatedDragEnter()));if(null===c||c===d||!c.Kz||c.ab||!c.Bm)return!1;d=c.wb.Hd;null!==d&&(null!==a?b=c.Un(a):null===b&&(b=new w),c.ec.ea=b,c.ec.ak=!1,c.ec.lj=!1,d.doSimulatedDragOver());return!0}return!1};
z.prototype.simulatedMouseUp=z.prototype.rG=function(a,b,c,d){if(null!==ff){null===d&&(d=b);b=gf;var f=ff.h;if(d!==b){if(null!==b&&b!==f&&null!==b.wb.Hd)return tf(b),ff.pt=!1,b.wb.Hd.doSimulatedDragLeave(),!1;gf=d;null!==d&&null!==d.wb.Hd&&(zf(),b=d.wb.Hd,wf.contains(b)||wf.add(b),d.wb.Hd.doSimulatedDragEnter())}if(null===d)return ff.doCancel(),!0;if(d!==this)return null!==a&&(c=d.Un(a)),d.ec.ea=c,d.ec.ak=!1,d.ec.lj=!0,a=d.wb.Hd,null!==a&&a.doSimulatedDrop(),a=ff,null!==a&&(d=a.mayCopy(),a.gf=d?"Copy":
"Move",a.stopTool()),!0}return!1};t.g(z,"autoScrollRegion",z.prototype.OD);t.defineProperty(z,{OD:"autoScrollRegion"},function(){return this.ou},function(a){"number"===typeof a?a=new ab(a):t.l(a,ab,z,"autoScrollRegion");var b=this.ou;b.M(a)||(this.ou=a=a.Z(),this.Oc(),this.j("autoScrollRegion",b,a))});function Uf(a,b){a.nu.assign(b);Yj(a,a.nu).tf(a.position)?tf(a):Zj(a)}
function Zj(a){null===a.Il&&(a.Il={},a.Il.id=setInterval(function(){if(null!==a.Il){tf(a);var b=a.R.event;if(null!==b){var c=Yj(a,a.nu);c.tf(a.position)||(a.position=c,a.R.ea=a.KG(a.nu),a.dB(b,null,b.target.U)||a.doMouseMove(),a.wi=!0,Gi(a,a.qf()),a.ve=!0,a.Uf(),Zj(a))}}},a.hH))}function tf(a){null!==a.Il&&(clearInterval(a.Il.id),a.Il=null)}
function Yj(a,b){var c=a.position,d=a.OD;if(0>=d.top&&0>=d.left&&0>=d.right&&0>=d.bottom)return c;var f=a.xb,g=a.scale,f=t.ik(0,0,f.width*g,f.height*g),h=t.mc(0,0);if(b.x>=f.x&&b.x<f.x+d.left){var k=Math.max(a.Qp,1),k=k|0;h.x-=k;b.x<f.x+d.left/2&&(h.x-=k);b.x<f.x+d.left/4&&(h.x-=4*k)}else b.x<=f.x+f.width&&b.x>f.x+f.width-d.right&&(k=Math.max(a.Qp,1),k|=0,h.x+=k,b.x>f.x+f.width-d.right/2&&(h.x+=k),b.x>f.x+f.width-d.right/4&&(h.x+=4*k));b.y>=f.y&&b.y<f.y+d.top?(k=Math.max(a.Rp,1),k|=0,h.y-=k,b.y<f.y+
d.top/2&&(h.y-=k),b.y<f.y+d.top/4&&(h.y-=4*k)):b.y<=f.y+f.height&&b.y>f.y+f.height-d.bottom&&(k=Math.max(a.Rp,1),k|=0,h.y+=k,b.y>f.y+f.height-d.bottom/2&&(h.y+=k),b.y>f.y+f.height-d.bottom/4&&(h.y+=4*k));h.tf(F.mj)||(c=new w(c.x+h.x/g,c.y+h.y/g));t.hc(f);t.B(h);return c}z.prototype.makeSVG=z.prototype.makeSvg=function(a){void 0===a&&(a={});a.context="svg";a=ak(this,a);return null!==a?a.Bl:null};
z.prototype.makeImage=function(a){void 0===a&&(a={});var b=(a.document||document).createElement("img");b.src=this.kJ(a);return b instanceof HTMLImageElement?b:null};z.prototype.makeImageData=z.prototype.kJ=function(a){void 0===a&&(a={});var b=ak(this,a);return null!==b?b.toDataURL(a.type,a.details):""};
function ak(a,b){a.Ub.Al();a.Uf();if(null===a.gb)return null;"object"!==typeof b&&t.m("properties argument must be an Object.");var c=!1,d=b.size||null,f=b.scale||null;void 0!==b.scale&&isNaN(b.scale)&&(f="NaN");var g=b.maxSize;void 0===b.maxSize&&(c=!0,g="svg"===b.context?new fa(Infinity,Infinity):new fa(2E3,2E3));var h=b.position||null,k=b.parts||null,l=void 0===b.padding?1:b.padding,m=b.background||null,n=b.omitTemporary;void 0===n&&(n=!0);var p=b.document||document,q=b.elementFinished||null,r=
b.showTemporary;void 0===r&&(r=!n);n=b.showGrid;void 0===n&&(n=r);null!==d&&isNaN(d.width)&&isNaN(d.height)&&(d=null);l&&"number"===typeof l&&(l=new ab(l));l||(l=new ab(0));l.left=Math.max(l.left,0);l.right=Math.max(l.right,0);l.top=Math.max(l.top,0);l.bottom=Math.max(l.bottom,0);a.Mn=!1;wi(a);var s=p.createElement("canvas"),u=s.getContext("2d"),v=s;if(!(d||f||k||h))return s.width=a.Fb+Math.ceil(l.left+l.right),s.height=a.Eb+Math.ceil(l.top+l.bottom),"svg"===b.context&&(u=v=new nc(s,p,q),u instanceof
nc&&(a.Mn=!0)),Wi(a,u,l,new fa(s.width,s.height),a.xc,a.Ra,k,m,r,n),a.Mn=!0,v;var D=a.Se.Ys,A,G=new w(0,0);A=a.Gd.copy();A.YJ(a.padding);if(r)for(var K=!0,K=a.Rb.n,N=K.length,O=0;O<N;O++){var U=K[O];if(U.visible&&U.rc)for(var U=U.zb.n,X=U.length,Z=0;Z<X;Z++){var P=U[Z];P.Rw&&P.La()&&(P=P.oa,P.N()&&A.ii(P))}}G.x=A.x;G.y=A.y;if(k){var pa,K=!0,k=k.k;for(k.reset();k.next();)P=k.value,P instanceof C&&(U=P.layer,U&&!U.visible||null!==U&&!r&&U.rc||!P.La()||(P=P.oa,P.N()&&(K?(K=!1,pa=P.copy()):pa.ii(P))));
K&&(pa=new x(0,0,0,0));A.width=pa.width;A.height=pa.height;G.x=pa.x;G.y=pa.y}null!==h&&h.N()&&(G=h,f||(f=D));pa=h=0;l&&(h=l.left+l.right,pa=l.top+l.bottom);K=N=0;d&&(N=d.width,K=d.height,isFinite(N)&&(N=Math.max(0,N-h)),isFinite(K)&&(K=Math.max(0,K-pa)));d&&f?("NaN"===f&&(f=D),d.N()?(d=N,A=K):isNaN(K)?(d=N,A=A.height*f):(d=A.width*f,A=K)):d?d.N()?(f=Math.min(N/A.width,K/A.height),d=N,A=K):isNaN(K)?(f=N/A.width,d=N,A=A.height*f):(f=K/A.height,d=A.width*f,A=K):f?"NaN"===f&&g.N()?(f=Math.min((g.width-
h)/A.width,(g.height-pa)/A.height),f>D?(f=D,d=A.width,A=A.height):(d=g.width,A=g.height)):(d=A.width*f,A=A.height*f):(f=D,d=A.width,A=A.height);l?(d+=h,A+=pa):l=new ab(0);g&&(D=g.width,g=g.height,"svg"!==b.context&&c&&!t.SG&&(d>D||A>g)&&(t.trace("Diagram.makeImage(data): Diagram width or height is larger than the default max size. ("+Math.ceil(d)+"x"+Math.ceil(A)+" vs 2000x2000) Consider increasing the max size."),t.SG=!0),isNaN(D)&&(D=2E3),isNaN(g)&&(g=2E3),isFinite(D)&&(d=Math.min(d,D)),isFinite(g)&&
(A=Math.min(A,g)));s.width=Math.ceil(d);s.height=Math.ceil(A);"svg"===b.context&&(u=v=new nc(s,p,q),u instanceof nc&&(a.Mn=!0));Wi(a,u,l,new fa(Math.ceil(d),Math.ceil(A)),f,G,k,m,r,n);a.Mn=!0;return v}z.inherit=function(a,b){t.i(a,"function",z,"inherit");t.i(b,"function",z,"inherit");b.tH&&t.m("Cannot inherit from "+t.xg(b));t.Ka(a,b)};
function bk(a){1<arguments.length&&t.m("Palette constructor can only take one optional argument, the DIV HTML element or its id.");z.call(this,a);this.Ms=!0;this.Rj=!1;this.ab=!0;this.ow=Fb;this.jc=new ck}t.ga("Palette",bk);t.Ka(bk,z);
function Zi(a){1<arguments.length&&t.m("Overview constructor can only take one optional argument, the DIV HTML element or its id.");z.call(this,a);this.li.isEnabled=!1;this.Yb=!0;this.Gi=null;this.nH=this.Gu=!0;this.PJ("drawShadows",!1);var b=new C,c=new V;c.stroke="magenta";c.fb=2;c.fill="transparent";c.name="BOXSHAPE";b.qx="BOXSHAPE";b.ax="BOXSHAPE";b.cursor="move";b.add(c);this.Kl=b;this.yz=document.createElement("canvas");this.vH=this.yz.getContext("2d");b=new dk;b.yd(this);this.wb.ef.Jd(0,b);
var d=this;this.IF=function(){ek(d)};this.HF=function(){null!==d.Gi&&(d.Oc(),d.fa())};this.ab=!0;this.Pe=!1;this.Fm=Hi;this.wb.cn=af;this.Yb=!1}t.ga("Overview",Zi);t.Ka(Zi,z);
function $i(a){a.Yb||a.Bd||!1!==a.Nf||(a.Nf=!0,requestAnimationFrame(function(){if(a.Nf&&!a.Bd&&(a.Nf=!1,null!==a.Nb)){a.Bd=!0;Bi(a);a.Gd.N()||Gi(a,a.qf());null===a.Nb&&t.m("No div specified");null===a.gb&&t.m("No canvas specified");if(a.ve){var b=a.Gi;if(null!==b&&!b.Ub.yg&&!b.Ub.sd){var b=a.Sg,c=a.yz;b.setTransform(1,0,0,1,0,0);b.clearRect(0,0,a.gb.width,a.gb.height);b.drawImage(c,0,0);c=a.md;c.reset();1!==a.xc&&c.scale(a.scale);0===a.position.x&&0===a.position.y||c.translate(-a.Ra.x,-a.Ra.y);b.setTransform(c.m11,
c.m12,c.m21,c.m22,c.dx,c.dy);for(var c=a.Rb.length,d=0;d<c;d++)a.Rb.n[d].Ue(b,a);a.Ik=!1;a.ve=!1}}a.Bd=!1}}))}Zi.prototype.computePixelRatio=function(){return 1};
Zi.prototype.Ue=function(){null===this.Nb&&t.m("No div specified");null===this.gb&&t.m("No canvas specified");if(this.ve){var a=this.Gi;if(!(null===a||a.Ub.yg||a.Ub.sd||!this.nH&&a.wb.Hd.ia)){var b=a.lp;(b&&b.visible&&isNaN(b.width)||isNaN(b.height))&&Li(a);var c=this.gb,b=this.Sg,d=this.yz,f=this.vH;d.width=c.width;d.height=c.height;b.du="";b.setTransform(1,0,0,1,0,0);b.clearRect(0,0,this.gb.width,this.gb.height);var g=this.md;g.reset();1!==this.xc&&g.scale(this.scale);0===this.position.x&&0===this.position.y||
g.translate(-this.Ra.x,-this.Ra.y);b.setTransform(g.m11,g.m12,g.m21,g.m22,g.dx,g.dy);for(var h=this.Gu,k=this.xb,l=a.Rb.length,g=0;g<l;g++){var m=a.Rb.n[g],n=b,p=k,q=h;void 0===q&&(q=!0);if(q||!m.rc)for(var m=m.zb,q=this.scale,r=m.length,s=0;s<r;s++){var u=m.n[s],v=u.oa;v.Tf(p)&&(1<v.width*q||1<v.height*q?u.Ue(n,this):Rh(u,n))}}f.drawImage(c,0,0);e&&e.Rz&&(f.fillStyle="red",f.fillRect(0,d.height/2,d.width,4));a=this.Rb.n;c=this.Rb.length;for(g=0;g<c;g++)a[g].Ue(b,this);this.ve=this.Ik=!1}}};
t.g(Zi,"observed",Zi.prototype.uJ);t.defineProperty(Zi,{uJ:"observed"},function(){return this.Gi},function(a){var b=this.Gi;null!==a&&t.l(a,z,Zi,"observed");b===a||a instanceof Zi||(null!==b&&(this.remove(this.vg),b.OF("ViewportBoundsChanged",this.IF),b.OF("DocumentBoundsChanged",this.HF),b.lm.remove(this)),this.Gi=a,null!==a&&(a.Jz("ViewportBoundsChanged",this.IF),a.Jz("DocumentBoundsChanged",this.HF),a.lm.add(this),this.add(this.vg),ek(this)),this.Oc(),this.j("observed",b,a))});t.g(Zi,"box",Zi.prototype.vg);
t.defineProperty(Zi,{vg:"box"},function(){return this.Kl},function(a){var b=this.Kl;b!==a&&(this.Kl=a,this.remove(b),this.add(this.Kl),ek(this),this.j("box",b,a))});t.g(Zi,"drawsTemporaryLayers",Zi.prototype.CI);t.defineProperty(Zi,{CI:"drawsTemporaryLayers"},function(){return this.Gu},function(a){this.Gu!==a&&(this.Gu=a,this.RA())});
function ek(a){var b=a.vg;if(null!==b){var c=a.Gi;if(null!==c){a.ve=!0;var c=c.xb,d=b.Pt,f=t.Cl();f.p(c.width,c.height);d.Ca=f;t.ck(f);a=2/a.scale;d instanceof V&&(d.fb=a);b.location=new w(c.x-a/2,c.y-a/2)}}}Zi.prototype.qf=function(){var a=this.Gi;return null===a?F.gH:a.Gd};Zi.prototype.Et=function(a){this.Yb||(zi(this),this.fa(),Ki(this),this.Oc(),ek(this),this.Ba("ViewportBoundsChanged",a))};function dk(){ae.call(this);this.name="MoveBox"}t.Ka(dk,ae);
dk.prototype.doStart=function(){this.ia=this.h.Kd=!0};dk.prototype.doMouseMove=function(){if(this.ia){var a=this.h;if(null!==a&&null!==a.Gi){var b=a.Gi;if(null!==b){var c=b.xb,d=a.R.ea;b.position=new w(d.x-c.width/2,d.y-c.height/2);a.te()}}}};dk.prototype.doMouseUp=function(){this.ia&&this.doMouseMove();this.stopTool()};dk.prototype.doStop=function(){this.ia=!1;var a=this.h;null!==a&&(a.Kd=!1,ek(a))};
function ea(a){1<arguments.length&&t.m("Brush constructor can take at most one optional argument, the Brush type.");t.Ac(this);this.nb=!1;void 0===a?(this.da=Nd,this.zn="black"):"string"===typeof a?(this.da=Nd,e&&t.To("Brush constructor",a),this.zn=a):(e&&t.Aa(a,ea,ea,"constructor:type"),this.da=a,this.zn="black");var b=this.da;b===Yd?(this.Ao=Fb,this.On=Mb):this.On=b===Zd?this.Ao=Hb:this.Ao=wb;this.Mv=0;this.Hu=NaN;this.Rg=this.yv=this.Qg=null;this.sy=this.ty=0}t.ga("Brush",ea);var Nd;
ea.Solid=Nd=t.w(ea,"Solid",0);var Yd;ea.Linear=Yd=t.w(ea,"Linear",1);var Zd;ea.Radial=Zd=t.w(ea,"Radial",2);var fk;ea.Pattern=fk=t.w(ea,"Pattern",4);var da;ea.isValidColor=da=function(a){if("black"===a)return!0;if(""===a)return!1;e&&t.i(a,"string",ea,"isValidColor");var b=t.ln;b.fillStyle="#000000";var c=b.fillStyle;b.fillStyle=a;if(b.fillStyle!==c)return!0;b.fillStyle="#FFFFFF";c=b.fillStyle;b.fillStyle=a;return b.fillStyle!==c};
ea.prototype.copy=function(){var a=new ea;a.da=this.da;a.zn=this.zn;a.Ao=this.Ao.Z();a.On=this.On.Z();a.Mv=this.Mv;a.Hu=this.Hu;null!==this.Qg&&(a.Qg=this.Qg.copy());a.yv=this.yv;return a};ea.prototype.Ja=function(){this.freeze();Object.freeze(this);return this};ea.prototype.freeze=function(){this.nb=!0;null!==this.Qg&&this.Qg.freeze();return this};ea.prototype.Ma=function(){Object.isFrozen(this)&&t.m("cannot thaw constant: "+this);this.nb=!1;null!==this.Qg&&this.Qg.Ma();return this};
ea.prototype.toString=function(){var a="Brush(";if(this.type===Nd)a+=this.color;else if(a=this.type===Yd?a+"Linear ":this.type===Zd?a+"Radial ":this.type===fk?a+"Pattern ":a+"(unknown) ",a+=this.start+" "+this.end,null!==this.Vo)for(var b=this.Vo.k;b.next();)a+=" "+b.key+":"+b.value;return a+")"};
ea.prototype.addColorStop=ea.prototype.addColorStop=function(a,b){t.L(this);("number"!==typeof a||!isFinite(a)||1<a||0>a)&&t.ka(a,"0 <= loc <= 1",ea,"addColorStop:loc");t.i(b,"string",ea,"addColorStop:color");null===this.Qg&&(this.Qg=new ia("number","string"));this.Qg.add(a,b);this.da===Nd&&(this.type=Yd);this.Rg=null};t.g(ea,"type",ea.prototype.type);
t.defineProperty(ea,{type:"type"},function(){return this.da},function(a){t.L(this,a);t.Aa(a,ea,ea,"type");this.da=a;this.start.Ge()&&(a===Yd?this.start=Fb:a===Zd&&(this.start=Hb));this.end.Ge()&&(a===Yd?this.end=Mb:a===Zd&&(this.end=Hb));this.Rg=null});t.g(ea,"color",ea.prototype.color);t.defineProperty(ea,{color:"color"},function(){return this.zn},function(a){t.L(this,a);t.i(a,"string",ea,"color");this.zn=a;this.Rg=null});t.g(ea,"start",ea.prototype.start);
t.defineProperty(ea,{start:"start"},function(){return this.Ao},function(a){t.L(this,a);a instanceof H||t.bc(a,"Spot",ea,"start");this.Ao=a.Z();this.Rg=null});t.g(ea,"end",ea.prototype.end);t.defineProperty(ea,{end:"end"},function(){return this.On},function(a){t.L(this,a);a instanceof H||t.bc(a,"Spot",ea,"end");this.On=a.Z();this.Rg=null});t.g(ea,"startRadius",ea.prototype.Vp);
t.defineProperty(ea,{Vp:"startRadius"},function(){return this.Mv},function(a){t.L(this,a);t.q(a,ea,"startRadius");0>a&&t.ka(a,">= zero",ea,"startRadius");this.Mv=a;this.Rg=null});t.g(ea,"endRadius",ea.prototype.ap);t.defineProperty(ea,{ap:"endRadius"},function(){return this.Hu},function(a){t.L(this,a);t.q(a,ea,"endRadius");0>a&&t.ka(a,">= zero",ea,"endRadius");this.Hu=a;this.Rg=null});t.g(ea,"colorStops",ea.prototype.Vo);
t.defineProperty(ea,{Vo:"colorStops"},function(){return this.Qg},function(a){t.L(this,a);e&&t.l(a,ia,ea,"colorStops");this.Qg=a;this.Rg=null});t.g(ea,"pattern",ea.prototype.pattern);t.defineProperty(ea,{pattern:"pattern"},function(){return this.yv},function(a){t.L(this,a);this.yv=a;this.Rg=null});
ea.randomColor=function(a,b){void 0===a&&(a=128);e&&(t.q(a,ea,"randomColor:min"),(0>a||255<a)&&t.ka(a,"0 <= min <= 255",ea,"randomColor:min"));void 0===b&&(b=Math.max(a,255));e&&(t.q(b,ea,"randomColor:max"),(b<a||255<b)&&t.ka(b,"min <= max <= 255",ea,"randomColor:max"));var c=Math.abs(b-a),d=Math.floor(a+Math.random()*c).toString(16),f=Math.floor(a+Math.random()*c).toString(16),c=Math.floor(a+Math.random()*c).toString(16);2>d.length&&(d="0"+d);2>f.length&&(f="0"+f);2>c.length&&(c="0"+c);return"#"+
d+f+c};
function Q(){t.Ac(this);this.ma=30723;this.Lf=1;this.Ii=null;this.Zb="";this.vc=this.Mb=null;this.Ra=(new w(NaN,NaN)).freeze();this.jf=(new fa(NaN,NaN)).freeze();this.Ej=F.gq;this.Dj=F.fH;this.md=new ga;this.kk=new ga;this.Mk=new ga;this.xc=1;this.wn=0;this.Oh=gk;this.sr=F.fq;this.Wc=(new x(NaN,NaN,NaN,NaN)).freeze();this.cc=(new x(NaN,NaN,NaN,NaN)).freeze();this.hd=(new x(0,0,NaN,NaN)).freeze();this.ys=this.Nq=this.P=this.Nr=this.Pr=null;this.zs=this.Oq=Infinity;this.mq=this.ue=xb;this.as=0;this.Jj=
1;this.tq=0;this.rj=1;this.es=-Infinity;this.ds=0;this.fs=F.mj;this.gs=zg;this.Aq="";this.nm=this.oi=this.Ml=this.Kc=this.Q=null}t.ga("GraphObject",Q);t.Xh(Q);
Q.prototype.cloneProtected=function(a){a.ma=this.ma|6144;a.Lf=this.Lf;a.Zb=this.Zb;a.Mb=this.Mb;a.vc=this.vc;a.Ra.assign(this.Ra);a.jf.assign(this.jf);a.Ej=this.Ej.Z();a.Dj=this.Dj.Z();a.Mk=this.Mk.copy();a.xc=this.xc;a.wn=this.wn;a.Oh=this.Oh;a.sr=this.sr.Z();a.Wc.assign(this.Wc);a.cc.assign(this.cc);a.hd.assign(this.hd);a.Nr=this.Nr;if(null!==this.P){var b=this.P;a.P={Dh:b.Dh.Z(),Th:b.Th.Z(),Ah:b.Ah,Qh:b.Qh,zh:b.zh,Ph:b.Ph,Ch:b.Ch,Sh:b.Sh}}else a.P=null;a.Nq=this.Nq;a.Oq=this.Oq;a.ys=this.ys;a.zs=
this.zs;a.ue=this.ue.Z();a.mq=this.mq.Z();a.as=this.as;a.Jj=this.Jj;a.tq=this.tq;a.rj=this.rj;a.es=this.es;a.ds=this.ds;a.fs=this.fs.Z();a.gs=this.gs;a.Aq=this.Aq;null!==this.Q?(b=this.Q,a.Q={ni:b.ni,ti:b.ti,pi:b.pi,Dr:b.Dr,Er:b.Er,Ei:b.Ei,Di:b.Di,Ci:b.Ci,Br:b.Br,Cr:b.Cr,Bi:b.Bi,iq:b.iq,jq:b.jq,kq:b.kq,hq:b.hq,Oi:b.Oi,qi:b.qi}):a.Q=null;a.Kc=this.Kc;if(Array.isArray(this.Ml))for(a.Ml=this.Ml.slice(0),b=0;b<this.Ml.length;b++){var c=this.Ml[b];a[c]=this[c]}null!==this.oi&&(a.oi=this.oi.copy())};
Q.prototype.Yh=function(a){a.Pr=null;a.nm=null;a.ha()};Q.prototype.copy=function(){var a=new this.constructor;this.cloneProtected(a);return a};Q.prototype.toString=function(){return t.xg(Object.getPrototypeOf(this))+"#"+t.od(this)};var Vg;Q.None=Vg=t.w(Q,"None",0);var gk;Q.Default=gk=t.w(Q,"Default",0);var hk;Q.Vertical=hk=t.w(Q,"Vertical",4);var ik;Q.Horizontal=ik=t.w(Q,"Horizontal",5);var Cc;Q.Fill=Cc=t.w(Q,"Fill",3);var Xg;Q.Uniform=Xg=t.w(Q,"Uniform",1);var Yg;
Q.UniformToFill=Yg=t.w(Q,"UniformToFill",2);function jk(a){a.Q={ni:null,ti:null,pi:null,Dr:null,Er:null,Ei:null,Di:null,Ci:null,Br:null,Cr:null,Bi:null,iq:null,jq:null,kq:null,hq:null,Oi:null,qi:null}}aa=Q.prototype;aa.Fe=function(){this.P={Dh:wb,Th:wb,Ah:10,Qh:10,zh:kk,Ph:kk,Ch:0,Sh:0}};
function lk(a,b,c,d,f,g,h){var k=0.001,l=g.length;a.moveTo(b,c);d-=b;k=f-c;0===d&&(d=0.001);f=k/d;for(var m=Math.sqrt(d*d+k*k),n=0,p=!0,q=0===h?!1:!0;0.1<=m;){if(q){k=g[n++%l];for(k-=h;0>k;)k+=g[n++%l],p=!p;q=!1}else k=g[n++%l];k>m&&(k=m);var r=Math.sqrt(k*k/(1+f*f));0>d&&(r=-r);b+=r;c+=f*r;p?a.lineTo(b,c):a.moveTo(b,c);m-=k;p=!p}}aa.Ic=function(a,b,c,d,f,g,h){var k=this.S;null!==k&&(k.gn(a,b,c,d,f,g,h),0!==(this.ma&1024)&&c===this&&a===vd&&mk(this,k,b))};
function mk(a,b,c){var d=a.ep();if(null!==d)for(var f=a.Kc.k;f.next();){var g=f.value,h=g.Ut;if(null!==h){var k=d.oe(h);if(null===k)continue;g.nB(a,k,c,null)}else{k=d.data;if(null===k)continue;var l=b.h;null!==l&&l.Tt||g.nB(a,k,c,l)}null!==h&&(k=d,""!==h&&(k=d.oe(h)),null!==k&&(h=g.nn,l=d,""!==h&&(l=d.oe(h)),null!==l&&g.PG(l,k,c)))}}aa.j=function(a,b,c){this.Ic(vd,a,this,b,c)};
function nk(a,b,c,d,f){var g=a.Wc,h=a.Mk;h.reset();ok(a,h,b,c,d,f);a.Mk=h;g.x=b;g.y=c;g.width=d;g.height=f;h.qt()||h.JG(g)}function pk(a,b,c,d){if(!1===a.Bf)return!1;d.multiply(a.transform);return c?a.Tf(b,d):a.Km(b,d)}
aa.AE=function(a,b,c){if(!1===this.Bf)return!1;var d=this.Pa;b=a.Zj(b);var f=!1;c&&(f=Ra(a.x,a.y,0,0,0,d.height)<b||Ra(a.x,a.y,0,d.height,d.width,d.height)<b||Ra(a.x,a.y,d.width,d.height,d.width,0)<b||Ra(a.x,a.y,d.width,0,0,0)<b);c||(f=Ra(a.x,a.y,0,0,0,d.height)<b&&Ra(a.x,a.y,0,d.height,d.width,d.height)<b&&Ra(a.x,a.y,d.width,d.height,d.width,0)<b&&Ra(a.x,a.y,d.width,0,0,0)<b);return f};aa.Hf=function(){return!0};
Q.prototype.containsPoint=Q.prototype.Fa=function(a){e&&t.l(a,w,Q,"containsPoint:p");var b=t.K();b.assign(a);this.transform.Sa(b);var c=this.oa;if(!c.N())return!1;if(t.gB){var d=this.Pa,f=this.ek()*(null!==this.h?this.h.scale:1),g=1/f;if(10>d.width*f&&10>d.height*f)return a=mb(c.x-5*g,c.y-5*g,c.width+10*g,c.height+10*g,b.x,b.y),t.B(b),a}if(void 0!==this.pc||this instanceof V?mb(c.x-5,c.y-5,c.width+10,c.height+10,b.x,b.y):c.Fa(b)){if(this.oi&&!this.oi.Fa(b))return!1;if(null!==this.vc&&c.Fa(b)||null!==
this.Mb&&this.hd.Fa(a))return!0;t.B(b);return this.Uj(a)}t.B(b);return!1};Q.prototype.Uj=function(a){var b=this.Pa;return mb(0,0,b.width,b.height,a.x,a.y)};
Q.prototype.containsRect=Q.prototype.Vj=function(a){e&&t.l(a,x,Q,"containsRect:r");if(0===this.angle)return this.oa.Vj(a);var b=this.Pa,b=t.ik(0,0,b.width,b.height),c=this.transform,d=!1,f=t.mc(a.x,a.y);b.Fa(c.ai(f))&&(f.p(a.x,a.bottom),b.Fa(c.ai(f))&&(f.p(a.right,a.bottom),b.Fa(c.ai(f))&&(f.p(a.right,a.y),b.Fa(c.ai(f))&&(d=!0))));t.B(f);t.hc(b);return d};
Q.prototype.containedInRect=Q.prototype.Km=function(a,b){e&&t.l(a,x,Q,"containedInRect:r");if(void 0===b)return a.Vj(this.oa);var c=this.Pa,d=!1,f=t.mc(0,0);a.Fa(b.Sa(f))&&(f.p(0,c.height),a.Fa(b.Sa(f))&&(f.p(c.width,c.height),a.Fa(b.Sa(f))&&(f.p(c.width,0),a.Fa(b.Sa(f))&&(d=!0))));return d};
Q.prototype.intersectsRect=Q.prototype.Tf=function(a,b){e&&t.l(a,x,Q,"intersectsRect:r");if(void 0===b&&(b=this.transform,0===this.angle))return a.Tf(this.oa);var c=this.Pa,d=b,f=t.mc(0,0),g=t.mc(0,c.height),h=t.mc(c.width,c.height),k=t.mc(c.width,0),l=!1;if(a.Fa(d.Sa(f))||a.Fa(d.Sa(g))||a.Fa(d.Sa(h))||a.Fa(d.Sa(k)))l=!0;else{var c=t.ik(0,0,c.width,c.height),m=t.mc(a.x,a.y);c.Fa(d.ai(m))?l=!0:(m.p(a.x,a.bottom),c.Fa(d.ai(m))?l=!0:(m.p(a.right,a.bottom),c.Fa(d.ai(m))?l=!0:(m.p(a.right,a.y),c.Fa(d.ai(m))&&
(l=!0))));t.B(m);t.hc(c);!l&&(F.Nw(a,f,g)||F.Nw(a,g,h)||F.Nw(a,h,k)||F.Nw(a,k,f))&&(l=!0)}t.B(f);t.B(g);t.B(h);t.B(k);return l};Q.prototype.getDocumentPoint=Q.prototype.pb=function(a,b){void 0===b&&(b=new w);a.Ge()&&t.m("getDocumentPoint:s Spot must be real: "+a.toString());var c=this.Pa;b.p(a.x*c.width+a.offsetX,a.y*c.height+a.offsetY);this.me.Sa(b);return b};Q.prototype.getDocumentAngle=Q.prototype.hl=function(){var a=this.me,a=180/Math.PI*Math.atan2(a.m12,a.m11);0>a&&(a+=360);return a};
Q.prototype.getDocumentScale=Q.prototype.ek=function(){var a=this.xc;return null!==this.ja?a*this.ja.ek():a};Q.prototype.getLocalPoint=Q.prototype.JE=function(a,b){void 0===b&&(b=new w);b.assign(a);this.me.ai(b);return b};Q.prototype.getNearestIntersectionPoint=Q.prototype.ll=function(a,b,c){return this.kp(a.x,a.y,b.x,b.y,c)};aa=Q.prototype;
aa.kp=function(a,b,c,d,f){var g=this.transform,h=1/(g.m11*g.m22-g.m12*g.m21),k=g.m22*h,l=-g.m12*h,m=-g.m21*h,n=g.m11*h,p=h*(g.m21*g.dy-g.m22*g.dx),q=h*(g.m12*g.dx-g.m11*g.dy);if(null!==this.$k)return g=this.oa,F.ll(g.left,g.top,g.right,g.bottom,a,b,c,d,f);h=a*k+b*m+p;a=a*l+b*n+q;b=c*k+d*m+p;c=c*l+d*n+q;f.p(0,0);d=this.Pa;c=F.ll(0,0,d.width,d.height,h,a,b,c,f);f.transform(g);return c};
function ih(a,b,c,d,f){if(!1!==Qi(a)){var g=a.margin,h=g.right+g.left,g=g.top+g.bottom;b=Math.max(b-h,0);c=Math.max(c-g,0);f=f||0;d=Math.max((d||0)-h,0);f=Math.max(f-g,0);h=a.angle;if(90===h||270===h)h=b,b=c,c=h,h=d,d=f,f=h;h=a.Ca;g=0;a.fb&&(g=a.fb);b=isFinite(h.width)?h.width+g:b;c=isFinite(h.height)?h.height+g:c;var h=d||0,g=f||0,k=a instanceof y;switch(qk(a)){case Vg:g=h=0;k&&(c=b=Infinity);break;case Cc:isFinite(b)&&b>d&&(h=b);isFinite(c)&&c>f&&(g=c);break;case ik:isFinite(b)&&b>d&&(h=b);g=0;
k&&(c=Infinity);break;case hk:isFinite(c)&&c>f&&(g=c),h=0,k&&(b=Infinity)}var k=a.He,l=a.Vf;h>k.width&&l.width<k.width&&(h=k.width);g>k.height&&l.height<k.height&&(g=k.height);d=Math.max(h/a.scale,l.width);f=Math.max(g/a.scale,l.height);k.width<d&&(d=Math.min(l.width,d));k.height<f&&(f=Math.min(l.height,f));b=Math.min(k.width,b);c=Math.min(k.height,c);b=Math.max(d,b);c=Math.max(f,c);a.Wc.Ma();a.ut(b,c,d,f);a.Wc.freeze();a.Wc.N()||t.m("Non-real measuredBounds has been set. Object "+a+", measuredBounds: "+
a.Wc.toString());rk(a,!1)}}
aa.Lc=function(a,b,c,d,f){sk(this);var g=t.Gf();g.assign(this.cc);this.cc.Ma();if(!1===Ri(this)){var h=this.cc;h.x=a;h.y=b;h.width=c;h.height=d}else this.Tj(a,b,c,d);this.cc.freeze();this.oi=void 0===f?null:f;c=!1;void 0!==f?c=!0:this.ja&&(f=this.ja.hd,d=this.Ga,null!==this.$k&&(d=this.cc),c=b+d.height,d=a+d.width,c=!(0<=a+0.05&&d<=f.width+0.05&&0<=b+0.05&&c<=f.height+0.05),this instanceof na&&(a=this.hd,this.dv>a.height||this.no.Ag>a.width))&&(c=!0);this.ma=c?this.ma|256:this.ma&-257;this.cc.N()||
t.m("Non-real actualBounds has been set. Object "+this+", actualBounds: "+this.cc.toString());tk(this,g,this.cc);t.hc(g)};aa.Tj=function(){};
function uk(a,b,c,d,f){var g=a.oa;g.x=b;g.y=c;g.width=d;g.height=f;if(!a.Ca.N()){g=a.Wc;c=a.margin;b=c.right+c.left;var h=c.top+c.bottom;c=g.width+b;g=g.height+h;d+=b;f+=h;b=qk(a);c===d&&g===f&&(b=Vg);switch(b){case Vg:if(c>d||g>f)rk(a,!0),ih(a,c>d?d:c,g>f?f:g);break;case Cc:rk(a,!0);ih(a,d,f,0,0);break;case ik:rk(a,!0);ih(a,d,g,0,0);break;case hk:rk(a,!0),ih(a,c,f,0,0)}}}
function tk(a,b,c){vk(a,!1);var d=a.S;if(null!==d){var f=d.h;if(null!==f)if(wk(d),a instanceof C){var g=!1,d=b.N();if(!1===f.wi){var h=f.Gd,k=f.padding,l=h.x+k.left,m=h.y+k.top,n=h.width-2*k.right,h=h.height-2*k.bottom;d&&b.x>l&&b.y>m&&b.right<n&&b.bottom<h&&c.x>l&&c.y>m&&c.right<n&&c.bottom<h&&(g=!0)}0!==(a.W&65536)!==!0&&b.M(c)||dj(a,g,f);f.pz&&null!==f.tj?(g=null,d&&(g=t.Gf(),Th(a,b,g)),f.fa(c.N()?Th(a,c):null,g),null!==g&&t.hc(g)):f.fa()}else xk(a,d),a.fa(),b=a.S,null!==b&&(b.Pt!==a&&b.WF!==a&&
b.aG!==a||yk(b,!0))}}function xk(a,b){null!==a.Nd&&yk(b,!0);if(a instanceof y)for(var c=a.xa,d=c.length,f=0;f<d;f++)xk(c.n[f],b)}
aa.Ue=function(a,b){if(this.visible){var c=this.opacity,d=1;if(1!==c){if(0===c)return;d=a.globalAlpha;a.globalAlpha=d*c}if(a instanceof nc)a:{if(this.visible){var f=null,g=a.Vw;if(this instanceof y&&(this.type===zk||this.type===Ak))Bk(this,a,b);else{var h=this.cc;if(0!==h.width&&0!==h.height&&!isNaN(h.x)&&!isNaN(h.y)){var k=this.transform,l=this.ja,m=this.kk;m.reset();null!==l&&(l.Hf()?m.multiply(l.me):null!==l.ja&&m.multiply(l.ja.me));m.multiply(this.md);var m=0!==(this.ma&256),n=!1;this instanceof
na&&Ck(this,a);if(m){n=l.Hf()?l.Pa:l.oa;if(this.oi)var p=this.oi,q=p.x,r=p.y,s=p.width,p=p.height;else q=Math.max(h.x,n.x),r=Math.max(h.y,n.y),s=Math.min(h.right,n.right)-q,p=Math.min(h.bottom,n.bottom)-r;if(q>h.width+h.x||h.x>n.width+n.x||r>h.height+h.y||h.y>n.height+n.y)break a;n=!0;rc(a,1,0,0,1,0,0);a.save();a.beginPath();a.rect(q,r,s,p);a.clip()}q=!1;if(this instanceof C&&(q=!0,!this.La()))break a;r=!1;s=b.Sk;this.S&&s.drawShadows&&(r=this.S.gj);a.$i.cf=[1,0,0,1,0,0];null!==this.vc&&(Dk(this,
a,this.vc,!0,!0),this.vc instanceof ea&&this.vc.type===Zd?(a.beginPath(),a.rect(h.x,h.y,h.width,h.height),Ek(a,this.vc,!0)):a.fillRect(h.x,h.y,h.width,h.height));q&&this.gj&&s.drawShadows&&(rc(a,1,0,0,1,0,0),h=this.wm,a.shadowOffsetX=h.x,a.shadowOffsetY=h.y,a.shadowColor=this.vm,a.shadowBlur=this.um/b.scale,a.bb());this instanceof y?rc(a,k.m11,k.m12,k.m21,k.m22,k.dx,k.dy):a.$i.cf=[k.m11,k.m12,k.m21,k.m22,k.dx,k.dy];if(null!==this.Mb){var p=this.Pa,h=k=0,s=p.width,p=p.height,u=0;this instanceof V&&
(p=this.Ta.Pb,k=p.x,h=p.y,s=p.width,p=p.height,u=this.bh);Dk(this,a,this.Mb,!0);this.Mb instanceof ea&&this.Mb.type===Zd?(a.beginPath(),a.rect(k-u/2,h-u/2,s+u,p+u),Ek(a,this.Mb,!0)):a.fillRect(k-u/2,h-u/2,s+u,p+u)}if(r&&(null!==this.Mb||null!==this.vc||null!==l&&0!==(l.ma&512)||null!==l&&l.type===ci&&l.Dw()!==this)){Fk(this,!0);var v=[a.shadowOffsetX,a.shadowOffsetY,a.shadowBlur];a.shadowOffsetX=0;a.shadowOffsetY=0;a.shadowBlur=0}else Fk(this,!1);this.fl(a,b);r&&0!==(this.ma&512)===!0&&(a.shadowOffsetX=
v[0],a.shadowOffsetY=v[1],a.shadowBlur=v[2]);q&&r&&(a.shadowOffsetX=0,a.shadowOffsetY=0,a.shadowBlur=0);m&&(a.restore(),n&&a.vf.pop(),wi(b,a));this instanceof y&&(f=a.vf.pop());q&&r&&a.vf.pop();null!==a.wE&&(null===f&&(g===a.Vw?(rc(a,1,0,0,1,0,0),v=a.vf.pop()):v=a.Vw,f=v),a.wE(this,f))}}}}else if(this instanceof y&&(this.type===zk||this.type===Ak))Bk(this,a,b);else if(m=this.cc,0!==m.width&&0!==m.height&&!isNaN(m.x)&&!isNaN(m.y)){v=this.transform;g=this.ja;l=this.kk;l.reset();null!==g&&(g.Hf()?l.multiply(g.me):
null!==g.ja&&l.multiply(g.ja.me));l.multiply(this.md);l=0!==(this.ma&256);this instanceof na&&Ck(this,a);if(l){e&&e.BI&&t.trace("clip"+this.toString());n=g.Hf()?g.Pa:g.oa;this.oi?(r=this.oi,k=r.x,h=r.y,q=r.width,r=r.height):(k=Math.max(m.x,n.x),h=Math.max(m.y,n.y),q=Math.min(m.right,n.right)-k,r=Math.min(m.bottom,n.bottom)-h);if(k>m.width+m.x||m.x>n.width+n.x||h>m.height+m.y||m.y>n.height+n.y){1!==c&&(a.globalAlpha=d);return}a.save();a.beginPath();a.rect(k,h,q,r);a.clip()}h=b.Sk;n=!1;if(this instanceof
C){n=!0;if(!this.La()){1!==c&&(a.globalAlpha=d);return}this.gj&&h.drawShadows&&(k=this.wm,a.shadowOffsetX=k.x*b.scale,a.shadowOffsetY=k.y*b.scale,a.shadowColor=this.vm,a.shadowBlur=this.um)}k=!1;this.S&&h.drawShadows&&(k=this.S.gj);null!==this.vc&&(Dk(this,a,this.vc,!0,!0),this.vc instanceof ea&&this.vc.type===Zd?(a.beginPath(),a.rect(m.x,m.y,m.width,m.height),Ek(a,this.vc,!0)):a.fillRect(m.x,m.y,m.width,m.height));v.qt()||a.transform(v.m11,v.m12,v.m21,v.m22,v.dx,v.dy);null!==this.Mb&&(r=this.Pa,
h=m=0,q=r.width,r=r.height,s=0,this instanceof V&&(r=this.Ta.Pb,m=r.x,h=r.y,q=r.width,r=r.height,s=this.bh),Dk(this,a,this.Mb,!0),this.Mb instanceof ea&&this.Mb.type===Zd?(a.beginPath(),a.rect(m-s/2,h-s/2,q+s,r+s),Ek(a,this.Mb,!0)):a.fillRect(m-s/2,h-s/2,q+s,r+s));k&&(null!==this.Mb||null!==this.vc||null!==g&&0!==(g.ma&512)||null!==g&&(g.type===ci||g.type===Tg)&&g.Dw()!==this)?(Fk(this,!0),f=[a.shadowOffsetX,a.shadowOffsetY,a.shadowBlur],a.shadowOffsetX=0,a.shadowOffsetY=0,a.shadowBlur=0):Fk(this,
!1);this.fl(a,b);k&&0!==(this.ma&512)===!0&&(a.shadowOffsetX=f[0],a.shadowOffsetY=f[1],a.shadowBlur=f[2]);n&&k&&(a.shadowOffsetX=0,a.shadowOffsetY=0,a.shadowBlur=0);l?(a.restore(),this instanceof y?wi(b,a,!0):wi(b,a,!1)):v.qt()||(f=1/(v.m11*v.m22-v.m12*v.m21),a.transform(v.m22*f,-v.m12*f,-v.m21*f,v.m11*f,f*(v.m21*v.dy-v.m22*v.dx),f*(v.m12*v.dx-v.m11*v.dy)))}1!==c&&(a.globalAlpha=d)}};
function Bk(a,b,c){var d=a.cc;0===d.width||0===d.height||isNaN(d.x)||isNaN(d.y)||(null!==a.vc&&(Dk(a,b,a.vc,!0,!0),a.vc instanceof ea&&a.vc.type===Zd?(b.beginPath(),b.rect(d.x,d.y,d.width,d.height),Ek(b,a.vc,!0)):b.fillRect(d.x,d.y,d.width,d.height)),null!==a.Mb&&(Dk(a,b,a.Mb,!0),a.Mb instanceof ea&&a.Mb.type===Zd?(b.beginPath(),b.rect(d.x,d.y,d.width,d.height),Ek(b,a.Mb,!0)):b.fillRect(d.x,d.y,d.width,d.height)),a.fl(b,c))}aa.fl=function(){};
function Ek(a,b,c){if(c)if(a instanceof CanvasRenderingContext2D&&b instanceof ea&&b.type===Zd){var d=b.ty;b=b.sy;b>d?(a.scale(d/b,1),a.translate((b-d)/2,0),c?a.fill():a.stroke(),a.translate(-(b-d)/2,0),a.scale(1/(d/b),1)):d>b?(a.scale(1,b/d),a.translate(0,(d-b)/2),c?a.fill():a.stroke(),a.translate(0,-(d-b)/2),a.scale(1,1/(b/d))):c?a.fill():a.stroke()}else c?a.fill():a.stroke();else a.stroke()}
function Dk(a,b,c,d,f){if(null!==c){var g=1,h=1;if("string"===typeof c)d?b.rn!==c&&(b.fillStyle=c,b.rn=c):b.sn!==c&&(b.strokeStyle=c,b.sn=c);else if(c.type===Nd)c=c.color,d?b.rn!==c&&(b.fillStyle=c,b.rn=c):b.sn!==c&&(b.strokeStyle=c,b.sn=c);else{var k,h=a.Pa,g=h.width,h=h.height;if(f)var l=a.oa,g=l.width,h=l.height;var m=b instanceof CanvasRenderingContext2D;if(m&&(c.Rg&&c.type===fk||c.ty===g&&c.sy===h))k=c.Rg;else{var n,p,q=p=0;f&&(l=a.oa,g=l.width,h=l.height,p=l.x,q=l.y);c.start instanceof w?(a=
c.start.x,f=c.start.y):c.start instanceof H?(a=c.start.x*g+c.start.offsetX,f=c.start.y*h+c.start.offsetY):(a=Hb.x*g+c.start.offsetX,f=Hb.y*h+c.start.offsetY);c.end instanceof w?(l=c.end.x,n=c.end.y):c.end instanceof H?(l=c.end.x*g+c.end.offsetX,n=c.end.y*h+c.end.offsetY):c.type===Yd?(l=Mb.x*g+c.end.offsetX,n=Mb.y*h+c.end.offsetY):(l=Hb.x*g+c.end.offsetX,n=Hb.y*h+c.end.offsetY);a+=p;l+=p;f+=q;n+=q;c.type===Yd?k=b.createLinearGradient(a,f,l,n):c.type===Zd?(p=isNaN(c.ap)?Math.max(g,h)/2:c.ap,isNaN(c.Vp)?
(k=0,p=Math.max(g,h)/2):k=c.Vp,k=b.createRadialGradient(a,f,k,l,n,p)):c.type===fk?k=b.createPattern(c.pattern,"repeat"):t.bc(c.type,"Brush type");if(c.type!==fk&&(p=c.Vo))for(p=p.k;p.next();)k.addColorStop(p.key,p.value);m&&(c.Rg=k,c.ty=g,c.sy=h)}d?b.rn!==k&&(b.fillStyle=k,b.rn=k):b.sn!==k&&(b.strokeStyle=k,b.sn=k)}}}Q.prototype.isContainedBy=Q.prototype.ej=function(a){if(a instanceof y)a:{if(this!==a&&null!==a)for(var b=this.ja;null!==b;){if(b===a){a=!0;break a}b=b.ja}a=!1}else a=!1;return a};
Q.prototype.isVisibleObject=Q.prototype.pl=function(){if(!this.visible)return!1;var a=this.ja;return null!==a?a.pl():!0};
function Gk(a){if(0!==(a.ma&2048)===!0){var b=a.md;b.reset();if(!a.cc.N()||!a.Wc.N()){Hk(a,!1);return}b.translate(a.cc.x,a.cc.y);b.translate(-a.Ga.x,-a.Ga.y);var c=a.Pa;ok(a,b,c.x,c.y,c.width,c.height);Hk(a,!1);Ik(a,!0)}0!==(a.ma&4096)===!0&&(b=a.ja,null===b?(a.kk.set(a.md),Ik(a,!1)):null!==b.me&&(c=a.kk,c.reset(),b.Hf()?c.multiply(b.kk):null!==b.ja&&c.multiply(b.ja.kk),c.multiply(a.md),Ik(a,!1)))}
function ok(a,b,c,d,f,g){1!==a.scale&&b.scale(a.scale);if(0!==a.angle){var h=Hb;a.bf&&a.bf.xd()&&(h=a.bf);var k=t.K();if(a instanceof C&&a.kc!==a)for(c=a.kc,d=c.Pa,k.Rt(d.x,d.y,d.width,d.height,h),c.Mk.Sa(k),k.offset(-c.Ga.x,-c.Ga.y),h=c.ja;null!==h&&h!==a;)h.Mk.Sa(k),k.offset(-h.Ga.x,-h.Ga.y),h=h.ja;else k.Rt(c,d,f,g,h);b.rotate(a.angle,k.x,k.y);t.B(k)}}
Q.prototype.ha=function(a){if(!0!==Qi(this)){rk(this,!0);vk(this,!0);var b=this.ja;null!==b?a||b.ha():(a=this.h,null!==a&&(this.La()&&a.fg.add(this),this instanceof R&&(a.la.vb||this.wf(),null!==this.$d&&Jk(this.$d)),a.te()));if(this instanceof y){var c=null;a=this.xa;b=a.length;this.da===ci&&(c=Kk(this,a,b))&&c.ha(!0);a=a.n;for(c=0;c<b;c++){var d=a[c];!0!==Qi(d)&&(d.Ca.N()||(d instanceof Ug||d instanceof y||d instanceof na||qk(d)!==Vg)&&d.ha(!0))}}}};
function Lk(a){if(!1===Qi(a)&&(rk(a,!0),vk(a,!0),a instanceof y)){a=a.xa.n;for(var b=a.length,c=0;c<b;c++)Lk(a[c])}}function Jk(a){if(!1===Ri(a)){if(null!==a.ja)a.ja.ha();else{var b=a.h;null!==b&&(a.La()&&b.fg.add(a),a instanceof R&&a.wf(),b.te())}vk(a,!0)}}function sk(a){if(0!==(a.ma&2048)===!1&&(Hk(a,!0),Ik(a,!0),a instanceof y)){a=a.xa.n;for(var b=a.length,c=0;c<b;c++)Mk(a[c])}}function Mk(a){Ik(a,!0);if(a instanceof y){a=a.xa.n;for(var b=a.length,c=0;c<b;c++)Mk(a[c])}}
Q.prototype.fa=function(){if(this instanceof C){var a=this.h;null!==a&&!Ri(this)&&!Si(this)&&this.La()&&this.cc.N()&&a.fa(Th(this,this.cc))}else null!==this.S&&this.S.fa()};function qk(a){var b=a.fi,c=a.ja;if(c&&c.da===Nk)return Ok(a,c.wd(a.lc),c.vd(a.column));if(c&&c.da===ci&&c.Dw()===a)return Cc;if(b===gk){if(c){c.da===Tg&&null===c.Eo&&(b=c.xa,Kk(c,b,b.length));if(c.Eo===a)return Cc;a=c.Zz;return a===gk?Vg:a}return Vg}return b}
function Ok(a,b,c){var d=a.fi;if(d!==gk)return d;var f=d=void 0;switch(b.fi){case hk:f=!0;break;case Cc:f=!0}switch(c.fi){case ik:d=!0;break;case Cc:d=!0}a=a.ja.Zz;d=void 0!==d||a!==ik&&a!==Cc?!1:!0;f=void 0!==f||a!==hk&&a!==Cc?!1:!0;return!0===d&&!0===f?Cc:!0===d?ik:!0===f?hk:Vg}t.g(Q,"segmentOrientation",Q.prototype.Ot);
t.defineProperty(Q,{Ot:"segmentOrientation"},function(){return this.gs},function(a){var b=this.gs;b!==a&&(e&&t.Aa(a,T,Q,"segmentOrientation"),this.gs=a,this.ha(),this.j("segmentOrientation",b,a))});t.g(Q,"segmentIndex",Q.prototype.Cf);t.defineProperty(Q,{Cf:"segmentIndex"},function(){return this.es},function(a){e&&t.i(a,"number",Q,"segmentIndex");a=Math.round(a);var b=this.es;b!==a&&(this.es=a,this.ha(),this.j("segmentIndex",b,a))});t.g(Q,"segmentFraction",Q.prototype.Nt);
t.defineProperty(Q,{Nt:"segmentFraction"},function(){return this.ds},function(a){e&&t.i(a,"number",Q,"segmentFraction");isNaN(a)?a=0:0>a?a=0:1<a&&(a=1);var b=this.ds;b!==a&&(this.ds=a,this.ha(),this.j("segmentFraction",b,a))});t.g(Q,"segmentOffset",Q.prototype.YA);t.defineProperty(Q,{YA:"segmentOffset"},function(){return this.fs},function(a){var b=this.fs;b.M(a)||(e&&t.l(a,w,Q,"segmentOffset"),this.fs=a=a.Z(),this.ha(),this.j("segmentOffset",b,a))});t.g(Q,"stretch",Q.prototype.fi);
t.defineProperty(Q,{fi:"stretch"},function(){return this.Oh},function(a){var b=this.Oh;b!==a&&(e&&t.Aa(a,Q,Q,"stretch"),this.Oh=a,this.ha(),this.j("stretch",b,a))});t.g(Q,"name",Q.prototype.name);t.defineProperty(Q,{name:"name"},function(){return this.Zb},function(a){var b=this.Zb;b!==a&&(e&&t.i(a,"string",Q,"name"),this.Zb=a,this.S&&(this.S.Fj=null),this.j("name",b,a))});t.g(Q,"opacity",Q.prototype.opacity);
t.defineProperty(Q,{opacity:"opacity"},function(){return this.Lf},function(a){var b=this.Lf;b!==a&&(t.i(a,"number",Q,"opacity"),(0>a||1<a)&&t.ka(a,"0 <= val <= 1",Q,"opacity"),this.Lf=a,this.j("opacity",b,a),a=this.h,b=this.S,null!==a&&null!==b&&a.fa(Th(b,b.oa)))});t.g(Q,"visible",Q.prototype.visible);
t.defineProperty(Q,{visible:"visible"},function(){return 0!==(this.ma&1)},function(a){var b=0!==(this.ma&1);b!==a&&(e&&t.i(a,"boolean",Q,"visible"),this.ma^=1,this.j("visible",b,a),b=this.ja,null!==b?b.ha():this instanceof C&&(this.h&&this.h.fa(),wk(this),this.df(a)),this.fa(),Pk(this))});t.g(Q,"pickable",Q.prototype.Bf);t.defineProperty(Q,{Bf:"pickable"},function(){return 0!==(this.ma&2)},function(a){var b=0!==(this.ma&2);b!==a&&(e&&t.i(a,"boolean",Q,"pickable"),this.ma^=2,this.j("pickable",b,a))});
t.g(Q,"fromLinkableDuplicates",Q.prototype.DE);t.defineProperty(Q,{DE:"fromLinkableDuplicates"},function(){return 0!==(this.ma&4)},function(a){var b=0!==(this.ma&4);b!==a&&(e&&t.i(a,"boolean",Q,"fromLinkableDuplicates"),this.ma^=4,this.j("fromLinkableDuplicates",b,a))});t.g(Q,"fromLinkableSelfNode",Q.prototype.EE);
t.defineProperty(Q,{EE:"fromLinkableSelfNode"},function(){return 0!==(this.ma&8)},function(a){var b=0!==(this.ma&8);b!==a&&(e&&t.i(a,"boolean",Q,"fromLinkableSelfNode"),this.ma^=8,this.j("fromLinkableSelfNode",b,a))});t.g(Q,"toLinkableDuplicates",Q.prototype.AG);t.defineProperty(Q,{AG:"toLinkableDuplicates"},function(){return 0!==(this.ma&16)},function(a){var b=0!==(this.ma&16);b!==a&&(e&&t.i(a,"boolean",Q,"toLinkableDuplicates"),this.ma^=16,this.j("toLinkableDuplicates",b,a))});
t.g(Q,"toLinkableSelfNode",Q.prototype.BG);t.defineProperty(Q,{BG:"toLinkableSelfNode"},function(){return 0!==(this.ma&32)},function(a){var b=0!==(this.ma&32);b!==a&&(e&&t.i(a,"boolean",Q,"toLinkableSelfNode"),this.ma^=32,this.j("toLinkableSelfNode",b,a))});t.g(Q,"isPanelMain",Q.prototype.fj);t.defineProperty(Q,{fj:"isPanelMain"},function(){return 0!==(this.ma&64)},function(a){var b=0!==(this.ma&64);b!==a&&(e&&t.i(a,"boolean",Q,"isPanelMain"),this.ma^=64,this.ha(),this.j("isPanelMain",b,a))});
t.g(Q,"isActionable",Q.prototype.Ow);t.defineProperty(Q,{Ow:"isActionable"},function(){return 0!==(this.ma&128)},function(a){var b=0!==(this.ma&128);b!==a&&(e&&t.i(a,"boolean",Q,"isActionable"),this.ma^=128,this.j("isActionable",b,a))});t.g(Q,"areaBackground",Q.prototype.$k);
t.defineProperty(Q,{$k:"areaBackground"},function(){return this.vc},function(a){var b=this.vc;b!==a&&(e&&null!==a&&t.To(a,"GraphObject.areaBackground"),a instanceof ea&&a.freeze(),this.vc=a,this.fa(),this.j("areaBackground",b,a))});t.g(Q,"background",Q.prototype.background);t.defineProperty(Q,{background:"background"},function(){return this.Mb},function(a){var b=this.Mb;b!==a&&(e&&null!==a&&t.To(a,"GraphObject.background"),a instanceof ea&&a.freeze(),this.Mb=a,this.fa(),this.j("background",b,a))});
function Fk(a,b){a.ma=b?a.ma|512:a.ma&-513}function Qk(a,b){a.ma=b?a.ma|1024:a.ma&-1025}function Hk(a,b){a.ma=b?a.ma|2048:a.ma&-2049}function Ik(a,b){a.ma=b?a.ma|4096:a.ma&-4097}function Qi(a){return 0!==(a.ma&8192)}function rk(a,b){a.ma=b?a.ma|8192:a.ma&-8193}function Ri(a){return 0!==(a.ma&16384)}function vk(a,b){a.ma=b?a.ma|16384:a.ma&-16385}t.A(Q,{S:"part"},function(){if(this instanceof C)return this;if(this.nm)return this.nm;var a;for(a=this.ja;a;){if(a instanceof C)return this.nm=a;a=a.ja}return null});
Q.prototype.xl=function(a){this.Ii=a};t.A(Q,{ja:"panel"},function(){return this.Ii});t.A(Q,{layer:"layer"},function(){var a=this.S;return null!==a?a.layer:null});t.A(Q,{h:"diagram"},function(){var a=this.S;return null!==a?a.h:null},{configurable:!0});t.g(Q,"position",Q.prototype.position);t.defineProperty(Q,{position:"position"},function(){return this.Ra},function(a){var b=this.Ra;b.M(a)||(e&&t.l(a,w,Q,"position"),a=a.Z(),this.nG(a,b)&&this.j("position",b,a))});
Q.prototype.nG=function(a){this.Ra=a;Jk(this);sk(this);return!0};Q.prototype.oG=function(a,b){this.Ra.p(a,b);Rk(this,!1);sk(this)};t.A(Q,{oa:"actualBounds"},function(){return this.cc});t.g(Q,"scale",Q.prototype.scale);t.defineProperty(Q,{scale:"scale"},function(){return this.xc},function(a){var b=this.xc;b!==a&&(e&&t.q(a,Q,"scale"),0>=a&&t.m("GraphObject.scale must be greater than zero"),this.xc=a,sk(this),this.ha(),this.j("scale",b,a))});t.g(Q,"angle",Q.prototype.angle);
t.defineProperty(Q,{angle:"angle"},function(){return this.wn},function(a){var b=this.wn;b!==a&&(e&&t.q(a,Q,"angle"),a%=360,0>a&&(a+=360),b!==a&&(this.wn=a,this.ha(),sk(this),this.j("angle",b,a)))});t.g(Q,"desiredSize",Q.prototype.Ca);
t.defineProperty(Q,{Ca:"desiredSize"},function(){return this.jf},function(a){var b=this.jf;b.M(a)||(e&&t.l(a,fa,Q,"desiredSize"),this.jf=a=a.Z(),this.ha(),this instanceof V&&this.Ye(),this.j("desiredSize",b,a),a=this.S,null!==a&&0!==(this.ma&1024)&&(mk(this,a,"width"),mk(this,a,"height")))});t.g(Q,"width",Q.prototype.width);
t.defineProperty(Q,{width:"width"},function(){return this.jf.width},function(a){if(this.jf.width!==a){e&&t.i(a,"number",Q,"width");var b=this.jf;this.jf=a=(new fa(a,this.jf.height)).freeze();this.ha();this instanceof V&&this.Ye();this.j("desiredSize",b,a);b=this.S;null!==b&&0!==(this.ma&1024)&&mk(this,b,"width")}});t.g(Q,"height",Q.prototype.height);
t.defineProperty(Q,{height:"height"},function(){return this.jf.height},function(a){if(this.jf.height!==a){e&&t.i(a,"number",Q,"height");var b=this.jf;this.jf=a=(new fa(this.jf.width,a)).freeze();this.ha();this instanceof V&&this.Ye();this.j("desiredSize",b,a);b=this.S;null!==b&&0!==(this.ma&1024)&&mk(this,b,"height")}});t.g(Q,"minSize",Q.prototype.Vf);
t.defineProperty(Q,{Vf:"minSize"},function(){return this.Ej},function(a){var b=this.Ej;b.M(a)||(e&&t.l(a,fa,Q,"minSize"),a=a.copy(),isNaN(a.width)&&(a.width=0),isNaN(a.height)&&(a.height=0),a.freeze(),this.Ej=a,this.ha(),this.j("minSize",b,a))});t.g(Q,"maxSize",Q.prototype.He);
t.defineProperty(Q,{He:"maxSize"},function(){return this.Dj},function(a){var b=this.Dj;b.M(a)||(e&&t.l(a,fa,Q,"maxSize"),a=a.copy(),isNaN(a.width)&&(a.width=Infinity),isNaN(a.height)&&(a.height=Infinity),a.freeze(),this.Dj=a,this.ha(),this.j("maxSize",b,a))});t.A(Q,{Ga:"measuredBounds"},function(){return this.Wc});t.A(Q,{Pa:"naturalBounds"},function(){return this.hd},{configurable:!0});t.g(Q,"margin",Q.prototype.margin);
t.defineProperty(Q,{margin:"margin"},function(){return this.sr},function(a){"number"===typeof a?a=new ab(a):e&&t.l(a,ab,Q,"margin");var b=this.sr;b.M(a)||(this.sr=a=a.Z(),this.ha(),this.j("margin",b,a))});t.A(Q,{transform:null},function(){0!==(this.ma&2048)===!0&&Gk(this);return this.md});t.A(Q,{me:null},function(){0!==(this.ma&4096)===!0&&Gk(this);return this.kk});t.g(Q,"alignment",Q.prototype.alignment);
t.defineProperty(Q,{alignment:"alignment"},function(){return this.ue},function(a){var b=this.ue;b.M(a)||(e?t.l(a,H,Q,"alignment"):a.Ge()&&!a.Pc()&&t.m("alignment must be a real Spot or Spot.Default"),this.ue=a=a.Z(),Jk(this),this.j("alignment",b,a))});t.g(Q,"column",Q.prototype.column);t.defineProperty(Q,{column:"column"},function(){return this.tq},function(a){e&&t.q(a,Q,"column");a=Math.round(a);var b=this.tq;b!==a&&(0>a&&t.ka(a,">= 0",Q,"column"),this.tq=a,this.ha(),this.j("column",b,a))});
t.g(Q,"columnSpan",Q.prototype.ZD);t.defineProperty(Q,{ZD:"columnSpan"},function(){return this.rj},function(a){e&&t.q(a,Q,"columnSpan");a=Math.round(a);var b=this.rj;b!==a&&(1>a&&t.ka(a,">= 1",Q,"columnSpan"),this.rj=a,this.ha(),this.j("columnSpan",b,a))});t.g(Q,"row",Q.prototype.lc);t.defineProperty(Q,{lc:"row"},function(){return this.as},function(a){e&&t.q(a,Q,"row");a=Math.round(a);var b=this.as;b!==a&&(0>a&&t.ka(a,">= 0",Q,"row"),this.as=a,this.ha(),this.j("row",b,a))});t.g(Q,"rowSpan",Q.prototype.rowSpan);
t.defineProperty(Q,{rowSpan:"rowSpan"},function(){return this.Jj},function(a){e&&t.q(a,Q,"rowSpan");a=Math.round(a);var b=this.Jj;b!==a&&(1>a&&t.ka(a,">= 1",Q,"rowSpan"),this.Jj=a,this.ha(),this.j("rowSpan",b,a))});t.g(Q,"alignmentFocus",Q.prototype.Qj);
t.defineProperty(Q,{Qj:"alignmentFocus"},function(){return this.mq},function(a){var b=this.mq;b.M(a)||(e?t.l(a,H,Q,"alignmentFocus"):a.Ge()&&!a.Pc()&&t.m("alignmentFocus must be a real Spot or Spot.Default"),this.mq=a=a.Z(),this.ha(),this.j("alignmentFocus",b,a))});t.g(Q,"portId",Q.prototype.Nd);
t.defineProperty(Q,{Nd:"portId"},function(){return this.Nr},function(a){var b=this.Nr;if(b!==a){e&&null!==a&&t.i(a,"string",Q,"portId");var c=this.S;null===c||c instanceof R||(t.m("portID being set on a Link: "+a),c=null);null!==b&&c&&Sk(c,this);this.Nr=a;if(null!==a&&c){c.Eh=!0;null===c.Rd&&Tk(c);var d=this.Nd;null!==d&&c.Rd.add(d,this)}this.j("portId",b,a)}});function Uk(a){var b={value:null};Vk(a,b);return b.value}
function Vk(a,b){var c=a.ja;return null===c||!Vk(c,b)&&a.visible?(b.value=a,!1):!0}function Pk(a){var b=a.S;b instanceof R&&(a=a.h)&&!a.la.vb&&b.wf()}t.g(Q,"toSpot",Q.prototype.rb);t.defineProperty(Q,{rb:"toSpot"},function(){return null!==this.P?this.P.Th:wb},function(a){null===this.P&&this.Fe();var b=this.P.Th;b.M(a)||(e&&t.l(a,H,Q,"toSpot"),a=a.Z(),this.P.Th=a,this.j("toSpot",b,a),Pk(this))});t.g(Q,"toEndSegmentLength",Q.prototype.jk);
t.defineProperty(Q,{jk:"toEndSegmentLength"},function(){return null!==this.P?this.P.Qh:10},function(a){null===this.P&&this.Fe();var b=this.P.Qh;b!==a&&(e&&t.i(a,"number",Q,"toEndSegmentLength"),0>a&&t.ka(a,">= 0",Q,"toEndSegmentLength"),this.P.Qh=a,this.j("toEndSegmentLength",b,a),Pk(this))});t.g(Q,"toEndSegmentDirection",Q.prototype.Xp);
t.defineProperty(Q,{Xp:"toEndSegmentDirection"},function(){return null!==this.P?this.P.Ph:kk},function(a){null===this.P&&this.Fe();var b=this.P.Ph;b!==a&&(e&&t.Aa(a,R,Q,"toEndSegmentDirection"),this.P.Ph=a,this.j("toEndSegmentDirection",b,a),Pk(this))});t.g(Q,"toShortLength",Q.prototype.Yp);
t.defineProperty(Q,{Yp:"toShortLength"},function(){return null!==this.P?this.P.Sh:0},function(a){null===this.P&&this.Fe();var b=this.P.Sh;b!==a&&(e&&t.i(a,"number",Q,"toShortLength"),this.P.Sh=a,this.j("toShortLength",b,a),Pk(this))});t.g(Q,"toLinkable",Q.prototype.jB);t.defineProperty(Q,{jB:"toLinkable"},function(){return this.ys},function(a){var b=this.ys;b!==a&&(e&&null!==a&&t.i(a,"boolean",Q,"toLinkable"),this.ys=a,this.j("toLinkable",b,a))});t.g(Q,"toMaxLinks",Q.prototype.CG);
t.defineProperty(Q,{CG:"toMaxLinks"},function(){return this.zs},function(a){var b=this.zs;b!==a&&(e&&t.q(a,Q,"toMaxLinks"),0>a&&t.ka(a,">= 0",Q,"toMaxLinks"),this.zs=a,this.j("toMaxLinks",b,a))});t.g(Q,"fromSpot",Q.prototype.ob);t.defineProperty(Q,{ob:"fromSpot"},function(){return null!==this.P?this.P.Dh:wb},function(a){null===this.P&&this.Fe();var b=this.P.Dh;b.M(a)||(e&&t.l(a,H,Q,"fromSpot"),a=a.Z(),this.P.Dh=a,this.j("fromSpot",b,a),Pk(this))});t.g(Q,"fromEndSegmentLength",Q.prototype.dk);
t.defineProperty(Q,{dk:"fromEndSegmentLength"},function(){return null!==this.P?this.P.Ah:10},function(a){null===this.P&&this.Fe();var b=this.P.Ah;b!==a&&(e&&t.i(a,"number",Q,"fromEndSegmentLength"),0>a&&t.ka(a,">= 0",Q,"fromEndSegmentLength"),this.P.Ah=a,this.j("fromEndSegmentLength",b,a),Pk(this))});t.g(Q,"fromEndSegmentDirection",Q.prototype.hp);
t.defineProperty(Q,{hp:"fromEndSegmentDirection"},function(){return null!==this.P?this.P.zh:kk},function(a){null===this.P&&this.Fe();var b=this.P.zh;b!==a&&(e&&t.Aa(a,R,Q,"fromEndSegmentDirection"),this.P.zh=a,this.j("fromEndSegmentDirection",b,a),Pk(this))});t.g(Q,"fromShortLength",Q.prototype.ip);
t.defineProperty(Q,{ip:"fromShortLength"},function(){return null!==this.P?this.P.Ch:0},function(a){null===this.P&&this.Fe();var b=this.P.Ch;b!==a&&(e&&t.i(a,"number",Q,"fromShortLength"),this.P.Ch=a,this.j("fromShortLength",b,a),Pk(this))});t.g(Q,"fromLinkable",Q.prototype.hA);t.defineProperty(Q,{hA:"fromLinkable"},function(){return this.Nq},function(a){var b=this.Nq;b!==a&&(e&&null!==a&&t.i(a,"boolean",Q,"fromLinkable"),this.Nq=a,this.j("fromLinkable",b,a))});t.g(Q,"fromMaxLinks",Q.prototype.FE);
t.defineProperty(Q,{FE:"fromMaxLinks"},function(){return this.Oq},function(a){var b=this.Oq;b!==a&&(e&&t.q(a,Q,"fromMaxLinks"),0>a&&t.ka(a,">= 0",Q,"fromMaxLinks"),this.Oq=a,this.j("fromMaxLinks",b,a))});t.g(Q,"cursor",Q.prototype.cursor);t.defineProperty(Q,{cursor:"cursor"},function(){return this.Aq},function(a){var b=this.Aq;b!==a&&(t.i(a,"string",Q,"cursor"),this.Aq=a,this.j("cursor",b,a))});t.g(Q,"click",Q.prototype.click);
t.defineProperty(Q,{click:"click"},function(){return null!==this.Q?this.Q.ni:null},function(a){null===this.Q&&jk(this);var b=this.Q.ni;b!==a&&(null!==a&&t.i(a,"function",Q,"click"),this.Q.ni=a,this.j("click",b,a))});t.g(Q,"doubleClick",Q.prototype.Om);t.defineProperty(Q,{Om:"doubleClick"},function(){return null!==this.Q?this.Q.ti:null},function(a){null===this.Q&&jk(this);var b=this.Q.ti;b!==a&&(null!==a&&t.i(a,"function",Q,"doubleClick"),this.Q.ti=a,this.j("doubleClick",b,a))});
t.g(Q,"contextClick",Q.prototype.Ws);t.defineProperty(Q,{Ws:"contextClick"},function(){return null!==this.Q?this.Q.pi:null},function(a){null===this.Q&&jk(this);var b=this.Q.pi;b!==a&&(null!==a&&t.i(a,"function",Q,"contextClick"),this.Q.pi=a,this.j("contextClick",b,a))});t.g(Q,"mouseEnter",Q.prototype.DA);
t.defineProperty(Q,{DA:"mouseEnter"},function(){return null!==this.Q?this.Q.Dr:null},function(a){null===this.Q&&jk(this);var b=this.Q.Dr;b!==a&&(null!==a&&t.i(a,"function",Q,"mouseEnter"),this.Q.Dr=a,this.j("mouseEnter",b,a))});t.g(Q,"mouseLeave",Q.prototype.EA);t.defineProperty(Q,{EA:"mouseLeave"},function(){return null!==this.Q?this.Q.Er:null},function(a){null===this.Q&&jk(this);var b=this.Q.Er;b!==a&&(null!==a&&t.i(a,"function",Q,"mouseLeave"),this.Q.Er=a,this.j("mouseLeave",b,a))});
t.g(Q,"mouseOver",Q.prototype.zt);t.defineProperty(Q,{zt:"mouseOver"},function(){return null!==this.Q?this.Q.Ei:null},function(a){null===this.Q&&jk(this);var b=this.Q.Ei;b!==a&&(null!==a&&t.i(a,"function",Q,"mouseOver"),this.Q.Ei=a,this.j("mouseOver",b,a))});t.g(Q,"mouseHover",Q.prototype.yt);
t.defineProperty(Q,{yt:"mouseHover"},function(){return null!==this.Q?this.Q.Di:null},function(a){null===this.Q&&jk(this);var b=this.Q.Di;b!==a&&(null!==a&&t.i(a,"function",Q,"mouseHover"),this.Q.Di=a,this.j("mouseHover",b,a))});t.g(Q,"mouseHold",Q.prototype.xt);t.defineProperty(Q,{xt:"mouseHold"},function(){return null!==this.Q?this.Q.Ci:null},function(a){null===this.Q&&jk(this);var b=this.Q.Ci;b!==a&&(null!==a&&t.i(a,"function",Q,"mouseHold"),this.Q.Ci=a,this.j("mouseHold",b,a))});
t.g(Q,"mouseDragEnter",Q.prototype.AF);t.defineProperty(Q,{AF:"mouseDragEnter"},function(){return null!==this.Q?this.Q.Br:null},function(a){null===this.Q&&jk(this);var b=this.Q.Br;b!==a&&(null!==a&&t.i(a,"function",Q,"mouseDragEnter"),this.Q.Br=a,this.j("mouseDragEnter",b,a))});t.g(Q,"mouseDragLeave",Q.prototype.CA);
t.defineProperty(Q,{CA:"mouseDragLeave"},function(){return null!==this.Q?this.Q.Cr:null},function(a){null===this.Q&&jk(this);var b=this.Q.Cr;b!==a&&(null!==a&&t.i(a,"function",Q,"mouseDragLeave"),this.Q.Cr=a,this.j("mouseDragLeave",b,a))});t.g(Q,"mouseDrop",Q.prototype.wt);t.defineProperty(Q,{wt:"mouseDrop"},function(){return null!==this.Q?this.Q.Bi:null},function(a){null===this.Q&&jk(this);var b=this.Q.Bi;b!==a&&(null!==a&&t.i(a,"function",Q,"mouseDrop"),this.Q.Bi=a,this.j("mouseDrop",b,a))});
t.g(Q,"actionDown",Q.prototype.Fz);t.defineProperty(Q,{Fz:"actionDown"},function(){return null!==this.Q?this.Q.iq:null},function(a){null===this.Q&&jk(this);var b=this.Q.iq;b!==a&&(null!==a&&t.i(a,"function",Q,"actionDown"),this.Q.iq=a,this.j("actionDown",b,a))});t.g(Q,"actionUp",Q.prototype.Hz);
t.defineProperty(Q,{Hz:"actionUp"},function(){return null!==this.Q?this.Q.kq:null},function(a){null===this.Q&&jk(this);var b=this.Q.kq;b!==a&&(null!==a&&t.i(a,"function",Q,"actionUp"),this.Q.kq=a,this.j("actionUp",b,a))});t.g(Q,"actionMove",Q.prototype.Gz);t.defineProperty(Q,{Gz:"actionMove"},function(){return null!==this.Q?this.Q.jq:null},function(a){null===this.Q&&jk(this);var b=this.Q.jq;b!==a&&(null!==a&&t.i(a,"function",Q,"actionMove"),this.Q.jq=a,this.j("actionMove",b,a))});
t.g(Q,"actionCancel",Q.prototype.Ez);t.defineProperty(Q,{Ez:"actionCancel"},function(){return null!==this.Q?this.Q.hq:null},function(a){null===this.Q&&jk(this);var b=this.Q.hq;b!==a&&(null!==a&&t.i(a,"function",Q,"actionCancel"),this.Q.hq=a,this.j("actionCancel",b,a))});t.g(Q,"toolTip",Q.prototype.Yt);
t.defineProperty(Q,{Yt:"toolTip"},function(){return null!==this.Q?this.Q.Oi:null},function(a){null===this.Q&&jk(this);var b=this.Q.Oi;b!==a&&(null!==a&&t.l(a,Je,Q,"toolTip"),this.Q.Oi=a,this.j("toolTip",b,a))});t.g(Q,"contextMenu",Q.prototype.contextMenu);t.defineProperty(Q,{contextMenu:"contextMenu"},function(){return null!==this.Q?this.Q.qi:null},function(a){null===this.Q&&jk(this);var b=this.Q.qi;b!==a&&(null!==a&&t.l(a,Je,Q,"contextMenu"),this.Q.qi=a,this.j("contextMenu",b,a))});
Q.prototype.bind=Q.prototype.bind=function(a){a.pg=this;var b=this.ep();null!==b&&Wk(b)&&t.m("Cannot add a Binding to a template that has already been copied: "+a);null===this.Kc&&(this.Kc=new B(De));this.Kc.add(a)};Q.prototype.findTemplateBinder=Q.prototype.ep=function(){for(var a=this instanceof y?this:this.ja;null!==a;){if(null!==a.Jl&&a instanceof y)return a;a=a.ja}return null};Q.fromSvg=Q.fromSVG=function(a){return Xk(a)};Q.prototype.setProperties=function(a){t.tx(this,a)};var Yk;
Q.make=Yk=function(a,b){var c=arguments,d=null,f=null;if("function"===typeof a)f=a;else if("string"===typeof a){var g=Zk.za(a);"function"===typeof g?(c=Array.prototype.slice.call(arguments),d=g(c)):f=ba[a]}null===d&&(void 0===f&&(d=window.$,void 0!==d&&void 0!==d.noop&&t.m("GraphObject.make failed to complete. Is it conflicting with another $ var? (such as jQuery)"),t.m("GraphObject.make failed to complete, it may be conflicting with another var.")),null!==f&&f.constructor||t.m("GraphObject.make requires a class function or class name, not: "+
a),d=new f);g=1;d instanceof z&&1<c.length&&(f=c[1],"string"===typeof f||f instanceof HTMLDivElement)&&(ai(d,f),g++);for(;g<c.length;g++)f=c[g],void 0===f?t.m("Undefined value at argument "+g+" for object being constructed by GraphObject.make: "+d):$k(d,f);return d};
function $k(a,b){if("string"===typeof b){var c=a;if(c instanceof na)c.text=b;else if(c instanceof V)c.Ab=b;else if(c instanceof al)c.source=b;else if(c instanceof y){var d=t.Pm(y,b);null!==d?c.type=d:t.m("Unknown Panel type as an argument to GraphObject.make: "+b)}else c instanceof ea?(d=t.Pm(ea,b),null!==d?c.type=d:t.m("Unknown Brush type as an argument to GraphObject.make: "+b)):c instanceof zc?(d=t.Pm(zc,b),null!==d?c.type=d:t.m("Unknown Geometry type as an argument to GraphObject.make: "+b)):
c instanceof id?(d=t.Pm(id,b),null!==d?c.type=d:t.m("Unknown PathSegment type as an argument to GraphObject.make: "+b)):t.m("Unable to use a string as an argument to GraphObject.make: "+b)}else if(b instanceof Q)a instanceof y||t.m("A GraphObject can only be added to a Panel, not to: "+a),a.add(b);else if(b instanceof Ae)a instanceof y||t.m("A RowColumnDefinition can only be added to a Panel, not to: "+a),jj(b.xf?a.wd(b.index):a.vd(b.index),b);else if(b instanceof ca)c=a,c instanceof T&&b.Re===T?
2===(b.value&2)?c.Lt=b:b===Pg||b===yg||b===xg?c.De=b:b===bl||b===cl||b===dl?c.Lo=b:b!==el&&b!==zg&&t.m("Unknown Link enum value for a Link property: "+b):c instanceof y&&b.Re===y?c.type=b:c instanceof na&&b.Re===na?c.pB=b:c instanceof Q&&b.Re===T?0===b.name.indexOf("Orient")?c.Ot=b:t.m("Unknown Link enum value for GraphObject.segmentOrientation property: "+b):c instanceof Q&&b.Re===Q?c.fi=b:c instanceof z&&b.Re===z?c.Fm=b:c instanceof ea&&b.Re===ea?c.type=b:c instanceof zc&&b.Re===zc?c.type=b:c instanceof
id&&b.Re===id?c.type=b:c instanceof De&&b.Re===De?c.mode=b:c instanceof td&&b.Re===td?c.td=b:c instanceof W&&b.Re===W?0===b.name.indexOf("Alignment")?c.alignment=b:0===b.name.indexOf("Arrangement")?c.Qe=b:0===b.name.indexOf("Compaction")?c.compaction=b:0===b.name.indexOf("Path")?c.path=b:0===b.name.indexOf("Sorting")?c.sorting=b:0===b.name.indexOf("Style")?c.MG=b:t.m("Unknown enum value: "+b):c instanceof Y&&b.Re===Y?0===b.name.indexOf("Aggressive")?c.JD=b:0===b.name.indexOf("Cycle")?c.hE=b:0===b.name.indexOf("Init")?
c.ZE=b:0===b.name.indexOf("Layer")?c.lF=b:t.m("Unknown enum value: "+b):c instanceof ck&&b.Re===ck?b===fl||b===gl||b===hl||b===il?c.sorting=b:b===jl||b===kl?c.Qe=b:b===ll||b===ml?c.alignment=b:t.m("Unknown enum value: "+b):c instanceof nl&&b.Re===nl?b===ol||b===pl||b===ql||b===rl||b===sl?c.sorting=b:b===tl||b===ul||b===vl||b===wl?c.direction=b:b===xl||b===Dl||b===El||b===Fl?c.Qe=b:b===Gl||b===Hl?c.Bt=b:t.m("Unknown enum value: "+b):t.m("No property to set for this enum value: "+b);else if(b instanceof
De)if(a instanceof Q||a instanceof Ae){var d=b.Wt,f=d.indexOf(".");0<f&&a instanceof y&&(c=d.substr(f+1),d=a.oe(d.substring(0,f)),null!==d&&(a=d,b.Wt=c));a.bind(b)}else t.m("A Binding can only be applied to a GraphObject or RowColumnDefinition, not to: "+a);else if(b instanceof Bc)a instanceof zc?a.Bb.add(b):t.m("A PathFigure can only be added to a Geometry, not to: "+a);else if(b instanceof id)a instanceof Bc?a.Ea.add(b):t.m("A PathSegment can only be added to a PathFigure, not to: "+a);else if(Array.isArray(b))for(c=
0;c<b.length;c++)$k(a,b[c]);else if("object"===typeof b&&null!==b)if(c=a,c instanceof ea){d={};for(f in b){var g=parseFloat(f);isNaN(g)?d[f]=b[f]:c.addColorStop(g,b[f])}t.tx(c,d)}else c instanceof Ae?(void 0!==b.row?(d=b.row,(void 0===d||null===d||Infinity===d||isNaN(d)||0>d)&&t.m("Must specify non-negative integer row for RowColumnDefinition "+b),c.Xl=!0,c.Vc=d):void 0!==b.column?(d=b.column,(void 0===d||null===d||Infinity===d||isNaN(d)||0>d)&&t.m("Must specify non-negative integer column for RowColumnDefinition "+
b),c.Xl=!1,c.Vc=d):t.m("Must specify row or column value in a RowColumnDefinition "+b),d=t.gI(b,"row","column"),t.tx(c,d)):t.tx(c,b);else t.m('Unknown initializer "'+b+'" for object being constructed by GraphObject.make: '+a)}var Zk;Q.Builders=Zk=new ia("string","function");
Zk.add("Button",function(){var a=new ea(Yd);a.addColorStop(0,"white");a.addColorStop(1,"lightgray");var b=new ea(Yd);b.addColorStop(0,"white");b.addColorStop(1,"dodgerblue");var c=Yk(y,ci,{Ow:!0},Yk(V,{name:"ButtonBorder",Ab:"RoundedRectangle",fill:a,stroke:"gray"}));c.DA=function(a,c){var g=c.wa(0),h=c._buttonFillOver;void 0===h&&(h=b);c._buttonFillNormal=g.fill;g.fill=h;h=c._buttonStrokeOver;void 0===h&&(h="blue");c._buttonStrokeNormal=g.stroke;g.stroke=h};c.EA=function(b,c){var g=c.wa(0),h=c._buttonFillNormal;
void 0===h&&(h=a);g.fill=h;h=c._buttonStrokeNormal;void 0===h&&(h="gray");g.stroke=h};return c});
Zk.add("TreeExpanderButton",function(){var a=Yk("Button",Yk(V,{name:"ButtonIcon",Ab:"MinusLine",Ca:F.dq},(new De("figure","isTreeExpanded",function(a,c){var d=null,f=c.ja;f&&(d=a?f._treeExpandedFigure:f._treeCollapsedFigure);d||(d=a?"MinusLine":"PlusLine");return d})).JA("")),{visible:!1},(new De("visible","isTreeLeaf",function(a){return!a})).JA(""));a.click=function(a,c){var d=c.S;d instanceof Je&&(d=d.Wh);if(d instanceof R){var f=d.h;if(null!==f){f=f.Se;if(d.Qc){if(!f.canCollapseTree(d))return}else if(!f.canExpandTree(d))return;
a.Ee=!0;d.Qc?f.collapseTree(d):f.expandTree(d)}}};return a});
Zk.add("SubGraphExpanderButton",function(){var a=Yk("Button",Yk(V,{name:"ButtonIcon",Ab:"MinusLine",Ca:F.dq},(new De("figure","isSubGraphExpanded",function(a,c){var d=null,f=c.ja;f&&(d=a?f._subGraphExpandedFigure:f._subGraphCollapsedFigure);d||(d=a?"MinusLine":"PlusLine");return d})).JA("")));a.click=function(a,c){var d=c.S;d instanceof Je&&(d=d.Wh);if(d instanceof S){var f=d.h;if(null!==f){f=f.Se;if(d.Yd){if(!f.canCollapseSubGraph(d))return}else if(!f.canExpandSubGraph(d))return;a.Ee=!0;d.Yd?f.collapseSubGraph(d):
f.expandSubGraph(d)}}};return a});Zk.add("ContextMenuButton",function(){var a=Yk("Button");a.fi=ik;var b=a.oe("ButtonBorder");b instanceof V&&(b.Ab="Rectangle",b.G=new H(0,0,2,2),b.H=new H(1,1,-2,-2));return a});Q.defineBuilder=function(a,b){t.i(a,"string",Q,"defineBuilder:name");t.i(b,"function",Q,"defineBuilder:func");var c=a.toLowerCase();""!==a&&"none"!==c&&a!==c||t.m("Shape.defineFigureGenerator name must not be empty or None or all-lower-case: "+a);Q.Builders.add(a,b)};
function y(a){Q.call(this);void 0===a?0===arguments.length?this.da=$g:t.m("invalid argument to Panel constructor: undefined"):(t.Aa(a,y,y,"type"),this.da=a);this.xa=new B(Q);this.Ne=F.fq;this.Vg=!1;this.da===yi&&(this.Vg=!0);this.Dq=xb;this.Hc=gk;this.da===Nk&&Il(this);this.Io=Xg;this.Sq=(new fa(10,10)).freeze();this.Tq=F.mj;this.Jl=this.Ol=null;this.hr=NaN;this.hg=this.yi=null;this.eo="category";this.gg=null;this.Qi=new x(NaN,NaN,NaN,NaN);this.Eo=null;this.Eh=!1;this.bs=null}t.ga("Panel",y);t.Xh(y);
t.Ka(y,Q);function Il(a){a.sj=F.fq;a.wh=1;a.si=null;a.Ql=null;a.vh=1;a.uh=null;a.Pl=null;a.kd=[];a.dd=[];a.sm=Jl;a.Ll=Jl;a.Pi=0;a.zi=0}
y.prototype.cloneProtected=function(a){Q.prototype.cloneProtected.call(this,a);a.da=this.da;a.Ne=this.Ne.Z();a.Vg=this.Vg;a.Dq=this.Dq.Z();a.Hc=this.Hc;if(a.da===Nk){a.sj=this.sj.Z();a.wh=this.wh;a.si=this.si;a.Ql=this.Ql;a.vh=this.vh;a.uh=this.uh;a.Pl=this.Pl;var b=[];if(0<this.kd.length)for(var c=this.kd,d=c.length,f=0;f<d;f++)if(void 0!==c[f]){var g=c[f].copy();g.xl(a);b[f]=g}a.kd=b;b=[];if(0<this.dd.length)for(c=this.dd,d=c.length,f=0;f<d;f++)void 0!==c[f]&&(g=c[f].copy(),g.xl(a),b[f]=g);a.dd=
b;a.sm=this.sm;a.Ll=this.Ll;a.Pi=this.Pi;a.zi=this.zi}a.Io=this.Io;a.Sq.assign(this.Sq);a.Tq=this.Tq.Z();a.Ol=this.Ol;a.Jl=this.Jl;a.hr=this.hr;a.yi=this.yi;a.hg=this.hg;a.eo=this.eo;a.Qi.assign(this.Qi);a.Eh=this.Eh;this.bs&&(a.bs=this.bs);this._buttonFillNormal&&(a._buttonFillNormal=this._buttonFillNormal);this._buttonFillOver&&(a._buttonFillOver=this._buttonFillOver);this._buttonStrokeNormal&&(a._buttonStrokeNormal=this._buttonStrokeNormal);this._buttonStrokeOver&&(a._buttonStrokeOver=this._buttonStrokeOver);
this._treeExpandedFigure&&(a._treeExpandedFigure=this._treeExpandedFigure);this._treeCollapsedFigure&&(a._treeCollapsedFigure=this._treeCollapsedFigure);this._subGraphExpandedFigure&&(a._subGraphExpandedFigure=this._subGraphExpandedFigure);this._subGraphCollapsedFigure&&(a._subGraphCollapsedFigure=this._subGraphCollapsedFigure)};y.prototype.Yh=function(a){Q.prototype.Yh.call(this,a);a.xa=this.xa;for(var b=a.xa.k;b.next();)b.value.Ii=a};
y.prototype.copy=function(){var a=Q.prototype.copy.call(this);if(a instanceof y){var b=this.xa;if(0<b.length)for(var c=b.length,d=0;d<c;d++){var f=b.n[d].copy(),g=a;f.xl(g);f.nm=null;var h=g.xa,k=h.count;h.Jd(k,f);h=g.S;if(null!==h){h.Fj=null;null!==f.Nd&&h instanceof R&&(h.Eh=!0);var l=g.h;null!==l&&l.la.vb||h.Ic(wd,"elements",g,null,f,null,k)}}return a}return null};y.prototype.toString=function(){return"Panel("+this.type+")#"+t.od(this)};var $g;y.Position=$g=t.w(y,"Position",0);
y.Horizontal=t.w(y,"Horizontal",1);var bi;y.Vertical=bi=t.w(y,"Vertical",2);var Tg;y.Spot=Tg=t.w(y,"Spot",3);var ci;y.Auto=ci=t.w(y,"Auto",4);var Nk;y.Table=Nk=t.w(y,"Table",5);y.Viewbox=t.w(y,"Viewbox",6);var zk;y.TableRow=zk=t.w(y,"TableRow",7);var Ak;y.TableColumn=Ak=t.w(y,"TableColumn",8);var wg;y.Link=wg=t.w(y,"Link",9);var yi;y.Grid=yi=t.w(y,"Grid",10);t.g(y,"type",y.prototype.type);
t.defineProperty(y,{type:"type"},function(){return this.da},function(a){var b=this.da;b!==a&&(e&&t.Aa(a,y,y,"type"),b!==zk&&b!==Ak||t.m("Cannot change Panel.type when it is already a TableRow or a TableColumn: "+a),this.da=a,this.da===yi?this.Vg=!0:this.da===Nk&&Il(this),this.ha(),this.j("type",b,a))});t.A(y,{elements:"elements"},function(){return this.xa.k});t.A(y,{Pa:"naturalBounds"},function(){return this.hd});t.g(y,"padding",y.prototype.padding);
t.defineProperty(y,{padding:"padding"},function(){return this.Ne},function(a){"number"===typeof a?(0>a&&t.ka(a,">= 0",y,"padding"),a=new ab(a)):(t.l(a,ab,y,"padding"),0>a.left&&t.ka(a.left,">= 0",y,"padding:val.left"),0>a.right&&t.ka(a.right,">= 0",y,"padding:val.right"),0>a.top&&t.ka(a.top,">= 0",y,"padding:val.top"),0>a.bottom&&t.ka(a.bottom,">= 0",y,"padding:val.bottom"));var b=this.Ne;b.M(a)||(this.Ne=a=a.Z(),this.ha(),this.j("padding",b,a))});t.g(y,"defaultAlignment",y.prototype.Xj);
t.defineProperty(y,{Xj:"defaultAlignment"},function(){return this.Dq},function(a){var b=this.Dq;b.M(a)||(e&&t.l(a,H,y,"defaultAlignment"),this.Dq=a=a.Z(),this.ha(),this.j("defaultAlignment",b,a))});t.g(y,"defaultStretch",y.prototype.Zz);t.defineProperty(y,{Zz:"defaultStretch"},function(){return this.Hc},function(a){var b=this.Hc;b!==a&&(t.Aa(a,Q,y,"defaultStretch"),this.Hc=a,this.ha(),this.j("defaultStretch",b,a))});t.g(y,"defaultSeparatorPadding",y.prototype.uI);
t.defineProperty(y,{uI:"defaultSeparatorPadding"},function(){return void 0===this.sj?F.fq:this.sj},function(a){if(void 0!==this.sj){"number"===typeof a?a=new ab(a):e&&t.l(a,ab,y,"defaultSeparatorPadding");var b=this.sj;b.M(a)||(this.sj=a=a.Z(),this.j("defaultSeparatorPadding",b,a))}});t.g(y,"defaultRowSeparatorStroke",y.prototype.sI);
t.defineProperty(y,{sI:"defaultRowSeparatorStroke"},function(){return void 0===this.si?null:this.si},function(a){var b=this.si;b!==a&&(null===a||"string"===typeof a||a instanceof ea)&&(a instanceof ea&&a.freeze(),this.si=a,this.j("defaultRowSeparatorStroke",b,a))});t.g(y,"defaultRowSeparatorStrokeWidth",y.prototype.tI);
t.defineProperty(y,{tI:"defaultRowSeparatorStrokeWidth"},function(){return void 0===this.wh?1:this.wh},function(a){if(void 0!==this.wh){var b=this.wh;b!==a&&(this.wh=a,this.j("defaultRowSeparatorStrokeWidth",b,a))}});t.g(y,"defaultRowSeparatorDashArray",y.prototype.rI);
t.defineProperty(y,{rI:"defaultRowSeparatorDashArray"},function(){return void 0===this.Ql?null:this.Ql},function(a){if(void 0!==this.Ql){var b=this.Ql;if(b!==a){null===a||Array.isArray(a)||t.bc(a,"Array",y,"defaultRowSeparatorDashArray:val");if(null!==a){for(var c=a.length,d=0,f=0;f<c;f++){var g=a[f];"number"===typeof g&&0<=g&&isFinite(g)||t.m("defaultRowSeparatorDashArray:val "+g+" must be a positive number or zero.");d+=g}if(0===d){if(null===b)return;a=null}}this.Ql=a;this.fa();this.j("defaultRowSeparatorDashArray",
b,a)}}});t.g(y,"defaultColumnSeparatorStroke",y.prototype.mI);t.defineProperty(y,{mI:"defaultColumnSeparatorStroke"},function(){return void 0===this.uh?null:this.uh},function(a){if(void 0!==this.uh){var b=this.uh;b!==a&&(null===a||"string"===typeof a||a instanceof ea)&&(a instanceof ea&&a.freeze(),this.uh=a,this.j("defaultColumnSeparatorStroke",b,a))}});t.g(y,"defaultColumnSeparatorStrokeWidth",y.prototype.nI);
t.defineProperty(y,{nI:"defaultColumnSeparatorStrokeWidth"},function(){return void 0===this.vh?1:this.vh},function(a){if(void 0!==this.vh){var b=this.vh;b!==a&&(this.vh=a,this.j("defaultColumnSeparatorStrokeWidth",b,a))}});t.g(y,"defaultColumnSeparatorDashArray",y.prototype.lI);
t.defineProperty(y,{lI:"defaultColumnSeparatorDashArray"},function(){return void 0===this.Pl?null:this.Pl},function(a){if(void 0!==this.Pl){var b=this.Pl;if(b!==a){null===a||Array.isArray(a)||t.bc(a,"Array",y,"defaultColumnSeparatorDashArray:val");if(null!==a){for(var c=a.length,d=0,f=0;f<c;f++){var g=a[f];"number"===typeof g&&0<=g&&isFinite(g)||t.m("defaultColumnSeparatorDashArray:val "+g+" must be a positive number or zero.");d+=g}if(0===d){if(null===b)return;a=null}}this.Pl=a;this.fa();this.j("defaultColumnSeparatorDashArray",
b,a)}}});t.g(y,"viewboxStretch",y.prototype.cK);t.defineProperty(y,{cK:"viewboxStretch"},function(){return this.Io},function(a){var b=this.Io;b!==a&&(t.Aa(a,Q,y,"viewboxStretch"),this.Io=a,this.j("viewboxStretch",b,a))});t.g(y,"gridCellSize",y.prototype.ht);
t.defineProperty(y,{ht:"gridCellSize"},function(){return this.Sq},function(a){var b=this.Sq;b.M(a)||(t.l(a,fa,y,"gridCellSize"),a.N()&&0!==a.width&&0!==a.height||t.m("Invalid Panel.gridCellSize: "+a),this.Sq=a.Z(),null!==this.h&&this===this.h.lp&&Li(this.h),this.fa(),this.j("gridCellSize",b,a))});t.g(y,"gridOrigin",y.prototype.kA);
t.defineProperty(y,{kA:"gridOrigin"},function(){return this.Tq},function(a){var b=this.Tq;b.M(a)||(t.l(a,w,y,"gridOrigin"),a.N()||t.m("Invalid Panel.gridOrigin: "+a),this.Tq=a.Z(),this.h&&Li(this.h),this.fa(),this.j("gridOrigin",b,a))});
y.prototype.fl=function(a,b){if(this.da===yi){var c=this.ek()*b.scale;0>=c&&(c=1);var d=this.ht,f=d.width,d=d.height,g=this.Pa,h=g.width,g=g.height,k=Math.ceil(h/f),l=Math.ceil(g/d),m=this.kA;a.save();a.beginPath();a.rect(0,0,h,g);a.clip();for(var n=[],p=this.xa.n,q=this.xa.length,r=0;r<q;r++){var s=[];n.push(s);var u=p[r];if(u.visible)for(var u=kj(u.Ab),v=r+1;v<q;v++){var D=p[v];D.visible&&kj(D.Ab)===u&&(D=D.interval,2<=D&&s.push(D))}}p=this.xa.length;for(q=0;q<p;q++){var A=this.xa.n[q];if(A.visible){var r=
n[q],s=A.interval,u=!1,G=A.zx;if(null!==G){var K=u=!0;void 0!==a.setLineDash?(a.setLineDash(G),a.lineDashOffset=A.ld):void 0!==a.webkitLineDash?(a.webkitLineDash=G,a.webkitLineDashOffset=A.ld):void 0!==a.mozDash?(a.mozDash=G,a.mozDashOffset=A.ld):K=!1}if("LineV"===A.Ab){a.lineWidth=A.fb;Dk(this,a,A.stroke,!1);a.beginPath();for(D=v=Math.floor(-m.x/f);D<=v+k;D++){var N=D*f+m.x;if(0<=N&&N<h&&Kl(D,s,r)&&(u&&!K?lk(a,N,0,N,g,G,A.ld):(a.moveTo(N,0),a.lineTo(N,g)),2>f*s*c))break}a.stroke()}else if("LineH"===
A.Ab){a.lineWidth=A.fb;Dk(this,a,A.stroke,!1);a.beginPath();for(D=v=Math.floor(-m.y/d);D<=v+l&&!(N=D*d+m.y,0<=N&&N<=g&&Kl(D,s,r)&&(u&&!K?lk(a,0,N,h,N,G,A.ld):(a.moveTo(0,N),a.lineTo(h,N)),2>d*s*c));D++);a.stroke()}else if("BarV"===A.Ab)for(Dk(this,a,A.fill,!0),A=A.width,isNaN(A)&&(A=f),D=v=Math.floor(-m.x/f);D<=v+k&&!(N=D*f+m.x,0<=N&&N<h&&Kl(D,s,r)&&(a.fillRect(N,0,A,g),2>f*s*c));D++);else if("BarH"===A.Ab)for(Dk(this,a,A.fill,!0),A=A.height,isNaN(A)&&(A=d),D=v=Math.floor(-m.y/d);D<=v+l&&!(N=D*d+
m.y,0<=N&&N<=g&&Kl(D,s,r)&&(a.fillRect(0,N,h,A),2>d*s*c));D++);u&&(void 0!==a.setLineDash?(a.setLineDash(t.ji),a.lineDashOffset=0):void 0!==a.webkitLineDash?(a.webkitLineDash=t.ji,a.webkitLineDashOffset=0):void 0!==a.mozDash&&(a.mozDash=null,a.mozDashOffset=0))}}a.restore();wi(b,a,!1)}else{this.da===Nk&&(a.lineCap="butt",Ll(this,a,!0,this.kd,!0),Ll(this,a,!1,this.dd,!0),Ml(this,a,!0,this.kd),Ml(this,a,!1,this.dd),Ll(this,a,!0,this.kd,!1),Ll(this,a,!1,this.dd,!1));c=this.xa.length;for(f=0;f<c;f++)this.xa.n[f].Ue(a,
b);e&&e.tK&&this instanceof T&&e.sK(a,b,this)}};
function Ml(a,b,c,d){for(var f=d.length,g,h=a.oa,k=c?a.wd(0):a.vd(0),l=0;l<f;l++)if(g=d[l],void 0!==g&&g!==k&&0!==g.fc){var m=g.kn;isNaN(m)&&(m=c?a.wh:a.vh);var n=g.jn;null===n&&(n=c?a.si:a.uh);if(0!==m&&null!==n){Dk(a,b,n,!1);var n=!1,p=g.kG;if(null!==p){var q=n=!0;void 0!==b.setLineDash?(b.setLineDash(p),b.lineDashOffset=a.ld):void 0!==b.webkitLineDash?(b.webkitLineDash=p,b.webkitLineDashOffset=a.ld):void 0!==b.mozDash?(b.mozDash=p,b.mozDashOffset=a.ld):q=!1}b.beginPath();var r=g.position+m;c?r>
h.height&&(m-=r-h.height):r>h.width&&(m-=r-h.width);g=g.position+m/2;b.lineWidth=m;r=a.padding;c?(g+=r.top,m=r.left,r=h.width-r.right,n&&!q?lk(b,m,g,r,g,p,0):(b.moveTo(m,g),b.lineTo(r,g))):(g+=r.left,m=r.top,r=h.height-r.bottom,n&&!q?lk(b,g,m,g,r,p,0):(b.moveTo(g,m),b.lineTo(g,r)));b.stroke();n&&(void 0!==b.setLineDash?(b.setLineDash(t.ji),b.lineDashOffset=0):void 0!==b.webkitLineDash?(b.webkitLineDash=t.ji,b.webkitLineDashOffset=0):void 0!==b.mozDash&&(b.mozDash=null,b.mozDashOffset=0))}}}
function Ll(a,b,c,d,f){for(var g=d.length,h,k=a.oa,l=0;l<g;l++)if(h=d[l],void 0!==h&&null!==h.background&&h.tw!==f&&0!==h.fc){var m=c?k.height:k.width;if(!(h.position>m)){var n=Nl(h),p=h.kn;isNaN(p)&&(p=c?a.wh:a.vh);var q=h.jn;null===q&&(q=c?a.si:a.uh);null===q&&(p=0);n-=p;p=h.position+p;n+=h.fc;p+n>m&&(n=m-p);0>=n||(m=a.padding,Dk(a,b,h.background,!0),c?b.fillRect(m.left,p+m.top,k.width-(m.left+m.right),n):b.fillRect(p+m.left,m.top,n,k.height-(m.top+m.bottom)))}}}
function Kl(a,b,c){if(0!==a%b)return!1;b=c.length;for(var d=0;d<b;d++)if(0===a%c[d])return!1;return!0}function kj(a){return"LineV"===a||"BarV"===a}
y.prototype.kp=function(a,b,c,d,f){var g=this.Hf(),h=this.transform,k=1/(h.m11*h.m22-h.m12*h.m21),l=h.m22*k,m=-h.m12*k,n=-h.m21*k,p=h.m11*k,q=k*(h.m21*h.dy-h.m22*h.dx),r=k*(h.m12*h.dx-h.m11*h.dy);if(null!==this.$k)return h=this.oa,F.ll(h.left,h.top,h.right,h.bottom,a,b,c,d,f);if(null!==this.background)g=a*l+b*n+q,k=a*m+b*p+r,a=c*l+d*n+q,c=c*m+d*p+r,f.p(0,0),d=this.Pa,c=F.ll(0,0,d.width,d.height,g,k,a,c,f),f.transform(h);else{g||(l=1,n=m=0,p=1,r=q=0);k=a*l+b*n+q;a=a*m+b*p+r;l=c*l+d*n+q;d=c*m+d*p+r;
f.p(l,d);m=(l-k)*(l-k)+(d-a)*(d-a);c=!1;p=this.xa.n;r=p.length;n=t.K();for(q=0;q<r;q++)b=p[q],b.visible&&b.kp(k,a,l,d,n)&&(c=!0,b=(k-n.x)*(k-n.x)+(a-n.y)*(a-n.y),b<m&&(m=b,f.set(n)));t.B(n);g&&f.transform(h)}return c};
y.prototype.ut=function(a,b,c,d){var f=this.Qi;f.width=0;f.height=0;var g=this.Ca,h=this.Vf;void 0===c&&(c=h.width,d=h.height);c=Math.max(c,h.width);d=Math.max(d,h.height);var k=this.He;isNaN(g.width)||(a=Math.min(g.width,k.width));isNaN(g.height)||(b=Math.min(g.height,k.height));a=Math.max(c,a);b=Math.max(d,b);var l=this.padding;a=Math.max(a-l.left-l.right,0);b=Math.max(b-l.top-l.bottom,0);var m=this.xa,n=m.length;if(0!==n){var p=this.da.Zb;switch(p){case "Position":var q=a,r=b,s=c,u=d;f.x=0;f.y=
0;f.width=0;for(var v=f.height=0;v<n;v++){var D=m.n[v];if(D.visible||D===this.kc){var A=D.margin,G=A.right+A.left,K=A.top+A.bottom;ih(D,q,r,s,u);var N=D.Ga,O=Math.max(N.width+G,0),U=Math.max(N.height+K,0),X=D.position.x,Z=D.position.y;isFinite(X)||(X=0);isFinite(Z)||(Z=0);if(D instanceof V&&D.rA)var P=D.fb/2,X=X-P,Z=Z-P;hb(f,X,Z,O,U)}}break;case "Vertical":for(var pa=a,Ya=c,za=t.Db(),Na=0;Na<n;Na++){var wa=m.n[Na];if(wa.visible||wa===this.kc){var Pa=qk(wa);if(Pa!==Vg&&Pa!==hk)za.push(wa);else{var Ga=
wa.margin,Kf=Ga.right+Ga.left,lf=Ga.top+Ga.bottom;ih(wa,pa,Infinity,Ya,0);var $b=wa.Ga,gg=Math.max($b.width+Kf,0),ic=Math.max($b.height+lf,0);f.width=Math.max(f.width,gg);f.height+=ic}}}var kb=za.length;if(0!==kb){this.Ca.width?pa=Math.min(this.Ca.width,this.He.width):0!==f.width&&(pa=Math.min(f.width,this.He.width));for(Na=0;Na<kb;Na++)if(wa=za[Na],wa.visible||wa===this.kc)Ga=wa.margin,Kf=Ga.right+Ga.left,lf=Ga.top+Ga.bottom,ih(wa,pa,Infinity,Ya,0),$b=wa.Ga,gg=Math.max($b.width+Kf,0),ic=Math.max($b.height+
lf,0),f.width=Math.max(f.width,gg),f.height+=ic;t.ya(za)}break;case "Horizontal":for(var fb=b,Ia=d,Ja=t.Db(),Xa=0;Xa<n;Xa++){var db=m.n[Xa];if(db.visible||db===this.kc){var Ab=qk(db);if(Ab!==Vg&&Ab!==ik)Ja.push(db);else{var md=db.margin,mf=md.right+md.left,Dd=md.top+md.bottom;ih(db,Infinity,fb,0,Ia);var nd=db.Ga,Ne=Math.max(nd.width+mf,0),Ed=Math.max(nd.height+Dd,0);f.width+=Ne;f.height=Math.max(f.height,Ed)}}}var se=Ja.length;if(0!==se){this.Ca.height?fb=Math.min(this.Ca.height,this.He.height):0!==
f.height&&(fb=Math.min(f.height,this.He.height));for(Xa=0;Xa<se;Xa++)if(db=Ja[Xa],db.visible||db===this.kc)md=db.margin,mf=md.right+md.left,Dd=md.top+md.bottom,ih(db,Infinity,fb,0,Ia),nd=db.Ga,Ne=Math.max(nd.width+mf,0),Ed=Math.max(nd.height+Dd,0),f.width+=Ne,f.height=Math.max(f.height,Ed);t.ya(Ja)}break;case "Spot":a:{var Lf=a,Bb=b,Cg=c,Ib=d,rb=Kk(this,m,n),Za=rb.margin,yb,jc,Mf=Za.right+Za.left,Nf=Za.top+Za.bottom;ih(rb,Lf,Bb,Cg,Ib);var kc=rb.Ga,Uc=kc.width,od=kc.height,ec=Math.max(Uc+Mf,0),pd=
Math.max(od+Nf,0);f.x=-Za.left;f.y=-Za.top;f.width=ec;f.height=pd;for(var $a=0;$a<n;$a++){var Ua=m.n[$a];if(Ua!==rb&&(Ua.visible||Ua===this.kc)){Za=Ua.margin;yb=Za.right+Za.left;jc=Za.top+Za.bottom;ih(Ua,Lf,Bb,0,0);var kc=Ua.Ga,ec=Math.max(kc.width+yb,0),pd=Math.max(kc.height+jc,0),Rb=Ua.alignment;Rb.Pc()&&(Rb=this.Xj);Rb.xd()||(Rb=Hb);var Jb=Ua.Qj;Jb.Pc()&&(Jb=Hb);hb(f,Rb.x*Uc+Rb.offsetX-(Jb.x*kc.width-Jb.offsetX)-Za.left,Rb.y*od+Rb.offsetY-(Jb.y*kc.height-Jb.offsetY)-Za.top,ec,pd)}}var Oe=rb.fi;
Oe===gk&&(Oe=qk(rb));switch(Oe){case Vg:break a;case Cc:if(!isFinite(Lf)&&!isFinite(Bb))break a;break;case ik:if(!isFinite(Lf))break a;break;case hk:if(!isFinite(Bb))break a}kc=rb.Ga;Uc=kc.width;od=kc.height;ec=Math.max(Uc+Mf,0);pd=Math.max(od+Nf,0);Za=rb.margin;f.x=-Za.left;f.y=-Za.top;f.width=ec;f.height=pd;for($a=0;$a<n;$a++)Ua=m.n[$a],Ua===rb||!Ua.visible&&Ua!==this.kc||(Za=Ua.margin,yb=Za.right+Za.left,jc=Za.top+Za.bottom,kc=Ua.Ga,ec=Math.max(kc.width+yb,0),pd=Math.max(kc.height+jc,0),Rb=Ua.alignment,
Rb.Pc()&&(Rb=this.Xj),Rb.xd()||(Rb=Hb),Jb=Ua.Qj,Jb.Pc()&&(Jb=Hb),hb(f,Rb.x*Uc+Rb.offsetX-(Jb.x*kc.width-Jb.offsetX)-Za.left,Rb.y*od+Rb.offsetY-(Jb.y*kc.height-Jb.offsetY)-Za.top,ec,pd))}break;case "Auto":var Od=a,pc=b,Kb=c,de=d,sb=Kk(this,m,n),Fd=sb.margin,Dg=Fd.right+Fd.left,Pe=Fd.top+Fd.bottom;ih(sb,Od,pc,Kb,de);var Gd=sb.Ga,gb=Math.max(Gd.width+Dg,0),nf=Math.max(Gd.height+Pe,0),ib=Ol(sb),tb=ib.x*gb+ib.offsetX,Vc=ib.y*nf+ib.offsetY,ib=Pl(sb),Nb=ib.x*gb+ib.offsetX,Pd=ib.y*nf+ib.offsetY,Qd=Od,ee=
pc;isFinite(Od)&&(Qd=Math.abs(tb-Nb));isFinite(pc)&&(ee=Math.abs(Vc-Pd));var Fc=t.Cl();Fc.p(0,0);for(var te=0;te<n;te++){var Gc=m.n[te];if(Gc!==sb&&(Gc.visible||Gc===this.kc)){var Fd=Gc.margin,Cb=Fd.right+Fd.left,Qe=Fd.top+Fd.bottom;ih(Gc,Qd,ee,0,0);Gd=Gc.Ga;gb=Math.max(Gd.width+Cb,0);nf=Math.max(Gd.height+Qe,0);Fc.p(Math.max(gb,Fc.width),Math.max(nf,Fc.height))}}if(1===n)f.width=gb,f.height=nf,t.ck(Fc);else{var qd=Ol(sb),lb=Pl(sb),Hd,Db;lb.x!==qd.x&&lb.y!==qd.y&&(Hd=Fc.width/Math.abs(lb.x-qd.x),
Db=Fc.height/Math.abs(lb.y-qd.y));t.ck(Fc);var Rd=0;sb instanceof V&&(Rd=sb.fb*sb.scale,Wg(sb)===Xg&&(Hd=Math.max(Hd,Db),Db=Math.max(Hd,Db)));Hd+=Math.abs(qd.offsetX)+Math.abs(lb.offsetX)+Rd;Db+=Math.abs(qd.offsetY)+Math.abs(lb.offsetY)+Rd;var Id=sb.fi;Id===gk&&(Id=qk(sb));switch(Id){case Vg:de=Kb=0;break;case Cc:isFinite(Od)&&(Hd=Od);isFinite(pc)&&(Db=pc);break;case ik:isFinite(Od)&&(Hd=Od);de=0;break;case hk:Kb=0,isFinite(pc)&&(Db=pc)}sb instanceof V&&!sb.Ca.N()&&(sb.ah?sb.yk=null:sb.Ta=null);Lk(sb);
ih(sb,Hd,Db,Kb,de);f.width=sb.Ga.width+Dg;f.height=sb.Ga.height+Pe}break;case "Table":for(var lc=a,Ob=b,nb=n,of=c,bb=d,Jd=t.Db(),Wc=t.Db(),la=0;la<nb;la++){var sa=m.n[la];if(sa instanceof y&&(sa.type===zk||sa.type===Ak)&&sa.visible){Wc.push(sa);for(var wj=sa.xa,oh=wj.length,xc=0;xc<oh;xc++){var ph=wj.n[xc];sa.type===zk?ph.lc=sa.lc:sa.type===Ak&&(ph.column=sa.column);Jd.push(ph)}}else Jd.push(sa)}nb=Jd.length;0===nb&&(this.wd(0),this.vd(0));for(var fc=[],la=0;la<nb;la++)sa=Jd[la],rk(sa,!0),vk(sa,!0),
fc[sa.lc]||(fc[sa.lc]=[]),fc[sa.lc][sa.column]||(fc[sa.lc][sa.column]=[]),fc[sa.lc][sa.column].push(sa);t.ya(Jd);for(var Eg=t.Db(),hg=t.Db(),Hc=t.Db(),Ic={count:0},Jc={count:0},yc=lc,Kc=Ob,Of=this.kd,nb=Of.length,la=0;la<nb;la++){var ka=Of[la];void 0!==ka&&Ql(ka,0)}Of=this.dd;nb=Of.length;for(la=0;la<nb;la++)ka=Of[la],void 0!==ka&&Ql(ka,0);for(var fe=fc.length,Sd=0,la=0;la<fe;la++)fc[la]&&(Sd=Math.max(Sd,fc[la].length));for(var ig=Math.min(this.Pi,fe-1),xj=Math.min(this.zi,Sd-1),Xc,fe=fc.length,la=
ig;la<fe;la++)if(fc[la]){var Sd=fc[la].length,jb=this.wd(la);Ql(jb,0);for(xc=xj;xc<Sd;xc++)if(fc[la][xc]){var ob=this.vd(xc);void 0===Eg[xc]&&(Ql(ob,0),Eg[xc]=!0);for(var ji=fc[la][xc],yl=ji.length,jg=0;jg<yl;jg++)if(sa=ji[jg],sa.visible||sa===this.kc){var kg=1<sa.Jj||1<sa.rj;kg&&hg.push(sa);var Sb=sa.margin,Pf=Sb.right+Sb.left,Qf=Sb.top+Sb.bottom,Td=Ok(sa,jb,ob),ge=sa.Ca,qh=!isNaN(ge.width),Rf=!isNaN(ge.height),Re=qh&&Rf;kg||Td===Vg||Re||(void 0===Ic[xc]&&(Ic[xc]=-1,Ic.count++),void 0===Jc[la]&&
(Jc[la]=-1,Jc.count++),Hc.push(sa));ih(sa,Infinity,Infinity,0,0);var ue=sa.Ga,Se=Math.max(ue.width+Pf,0),Te=Math.max(ue.height+Qf,0);1!==sa.Jj||!Rf&&Td!==Vg&&Td!==ik||(ka=this.wd(la),Xc=Math.max(Te-ka.fc,0),Xc>Kc&&(Xc=Kc),Ql(ka,ka.fc+Xc),Kc=Math.max(Kc-Xc,0));1!==sa.rj||!qh&&Td!==Vg&&Td!==hk||(ka=this.vd(xc),Xc=Math.max(Se-ka.fc,0),Xc>yc&&(Xc=yc),Ql(ka,ka.fc+Xc),yc=Math.max(yc-Xc,0));kg&&Lk(sa)}}}t.ya(Eg);for(var he=0,ie=0,nb=this.Vs,la=0;la<nb;la++)void 0!==this.dd[la]&&(he+=this.vd(la).Lb);nb=this.Mt;
for(la=0;la<nb;la++)void 0!==this.kd[la]&&(ie+=this.wd(la).Lb);for(var yc=Math.max(lc-he,0),sd=Kc=Math.max(Ob-ie,0),rh=yc,nb=Hc.length,la=0;la<nb;la++){var sa=Hc[la],jb=this.wd(sa.lc),ob=this.vd(sa.column),Fg=sa.Ga,Sb=sa.margin,Pf=Sb.right+Sb.left,Qf=Sb.top+Sb.bottom;Ic[sa.column]=0===ob.fc?Math.max(Fg.width+Pf,Ic[sa.column]):null;Jc[sa.lc]=0===jb.fc?Math.max(Fg.height+Qf,Jc[sa.lc]):null}var Ud=0,Gg=0;for(la in Jc)"count"!==la&&(Ud+=Jc[la]);for(la in Ic)"count"!==la&&(Gg+=Ic[la]);for(var zb=t.Cl(),
la=0;la<nb;la++)if(sa=Hc[la],sa.visible||sa===this.kc){var jb=this.wd(sa.lc),ob=this.vd(sa.column),je;isFinite(ob.width)?je=ob.width:(je=isFinite(yc)&&null!==Ic[sa.column]?0===Gg?ob.fc+yc:Ic[sa.column]/Gg*rh:null!==Ic[sa.column]?yc:ob.fc||yc,je=Math.max(0,je-Nl(ob)));var pf;isFinite(jb.height)?pf=jb.height:(pf=isFinite(Kc)&&null!==Jc[sa.lc]?0===Ud?jb.fc+Kc:Jc[sa.lc]/Ud*sd:null!==Jc[sa.lc]?Kc:jb.fc||Kc,pf=Math.max(0,pf-Nl(jb)));zb.p(Math.max(ob.di,Math.min(je,ob.zf)),Math.max(jb.di,Math.min(pf,jb.zf)));
Td=Ok(sa,jb,ob);switch(Td){case ik:zb.height=Infinity;break;case hk:zb.width=Infinity}Sb=sa.margin;Pf=Sb.right+Sb.left;Qf=Sb.top+Sb.bottom;Lk(sa);ih(sa,zb.width,zb.height,ob.di,jb.di);ue=sa.Ga;Se=Math.max(ue.width+Pf,0);Te=Math.max(ue.height+Qf,0);isFinite(yc)&&(Se=Math.min(Se,zb.width));isFinite(Kc)&&(Te=Math.min(Te,zb.height));var qf;qf=jb.fc;Ql(jb,Math.max(jb.fc,Te));Xc=jb.fc-qf;Kc=Math.max(Kc-Xc,0);qf=ob.fc;Ql(ob,Math.max(ob.fc,Se));Xc=ob.fc-qf;yc=Math.max(yc-Xc,0)}t.ya(Hc);for(var Vd=t.Cl(),
nb=hg.length,la=0;la<nb;la++)if(sa=hg[la],sa.visible||sa===this.kc){jb=this.wd(sa.lc);ob=this.vd(sa.column);zb.p(Math.max(ob.di,Math.min(lc,ob.zf)),Math.max(jb.di,Math.min(Ob,jb.zf)));Td=Ok(sa,jb,ob);switch(Td){case Cc:0!==ob.fc&&(zb.width=Math.min(zb.width,ob.fc));0!==jb.fc&&(zb.height=Math.min(zb.height,jb.fc));break;case ik:0!==ob.fc&&(zb.width=Math.min(zb.width,ob.fc));break;case hk:0!==jb.fc&&(zb.height=Math.min(zb.height,jb.fc))}isFinite(ob.width)&&(zb.width=ob.width);isFinite(jb.height)&&(zb.height=
jb.height);Vd.p(0,0);for(var Tb=1;Tb<sa.Jj&&!(sa.lc+Tb>=this.Mt);Tb++)ka=this.wd(sa.lc+Tb),Vd.height+=Math.max(ka.di,isNaN(ka.Mf)?ka.zf:Math.min(ka.Mf,ka.zf));for(Tb=1;Tb<sa.rj&&!(sa.column+Tb>=this.Vs);Tb++)ka=this.vd(sa.column+Tb),Vd.width+=Math.max(ka.di,isNaN(ka.Mf)?ka.zf:Math.min(ka.Mf,ka.zf));zb.width+=Vd.width;zb.height+=Vd.height;Sb=sa.margin;Pf=Sb.right+Sb.left;Qf=Sb.top+Sb.bottom;ih(sa,zb.width,zb.height,of,bb);for(var ue=sa.Ga,Se=Math.max(ue.width+Pf,0),Te=Math.max(ue.height+Qf,0),Hg=0,
Tb=0;Tb<sa.Jj&&!(sa.lc+Tb>=this.Mt);Tb++)ka=this.wd(sa.lc+Tb),Hg+=ka.total||0;if(Hg<Te)for(var Wd=Te-Hg;0<Wd;){var qc=ka.Lb||0;isNaN(ka.height)&&ka.zf>qc&&(Ql(ka,Math.min(ka.zf,qc+Wd)),ka.Lb!==qc&&(Wd-=ka.Lb-qc));if(-1===ka.index-1)break;ka=this.wd(ka.index-1)}for(var Ue=0,Tb=0;Tb<sa.rj&&!(sa.column+Tb>=this.Vs);Tb++)ka=this.vd(sa.column+Tb),Ue+=ka.total||0;if(Ue<Se)for(Wd=Se-Ue;0<Wd;){qc=ka.Lb||0;isNaN(ka.width)&&ka.zf>qc&&(Ql(ka,Math.min(ka.zf,qc+Wd)),ka.Lb!==qc&&(Wd-=ka.Lb-qc));if(-1===ka.index-
1)break;ka=this.vd(ka.index-1)}}t.ya(hg);t.ck(Vd);t.ck(zb);for(var rf=0,ke=0,Td=qk(this),Ig=this.Ca,lg=this.He,Lc=ie=he=0,le=0,nb=this.Vs,la=0;la<nb;la++)void 0!==this.dd[la]&&(ka=this.vd(la),isFinite(ka.width)?(Lc+=ka.width,Lc+=Nl(ka)):Rl(ka)===Sl?(Lc+=ka.Lb,Lc+=Nl(ka)):0!==ka.Lb&&(he+=ka.Lb,he+=Nl(ka)));var rf=isFinite(Ig.width)?Math.min(Ig.width,lg.width):Td!==Vg&&isFinite(lc)?lc:he,rf=Math.max(rf,this.Vf.width),rf=Math.max(rf-Lc,0),Kg=Math.max(rf/he,1);isFinite(Kg)||(Kg=1);for(la=0;la<nb;la++)void 0!==
this.dd[la]&&(ka=this.vd(la),isFinite(ka.width)||Rl(ka)===Sl||Ql(ka,ka.Lb*Kg),ka.Ra=f.width,0!==ka.Lb&&(f.width+=ka.Lb,f.width+=Nl(ka)));nb=this.Mt;for(la=0;la<nb;la++)void 0!==this.kd[la]&&(ka=this.wd(la),isFinite(ka.height)?(le+=ka.height,le+=Nl(ka)):Rl(ka)===Sl?(le+=ka.Lb,le+=Nl(ka)):0!==ka.Lb&&(ie+=ka.Lb,ie+=Nl(ka)));var ke=isFinite(Ig.height)?Math.min(Ig.height,lg.height):Td!==Vg&&isFinite(Ob)?Ob:ie,ke=Math.max(ke,this.Vf.height),ke=Math.max(ke-le,0),Ve=Math.max(ke/ie,1);isFinite(Ve)||(Ve=1);
for(la=0;la<nb;la++)void 0!==this.kd[la]&&(ka=this.wd(la),isFinite(ka.height)||Rl(ka)===Sl||Ql(ka,ka.Lb*Ve),ka.Ra=f.height,0!==ka.Lb&&(f.height+=ka.Lb,f.height+=Nl(ka)));nb=Wc.length;for(la=0;la<nb;la++){var Yc=Wc[la];Yc.type===zk?(je=f.width,ka=this.wd(Yc.lc),pf=ka.fc):(ka=this.vd(Yc.column),je=ka.fc,pf=f.height);Yc.Wc.p(0,0,je,pf);rk(Yc,!1);fc[Yc.lc]||(fc[Yc.lc]=[]);fc[Yc.lc][Yc.column]||(fc[Yc.lc][Yc.column]=[]);fc[Yc.lc][Yc.column].push(Yc)}t.ya(Wc);this.bs=fc;break;case "Viewbox":var zj=a,Aj=
b,Ho=c,Io=d;1<n&&t.m("Viewbox Panel cannot contain more than one GraphObject.");var ve=m.n[0];ve.xc=1;Lk(ve);ih(ve,Infinity,Infinity,Ho,Io);var ki=ve.Ga,Bj=ve.margin,Jo=Bj.right+Bj.left,Ko=Bj.top+Bj.bottom;if(isFinite(zj)||isFinite(Aj)){var Nq=ve.scale,Cj=ki.width,Dj=ki.height,Lo=Math.max(zj-Jo,0),Mo=Math.max(Aj-Ko,0),li=1;this.Io===Xg?0!==Cj&&0!==Dj&&(li=Math.min(Lo/Cj,Mo/Dj)):0!==Cj&&0!==Dj&&(li=Math.max(Lo/Cj,Mo/Dj));0===li&&(li=1E-4);ve.xc*=li;Nq!==ve.scale&&(rk(ve,!0),ih(ve,Infinity,Infinity,
Ho,Io))}ki=ve.Ga;f.width=isFinite(zj)?zj:Math.max(ki.width+Jo,0);f.height=isFinite(Aj)?Aj:Math.max(ki.height+Ko,0);break;case "Link":var Ej=this instanceof Je?this.Wh:this;if(0===n){var Fj=this.hd;Va(Fj,0,0);var Xd=this.Ga;Xd.p(0,0,0,0)}else{var Gj=this.Rq(),We=this.uj(),we=this.Qi;we.assign(We);we.x=0;we.y=0;var sh,mi=this.Sy();sh=void 0!==this.pa?this.pa:mi.count;this.Yg.p(We.x,We.y);this.mi.clear();null!==Gj&&(Tl(Gj,We.width,We.height),Xd=Gj.Ga,we.ii(Xd),this.mi.add(Xd));for(var th=t.oh(),ni=t.K(),
Sf=t.K(),zl=0;zl<n;zl++){var Ub=m.n[zl];if(Ub!==Gj)if(Ub.fj&&Ub instanceof V)Tl(Ub,We.width,We.height),Xd=Ub.Ga,we.ii(Xd),this.mi.add(Xd);else if(2>sh)ih(Ub,Infinity,Infinity),Xd=Ub.Ga,we.ii(Xd),this.mi.add(Xd);else{var Tf=Ub.Cf,Oo=Ub.Nt,Al=Ub.Qj;Al.Ge()&&(Al=Hb);var oi=Ub.Ot,Oq=Ub.YA,pi,qi,Hj=0;if(Tf<-sh||Tf>=sh){var Po=Ej.yF,ri=Ej.xF;oi!==zg&&(Hj=Ej.computeAngle(Ub,oi,ri),Ub.angle=Hj);pi=Po.x-We.x;qi=Po.y-We.y}else{var sf,uh;if(0<=Tf)sf=mi.n[Tf],uh=Tf<sh-1?mi.n[Tf+1]:sf;else{var Bl=sh+Tf;sf=mi.n[Bl];
uh=0<Bl?mi.n[Bl-1]:sf}ri=0<=Tf?sf.aj(uh):uh.aj(sf);oi!==zg&&(Hj=Ej.computeAngle(Ub,oi,ri),Ub.wn=Hj);pi=sf.x+(uh.x-sf.x)*Oo-We.x;qi=sf.y+(uh.y-sf.y)*Oo-We.y}ih(Ub,Infinity,Infinity);var Xd=Ub.Ga,Fj=Ub.Pa,si=0;Ub instanceof V&&(si=Ub.fb);var Ij=Fj.width+si,Cl=Fj.height+si;th.reset();th.translate(-Xd.x,-Xd.y);th.scale(Ub.scale,Ub.scale);th.rotate(oi===zg?Ub.angle:ri,Ij/2,Cl/2);var vh=new x(0,0,Ij,Cl);ni.Qt(vh,Al);th.Sa(ni);var Pq=-ni.x+si/2,Qq=-ni.y+si/2;Sf.assign(Oq);isNaN(Sf.x)&&(Sf.x=0<=Tf?Ij/2+3:
-(Ij/2+3));isNaN(Sf.y)&&(Sf.y=-(Cl/2+3));Sf.rotate(ri);pi+=Sf.x;qi+=Sf.y;vh.set(Xd);vh.x=pi+Pq;vh.y=qi+Qq;this.mi.add(vh);we.ii(vh)}}if(this.we)for(var Qo=this.fk;Qo.next();)ih(Qo.value,Infinity,Infinity);this.Qi=we;var Jj=this.Yg;Jj&&Jj.p(Jj.x+we.x,Jj.y+we.y);Va(f,we.width||0,we.height||0);t.We(th);t.B(ni);t.B(Sf)}break;case "Grid":break;case "TableRow":case "TableColumn":t.m(this.toString()+" is not an element of a Table Panel. TableRow and TableColumn Panels can only be elements of a Table Panel.");
break;default:t.m("Unknown panel type: "+p)}}var xe=f.width,ye=f.height,Kj=this.padding,Rq=Kj.top+Kj.bottom,xe=xe+(Kj.left+Kj.right),ye=ye+Rq;isFinite(g.width)&&(xe=g.width);isFinite(g.height)&&(ye=g.height);xe=Math.min(k.width,xe);ye=Math.min(k.height,ye);xe=Math.max(h.width,xe);ye=Math.max(h.height,ye);xe=Math.max(c,xe);ye=Math.max(d,ye);f.width=xe;f.height=ye;Va(this.hd,xe,ye);nk(this,0,0,xe,ye)};
y.prototype.findMainElement=y.prototype.Dw=function(){null===this.Eo&&Kk(this,this.xa,this.xa.length);return this.Eo};function Kk(a,b,c){for(var d=0;d<c;d++){var f=b.n[d];if(!0===f.fj)return a.Eo=f}b=b.n[0];return a.Eo=b}
y.prototype.Tj=function(a,b,c,d){var f=this.Qi,g=this.xa,h=g.length,k=t.ik(0,0,0,0);if(0===h){var l=this.oa;l.x=a;l.y=b;l.width=c;l.height=d}else{if(!this.Ca.N()){var m=qk(this),n=this.Wc,p=n.width,q=n.height,r=this.margin,s=r.left+r.right,u=r.top+r.bottom;p===c&&q===d&&(m=Vg);switch(m){case Vg:if(p>c||q>d)this.ha(),ih(this,p>c?c:p,q>d?d:q);break;case Cc:rk(this,!0);ih(this,c+s,d+u,0,0);break;case ik:rk(this,!0);ih(this,c+s,q+u,0,0);break;case hk:rk(this,!0),ih(this,p+s,d+u,0,0)}}l=this.oa;l.x=a;
l.y=b;l.width=c;l.height=d;var v=this.da.Zb;switch(v){case "Position":for(var D=f.x-this.padding.left,A=f.y-this.padding.top,G=0;G<h;G++){var K=g.n[G],N=K.Ga,O=K.margin,U=K.position.x,X=K.position.y;k.x=isNaN(U)?-D:U-D;k.y=isNaN(X)?-A:X-A;if(K instanceof V&&K.rA){var Z=K.fb/2;k.x-=Z;k.y-=Z}k.x+=O.left;k.y+=O.top;k.width=N.width;k.height=N.height;K.visible&&K.Lc(k.x,k.y,k.width,k.height)}break;case "Vertical":for(var P=this.padding.left,pa=this.padding.top,Ya=0;Ya<h;Ya++){var za=P,Na=g.n[Ya];if(Na.visible){var wa=
Na.Ga,Pa=Na.margin,Ga=Pa.left+Pa.right,Kf=P+this.padding.right,lf=wa.width,$b=qk(Na);if(isNaN(Na.Ca.width)&&$b===Cc||$b===ik)lf=Math.max(f.width-Ga-Kf,0);var gg=lf+Ga+Kf,ic=Na.alignment;ic.Pc()&&(ic=this.Xj);ic.xd()||(ic=Hb);Na.Lc(za+ic.offsetX+Pa.left+(f.width*ic.x-gg*ic.x),pa+ic.offsetY+Pa.top,lf,wa.height);pa+=wa.height+Pa.bottom+Pa.top}}break;case "Horizontal":for(var kb=this.padding.top,fb=this.padding.left,Ia=0;Ia<h;Ia++){var Ja=kb,Xa=g.n[Ia];if(Xa.visible){var db=Xa.Ga,Ab=Xa.margin,md=Ab.top+
Ab.bottom,mf=kb+this.padding.bottom,Dd=db.height,nd=qk(Xa);if(isNaN(Xa.Ca.height)&&nd===Cc||nd===hk)Dd=Math.max(f.height-md-mf,0);var Ne=Dd+md+mf,Ed=Xa.alignment;Ed.Pc()&&(Ed=this.Xj);Ed.xd()||(Ed=Hb);Xa.Lc(fb+Ed.offsetX+Ab.left,Ja+Ed.offsetY+Ab.top+(f.height*Ed.y-Ne*Ed.y),db.width,Dd);fb+=db.width+Ab.left+Ab.right}}break;case "Spot":var se=Kk(this,g,h),Lf=se.Ga,Bb=Lf.width,Cg=Lf.height,Ib=this.padding,rb=Ib.left,Za=Ib.top;k.x=rb-f.x;k.y=Za-f.y;se.Lc(k.x,k.y,Bb,Cg);for(var yb=0;yb<h;yb++){var jc=
g.n[yb];if(jc!==se){var Mf=jc.Ga,Nf=Mf.width,kc=Mf.height,Uc=jc.alignment;Uc.Pc()&&(Uc=this.Xj);Uc.xd()||(Uc=Hb);var od=jc.Qj;od.Pc()&&(od=Hb);k.x=Uc.x*Bb+Uc.offsetX-(od.x*Nf-od.offsetX);k.y=Uc.y*Cg+Uc.offsetY-(od.y*kc-od.offsetY);k.x-=f.x;k.y-=f.y;jc.visible&&jc.Lc(rb+k.x,Za+k.y,Nf,kc)}}break;case "Auto":var ec=Kk(this,g,h),pd=ec.Ga,$a=t.Gf();$a.p(0,0,1,1);var Ua=ec.margin,Rb=Ua.left,Jb=Ua.top,Oe=this.padding,Od=Oe.left,pc=Oe.top;k.x=Rb;k.y=Jb;k.width=pd.width;k.height=pd.height;ec.Lc(Od+k.x,pc+
k.y,k.width,k.height);var Kb=Ol(ec),de=Pl(ec),sb=0+Kb.y*pd.height+Kb.offsetY,Fd=0+de.x*pd.width+de.offsetX,Dg=0+de.y*pd.height+de.offsetY;$a.x=0+Kb.x*pd.width+Kb.offsetX;$a.y=sb;hb($a,Fd,Dg,0,0);$a.x+=Rb+Od;$a.y+=Jb+pc;for(var Pe=0;Pe<h;Pe++){var Gd=g.n[Pe];if(Gd!==ec){var gb=Gd.Ga,Ua=Gd.margin,nf=Math.max(gb.width+Ua.right+Ua.left,0),ib=Math.max(gb.height+Ua.top+Ua.bottom,0),tb=Gd.alignment;tb.Pc()&&(tb=this.Xj);tb.xd()||(tb=Hb);k.x=$a.width*tb.x+tb.offsetX-nf*tb.x+Ua.left+$a.x;k.y=$a.height*tb.y+
tb.offsetY-ib*tb.y+Ua.top+$a.y;k.width=$a.width;k.height=$a.height;Gd.visible&&(mb($a.x,$a.y,$a.width,$a.height,k.x,k.y,gb.width,gb.height)?Gd.Lc(k.x,k.y,gb.width,gb.height):Gd.Lc(k.x,k.y,gb.width,gb.height,new x($a.x,$a.y,$a.width,$a.height)))}}t.hc($a);break;case "Table":for(var Vc=this.padding,Nb=Vc.left,Pd=Vc.top,Qd=this.bs,ee,Fc,te=Qd.length,Gc=0,Cb=0;Cb<te;Cb++)Qd[Cb]&&(Gc=Math.max(Gc,Qd[Cb].length));for(var Qe=Math.min(this.Pi,te-1);Qe!==te&&(void 0===this.kd[Qe]||0===this.kd[Qe].Lb);)Qe++;
for(var Qe=Math.min(Qe,te-1),qd=-this.kd[Qe].Ra,lb=Math.min(this.zi,Gc-1);lb!==Gc&&(void 0===this.dd[lb]||0===this.dd[lb].Lb);)lb++;for(var lb=Math.min(lb,Gc-1),Hd=-this.dd[lb].Ra,Db=t.Cl(),Cb=0;Cb<te;Cb++)if(Qd[Cb]){var Gc=Qd[Cb].length,Rd=this.wd(Cb);Fc=Rd.Ra+qd+Pd+Ul(Rd);for(var Id=0;Id<Gc;Id++)if(Qd[Cb][Id]){var lc=this.vd(Id);ee=lc.Ra+Hd+Nb+Ul(lc);for(var Ob=Qd[Cb][Id],nb=Ob.length,of=0;of<nb;of++){var bb=Ob[of],Jd=bb.Ga;if(bb instanceof y&&(bb.type===zk||bb.type===Ak)){sk(bb);bb.cc.Ma();var Wc=
bb.cc;Wc.x=bb.type===zk?Nb:ee;Wc.y=bb.type===Ak?Pd:Fc;Wc.width=Jd.width;Wc.height=Jd.height;bb.cc.freeze();vk(bb,!1)}else{Db.p(0,0);for(var la=1;la<bb.rowSpan&&!(Cb+la>=this.Mt);la++){var sa=this.wd(Cb+la);Db.height+=sa.total}for(la=1;la<bb.ZD&&!(Id+la>=this.Vs);la++){var wj=this.vd(Id+la);Db.width+=wj.total}var oh=lc.Lb+Db.width,xc=Rd.Lb+Db.height;k.x=ee;k.y=Fc;k.width=oh;k.height=xc;var ph=ee,fc=Fc,Eg=oh,hg=xc;ee+oh>f.width&&(Eg=Math.max(f.width-ee,0));Fc+xc>f.height&&(hg=Math.max(f.height-Fc,0));
var Hc=bb.alignment,Ic,Jc,yc,Kc;if(Hc.Pc()){Hc=this.Xj;Hc.xd()||(Hc=Hb);Ic=Hc.x;Jc=Hc.y;yc=Hc.offsetX;Kc=Hc.offsetY;var Of=lc.alignment,ka=Rd.alignment;Of.xd()&&(Ic=Of.x,yc=Of.offsetX);ka.xd()&&(Jc=ka.y,Kc=ka.offsetY)}else Ic=Hc.x,Jc=Hc.y,yc=Hc.offsetX,Kc=Hc.offsetY;if(isNaN(Ic)||isNaN(Jc))Jc=Ic=0.5,Kc=yc=0;var fe=Jd.width,Sd=Jd.height,ig=bb.margin,xj=ig.left+ig.right,Xc=ig.top+ig.bottom,jb=Ok(bb,Rd,lc);!isNaN(bb.Ca.width)||jb!==Cc&&jb!==ik||(fe=Math.max(oh-xj,0));!isNaN(bb.Ca.height)||jb!==Cc&&jb!==
hk||(Sd=Math.max(xc-Xc,0));var ob=bb.He,ji=bb.Vf,fe=Math.min(ob.width,fe),Sd=Math.min(ob.height,Sd),fe=Math.max(ji.width,fe),Sd=Math.max(ji.height,Sd),yl=Sd+Xc;k.x+=k.width*Ic-(fe+xj)*Ic+yc+ig.left;k.y+=k.height*Jc-yl*Jc+Kc+ig.top;bb.visible&&(mb(ph,fc,Eg,hg,k.x,k.y,Jd.width,Jd.height)?bb.Lc(k.x,k.y,fe,Sd):bb.Lc(k.x,k.y,fe,Sd,new x(ph,fc,Eg,hg)))}}}}t.ck(Db);for(Cb=0;Cb<h;Cb++)bb=g.n[Cb],bb instanceof y&&(bb.type===zk||bb.type===Ak)&&(Wc=bb.cc,bb.hd.Ma(),bb.hd.Sp(0,0,Wc.width,Wc.height),bb.hd.freeze());
break;case "Viewbox":var jg=g.n[0],kg=jg.Ga,Sb=jg.margin,Pf=Sb.top+Sb.bottom,Qf=Math.max(kg.width+(Sb.right+Sb.left),0),Td=Math.max(kg.height+Pf,0),ge=jg.alignment;ge.Pc()&&(ge=this.Xj);ge.xd()||(ge=Hb);k.x=f.width*ge.x-Qf*ge.x+ge.offsetX;k.y=f.height*ge.y-Td*ge.y+ge.offsetY;k.width=kg.width;k.height=kg.height;jg.Lc(k.x,k.y,k.width,k.height);break;case "Link":var qh=this.Rq(),Rf=0;if(null!==qh&&Rf<this.mi.count){var Re=this.mi.n[Rf];Rf++;qh.Lc(Re.x-this.Qi.x,Re.y-this.Qi.y,Re.width,Re.height)}for(var ue=
0;ue<h;ue++){var Se=g.n[ue];Se!==qh&&Rf<this.mi.count&&(Re=this.mi.n[Rf],Rf++,Se.Lc(Re.x-this.Qi.x,Re.y-this.Qi.y,Re.width,Re.height))}var Te=this.Sy(),he=Te.count;if(2<=he&&this.we)for(var ie=this.fk;ie.next();){var sd=ie.value,rh=he,Fg=Te,Ud=sd.Cf,Gg=sd.Nt,zb=sd.Qj;zb.Ge()&&(zb=Hb);var je=sd.Ot,pf=sd.YA,qf=void 0,Vd=void 0,Tb=0;if(Ud<-rh||Ud>=rh){var Hg=this.yF,Wd=this.xF;je!==zg&&(Tb=this.computeAngle(sd,je,Wd),sd.angle=Tb);qf=Hg.x;Vd=Hg.y}else{var qc=void 0,Ue=void 0;if(0<=Ud)qc=Fg.n[Ud],Ue=Ud<
rh-1?Fg.n[Ud+1]:qc;else var rf=rh+Ud,qc=Fg.n[rf],Ue=0<rf?Fg.n[rf-1]:qc;Wd=0<=Ud?qc.aj(Ue):Ue.aj(qc);je!==zg&&(Tb=this.computeAngle(sd,je,Wd),sd.angle=Tb);qf=qc.x+(Ue.x-qc.x)*Gg;Vd=qc.y+(Ue.y-qc.y)*Gg}var ke=t.oh();ke.reset();ke.scale(sd.scale,sd.scale);ke.rotate(sd.angle,0,0);var Ig=sd.Pa,lg=t.ik(0,0,Ig.width,Ig.height),Lc=t.K();Lc.Qt(lg,zb);ke.Sa(Lc);var le=-Lc.x,Kg=-Lc.y,Ve=pf.copy();isNaN(Ve.x)&&(Ve.x=0<=Ud?Lc.x+3:-(Lc.x+3));isNaN(Ve.y)&&(Ve.y=-(Lc.y+3));Ve.rotate(Wd);qf+=Ve.x;Vd+=Ve.y;ke.JG(lg);
var le=le+lg.x,Kg=Kg+lg.y,Yc=t.mc(qf+le,Vd+Kg);sd.move(Yc);t.B(Yc);t.B(Lc);t.hc(lg);t.We(ke)}this.bx();break;case "Grid":break;case "TableRow":case "TableColumn":t.m(this.toString()+" is not an element of a Table Panel.TableRow and TableColumn panels can only be elements of a Table Panel.");break;default:t.m("Unknown panel type: "+v)}t.hc(k)}};
y.prototype.Uj=function(a){var b=this.Pa;if(mb(0,0,b.width,b.height,a.x,a.y)){for(var c=this.xa.length,b=t.mc(0,0);c--;){var d=this.xa.n[0];if(d.visible||d===this.kc)if(Qa(b.set(a),d.transform),d.Fa(b))return t.B(b),!0}t.B(b);return null===this.Mb&&null===this.vc?!1:!0}return!1};function Vl(a,b,c){c(a,b);if(b instanceof y){b=b.xa.n;for(var d=b.length,f=0;f<d;f++)Vl(a,b[f],c)}}function bj(a,b){Wl(a,a,b)}
function Wl(a,b,c){c(b);b=b.xa.n;for(var d=b.length,f=0;f<d;f++){var g=b[f];g instanceof y&&Wl(a,g,c)}}y.prototype.walkVisualTree=function(a){Xl(this,this,a)};function Xl(a,b,c){c(b);if(b instanceof y){b=b.xa.n;for(var d=b.length,f=0;f<d;f++)Xl(a,b[f],c)}}y.prototype.findInVisualTree=y.prototype.bt=function(a){return Yl(this,this,a)};function Yl(a,b,c){if(c(b))return b;if(b instanceof y){b=b.xa.n;for(var d=b.length,f=0;f<d;f++){var g=Yl(a,b[f],c);if(null!==g)return g}}return null}
y.prototype.findObject=y.prototype.oe=function(a){if(this.name===a)return this;for(var b=this.xa.n,c=b.length,d=0;d<c;d++){var f=b[d];if(f.name===a)return f;if(f instanceof y)if(null===f.yi&&null===f.hg){if(f=f.oe(a),null!==f)return f}else if(Zl(f)&&(f=f.xa.$a(),null!==f&&(f=f.oe(a),null!==f)))return f}return null};
function $l(a){a=a.xa.n;for(var b=a.length,c=0,d=0;d<b;d++){var f=a[d];if(f instanceof y)c=Math.max(c,$l(f));else if(f instanceof V){a:{if(!f.ah)switch(f.Pn){case "None":case "Square":case "Ellipse":case "Circle":case "LineH":case "LineV":case "FramedRectangle":case "RoundedRectangle":case "Line1":case "Line2":case "Border":case "Cube1":case "Cube2":case "Junction":case "Cylinder1":case "Cylinder2":case "Cylinder3":case "Cylinder4":case "PlusLine":case "XLine":case "ThinCross":case "ThickCross":f=0;
break a}f=f.bh/2*f.ym*f.ek()}c=Math.max(c,f)}}return c}aa=y.prototype;aa.Hf=function(){return!(this.type===zk||this.type===Ak)};
aa.pe=function(a,b,c){if(!1===this.Bf)return null;void 0===b&&(b=null);void 0===c&&(c=null);if(Ri(this))return null;var d=this.Pa,f=1/this.ek(),g=this.Hf(),h=g?a:Qa(t.mc(a.x,a.y),this.transform);if(mb(-(5*f),-(5*f),d.width+10*f,d.height+10*f,h.x,h.y)){if(!this.Vg){for(var k=this.xa.length,f=t.K();k--;){var l=this.xa.n[k];if(l.visible||l===this.kc){l.Hf()?Qa(f.set(a),l.transform):f.set(a);var m=null;l instanceof y?m=l.pe(f,b,c):!0===l.Bf&&l.Fa(f)&&(m=l);if(null!==m&&(null!==b&&(m=b(m)),m&&(null===
c||c(m))))return t.B(f),g||t.B(h),m}}t.B(f)}if(null===this.background&&null===this.$k)return g||t.B(h),null;a=mb(0,0,d.width,d.height,h.x,h.y)?this:null;g||t.B(h);return a}g||t.B(h);return null};
aa.cp=function(a,b,c,d){if(!1===this.Bf)return!1;void 0===b&&(b=null);void 0===c&&(c=null);d instanceof B||d instanceof ma||(d=new B(Q));var f=this.Pa,g=this.Hf(),h=g?a:Qa(t.mc(a.x,a.y),this.transform);if(mb(0,0,f.width,f.height,h.x,h.y)){if(!this.Vg){for(var k=this.xa.length,f=t.K();k--;){var l=this.xa.n[k];if(l.visible||l===this.kc)l.Hf()?Qa(f.set(a),l.transform):f.set(a),(l instanceof y?l.cp(f,b,c,d):l.Fa(f))&&!1!==l.Bf&&(null!==b&&(l=b(l)),l&&(null===c||c(l))&&d.add(l))}t.B(f)}g||t.B(h);return null!==
this.background||null!==this.$k}g||t.B(h);return!1};
aa.bk=function(a,b,c,d,f,g){if(!1===this.Bf)return!1;void 0===b&&(b=null);void 0===c&&(c=null);var h=g;void 0===g&&(h=t.oh(),h.reset());h.multiply(this.transform);if(this.Km(a,h))return am(this,b,c,f),void 0===g&&t.We(h),!0;if(this.Tf(a,h)){if(!this.Vg)for(var k=this.xa.length;k--;){var l=this.xa.n[k];if(l.visible||l===this.kc){var m=l.oa,n=this.Pa;if(!(m.x>n.width||m.y>n.height||0>m.x+m.width||0>m.y+m.height)){m=t.oh();m.set(h);if(l instanceof y?l.bk(a,b,c,d,f,m):pk(l,a,d,m))null!==b&&(l=b(l)),l&&
(null===c||c(l))&&f.add(l);t.We(m)}}}void 0===g&&t.We(h);return d}void 0===g&&t.We(h);return!1};function am(a,b,c,d){for(var f=a.xa.length;f--;){var g=a.xa.n[f];if(g.visible){var h=g.oa,k=a.Pa;h.x>k.width||h.y>k.height||0>h.x+h.width||0>h.y+h.height||(g instanceof y&&am(g,b,c,d),null!==b&&(g=b(g)),g&&(null===c||c(g))&&d.add(g))}}}
aa.Qm=function(a,b,c,d,f,g){if(!1===this.Bf)return!1;void 0===c&&(c=null);void 0===d&&(d=null);var h=this.Pa,k=this.Hf(),l=k?a:Qa(t.mc(a.x,a.y),this.transform),m=k?b:Qa(t.mc(b.x,b.y),this.transform),n=l.Zj(m),p=0<l.x&&l.x<h.width&&0<l.y&&l.y<h.height||Ra(l.x,l.y,0,0,0,h.height)<n||Ra(l.x,l.y,0,h.height,h.width,h.height)<n||Ra(l.x,l.y,h.width,h.height,h.width,0)<n||Ra(l.x,l.y,h.width,0,0,0)<n,h=0<l.x&&l.x<h.width&&0<l.y&&l.y<h.height&&Ra(l.x,l.y,0,0,0,h.height)<n&&Ra(l.x,l.y,0,h.height,h.width,h.height)<
n&&Ra(l.x,l.y,h.width,h.height,h.width,0)<n&&Ra(l.x,l.y,h.width,0,0,0)<n;k||(t.B(l),t.B(m));if(p){if(!this.Vg){k=t.K();l=t.K();for(m=this.xa.length;m--;)if(n=this.xa.n[m],n.visible||n===this.kc){var q=n.oa,r=this.Pa;q.x>r.width||q.y>r.height||0>q.x+q.width||0>q.y+q.height||(n.Hf()?(q=n.transform,Qa(k.set(a),q),Qa(l.set(b),q)):(k.set(a),l.set(b)),n instanceof y?!n.Qm(k,l,c,d,f,g):!n.AE(k,l,f))||(null!==c&&(n=c(n)),n&&(null===d||d(n))&&g.add(n))}t.B(k);t.B(l)}return f?p:h}return!1};
function Ol(a){var b=a.G;if(void 0===b||b===xb)b=null;null===b&&a instanceof V&&(a=a.Ta,null!==a&&(b=a.G));null===b&&(b=Eb);return b}function Pl(a){var b=a.H;if(void 0===b||b===xb)b=null;null===b&&a instanceof V&&(a=a.Ta,null!==a&&(b=a.H));null===b&&(b=Pb);return b}y.prototype.add=y.prototype.add=function(a){t.l(a,Q,y,"add:element");this.Jd(this.xa.count,a)};y.prototype.elt=y.prototype.wa=function(a){return this.xa.wa(a)};
y.prototype.insertAt=y.prototype.Jd=function(a,b){b instanceof C&&t.m("Cannot add a Part to a Panel: "+b);if(this===b||this.ej(b))this===b&&t.m("Cannot make a Panel contain itself: "+this.toString()),t.m("Cannot make a Panel indirectly contain itself: "+this.toString()+" already contains "+b.toString());var c=b.ja;null!==c&&c!==this&&t.m("Cannot add a GraphObject that already belongs to another Panel to this Panel: "+b.toString()+", already contained by "+c.toString()+", cannot be shared by this Panel: "+
this.toString());this.da!==yi||b instanceof V||t.m("Can only add Shapes to a Grid Panel, not: "+b);b.xl(this);b.nm=null;if(null!==this.xA){var d=b.data;null!==d&&"object"===typeof d&&(null===this.gg&&(this.gg=new ia(Object,y)),this.gg.add(d,b))}var f=this.xa,d=-1;if(c===this){for(var g=-1,h=f.count,k=0;k<h;k++)if(f.n[k]===b){g=k;break}if(-1!==g){if(g===a||g+1>=f.count&&a>=f.count)return;f.qd(g);d=g}else t.m("element "+b.toString()+" has panel "+c.toString()+" but is not contained by it.")}if(0>a||
a>f.count)a=f.count;f.Jd(a,b);this.ha();b.ha();null!==b.Nd?this.Eh=!0:b instanceof y&&!0===b.Eh&&(this.Eh=!0);c=this.S;null!==c&&(c.Fj=null,c.Cj=NaN,this.Eh&&c instanceof R&&(c.Eh=!0),c.Eh&&(c.Rd=null),f=this.h,null!==f&&f.la.vb||(-1!==d&&c.Ic(xd,"elements",this,b,null,d,null),c.Ic(wd,"elements",this,null,b,null,a)))};y.prototype.remove=y.prototype.remove=function(a){t.l(a,Q,y,"remove:element");for(var b=this.xa,c=b.count,d=-1,f=0;f<c;f++)if(b.n[f]===a){d=f;break}-1!==d&&this.Xe(d)};
y.prototype.removeAt=y.prototype.qd=function(a){e&&t.q(a,y,"removeAt:idx");0<=a&&this.Xe(a)};y.prototype.Xe=function(a){var b=this.xa,c=b.wa(a);c.nm=null;c.xl(null);if(null!==this.gg){var d=c.data;"object"===typeof d&&this.gg.remove(d)}b.qd(a);rk(this,!1);this.ha();b=this.S;null!==b&&(b.Fj=null,b.Cj=NaN,d=this.h,null!==d&&d.la.vb||b.Ic(xd,"elements",this,c,null,a,null))};t.A(y,{Mt:"rowCount"},function(){return void 0===this.kd?0:this.kd.length});
y.prototype.getRowDefinition=y.prototype.wd=function(a){if(void 0===this.kd)return null;e&&t.q(a,y,"getRowDefinition:idx");0>a&&t.ka(a,">= 0",y,"getRowDefinition:idx");a=Math.round(a);var b=this.kd;if(void 0===b[a]){var c=new Ae;c.xl(this);c.Xl=!0;c.Vc=a;b[a]=c}return b[a]};
y.prototype.removeRowDefinition=y.prototype.QF=function(a){if(void 0!==this.kd){e&&t.q(a,y,"removeRowDefinition:idx");0>a&&t.ka(a,">= 0",y,"removeRowDefinition:idx");a=Math.round(a);var b=this.kd;this.Ic(xd,"coldefs",this,b[a],null,a,null);b[a]&&(b[a]=void 0);this.ha()}};t.A(y,{Vs:"columnCount"},function(){return void 0===this.dd?0:this.dd.length});
y.prototype.getColumnDefinition=y.prototype.vd=function(a){if(void 0===this.dd)return null;e&&t.q(a,y,"getColumnDefinition:idx");0>a&&t.ka(a,">= 0",y,"getColumnDefinition:idx");a=Math.round(a);var b=this.dd;if(void 0===b[a]){var c=new Ae;c.xl(this);c.Xl=!1;c.Vc=a;b[a]=c}return b[a]};
y.prototype.removeColumnDefinition=y.prototype.NF=function(a){if(void 0!==this.dd){e&&t.q(a,y,"removeColumnDefinition:idx");0>a&&t.ka(a,">= 0",y,"removeColumnDefinition:idx");a=Math.round(a);var b=this.dd;this.Ic(xd,"coldefs",this,b[a],null,a,null);b[a]&&(b[a]=void 0);this.ha()}};t.g(y,"rowSizing",y.prototype.dG);
t.defineProperty(y,{dG:"rowSizing"},function(){return void 0===this.sm?Jl:this.sm},function(a){if(void 0!==this.sm){var b=this.sm;b!==a&&(a!==Jl&&a!==Sl&&t.m("rowSizing must be RowColumnDefinition.ProportionalExtra or RowColumnDefinition.None"),this.sm=a,this.ha(),this.j("rowSizing",b,a))}});t.g(y,"columnSizing",y.prototype.YD);
t.defineProperty(y,{YD:"columnSizing"},function(){return void 0===this.Ll?Jl:this.Ll},function(a){if(void 0!==this.Ll){var b=this.Ll;b!==a&&(a!==Jl&&a!==Sl&&t.m("columnSizing must be RowColumnDefinition.ProportionalExtra or RowColumnDefinition.None"),this.Ll=a,this.ha(),this.j("columnSizing",b,a))}});t.g(y,"topIndex",y.prototype.bK);
t.defineProperty(y,{bK:"topIndex"},function(){return void 0===this.Pi?0:this.Pi},function(a){if(void 0!==this.Pi){var b=this.Pi;b!==a&&((!isFinite(a)||0>a)&&t.m("topIndex must be greater than zero and a real number. Was "+a),this.Pi=a,this.ha(),this.j("topIndex",b,a))}});t.g(y,"leftIndex",y.prototype.iJ);
t.defineProperty(y,{iJ:"leftIndex"},function(){return void 0===this.zi?0:this.zi},function(a){if(void 0!==this.zi){var b=this.zi;b!==a&&((!isFinite(a)||0>a)&&t.m("leftIndex must be greater than zero and a real number. Was "+a),this.zi=a,this.ha(),this.j("leftIndex",b,a))}});y.prototype.findRowForLocalY=function(a){if(0>a)return-1;if(this.type!==Nk)return NaN;for(var b=0,c=this.kd,d=c.length,f=this.Pi;f<d;f++){var g=c[f];if(void 0!==g&&(b+=g.total,a<b))return f}return-1};
y.prototype.findColumnForLocalX=function(a){if(0>a)return-1;if(this.type!==Nk)return NaN;for(var b=0,c=this.dd,d=c.length,f=this.zi;f<d;f++){var g=c[f];if(void 0!==g&&(b+=g.total,a<b))return f}return-1};t.g(y,"data",y.prototype.data);
t.defineProperty(y,{data:"data"},function(){return this.Ol},function(a){var b=this.Ol;if(b!==a){var c=this instanceof C&&!(this instanceof Je);c&&t.i(a,"object",y,"data");Le(this);this.Ol=a;var d=this.h;null!==d&&(c?this instanceof T?(null!==b&&d.Ak.remove(b),null!==a&&d.Ak.add(a,this)):(null!==b&&d.ri.remove(b),null!==a&&d.ri.add(a,this)):(c=this.ja,null!==c&&null!==c.gg&&(null!==b&&c.gg.remove(b),null!==a&&c.gg.add(a,this))));this.j("data",b,a);null!==d&&d.la.vb||null!==a&&this.Kb()}});
t.g(y,"itemIndex",y.prototype.hF);t.defineProperty(y,{hF:"itemIndex"},function(){return this.hr},function(a){var b=this.hr;b!==a&&(this.hr=a,this.j("itemIndex",b,a))});function Wk(a){a=a.Jl;return null!==a&&a.nb}
function Le(a){var b=a.Jl;if(null===b)null!==a.data&&t.m("Template cannot have .data be non-null: "+a),a.Jl=b=new B(De);else if(b.nb)return;var c=new B(Q);Vl(a,a,function(a,d){var f=d.Kc;if(null!==f){Qk(d,!1);for(var g=f.k;g.next();){f=g.value;f.mode===Fe&&Qk(d,!0);var h=f.Ut;if(null!==h){var q=a;""!==h&&(q=a.oe(h));null!==q&&(c.add(q),void 0===q.rs&&(q.rs=new B(De)),q.rs.add(f))}b.add(f)}}if(d instanceof y&&d.type===Nk){if(0<d.kd.length)for(g=d.kd,h=g.length,q=0;q<h;q++){var r=g[q];if(void 0!==r&&
null!==r.Kc)for(var s=r.Kc.k;s.next();)f=s.value,f.pg=r,f.xz=2,f.Qv=r.index,b.add(f)}if(0<d.dd.length)for(g=d.dd,h=g.length,q=0;q<h;q++)if(r=g[q],void 0!==r&&null!==r.Kc)for(s=r.Kc.k;s.next();)f=s.value,f.pg=r,f.xz=1,f.Qv=r.index,b.add(f)}});for(var d=c.k;d.next();){var f=d.value;if(void 0!==f.rs){Qk(f,!0);for(var g=f.rs.k;g.next();){var h=g.value;null===f.Kc&&(f.Kc=new B(De));f.Kc.add(h)}}delete f.rs}for(d=b.k;d.next();)f=d.value,g=f.pg,null!==g&&(f.pg=null,g===a?f.nn="":(g instanceof Ae&&(g=g.ja),
f.nn=""!==g.name?g.name:g.name="_"+t.od(g)));b.freeze();a instanceof C&&a.Ld()&&(ih(a,Infinity,Infinity),a.Lc())}
y.prototype.updateTargetBindings=y.prototype.Kb=function(a){var b=this.Jl;if(null!==b)for(void 0===a&&(a=""),b=b.k;b.next();){var c=b.value,d=c.eB;if(""===a||""===d||d===a)if(d=c.Wt,null!==c.bE||""!==d){var d=this.data,f=c.Ut;null!==f&&(d=this.oe(f));if(null===d)e&&t.trace("Binding error: missing GraphObject named "+f+" in "+this.toString());else{var f=this,g=c.nn;if(""!==g){if(f=this.oe(g),null===f)continue}else null!==c.pg&&(f=c.pg);g=c.xz;if(0!==g){if(!(f instanceof y))continue;1===g?f=f.vd(c.Qv):
2===g&&(f=f.wd(c.Qv))}void 0!==f&&c.PG(f,d)}}}};t.g(y,"itemArray",y.prototype.xA);t.defineProperty(y,{xA:"itemArray"},function(){return this.yi},function(a){var b=this.yi;if(b!==a){e&&null!==a&&!t.isArray(a)&&t.m("Panel.itemArray must be an Array-like object or null, not: "+a);var c=this.h;null!==c&&null!==b&&fj(c,this);this.yi=a;null!==c&&null!==a&&cj(c,this);this.j("itemArray",b,a);null!==c&&c.la.vb||this.QA()}});function Zl(a){return a.type===Tg||a.type===ci||a.type===wg}
y.prototype.rebuildItemElements=y.prototype.QA=function(){var a=0;for(Zl(this)&&(a=1);this.xa.length>a;)this.Xe(a);a=this.xA;if(null!==a)for(var b=t.ub(a),c=0;c<b;c++)uj(this,t.lb(a,c),c)};function uj(a,b,c){if(void 0!==b&&null!==b){var d=a.getCategoryForItemData(b,c),d=a.findTemplateForItemData(b,c,d);d instanceof y&&(Le(d),d=d.copy(),"object"===typeof b&&(null===a.gg&&(a.gg=new ia(Object,y)),a.gg.add(b,d)),a.type!==Tg&&a.type!==ci||c++,a.Jd(c,d),bm(d,c),vj(a,c),d.data=b)}}
function vj(a,b){for(var c=a.xa,d=b+1;d<c.length;){var f=c.wa(d);f instanceof y&&bm(f,d);d++}}function bm(a,b){a.type===zk?a.lc=b:a.type===Ak&&(a.column=b);a.hF=b}t.g(y,"itemTemplate",y.prototype.dJ);
t.defineProperty(y,{dJ:"itemTemplate"},function(){return null===this.hg?null:this.hg.za("")},function(a){if(null===this.hg){if(null===a)return;this.hg=new ia("string",y)}var b=this.hg.za("");b!==a&&(t.l(a,y,y,"itemTemplate"),a instanceof C&&t.m("itemTemplate must not be a Part: "+a),this.hg.add("",a),this.j("itemTemplate",b,a),a=this.h,null!==a&&a.la.vb||this.QA())});t.g(y,"itemTemplateMap",y.prototype.iF);
t.defineProperty(y,{iF:"itemTemplateMap"},function(){return this.hg},function(a){var b=this.hg;if(b!==a){t.l(a,ia,y,"itemTemplateMap");for(var c=a.k;c.next();){var d=c.value;d instanceof C&&t.m("Template in itemTemplateMap must not be a Part: "+d)}this.hg=a;this.j("itemTemplateMap",b,a);a=this.h;null!==a&&a.la.vb||this.QA()}});t.g(y,"itemCategoryProperty",y.prototype.cJ);
t.defineProperty(y,{cJ:"itemCategoryProperty"},function(){return this.eo},function(a){var b=this.eo;b!==a&&("string"!==typeof a&&"function"!==typeof a&&t.bc(a,"string or function",y,"itemCategoryProperty"),this.eo=a,this.j("itemCategoryProperty",b,a))});
y.prototype.getCategoryForItemData=function(a){if(null===a)return"";var b=this.eo;if("function"===typeof b)b=b(a);else if("string"===typeof b&&"object"===typeof a){if(""===b)return"";b=t.ib(a,b)}else return"";if(void 0===b)return"";if("string"===typeof b)return b;t.m("Panel.getCategoryForItemData found a non-string category for "+a+": "+b);return""};
y.prototype.findTemplateForItemData=function(a,b,c){a=this.iF;b=null;null!==a&&(b=a.za(c));null===b&&(t.UG||(t.UG=!0,t.trace('No item template Panel found for category "'+c+'" on '+this),t.trace("  Using default item template."),c=new y,a=new na,a.bind(new De("text","",yd)),c.add(a),t.mE=c),b=t.mE);return b instanceof y?b:null};t.g(y,"isAtomic",y.prototype.VI);
t.defineProperty(y,{VI:"isAtomic"},function(){return this.Vg},function(a){var b=this.Vg;b!==a&&(t.i(a,"boolean",y,"isAtomic"),this.Vg=a,this.j("isAtomic",b,a))});function Ae(){t.Ac(this);this.Ii=null;this.Xl=!0;this.Vc=0;this.Mf=NaN;this.hm=0;this.gm=Infinity;this.ue=xb;this.Ra=this.Lb=0;this.Kc=null;this.os=cm;this.Oh=gk;this.ls=this.Mj=null;this.ms=NaN;this.Mb=this.Kh=null;this.zq=!1}t.ga("RowColumnDefinition",Ae);
Ae.prototype.copy=function(){var a=new Ae;a.Xl=this.Xl;a.Vc=this.Vc;a.Mf=this.Mf;a.hm=this.hm;a.gm=this.gm;a.ue=this.ue;a.Lb=this.Lb;a.Ra=this.Ra;a.Oh=this.Oh;a.os=this.os;a.Mj=null===this.Mj?null:this.Mj.Z();a.ls=this.ls;a.ms=this.ms;a.Kh=null;this.Kh&&(a.Kh=this.Kh.slice(0));a.Mb=this.Mb;a.zq=this.zq;a.Kc=this.Kc;return a};
function jj(a,b){t.l(b,Ae,Ae,"copyFrom:pd");b.xf?a.height=b.height:a.width=b.width;a.di=b.di;a.zf=b.zf;a.alignment=b.alignment;a.St=b.St;a.Mj=null===b.Mj?null:b.Mj.Z();a.jn=b.jn;a.kn=b.kn;a.Kh=null;b.Kh&&(a.Kh=b.Kh.slice(0));a.background=b.background;a.tw=b.tw;a.Kc=b.Kc}Ae.prototype.toString=function(){return"RowColumnDefinition "+(this.xf?"(Row ":"(Column ")+this.index+") #"+t.od(this)};var cm;Ae.Default=cm=t.w(Ae,"Default",0);var Sl;Ae.None=Sl=t.w(Ae,"None",1);var Jl;
Ae.ProportionalExtra=Jl=t.w(Ae,"ProportionalExtra",2);Ae.prototype.xl=function(a){this.Ii=a};function Ql(a,b){a.Lb=isNaN(a.Mf)?Math.max(Math.min(a.gm,b),a.hm):Math.max(Math.min(a.gm,a.Mf),a.hm)}function Ul(a){var b=a.Ii,c=a.jn;null===c&&(c=a.xf?b.si:b.uh);var d=a.kn;isNaN(d)&&(d=a.xf?b.wh:b.vh);d=null!==c?d:0;0===a.index&&(d=0);c=a.ZA;null===c&&(c=b.sj);return d+(a.xf?c.top:c.left)}
function Nl(a){var b=a.Ii,c=a.jn;null===c&&(c=a.xf?b.si:b.uh);var d=a.kn;isNaN(d)&&(d=a.xf?b.wh:b.vh);d=null!==c?d:0;0===a.index&&(d=0);c=a.ZA;null===c&&(c=b.sj);return d+(a.xf?c.top+c.bottom:c.left+c.right)}
Ae.prototype.Xc=function(a,b,c,d,f){var g=this.Ii;if(null!==g){g.ha();for(var h=this.xf,k=g.xa,l=k.length,m=0;m<l;m++){var n=k.n[m];(h?n.lc:n.column)===this.index&&n.ha()}g.Ic(vd,a,this,b,c,d,f);if(null!==this.Kc&&(b=g.ep(),null!==b&&(b=b.data,null!==b)))for(c=this.Kc.k;c.next();)c.value.nB(this,b,a,null)}};t.A(Ae,{ja:"panel"},function(){return this.Ii});t.A(Ae,{xf:"isRow"},function(){return this.Xl});t.A(Ae,{index:"index"},function(){return this.Vc});t.g(Ae,"height",Ae.prototype.height);
t.defineProperty(Ae,{height:"height"},function(){return this.Mf},function(a){var b=this.Mf;b!==a&&(e&&t.i(a,"number",Ae,"height"),0>a&&t.ka(a,">= 0",Ae,"height"),this.Mf=a,Ql(this,this.Lb),this.Xc("height",b,a))});t.g(Ae,"width",Ae.prototype.width);t.defineProperty(Ae,{width:"width"},function(){return this.Mf},function(a){var b=this.Mf;b!==a&&(e&&t.i(a,"number",Ae,"width"),0>a&&t.ka(a,">= 0",Ae,"width"),this.Mf=a,Ql(this,this.Lb),this.Xc("width",b,a))});t.g(Ae,"minimum",Ae.prototype.di);
t.defineProperty(Ae,{di:"minimum"},function(){return this.hm},function(a){var b=this.hm;b!==a&&(e&&t.i(a,"number",Ae,"minimum"),(0>a||!isFinite(a))&&t.ka(a,">= 0",Ae,"minimum"),this.hm=a,Ql(this,this.Lb),this.Xc("minimum",b,a))});t.g(Ae,"maximum",Ae.prototype.zf);t.defineProperty(Ae,{zf:"maximum"},function(){return this.gm},function(a){var b=this.gm;b!==a&&(e&&t.i(a,"number",Ae,"maximum"),0>a&&t.ka(a,">= 0",Ae,"maximum"),this.gm=a,Ql(this,this.Lb),this.Xc("maximum",b,a))});t.g(Ae,"alignment",Ae.prototype.alignment);
t.defineProperty(Ae,{alignment:"alignment"},function(){return this.ue},function(a){var b=this.ue;b.M(a)||(e&&t.l(a,H,Ae,"alignment"),this.ue=a.Z(),this.Xc("alignment",b,a))});t.g(Ae,"stretch",Ae.prototype.fi);t.defineProperty(Ae,{fi:"stretch"},function(){return this.Oh},function(a){var b=this.Oh;b!==a&&(e&&t.Aa(a,Q,Ae,"stretch"),this.Oh=a,this.Xc("stretch",b,a))});t.g(Ae,"separatorPadding",Ae.prototype.ZA);
t.defineProperty(Ae,{ZA:"separatorPadding"},function(){return this.Mj},function(a){"number"===typeof a?a=new ab(a):null!==a&&e&&t.l(a,ab,Ae,"separatorPadding");var b=this.Mj;null!==a&&null!==b&&b.M(a)||(null!==a&&(a=a.Z()),this.Mj=a,this.Xc("separatorPadding",b,a))});t.g(Ae,"separatorStroke",Ae.prototype.jn);
t.defineProperty(Ae,{jn:"separatorStroke"},function(){return this.ls},function(a){var b=this.ls;b!==a&&(null===a||"string"===typeof a||a instanceof ea)&&(a instanceof ea&&a.freeze(),this.ls=a,this.ja&&this.ja.fa(),this.Xc("separatorStroke",b,a))});t.g(Ae,"separatorStrokeWidth",Ae.prototype.kn);t.defineProperty(Ae,{kn:"separatorStrokeWidth"},function(){return this.ms},function(a){var b=this.ms;b!==a&&(this.ms=a,this.ja&&this.ja.fa(),this.Xc("separatorStrokeWidth",b,a))});
t.g(Ae,"separatorDashArray",Ae.prototype.kG);
t.defineProperty(Ae,{kG:"separatorDashArray"},function(){return this.Kh},function(a){var b=this.Kh;if(b!==a){null===a||Array.isArray(a)||t.bc(a,"Array",Ae,"separatorDashArray:val");if(null!==a){for(var c=a.length,d=0,f=0;f<c;f++){var g=a[f];"number"===typeof g&&0<=g&&isFinite(g)||t.m("separatorDashArray:val "+g+" must be a positive number or zero.");d+=g}if(0===d){if(null===b)return;a=null}}this.Kh=a;null!==this.ja&&this.ja.fa();this.Xc("separatorDashArray",b,a)}});t.g(Ae,"background",Ae.prototype.background);
t.defineProperty(Ae,{background:"background"},function(){return this.Mb},function(a){var b=this.Mb;b!==a&&(null===a||"string"===typeof a||a instanceof ea)&&(a instanceof ea&&a.freeze(),this.Mb=a,this.ja&&this.ja.fa(),this.Xc("background",b,a))});t.g(Ae,"coversSeparators",Ae.prototype.tw);t.defineProperty(Ae,{tw:"coversSeparators"},function(){return this.zq},function(a){var b=this.zq;b!==a&&(t.i(a,"boolean",Ae,"coversSeparators"),this.zq=a,this.Xc("coversSeparators",b,a))});t.g(Ae,"sizing",Ae.prototype.St);
t.defineProperty(Ae,{St:"sizing"},function(){return this.os},function(a){var b=this.os;b!==a&&(e&&t.Aa(a,Ae,Ae,"sizing"),this.os=a,this.Xc("sizing",b,a))});function Rl(a){if(a.St===cm){var b=a.Ii;return a.xf?b.dG:b.YD}return a.St}t.A(Ae,{fc:"actual"},function(){return this.Lb});t.A(Ae,{total:"total"},function(){return this.Lb+Nl(this)});t.A(Ae,{position:"position"},function(){return this.Ra});
Ae.prototype.bind=Ae.prototype.bind=function(a){a.pg=this;var b=this.ja;null!==b&&(b=b.ep(),null!==b&&Wk(b)&&t.m("Cannot add a Binding to a RowColumnDefinition that is already frozen: "+a));null===this.Kc&&(this.Kc=new B(De));this.Kc.add(a)};
function V(){Q.call(this);this.Ta=null;this.Pn="None";this.ah=!1;this.Qq=gk;this.yk=null;this.Gb=this.Uc="black";this.bh=1;this.Co="butt";this.Do="miter";this.ym=10;this.xm=null;this.ld=0;this.Ni=this.Mi=xb;this.Kr=this.Jr=0;this.Vq=!1;this.ar=!0;this.Mr=null;this.Sn=this.Fo="None";this.Uq=1}t.ga("Shape",V);t.Ka(V,Q);
V.prototype.cloneProtected=function(a){Q.prototype.cloneProtected.call(this,a);a.Ta=this.Ta;a.Pn=this.Pn;a.ah=this.ah;a.Qq=this.Qq;a.yk=this.yk;a.Uc=this.Uc;a.Gb=this.Gb;a.bh=this.bh;a.Co=this.Co;a.Do=this.Do;a.ym=this.ym;a.xm=null;this.xm&&(a.xm=this.xm.slice(0));a.ld=this.ld;a.Mi=this.Mi.Z();a.Ni=this.Ni.Z();a.Jr=this.Jr;a.Kr=this.Kr;a.Vq=this.Vq;a.ar=this.ar;a.Mr=this.Mr;a.Fo=this.Fo;a.Sn=this.Sn;a.Uq=this.Uq};
V.prototype.toString=function(){return"Shape("+("None"!==this.Ab?this.Ab:"None"!==this.on?this.on:this.Hw)+")#"+t.od(this)};
function dm(a,b,c,d){var f=0.001,g=d.Ga,h=g.width,g=g.height,k,l,m,n=c.length;if(!(2>n)){k=c[0][0];l=c[0][1];for(var p,q,r,s,u=0,v=t.Db(),D=1;D<n;D++)p=c[D],f=p[0],m=p[1],p=f-k,k=m-l,0===p&&(p=0.001),q=k/p,s=Math.atan2(k,p),k=Math.sqrt(p*p+k*k),v.push([p,s,q,k]),u+=k,k=f,l=m;k=c[0][0];l=c[0][1];c=0;f=h;n=h/2;D=0===n?!1:!0;m=0;r=v[m];p=r[0];s=r[1];q=r[2];r=r[3];for(var A=0;0.1<=u;){0===A&&(D?(f=h,c++,f-=n,u-=n,D=!1):(f=h,c++),0===f&&(f=1));if(f>u){t.ya(v);return}f>r?(A=f-r,f=r):A=0;var G=Math.sqrt(f*
f/(1+q*q));0>p&&(G=-G);k+=G;l+=q*G;a.translate(k,l);a.rotate(s);a.translate(-(h/2),-(g/2));0===A&&d.fl(a,b);a.translate(h/2,g/2);a.rotate(-s);a.translate(-k,-l);u-=f;r-=f;if(0!==A){m++;if(m===v.length){t.ya(v);return}r=v[m];p=r[0];s=r[1];q=r[2];r=r[3];f=A}}t.ya(v)}}
V.prototype.fl=function(a,b){if(null!==this.Gb||null!==this.Uc){null!==this.Uc&&Dk(this,a,this.Uc,!0);null!==this.Gb&&Dk(this,a,this.Gb,!1);var c=this.bh;if(0===c){var d=this.S;d instanceof Je&&d.type===wg&&d.pc instanceof V&&(c=d.pc.fb)}a.lineWidth=c;a.lineJoin=this.Do;a.lineCap=this.Co;a.miterLimit=this.ym;var f=!1;this.S&&b.Sk.drawShadows&&(f=this.S.gj);var g=!0;null!==this.Gb&&null===this.Uc&&(g=!1);var d=!1,h=this.zx;if(null!==h){var k=d=!0;void 0!==a.setLineDash?(a.setLineDash(h),a.lineDashOffset=
this.ld):void 0!==a.webkitLineDash?(a.webkitLineDash=h,a.webkitLineDashOffset=this.ld):void 0!==a.mozDash?(a.mozDash=h,a.mozDashOffset=this.ld):k=!1}var l=this.Ta;if(null!==l){if(l.da===Dc)a.beginPath(),d&&!k?lk(a,l.oc,l.yc,l.jb,l.tb,h,this.ld):(a.moveTo(l.oc,l.yc),a.lineTo(l.jb,l.tb)),null!==this.Uc&&Ek(a,this.Uc,!0),0!==c&&null!==this.Gb&&Ek(a,this.Gb,!1);else if(l.da===Ec){var m=l.oc,n=l.yc,p=l.jb,l=l.tb,q=Math.min(m,p),r=Math.min(n,l),m=Math.abs(p-m),n=Math.abs(l-n);null!==this.Uc&&(this.Uc instanceof
ea&&this.Uc.type===Zd?(a.beginPath(),a.rect(q,r,m,n),Ek(a,this.Uc,!0)):a.fillRect(q,r,m,n));if(null!==this.Gb){if(g&&f){var s=[a.shadowOffsetX,a.shadowOffsetY,a.shadowBlur];a.shadowOffsetX=0;a.shadowOffsetY=0;a.shadowBlur=0}d&&!k?(k=[[q,r],[q+m,r],[q+m,r+n],[q,r+n],[q,r]],a.beginPath(),em(a,k,h,this.ld),Ek(a,this.Gb,!1)):0!==c&&(this.Gb instanceof ea&&this.Gb.type===Zd?(a.beginPath(),a.rect(q,r,m,n),Ek(a,this.Gb,!1)):a.strokeRect(q,r,m,n));g&&f&&(a.shadowOffsetX=s[0],a.shadowOffsetY=s[1],a.shadowBlur=
s[2])}}else if(l.da===Mc)m=l.oc,n=l.yc,p=l.jb,l=l.tb,q=Math.abs(p-m)/2,r=Math.abs(l-n)/2,m=Math.min(m,p)+q,n=Math.min(n,l)+r,a.beginPath(),a.moveTo(m,n-r),a.bezierCurveTo(m+F.va*q,n-r,m+q,n-F.va*r,m+q,n),a.bezierCurveTo(m+q,n+F.va*r,m+F.va*q,n+r,m,n+r),a.bezierCurveTo(m-F.va*q,n+r,m-q,n+F.va*r,m-q,n),a.bezierCurveTo(m-q,n-F.va*r,m-F.va*q,n-r,m,n-r),a.closePath(),null!==this.Uc&&Ek(a,this.Uc,!0),d&&!k&&(k=t.Db(),F.ze(m,n-r,m+F.va*q,n-r,m+q,n-F.va*r,m+q,n,0.5,k),F.ze(m+q,n,m+q,n+F.va*r,m+F.va*q,n+r,
m,n+r,0.5,k),F.ze(m,n+r,m-F.va*q,n+r,m-q,n+F.va*r,m-q,n,0.5,k),F.ze(m-q,n,m-q,n-F.va*r,m-F.va*q,n-r,m,n-r,0.5,k),a.beginPath(),em(a,k,h,this.ld),t.ya(k)),0!==c&&null!==this.Gb&&(g&&f&&(s=[a.shadowOffsetX,a.shadowOffsetY,a.shadowBlur],a.shadowOffsetX=0,a.shadowOffsetY=0,a.shadowBlur=0),Ek(a,this.Gb,!1),g&&f&&(a.shadowOffsetX=s[0],a.shadowOffsetY=s[1],a.shadowBlur=s[2]));else if(l.da===Ac){for(var q=l.Ck,r=q.length,u=0;u<r;u++){var v=q.n[u];a.beginPath();a.moveTo(v.qa,v.ra);for(var D=v.Ea.n,A=D.length,
G=null,K=0;K<A;K++){var N=D[K];switch(N.da){case bd:a.moveTo(N.D,N.F);break;case Oc:a.lineTo(N.D,N.F);break;case cd:a.bezierCurveTo(N.jd,N.ye,N.ng,N.og,N.jb,N.tb);break;case dd:a.quadraticCurveTo(N.jd,N.ye,N.jb,N.tb);break;case ed:if(N.radiusX===N.radiusY)G=Math.PI/180,a.arc(N.jd,N.ye,N.radiusX,N.mh*G,(N.mh+N.gi)*G,0>N.gi);else for(var G=gd(N,v),O=G.length,U=0;U<O;U++){var X=G[U];0===U&&a.lineTo(X.x1,X.y1);a.bezierCurveTo(X.x2,X.y2,X.ge,X.he,X.Vb,X.Wb)}break;case fd:G&&G.type===ed?(G=gd(G,v),G=G[G.length-
1]||null,null!==G&&(m=G.Vb,p=G.Wb)):(m=G?G.D:v.qa,p=G?G.F:v.ra);G=hd(N,v,m,p);O=G.length;for(U=0;U<O;U++)X=G[U],a.bezierCurveTo(X.x2,X.y2,X.ge,X.he,X.Vb,X.Wb);break;default:t.m("Segment not of valid type")}N.Gh&&a.closePath();G=N}f?v.bo?(!0===v.Wl&&null!==this.Uc?(Ek(a,this.Uc,!0),g=!0):g=!1,0!==c&&null!==this.Gb&&(g&&(s=[a.shadowOffsetX,a.shadowOffsetY,a.shadowBlur],a.shadowOffsetX=0,a.shadowOffsetY=0,a.shadowBlur=0),d&&!k||Ek(a,this.Gb,!1),g&&(a.shadowOffsetX=s[0],a.shadowOffsetY=s[1],a.shadowBlur=
s[2]))):(g&&(s=[a.shadowOffsetX,a.shadowOffsetY,a.shadowBlur],a.shadowOffsetX=0,a.shadowOffsetY=0,a.shadowBlur=0),!0===v.Wl&&null!==this.Uc&&Ek(a,this.Uc,!0),0!==c&&null!==this.Gb&&(d&&!k||Ek(a,this.Gb,!1)),g&&(a.shadowOffsetX=s[0],a.shadowOffsetY=s[1],a.shadowBlur=s[2])):(!0===v.Wl&&null!==this.Uc&&Ek(a,this.Uc,!0),0===c||null===this.Gb||d&&!k||Ek(a,this.Gb,!1))}if(d&&!k)for(c=g,s=l.Ck,g=s.length,k=0;k<g;k++){l=s.n[k];a.beginPath();m=t.Db();m.push([l.qa,l.ra]);p=l.qa;q=l.ra;r=p;u=q;v=l.Ea.n;D=v.length;
for(A=0;A<D;A++){K=v[A];switch(K.da){case bd:em(a,m,h,this.ld);m.length=0;m.push([K.D,K.F]);p=K.D;q=K.F;r=p;u=q;break;case Oc:m.push([K.D,K.F]);p=K.D;q=K.F;break;case cd:F.ze(p,q,K.jd,K.ye,K.ng,K.og,K.jb,K.tb,0.5,m);p=K.D;q=K.F;break;case dd:F.Jp(p,q,K.jd,K.ye,K.jb,K.tb,0.5,m);p=K.D;q=K.F;break;case ed:N=gd(K,l);G=N.length;for(O=0;O<G;O++)U=N[O],F.ze(p,q,U.x2,U.y2,U.ge,U.he,U.Vb,U.Wb,0.5,m),p=U.Vb,q=U.Wb;break;case fd:N=hd(K,l,p,q);G=N.length;for(O=0;O<G;O++)U=N[O],F.ze(p,q,U.x2,U.y2,U.ge,U.he,U.Vb,
U.Wb,0.5,m),p=U.Vb,q=U.Wb;break;default:t.m("Segment not of valid type")}K.Gh&&(m.push([r,u]),em(a,m,h,this.ld))}em(a,m,h,this.ld);t.ya(m);null!==this.Gb&&(c&&f&&(n=[a.shadowOffsetX,a.shadowOffsetY,a.shadowBlur],a.shadowOffsetX=0,a.shadowOffsetY=0,a.shadowBlur=0),Ek(a,this.Gb,!1),c&&f&&(a.shadowOffsetX=n[0],a.shadowOffsetY=n[1],a.shadowBlur=n[2]))}}d&&(void 0!==a.setLineDash?(a.setLineDash(t.ji),a.lineDashOffset=0):void 0!==a.webkitLineDash?(a.webkitLineDash=t.ji,a.webkitLineDashOffset=0):void 0!==
a.mozDash&&(a.mozDash=null,a.mozDashOffset=0));if(this.KA){d=this.KA;ih(d,Infinity,Infinity);h=d.Ga;d.Lc(0,0,h.width,h.height);a.save();h=this.nd.Bb.$a();a.beginPath();n=t.Db();n.push([h.qa,h.ra]);c=h.qa;f=h.ra;s=c;g=f;k=h.Ea.n;l=k.length;for(m=0;m<l;m++){p=k[m];switch(p.da){case bd:dm(a,b,n,d);n.length=0;n.push([p.D,p.F]);c=p.D;f=p.F;s=c;g=f;break;case Oc:n.push([p.D,p.F]);c=p.D;f=p.F;break;case cd:F.ze(c,f,p.jd,p.ye,p.ng,p.og,p.jb,p.tb,0.5,n);c=p.D;f=p.F;break;case dd:F.Jp(c,f,p.jd,p.ye,p.jb,p.tb,
0.5,n);c=p.D;f=p.F;break;case ed:q=gd(p,h);r=q.length;for(u=0;u<r;u++)v=q[u],F.ze(c,f,v.x2,v.y2,v.ge,v.he,v.Vb,v.Wb,0.5,n),c=v.Vb,f=v.Wb;break;case fd:q=hd(p,h,c,f);r=q.length;for(u=0;u<r;u++)v=q[u],F.ze(c,f,v.x2,v.y2,v.ge,v.he,v.Vb,v.Wb,0.5,n),c=v.Vb,f=v.Wb;break;default:t.m("Segment not of valid type")}p.Gh&&(n.push([s,g]),dm(a,b,n,d))}dm(a,b,n,d);t.ya(n);a.restore()}}}};
function em(a,b,c,d){var f=0.001,g=c.length,h,k,l,m=b.length;if(!(2>m))if(h=b[0][0],k=b[0][1],2===m)lk(a,h,k,b[1][0],b[1][1],c,d);else{a.moveTo(h,k);for(var n,p,q,r=0,s=t.Db(),u=1;u<m;u++)n=b[u],f=n[0],l=n[1],n=f-h,h=l-k,0===n&&(n=0.001),p=h/n,h=Math.sqrt(n*n+h*h),s.push([n,p,h]),r+=h,h=f,k=l;h=b[0][0];k=b[0][1];b=0;m=!0;f=c[b%g];u=0!==d;l=0;q=s[l];n=q[0];p=q[1];q=q[2];for(var v=0;0.1<=r;){0===v&&(f=c[b%g],b++,u&&(d%=f,f-=d,u=!1));f>r&&(f=r);f>q?(v=f-q,f=q):v=0;var D=Math.sqrt(f*f/(1+p*p));0>n&&(D=
-D);h+=D;k+=p*D;m?a.lineTo(h,k):a.moveTo(h,k);r-=f;q-=f;if(0!==v){l++;if(l===s.length){t.ya(s);return}q=s[l];n=q[0];p=q[1];q=q[2];f=v}else m=!m}t.ya(s)}}V.prototype.getDocumentPoint=V.prototype.pb=function(a,b){void 0===b&&(b=new w);a.Ge()&&t.m("getDocumentPoint:s Spot must be real: "+a.toString());var c=this.Pa,d=this.fb;b.p(a.x*(c.width+d)-d/2+c.x+a.offsetX,a.y*(c.height+d)-d/2+c.y+a.offsetY);this.me.Sa(b);return b};
V.prototype.Uj=function(a,b){var c=this.Ta;if(null===c||null===this.fill&&null===this.stroke)return!1;var d=c.Pb,f=this.fb/2;c.type!==Dc||b||(f+=2);var g=t.Gf();g.assign(d);g.Sf(f+2,f+2);if(!g.Fa(a))return t.hc(g),!1;d=f+1E-4;if(c.type===Dc){if(null===this.stroke)return!1;d=(c.D-c.qa)*(a.x-c.qa)+(c.F-c.ra)*(a.y-c.ra);if(0>(c.qa-c.D)*(a.x-c.D)+(c.ra-c.F)*(a.y-c.F)||0>d)return!1;t.hc(g);return F.Md(c.qa,c.ra,c.D,c.F,f,a.x,a.y)}if(c.type===Ec){var h=c.qa,k=c.ra,l=c.D,m=c.F,c=Math.min(h,l),n=Math.min(k,
m),h=Math.abs(l-h),k=Math.abs(m-k);g.x=c;g.y=n;g.width=h;g.height=k;if(null===this.fill){g.Sf(-d,-d);if(g.Fa(a))return t.hc(g),!1;g.Sf(d,d)}null!==this.stroke&&g.Sf(f,f);f=g.Fa(a);t.hc(g);return f}if(c.type===Mc){h=c.qa;k=c.ra;l=c.D;m=c.F;c=Math.min(h,l);n=Math.min(k,m);h=Math.abs(l-h);k=Math.abs(m-k);h/=2;k/=2;c=a.x-(c+h);n=a.y-(n+k);if(null===this.fill){h-=d;k-=d;if(0>=h||0>=k||1>=c*c/(h*h)+n*n/(k*k))return t.hc(g),!1;h+=d;k+=d}null!==this.stroke&&(h+=f,k+=f);t.hc(g);return 0>=h||0>=k?!1:1>=c*c/
(h*h)+n*n/(k*k)}if(c.type===Ac)return t.hc(g),null===this.fill?kd(c,a.x,a.y,f):c.Fa(a,f,1<this.fb,b);t.m("Unknown Geometry type");return!1};
V.prototype.ut=function(a,b,c,d){var f=this.Ca,g=this.bh;a=Math.max(a,0);b=Math.max(b,0);var h;if(this.ah)h=this.Ta.Pb;else{var k=this.Ab,l=F.MA[k];if(void 0===l){var m=F.bj[k];"string"===typeof m&&(m=F.bj[m]);"function"===typeof m?(l=m(null,100,100),F.MA[k]=l):t.m("Unsupported Figure:"+k)}h=l.Pb}var k=h.width,l=h.height,m=h.width,n=h.height;switch(qk(this)){case Vg:d=c=0;break;case Cc:m=Math.max(a-g,0);n=Math.max(b-g,0);break;case ik:m=Math.max(a-g,0);d=0;break;case hk:c=0,n=Math.max(b-g,0)}isFinite(f.width)&&
(m=f.width);isFinite(f.height)&&(n=f.height);f=this.He;h=this.Vf;c=Math.max(c,h.width)-g;d=Math.max(d,h.height)-g;m=Math.min(f.width,m);n=Math.min(f.height,n);m=isFinite(m)?Math.max(c,m):Math.max(k,c);n=isFinite(n)?Math.max(d,n):Math.max(l,d);c=Wg(this);switch(c){case Vg:break;case Cc:k=m;l=n;break;case Xg:c=Math.min(m/k,n/l);isFinite(c)||(c=1);k*=c;l*=c;break;default:t.m(c+" is not a valid geometryStretch.")}if(this.ah){h=this.nd;d=k;f=l;c=h.copy();h=h.Pb;d/=h.width;f/=h.height;isFinite(d)||(d=1);
isFinite(f)||(f=1);if(1!==d||1!==f)switch(c.type){case Dc:case Ec:case Mc:c.qa*=d;c.ra*=f;c.D*=d;c.F*=f;break;case Ac:h=c.Bb;for(var p=h.length,q=0;q<p;q++){var r=h.n[q];r.qa*=d;r.ra*=f;for(var r=r.Ea,s=r.length,u=0;u<s;u++){var v=r.n[u];switch(v.type){case Oc:case bd:v.D*=d;v.F*=f;break;case cd:v.Cb*=d;v.Sb*=f;v.re*=d;v.se*=f;v.D*=d;v.F*=f;break;case dd:v.Cb*=d;v.Sb*=f;v.D*=d;v.F*=f;break;case ed:v.Da*=d;v.Oa*=f;v.radiusX*=d;void 0!==v.radiusY&&(v.radiusY*=f);break;case fd:v.D*=d;v.F*=f;v.radiusX*=
d;v.radiusY*=f;break;default:t.m("Unknown Segment type: "+v.type)}}}}this.Ta=c}else if(null===this.Ta||this.Ta.$n!==a-g||this.Ta.Zn!==b-g)this.Ta=F.makeGeometry(this,k,l);h=this.Ta.Pb;Infinity===a||Infinity===b?nk(this,h.x-g/2,h.y-g/2,0===a&&0===k?0:h.width+g,0===b&&0===l?0:h.height+g):nk(this,-(g/2),-(g/2),m+g,n+g)};
function Tl(a,b,c){if(!1!==Qi(a)){a.Wc.Ma();var d=a.bh;if(0===d){var f=a.S;f instanceof Je&&f.type===wg&&f.pc instanceof V&&(d=f.pc.fb)}d*=a.xc;nk(a,-(d/2),-(d/2),b+d,c+d);b=a.Wc;c=a.He;d=a.Vf;b.width=Math.min(c.width,b.width);b.height=Math.min(c.height,b.height);b.width=Math.max(d.width,b.width);b.height=Math.max(d.height,b.height);a.Wc.freeze();a.Wc.N()||t.m("Non-real measuredBounds has been set. Object "+a+", measuredBounds: "+a.Wc.toString());rk(a,!1)}}
function Wg(a){var b=a.HE;return a.ah?b===gk?Cc:b:b===gk?F.MA[a.Ab].Hc:b}V.prototype.Tj=function(a,b,c,d){uk(this,a,b,c,d)};V.prototype.getNearestIntersectionPoint=V.prototype.ll=function(a,b,c){return this.kp(a.x,a.y,b.x,b.y,c)};
V.prototype.kp=function(a,b,c,d,f){var g=this.transform,h=1/(g.m11*g.m22-g.m12*g.m21),k=g.m22*h,l=-g.m12*h,m=-g.m21*h,n=g.m11*h,p=h*(g.m21*g.dy-g.m22*g.dx),q=h*(g.m12*g.dx-g.m11*g.dy),g=a*k+b*m+p,h=a*l+b*n+q,k=c*k+d*m+p,l=c*l+d*n+q,m=this.fb/2,p=this.Ta;null===p&&(ih(this,Infinity,Infinity),p=this.Ta);q=p.Pb;n=!1;if(p.type===Dc)if(1.5>=this.fb)n=F.ih(p.oc,p.yc,p.jb,p.tb,g,h,k,l,f);else{var r,s;p.oc===p.jb?(r=m,s=0):(b=(p.tb-p.yc)/(p.jb-p.oc),s=m/Math.sqrt(1+b*b),r=s*b);d=t.Db();b=new w;F.ih(p.oc+
r,p.yc+s,p.jb+r,p.tb+s,g,h,k,l,b)&&d.push(b);b=new w;F.ih(p.oc-r,p.yc-s,p.jb-r,p.tb-s,g,h,k,l,b)&&d.push(b);b=new w;F.ih(p.oc+r,p.yc+s,p.oc-r,p.yc-s,g,h,k,l,b)&&d.push(b);b=new w;F.ih(p.jb+r,p.tb+s,p.jb-r,p.tb-s,g,h,k,l,b)&&d.push(b);b=d.length;if(0===b)return t.ya(d),!1;n=!0;s=Infinity;for(r=0;r<b;r++){var k=d[r],u=(k.x-g)*(k.x-g)+(k.y-h)*(k.y-h);u<s&&(s=u,f.x=k.x,f.y=k.y)}t.ya(d)}else if(p.type===Ec)b=q.x-m,n=F.ll(b,q.y-m,q.x+q.width+m,q.y+q.height+m,g,h,k,l,f);else if(p.type===Mc)a:if(b=q.copy().Sf(m,
m),0===b.width)n=F.ih(b.x,b.y,b.x,b.y+b.height,g,h,k,l,f);else if(0===b.height)n=F.ih(b.x,b.y,b.x+b.width,b.y,g,h,k,l,f);else{a=b.width/2;var v=b.height/2;d=b.x+a;b=b.y+v;c=9999;g!==k&&(c=(h-l)/(g-k));if(9999>Math.abs(c)){n=h-b-c*(g-d);if(0>a*a*c*c+v*v-n*n){f.x=NaN;f.y=NaN;n=!1;break a}m=Math.sqrt(a*a*c*c+v*v-n*n);k=(-(a*a*c*n)+a*v*m)/(v*v+a*a*c*c)+d;a=(-(a*a*c*n)-a*v*m)/(v*v+a*a*c*c)+d;l=c*(k-d)+n+b;b=c*(a-d)+n+b;d=Math.abs((g-k)*(g-k))+Math.abs((h-l)*(h-l));h=Math.abs((g-a)*(g-a))+Math.abs((h-b)*
(h-b));d<h?(f.x=k,f.y=l):(f.x=a,f.y=b)}else{k=v*v;l=g-d;k-=k/(a*a)*l*l;if(0>k){f.x=NaN;f.y=NaN;n=!1;break a}m=Math.sqrt(k);l=b+m;b-=m;d=Math.abs(l-h);h=Math.abs(b-h);d<h?(f.x=g,f.y=l):(f.x=g,f.y=b)}n=!0}else if(p.type===Ac){var D,A,G,q=t.K();r=k-g;s=l-h;s=r*r+s*s;f.x=k;f.y=l;for(r=0;r<p.Bb.count;r++){var K=p.Bb.n[r],N=K.Ea;D=K.qa;A=K.ra;for(var O=D,U=A,X,Z,P=0;P<N.count;P++){X=N.n[P];Z=X.type;u=X.D;G=X.F;var pa=!1;switch(Z){case bd:O=u;U=G;break;case Oc:pa=fm(D,A,u,G,g,h,k,l,q);break;case cd:pa=X.Cb;
Z=X.Sb;var Ya=X.re,za=X.se,pa=F.Ps(D,A,pa,Z,Ya,za,u,G,g,h,k,l,0.5,q);break;case dd:pa=(D+2*X.Cb)/3;Z=(A+2*X.Sb)/3;Ya=(2*X.Cb+u)/3;za=(2*X.Cb+u)/3;pa=F.Ps(D,A,pa,Z,Ya,za,u,G,g,h,k,l,0.5,q);break;case ed:case fd:G=X.type===ed?gd(X,K):hd(X,K,D,A);Z=G.length;for(Ya=0;Ya<Z;Ya++)v=G[Ya],0===Ya&&fm(D,A,v.x1,v.y1,g,h,k,l,q)&&(u=gm(g,h,q,s,f),u<s&&(s=u,n=!0)),F.Ps(v.x1,v.y1,v.x2,v.y2,v.ge,v.he,v.Vb,v.Wb,g,h,k,l,0.5,q)&&(u=gm(g,h,q,s,f),u<s&&(s=u,n=!0));u=v.Vb;G=v.Wb;break;default:t.m("Unknown Segment type: "+
X.type)}D=u;A=G;pa&&(u=gm(g,h,q,s,f),u<s&&(s=u,n=!0));X.ot&&(u=O,G=U,fm(D,A,u,G,g,h,k,l,q)&&(u=gm(g,h,q,s,f),u<s&&(s=u,n=!0)))}}g=c-a;h=d-b;b=Math.sqrt(g*g+h*h);0!==b&&(g/=b,h/=b);f.x-=g*m;f.y-=h*m;t.B(q)}else t.m("Invalid Geometry type");if(!n)return!1;this.transform.Sa(f);return!0};function gm(a,b,c,d,f){a=c.x-a;b=c.y-b;b=a*a+b*b;return b<d?(f.x=c.x,f.y=c.y,b):d}
function fm(a,b,c,d,f,g,h,k,l){var m=!1,n=(f-h)*(b-d)-(g-k)*(a-c);if(0===n)return!1;l.x=((f*k-g*h)*(a-c)-(f-h)*(a*d-b*c))/n;l.y=((f*k-g*h)*(b-d)-(g-k)*(a*d-b*c))/n;(a>c?a-c:c-a)<(b>d?b-d:d-b)?(f=b<d?b:d,a=b<d?d:b,(l.y>f||F.mb(l.y,f))&&(l.y<a||F.mb(l.y,a))&&(m=!0)):(f=a<c?a:c,a=a<c?c:a,(l.x>f||F.mb(l.x,f))&&(l.x<a||F.mb(l.x,a))&&(m=!0));return m}
V.prototype.containedInRect=V.prototype.Km=function(a,b){if(void 0===b)return a.Vj(this.oa);var c=this.Ta;null===c&&(ih(this,Infinity,Infinity),c=this.Ta);var c=c.Pb,d=this.fb/2,f=!1,g=t.K();g.p(c.x-d,c.y-d);a.Fa(b.Sa(g))&&(g.p(c.x-d,c.bottom+d),a.Fa(b.Sa(g))&&(g.p(c.right+d,c.bottom+d),a.Fa(b.Sa(g))&&(g.p(c.right+d,c.y-d),a.Fa(b.Sa(g))&&(f=!0))));t.B(g);return f};
V.prototype.intersectsRect=V.prototype.Tf=function(a,b){if(this.Km(a,b)||void 0===b&&(b=this.transform,a.Vj(this.oa)))return!0;var c=t.oh();c.set(b);c.nA();var d=a.left,f=a.right,g=a.top,h=a.bottom,k=t.K();k.p(d,g);c.Sa(k);if(this.Uj(k,!0))return t.B(k),!0;k.p(f,g);c.Sa(k);if(this.Uj(k,!0))return t.B(k),!0;k.p(d,h);c.Sa(k);if(this.Uj(k,!0))return t.B(k),!0;k.p(f,h);c.Sa(k);if(this.Uj(k,!0))return t.B(k),!0;var l=t.K(),m=t.K();c.set(b);c.DF(this.transform);c.nA();l.x=f;l.y=g;l.transform(c);k.x=d;k.y=
g;k.transform(c);var n=!1;hm(this,k,l,m)?n=!0:(k.x=f,k.y=h,k.transform(c),hm(this,k,l,m)?n=!0:(l.x=d,l.y=h,l.transform(c),hm(this,k,l,m)?n=!0:(k.x=d,k.y=g,k.transform(c),hm(this,k,l,m)&&(n=!0))));t.B(k);t.We(c);t.B(l);t.B(m);return n};function hm(a,b,c,d){if(!a.ll(b,c,d))return!1;a=b.x;b=b.y;var f=c.x,g=c.y;c=d.x;d=d.y;if(a===f){var h;b<g?(h=b,a=g):(h=g,a=b);return d>=h&&d<=a}a<f?(h=a,a=f):h=f;return c>=h&&c<=a}
V.prototype.AE=function(a,b,c){function d(a,b){for(var c=a.length,d=0;d<c;d++){var g=a[d];if(b.Zs(g[0],g[1])>f)return!0}return!1}if(c&&null!==this.fill&&this.Uj(a,!0))return!0;var f=a.Zj(b);b=f;1.5<this.fb&&(f=this.fb/2+Math.sqrt(f),f*=f);var g=this.Ta;null===g&&(ih(this,Infinity,Infinity),g=this.Ta);if(!c){var h=g.Pb,k=h.x,l=h.y,m=h.x+h.width,h=h.y+h.height;if(Sa(a.x,a.y,k,l)<=f&&Sa(a.x,a.y,m,l)<=f&&Sa(a.x,a.y,k,h)<=f&&Sa(a.x,a.y,m,h)<=f)return!0}k=g.oc;l=g.yc;m=g.jb;h=g.tb;if(g.type===Dc){if(c=
Ra(a.x,a.y,k,l,m,h),g=(k-m)*(a.x-m)+(l-h)*(a.y-h),c<=(0<=(m-k)*(a.x-k)+(h-l)*(a.y-l)&&0<=g?f:b))return!0}else{if(g.type===Ec)return b=!1,c&&(b=Ra(a.x,a.y,k,l,k,h)<=f||Ra(a.x,a.y,k,l,m,l)<=f||Ra(a.x,a.y,m,l,m,h)<=f||Ra(a.x,a.y,k,h,m,h)<=f),b;if(g.type===Mc){b=a.x-(k+m)/2;var g=a.y-(l+h)/2,n=Math.abs(m-k)/2,p=Math.abs(h-l)/2;if(0===n||0===p)return c=Ra(a.x,a.y,k,l,m,h),c<=f?!0:!1;if(c){if(a=F.yI(n,p,b,g),a*a<=f)return!0}else return Sa(b,g,-n,0)>=f||Sa(b,g,0,-p)>=f||Sa(b,g,0,p)>=f||Sa(b,g,n,0)>=f?!1:
!0}else if(g.type===Ac){h=g.Pb;k=h.x;l=h.y;m=h.x+h.width;h=h.y+h.height;if(a.x>m&&a.x<k&&a.y>h&&a.y<l&&Ra(a.x,a.y,k,l,k,h)>f&&Ra(a.x,a.y,k,l,m,l)>f&&Ra(a.x,a.y,m,h,k,h)>f&&Ra(a.x,a.y,m,h,m,l)>f)return!1;b=Math.sqrt(f);if(c){if(null===this.fill?kd(g,a.x,a.y,b):g.Fa(a,b,!0))return!0}else{c=g.Bb;for(b=0;b<c.count;b++){k=c.n[b];n=k.qa;p=k.ra;if(a.Zs(n,p)>f)return!1;l=k.Ea.n;m=l.length;for(h=0;h<m;h++){var q=l[h];switch(q.type){case bd:case Oc:n=q.D;p=q.F;if(a.Zs(n,p)>f)return!1;break;case cd:g=t.Db();
F.ze(n,p,q.Cb,q.Sb,q.re,q.se,q.D,q.F,0.8,g);n=d(g,a);t.ya(g);if(n)return!1;n=q.D;p=q.F;if(a.Zs(n,p)>f)return!1;break;case dd:g=t.Db();F.Jp(n,p,q.Cb,q.Sb,q.D,q.F,0.8,g);n=d(g,a);t.ya(g);if(n)return!1;n=q.D;p=q.F;if(a.Zs(n,p)>f)return!1;break;case ed:case fd:var q=q.type===ed?gd(q,k):hd(q,k,n,p),r=q.length,s=null,g=t.Db();for(b=0;b<r;b++)if(s=q[b],g.length=0,F.ze(s.x1,s.y1,s.x2,s.y2,s.ge,s.he,s.Vb,s.Wb,0.8,g),d(g,a))return t.ya(g),!1;t.ya(g);null!==s&&(n=s.Vb,p=s.Wb);break;default:t.m("Unknown Segment type: "+
q.type)}}}return!0}}}return!1};t.g(V,"geometry",V.prototype.nd);t.defineProperty(V,{nd:"geometry"},function(){return this.yk?this.yk:this.Ta},function(a){var b=this.Ta;if(b!==a){null!==a?(e&&t.l(a,zc,V,"geometry"),this.yk=this.Ta=a.freeze()):this.yk=this.Ta=null;var c=this.S;c&&(c.Cj=NaN);this.ah=!0;this.ha();this.j("geometry",b,a)}});t.g(V,"geometryString",V.prototype.IE);
t.defineProperty(V,{IE:"geometryString"},function(){return this.nd.toString()},function(a){var b=Rc(a);a=b.normalize();this.nd=b;var b=t.K(),c=this.position;c.N()?b.p(c.x-a.x,c.y-a.y):b.p(-a.x,-a.y);this.position=b;t.B(b)});t.defineProperty(V,{rA:"isGeometryPositioned"},function(){return this.Vq},function(a){e&&t.i(a,"boolean",V,"isGeometryPositioned");var b=this.Vq;b!==a&&(this.Vq=a,this.ha(),this.j("isGeometryPositioned",b,a))});V.prototype.Ye=function(){this.ah?this.yk=null:this.Ta=null;this.ha()};
t.g(V,"fill",V.prototype.fill);t.defineProperty(V,{fill:"fill"},function(){return this.Uc},function(a){var b=this.Uc;b!==a&&(e&&null!==a&&t.To(a,"Shape.fill"),a instanceof ea&&a.freeze(),this.Uc=a,this.fa(),this.j("fill",b,a))});t.g(V,"stroke",V.prototype.stroke);t.defineProperty(V,{stroke:"stroke"},function(){return this.Gb},function(a){var b=this.Gb;b!==a&&(e&&null!==a&&t.To(a,"Shape.stroke"),a instanceof ea&&a.freeze(),this.Gb=a,this.fa(),this.j("stroke",b,a))});t.g(V,"strokeWidth",V.prototype.fb);
t.defineProperty(V,{fb:"strokeWidth"},function(){return this.bh},function(a){var b=this.bh;if(b!==a)if(e&&t.q(a,V,"strokeWidth"),0<=a){this.bh=a;this.ha();var c=this.S;c&&(c.Cj=NaN);this.j("strokeWidth",b,a)}else t.ka(a,"val >= 0",V,"strokeWidth:val")});t.g(V,"strokeCap",V.prototype.wG);
t.defineProperty(V,{wG:"strokeCap"},function(){return this.Co},function(a){var b=this.Co;b!==a&&("string"!==typeof a||"butt"!==a&&"round"!==a&&"square"!==a?t.ka(a,'"butt", "round", or "square"',V,"strokeCap"):(this.Co=a,this.fa(),this.j("strokeCap",b,a)))});t.g(V,"strokeJoin",V.prototype.WJ);
t.defineProperty(V,{WJ:"strokeJoin"},function(){return this.Do},function(a){var b=this.Do;b!==a&&("string"!==typeof a||"miter"!==a&&"bevel"!==a&&"round"!==a?t.ka(a,'"miter", "bevel", or "round"',V,"strokeJoin"):(this.Do=a,this.fa(),this.j("strokeJoin",b,a)))});t.g(V,"strokeMiterLimit",V.prototype.XJ);
t.defineProperty(V,{XJ:"strokeMiterLimit"},function(){return this.ym},function(a){var b=this.ym;if(b!==a)if(e&&t.q(a,V,"strokeMiterLimit"),0<a){this.ym=a;this.fa();var c=this.S;c&&(c.Cj=NaN);this.j("strokeMiterLimit",b,a)}else t.ka(a,"val > 0",V,"strokeWidth:val")});t.g(V,"strokeDashArray",V.prototype.zx);
t.defineProperty(V,{zx:"strokeDashArray"},function(){return this.xm},function(a){var b=this.xm;if(b!==a){null===a||Array.isArray(a)||t.bc(a,"Array",V,"strokeDashArray:val");if(null!==a){for(var c=a.length,d=0,f=0;f<c;f++){var g=a[f];"number"===typeof g&&0<=g&&isFinite(g)||t.m("strokeDashArray:val "+g+" must be a positive number or zero.");d+=g}if(0===d){if(null===b)return;a=null}}this.xm=a;this.fa();this.j("strokeDashArray",b,a)}});t.g(V,"strokeDashOffset",V.prototype.xG);
t.defineProperty(V,{xG:"strokeDashOffset"},function(){return this.ld},function(a){var b=this.ld;b!==a&&(e&&t.q(a,V,"strokeDashOffset"),0<=a&&(this.ld=a,this.fa(),this.j("strokeDashOffset",b,a)))});t.g(V,"figure",V.prototype.Ab);
t.defineProperty(V,{Ab:"figure"},function(){return this.Pn},function(a){var b=this.Pn;if(b!==a){e&&t.i(a,"string",V,"figure");var c=F.bj[a];"function"===typeof c?c=a:(c=F.bj[a.toLowerCase()])||t.m("Unknown Shape.figure: "+a);if(b!==c){if(a=this.S)a.Cj=NaN;this.Pn=c;this.ah=!1;this.Ye();this.j("figure",b,c)}}});t.g(V,"toArrow",V.prototype.on);
t.defineProperty(V,{on:"toArrow"},function(){return this.Fo},function(a){var b=this.Fo;!0===a?a="Standard":!1===a&&(a="");if(b!==a){e&&t.i(a,"string",V,"toArrow");var c=F.RD(a);null===c?t.m("Unknown Shape.toArrow: "+a):b!==c&&(this.Fo=c,this.ah=!1,this.Ye(),im(this),this.j("toArrow",b,c))}});t.g(V,"fromArrow",V.prototype.Hw);
t.defineProperty(V,{Hw:"fromArrow"},function(){return this.Sn},function(a){var b=this.Sn;!0===a?a="Standard":!1===a&&(a="");if(b!==a){e&&t.i(a,"string",V,"fromArrow");var c=F.RD(a);null===c?t.m("Unknown Shape.fromArrow: "+a):b!==c&&(this.Sn=c,this.ah=!1,this.Ye(),im(this),this.j("fromArrow",b,c))}});function im(a){var b=a.h;null!==b&&b.la.vb||(a.Ot=jm,"None"!==a.Fo?(a.Cf=-1,a.Qj=Wb):"None"!==a.Sn&&(a.Cf=0,a.Qj=new H(1-Wb.x,Wb.y)))}
t.defineProperty(V,{G:"spot1"},function(){return this.Mi},function(a){t.l(a,H,V,"spot1");var b=this.Mi;b.M(a)||(this.Mi=a=a.Z(),this.ha(),this.j("spot1",b,a))});t.defineProperty(V,{H:"spot2"},function(){return this.Ni},function(a){t.l(a,H,V,"spot2");var b=this.Ni;b.M(a)||(this.Ni=a=a.Z(),this.ha(),this.j("spot2",b,a))});t.defineProperty(V,{Gc:"parameter1"},function(){return this.Jr},function(a){var b=this.Jr;b!==a&&(this.Jr=a,this.ha(),this.j("parameter1",b,a))});
t.defineProperty(V,{Ft:"parameter2"},function(){return this.Kr},function(a){var b=this.Kr;b!==a&&(this.Kr=a,this.ha(),this.j("parameter2",b,a))});t.A(V,{Pa:"naturalBounds"},function(){if(null!==this.Ta)return this.hd.assign(this.Ta.Pb),this.hd;var a=this.Ca;return new x(0,0,a.width,a.height)});t.g(V,"isRectangular",V.prototype.ZI);
t.defineProperty(V,{ZI:"isRectangular"},function(){return this.ar},function(a){var b=this.ar;b!==a&&(e&&t.i(a,"boolean",V,"isRectangular"),this.ar=a,this.ha(),this.j("isRectangular",b,a))});t.g(V,"pathObject",V.prototype.KA);t.defineProperty(V,{KA:"pathObject"},function(){return this.Mr},function(a){var b=this.Mr;b!==a&&(e&&t.l(a,Q,V,"pathObject"),this.Mr=a,this.fa(),this.j("pathObject",b,a))});t.g(V,"geometryStretch",V.prototype.HE);
t.defineProperty(V,{HE:"geometryStretch"},function(){return this.Qq},function(a){var b=this.Qq;b!==a&&(t.Aa(a,Q,V,"geometryStretch"),this.Qq=a,this.j("geometryStretch",b,a))});t.g(V,"interval",V.prototype.interval);t.defineProperty(V,{interval:"interval"},function(){return this.Uq},function(a){var b=this.Uq;e&&t.q(a,V,"interval");a=Math.floor(a);b!==a&&0<=a&&(this.Uq=a,this.h&&Li(this.h),this.ha(),this.j("interval",b,a))});
V.defineFigureGenerator=function(a,b){t.i(a,"string",V,"defineFigureGenerator:name");t.i(b,"function",V,"defineFigureGenerator:func");var c=a.toLowerCase();""!==a&&"none"!==c&&a!==c||t.m("Shape.defineFigureGenerator name must not be empty or None or all-lower-case: "+a);var d=V.FigureGenerators;d[a]=b;d[c]=a};
V.defineArrowheadGeometry=function(a,b){t.i(a,"string",V,"defineArrowheadGeometry:name");t.i(b,"string",V,"defineArrowheadGeometry:pathstr");var c=a.toLowerCase();""!==a&&"none"!==c&&a!==c||t.m("Shape.defineArrowheadGeometry name must not be empty or None or all-lower-case: "+a);var d=V.ArrowheadGeometries;d[a]=b;d[c]=a};
function na(){Q.call(this);this.le="";this.Gb="black";this.Tg="13px sans-serif";this.Td="start";this.Yq=!0;this.Yl=this.Zl=!1;this.Qk=km;this.zm=lm;this.dv=this.mf=0;this.Rn=this.ez=this.fz=null;this.no={};this.Kq=!1;this.kf=this.Tk=this.xs=null;this.Pj=this.Oj=0;this.Ai=Infinity}t.ga("TextBlock",na);t.Ka(na,Q);na.getEllipsis=function(){return t.$s};na.setEllipsis=function(a){t.$s=a;t.Gw={};t.fA=0};
na.prototype.cloneProtected=function(a){Q.prototype.cloneProtected.call(this,a);a.le=this.le;a.Gb=this.Gb;a.Tg=this.Tg;a.Td=this.Td;a.Yq=this.Yq;a.Zl=this.Zl;a.Yl=this.Yl;a.zm=this.zm;a.Qk=this.Qk;a.mf=this.mf;a.dv=this.dv;a.fz=this.fz;a.ez=this.ez;a.Rn=this.Rn;a.no=this.no;a.Kq=this.Kq;a.xs=this.xs;a.Tk=this.Tk;a.kf=this.kf;a.Oj=this.Oj;a.Pj=this.Pj;a.Ai=this.Ai};na.prototype.toString=function(){return 22<this.le.length?'TextBlock("'+this.le.substring(0,20)+'"...)':'TextBlock("'+this.le+'")'};var mm;
na.None=mm=t.w(na,"None",0);var nm;na.WrapFit=nm=t.w(na,"WrapFit",1);var lm;na.WrapDesiredSize=lm=t.w(na,"WrapDesiredSize",2);var km;na.OverflowClip=km=t.w(na,"OverflowClip",0);var om;na.OverflowEllipsis=om=t.w(na,"OverflowEllipsis",1);na.prototype.ha=function(){Q.prototype.ha.call(this);this.ez=this.fz=null};t.g(na,"font",na.prototype.font);
t.defineProperty(na,{font:"font"},function(){return this.Tg},function(a){var b=this.Tg;b!==a&&(e&&t.i(a,"string",na,"font"),this.Tg=a,this.Rn=null,this.ha(),this.j("font",b,a))});t.g(na,"text",na.prototype.text);t.defineProperty(na,{text:"text"},function(){return this.le},function(a){var b=this.le;a=null!==a&&void 0!==a?a.toString():"";b!==a&&(this.le=a,this.ha(),this.j("text",b,a))});t.g(na,"textAlign",na.prototype.textAlign);
t.defineProperty(na,{textAlign:"textAlign"},function(){return this.Td},function(a){var b=this.Td;b!==a&&(e&&t.i(a,"string",na,"textAlign"),"start"===a||"end"===a||"left"===a||"right"===a||"center"===a?(this.Td=a,this.fa(),this.j("textAlign",b,a)):t.ka(a,'"start", "end", "left", "right", or "center"',na,"textAlign"))});
t.A(na,{Pa:"naturalBounds"},function(){if(!this.hd.N()){var a=pm(this,this.le,{},999999).width,b=qm(this,a,{}),c=this.Ca;isNaN(c.width)||(a=c.width);isNaN(c.height)||(b=c.height);Va(this.hd,a,b)}return this.hd});t.g(na,"isMultiline",na.prototype.Tw);t.defineProperty(na,{Tw:"isMultiline"},function(){return this.Yq},function(a){var b=this.Yq;b!==a&&(e&&t.i(a,"boolean",na,"isMultiline"),this.Yq=a,this.ha(),this.j("isMultiline",b,a))});t.g(na,"isUnderline",na.prototype.bJ);
t.defineProperty(na,{bJ:"isUnderline"},function(){return this.Zl},function(a){var b=this.Zl;b!==a&&(e&&t.i(a,"boolean",na,"isUnderline"),this.Zl=a,this.fa(),this.j("isUnderline",b,a))});t.g(na,"isStrikethrough",na.prototype.$I);t.defineProperty(na,{$I:"isStrikethrough"},function(){return this.Yl},function(a){var b=this.Yl;b!==a&&(e&&t.i(a,"boolean",na,"isStrikethrough"),this.Yl=a,this.fa(),this.j("isStrikethrough",b,a))});t.g(na,"wrap",na.prototype.pB);
t.defineProperty(na,{pB:"wrap"},function(){return this.zm},function(a){var b=this.zm;b!==a&&(e&&t.Aa(a,na,na,"wrap"),this.zm=a,this.ha(),this.j("wrap",b,a))});t.g(na,"overflow",na.prototype.overflow);t.defineProperty(na,{overflow:"overflow"},function(){return this.Qk},function(a){var b=this.Qk;b!==a&&(e&&t.Aa(a,na,na,"overflow"),this.Qk=a,this.ha(),this.j("overflow",b,a))});t.g(na,"stroke",na.prototype.stroke);
t.defineProperty(na,{stroke:"stroke"},function(){return this.Gb},function(a){var b=this.Gb;b!==a&&(e&&null!==a&&t.To(a,"TextBlock.stroke"),a instanceof ea&&a.freeze(),this.Gb=a,this.fa(),this.j("stroke",b,a))});t.A(na,{nF:"lineCount"},function(){return this.mf});t.g(na,"editable",na.prototype.yw);t.defineProperty(na,{yw:"editable"},function(){return this.Kq},function(a){var b=this.Kq;b!==a&&(e&&t.i(a,"boolean",na,"editable"),this.Kq=a,this.j("editable",b,a))});t.g(na,"textEditor",na.prototype.hB);
t.defineProperty(na,{hB:"textEditor"},function(){return this.xs},function(a){var b=this.xs;b!==a&&(a instanceof HTMLElement||t.m("textEditor must be an HTMLElement"),this.xs=a,this.j("textEditor",b,a))});t.g(na,"errorFunction",na.prototype.at);t.defineProperty(na,{at:"errorFunction"},function(){return this.kf},function(a){var b=this.kf;b!==a&&(null!==a&&t.i(a,"function",na,"errorFunction"),this.kf=a,this.j("errorFunction",b,a))});function Ck(a,b){var c=a.Tg;null!==c&&b.du!==c&&(b.font=c,b.du=c)}
na.prototype.fl=function(a,b){if(null!==this.Gb&&0!==this.le.length&&null!==this.Tg){var c=this.Pa.width,d=Ah(this);a.textAlign=this.Td;Dk(this,a,this.Gb,!0);(this.Zl||this.Yl)&&Dk(this,a,this.Gb,!1);var f=this.no,g=0,h=!1,k=t.mc(0,0);this.me.Sa(k);var l=t.mc(0,d);this.me.Sa(l);var m=k.Zj(l);t.B(k);t.B(l);k=b.scale;8>m*k*k&&(h=!0);b.Sg!==a&&(h=!1);for(var m=this.Oj,k=this.Pj,l=f.ug.length,n=0;n<l;n++){var p=f.ug[n],q=f.Of[n];p>c&&(p=c);var g=g+m,r=q,q=a,s=g,u=c,v=d,D=0;h?("start"===this.Td||"left"===
this.Td?D=0:"end"===this.Td||"right"===this.Td?D=u-p:"center"===this.Td?D=(u-p)/2:t.m("textAlign must be start, end, left, right, or center"),q.fillRect(0+D,s+0.25*v,p,1)):("start"===this.Td||"left"===this.Td?D=0:"end"===this.Td||"right"===this.Td?D=u:"center"===this.Td?D=u/2:t.m("textAlign must be start, end, left, right, or center"),q.fillText(r,0+D,s+v-0.25*v),r=v/20|0,this.Zl&&("end"===this.Td||"right"===this.Td?D-=p:"center"===this.Td&&(D-=p/2),q.beginPath(),q.lineWidth=r,q.moveTo(0+D,s+v-0.2*
v),q.lineTo(0+D+p,s+v-0.2*v),q.stroke()),this.Yl&&(q.beginPath(),q.lineWidth=r,s=s+v-v/2.2|0,0!==r%2&&(s+=0.5),q.moveTo(0,s),q.lineTo(0+p,s),q.stroke()));g+=d+k}}};
na.prototype.ut=function(a,b,c,d){var f={},g=0,h=0;if(isNaN(this.Ca.width)){g=this.le;if(0===g.length)g=0;else if(this.Tw){for(var k=h=0,l=!1,m={ph:0};!l;){var n=rm(g,k,m);-1===n&&(n=g.length,l=!0);k=sm(g.substr(k,n-k).replace(/^\s+|\s+$/g,""),this.Tg);k>h&&(h=k);k=m.ph}g=h}else h=rm(g,0,{}),0<=h&&(g=g.substr(0,h)),g=k=sm(g,this.Tg);g=Math.min(g,a/this.scale);g=Math.max(8,g)}else g=this.Ca.width;this.ja&&(g=Math.min(g,this.ja.He.width),g=Math.max(g,this.ja.Vf.width));h=qm(this,g,f);m=h=isNaN(this.Ca.height)?
Math.min(h,b/this.scale):this.Ca.height;if(0!==f.Ag&&1!==f.Of.length&&this.Qk===om&&(b=this.Tg,l=this.Qk===om?tm(b):0,k=this.Oj+this.Pj,k=Math.max(0,Ah(this)+k),m=Math.max(Math.floor(m/k)-1,0),!(m+1>=f.Of.length))){k=f.Of[m];for(a=Math.max(1,a-l);sm(k,b)>a&&1<k.length;)k=k.substr(0,k.length-1);k+=t.$s;a=sm(k,b);f.Of[m]=k;f.Of=f.Of.slice(0,m+1);f.ug[m]=a;f.ug=f.ug.slice(0,m+1);f.ph=f.Of.length;f.Ag=Math.max(f.Ag,a)}if(this.pB===nm||isNaN(this.Ca.width))g=f.Ag,isNaN(this.Ca.width)&&(g=Math.max(8,g));
g=Math.max(c,g);h=Math.max(d,h);Va(this.hd,g,h);nk(this,0,0,g,h);this.no=f};na.prototype.Tj=function(a,b,c,d){uk(this,a,b,c,d)};
function pm(a,b,c,d){b=b.replace(/^\s+|\s+$/g,"");void 0===c.Ag&&(c.Ag=0);void 0===c.ug&&(c.ug=[]);void 0===c.Of&&(c.Of=[]);var f=0,g,h,k=a.Tg;g=a.Oj+a.Pj;var l=Math.max(0,Ah(a)+g),m=a.Qk===om?tm(k):0;if(!(a.mf>=a.Ai)){if(a.zm===mm){c.ph=1;g=sm(b,k);if(0===m||g<=d)return c.Ag=g,c.ug.push(c.Ag),c.Of.push(b),new fa(g,l);var n=um(b);b=b.substr(n.length);h=um(b);for(g=sm(n+h,k);0<h.length&&g<=d;)n+=h,b=b.substr(h.length),h=um(b),g=sm((n+h).replace(/^\s+|\s+$/g,""),k);n+=h.replace(/^\s+|\s+$/g,"");for(d=
Math.max(1,d-m);sm(n,k)>d&&1<n.length;)n=n.substr(0,n.length-1);n+=t.$s;h=sm(n,k);c.ug.push(h);c.Ag=h;c.Of.push(n);return new fa(h,l)}m=0;0===b.length&&(m=1,c.ug.push(0),c.Of.push(b));for(;0<b.length;){n=um(b);for(b=b.substr(n.length);sm(n,k)>d;){var p=1;g=sm(n.substr(0,p),k);for(h=0;g<=d;)p++,h=g,g=sm(n.substr(0,p),k);1===p?(c.ug[a.mf+m]=g,f=Math.max(f,g)):(c.ug[a.mf+m]=h,f=Math.max(f,h));p--;1>p&&(p=1);c.Of[a.mf+m]=n.substr(0,p);m++;n=n.substr(p);if(a.mf+m>a.Ai)break}h=um(b);for(g=sm(n+h,k);0<h.length&&
g<=d;)n+=h,b=b.substr(h.length),h=um(b),g=sm((n+h).replace(/^\s+|\s+$/g,""),k);n=n.replace(/^\s+|\s+$/g,"");if(""!==n&&(0===h.length?(c.ug.push(g),f=Math.max(f,g)):(h=sm(n,k),c.ug.push(h),f=Math.max(f,h)),c.Of.push(n),m++,a.mf+m>a.Ai))break}c.ph=Math.min(a.Ai,m);c.Ag=Math.max(c.Ag,f);return new fa(c.Ag,l*c.ph)}}function um(a){for(var b=a.length,c=0;c<b&&" "!==a.charAt(c);)c++;for(;c<b&&" "===a.charAt(c);)c++;return c>=b?a:a.substr(0,c)}
function sm(a,b){t.Tp!==b&&(t.ln.font=b,t.Tp=b);return t.ln.measureText(a).width}function Ah(a){if(null!==a.Rn)return a.Rn;var b=a.Tg;t.Tp!==b&&(t.ln.font=b,t.Tp=b);var c=0;void 0!==t.gA[b]&&5E3>t.CE?c=t.gA[b]:(c=1.3*t.ln.measureText("M").width,t.gA[b]=c,t.CE++);return a.Rn=c}function tm(a){t.Tp!==a&&(t.ln.font=a,t.Tp=a);var b=0;void 0!==t.Gw[a]&&5E3>t.fA?b=t.Gw[a]:(b=t.ln.measureText(t.$s).width,t.Gw[a]=b,t.fA++);return b}
function rm(a,b,c){void 0===c.ph&&(c.ph=0);var d=a.indexOf("\r",b);-1===d&&(d=a.indexOf("\n",b));0<=d&&(c.ph="\r"===a[d]&&d+1<a.length&&"\n"===a[d+1]?d+2:d+1);return d}
function qm(a,b,c){var d=a.le,f=a.Oj+a.Pj,f=Math.max(0,Ah(a)+f);if(0===d.length)return c.Ag=0,a.mf=1,f;if(!a.Tw){var g=rm(d,0,{});0<=g&&(d=d.substr(0,g))}for(var g=0,h=a.mf=0,k=-1,l={ph:0},m=!1;!m;)k=rm(d,h,l),-1===k&&(k=d.length,m=!0),h<=k&&(h=d.substr(h,k-h),a.zm!==mm?(c.ph=0,h=pm(a,h,c,b),g+=h.height,a.mf+=c.ph):(pm(a,h,c,b),g+=f,a.mf++),a.mf===a.Ai&&(m=!0)),h=l.ph;return a.dv=g}t.g(na,"textValidation",na.prototype.Xt);
t.defineProperty(na,{Xt:"textValidation"},function(){return this.Tk},function(a){var b=this.Tk;b!==a&&(null!==a&&t.i(a,"function",na,"textValidation"),this.Tk=a,this.j("textValidation",b,a))});t.g(na,"spacingAbove",na.prototype.TJ);t.defineProperty(na,{TJ:"spacingAbove"},function(){return this.Oj},function(a){var b=this.Oj;b!==a&&(this.Oj=a,this.j("spacingAbove",b,a))});t.g(na,"spacingBelow",na.prototype.UJ);
t.defineProperty(na,{UJ:"spacingBelow"},function(){return this.Pj},function(a){var b=this.Pj;b!==a&&(this.Pj=a,this.j("spacingBelow",b,a))});t.g(na,"maxLines",na.prototype.nJ);t.defineProperty(na,{nJ:"maxLines"},function(){return this.Ai},function(a){var b=this.Ai;b!==a&&(this.Ai=a,this.j("maxLines",b,a))});function al(){Q.call(this);this.dg=null;this.qs="";this.Nj=(new x(NaN,NaN,NaN,NaN)).freeze();this.Wn=Cc;this.vs=this.kf=null;this.Vu=this.Mu=this.fm=!1;this.fC=!0;this.zo=null}t.ga("Picture",al);
t.Ka(al,Q);var vm;al.clearCache=vm=function(a){void 0===a&&(a="");t.i(a,"string",al,"clearCache:url");""!==a?t.kt[a]&&(delete t.kt[a],t.Lw--):(t.kt={},t.Lw=0)};al.prototype.cloneProtected=function(a){Q.prototype.cloneProtected.call(this,a);a.element=this.dg;a.qs=this.qs;a.Nj.assign(this.Nj);a.Wn=this.Wn;a.kf=this.kf;a.zo=this.zo};al.prototype.toString=function(){return"Picture("+this.source+")#"+t.od(this)};t.g(al,"element",al.prototype.element);
t.defineProperty(al,{element:"element"},function(){return this.dg},function(a){var b=this.dg;if(b!==a){a instanceof HTMLImageElement||a instanceof HTMLVideoElement||a instanceof HTMLCanvasElement||t.m("Picture.element must be an instance of Image, Canvas, or Video.");this.Mu=!1;var c=this;a instanceof HTMLCanvasElement?this.Vu=!0:(this.Vu=!1,a.onerror=function(a){c.Mu=!0;null!==c.kf&&c.kf(c,a)});this.dg=a;!0===a.complete||void 0===a.complete?(this.fm=!0,this.Ca.N()||(rk(this,!1),this.ha())):(t.lB.push(this),
null===t.lx&&(t.lx=setInterval(function(){for(var a=[],b=t.lB,c=b.length,h=0;h<c;h++){var k=b[h],l;l=k;var m=l.dg;if(m)if(m.complete){l.fm=!0;l.Ca.N()||(rk(l,!1),l.ha());if(l.h)l.Ca.N()||l.h.Oc(),l.h.fa();else{l=t.$z;var n=l.length;if(0===n)for(var n=document.getElementsByTagName("canvas"),p=n.length,m=0;m<p;m++){var q=n[m];q.parentElement&&q.parentElement.U&&l.push(q.parentElement.U)}n=l.length;for(m=0;m<n;m++)l[m].fa()}l=!0}else l=!1;else l=!0;l||a.push(k)}0===a.length&&(clearInterval(t.lx),t.lx=
null);t.lB=a},200)));this.j("element",b,a);this.fa()}});t.g(al,"source",al.prototype.source);t.defineProperty(al,{source:"source"},function(){return this.qs},function(a){var b=this.qs;if(b!==a){t.i(a,"string",al,"source");this.qs=a;this.Mu=!1;var c=t.kt;if(void 0!==c[a])this.element=c[a];else{10<t.Lw&&(vm(),c=t.kt);var d=document.createElement("img");d.src=a;var f=this.zo;null!==f&&(d.crossOrigin=f(this));c[a]=d;t.Lw++;d instanceof HTMLImageElement&&(this.element=d)}this.fa();this.j("source",b,a)}});
t.g(al,"sourceCrossOrigin",al.prototype.RJ);t.defineProperty(al,{RJ:"sourceCrossOrigin"},function(){return this.zo},function(a){if(this.zo!==a&&(null!==a&&t.i(a,"function",al,"sourceCrossOrigin"),this.zo=a,null!==this.element)){var b=this.element.src;null===a&&"string"===typeof b?this.element.crossOrigin=null:null!==a&&(this.element.crossOrigin=a(this))}});t.g(al,"sourceRect",al.prototype.ei);
t.defineProperty(al,{ei:"sourceRect"},function(){return this.Nj},function(a){var b=this.Nj;b.M(a)||(t.l(a,x,al,"sourceRect"),this.Nj=a=a.Z(),this.fa(),this.j("sourceRect",b,a))});t.g(al,"imageStretch",al.prototype.QI);t.defineProperty(al,{QI:"imageStretch"},function(){return this.Wn},function(a){var b=this.Wn;b!==a&&(t.Aa(a,Q,al,"imageStretch"),this.Wn=a,this.fa(),this.j("imageStretch",b,a))});t.g(al,"errorFunction",al.prototype.at);
t.defineProperty(al,{at:"errorFunction"},function(){return this.kf},function(a){var b=this.kf;if(b!==a){null!==a&&t.i(a,"function",al,"errorFunction");this.kf=a;if(this.dg){var c=this;this.dg.onerror=function(a){null!==c.kf&&c.kf(c,a)}}this.j("errorFunction",b,a)}});
al.prototype.fl=function(a,b){if(!b.Mn){if(null===this.vs)if(null===this.dg)this.vs=!1;else{var c=document.createElement("canvas").getContext("2d");0!==this.dg.width&&0!==this.dg.height&&c.drawImage(this.dg,0,0);try{c.getImageData(0,0,1,1),this.vs=!1}catch(d){this.vs=!0}}if(this.vs)return}if(this.fm&&!this.Mu&&(c=this.dg,null!==c)){var f=c.src;null!==f&&""!==f||t.m("Element has no source attribute: "+c);var f=this.Pa,g=0,h=0,k=this.Vu,l=k?+c.width:c.naturalWidth,k=k?+c.height:c.naturalHeight;void 0===
l&&c.videoWidth&&(l=c.videoWidth);void 0===k&&c.videoHeight&&(k=c.videoHeight);l=l||f.width;k=k||f.height;if(0!==l&&0!==k){this.ei.N()&&(g=this.Nj.x,h=this.Nj.y,l=this.Nj.width,k=this.Nj.height);var m=l,n=k,p=this.Wn;switch(p){case Vg:if(this.ei.N())break;g+=Math.max((m-f.width)/2,0);h+=Math.max((n-f.height)/2,0);l=Math.min(f.width,m);k=Math.min(f.height,n);break;case Cc:m=f.width;n=f.height;break;case Xg:case Yg:p===Xg?(p=Math.min(f.height/n,f.width/m),m*=p,n*=p):p===Yg&&(p=Math.max(f.height/n,f.width/
m),m*=p,n*=p,g+=(m-f.width)/2,h+=(n-f.height)/2,l*=1/(m/f.width),k*=1/(n/f.height),m=f.width,n=f.height)}try{a.drawImage(c,g,h,l,k,Math.max((f.width-m)/2,0),Math.max((f.height-n)/2,0),Math.min(f.width,m),Math.min(f.height,n))}catch(q){e&&this.fC&&t.trace(q.toString()),this.fC=!1}}}};t.A(al,{Pa:"naturalBounds"},function(){return this.hd});
al.prototype.ut=function(a,b,c,d){var f=this.Ca,g=qk(this),h=this.dg,k=this.Vu;if(k||!this.fm&&h&&h.complete)this.fm=!0;null===h&&(isFinite(a)||(a=0),isFinite(b)||(b=0));isFinite(f.width)||g===Cc||g===ik?(isFinite(a)||(a=this.ei.N()?this.ei.width:k?+h.width:h.naturalWidth),c=0):null!==h&&!1!==this.fm&&(a=this.ei.N()?this.ei.width:k?+h.width:h.naturalWidth);isFinite(f.height)||g===Cc||g===hk?(isFinite(b)||(b=this.ei.N()?this.ei.height:k?+h.height:h.naturalHeight),d=0):null!==h&&!1!==this.fm&&(b=this.ei.N()?
this.ei.height:k?+h.height:h.naturalHeight);isFinite(f.width)&&(a=f.width);isFinite(f.height)&&(b=f.height);f=this.He;g=this.Vf;c=Math.max(c,g.width);d=Math.max(d,g.height);a=Math.min(f.width,a);b=Math.min(f.height,b);a=Math.max(c,a);b=Math.max(d,b);null===h||h.complete||(isFinite(a)||(a=0),isFinite(b)||(b=0));Va(this.hd,a,b);nk(this,0,0,a,b)};al.prototype.Tj=function(a,b,c,d){uk(this,a,b,c,d)};function ha(){this.s=new zc;this.Xb=null}aa=ha.prototype;aa.reset=function(){this.s=new zc;this.Xb=null};
function I(a,b,c,d,f,g){null===a.s&&t.m("StreamGeometryContext has been closed");void 0!==f&&!0===f?(null===a.Xb&&t.m("Need to call beginFigure first"),d=new id(bd),d.D=b,d.F=c,a.Xb.Ea.add(d)):(a.Xb=new Bc,a.Xb.qa=b,a.Xb.ra=c,a.Xb.pp=d,a.s.Bb.add(a.Xb));void 0!==g&&(a.Xb.bo=g)}function L(a){null===a.s&&t.m("StreamGeometryContext has been closed");null===a.Xb&&t.m("Need to call beginFigure first");var b=a.Xb.Ea.length;0<b&&a.Xb.Ea.n[b-1].close()}
function Zc(a){null===a.s&&t.m("StreamGeometryContext has been closed");null===a.Xb&&t.m("Need to call beginFigure first");0<a.Xb.Ea.length&&(a.Xb.pp=!0)}aa.bb=function(a){null===this.s&&t.m("StreamGeometryContext has been closed");null===this.Xb&&t.m("Need to call beginFigure first");this.Xb.gj=a};aa.moveTo=function(a,b,c){null===this.s&&t.m("StreamGeometryContext has been closed");null===this.Xb&&t.m("Need to call beginFigure first");var d=new id(bd);d.D=a;d.F=b;c&&d.close();this.Xb.Ea.add(d)};
aa.lineTo=function(a,b,c){null===this.s&&t.m("StreamGeometryContext has been closed");null===this.Xb&&t.m("Need to call beginFigure first");var d=new id(Oc);d.D=a;d.F=b;c&&d.close();this.Xb.Ea.add(d)};function J(a,b,c,d,f,g,h,k){null===a.s&&t.m("StreamGeometryContext has been closed");null===a.Xb&&t.m("Need to call beginFigure first");var l=new id(cd);l.Cb=b;l.Sb=c;l.re=d;l.se=f;l.D=g;l.F=h;k&&l.close();a.Xb.Ea.add(l)}
function Sc(a,b,c,d,f){null===a.s&&t.m("StreamGeometryContext has been closed");null===a.Xb&&t.m("Need to call beginFigure first");var g=new id(dd);g.Cb=b;g.Sb=c;g.D=d;g.F=f;a.Xb.Ea.add(g)}aa.arcTo=function(a,b,c,d,f,g,h){null===this.s&&t.m("StreamGeometryContext has been closed");null===this.Xb&&t.m("Need to call beginFigure first");var k=new id(ed);k.mh=a;k.gi=b;k.Da=c;k.Oa=d;k.radiusX=f;k.radiusY=g?g:f;h&&k.close();this.Xb.Ea.add(k)};
function Tc(a,b,c,d,f,g,h,k){null===a.s&&t.m("StreamGeometryContext has been closed");null===a.Xb&&t.m("Need to call beginFigure first");b=new id(fd,h,k,b,c,d,f,g);a.Xb.Ea.add(b)}
F.makeGeometry=function(a,b,c){var d=a.Ca,f=d.width,d=d.height;void 0!==b&&!isNaN(b)&&isFinite(b)&&(f=b);void 0!==c&&!isNaN(c)&&isFinite(c)&&(d=c);isFinite(f)||(f=100);isFinite(d)||(d=100);b=void 0;"None"!==a.on?b=F.Dm[a.on]:"None"!==a.Hw?b=F.Dm[a.Hw]:(c=F.bj[a.Ab],"string"===typeof c&&(c=F.bj[c]),void 0===c&&t.m("Unknown Shape.figure: "+a.Ab),b=c(a,f,d),b.$n=f,b.Zn=d);void 0===b&&(c=F.bj.Rectangle)&&(b=c(a,f,d));return b};
F.Vi=function(a,b,c,d,f,g,h,k,l,m,n,p,q,r){var s=1-l;a=a*s+c*l;b=b*s+d*l;c=c*s+f*l;d=d*s+g*l;f=f*s+h*l;g=g*s+k*l;k=a*s+c*l;h=b*s+d*l;c=c*s+f*l;d=d*s+g*l;m.x=a;m.y=b;n.x=k;n.y=h;p.x=k*s+c*l;p.y=h*s+d*l;q.x=c;q.y=d;r.x=f;r.y=g};F.Xo=function(a){a=F.Mm(a);var b=t.Db();b[0]=a[0];for(var c=1,d=1;c<a.length;c+=2,d+=3)b[d]=a[c],b[d+1]=a[c],b[d+2]=a[c+1];t.ya(a);return b};
F.Mm=function(a){var b=F.dl(a),c=t.Db(),d=Math.floor(b.length/2),f=b.length-1;a=0===a%2?2:1;for(var g=0;g<f;g++){var h=b[g],k=b[g+1],l=b[(d+g-1)%f],m=b[(d+g+a)%f];c[2*g]=h;c[2*g+1]=F.jl(h.x,h.y,l.x,l.y,k.x,k.y,m.x,m.y,new w)}c[c.length]=c[0];t.ya(b);return c};F.jl=function(a,b,c,d,f,g,h,k,l){c=a-c;h=f-h;0===c||0===h?0===c?(h=(g-k)/h,k=a,f=h*k+(g-h*f)):(d=(b-d)/c,k=f,f=d*k+(b-d*a)):(d=(b-d)/c,h=(g-k)/h,a=b-d*a,k=(g-h*f-a)/(d-h),f=d*k+a);l.p(k,f);return l};
F.dl=function(a){for(var b=t.Db(),c=1.5*Math.PI,d=0,f=0;f<a;f++)d=2*Math.PI/a*f+c,b[f]=new w(0.5+0.5*Math.cos(d),0.5+0.5*Math.sin(d));b.push(b[0]);return b};F.sB=(new H(0.156,0.156)).Ja();F.tB=(new H(0.844,0.844)).Ja();
F.bj={None:"Rectangle",Rectangle:function(a,b,c){a=new zc;a.type=Ec;a.qa=0;a.ra=0;a.D=b;a.F=c;return a},Square:function(a,b,c){a=new zc;a.Hc=Xg;a.type=Ec;a.qa=0;a.ra=0;a.D=b;a.F=c;return a},Ellipse:function(a,b,c){a=new zc;a.type=Mc;a.qa=0;a.ra=0;a.D=b;a.F=c;a.G=F.sB;a.H=F.tB;return a},Circle:function(a,b,c){a=new zc;a.Hc=Xg;a.type=Mc;a.qa=0;a.ra=0;a.D=b;a.F=c;a.G=F.sB;a.H=F.tB;return a},Connector:"Ellipse",TriangleRight:function(a,b,c){a=new zc;var d=new Bc,f=new id;f.D=b;f.F=0.5*c;d.Ea.add(f);b=
new id;b.D=0;b.F=c;d.Ea.add(b.close());a.Bb.add(d);a.G=new H(0,0.25);a.H=new H(0.5,0.75);return a},TriangleDown:function(a,b,c){a=new zc;var d=new Bc,f=new id;f.D=b;f.F=0;d.Ea.add(f);f=new id;f.D=0.5*b;f.F=c;d.Ea.add(f.close());a.Bb.add(d);a.G=new H(0.25,0);a.H=new H(0.75,0.5);return a},TriangleLeft:function(a,b,c){a=new zc;var d=new Bc;d.qa=b;d.ra=c;var f=new id;f.D=0;f.F=0.5*c;d.Ea.add(f);c=new id;c.D=b;c.F=0;d.Ea.add(c.close());a.Bb.add(d);a.G=new H(0.5,0.25);a.H=new H(1,0.75);return a},TriangleUp:function(a,
b,c){a=new zc;var d=new Bc;d.qa=b;d.ra=c;var f=new id;f.D=0;f.F=c;d.Ea.add(f);c=new id;c.D=0.5*b;c.F=0;d.Ea.add(c.close());a.Bb.add(d);a.G=new H(0.25,0.5);a.H=new H(0.75,1);return a},Line1:function(a,b,c){a=new zc;a.type=Dc;a.qa=0;a.ra=0;a.D=b;a.F=c;return a},Line2:function(a,b,c){a=new zc;a.type=Dc;a.qa=b;a.ra=0;a.D=0;a.F=c;return a},MinusLine:"LineH",LineH:function(a,b,c){a=new zc;a.type=Dc;a.qa=0;a.ra=c/2;a.D=b;a.F=c/2;return a},LineV:function(a,b,c){a=new zc;a.type=Dc;a.qa=b/2;a.ra=0;a.D=b/2;
a.F=c;return a},Curve1:function(a,b,c){var d=F.va;a=t.u();I(a,0,0,!1);J(a,d*b,0,1*b,(1-d)*c,b,c);b=a.s;t.v(a);return b},Curve2:function(a,b,c){var d=F.va;a=t.u();I(a,0,0,!1);J(a,0,d*c,(1-d)*b,c,b,c);b=a.s;t.v(a);return b},Curve3:function(a,b,c){var d=F.va;a=t.u();I(a,1*b,0,!1);J(a,1*b,d*c,d*b,1*c,0,1*c);b=a.s;t.v(a);return b},Curve4:function(a,b,c){var d=F.va;a=t.u();I(a,1*b,0,!1);J(a,(1-d)*b,0,0,(1-d)*c,0,1*c);b=a.s;t.v(a);return b},Alternative:"Triangle",Merge:"Triangle",Triangle:function(a,b,c){a=
t.u();I(a,0.5*b,0*c,!0);a.lineTo(0*b,1*c);a.lineTo(1*b,1*c,!0);b=a.s;b.G=new H(0.25,0.5);b.H=new H(0.75,1);t.v(a);return b},Decision:"Diamond",Diamond:function(a,b,c){a=t.u();I(a,0.5*b,0,!0);a.lineTo(0,0.5*c);a.lineTo(0.5*b,1*c);a.lineTo(1*b,0.5*c,!0);b=a.s;b.G=new H(0.25,0.25);b.H=new H(0.75,0.75);t.v(a);return b},Pentagon:function(a,b,c){var d=F.dl(5);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;5>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.2,0.22);b.H=new H(0.8,0.9);t.v(a);
return b},DataTransmission:"Hexagon",Hexagon:function(a,b,c){var d=F.dl(6);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;6>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.07,0.25);b.H=new H(0.93,0.75);t.v(a);return b},Heptagon:function(a,b,c){var d=F.dl(7);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;7>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.2,0.15);b.H=new H(0.8,0.85);t.v(a);return b},Octagon:function(a,b,c){var d=F.dl(8);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);
for(var f=1;8>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.15,0.15);b.H=new H(0.85,0.85);t.v(a);return b},Nonagon:function(a,b,c){var d=F.dl(9);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;9>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.17,0.13);b.H=new H(0.82,0.82);t.v(a);return b},Decagon:function(a,b,c){var d=F.dl(10);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;10>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.16,0.16);b.H=new H(0.84,
0.84);t.v(a);return b},Dodecagon:function(a,b,c){var d=F.dl(12);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;12>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.16,0.16);b.H=new H(0.84,0.84);t.v(a);return b},FivePointedStar:function(a,b,c){var d=F.Mm(5);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;10>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.312,0.383);b.H=new H(0.693,0.765);t.v(a);return b},SixPointedStar:function(a,b,c){var d=F.Mm(6);a=t.u();I(a,d[0].x*b,
d[0].y*c,!0);for(var f=1;12>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.17,0.251);b.H=new H(0.833,0.755);t.v(a);return b},SevenPointedStar:function(a,b,c){var d=F.Mm(7);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;14>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.363,0.361);b.H=new H(0.641,0.709);t.v(a);return b},EightPointedStar:function(a,b,c){var d=F.Mm(8);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;16>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;
b.G=new H(0.252,0.255);b.H=new H(0.75,0.75);t.v(a);return b},NinePointedStar:function(a,b,c){var d=F.Mm(9);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;18>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.355,0.361);b.H=new H(0.645,0.651);t.v(a);return b},TenPointedStar:function(a,b,c){var d=F.Mm(10);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;20>f;f++)a.lineTo(d[f].x*b,d[f].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.281,0.261);b.H=new H(0.723,0.748);t.v(a);return b},FivePointedBurst:function(a,
b,c){var d=F.Xo(5);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;f<d.length;f+=3)J(a,d[f].x*b,d[f].y*c,d[f+1].x*b,d[f+1].y*c,d[f+2].x*b,d[f+2].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.312,0.383);b.H=new H(0.693,0.765);t.v(a);return b},SixPointedBurst:function(a,b,c){var d=F.Xo(6);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;f<d.length;f+=3)J(a,d[f].x*b,d[f].y*c,d[f+1].x*b,d[f+1].y*c,d[f+2].x*b,d[f+2].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.17,0.251);b.H=new H(0.833,0.755);t.v(a);return b},SevenPointedBurst:function(a,
b,c){var d=F.Xo(7);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;f<d.length;f+=3)J(a,d[f].x*b,d[f].y*c,d[f+1].x*b,d[f+1].y*c,d[f+2].x*b,d[f+2].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.363,0.361);b.H=new H(0.641,0.709);t.v(a);return b},EightPointedBurst:function(a,b,c){var d=F.Xo(8);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;f<d.length;f+=3)J(a,d[f].x*b,d[f].y*c,d[f+1].x*b,d[f+1].y*c,d[f+2].x*b,d[f+2].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.252,0.255);b.H=new H(0.75,0.75);t.v(a);return b},NinePointedBurst:function(a,
b,c){var d=F.Xo(9);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;f<d.length;f+=3)J(a,d[f].x*b,d[f].y*c,d[f+1].x*b,d[f+1].y*c,d[f+2].x*b,d[f+2].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.355,0.361);b.H=new H(0.645,0.651);t.v(a);return b},TenPointedBurst:function(a,b,c){var d=F.Xo(10);a=t.u();I(a,d[0].x*b,d[0].y*c,!0);for(var f=1;f<d.length;f+=3)J(a,d[f].x*b,d[f].y*c,d[f+1].x*b,d[f+1].y*c,d[f+2].x*b,d[f+2].y*c);t.ya(d);L(a);b=a.s;b.G=new H(0.281,0.261);b.H=new H(0.723,0.748);t.v(a);return b},Cloud:function(a,
b,c){a=t.u();I(a,0.08034461*b,0.1944299*c,!0);J(a,-0.09239631*b,0.07836421*c,0.1406031*b,-0.0542823*c,0.2008615*b,0.05349299*c);J(a,0.2450511*b,-0.00697547*c,0.3776197*b,-0.01112067*c,0.4338609*b,0.074219*c);J(a,0.4539471*b,0,0.6066018*b,-0.02526587*c,0.6558228*b,0.07004196*c);J(a,0.6914277*b,-0.01904177*c,0.8921095*b,-0.01220843*c,0.8921095*b,0.08370865*c);J(a,1.036446*b,0.04105738*c,1.020377*b,0.3022052*c,0.9147671*b,0.3194596*c);J(a,1.04448*b,0.360238*c,0.992256*b,0.5219009*c,0.9082935*b,0.562044*
c);J(a,1.032337*b,0.5771781*c,1.018411*b,0.8120651*c,0.9212406*b,0.8217117*c);J(a,1.028411*b,0.9571472*c,0.8556702*b,1.052487*c,0.7592566*b,0.9156953*c);J(a,0.7431877*b,1.009325*c,0.5624123*b,1.021761*c,0.5101666*b,0.9310455*c);J(a,0.4820677*b,1.031761*c,0.3030112*b,1.002796*c,0.2609328*b,0.9344623*c);J(a,0.2329994*b,1.01518*c,0.03213784*b,1.01518*c,0.08034461*b,0.870098*c);J(a,-0.02812061*b,0.9032597*c,-0.01205169*b,0.6835638*c,0.06829292*b,0.6545475*c);J(a,-0.01812061*b,0.6089503*c,-0.00606892*
b,0.4555777*c,0.06427569*b,0.4265613*c);J(a,-0.01606892*b,0.3892545*c,-0.01205169*b,0.1944299*c,0.08034461*b,0.1944299*c);L(a);b=a.s;b.G=new H(0.1,0.1);b.H=new H(0.9,0.9);t.v(a);return b},Gate:"Crescent",Crescent:function(a,b,c){a=t.u();I(a,0,0,!0);J(a,1*b,0,1*b,1*c,0,1*c);J(a,0.5*b,0.75*c,0.5*b,0.25*c,0,0);L(a);b=a.s;b.G=new H(0.511,0.19);b.H=new H(0.776,0.76);t.v(a);return b},FramedRectangle:function(a,b,c){var d=t.u(),f=a?a.Gc:0;a=a?a.Ft:0;0===f&&(f=0.1);0===a&&(a=0.1);I(d,0,0,!0);d.lineTo(1*b,
0);d.lineTo(1*b,1*c);d.lineTo(0,1*c,!0);I(d,f*b,a*c,!1,!0);d.lineTo(f*b,(1-a)*c);d.lineTo((1-f)*b,(1-a)*c);d.lineTo((1-f)*b,a*c,!0);b=d.s;b.G=new H(f,a);b.H=new H(1-f,1-a);t.v(d);return b},Delay:"HalfEllipse",HalfEllipse:function(a,b,c){var d=F.va;a=t.u();I(a,0,0,!0);J(a,d*b,0,1*b,(0.5-d/2)*c,1*b,0.5*c);J(a,1*b,(0.5+d/2)*c,d*b,1*c,0,1*c);L(a);b=a.s;b.G=new H(0,0.2);b.H=new H(0.75,0.8);t.v(a);return b},Heart:function(a,b,c){a=t.u();I(a,0.5*b,1*c,!0);J(a,0.1*b,0.8*c,0,0.5*c,0*b,0.3*c);J(a,0*b,0,0.45*
b,0,0.5*b,0.3*c);J(a,0.55*b,0,1*b,0,1*b,0.3*c);J(a,b,0.5*c,0.9*b,0.8*c,0.5*b,1*c);L(a);b=a.s;b.G=new H(0.15,0.29);b.H=new H(0.86,0.68);t.v(a);return b},Spade:function(a,b,c){a=t.u();I(a,0.5*b,0,!0);a.lineTo(0.51*b,0.01*c);J(a,0.6*b,0.2*c,b,0.25*c,b,0.5*c);J(a,b,0.8*c,0.6*b,0.8*c,0.55*b,0.7*c);J(a,0.5*b,0.75*c,0.55*b,0.95*c,0.75*b,c);a.lineTo(0.25*b,c);J(a,0.45*b,0.95*c,0.5*b,0.75*c,0.45*b,0.7*c);J(a,0.4*b,0.8*c,0,0.8*c,0,0.5*c);J(a,0,0.25*c,0.4*b,0.2*c,0.49*b,0.01*c);L(a);b=a.s;b.G=new H(0.19,0.26);
b.H=new H(0.8,0.68);t.v(a);return b},Club:function(a,b,c){a=t.u();I(a,0.4*b,0.6*c,!0);J(a,0.5*b,0.75*c,0.45*b,0.95*c,0.15*b,1*c);a.lineTo(0.85*b,c);J(a,0.55*b,0.95*c,0.5*b,0.75*c,0.6*b,0.6*c);var d=0.2,f=0.3,g=0,h=4*(Math.SQRT2-1)/3*d;J(a,(0.5-d+f)*b,(0.5+h+g)*c,(0.5-h+f)*b,(0.5+d+g)*c,(0.5+f)*b,(0.5+d+g)*c);J(a,(0.5+h+f)*b,(0.5+d+g)*c,(0.5+d+f)*b,(0.5+h+g)*c,(0.5+d+f)*b,(0.5+g)*c);J(a,(0.5+d+f)*b,(0.5-h+g)*c,(0.5+h+f)*b,(0.5-d+g)*c,(0.5+f)*b,(0.5-d+g)*c);J(a,(0.5-h+f)*b,(0.5-d+g)*c,(0.5-d+f+0.05)*
b,(0.5-h+g-0.02)*c,0.65*b,0.36771243*c);d=0.2;f=0;g=-0.3;h=4*(Math.SQRT2-1)/3*d;J(a,(0.5+h+f)*b,(0.5+d+g)*c,(0.5+d+f)*b,(0.5+h+g)*c,(0.5+d+f)*b,(0.5+g)*c);J(a,(0.5+d+f)*b,(0.5-h+g)*c,(0.5+h+f)*b,(0.5-d+g)*c,(0.5+f)*b,(0.5-d+g)*c);J(a,(0.5-h+f)*b,(0.5-d+g)*c,(0.5-d+f)*b,(0.5-h+g)*c,(0.5-d+f)*b,(0.5+g)*c);J(a,(0.5-d+f)*b,(0.5+h+g)*c,(0.5-h+f)*b,(0.5+d+g)*c,0.35*b,0.36771243*c);d=0.2;f=-0.3;g=0;h=4*(Math.SQRT2-1)/3*d;J(a,(0.5+d+f-0.05)*b,(0.5-h+g-0.02)*c,(0.5+h+f)*b,(0.5-d+g)*c,(0.5+f)*b,(0.5-d+g)*c);
J(a,(0.5-h+f)*b,(0.5-d+g)*c,(0.5-d+f)*b,(0.5-h+g)*c,(0.5-d+f)*b,(0.5+g)*c);J(a,(0.5-d+f)*b,(0.5+h+g)*c,(0.5-h+f)*b,(0.5+d+g)*c,(0.5+f)*b,(0.5+d+g)*c);J(a,(0.5+h+f)*b,(0.5+d+g)*c,(0.5+d+f)*b,(0.5+h+g)*c,0.4*b,0.6*c);L(a);b=a.s;b.G=new H(0.06,0.39);b.H=new H(0.93,0.58);t.v(a);return b},Ring:function(a,b,c){a=t.u();var d=4*(Math.SQRT2-1)/3*0.5;I(a,b,0.5*c,!0);J(a,b,(0.5-d)*c,(0.5+d)*b,0,0.5*b,0);J(a,(0.5-d)*b,0,0,(0.5-d)*c,0,0.5*c);J(a,0,(0.5+d)*c,(0.5-d)*b,c,0.5*b,c);J(a,(0.5+d)*b,c,b,(0.5+d)*c,b,0.5*
c);d=4*(Math.SQRT2-1)/3*0.4;I(a,0.5*b,0.1*c,!0,!0);J(a,(0.5+d)*b,0.1*c,0.9*b,(0.5-d)*c,0.9*b,0.5*c);J(a,0.9*b,(0.5+d)*c,(0.5+d)*b,0.9*c,0.5*b,0.9*c);J(a,(0.5-d)*b,0.9*c,0.1*b,(0.5+d)*c,0.1*b,0.5*c);J(a,0.1*b,(0.5-d)*c,(0.5-d)*b,0.1*c,0.5*b,0.1*c);b=a.s;b.G=new H(0.146,0.146);b.H=new H(0.853,0.853);b.Hc=Xg;t.v(a);return b},YinYang:function(a,b,c){var d=0.5;a=t.u();d=0.5;I(a,0.5*b,0,!0);a.arcTo(270,180,0.5*b,0.5*b,0.5*b);J(a,1*b,d*c,0,d*c,d*b,0,!0);var d=0.1,f=0.25;I(a,(0.5+d)*b,f*c,!0,!0);a.arcTo(0,
-360,0.5*b,c*f,d*b);L(a);I(a,0.5*b,0,!1);a.arcTo(270,-180,0.5*b,0.5*b,0.5*b);a.bb(!1);f=0.75;I(a,(0.5+d)*b,f*c,!0);a.arcTo(0,360,0.5*b,c*f,d*b);L(a);b=a.s;b.Hc=Xg;t.v(a);return b},Peace:function(a,b,c){a=t.u();var d=4*(Math.SQRT2-1)/3*0.5;I(a,b,0.5*c,!0);J(a,b,(0.5-d)*c,(0.5+d)*b,0,0.5*b,0);J(a,(0.5-d)*b,0,0,(0.5-d)*c,0,0.5*c);J(a,0,(0.5+d)*c,(0.5-d)*b,c,0.5*b,c);J(a,(0.5+d)*b,c,b,(0.5+d)*c,b,0.5*c);d=4*(Math.SQRT2-1)/3*0.4;I(a,0.5*b,0.1*c,!0,!0);J(a,(0.5+d)*b,0.1*c,0.9*b,(0.5-d)*c,0.9*b,0.5*c);J(a,
0.9*b,(0.5+d)*c,(0.5+d)*b,0.9*c,0.5*b,0.9*c);J(a,(0.5-d)*b,0.9*c,0.1*b,(0.5+d)*c,0.1*b,0.5*c);J(a,0.1*b,(0.5-d)*c,(0.5-d)*b,0.1*c,0.5*b,0.1*c);var d=0.07,f=0,g=-0.707*0.11,h=4*(Math.SQRT2-1)/3*d;I(a,(0.5+d+f)*b,(0.5+g)*c,!0);J(a,(0.5+d+f)*b,(0.5-h+g)*c,(0.5+h+f)*b,(0.5-d+g)*c,(0.5+f)*b,(0.5-d+g)*c);J(a,(0.5-h+f)*b,(0.5-d+g)*c,(0.5-d+f)*b,(0.5-h+g)*c,(0.5-d+f)*b,(0.5+g)*c);J(a,(0.5-d+f)*b,(0.5+h+g)*c,(0.5-h+f)*b,(0.5+d+g)*c,(0.5+f)*b,(0.5+d+g)*c);J(a,(0.5+h+f)*b,(0.5+d+g)*c,(0.5+d+f)*b,(0.5+h+g)*c,
(0.5+d+f)*b,(0.5+g)*c);d=0.07;f=-0.707*0.11;g=0.707*0.11;h=4*(Math.SQRT2-1)/3*d;I(a,(0.5+d+f)*b,(0.5+g)*c,!0);J(a,(0.5+d+f)*b,(0.5-h+g)*c,(0.5+h+f)*b,(0.5-d+g)*c,(0.5+f)*b,(0.5-d+g)*c);J(a,(0.5-h+f)*b,(0.5-d+g)*c,(0.5-d+f)*b,(0.5-h+g)*c,(0.5-d+f)*b,(0.5+g)*c);J(a,(0.5-d+f)*b,(0.5+h+g)*c,(0.5-h+f)*b,(0.5+d+g)*c,(0.5+f)*b,(0.5+d+g)*c);J(a,(0.5+h+f)*b,(0.5+d+g)*c,(0.5+d+f)*b,(0.5+h+g)*c,(0.5+d+f)*b,(0.5+g)*c);d=0.07;f=0.707*0.11;g=0.707*0.11;h=4*(Math.SQRT2-1)/3*d;I(a,(0.5+d+f)*b,(0.5+g)*c,!0);J(a,(0.5+
d+f)*b,(0.5-h+g)*c,(0.5+h+f)*b,(0.5-d+g)*c,(0.5+f)*b,(0.5-d+g)*c);J(a,(0.5-h+f)*b,(0.5-d+g)*c,(0.5-d+f)*b,(0.5-h+g)*c,(0.5-d+f)*b,(0.5+g)*c);J(a,(0.5-d+f)*b,(0.5+h+g)*c,(0.5-h+f)*b,(0.5+d+g)*c,(0.5+f)*b,(0.5+d+g)*c);J(a,(0.5+h+f)*b,(0.5+d+g)*c,(0.5+d+f)*b,(0.5+h+g)*c,(0.5+d+f)*b,(0.5+g)*c);b=a.s;b.G=new H(0.146,0.146);b.H=new H(0.853,0.853);b.Hc=Xg;t.v(a);return b},NotAllowed:function(a,b,c){var d=F.va,f=0.5*d,g=0.5;a=t.u();I(a,0.5*b,(0.5-g)*c,!0);J(a,(0.5-f)*b,(0.5-g)*c,(0.5-g)*b,(0.5-f)*c,(0.5-
g)*b,0.5*c);J(a,(0.5-g)*b,(0.5+f)*c,(0.5-f)*b,(0.5+g)*c,0.5*b,(0.5+g)*c);J(a,(0.5+f)*b,(0.5+g)*c,(0.5+g)*b,(0.5+f)*c,(0.5+g)*b,0.5*c);J(a,(0.5+g)*b,(0.5-f)*c,(0.5+f)*b,(0.5-g)*c,0.5*b,(0.5-g)*c);var g=0.4,f=0.4*d,d=t.K(),h=t.K(),k=t.K(),l=t.K();F.Vi(0.5,0.5-g,0.5+f,0.5-g,0.5+g,0.5-f,0.5+g,0.5,0.42,d,h,k,l,l);var m=t.K(),n=t.K(),p=t.K();F.Vi(0.5,0.5-g,0.5+f,0.5-g,0.5+g,0.5-f,0.5+g,0.5,0.58,l,l,p,m,n);var q=t.K(),r=t.K(),s=t.K();F.Vi(0.5,0.5+g,0.5-f,0.5+g,0.5-g,0.5+f,0.5-g,0.5,0.42,q,r,s,l,l);var u=
t.K(),v=t.K(),D=t.K();F.Vi(0.5,0.5+g,0.5-f,0.5+g,0.5-g,0.5+f,0.5-g,0.5,0.58,l,l,D,u,v);I(a,D.x*b,D.y*c,!0,!0);J(a,u.x*b,u.y*c,v.x*b,v.y*c,(0.5-g)*b,0.5*c);J(a,(0.5-g)*b,(0.5-f)*c,(0.5-f)*b,(0.5-g)*c,0.5*b,(0.5-g)*c);J(a,d.x*b,d.y*c,h.x*b,h.y*c,k.x*b,k.y*c);a.lineTo(D.x*b,D.y*c);L(a);I(a,s.x*b,s.y*c,!0,!0);a.lineTo(p.x*b,p.y*c);J(a,m.x*b,m.y*c,n.x*b,n.y*c,(0.5+g)*b,0.5*c);J(a,(0.5+g)*b,(0.5+f)*c,(0.5+f)*b,(0.5+g)*c,0.5*b,(0.5+g)*c);J(a,q.x*b,q.y*c,r.x*b,r.y*c,s.x*b,s.y*c);L(a);t.B(d);t.B(h);t.B(k);
t.B(l);t.B(m);t.B(n);t.B(p);t.B(q);t.B(r);t.B(s);t.B(u);t.B(v);t.B(D);b=a.s;t.v(a);b.Hc=Xg;return b},Fragile:function(a,b,c){a=t.u();I(a,0,0,!0);a.lineTo(0.25*b,0);a.lineTo(0.2*b,0.15*c);a.lineTo(0.3*b,0.25*c);a.lineTo(0.29*b,0.33*c);a.lineTo(0.35*b,0.25*c);a.lineTo(0.3*b,0.15*c);a.lineTo(0.4*b,0);a.lineTo(1*b,0);J(a,1*b,0.25*c,0.75*b,0.5*c,0.55*b,0.5*c);a.lineTo(0.55*b,0.9*c);a.lineTo(0.7*b,0.9*c);a.lineTo(0.7*b,1*c);a.lineTo(0.3*b,1*c);a.lineTo(0.3*b,0.9*c);a.lineTo(0.45*b,0.9*c);a.lineTo(0.45*
b,0.5*c);J(a,0.25*b,0.5*c,0,0.25*c,0,0);L(a);b=a.s;b.G=new H(0.25,0);b.H=new H(0.75,0.4);t.v(a);return b},HourGlass:function(a,b,c){a=t.u();I(a,0.65*b,0.5*c,!0);a.lineTo(1*b,1*c);a.lineTo(0,1*c);a.lineTo(0.35*b,0.5*c);a.lineTo(0,0);a.lineTo(1*b,0);L(a);b=a.s;t.v(a);return b},Lightning:function(a,b,c){a=t.u();I(a,0*b,0.55*c,!0);a.lineTo(0.75*b,0);a.lineTo(0.25*b,0.45*c);a.lineTo(0.9*b,0.48*c);a.lineTo(0.4*b,1*c);a.lineTo(0.65*b,0.55*c);L(a);b=a.s;t.v(a);return b},Parallelogram1:function(a,b,c){a=a?
a.Gc:0;0===a&&(a=0.1);var d=t.u();I(d,a*b,0,!0);d.lineTo(1*b,0);d.lineTo((1-a)*b,1*c);d.lineTo(0,1*c);L(d);b=d.s;b.G=new H(a,0);b.H=new H(1-a,1);t.v(d);return b},Input:"Output",Output:function(a,b,c){a=t.u();I(a,0,1*c,!0);a.lineTo(0.1*b,0);a.lineTo(1*b,0);a.lineTo(0.9*b,1*c);L(a);b=a.s;b.G=new H(0.1,0);b.H=new H(0.9,1);t.v(a);return b},Parallelogram2:function(a,b,c){a=a?a.Gc:0;0===a&&(a=0.25);var d=t.u();I(d,a*b,0,!0);d.lineTo(1*b,0);d.lineTo((1-a)*b,1*c);d.lineTo(0,1*c);L(d);b=d.s;b.G=new H(a,0);
b.H=new H(1-a,1);t.v(d);return b},ThickCross:function(a,b,c){a=a?a.Gc:0;0===a&&(a=0.25);var d=t.u();I(d,(0.5-a/2)*b,0,!0);d.lineTo((0.5+a/2)*b,0);d.lineTo((0.5+a/2)*b,(0.5-a/2)*c);d.lineTo(1*b,(0.5-a/2)*c);d.lineTo(1*b,(0.5+a/2)*c);d.lineTo((0.5+a/2)*b,(0.5+a/2)*c);d.lineTo((0.5+a/2)*b,1*c);d.lineTo((0.5-a/2)*b,1*c);d.lineTo((0.5-a/2)*b,(0.5+a/2)*c);d.lineTo(0,(0.5+a/2)*c);d.lineTo(0,(0.5-a/2)*c);d.lineTo((0.5-a/2)*b,(0.5-a/2)*c);L(d);b=d.s;b.G=new H(0.5-a/2,0.5-a/2);b.H=new H(0.5+a/2,0.5+a/2);t.v(d);
return b},ThickX:function(a,b,c){a=0.25/Math.SQRT2;var d=t.u();I(d,0.3*b,0,!0);d.lineTo(0.5*b,0.2*c);d.lineTo(0.7*b,0);d.lineTo(1*b,0.3*c);d.lineTo(0.8*b,0.5*c);d.lineTo(1*b,0.7*c);d.lineTo(0.7*b,1*c);d.lineTo(0.5*b,0.8*c);d.lineTo(0.3*b,1*c);d.lineTo(0,0.7*c);d.lineTo(0.2*b,0.5*c);d.lineTo(0,0.3*c);L(d);b=d.s;b.G=new H(0.5-a,0.5-a);b.H=new H(0.5+a,0.5+a);t.v(d);return b},ThinCross:function(a,b,c){var d=a?a.Gc:0;0===d&&(d=0.1);a=t.u();I(a,(0.5-d/2)*b,0,!0);a.lineTo((0.5+d/2)*b,0);a.lineTo((0.5+d/
2)*b,(0.5-d/2)*c);a.lineTo(1*b,(0.5-d/2)*c);a.lineTo(1*b,(0.5+d/2)*c);a.lineTo((0.5+d/2)*b,(0.5+d/2)*c);a.lineTo((0.5+d/2)*b,1*c);a.lineTo((0.5-d/2)*b,1*c);a.lineTo((0.5-d/2)*b,(0.5+d/2)*c);a.lineTo(0,(0.5+d/2)*c);a.lineTo(0,(0.5-d/2)*c);a.lineTo((0.5-d/2)*b,(0.5-d/2)*c);L(a);b=a.s;t.v(a);return b},ThinX:function(a,b,c){a=t.u();I(a,0.1*b,0,!0);a.lineTo(0.5*b,0.4*c);a.lineTo(0.9*b,0);a.lineTo(1*b,0.1*c);a.lineTo(0.6*b,0.5*c);a.lineTo(1*b,0.9*c);a.lineTo(0.9*b,1*c);a.lineTo(0.5*b,0.6*c);a.lineTo(0.1*
b,1*c);a.lineTo(0,0.9*c);a.lineTo(0.4*b,0.5*c);a.lineTo(0,0.1*c);L(a);return a.s},RightTriangle:function(a,b,c){a=t.u();I(a,0,0,!0);a.lineTo(1*b,1*c);a.lineTo(0,1*c);L(a);b=a.s;b.G=new H(0,0.5);b.H=new H(0.5,1);t.v(a);return b},RoundedIBeam:function(a,b,c){a=t.u();I(a,0,0,!0);a.lineTo(1*b,0);J(a,0.5*b,0.25*c,0.5*b,0.75*c,1*b,1*c);a.lineTo(0,1*c);J(a,0.5*b,0.75*c,0.5*b,0.25*c,0,0);L(a);b=a.s;t.v(a);return b},RoundedRectangle:function(a,b,c){var d=a?a.Gc:0;0>=d&&(d=5);d=Math.min(d,b/3);d=Math.min(d,
c/3);a=d*F.va;var f=t.u();I(f,d,0,!0);f.lineTo(b-d,0);J(f,b-a,0,b,a,b,d);f.lineTo(b,c-d);J(f,b,c-a,b-a,c,b-d,c);f.lineTo(d,c);J(f,a,c,0,c-a,0,c-d);f.lineTo(0,d);J(f,0,a,a,0,d,0);L(f);b=f.s;1<a?(b.G=new H(0,0,a,a),b.H=new H(1,1,-a,-a)):(b.G=Eb,b.H=Pb);t.v(f);return b},Border:function(a,b,c){var d=a?a.Gc:0;0>=d&&(d=5);d=Math.min(d,b/3);d=Math.min(d,c/3);a=t.u();I(a,d,0,!0);a.lineTo(b-d,0);J(a,b-0,0,b,0,b,d);a.lineTo(b,c-d);J(a,b,c-0,b-0,c,b-d,c);a.lineTo(d,c);J(a,0,c,0,c-0,0,c-d);a.lineTo(0,d);J(a,
0,0,0,0,d,0);L(a);b=a.s;b.G=Eb;b.H=Pb;t.v(a);return b},SquareIBeam:function(a,b,c){var d=a?a.Gc:0;0===d&&(d=0.2);a=t.u();I(a,0,0,!0);a.lineTo(1*b,0);a.lineTo(1*b,d*c);a.lineTo((0.5+d/2)*b,d*c);a.lineTo((0.5+d/2)*b,(1-d)*c);a.lineTo(1*b,(1-d)*c);a.lineTo(1*b,1*c);a.lineTo(0,1*c);a.lineTo(0,(1-d)*c);a.lineTo((0.5-d/2)*b,(1-d)*c);a.lineTo((0.5-d/2)*b,d*c);a.lineTo(0,d*c);L(a);b=a.s;t.v(a);return b},Trapezoid:function(a,b,c){a=a?a.Gc:0;0===a&&(a=0.2);var d=t.u();I(d,a*b,0,!0);d.lineTo((1-a)*b,0);d.lineTo(1*
b,1*c);d.lineTo(0,1*c);L(d);b=d.s;b.G=new H(a,0);b.H=new H(1-a,1);t.v(d);return b},ManualLoop:"ManualOperation",ManualOperation:function(a,b,c){var d=a?a.Gc:0;a=t.u();I(a,d,0,!0);a.lineTo(0,0);a.lineTo(1*b,0);a.lineTo(0.9*b,1*c);a.lineTo(0.1*b,1*c);L(a);b=a.s;b.G=new H(0.1,0);b.H=new H(0.9,1);t.v(a);return b},GenderMale:function(a,b,c){a=t.u();var d=F.va,f=0.4*d,g=0.4,h=t.K(),k=t.K(),l=t.K(),m=t.K();I(a,(0.5-g)*b,0.5*c,!0);J(a,(0.5-g)*b,(0.5-f)*c,(0.5-f)*b,(0.5-g)*c,0.5*b,(0.5-g)*c);F.Vi(0.5,0.5-
g,0.5+f,0.5-g,0.5+g,0.5-f,0.5+g,0.5,0.44,l,m,k,h,h);J(a,l.x*b,l.y*c,m.x*b,m.y*c,k.x*b,k.y*c);var n=t.mc(k.x,k.y);F.Vi(0.5,0.5-g,0.5+f,0.5-g,0.5+g,0.5-f,0.5+g,0.5,0.56,h,h,k,l,m);var p=t.mc(k.x,k.y);a.lineTo((0.1*n.x+0.855)*b,0.1*n.y*c);a.lineTo(0.85*b,0.1*n.y*c);a.lineTo(0.85*b,0);a.lineTo(1*b,0);a.lineTo(1*b,0.15*c);a.lineTo((0.1*p.x+0.9)*b,0.15*c);a.lineTo((0.1*p.x+0.9)*b,(0.1*p.y+0.05*0.9)*c);a.lineTo(p.x*b,p.y*c);J(a,l.x*b,l.y*c,m.x*b,m.y*c,(0.5+g)*b,0.5*c);J(a,(0.5+g)*b,(0.5+f)*c,(0.5+f)*b,(0.5+
g)*c,0.5*b,(0.5+g)*c);J(a,(0.5-f)*b,(0.5+g)*c,(0.5-g)*b,(0.5+f)*c,(0.5-g)*b,0.5*c);g=0.35;f=0.35*d;I(a,0.5*b,(0.5-g)*c,!0,!0);J(a,(0.5-f)*b,(0.5-g)*c,(0.5-g)*b,(0.5-f)*c,(0.5-g)*b,0.5*c);J(a,(0.5-g)*b,(0.5+f)*c,(0.5-f)*b,(0.5+g)*c,0.5*b,(0.5+g)*c);J(a,(0.5+f)*b,(0.5+g)*c,(0.5+g)*b,(0.5+f)*c,(0.5+g)*b,0.5*c);J(a,(0.5+g)*b,(0.5-f)*c,(0.5+f)*b,(0.5-g)*c,0.5*b,(0.5-g)*c);I(a,(0.5-g)*b,0.5*c,!0);t.B(h);t.B(k);t.B(l);t.B(m);t.B(n);t.B(p);b=a.s;b.G=new H(0.202,0.257);b.H=new H(0.692,0.839);b.Hc=Xg;t.v(a);
return b},GenderFemale:function(a,b,c){a=t.u();var d=0.375,f=0,g=-0.125,h=4*(Math.SQRT2-1)/3*d;I(a,(0.525+f)*b,(0.5+d+g)*c,!0);J(a,(0.5+h+f)*b,(0.5+d+g)*c,(0.5+d+f)*b,(0.5+h+g)*c,(0.5+d+f)*b,(0.5+g)*c);J(a,(0.5+d+f)*b,(0.5-h+g)*c,(0.5+h+f)*b,(0.5-d+g)*c,(0.5+f)*b,(0.5-d+g)*c);J(a,(0.5-h+f)*b,(0.5-d+g)*c,(0.5-d+f)*b,(0.5-h+g)*c,(0.5-d+f)*b,(0.5+g)*c);J(a,(0.5-d+f)*b,(0.5+h+g)*c,(0.5-h+f)*b,(0.5+d+g)*c,(0.475+f)*b,(0.5+d+g)*c);a.lineTo(0.475*b,0.85*c);a.lineTo(0.425*b,0.85*c);a.lineTo(0.425*b,0.9*c);
a.lineTo(0.475*b,0.9*c);a.lineTo(0.475*b,1*c);a.lineTo(0.525*b,1*c);a.lineTo(0.525*b,0.9*c);a.lineTo(0.575*b,0.9*c);a.lineTo(0.575*b,0.85*c);a.lineTo(0.525*b,0.85*c);L(a);d=0.325;f=0;g=-0.125;h=4*(Math.SQRT2-1)/3*d;I(a,(0.5+d+f)*b,(0.5+g)*c,!0,!0);J(a,(0.5+d+f)*b,(0.5+h+g)*c,(0.5+h+f)*b,(0.5+d+g)*c,(0.5+f)*b,(0.5+d+g)*c);J(a,(0.5-h+f)*b,(0.5+d+g)*c,(0.5-d+f)*b,(0.5+h+g)*c,(0.5-d+f)*b,(0.5+g)*c);J(a,(0.5-d+f)*b,(0.5-h+g)*c,(0.5-h+f)*b,(0.5-d+g)*c,(0.5+f)*b,(0.5-d+g)*c);J(a,(0.5+h+f)*b,(0.5-d+g)*c,
(0.5+d+f)*b,(0.5-h+g)*c,(0.5+d+f)*b,(0.5+g)*c);I(a,(0.525+f)*b,(0.5+d+g)*c,!0);b=a.s;b.G=new H(0.232,0.136);b.H=new H(0.782,0.611);b.Hc=Xg;t.v(a);return b},PlusLine:function(a,b,c){a=t.u();I(a,0,0.5*c,!1);a.lineTo(1*b,0.5*c);a.moveTo(0.5*b,0);a.lineTo(0.5*b,1*c);b=a.s;t.v(a);return b},XLine:function(a,b,c){a=t.u();I(a,0,1*c,!1);a.lineTo(1*b,0);a.moveTo(0,0);a.lineTo(1*b,1*c);b=a.s;t.v(a);return b},AsteriskLine:function(a,b,c){a=t.u();var d=0.2/Math.SQRT2;I(a,d*b,(1-d)*c,!1);a.lineTo((1-d)*b,d*c);
a.moveTo(d*b,d*c);a.lineTo((1-d)*b,(1-d)*c);a.moveTo(0*b,0.5*c);a.lineTo(1*b,0.5*c);a.moveTo(0.5*b,0*c);a.lineTo(0.5*b,1*c);b=a.s;t.v(a);return b},CircleLine:function(a,b,c){var d=0.5*F.va;a=t.u();I(a,1*b,0.5*c,!1);J(a,1*b,(0.5+d)*c,(0.5+d)*b,1*c,0.5*b,1*c);J(a,(0.5-d)*b,1*c,0,(0.5+d)*c,0,0.5*c);J(a,0,(0.5-d)*c,(0.5-d)*b,0,0.5*b,0);J(a,(0.5+d)*b,0,1*b,(0.5-d)*c,1*b,0.5*c);b=a.s;b.G=new H(0.146,0.146);b.H=new H(0.853,0.853);b.Hc=Xg;t.v(a);return b},Pie:function(a,b,c){a=t.u();var d=4*(Math.SQRT2-1)/
3*0.5;I(a,(0.5*Math.SQRT2/2+0.5)*b,(0.5-0.5*Math.SQRT2/2)*c,!0);J(a,0.7*b,0*c,0.5*b,0*c,0.5*b,0*c);J(a,(0.5-d+0)*b,0*c,0*b,(0.5-d+0)*c,0*b,0.5*c);J(a,0*b,(0.5+d+0)*c,(0.5-d+0)*b,1*c,0.5*b,1*c);J(a,(0.5+d+0)*b,1*c,1*b,(0.5+d+0)*c,1*b,0.5*c);a.lineTo(0.5*b,0.5*c);L(a);b=a.s;t.v(a);return b},PiePiece:function(a,b,c){var d=F.va/Math.SQRT2*0.5,f=Math.SQRT2/2,g=1-Math.SQRT2/2;a=t.u();I(a,b,c,!0);J(a,b,(1-d)*c,(f+d)*b,(g+d)*c,f*b,g*c);a.lineTo(0,c);L(a);b=a.s;t.v(a);return b},StopSign:function(a,b,c){a=
1/(Math.SQRT2+2);var d=t.u();I(d,a*b,0,!0);d.lineTo((1-a)*b,0);d.lineTo(1*b,a*c);d.lineTo(1*b,(1-a)*c);d.lineTo((1-a)*b,1*c);d.lineTo(a*b,1*c);d.lineTo(0,(1-a)*c);d.lineTo(0,a*c);L(d);b=d.s;b.G=new H(a/2,a/2);b.H=new H(1-a/2,1-a/2);t.v(d);return b},LogicImplies:function(a,b,c){var d=a?a.Gc:0;0===d&&(d=0.2);a=t.u();I(a,(1-d)*b,0*c,!1);a.lineTo(1*b,0.5*c);a.lineTo((1-d)*b,c);a.moveTo(0,0.5*c);a.lineTo(b,0.5*c);b=a.s;b.G=Eb;b.H=new H(0.8,0.5);t.v(a);return b},LogicIff:function(a,b,c){var d=a?a.Gc:0;
0===d&&(d=0.2);a=t.u();I(a,(1-d)*b,0*c,!1);a.lineTo(1*b,0.5*c);a.lineTo((1-d)*b,c);a.moveTo(0,0.5*c);a.lineTo(b,0.5*c);a.moveTo(d*b,0);a.lineTo(0,0.5*c);a.lineTo(d*b,c);b=a.s;b.G=new H(0.2,0);b.H=new H(0.8,0.5);t.v(a);return b},LogicNot:function(a,b,c){a=t.u();I(a,0,0,!1);a.lineTo(1*b,0);a.lineTo(1*b,1*c);b=a.s;t.v(a);return b},LogicAnd:function(a,b,c){a=t.u();I(a,0,1*c,!1);a.lineTo(0.5*b,0);a.lineTo(1*b,1*c);b=a.s;b.G=new H(0.25,0.5);b.H=new H(0.75,1);t.v(a);return b},LogicOr:function(a,b,c){a=t.u();
I(a,0,0,!1);a.lineTo(0.5*b,1*c);a.lineTo(1*b,0);b=a.s;b.G=new H(0.219,0);b.H=new H(0.78,0.409);t.v(a);return b},LogicXor:function(a,b,c){a=t.u();I(a,0.5*b,0,!1);a.lineTo(0.5*b,1*c);a.moveTo(0,0.5*c);a.lineTo(1*b,0.5*c);var d=0.5*F.va;J(a,1*b,(0.5+d)*c,(0.5+d)*b,1*c,0.5*b,1*c);J(a,(0.5-d)*b,1*c,0,(0.5+d)*c,0,0.5*c);J(a,0,(0.5-d)*c,(0.5-d)*b,0,0.5*b,0);J(a,(0.5+d)*b,0,1*b,(0.5-d)*c,1*b,0.5*c);b=a.s;b.Hc=Xg;t.v(a);return b},LogicTruth:function(a,b,c){a=t.u();I(a,0,0,!1);a.lineTo(1*b,0);a.moveTo(0.5*
b,0);a.lineTo(0.5*b,1*c);b=a.s;t.v(a);return b},LogicFalsity:function(a,b,c){a=t.u();I(a,0,1*c,!1);a.lineTo(1*b,1*c);a.moveTo(0.5*b,1*c);a.lineTo(0.5*b,0);b=a.s;t.v(a);return b},LogicThereExists:function(a,b,c){a=t.u();I(a,0,0,!1);a.lineTo(1*b,0);a.lineTo(1*b,0.5*c);a.lineTo(0,0.5*c);a.moveTo(1*b,0.5*c);a.lineTo(1*b,1*c);a.lineTo(0,1*c);b=a.s;t.v(a);return b},LogicForAll:function(a,b,c){a=t.u();I(a,0,0,!1);a.lineTo(0.5*b,1*c);a.lineTo(1*b,0);a.moveTo(0.25*b,0.5*c);a.lineTo(0.75*b,0.5*c);b=a.s;b.G=
new H(0.25,0);b.H=new H(0.75,0.5);t.v(a);return b},LogicIsDefinedAs:function(a,b,c){a=t.u();I(a,0,0,!1);a.lineTo(b,0);a.moveTo(0,0.5*c);a.lineTo(b,0.5*c);a.moveTo(0,c);a.lineTo(b,c);b=a.s;b.G=new H(0.01,0.01);b.H=new H(0.99,0.49);t.v(a);return b},LogicIntersect:function(a,b,c){var d=0.5*F.va;a=t.u();I(a,0,1*c,!1);a.lineTo(0,0.5*c);J(a,0,(0.5-d)*c,(0.5-d)*b,0,0.5*b,0);J(a,(0.5+d)*b,0,1*b,(0.5-d)*c,1*b,0.5*c);a.lineTo(1*b,1*c);b=a.s;b.G=new H(0,0.5);b.H=Pb;t.v(a);return b},LogicUnion:function(a,b,c){var d=
0.5*F.va;a=t.u();I(a,1*b,0,!1);a.lineTo(1*b,0.5*c);J(a,1*b,(0.5+d)*c,(0.5+d)*b,1*c,0.5*b,1*c);J(a,(0.5-d)*b,1*c,0,(0.5+d)*c,0,0.5*c);a.lineTo(0,0);b=a.s;b.G=Eb;b.H=new H(1,0.5);t.v(a);return b},Arrow:function(a,b,c){var d=a?a.Gc:0,f=a?a.Ft:0;0===d&&(d=0.3);0===f&&(f=0.3);a=t.u();I(a,0,(0.5-f/2)*c,!0);a.lineTo((1-d)*b,(0.5-f/2)*c);a.lineTo((1-d)*b,0);a.lineTo(1*b,0.5*c);a.lineTo((1-d)*b,1*c);a.lineTo((1-d)*b,(0.5+f/2)*c);a.lineTo(0,(0.5+f/2)*c);L(a);b=a.s;b.G=new H(0,0.5-f/2);d=F.jl(0,0.5+f/2,1,0.5+
f/2,1-d,1,1,0.5,t.K());b.H=new H(d.x,d.y);t.B(d);t.v(a);return b},ISOProcess:"Chevron",Chevron:function(a,b,c){a=t.u();I(a,0,0,!0);a.lineTo(0.5*b,0);a.lineTo(1*b,0.5*c);a.lineTo(0.5*b,1*c);a.lineTo(0,1*c);a.lineTo(0.5*b,0.5*c);L(a);b=a.s;t.v(a);return b},DoubleArrow:function(a,b,c){a=t.u();I(a,0,0,!0);a.lineTo(0.3*b,0.214*c);a.lineTo(0.3*b,0);a.lineTo(1*b,0.5*c);a.lineTo(0.3*b,1*c);a.lineTo(0.3*b,0.786*c);a.lineTo(0,1*c);L(a);I(a,0.3*b,0.214*c,!1);a.lineTo(0.3*b,0.786*c);a.bb(!1);b=a.s;t.v(a);return b},
DoubleEndArrow:function(a,b,c){a=t.u();I(a,1*b,0.5*c,!0);a.lineTo(0.7*b,1*c);a.lineTo(0.7*b,0.7*c);a.lineTo(0.3*b,0.7*c);a.lineTo(0.3*b,1*c);a.lineTo(0,0.5*c);a.lineTo(0.3*b,0);a.lineTo(0.3*b,0.3*c);a.lineTo(0.7*b,0.3*c);a.lineTo(0.7*b,0);L(a);b=a.s;c=F.jl(0,0.5,0.3,0,0,0.3,0.3,0.3,t.K());b.G=new H(c.x,c.y);c=F.jl(0.7,1,1,0.5,0.7,0.7,1,0.7,c);b.H=new H(c.x,c.y);t.B(c);t.v(a);return b},IBeamArrow:function(a,b,c){a=t.u();I(a,1*b,0.5*c,!0);a.lineTo(0.7*b,1*c);a.lineTo(0.7*b,0.7*c);a.lineTo(0.2*b,0.7*
c);a.lineTo(0.2*b,1*c);a.lineTo(0,1*c);a.lineTo(0,0);a.lineTo(0.2*b,0);a.lineTo(0.2*b,0.3*c);a.lineTo(0.7*b,0.3*c);a.lineTo(0.7*b,0);L(a);b=a.s;b.G=new H(0,0.3);c=F.jl(0.7,1,1,0.5,0.7,0.7,1,0.7,t.K());b.H=new H(c.x,c.y);t.B(c);t.v(a);return b},Pointer:function(a,b,c){a=t.u();I(a,1*b,0.5*c,!0);a.lineTo(0,1*c);a.lineTo(0.2*b,0.5*c);a.lineTo(0,0);L(a);b=a.s;b.G=new H(0.2,0.35);c=F.jl(0.2,0.65,1,0.65,0,1,1,0.5,t.K());b.H=new H(c.x,c.y);t.B(c);t.v(a);return b},RoundedPointer:function(a,b,c){a=t.u();I(a,
1*b,0.5*c,!0);a.lineTo(0,1*c);J(a,0.5*b,0.75*c,0.5*b,0.25*c,0,0);L(a);b=a.s;b.G=new H(0.4,0.35);c=F.jl(0.2,0.65,1,0.65,0,1,1,0.5,t.K());b.H=new H(c.x,c.y);t.B(c);t.v(a);return b},SplitEndArrow:function(a,b,c){a=t.u();I(a,1*b,0.5*c,!0);a.lineTo(0.7*b,1*c);a.lineTo(0.7*b,0.7*c);a.lineTo(0,0.7*c);a.lineTo(0.2*b,0.5*c);a.lineTo(0,0.3*c);a.lineTo(0.7*b,0.3*c);a.lineTo(0.7*b,0);L(a);b=a.s;b.G=new H(0.2,0.3);c=F.jl(0.7,1,1,0.5,0.7,0.7,1,0.7,t.K());b.H=new H(c.x,c.y);t.B(c);t.v(a);return b},MessageToUser:"SquareArrow",
SquareArrow:function(a,b,c){a=t.u();I(a,1*b,0.5*c,!0);a.lineTo(0.7*b,1*c);a.lineTo(0,1*c);a.lineTo(0,0);a.lineTo(0.7*b,0);L(a);b=a.s;b.G=Eb;b.H=new H(0.7,1);t.v(a);return b},Cone1:function(a,b,c){var d=F.va;a=0.5*d;var f=0.1*d,d=t.u();I(d,0,0.9*c,!0);d.lineTo(0.5*b,0);d.lineTo(1*b,0.9*c);J(d,1*b,(0.9+f)*c,(0.5+a)*b,1*c,0.5*b,1*c);J(d,(0.5-a)*b,1*c,0,(0.9+f)*c,0,0.9*c);L(d);b=d.s;b.G=new H(0.25,0.5);b.H=new H(0.75,0.97);t.v(d);return b},Cone2:function(a,b,c){a=t.u();I(a,0,0.9*c,!0);J(a,(1-0.85/0.9)*
b,1*c,0.85/0.9*b,1*c,1*b,0.9*c);a.lineTo(0.5*b,0);a.lineTo(0,0.9*c);L(a);I(a,0,0.9*c,!1);J(a,(1-0.85/0.9)*b,0.8*c,0.85/0.9*b,0.8*c,1*b,0.9*c);a.bb(!1);b=a.s;b.G=new H(0.25,0.5);b.H=new H(0.75,0.82);t.v(a);return b},Cube1:function(a,b,c){a=t.u();I(a,0.5*b,1*c,!0);a.lineTo(1*b,0.85*c);a.lineTo(1*b,0.15*c);a.lineTo(0.5*b,0*c);a.lineTo(0*b,0.15*c);a.lineTo(0*b,0.85*c);L(a);I(a,0.5*b,1*c,!1);a.lineTo(0.5*b,0.3*c);a.lineTo(0,0.15*c);a.moveTo(0.5*b,0.3*c);a.lineTo(1*b,0.15*c);a.bb(!1);b=a.s;b.G=new H(0,
0.3);b.H=new H(0.5,0.85);t.v(a);return b},Cube2:function(a,b,c){a=t.u();I(a,0,0.3*c,!0);a.lineTo(0*b,1*c);a.lineTo(0.7*b,c);a.lineTo(1*b,0.7*c);a.lineTo(1*b,0*c);a.lineTo(0.3*b,0*c);L(a);I(a,0,0.3*c,!1);a.lineTo(0.7*b,0.3*c);a.lineTo(1*b,0*c);a.moveTo(0.7*b,0.3*c);a.lineTo(0.7*b,1*c);a.bb(!1);b=a.s;b.G=new H(0,0.3);b.H=new H(0.7,1);t.v(a);return b},MagneticData:"Cylinder1",Cylinder1:function(a,b,c){var d=F.va;a=0.5*d;var f=0.1*d,d=t.u();I(d,0,0.1*c,!0);J(d,0,(0.1-f)*c,(0.5-a)*b,0,0.5*b,0);J(d,(0.5+
a)*b,0,1*b,(0.1-f)*c,1*b,0.1*c);d.lineTo(b,0.9*c);J(d,1*b,(0.9+f)*c,(0.5+a)*b,1*c,0.5*b,1*c);J(d,(0.5-a)*b,1*c,0,(0.9+f)*c,0,0.9*c);d.lineTo(0,0.1*c);I(d,0,0.1*c,!1);J(d,0,(0.1+f)*c,(0.5-a)*b,0.2*c,0.5*b,0.2*c);J(d,(0.5+a)*b,0.2*c,1*b,(0.1+f)*c,1*b,0.1*c);d.bb(!1);b=d.s;b.G=new H(0,0.2);b.H=new H(1,0.9);t.v(d);return b},Cylinder2:function(a,b,c){var d=F.va;a=0.5*d;var f=0.1*d,d=t.u();I(d,0,0.9*c,!0);d.lineTo(0,0.1*c);J(d,0,(0.1-f)*c,(0.5-a)*b,0,0.5*b,0);J(d,(0.5+a)*b,0,1*b,(0.1-f)*c,1*b,0.1*c);d.lineTo(1*
b,0.9*c);J(d,1*b,(0.9+f)*c,(0.5+a)*b,1*c,0.5*b,1*c);J(d,(0.5-a)*b,1*c,0,(0.9+f)*c,0,0.9*c);I(d,0,0.9*c,!1);J(d,0,(0.9-f)*c,(0.5-a)*b,0.8*c,0.5*b,0.8*c);J(d,(0.5+a)*b,0.8*c,1*b,(0.9-f)*c,1*b,0.9*c);d.bb(!1);b=d.s;b.G=new H(0,0.1);b.H=new H(1,0.8);t.v(d);return b},Cylinder3:function(a,b,c){var d=F.va;a=0.1*d;var f=0.5*d,d=t.u();I(d,0.1*b,0,!0);d.lineTo(0.9*b,0);J(d,(0.9+a)*b,0,1*b,(0.5-f)*c,1*b,0.5*c);J(d,1*b,(0.5+f)*c,(0.9+a)*b,1*c,0.9*b,1*c);d.lineTo(0.1*b,1*c);J(d,(0.1-a)*b,1*c,0,(0.5+f)*c,0,0.5*
c);J(d,0,(0.5-f)*c,(0.1-a)*b,0,0.1*b,0);I(d,0.1*b,0,!1);J(d,(0.1+a)*b,0,0.2*b,(0.5-f)*c,0.2*b,0.5*c);J(d,0.2*b,(0.5+f)*c,(0.1+a)*b,1*c,0.1*b,1*c);d.bb(!1);b=d.s;b.G=new H(0.2,0);b.H=new H(0.9,1);t.v(d);return b},DirectData:"Cylinder4",Cylinder4:function(a,b,c){var d=F.va;a=0.1*d;var f=0.5*d,d=t.u();I(d,0.9*b,0,!0);J(d,(0.9+a)*b,0,1*b,(0.5-f)*c,1*b,0.5*c);J(d,1*b,(0.5+f)*c,(0.9+a)*b,1*c,0.9*b,1*c);d.lineTo(0.1*b,1*c);J(d,(0.1-a)*b,1*c,0,(0.5+f)*c,0,0.5*c);J(d,0,(0.5-f)*c,(0.1-a)*b,0,0.1*b,0);d.lineTo(0.9*
b,0);I(d,0.9*b,0,!1);J(d,(0.9-a)*b,0,0.8*b,(0.5-f)*c,0.8*b,0.5*c);J(d,0.8*b,(0.5+f)*c,(0.9-a)*b,1*c,0.9*b,1*c);d.bb(!1);b=d.s;b.G=new H(0.1,0);b.H=new H(0.8,1);t.v(d);return b},Prism1:function(a,b,c){a=t.u();I(a,0.25*b,0.25*c,!0);a.lineTo(0.75*b,0);a.lineTo(b,0.5*c);a.lineTo(0.5*b,c);a.lineTo(0,c);L(a);I(a,0.25*b,0.25*c,!1);a.lineTo(0.5*b,c);a.bb(!1);b=a.s;b.G=new H(0.408,0.172);b.H=new H(0.833,0.662);t.v(a);return b},Prism2:function(a,b,c){a=t.u();I(a,0,0.25*c,!0);a.lineTo(0.75*b,0);a.lineTo(1*b,
0.25*c);a.lineTo(0.75*b,0.75*c);a.lineTo(0,1*c);L(a);I(a,0,c,!1);a.lineTo(0.25*b,0.5*c);a.lineTo(b,0.25*c);a.moveTo(0,0.25*c);a.lineTo(0.25*b,0.5*c);a.bb(!1);b=a.s;b.G=new H(0.25,0.5);b.H=new H(0.75,0.75);t.v(a);return b},Pyramid1:function(a,b,c){a=t.u();I(a,0.5*b,0,!0);a.lineTo(b,0.75*c);a.lineTo(0.5*b,1*c);a.lineTo(0,0.75*c);L(a);I(a,0.5*b,0,!1);a.lineTo(0.5*b,1*c);a.bb(!1);b=a.s;b.G=new H(0.25,0.367);b.H=new H(0.75,0.875);t.v(a);return b},Pyramid2:function(a,b,c){a=t.u();I(a,0.5*b,0,!0);a.lineTo(b,
0.85*c);a.lineTo(0.5*b,1*c);a.lineTo(0,0.85*c);L(a);I(a,0.5*b,0,!1);a.lineTo(0.5*b,0.7*c);a.lineTo(0,0.85*c);a.moveTo(0.5*b,0.7*c);a.lineTo(1*b,0.85*c);a.bb(!1);b=a.s;b.G=new H(0.25,0.367);b.H=new H(0.75,0.875);t.v(a);return b},Actor:function(a,b,c){var d=F.va,f=0.2*d,g=0.1*d,h=0.5,k=0.1;a=t.u();I(a,h*b,(k+0.1)*c,!0);J(a,(h-f)*b,(k+0.1)*c,(h-0.2)*b,(k+g)*c,(h-0.2)*b,k*c);J(a,(h-0.2)*b,(k-g)*c,(h-f)*b,(k-0.1)*c,h*b,(k-0.1)*c);J(a,(h+f)*b,(k-0.1)*c,(h+0.2)*b,(k-g)*c,(h+0.2)*b,k*c);J(a,(h+0.2)*b,(k+
g)*c,(h+f)*b,(k+0.1)*c,h*b,(k+0.1)*c);f=0.05;g=d*f;I(a,0.5*b,0.2*c,!0);a.lineTo(0.95*b,0.2*c);h=0.95;k=0.25;J(a,(h+g)*b,(k-f)*c,(h+f)*b,(k-g)*c,(h+f)*b,k*c);a.lineTo(1*b,0.6*c);a.lineTo(0.85*b,0.6*c);a.lineTo(0.85*b,0.35*c);f=0.025;g=d*f;h=0.825;k=0.35;J(a,(h+f)*b,(k-g)*c,(h+g)*b,(k-f)*c,h*b,(k-f)*c);J(a,(h-g)*b,(k-f)*c,(h-f)*b,(k-g)*c,(h-f)*b,k*c);a.lineTo(0.8*b,1*c);a.lineTo(0.55*b,1*c);a.lineTo(0.55*b,0.7*c);f=0.05;g=d*f;h=0.5;k=0.7;J(a,(h+f)*b,(k-g)*c,(h+g)*b,(k-f)*c,h*b,(k-f)*c);J(a,(h-g)*b,
(k-f)*c,(h-f)*b,(k-g)*c,(h-f)*b,k*c);a.lineTo(0.45*b,1*c);a.lineTo(0.2*b,1*c);a.lineTo(0.2*b,0.35*c);f=0.025;g=d*f;h=0.175;k=0.35;J(a,(h+f)*b,(k-g)*c,(h+g)*b,(k-f)*c,h*b,(k-f)*c);J(a,(h-g)*b,(k-f)*c,(h-f)*b,(k-g)*c,(h-f)*b,k*c);a.lineTo(0.15*b,0.6*c);a.lineTo(0*b,0.6*c);a.lineTo(0*b,0.25*c);f=0.05;g=d*f;h=0.05;k=0.25;J(a,(h-f)*b,(k-g)*c,(h-g)*b,(k-f)*c,h*b,(k-f)*c);a.lineTo(0.5*b,0.2*c);b=a.s;b.G=new H(0.2,0.2);b.H=new H(0.8,0.65);t.v(a);return b},Card:function(a,b,c){a=t.u();I(a,1*b,0*c,!0);a.lineTo(1*
b,1*c);a.lineTo(0*b,1*c);a.lineTo(0*b,0.2*c);a.lineTo(0.2*b,0*c);L(a);b=a.s;b.G=new H(0,0.2);b.H=Pb;t.v(a);return b},Collate:function(a,b,c){a=t.u();I(a,0.5*b,0.5*c,!0);a.lineTo(0,0);a.lineTo(1*b,0);a.lineTo(0.5*b,0.5*c);I(a,0.5*b,0.5*c,!0);a.lineTo(1*b,1*c);a.lineTo(0,1*c);a.lineTo(0.5*b,0.5*c);b=a.s;b.G=new H(0.25,0);b.H=new H(0.75,0.25);t.v(a);return b},CreateRequest:function(a,b,c){a=a?a.Gc:0;0===a&&(a=0.1);var d=t.u();I(d,0,0,!0);d.lineTo(1*b,0);d.lineTo(1*b,1*c);d.lineTo(0,1*c);L(d);I(d,0,a*
c,!1);d.lineTo(1*b,a*c);d.moveTo(0,(1-a)*c);d.lineTo(1*b,(1-a)*c);d.bb(!1);b=d.s;b.G=new H(0,a);b.H=new H(1,1-a);t.v(d);return b},Database:function(a,b,c){a=t.u();var d=F.va,f=0.5*d,d=0.1*d;I(a,1*b,0.1*c,!0);a.lineTo(1*b,0.9*c);J(a,1*b,(0.9+d)*c,(0.5+f)*b,1*c,0.5*b,1*c);J(a,(0.5-f)*b,1*c,0,(0.9+d)*c,0,0.9*c);a.lineTo(0,0.1*c);J(a,0,(0.1-d)*c,(0.5-f)*b,0,0.5*b,0);J(a,(0.5+f)*b,0,1*b,(0.1-d)*c,1*b,0.1*c);I(a,1*b,0.1*c,!1);J(a,1*b,(0.1+d)*c,(0.5+f)*b,0.2*c,0.5*b,0.2*c);J(a,(0.5-f)*b,0.2*c,0,(0.1+d)*
c,0,0.1*c);a.moveTo(1*b,0.2*c);J(a,1*b,(0.2+d)*c,(0.5+f)*b,0.3*c,0.5*b,0.3*c);J(a,(0.5-f)*b,0.3*c,0,(0.2+d)*c,0,0.2*c);a.moveTo(1*b,0.3*c);J(a,1*b,(0.3+d)*c,(0.5+f)*b,0.4*c,0.5*b,0.4*c);J(a,(0.5-f)*b,0.4*c,0,(0.3+d)*c,0,0.3*c);a.bb(!1);b=a.s;b.G=new H(0,0.4);b.H=new H(1,0.9);t.v(a);return b},StoredData:"DataStorage",DataStorage:function(a,b,c){a=t.u();I(a,0,0,!0);a.lineTo(0.75*b,0);J(a,1*b,0,1*b,1*c,0.75*b,1*c);a.lineTo(0,1*c);J(a,0.25*b,0.9*c,0.25*b,0.1*c,0,0);L(a);b=a.s;b.G=new H(0.226,0);b.H=new H(0.81,
1);t.v(a);return b},DiskStorage:function(a,b,c){a=t.u();var d=F.va,f=0.5*d,d=0.1*d;I(a,1*b,0.1*c,!0);a.lineTo(1*b,0.9*c);J(a,1*b,(0.9+d)*c,(0.5+f)*b,1*c,0.5*b,1*c);J(a,(0.5-f)*b,1*c,0,(0.9+d)*c,0,0.9*c);a.lineTo(0,0.1*c);J(a,0,(0.1-d)*c,(0.5-f)*b,0,0.5*b,0);J(a,(0.5+f)*b,0,1*b,(0.1-d)*c,1*b,0.1*c);I(a,1*b,0.1*c,!1);J(a,1*b,(0.1+d)*c,(0.5+f)*b,0.2*c,0.5*b,0.2*c);J(a,(0.5-f)*b,0.2*c,0,(0.1+d)*c,0,0.1*c);a.moveTo(1*b,0.2*c);J(a,1*b,(0.2+d)*c,(0.5+f)*b,0.3*c,0.5*b,0.3*c);J(a,(0.5-f)*b,0.3*c,0,(0.2+d)*
c,0,0.2*c);a.bb(!1);b=a.s;b.G=new H(0,0.3);b.H=new H(1,0.9);t.v(a);return b},Display:function(a,b,c){a=t.u();I(a,0.25*b,0,!0);a.lineTo(0.75*b,0);J(a,1*b,0,1*b,1*c,0.75*b,1*c);a.lineTo(0.25*b,1*c);a.lineTo(0,0.5*c);L(a);b=a.s;b.G=new H(0.25,0);b.H=new H(0.75,1);t.v(a);return b},DividedEvent:function(a,b,c){a=a?a.Gc:0;0===a?a=0.2:0.15>a&&(a=0.15);var d=t.u(),f=0.2*F.va;I(d,0,0.2*c,!0);J(d,0,(0.2-f)*c,(0.2-f)*b,0,0.2*b,0);d.lineTo(0.8*b,0);J(d,(0.8+f)*b,0,1*b,(0.2-f)*c,1*b,0.2*c);d.lineTo(1*b,0.8*c);
J(d,1*b,(0.8+f)*c,(0.8+f)*b,1*c,0.8*b,1*c);d.lineTo(0.2*b,1*c);J(d,(0.2-f)*b,1*c,0,(0.8+f)*c,0,0.8*c);d.lineTo(0,0.2*c);I(d,0,a*c,!1);d.lineTo(1*b,a*c);d.bb(!1);b=d.s;b.G=new H(0,a);b.H=new H(1,1-a);t.v(d);return b},DividedProcess:function(a,b,c){a=a?a.Gc:0;0.1>a&&(a=0.1);var d=t.u();I(d,0,0,!0);d.lineTo(1*b,0);d.lineTo(1*b,1*c);d.lineTo(0,1*c);L(d);I(d,0,a*c,!1);d.lineTo(1*b,a*c);d.bb(!1);b=d.s;b.G=new H(0,a);b.H=Pb;t.v(d);return b},Document:function(a,b,c){c/=0.8;a=t.u();I(a,0,0.7*c,!0);a.lineTo(0,
0);a.lineTo(1*b,0);a.lineTo(1*b,0.7*c);J(a,0.5*b,0.4*c,0.5*b,1*c,0,0.7*c);L(a);b=a.s;b.G=Eb;b.H=new H(1,0.6);t.v(a);return b},ExternalOrganization:function(a,b,c){a=a?a.Gc:0;0.2>a&&(a=0.2);var d=t.u();I(d,0,0,!0);d.lineTo(1*b,0);d.lineTo(1*b,1*c);d.lineTo(0,1*c);L(d);I(d,a*b,0,!1);d.lineTo(0,a*c);d.moveTo(1*b,a*c);d.lineTo((1-a)*b,0);d.moveTo(0,(1-a)*c);d.lineTo(a*b,1*c);d.moveTo((1-a)*b,1*c);d.lineTo(1*b,(1-a)*c);d.bb(!1);b=d.s;b.G=new H(a/2,a/2);b.H=new H(1-a/2,1-a/2);t.v(d);return b},ExternalProcess:function(a,
b,c){a=t.u();I(a,0.5*b,0,!0);a.lineTo(1*b,0.5*c);a.lineTo(0.5*b,1*c);a.lineTo(0,0.5*c);L(a);I(a,0.1*b,0.4*c,!1);a.lineTo(0.1*b,0.6*c);a.moveTo(0.9*b,0.6*c);a.lineTo(0.9*b,0.4*c);a.moveTo(0.6*b,0.1*c);a.lineTo(0.4*b,0.1*c);a.moveTo(0.4*b,0.9*c);a.lineTo(0.6*b,0.9*c);a.bb(!1);b=a.s;b.G=new H(0.25,0.25);b.H=new H(0.75,0.75);t.v(a);return b},File:function(a,b,c){a=t.u();I(a,0,0,!0);a.lineTo(0.75*b,0);a.lineTo(1*b,0.25*c);a.lineTo(1*b,1*c);a.lineTo(0,1*c);L(a);I(a,0.75*b,0,!1);a.lineTo(0.75*b,0.25*c);
a.lineTo(1*b,0.25*c);a.bb(!1);b=a.s;b.G=new H(0,0.25);b.H=Pb;t.v(a);return b},Interrupt:function(a,b,c){a=t.u();I(a,1*b,0.5*c,!0);a.lineTo(0,1*c);a.lineTo(0,0);a.lineTo(1*b,0.5*c);I(a,1*b,0.5*c,!1);a.lineTo(1*b,1*c);I(a,1*b,0.5*c,!1);a.lineTo(1*b,0);b=a.s;b.G=new H(0,0.25);b.H=new H(0.5,0.75);t.v(a);return b},InternalStorage:function(a,b,c){var d=a?a.Gc:0;a=a?a.Ft:0;0===d&&(d=0.1);0===a&&(a=0.1);var f=t.u();I(f,0,0,!0);f.lineTo(1*b,0);f.lineTo(1*b,1*c);f.lineTo(0,1*c);L(f);I(f,d*b,0,!1);f.lineTo(d*
b,1*c);f.moveTo(0,a*c);f.lineTo(1*b,a*c);f.bb(!1);b=f.s;b.G=new H(d,a);b.H=Pb;t.v(f);return b},Junction:function(a,b,c){a=t.u();var d=1/Math.SQRT2,f=(1-1/Math.SQRT2)/2,g=0.5*F.va;I(a,1*b,0.5*c,!0);J(a,1*b,(0.5+g)*c,(0.5+g)*b,1*c,0.5*b,1*c);J(a,(0.5-g)*b,1*c,0,(0.5+g)*c,0,0.5*c);J(a,0,(0.5-g)*c,(0.5-g)*b,0,0.5*b,0);J(a,(0.5+g)*b,0,1*b,(0.5-g)*c,1*b,0.5*c);I(a,(f+d)*b,(f+d)*c,!1);a.lineTo(f*b,f*c);a.moveTo(f*b,(f+d)*c);a.lineTo((f+d)*b,f*c);a.bb(!1);b=a.s;b.Hc=Xg;t.v(a);return b},LinedDocument:function(a,
b,c){c/=0.8;a=t.u();I(a,0,0.7*c,!0);a.lineTo(0,0);a.lineTo(1*b,0);a.lineTo(1*b,0.7*c);J(a,0.5*b,0.4*c,0.5*b,1*c,0,0.7*c);L(a);I(a,0.1*b,0,!1);a.lineTo(0.1*b,0.75*c);a.bb(!1);b=a.s;b.G=new H(0.1,0);b.H=new H(1,0.6);t.v(a);return b},LoopLimit:function(a,b,c){a=t.u();I(a,0,1*c,!0);a.lineTo(0,0.25*c);a.lineTo(0.25*b,0);a.lineTo(0.75*b,0);a.lineTo(1*b,0.25*c);a.lineTo(1*b,1*c);L(a);b=a.s;b.G=new H(0,0.25);b.H=Pb;t.v(a);return b},SequentialData:"MagneticTape",MagneticTape:function(a,b,c){a=t.u();var d=
0.5*F.va;I(a,0.5*b,1*c,!0);J(a,(0.5-d)*b,1*c,0,(0.5+d)*c,0,0.5*c);J(a,0,(0.5-d)*c,(0.5-d)*b,0,0.5*b,0);J(a,(0.5+d)*b,0,1*b,(0.5-d)*c,1*b,0.5*c);J(a,1*b,(0.5+d)*c,(0.5+d)*b,0.9*c,0.6*b,0.9*c);a.lineTo(1*b,0.9*c);a.lineTo(1*b,1*c);a.lineTo(0.5*b,1*c);b=a.s;b.G=new H(0.15,0.15);b.H=new H(0.85,0.8);t.v(a);return b},ManualInput:function(a,b,c){a=t.u();I(a,1*b,0,!0);a.lineTo(1*b,1*c);a.lineTo(0,1*c);a.lineTo(0,0.25*c);L(a);b=a.s;b.G=new H(0,0.25);b.H=Pb;t.v(a);return b},MessageFromUser:function(a,b,c){a=
a?a.Gc:0;0===a&&(a=0.7);var d=t.u();I(d,0,0,!0);d.lineTo(1*b,0);d.lineTo(a*b,0.5*c);d.lineTo(1*b,1*c);d.lineTo(0,1*c);L(d);b=d.s;b.G=Eb;b.H=new H(a,1);t.v(d);return b},MicroformProcessing:function(a,b,c){a=a?a.Gc:0;0===a&&(a=0.25);var d=t.u();I(d,0,0,!0);d.lineTo(0.5*b,a*c);d.lineTo(1*b,0);d.lineTo(1*b,1*c);d.lineTo(0.5*b,(1-a)*c);d.lineTo(0,1*c);L(d);b=d.s;b.G=new H(0,a);b.H=new H(1,1-a);t.v(d);return b},MicroformRecording:function(a,b,c){a=t.u();I(a,0,0,!0);a.lineTo(0.75*b,0.25*c);a.lineTo(1*b,
0.15*c);a.lineTo(1*b,0.85*c);a.lineTo(0.75*b,0.75*c);a.lineTo(0,1*c);L(a);b=a.s;b.G=new H(0,0.25);b.H=new H(1,0.75);t.v(a);return b},MultiDocument:function(a,b,c){c/=0.8;a=t.u();I(a,b,0,!0);a.lineTo(b,0.5*c);J(a,0.96*b,0.47*c,0.93*b,0.45*c,0.9*b,0.44*c);a.lineTo(0.9*b,0.6*c);J(a,0.86*b,0.57*c,0.83*b,0.55*c,0.8*b,0.54*c);a.lineTo(0.8*b,0.7*c);J(a,0.4*b,0.4*c,0.4*b,1*c,0,0.7*c);a.lineTo(0,0.2*c);a.lineTo(0.1*b,0.2*c);a.lineTo(0.1*b,0.1*c);a.lineTo(0.2*b,0.1*c);a.lineTo(0.2*b,0);L(a);I(a,0.1*b,0.2*c,
!1);a.lineTo(0.8*b,0.2*c);a.lineTo(0.8*b,0.54*c);a.moveTo(0.2*b,0.1*c);a.lineTo(0.9*b,0.1*c);a.lineTo(0.9*b,0.44*c);a.bb(!1);b=a.s;b.G=new H(0,0.25);b.H=new H(0.8,0.77);t.v(a);return b},MultiProcess:function(a,b,c){a=t.u();I(a,0.1*b,0.1*c,!0);a.lineTo(0.2*b,0.1*c);a.lineTo(0.2*b,0);a.lineTo(1*b,0);a.lineTo(1*b,0.8*c);a.lineTo(0.9*b,0.8*c);a.lineTo(0.9*b,0.9*c);a.lineTo(0.8*b,0.9*c);a.lineTo(0.8*b,1*c);a.lineTo(0,1*c);a.lineTo(0,0.2*c);a.lineTo(0.1*b,0.2*c);L(a);I(a,0.2*b,0.1*c,!1);a.lineTo(0.9*b,
0.1*c);a.lineTo(0.9*b,0.8*c);a.moveTo(0.1*b,0.2*c);a.lineTo(0.8*b,0.2*c);a.lineTo(0.8*b,0.9*c);a.bb(!1);b=a.s;b.G=new H(0,0.2);b.H=new H(0.8,1);t.v(a);return b},OfflineStorage:function(a,b,c){a=a?a.Gc:0;0===a&&(a=0.1);var d=1-a,f=t.u();I(f,0,0,!0);f.lineTo(1*b,0);f.lineTo(0.5*b,1*c);L(f);I(f,0.5*a*b,a*c,!1);f.lineTo((1-0.5*a)*b,a*c);f.bb(!1);b=f.s;b.G=new H(d/4+0.5*a,a);b.H=new H(3*d/4+0.5*a,a+0.5*d);t.v(f);return b},OffPageConnector:function(a,b,c){a=t.u();I(a,0,0,!0);a.lineTo(0.75*b,0);a.lineTo(1*
b,0.5*c);a.lineTo(0.75*b,1*c);a.lineTo(0,1*c);L(a);b=a.s;b.G=Eb;b.H=new H(0.75,1);t.v(a);return b},Or:function(a,b,c){a=t.u();var d=0.5*F.va;I(a,1*b,0.5*c,!0);J(a,1*b,(0.5+d)*c,(0.5+d)*b,1*c,0.5*b,1*c);J(a,(0.5-d)*b,1*c,0,(0.5+d)*c,0,0.5*c);J(a,0,(0.5-d)*c,(0.5-d)*b,0,0.5*b,0);J(a,(0.5+d)*b,0,1*b,(0.5-d)*c,1*b,0.5*c);I(a,1*b,0.5*c,!1);a.lineTo(0,0.5*c);a.moveTo(0.5*b,1*c);a.lineTo(0.5*b,0);a.bb(!1);b=a.s;b.Hc=Xg;t.v(a);return b},PaperTape:function(a,b,c){c/=0.8;a=t.u();I(a,0,0.7*c,!0);a.lineTo(0,
0.3*c);J(a,0.5*b,0.6*c,0.5*b,0,1*b,0.3);a.lineTo(1*b,0.7*c);J(a,0.5*b,0.4*c,0.5*b,1*c,0,0.7*c);L(a);b=a.s;b.G=new H(0,0.49);b.H=new H(1,0.75);t.v(a);return b},PrimitiveFromCall:function(a,b,c){var d=a?a.Gc:0;a=a?a.Ft:0;0===d&&(d=0.1);0===a&&(a=0.3);var f=t.u();I(f,0,0,!0);f.lineTo(1*b,0);f.lineTo((1-a)*b,0.5*c);f.lineTo(1*b,1*c);f.lineTo(0,1*c);L(f);b=f.s;b.G=new H(d,0);b.H=new H(1-a,1);t.v(f);return b},PrimitiveToCall:function(a,b,c){var d=a?a.Gc:0;a=a?a.Ft:0;0===d&&(d=0.1);0===a&&(a=0.3);var f=
t.u();I(f,0,0,!0);f.lineTo((1-a)*b,0);f.lineTo(1*b,0.5*c);f.lineTo((1-a)*b,1*c);f.lineTo(0,1*c);L(f);b=f.s;b.G=new H(d,0);b.H=new H(1-a,1);t.v(f);return b},Subroutine:"Procedure",Procedure:function(a,b,c){a=a?a.Gc:0;0===a&&(a=0.1);var d=t.u();I(d,0,0,!0);d.lineTo(1*b,0);d.lineTo(1*b,1*c);d.lineTo(0,1*c);L(d);I(d,(1-a)*b,0,!1);d.lineTo((1-a)*b,1*c);d.moveTo(a*b,0);d.lineTo(a*b,1*c);d.bb(!1);b=d.s;b.G=new H(a,0);b.H=new H(1-a,1);t.v(d);return b},Process:function(a,b,c){a=a?a.Gc:0;0===a&&(a=0.1);var d=
t.u();I(d,0,0,!0);d.lineTo(1*b,0);d.lineTo(1*b,1*c);d.lineTo(0,1*c);L(d);I(d,a*b,0,!1);d.lineTo(a*b,1*c);d.bb(!1);b=d.s;b.G=new H(a,0);b.H=Pb;t.v(d);return b},Sort:function(a,b,c){a=t.u();I(a,0.5*b,0,!0);a.lineTo(1*b,0.5*c);a.lineTo(0.5*b,1*c);a.lineTo(0,0.5*c);L(a);I(a,0,0.5*c,!1);a.lineTo(1*b,0.5*c);a.bb(!1);b=a.s;b.G=new H(0.25,0.25);b.H=new H(0.75,0.5);t.v(a);return b},Start:function(a,b,c){a=t.u();I(a,0.25*b,0,!0);I(a,0.25*b,0,!0);a.arcTo(270,180,0.75*b,0.5*c,0.25*b,0.5*c);a.arcTo(90,180,0.25*
b,0.5*c,0.25*b,0.5*c);I(a,0.25*b,0,!1);a.lineTo(0.25*b,1*c);a.moveTo(0.75*b,0);a.lineTo(0.75*b,1*c);a.bb(!1);b=a.s;b.G=new H(0.25,0);b.H=new H(0.75,1);t.v(a);return b},Terminator:function(a,b,c){a=t.u();I(a,0.25*b,0,!0);a.arcTo(270,180,0.75*b,0.5*c,0.25*b,0.5*c);a.arcTo(90,180,0.25*b,0.5*c,0.25*b,0.5*c);b=a.s;b.G=new H(0.23,0);b.H=new H(0.77,1);t.v(a);return b},TransmittalTape:function(a,b,c){a=a?a.Gc:0;0===a&&(a=0.1);var d=t.u();I(d,0,0,!0);d.lineTo(1*b,0);d.lineTo(1*b,1*c);d.lineTo(0.75*b,(1-a)*
c);d.lineTo(0,(1-a)*c);L(d);b=d.s;b.G=Eb;b.H=new H(1,1-a);t.v(d);return b},AndGate:function(a,b,c){a=t.u();var d=0.5*F.va;I(a,0,0,!0);a.lineTo(0.5*b,0);J(a,(0.5+d)*b,0,1*b,(0.5-d)*c,1*b,0.5*c);J(a,1*b,(0.5+d)*c,(0.5+d)*b,1*c,0.5*b,1*c);a.lineTo(0,1*c);L(a);b=a.s;b.G=Eb;b.H=new H(0.55,1);t.v(a);return b},Buffer:function(a,b,c){a=t.u();I(a,0,0,!0);a.lineTo(1*b,0.5*c);a.lineTo(0,1*c);L(a);b=a.s;b.G=new H(0,0.25);b.H=new H(0.5,0.75);t.v(a);return b},Clock:function(a,b,c){a=t.u();var d=0.5*F.va;I(a,1*
b,0.5*c,!0);J(a,1*b,(0.5+d)*c,(0.5+d)*b,1*c,0.5*b,1*c);J(a,(0.5-d)*b,1*c,0,(0.5+d)*c,0,0.5*c);J(a,0,(0.5-d)*c,(0.5-d)*b,0,0.5*b,0);J(a,(0.5+d)*b,0,1*b,(0.5-d)*c,1*b,0.5*c);I(a,1*b,0.5*c,!1);a.lineTo(1*b,0.5*c);I(a,0.8*b,0.75*c,!1);a.lineTo(0.8*b,0.25*c);a.lineTo(0.6*b,0.25*c);a.lineTo(0.6*b,0.75*c);a.lineTo(0.4*b,0.75*c);a.lineTo(0.4*b,0.25*c);a.lineTo(0.2*b,0.25*c);a.lineTo(0.2*b,0.75*c);a.bb(!1);b=a.s;b.Hc=Xg;t.v(a);return b},Ground:function(a,b,c){a=t.u();I(a,0.5*b,0,!1);a.lineTo(0.5*b,0.4*c);
a.moveTo(0.2*b,0.6*c);a.lineTo(0.8*b,0.6*c);a.moveTo(0.3*b,0.8*c);a.lineTo(0.7*b,0.8*c);a.moveTo(0.4*b,1*c);a.lineTo(0.6*b,1*c);b=a.s;t.v(a);return b},Inverter:function(a,b,c){a=t.u();var d=0.1*F.va;I(a,0.8*b,0.5*c,!0);a.lineTo(0,1*c);a.lineTo(0,0);a.lineTo(0.8*b,0.5*c);I(a,1*b,0.5*c,!0);J(a,1*b,(0.5+d)*c,(0.9+d)*b,0.6*c,0.9*b,0.6*c);J(a,(0.9-d)*b,0.6*c,0.8*b,(0.5+d)*c,0.8*b,0.5*c);J(a,0.8*b,(0.5-d)*c,(0.9-d)*b,0.4*c,0.9*b,0.4*c);J(a,(0.9+d)*b,0.4*c,1*b,(0.5-d)*c,1*b,0.5*c);b=a.s;b.G=new H(0,0.25);
b.H=new H(0.4,0.75);t.v(a);return b},NandGate:function(a,b,c){a=t.u();var d=F.va,f=0.5*d,g=0.4*d,d=0.1*d;I(a,0.8*b,0.5*c,!0);J(a,0.8*b,(0.5+g)*c,(0.4+f)*b,1*c,0.4*b,1*c);a.lineTo(0,1*c);a.lineTo(0,0);a.lineTo(0.4*b,0);J(a,(0.4+f)*b,0,0.8*b,(0.5-g)*c,0.8*b,0.5*c);I(a,1*b,0.5*c,!0);J(a,1*b,(0.5+d)*c,(0.9+d)*b,0.6*c,0.9*b,0.6*c);J(a,(0.9-d)*b,0.6*c,0.8*b,(0.5+d)*c,0.8*b,0.5*c);J(a,0.8*b,(0.5-d)*c,(0.9-d)*b,0.4*c,0.9*b,0.4*c);J(a,(0.9+d)*b,0.4*c,1*b,(0.5-d)*c,1*b,0.5*c);b=a.s;b.G=new H(0,0.05);b.H=new H(0.55,
0.95);t.v(a);return b},NorGate:function(a,b,c){a=t.u();var d=F.va,f=0.5,g=d*f,h=0,k=0.5;I(a,0.8*b,0.5*c,!0);J(a,0.7*b,(k+g)*c,(h+g)*b,(k+f)*c,0,1*c);J(a,0.25*b,0.75*c,0.25*b,0.25*c,0,0);J(a,(h+g)*b,(k-f)*c,0.7*b,(k-g)*c,0.8*b,0.5*c);f=0.1;g=0.1*d;h=0.9;k=0.5;I(a,(h-f)*b,k*c,!0);J(a,(h-f)*b,(k-g)*c,(h-g)*b,(k-f)*c,h*b,(k-f)*c);J(a,(h+g)*b,(k-f)*c,(h+f)*b,(k-g)*c,(h+f)*b,k*c);J(a,(h+f)*b,(k+g)*c,(h+g)*b,(k+f)*c,h*b,(k+f)*c);J(a,(h-g)*b,(k+f)*c,(h-f)*b,(k+g)*c,(h-f)*b,k*c);b=a.s;b.G=new H(0.2,0.25);
b.H=new H(0.6,0.75);t.v(a);return b},OrGate:function(a,b,c){a=t.u();var d=0.5*F.va;I(a,0,0,!0);J(a,(0+d+d)*b,0*c,0.8*b,(0.5-d)*c,1*b,0.5*c);J(a,0.8*b,(0.5+d)*c,(0+d+d)*b,1*c,0,1*c);J(a,0.25*b,0.75*c,0.25*b,0.25*c,0,0);L(a);b=a.s;b.G=new H(0.2,0.25);b.H=new H(0.75,0.75);t.v(a);return b},XnorGate:function(a,b,c){a=t.u();var d=F.va,f=0.5,g=d*f,h=0.2,k=0.5;I(a,0.1*b,0,!1);J(a,0.35*b,0.25*c,0.35*b,0.75*c,0.1*b,1*c);I(a,0.8*b,0.5*c,!0);J(a,0.7*b,(k+g)*c,(h+g)*b,(k+f)*c,0.2*b,1*c);J(a,0.45*b,0.75*c,0.45*
b,0.25*c,0.2*b,0);J(a,(h+g)*b,(k-f)*c,0.7*b,(k-g)*c,0.8*b,0.5*c);f=0.1;g=0.1*d;h=0.9;k=0.5;I(a,(h-f)*b,k*c,!0);J(a,(h-f)*b,(k-g)*c,(h-g)*b,(k-f)*c,h*b,(k-f)*c);J(a,(h+g)*b,(k-f)*c,(h+f)*b,(k-g)*c,(h+f)*b,k*c);J(a,(h+f)*b,(k+g)*c,(h+g)*b,(k+f)*c,h*b,(k+f)*c);J(a,(h-g)*b,(k+f)*c,(h-f)*b,(k+g)*c,(h-f)*b,k*c);b=a.s;b.G=new H(0.4,0.25);b.H=new H(0.65,0.75);t.v(a);return b},XorGate:function(a,b,c){a=t.u();var d=0.5*F.va;I(a,0.1*b,0,!1);J(a,0.35*b,0.25*c,0.35*b,0.75*c,0.1*b,1*c);I(a,0.2*b,0,!0);J(a,(0.2+
d)*b,0*c,0.9*b,(0.5-d)*c,1*b,0.5*c);J(a,0.9*b,(0.5+d)*c,(0.2+d)*b,1*c,0.2*b,1*c);J(a,0.45*b,0.75*c,0.45*b,0.25*c,0.2*b,0);L(a);b=a.s;b.G=new H(0.4,0.25);b.H=new H(0.8,0.75);t.v(a);return b},Capacitor:function(a,b,c){a=t.u();I(a,0,0,!1);a.lineTo(0,1*c);a.moveTo(1*b,0);a.lineTo(1*b,1*c);b=a.s;t.v(a);return b},Resistor:function(a,b,c){a=t.u();I(a,0,0.5*c,!1);a.lineTo(0.1*b,0);a.lineTo(0.2*b,1*c);a.lineTo(0.3*b,0);a.lineTo(0.4*b,1*c);a.lineTo(0.5*b,0);a.lineTo(0.6*b,1*c);a.lineTo(0.7*b,0.5*c);b=a.s;t.v(a);
return b},Inductor:function(a,b,c){a=t.u();var d=0.1*F.va,f=0.1;I(a,(f-0.5*d)*b,c,!1);J(a,(f-d)*b,c,(f-0.1)*b,0,(f+0.1)*b,0);f=0.3;J(a,(f+0.1)*b,0,(f+d)*b,c,f*b,c);J(a,(f-d)*b,c,(f-0.1)*b,0,(f+0.1)*b,0);f=0.5;J(a,(f+0.1)*b,0,(f+d)*b,c,f*b,c);J(a,(f-d)*b,c,(f-0.1)*b,0,(f+0.1)*b,0);f=0.7;J(a,(f+0.1)*b,0,(f+d)*b,c,f*b,c);J(a,(f-d)*b,c,(f-0.1)*b,0,(f+0.1)*b,0);f=0.9;J(a,(f+0.1)*b,0,(f+d)*b,c,(f+0.5*d)*b,c);b=a.s;t.v(a);return b},ACvoltageSource:function(a,b,c){a=t.u();var d=0.5*F.va;I(a,0*b,0.5*c,!1);
J(a,0*b,(0.5-d)*c,(0.5-d)*b,0*c,0.5*b,0*c);J(a,(0.5+d)*b,0*c,1*b,(0.5-d)*c,1*b,0.5*c);J(a,1*b,(0.5+d)*c,(0.5+d)*b,1*c,0.5*b,1*c);J(a,(0.5-d)*b,1*c,0*b,(0.5+d)*c,0*b,0.5*c);a.moveTo(0.1*b,0.5*c);J(a,0.5*b,0*c,0.5*b,1*c,0.9*b,0.5*c);b=a.s;b.Hc=Xg;t.v(a);return b},DCvoltageSource:function(a,b,c){a=t.u();I(a,0,0.75*c,!1);a.lineTo(0,0.25*c);a.moveTo(1*b,0);a.lineTo(1*b,1*c);b=a.s;t.v(a);return b},Diode:function(a,b,c){a=t.u();I(a,1*b,0,!1);a.lineTo(1*b,0.5*c);a.lineTo(0,1*c);a.lineTo(0,0);a.lineTo(1*b,
0.5*c);a.lineTo(1*b,1*c);b=a.s;b.G=new H(0,0.25);b.H=new H(0.5,0.75);t.v(a);return b},Wifi:function(a,b,c){var d=b,f=c;b*=0.38;c*=0.6;a=t.u();var g=F.va,h=0.8*g,k=0.8,l=0,m=0.5,d=(d-b)/2,f=(f-c)/2;I(a,l*b+d,(m+k)*c+f,!0);J(a,(l-h)*b+d,(m+k)*c+f,(l-k)*b+d,(m+h)*c+f,(l-k)*b+d,m*c+f);J(a,(l-k)*b+d,(m-h)*c+f,(l-h)*b+d,(m-k)*c+f,l*b+d,(m-k)*c+f);J(a,l*b+d,(m-k)*c+f,(l-k+0.5*h)*b+d,(m-h)*c+f,(l-k+0.5*h)*b+d,m*c+f);J(a,(l-k+0.5*h)*b+d,(m+h)*c+f,l*b+d,(m+k)*c+f,l*b+d,(m+k)*c+f);L(a);h=0.4*g;k=0.4;l=0.2;m=
0.5;I(a,l*b+d,(m+k)*c+f,!0);J(a,(l-h)*b+d,(m+k)*c+f,(l-k)*b+d,(m+h)*c+f,(l-k)*b+d,m*c+f);J(a,(l-k)*b+d,(m-h)*c+f,(l-h)*b+d,(m-k)*c+f,l*b+d,(m-k)*c+f);J(a,l*b+d,(m-k)*c+f,(l-k+0.5*h)*b+d,(m-h)*c+f,(l-k+0.5*h)*b+d,m*c+f);J(a,(l-k+0.5*h)*b+d,(m+h)*c+f,l*b+d,(m+k)*c+f,l*b+d,(m+k)*c+f);L(a);h=0.2*g;k=0.2;m=l=0.5;I(a,(l-k)*b+d,m*c+f,!0);J(a,(l-k)*b+d,(m-h)*c+f,(l-h)*b+d,(m-k)*c+f,l*b+d,(m-k)*c+f);J(a,(l+h)*b+d,(m-k)*c+f,(l+k)*b+d,(m-h)*c+f,(l+k)*b+d,m*c+f);J(a,(l+k)*b+d,(m+h)*c+f,(l+h)*b+d,(m+k)*c+f,l*
b+d,(m+k)*c+f);J(a,(l-h)*b+d,(m+k)*c+f,(l-k)*b+d,(m+h)*c+f,(l-k)*b+d,m*c+f);h=0.4*g;k=0.4;l=0.8;m=0.5;I(a,l*b+d,(m-k)*c+f,!0);J(a,(l+h)*b+d,(m-k)*c+f,(l+k)*b+d,(m-h)*c+f,(l+k)*b+d,m*c+f);J(a,(l+k)*b+d,(m+h)*c+f,(l+h)*b+d,(m+k)*c+f,l*b+d,(m+k)*c+f);J(a,l*b+d,(m+k)*c+f,(l+k-0.5*h)*b+d,(m+h)*c+f,(l+k-0.5*h)*b+d,m*c+f);J(a,(l+k-0.5*h)*b+d,(m-h)*c+f,l*b+d,(m-k)*c+f,l*b+d,(m-k)*c+f);L(a);h=0.8*g;k=0.8;l=1;m=0.5;I(a,l*b+d,(m-k)*c+f,!0);J(a,(l+h)*b+d,(m-k)*c+f,(l+k)*b+d,(m-h)*c+f,(l+k)*b+d,m*c+f);J(a,(l+
k)*b+d,(m+h)*c+f,(l+h)*b+d,(m+k)*c+f,l*b+d,(m+k)*c+f);J(a,l*b+d,(m+k)*c+f,(l+k-0.5*h)*b+d,(m+h)*c+f,(l+k-0.5*h)*b+d,m*c+f);J(a,(l+k-0.5*h)*b+d,(m-h)*c+f,l*b+d,(m-k)*c+f,l*b+d,(m-k)*c+f);L(a);b=a.s;t.v(a);return b},Email:function(a,b,c){a=t.u();I(a,0,0,!0);a.lineTo(1*b,0);a.lineTo(1*b,1*c);a.lineTo(0,1*c);a.lineTo(0,0);L(a);I(a,0,0,!1);a.lineTo(0.5*b,0.6*c);a.lineTo(1*b,0);a.moveTo(0,1*c);a.lineTo(0.45*b,0.54*c);a.moveTo(1*b,1*c);a.lineTo(0.55*b,0.54*c);a.bb(!1);b=a.s;t.v(a);return b},Ethernet:function(a,
b,c){a=t.u();I(a,0.35*b,0,!0);a.lineTo(0.65*b,0);a.lineTo(0.65*b,0.4*c);a.lineTo(0.35*b,0.4*c);a.lineTo(0.35*b,0);L(a);I(a,0.1*b,1*c,!0,!0);a.lineTo(0.4*b,1*c);a.lineTo(0.4*b,0.6*c);a.lineTo(0.1*b,0.6*c);a.lineTo(0.1*b,1*c);L(a);I(a,0.6*b,1*c,!0,!0);a.lineTo(0.9*b,1*c);a.lineTo(0.9*b,0.6*c);a.lineTo(0.6*b,0.6*c);a.lineTo(0.6*b,1*c);L(a);I(a,0,0.5*c,!1);a.lineTo(1*b,0.5*c);a.moveTo(0.5*b,0.5*c);a.lineTo(0.5*b,0.4*c);a.moveTo(0.75*b,0.5*c);a.lineTo(0.75*b,0.6*c);a.moveTo(0.25*b,0.5*c);a.lineTo(0.25*
b,0.6*c);a.bb(!1);b=a.s;t.v(a);return b},Power:function(a,b,c){a=t.u();var d=F.va,f=0.4*d,g=0.4,h=t.K(),k=t.K(),l=t.K(),m=t.K();F.Vi(0.5,0.5-g,0.5+f,0.5-g,0.5+g,0.5-f,0.5+g,0.5,0.5,h,h,k,l,m);var n=t.mc(k.x,k.y);I(a,k.x*b,k.y*c,!0);J(a,l.x*b,l.y*c,m.x*b,m.y*c,(0.5+g)*b,0.5*c);J(a,(0.5+g)*b,(0.5+f)*c,(0.5+f)*b,(0.5+g)*c,0.5*b,(0.5+g)*c);J(a,(0.5-f)*b,(0.5+g)*c,(0.5-g)*b,(0.5+f)*c,(0.5-g)*b,0.5*c);F.Vi(0.5-g,0.5,0.5-g,0.5-f,0.5-f,0.5-g,0.5,0.5-g,0.5,l,m,k,h,h);J(a,l.x*b,l.y*c,m.x*b,m.y*c,k.x*b,k.y*
c);f=0.3*d;g=0.3;F.Vi(0.5-g,0.5,0.5-g,0.5-f,0.5-f,0.5-g,0.5,0.5-g,0.5,l,m,k,h,h);a.lineTo(k.x*b,k.y*c);J(a,m.x*b,m.y*c,l.x*b,l.y*c,(0.5-g)*b,0.5*c);J(a,(0.5-g)*b,(0.5+f)*c,(0.5-f)*b,(0.5+g)*c,0.5*b,(0.5+g)*c);J(a,(0.5+f)*b,(0.5+g)*c,(0.5+g)*b,(0.5+f)*c,(0.5+g)*b,0.5*c);F.Vi(0.5,0.5-g,0.5+f,0.5-g,0.5+g,0.5-f,0.5+g,0.5,0.5,h,h,k,l,m);J(a,m.x*b,m.y*c,l.x*b,l.y*c,k.x*b,k.y*c);L(a);I(a,0.45*b,0,!0);a.lineTo(0.45*b,0.5*c);a.lineTo(0.55*b,0.5*c);a.lineTo(0.55*b,0);L(a);t.B(h);t.B(k);t.B(l);t.B(m);t.B(n);
b=a.s;b.G=new H(0.25,0.55);b.H=new H(0.75,0.8);t.v(a);return b},Fallout:function(a,b,c){a=t.u();var d=0.5*F.va;I(a,0*b,0.5*c,!0);J(a,0*b,(0.5-d)*c,(0.5-d)*b,0*c,0.5*b,0*c);J(a,(0.5+d)*b,0*c,1*b,(0.5-d)*c,1*b,0.5*c);J(a,1*b,(0.5+d)*c,(0.5+d)*b,1*c,0.5*b,1*c);J(a,(0.5-d)*b,1*c,0*b,(0.5+d)*c,0*b,0.5*c);var f=d=0;I(a,(0.3+d)*b,(0.8+f)*c,!0,!0);a.lineTo((0.5+d)*b,(0.5+f)*c);a.lineTo((0.1+d)*b,(0.5+f)*c);a.lineTo((0.3+d)*b,(0.8+f)*c);d=0.4;f=0;L(a);I(a,(0.3+d)*b,(0.8+f)*c,!0,!0);a.lineTo((0.5+d)*b,(0.5+
f)*c);a.lineTo((0.1+d)*b,(0.5+f)*c);a.lineTo((0.3+d)*b,(0.8+f)*c);d=0.2;f=-0.3;L(a);I(a,(0.3+d)*b,(0.8+f)*c,!0,!0);a.lineTo((0.5+d)*b,(0.5+f)*c);a.lineTo((0.1+d)*b,(0.5+f)*c);a.lineTo((0.3+d)*b,(0.8+f)*c);L(a);b=a.s;b.Hc=Xg;t.v(a);return b},IrritationHazard:function(a,b,c){a=t.u();I(a,0.2*b,0*c,!0);a.lineTo(0.5*b,0.3*c);a.lineTo(0.8*b,0*c);a.lineTo(1*b,0.2*c);a.lineTo(0.7*b,0.5*c);a.lineTo(1*b,0.8*c);a.lineTo(0.8*b,1*c);a.lineTo(0.5*b,0.7*c);a.lineTo(0.2*b,1*c);a.lineTo(0*b,0.8*c);a.lineTo(0.3*b,
0.5*c);a.lineTo(0*b,0.2*c);L(a);b=a.s;b.G=new H(0.3,0.3);b.H=new H(0.7,0.7);t.v(a);return b},ElectricalHazard:function(a,b,c){a=t.u();I(a,0.37,0*c,!0);a.lineTo(0.5*b,0.11*c);a.lineTo(0.77*b,0.04*c);a.lineTo(0.33*b,0.49*c);a.lineTo(1*b,0.37*c);a.lineTo(0.63*b,0.86*c);a.lineTo(0.77*b,0.91*c);a.lineTo(0.34*b,1*c);a.lineTo(0.34*b,0.78*c);a.lineTo(0.44*b,0.8*c);a.lineTo(0.65*b,0.56*c);a.lineTo(0*b,0.68*c);L(a);b=a.s;t.v(a);return b},FireHazard:function(a,b,c){a=t.u();I(a,0.1*b,1*c,!0);J(a,-0.25*b,0.63*
c,0.45*b,0.44*c,0.29*b,0*c);J(a,0.48*b,0.17*c,0.54*b,0.35*c,0.51*b,0.42*c);J(a,0.59*b,0.29*c,0.58*b,0.28*c,0.59*b,0.18*c);J(a,0.8*b,0.34*c,0.88*b,0.43*c,0.75*b,0.6*c);J(a,0.87*b,0.48*c,0.88*b,0.43*c,0.88*b,0.31*c);J(a,1.17*b,0.76*c,0.82*b,0.8*c,0.9*b,1*c);L(a);b=a.s;b.G=new H(0.05,0.645);b.H=new H(0.884,0.908);t.v(a);return b},BpmnActivityLoop:function(a,b,c){a=t.u();var d=4*(Math.SQRT2-1)/3*0.5;I(a,(0.5*Math.SQRT2/2+0.5)*b,(1-(0.5-0.5*Math.SQRT2/2))*c,!1);J(a,1*b,0.7*c,1*b,0.5*c,1*b,0.5*c);J(a,1*
b,(0.5-d+0)*c,(0.5+d+0)*b,0*c,0.5*b,0*c);J(a,(0.5-d+0)*b,0*c,0*b,(0.5-d+0)*c,0*b,0.5*c);J(a,0*b,(0.5+d+0)*c,(0.5-d+0)*b,1*c,0.35*b,0.98*c);a.moveTo(0.35*b,0.8*c);a.lineTo(0.35*b,1*c);a.lineTo(0.15*b,1*c);b=a.s;t.v(a);return b},BpmnActivityParallel:function(a,b,c){a=t.u();I(a,0,0,!1);a.lineTo(0,1*c);a.moveTo(0.5*b,0);a.lineTo(0.5*b,1*c);a.moveTo(1*b,0);a.lineTo(1*b,1*c);b=a.s;t.v(a);return b},BpmnActivitySequential:function(a,b,c){a=t.u();I(a,0,0,!1);a.lineTo(1*b,0);a.moveTo(0,0.5*c);a.lineTo(1*b,
0.5*c);a.moveTo(0,1*c);a.lineTo(1*b,1*c);b=a.s;t.v(a);return b},BpmnActivityAdHoc:function(a,b,c){a=t.u();I(a,0,0,!1);I(a,1*b,1*c,!1);I(a,0,0.5*c,!1);J(a,0.2*b,0.35*c,0.3*b,0.35*c,0.5*b,0.5*c);J(a,0.7*b,0.65*c,0.8*b,0.65*c,1*b,0.5*c);b=a.s;t.v(a);return b},BpmnActivityCompensation:function(a,b,c){a=t.u();I(a,0,0.5*c,!0);a.lineTo(0.5*b,0);a.lineTo(0.5*b,0.5*c);a.lineTo(1*b,1*c);a.lineTo(1*b,0);a.lineTo(0.5*b,0.5*c);a.lineTo(0.5*b,1*c);L(a);b=a.s;t.v(a);return b},BpmnTaskMessage:function(a,b,c){a=t.u();
I(a,0,0.2*c,!0);a.lineTo(1*b,0.2*c);a.lineTo(1*b,0.8*c);a.lineTo(0,0.8*c);a.lineTo(0,0.8*c);L(a);I(a,0,0.2*c,!1);a.lineTo(0.5*b,0.5*c);a.lineTo(1*b,0.2*c);a.bb(!1);b=a.s;t.v(a);return b},BpmnTaskScript:function(a,b,c){a=t.u();I(a,0.7*b,1*c,!0);a.lineTo(0.3*b,1*c);J(a,0.6*b,0.5*c,0,0.5*c,0.3*b,0);a.lineTo(0.7*b,0);J(a,0.4*b,0.5*c,1*b,0.5*c,0.7*b,1*c);L(a);I(a,0.45*b,0.73*c,!1);a.lineTo(0.7*b,0.73*c);a.moveTo(0.38*b,0.5*c);a.lineTo(0.63*b,0.5*c);a.moveTo(0.31*b,0.27*c);a.lineTo(0.56*b,0.27*c);a.bb(!1);
b=a.s;t.v(a);return b},BpmnTaskUser:function(a,b,c){a=t.u();I(a,0,0,!1);I(a,0.335*b,(1-0.555)*c,!0);a.lineTo(0.335*b,0.595*c);a.lineTo(0.665*b,0.595*c);a.lineTo(0.665*b,(1-0.555)*c);J(a,0.88*b,0.46*c,0.98*b,0.54*c,1*b,0.68*c);a.lineTo(1*b,1*c);a.lineTo(0,1*c);a.lineTo(0,0.68*c);J(a,0.02*b,0.54*c,0.12*b,0.46*c,0.335*b,(1-0.555)*c);a.lineTo(0.365*b,0.405*c);var d=0.5-0.285,f=Math.PI/4,g=4*(1-Math.cos(f))/(3*Math.sin(f)),f=g*d,g=g*d;J(a,(0.5-(f+d)/2)*b,(d+(d+g)/2)*c,(0.5-d)*b,(d+g)*c,(0.5-d)*b,d*c);
J(a,(0.5-d)*b,(d-g)*c,(0.5-f)*b,(d-d)*c,0.5*b,(d-d)*c);J(a,(0.5+f)*b,(d-d)*c,(0.5+d)*b,(d-g)*c,(0.5+d)*b,d*c);J(a,(0.5+d)*b,(d+g)*c,(0.5+(f+d)/2)*b,(d+(d+g)/2)*c,0.635*b,0.405*c);a.lineTo(0.635*b,0.405*c);a.lineTo(0.665*b,(1-0.555)*c);a.lineTo(0.665*b,0.595*c);a.lineTo(0.335*b,0.595*c);I(a,0.2*b,1*c,!1);a.lineTo(0.2*b,0.8*c);I(a,0.8*b,1*c,!1);a.lineTo(0.8*b,0.8*c);b=a.s;t.v(a);return b},BpmnEventConditional:function(a,b,c){a=t.u();I(a,0.1*b,0,!0);a.lineTo(0.9*b,0);a.lineTo(0.9*b,1*c);a.lineTo(0.1*
b,1*c);L(a);I(a,0.2*b,0.2*c,!1);a.lineTo(0.8*b,0.2*c);a.moveTo(0.2*b,0.4*c);a.lineTo(0.8*b,0.4*c);a.moveTo(0.2*b,0.6*c);a.lineTo(0.8*b,0.6*c);a.moveTo(0.2*b,0.8*c);a.lineTo(0.8*b,0.8*c);a.bb(!1);b=a.s;t.v(a);return b},BpmnEventError:function(a,b,c){a=t.u();I(a,0,1*c,!0);a.lineTo(0.33*b,0);a.lineTo(0.66*b,0.5*c);a.lineTo(1*b,0);a.lineTo(0.66*b,1*c);a.lineTo(0.33*b,0.5*c);L(a);b=a.s;t.v(a);return b},BpmnEventEscalation:function(a,b,c){a=t.u();I(a,0,0,!1);I(a,1*b,1*c,!1);I(a,0.1*b,1*c,!0);a.lineTo(0.5*
b,0);a.lineTo(0.9*b,1*c);a.lineTo(0.5*b,0.5*c);L(a);b=a.s;t.v(a);return b},BpmnEventTimer:function(a,b,c){a=t.u();var d=0.5*F.va;I(a,1*b,0.5*c,!0);J(a,1*b,(0.5+d)*c,(0.5+d)*b,1*c,0.5*b,1*c);J(a,(0.5-d)*b,1*c,0,(0.5+d)*c,0,0.5*c);J(a,0,(0.5-d)*c,(0.5-d)*b,0,0.5*b,0);J(a,(0.5+d)*b,0,1*b,(0.5-d)*c,1*b,0.5*c);I(a,0.5*b,0,!1);a.lineTo(0.5*b,0.15*c);a.moveTo(0.5*b,1*c);a.lineTo(0.5*b,0.85*c);a.moveTo(0,0.5*c);a.lineTo(0.15*b,0.5*c);a.moveTo(1*b,0.5*c);a.lineTo(0.85*b,0.5*c);a.moveTo(0.5*b,0.5*c);a.lineTo(0.58*
b,0.1*c);a.moveTo(0.5*b,0.5*c);a.lineTo(0.78*b,0.54*c);a.bb(!1);b=a.s;b.Hc=Xg;t.v(a);return b}};F.MA={};for(var wm in F.bj)F.bj[wm.toLowerCase()]=wm;
F.gw={"":"",Standard:"F1 m 0,0 l 8,4 -8,4 2,-4 z",Backward:"F1 m 8,0 l -2,4 2,4 -8,-4 z",Triangle:"F1 m 0,0 l 8,4.62 -8,4.62 z",BackwardTriangle:"F1 m 8,4 l 0,4 -8,-4 8,-4 0,4 z",Boomerang:"F1 m 0,0 l 8,4 -8,4 4,-4 -4,-4 z",BackwardBoomerang:"F1 m 8,0 l -8,4 8,4 -4,-4 4,-4 z",SidewaysV:"m 0,0 l 8,4 -8,4 0,-1 6,-3 -6,-3 0,-1 z",BackwardV:"m 8,0 l -8,4 8,4 0,-1 -6,-3 6,-3 0,-1 z",OpenTriangle:"m 0,0 l 8,4 -8,4",BackwardOpenTriangle:"m 8,0 l -8,4 8,4",OpenTriangleLine:"m 0,0 l 8,4 -8,4 m 8.5,0 l 0,-8",
BackwardOpenTriangleLine:"m 8,0 l  -8,4 8,4 m -8.5,0 l 0,-8",OpenTriangleTop:"m 0,0 l 8,4 m 0,4",BackwardOpenTriangleTop:"m 8,0 l -8,4 m 0,4",OpenTriangleBottom:"m 0,8 l 8,-4",BackwardOpenTriangleBottom:"m 0,4 l 8,4",HalfTriangleTop:"F1 m 0,0 l 0,4 8,0 z m 0,8",BackwardHalfTriangleTop:"F1 m 8,0 l 0,4 -8,0 z m 0,8",HalfTriangleBottom:"F1 m 0,4 l 0,4 8,-4 z",BackwardHalfTriangleBottom:"F1 m 8,4 l 0,4 -8,-4 z",ForwardSemiCircle:"m 4,0 b 270 180 0 4 4",BackwardSemiCircle:"m 4,8 b 90 180 0 -4 4",Feather:"m 0,0 l 3,4 -3,4",
BackwardFeather:"m 3,0 l -3,4 3,4",DoubleFeathers:"m 0,0 l 3,4 -3,4 m 3,-8 l 3,4 -3,4",BackwardDoubleFeathers:"m 3,0 l -3,4 3,4 m 3,-8 l -3,4 3,4",TripleFeathers:"m 0,0 l 3,4 -3,4 m 3,-8 l 3,4 -3,4 m 3,-8 l 3,4 -3,4",BackwardTripleFeathers:"m 3,0 l -3,4 3,4 m 3,-8 l -3,4 3,4 m 3,-8 l -3,4 3,4",ForwardSlash:"m 0,8 l 5,-8",BackSlash:"m 0,0 l 5,8",DoubleForwardSlash:"m 0,8 l 4,-8 m -2,8 l 4,-8",DoubleBackSlash:"m 0,0 l 4,8 m -2,-8 l 4,8",TripleForwardSlash:"m 0,8 l 4,-8 m -2,8 l 4,-8 m -2,8 l 4,-8",
TripleBackSlash:"m 0,0 l 4,8 m -2,-8 l 4,8 m -2,-8 l 4,8",Fork:"m 0,4 l 8,0 m -8,0 l 8,-4 m -8,4 l 8,4",BackwardFork:"m 8,4 l -8,0 m 8,0 l -8,-4 m 8,4 l -8,4",LineFork:"m 0,0 l 0,8 m 0,-4 l 8,0 m -8,0 l 8,-4 m -8,4 l 8,4",BackwardLineFork:"m 8,4 l -8,0 m 8,0 l -8,-4 m 8,4 l -8,4 m 8,-8 l 0,8",CircleFork:"F1 m 6,4 b 0 360 -3 0 3 z m 0,0 l 6,0 m -6,0 l 6,-4 m -6,4 l 6,4",BackwardCircleFork:"F1 m 0,4 l 6,0 m -6,-4 l 6,4 m -6,4 l 6,-4 m 6,0 b 0 360 -3 0 3",CircleLineFork:"F1 m 6,4 b 0 360 -3 0 3 z m 1,-4 l 0,8 m 0,-4 l 6,0 m -6,0 l 6,-4 m -6,4 l 6,4",
BackwardCircleLineFork:"F1 m 0,4 l 6,0 m -6,-4 l 6,4 m -6,4 l 6,-4 m 0,-4 l 0,8 m 7,-4 b 0 360 -3 0 3",Circle:"F1 m 8,4 b 0 360 -4 0 4 z",Block:"F1 m 0,0 l 0,8 8,0 0,-8 z",StretchedDiamond:"F1 m 0,3 l 5,-3 5,3 -5,3 -5,-3 z",Diamond:"F1 m 0,4 l 4,-4 4,4 -4,4 -4,-4 z",Chevron:"F1 m 0,0 l 5,0 3,4 -3,4 -5,0 3,-4 -3,-4 z",StretchedChevron:"F1 m 0,0 l 8,0 3,4 -3,4 -8,0 3,-4 -3,-4 z",NormalArrow:"F1 m 0,2 l 4,0 0,-2 4,4 -4,4 0,-2 -4,0 z",X:"m 0,0 l 8,8 m 0,-8 l -8,8",TailedNormalArrow:"F1 m 0,0 l 2,0 1,2 3,0 0,-2 2,4 -2,4 0,-2 -3,0 -1,2 -2,0 1,-4 -1,-4 z",
DoubleTriangle:"F1 m 0,0 l 4,4 -4,4 0,-8 z  m 4,0 l 4,4 -4,4 0,-8 z",BigEndArrow:"F1 m 0,0 l 5,2 0,-2 3,4 -3,4 0,-2 -5,2 0,-8 z",ConcaveTailArrow:"F1 m 0,2 h 4 v -2 l 4,4 -4,4 v -2 h -4 l 2,-2 -2,-2 z",RoundedTriangle:"F1 m 0,1 a 1,1 0 0 1 1,-1 l 7,3 a 0.5,1 0 0 1 0,2 l -7,3 a 1,1 0 0 1 -1,-1 l 0,-6 z",SimpleArrow:"F1 m 1,2 l -1,-2 2,0 1,2 -1,2 -2,0 1,-2 5,0 0,-2 2,2 -2,2 0,-2 z",AccelerationArrow:"F1 m 0,0 l 0,8 0.2,0 0,-8 -0.2,0 z m 2,0 l 0,8 1,0 0,-8 -1,0 z m 3,0 l 2,0 2,4 -2,4 -2,0 0,-8 z",BoxArrow:"F1 m 0,0 l 4,0 0,2 2,0 0,-2 2,4 -2,4 0,-2 -2,0 0,2 -4,0 0,-8 z",
TriangleLine:"F1 m 8,4 l -8,-4 0,8 8,-4 z m 0.5,4 l 0,-8",CircleEndedArrow:"F1 m 10,4 l -2,-3 0,2 -2,0 0,2 2,0 0,2 2,-3 z m -4,0 b 0 360 -3 0 3 z",DynamicWidthArrow:"F1 m 0,3 l 2,0 2,-1 2,-2 2,4 -2,4 -2,-2 -2,-1 -2,0 0,-2 z",EquilibriumArrow:"m 0,3 l 8,0 -3,-3 m 3,5 l -8,0 3,3",FastForward:"F1 m 0,0 l 3.5,4 0,-4 3.5,4 0,-4 1,0 0,8 -1,0 0,-4 -3.5,4 0,-4 -3.5,4 0,-8 z",Kite:"F1 m 0,4 l 2,-4 6,4 -6,4 -2,-4 z",HalfArrowTop:"F1 m 0,0 l 4,4 4,0 -8,-4 z m 0,8",HalfArrowBottom:"F1 m 0,8 l 4,-4 4,0 -8,4 z",
OpposingDirectionDoubleArrow:"F1 m 0,4 l 2,-4 0,2 4,0 0,-2 2,4 -2,4 0,-2 -4,0 0,2 -2,-4 z",PartialDoubleTriangle:"F1 m 0,0 4,3 0,-3 4,4 -4,4 0,-3 -4,3 0,-8 z",LineCircle:"F1 m 0,0 l 0,8 m 7 -4 b 0 360 -3 0 3 z",DoubleLineCircle:"F1 m 0,0 l 0,8 m 2,-8 l 0,8 m 7 -4 b 0 360 -3 0 3 z",TripleLineCircle:"F1 m 0,0 l 0,8 m 2,-8 l 0,8 m 2,-8 l 0,8 m 7 -4 b 0 360 -3 0 3 z",CircleLine:"F1 m 6 4 b 0 360 -3 0 3 z m 1,-4 l 0,8",DiamondCircle:"F1 m 8,4 l -4,4 -4,-4 4,-4 4,4 m 8,0 b 0 360 -4 0 4 z",PlusCircle:"F1 m 8,4 b 0 360 -4 0 4 l -8 0 z m -4 -4 l 0 8",
OpenRightTriangleTop:"m 8,0 l 0,4 -8,0 m 0,4",OpenRightTriangleBottom:"m 8,8 l 0,-4 -8,0",Line:"m 0,0 l 0,8",DoubleLine:"m 0,0 l 0,8 m 2,0 l 0,-8",TripleLine:"m 0,0 l 0,8 m 2,0 l 0,-8 m 2,0 l 0,8",PentagonArrow:"F1 m 8,4 l -4,-4 -4,0 0,8 4,0 4,-4 z"};F.Dm={};F.QJ=function(){if(F.gw){for(var a in F.gw){var b=Rc(F.gw[a],!1);F.Dm[a]=b;a.toLowerCase()!==a&&(F.Dm[a.toLowerCase()]=a)}F.gw=void 0}};
F.RD=function(a){F.QJ();var b=F.Dm[a];if(void 0===b){b=a.toLowerCase();if("none"===b)return"None";b=F.Dm[b]}return"string"===typeof b?b:b instanceof zc?a:null};V.FigureGenerators=F.bj;V.ArrowheadGeometries=F.Dm;
function C(a){0===arguments.length?y.call(this):y.call(this,a);this.W=311807;this.Kk=this.rh="";this.Zr=this.Wr=this.is=this.jr=null;this.ks="";this.ki=this.js=this.tm=null;this.Yr="";this.vo=null;this.Xr=(new fa(NaN,NaN)).freeze();this.$r="";this.wo=null;this.le="";this.lo=this.xq=this.zk=null;this.Yg=(new w(NaN,NaN)).freeze();this.qr="";this.Nk=null;this.rr=Eb;this.Ar=F.cH;this.tr=F.bH;this.Hq=null;this.kr=xm;this.wm=(new w(6,6)).freeze();this.vm="gray";this.um=4;this.BC=-1;this.mH=new x;this.Fj=
null;this.Cj=NaN}t.ga("Part",C);t.Ka(C,y);C.prototype.cloneProtected=function(a){y.prototype.cloneProtected.call(this,a);a.W=this.W&-4097|49152;a.rh=this.rh;a.Kk=this.Kk;a.jr=this.jr;a.is=this.is;a.Wr=this.Wr;a.Zr=this.Zr;a.ks=this.ks;a.js=this.js;a.ki=null;a.Yr=this.Yr;a.Xr.assign(this.Xr);a.$r=this.$r;a.le=this.le;a.xq=this.xq;a.Yg.assign(this.Yg);a.qr=this.qr;a.rr=this.rr.Z();a.Ar=this.Ar.Z();a.tr=this.tr.Z();a.Hq=this.Hq;a.kr=this.kr;a.wm.assign(this.wm);a.vm=this.vm;a.um=this.um};
C.prototype.Yh=function(a){y.prototype.Yh.call(this,a);wk(a);a.tm=null;a.vo=null;a.wo=null;a.Nk=null;a.Fj=null};C.prototype.toString=function(){var a=t.xg(Object.getPrototypeOf(this))+"#"+t.od(this);this.data&&(a+="("+yd(this.data)+")");return a};C.LayoutNone=0;var aj;C.LayoutAdded=aj=1;var gj;C.LayoutRemoved=gj=2;C.LayoutShown=4;C.LayoutHidden=8;C.LayoutNodeSized=16;var Pj;C.LayoutGroupLayout=Pj=32;C.LayoutNodeReplaced=64;var xm;C.LayoutStandard=xm=aj|gj|28|Pj|64;
C.prototype.gn=function(a,b,c,d,f,g,h){var k=this.h;null!==k&&(a===wd&&"elements"===b?f instanceof y&&bj(f,function(a){cj(k,a)}):a===xd&&"elements"===b&&f instanceof y&&bj(f,function(a){fj(k,a)}),k.Ic(a,b,c,d,f,g,h))};C.prototype.updateTargetBindings=C.prototype.Kb=function(a){y.prototype.Kb.call(this,a);if(null!==this.data){a=this.xa.n;for(var b=a.length,c=0;c<b;c++){var d=a[c];d instanceof y&&bj(d,function(a){null!==a.data&&a.Kb()})}}};
C.prototype.updateModelDataReferences=function(){var a=this.data;if(null!==a&&!(this instanceof Je)){var b=this.h;if(null!==b){var c=b.ba;if(c instanceof M){var d=c.Sm(a),b=b.FI(d),f=this.hb;b!==f&&(b=null!==f?c.Hb(f.data):void 0,f=c.en,"function"===typeof f?f(a,b):a[f]=b,c.vx(a,d))}}}};t.A(C,{cw:"adornments"},function(){return null===this.ki?t.ag:this.ki.jF});C.prototype.findAdornment=C.prototype.bp=function(a){e&&t.i(a,"string",C,"findAdornment:category");var b=this.ki;return null===b?null:b.za(a)};
C.prototype.addAdornment=C.prototype.Wk=function(a,b){if(null!==b){e&&(t.i(a,"string",C,"addAdornment:category"),t.l(b,Je,C,"addAdornment:ad"));var c=null,d=this.ki;null!==d&&(c=d.za(a));if(c!==b){if(null!==c){var f=c.h;null!==f&&f.remove(c)}null===d&&(this.ki=d=new ia("string",Je));b.rh!==a&&(b.Zc=a);d.add(a,b);c=this.h;null!==c&&(c.add(b),b.data=this.data)}}};
C.prototype.removeAdornment=C.prototype.vl=function(a){e&&t.i(a,"string",C,"removeAdornment:category");var b=this.ki;if(null!==b){var c=b.za(a);if(null!==c){var d=c.h;null!==d&&d.remove(c)}b.remove(a);0===b.count&&(this.ki=null)}};C.prototype.clearAdornments=C.prototype.Wi=function(){var a=this.ki;if(null!==a){for(var b=t.Db(),a=a.k;a.next();)b.push(a.key);for(var a=b.length,c=0;c<a;c++)this.vl(b[c]);t.ya(b)}};
C.prototype.updateAdornments=function(){var a=this.h;if(null!==a){ym(this,a);for(var a=a.wb.ef.n,b=a.length,c=0;c<b;c++){var d=a[c];d.isEnabled&&d.updateAdornments(this)}for(a=this.cw;a.next();)b=a.value,b.Kb(),b.ha()}};
function ym(a,b){if(a.eb&&a.hG){var c=a.Pt;if(null===c||!(a.oa.N()&&a.La()&&c.pl()&&c.oa.N()))return;var d=a.bp("Selection");if(null===d){d=a.iG;null===d&&(a instanceof T?d=b.rF:a instanceof C&&(d=a instanceof S?b.NE:b.GF));if(!(d instanceof Je))return;Le(d);d=d.copy();if(!(d instanceof Je))return;d.Zc="Selection";d.pc=c}if(null!==d){var f=d.placeholder;if(null!==f){var g=c.ek(),h=0;c instanceof V&&(h=c.fb);var k=t.Cl();k.p((c.Pa.width+h)*g,(c.Pa.height+h)*g);f.Ca=k;t.ck(k)}d.angle=c.hl();d.type!==
wg&&(f=t.K(),d.location=c.pb(Eb,f),t.B(f));a.Wk("Selection",d);return}}a.vl("Selection")}t.A(C,{layer:"layer"},function(){return this.lo});t.A(C,{h:"diagram"},function(){var a=this.lo;return null!==a?a.h:null});t.g(C,"layerName",C.prototype.af);
t.defineProperty(C,{af:"layerName"},function(){return this.Kk},function(a){var b=this.Kk;if(b!==a){t.i(a,"string",C,"layerName");var c=this.h;if(null===c||null!==c.ct(a)&&!c.un)if(this.Kk=a,this.j("layerName",b,a),b=this.layer,null!==b&&b.name!==a&&(c=b.h,null!==c&&(a=c.ct(a),null!==a&&a!==b))){var d=b.Xe(-1,this,!0);0<=d&&c.Ic(xd,"parts",b,this,null,d,!0);d=a.np(99999999,this,!0);0<=d&&c.Ic(wd,"parts",a,null,this,!0,d);d=this.tp;if(null!==d){var f=c.Na;c.Na=!0;d(this,b,a);c.Na=f}}}});
t.g(C,"layerChanged",C.prototype.tp);t.defineProperty(C,{tp:"layerChanged"},function(){return this.jr},function(a){var b=this.jr;b!==a&&(null!==a&&t.i(a,"function",C,"layerChanged"),this.jr=a,this.j("layerChanged",b,a))});t.A(C,{rc:"isTemporary"},function(){return null!==this.lo?this.lo.rc:!1});function ij(a){var b=a.h;null!==b&&(zi(b),0!==(a.W&16384)!==!0&&(a.W|=16384,b.te()))}function Qh(a){0!==(a.W&16384)!==!1&&(a.updateAdornments(),a.W&=-16385,a=a.h,null!==a&&(a.ve=!0))}t.g(C,"location",C.prototype.location);
t.defineProperty(C,{location:"location"},function(){return this.Yg},function(a){var b=this.Yg;if(!(b.M(a)||this instanceof T)){e&&t.l(a,w,C,"location");a=a.Z();var c=this.h;this.Yg=a;if(!1===Ri(this)){var d=this.Ra,f=a.x-b.x,g=a.y-b.y,h=d.copy();d.p(h.x+f,h.y+g);Rk(this,!0);!d.M(h)&&c&&this.j("position",h,d)}this.j("location",b,a)}});function Rk(a,b){if(!1===Si(a)){var c=a.h;null!==c&&(a.La()&&c.fg.add(a),a instanceof R&&!c.la.vb&&a.wf(),b||c.te());zm(a,!0)}}
function Am(a){if(!1!==Si(a)){var b=a.position,c=a.location;c.N()&&b.N()||(Bm(a,b,c),sk(a));var b=a.Ra,c=a.cc,d=c.copy();c.Ma();c.x=b.x;c.y=b.y;c.freeze();tk(a,d,c);zm(a,!1)}}t.A(C,{kc:"locationObject"},function(){if(null===this.Nk){var a=this.ax;void 0!==a&&null!==a&&""!==a?(a=this.oe(a),this.Nk=null!==a?a:this):this.Nk=this instanceof Je&&this.da!==wg&&null!==this.Jb?this.Jb:this}return this.Nk.visible?this.Nk:this});t.g(C,"minLocation",C.prototype.zF);
t.defineProperty(C,{zF:"minLocation"},function(){return this.Ar},function(a){var b=this.Ar;b.M(a)||(e&&t.l(a,w,C,"minLocation"),this.Ar=a=a.Z(),this.j("minLocation",b,a))});t.g(C,"maxLocation",C.prototype.tF);t.defineProperty(C,{tF:"maxLocation"},function(){return this.tr},function(a){var b=this.tr;b.M(a)||(e&&t.l(a,w,C,"maxLocation"),this.tr=a=a.Z(),this.j("maxLocation",b,a))});t.g(C,"locationObjectName",C.prototype.ax);
t.defineProperty(C,{ax:"locationObjectName"},function(){return this.qr},function(a){var b=this.qr;b!==a&&(e&&t.i(a,"string",C,"locationObjectName"),this.qr=a,this.Nk=null,Jk(this),this.j("locationObjectName",b,a))});t.g(C,"locationSpot",C.prototype.bf);
t.defineProperty(C,{bf:"locationSpot"},function(){return this.rr},function(a){var b=this.rr;b.M(a)||(e&&(t.l(a,H,C,"locationSpot"),a.xd()||t.m("Part.locationSpot must be a specific Spot value, not: "+a)),this.rr=a=a.Z(),Jk(this),this.j("locationSpot",b,a))});C.prototype.move=C.prototype.move=function(a){this.position=a};C.prototype.moveTo=C.prototype.moveTo=function(a,b){var c=t.mc(a,b);this.move(c);t.B(c)};
C.prototype.isVisible=C.prototype.La=function(){if(!this.visible)return!1;var a=this.layer;if(null!==a&&!a.visible)return!1;a=this.hb;if(!(null===a||a.Yd&&a.La()))return!1;if(this instanceof R){a=this.dA();if(null!==a&&!a.Qc)return!1;a=this.$d;if(null!==a)return a.La()}else if(this instanceof T){var b=!0,c=this.h;null!==c&&(b=c.pd);c=this.aa;if(null!==c){if(this.Ec&&b&&!c.Qc)return!1;c=c.findVisibleNode();if(null===c||c===a)return!1}c=this.ca;if(null!==c){if(this.Ec&&!b&&!c.Qc)return!1;b=c.findVisibleNode();
if(null===b||b===a)return!1}}return!0};C.prototype.df=function(a){a?(this.J(4),ij(this),a=this.h,null!==a&&a.fg.add(this)):(this.J(8),this.Wi());this.fa()};
C.prototype.findObject=C.prototype.oe=function(a){if(this.name===a)return this;null===this.Fj&&(this.Fj={});var b=this.Fj;if(void 0!==b[a])return b[a];for(var c=this.xa.n,d=c.length,f=0;f<d;f++){var g=c[f];if(g.name===a)return b[a]=g;if(g instanceof y)if(null===g.yi&&null===g.hg){if(g=g.oe(a),null!==g)return b[a]=g}else if(Zl(g)&&(g=g.xa.$a(),null!==g&&g.name===a))return b[a]=g}return b[a]=null};
function Cm(a,b,c,d){void 0===d&&(d=new w);c.Ge()&&(c=Hb);var f=b.Pa;d.p(f.width*c.x+c.offsetX,f.height*c.y+c.offsetY);if(null===b||b===a)return d;b.transform.Sa(d);for(b=b.ja;null!==b&&b!==a;)b.transform.Sa(d),b=b.ja;a.Mk.Sa(d);d.offset(-a.Wc.x,-a.Wc.y);return d}C.prototype.ensureBounds=C.prototype.sf=function(){ih(this,Infinity,Infinity);this.Lc()};
function Th(a,b,c){c=void 0===c?a.mH:c;var d;isNaN(a.Cj)&&(a.Cj=$l(a));d=a.Cj;var f=2*d;if(!a.gj)return c.p(b.x-1-d,b.y-1-d,b.width+2+f,b.height+2+f),c;d=b.x;var f=b.y,g=b.width;b=b.height;var h=a.shadowBlur;a=a.pG;g+=h;b+=h;d-=h/2;f-=h/2;0<a.x?g+=a.x:(d+=a.x,g-=a.x);0<a.y?b+=a.y:(f+=a.y,b-=a.y);c.p(d-1,f-1,g+2,b+2);return c}aa=C.prototype;
aa.Lc=function(){sk(this);if(!1===Ri(this))Am(this);else{var a=t.Gf();a.assign(this.cc);Gk(this);this.cc.Ma();var b=Ph(this);this.Tj(0,0,this.Wc.width,this.Wc.height);var c=this.position;Bm(this,c,this.location);var d=this.cc;d.x=c.x;d.y=c.y;d.freeze();sk(this);tk(this,a,d);a.M(d)?this.Df(b):!this.Ld()||F.I(a.width,d.width)&&F.I(a.height,d.height)||0<=this.BC&&this.J(16);t.hc(a);zm(this,!1)}};
aa.nG=function(a,b){if(!a.N()||this instanceof T)return!1;if(this.h&&!(this instanceof Je)){var c=this.h.li;c.sd&&Gh(c,this,b.copy(),a.copy())}var c=this.Yg,d=c.copy();!1===Si(this)&&!1===Ri(this)?(c.p(c.x+(a.x-b.x),c.y+(a.y-b.y)),this.Ra=a,Rk(this,!0),sk(this),Am(this),c.M(d)||this.j("location",d,c)):(this.Ra=a,c.p(NaN,NaN));return!0};
aa.oG=function(a,b){var c=this.Yg;!1===Si(this)&&!1===Ri(this)?(this.Yg.p(c.x+a-this.Ra.x,c.y+b-this.Ra.y),this.Ra.p(a,b),Rk(this,!1),sk(this)):(c.p(NaN,NaN),this.Ra.p(a,b))};
function Bm(a,b,c){var d=NaN,f=NaN,g=t.K(),h=a.bf,k=a.kc;h.Ge()&&t.m("determineOffset: Part's locationSpot must be real: "+h.toString());var l=k.Pa,d=0;k.fb&&(d=k.bh);g.Rt(0,0,l.width+d,l.height+d,h);if(k!==a)for(k.fb&&g.offset(-d/2,-d/2),k.transform.Sa(g),h=k.ja;null!==h&&h!==a;)h.transform.Sa(g),h=h.ja;a.Mk.Sa(g);g.offset(-a.Wc.x,-a.Wc.y);h=a.h;c.N()?(k=b.x,l=b.y,d=c.x-g.x,f=c.y-g.y,b.p(d,f),c=!1,null!==h&&(d=h.li,d.wj?c=!0:!d.sd||a instanceof Je||Gh(d,a,new w(k,l),b),c||b.x===k&&b.y===l||(d=h.Wa,
h.Wa=!0,a.j("position",new w(k,l),b),h.Wa=d))):b.N()&&(d=b.x,f=b.y,b=c.copy(),c.p(d+g.x,f+g.y),c.M(b)||null===h||(d=h.Wa,h.Wa=!0,a.j("location",b,c),h.Wa=d));t.B(g)}function dj(a,b,c){yk(a,!1);a instanceof R&&Xj(c,a);a.layer.rc||b||c.Oc();b=a.cc;var d=c.xb;d.N()?(Ph(a)?eb(b,d)||(a.Df(!1),ij(a)):b.Tf(d)&&a.Df(!0),a.updateAdornments()):c.Ik=!0}aa.ol=function(){return!0};
function Rh(a,b){if(a.visible){var c=a.cc;if(0!==c.width&&0!==c.height&&!isNaN(c.x)&&!isNaN(c.y)){var d=a.transform,f=a.ja,g=a.kk;g.reset();null!==f&&(f.Hf()?g.multiply(f.me):null!==f.ja&&g.multiply(f.ja.me));g.multiply(a.md);null!==a.vc&&(Dk(a,b,a.vc,!0,!0),b.fillRect(c.x,c.y,c.width,c.height));null===a.vc&&null===a.Mb&&(b.fillStyle="rgba(0,0,0,0.4)",b.fillRect(c.x,c.y,c.width,c.height));null!==a.Mb&&(d.qt()||b.transform(d.m11,d.m12,d.m21,d.m22,d.dx,d.dy),f=a.Pa,c=f.width,f=f.height,Dk(a,b,a.Mb,
!0),b.fillRect(0,0,c+0,f+0),d.qt()||(c=1/(d.m11*d.m22-d.m12*d.m21),b.transform(d.m22*c,-d.m12*c,-d.m21*c,d.m11*c,c*(d.m21*d.dy-d.m22*d.dx),c*(d.m12*d.dx-d.m11*d.dy))))}}}aa.Ld=function(){return!0};t.g(C,"category",C.prototype.Zc);
t.defineProperty(C,{Zc:"category"},function(){return this.rh},function(a){var b=this.rh;if(b!==a){t.i(a,"string",C,"category");this.rh=a;this.j("category",b,a);var c=this.h,d=this.data;if(null!==c&&null!==d){var f=c.ba;this instanceof T?(f instanceof M?f.lG(d,a):f instanceof Kd&&f.OJ(d,a),c=c.findTemplateForLinkData(d,a),c instanceof T&&(Le(c),c=c.copy(),c instanceof T&&Dm(this,c,b,a))):this instanceof Je||(null!==f&&f.sx(d,a),c=c.findTemplateForNodeData(d,a),c instanceof C&&(Le(c),c=c.copy(),c instanceof
C&&!(c instanceof T)&&(c.location=this.location,Dm(this,c,b,a))))}this instanceof Je&&(a=this.Wh,null!==a&&(c=a.ki,null!==c&&c.remove(b),a.Wk(this.rh,this)))}});
function Dm(a,b,c,d){b.constructor===a.constructor||t.RG||(t.RG=!0,t.trace('Should not change the class of the Part when changing category from "'+c+'" to "'+d+'"'),t.trace("  Old class: "+t.xg(a)+", new class: "+t.xg(b)+", part: "+a.toString()));a.Wi();var f=a.data;c=a.af;var g=a.eb,h=a.zg,k=!0,l=!0,m=!1;a instanceof R&&(k=a.ci,l=a.Qc,m=a.pn);b.Yh(a);b.cloneProtected(a);a.rh=d;a.ha();a.fa();b=a.h;d=!0;null!==b&&(d=b.Wa,b.Wa=!0);a.Ol=f;null!==f&&a.Kb();null!==b&&(b.Wa=d);f=a.af;f!==c&&(a.Kk=c,a.af=
f);a instanceof R&&(a.ci=k,a.Qc=l,a.pn=m,a.Ld()&&a.J(64));a.eb=g;a.zg=h}C.prototype.canCopy=function(){if(!this.fE)return!1;var a=this.layer;if(null===a)return!0;if(!a.Si)return!1;a=a.h;return null===a?!0:a.Si?!0:!1};C.prototype.canDelete=function(){if(!this.oE)return!1;var a=this.layer;if(null===a)return!0;if(!a.Zk)return!1;a=a.h;return null===a?!0:a.Zk?!0:!1};
C.prototype.canEdit=function(){if(!this.zG)return!1;var a=this.layer;if(null===a)return!0;if(!a.Qo)return!1;a=a.h;return null===a?!0:a.Qo?!0:!1};C.prototype.canGroup=function(){if(!this.OE)return!1;var a=this.layer;if(null===a)return!0;if(!a.Mo)return!1;a=a.h;return null===a?!0:a.Mo?!0:!1};C.prototype.canMove=function(){if(!this.CF)return!1;var a=this.layer;if(null===a)return!0;if(!a.Rj)return!1;a=a.h;return null===a?!0:a.Rj?!0:!1};
C.prototype.canReshape=function(){if(!this.SF)return!1;var a=this.layer;if(null===a)return!0;if(!a.No)return!1;a=a.h;return null===a?!0:a.No?!0:!1};C.prototype.canResize=function(){if(!this.TF)return!1;var a=this.layer;if(null===a)return!0;if(!a.Oo)return!1;a=a.h;return null===a?!0:a.Oo?!0:!1};C.prototype.canRotate=function(){if(!this.ZF)return!1;var a=this.layer;if(null===a)return!0;if(!a.Po)return!1;a=a.h;return null===a?!0:a.Po?!0:!1};
C.prototype.canSelect=function(){if(!this.wl)return!1;var a=this.layer;if(null===a)return!0;if(!a.Pe)return!1;a=a.h;return null===a?!0:a.Pe?!0:!1};t.g(C,"copyable",C.prototype.fE);t.defineProperty(C,{fE:"copyable"},function(){return 0!==(this.W&1)},function(a){var b=0!==(this.W&1);b!==a&&(e&&t.i(a,"boolean",C,"copyable"),this.W^=1,this.j("copyable",b,a))});t.g(C,"deletable",C.prototype.oE);
t.defineProperty(C,{oE:"deletable"},function(){return 0!==(this.W&2)},function(a){var b=0!==(this.W&2);b!==a&&(e&&t.i(a,"boolean",C,"deletable"),this.W^=2,this.j("deletable",b,a))});t.g(C,"textEditable",C.prototype.zG);t.defineProperty(C,{zG:"textEditable"},function(){return 0!==(this.W&4)},function(a){var b=0!==(this.W&4);b!==a&&(e&&t.i(a,"boolean",C,"textEditable"),this.W^=4,this.j("textEditable",b,a),this.updateAdornments())});t.g(C,"groupable",C.prototype.OE);
t.defineProperty(C,{OE:"groupable"},function(){return 0!==(this.W&8)},function(a){var b=0!==(this.W&8);b!==a&&(e&&t.i(a,"boolean",C,"groupable"),this.W^=8,this.j("groupable",b,a))});t.g(C,"movable",C.prototype.CF);t.defineProperty(C,{CF:"movable"},function(){return 0!==(this.W&16)},function(a){var b=0!==(this.W&16);b!==a&&(e&&t.i(a,"boolean",C,"movable"),this.W^=16,this.j("movable",b,a))});t.g(C,"selectionAdorned",C.prototype.hG);
t.defineProperty(C,{hG:"selectionAdorned"},function(){return 0!==(this.W&32)},function(a){var b=0!==(this.W&32);b!==a&&(e&&t.i(a,"boolean",C,"selectionAdorned"),this.W^=32,this.j("selectionAdorned",b,a),this.updateAdornments())});t.g(C,"isInDocumentBounds",C.prototype.Rw);t.defineProperty(C,{Rw:"isInDocumentBounds"},function(){return 0!==(this.W&64)},function(a){var b=0!==(this.W&64);b!==a&&(e&&t.i(a,"boolean",C,"isInDocumentBounds"),this.W^=64,this.j("isInDocumentBounds",b,a))});
t.g(C,"isLayoutPositioned",C.prototype.vA);t.defineProperty(C,{vA:"isLayoutPositioned"},function(){return 0!==(this.W&128)},function(a){var b=0!==(this.W&128);b!==a&&(e&&t.i(a,"boolean",C,"isLayoutPositioned"),this.W^=128,this.j("isLayoutPositioned",b,a),this.J(a?4:8))});t.g(C,"selectable",C.prototype.wl);t.defineProperty(C,{wl:"selectable"},function(){return 0!==(this.W&256)},function(a){var b=0!==(this.W&256);b!==a&&(e&&t.i(a,"boolean",C,"selectable"),this.W^=256,this.j("selectable",b,a),this.updateAdornments())});
t.g(C,"reshapable",C.prototype.SF);t.defineProperty(C,{SF:"reshapable"},function(){return 0!==(this.W&512)},function(a){var b=0!==(this.W&512);b!==a&&(e&&t.i(a,"boolean",C,"reshapable"),this.W^=512,this.j("reshapable",b,a),this.updateAdornments())});t.g(C,"resizable",C.prototype.TF);t.defineProperty(C,{TF:"resizable"},function(){return 0!==(this.W&1024)},function(a){var b=0!==(this.W&1024);b!==a&&(e&&t.i(a,"boolean",C,"resizable"),this.W^=1024,this.j("resizable",b,a),this.updateAdornments())});
t.g(C,"rotatable",C.prototype.ZF);t.defineProperty(C,{ZF:"rotatable"},function(){return 0!==(this.W&2048)},function(a){var b=0!==(this.W&2048);b!==a&&(e&&t.i(a,"boolean",C,"rotatable"),this.W^=2048,this.j("rotatable",b,a),this.updateAdornments())});t.g(C,"isSelected",C.prototype.eb);
t.defineProperty(C,{eb:"isSelected"},function(){return 0!==(this.W&4096)},function(a){var b=0!==(this.W&4096);if(b!==a){e&&t.i(a,"boolean",C,"isSelected");var c=this.h;if(!a||this.canSelect()&&!(null!==c&&c.selection.count>=c.uF)){this.W^=4096;var d=!1;if(null!==c){d=c.Wa;c.Wa=!0;var f=c.selection;f.Ma();a?f.add(this):f.remove(this);f.freeze()}this.j("isSelected",b,a);ij(this);a=this.jG;null!==a&&a(this);null!==c&&(c.te(),c.Wa=d)}}});t.g(C,"isHighlighted",C.prototype.zg);
t.defineProperty(C,{zg:"isHighlighted"},function(){return 0!==(this.W&524288)},function(a){var b=0!==(this.W&524288);if(b!==a){e&&t.i(a,"boolean",C,"isHighlighted");this.W^=524288;var c=this.h;null!==c&&(c=c.Kw,c.Ma(),a?c.add(this):c.remove(this),c.freeze());this.j("isHighlighted",b,a);this.fa()}});t.g(C,"isShadowed",C.prototype.gj);
t.defineProperty(C,{gj:"isShadowed"},function(){return 0!==(this.W&8192)},function(a){var b=0!==(this.W&8192);b!==a&&(e&&t.i(a,"boolean",C,"isShadowed"),this.W^=8192,this.j("isShadowed",b,a),this.fa())});function Si(a){return 0!==(a.W&32768)}function zm(a,b){a.W=b?a.W|32768:a.W&-32769}function yk(a,b){a.W=b?a.W|65536:a.W&-65537}function Ph(a){return 0!==(a.W&131072)}C.prototype.Df=function(a){this.W=a?this.W|131072:this.W&-131073};t.g(C,"isAnimated",C.prototype.oA);
t.defineProperty(C,{oA:"isAnimated"},function(){return 0!==(this.W&262144)},function(a){var b=0!==(this.W&262144);b!==a&&(e&&t.i(a,"boolean",C,"isAnimated"),this.W^=262144,this.j("isAnimated",b,a))});t.g(C,"selectionObjectName",C.prototype.qx);t.defineProperty(C,{qx:"selectionObjectName"},function(){return this.ks},function(a){var b=this.ks;b!==a&&(e&&t.i(a,"string",C,"selectionObjectName"),this.ks=a,this.tm=null,this.j("selectionObjectName",b,a))});t.g(C,"selectionAdornmentTemplate",C.prototype.iG);
t.defineProperty(C,{iG:"selectionAdornmentTemplate"},function(){return this.is},function(a){var b=this.is;b!==a&&(e&&t.l(a,Je,C,"selectionAdornmentTemplate"),this instanceof T&&(a.type=wg),this.is=a,this.j("selectionAdornmentTemplate",b,a))});t.A(C,{Pt:"selectionObject"},function(){if(null===this.tm){var a=this.qx;null!==a&&""!==a?(a=this.oe(a),this.tm=null!==a?a:this):this instanceof T?(a=this.path,this.tm=null!==a?a:this):this.tm=this}return this.tm});t.g(C,"selectionChanged",C.prototype.jG);
t.defineProperty(C,{jG:"selectionChanged"},function(){return this.js},function(a){var b=this.js;b!==a&&(null!==a&&t.i(a,"function",C,"selectionChanged"),this.js=a,this.j("selectionChanged",b,a))});t.g(C,"resizeAdornmentTemplate",C.prototype.UF);t.defineProperty(C,{UF:"resizeAdornmentTemplate"},function(){return this.Wr},function(a){var b=this.Wr;b!==a&&(e&&t.l(a,Je,C,"resizeAdornmentTemplate"),this.Wr=a,this.j("resizeAdornmentTemplate",b,a))});t.g(C,"resizeObjectName",C.prototype.XF);
t.defineProperty(C,{XF:"resizeObjectName"},function(){return this.Yr},function(a){var b=this.Yr;b!==a&&(e&&t.i(a,"string",C,"resizeObjectName"),this.Yr=a,this.vo=null,this.j("resizeObjectName",b,a))});t.A(C,{WF:"resizeObject"},function(){if(null===this.vo){var a=this.XF;null!==a&&""!==a?(a=this.oe(a),this.vo=null!==a?a:this):this.vo=this}return this.vo});t.g(C,"resizeCellSize",C.prototype.VF);
t.defineProperty(C,{VF:"resizeCellSize"},function(){return this.Xr},function(a){var b=this.Xr;b.M(a)||(e&&t.l(a,fa,C,"resizeCellSize"),this.Xr=a=a.Z(),this.j("resizeCellSize",b,a))});t.g(C,"rotateAdornmentTemplate",C.prototype.$F);t.defineProperty(C,{$F:"rotateAdornmentTemplate"},function(){return this.Zr},function(a){var b=this.Zr;b!==a&&(e&&t.l(a,Je,C,"rotateAdornmentTemplate"),this.Zr=a,this.j("rotateAdornmentTemplate",b,a))});t.g(C,"rotateObjectName",C.prototype.bG);
t.defineProperty(C,{bG:"rotateObjectName"},function(){return this.$r},function(a){var b=this.$r;b!==a&&(e&&t.i(a,"string",C,"rotateObjectName"),this.$r=a,this.wo=null,this.j("rotateObjectName",b,a))});t.A(C,{aG:"rotateObject"},function(){if(null===this.wo){var a=this.bG;null!==a&&""!==a?(a=this.oe(a),this.wo=null!==a?a:this):this.wo=this}return this.wo});t.g(C,"text",C.prototype.text);
t.defineProperty(C,{text:"text"},function(){return this.le},function(a){var b=this.le;b!==a&&(e&&t.i(a,"string",C,"text"),this.le=a,this.j("text",b,a))});t.g(C,"containingGroup",C.prototype.hb);
t.defineProperty(C,{hb:"containingGroup"},function(){return this.zk},function(a){if(this.Ld()){var b=this.zk;if(b!==a){e&&null!==a&&t.l(a,S,C,"containingGroup");null===a||this!==a&&!a.nl(this)||(this===a&&t.m("Cannot make a Group a member of itself: "+this.toString()),t.m("Cannot make a Group indirectly contain itself: "+this.toString()+" already contains "+a.toString()));this.J(gj);var c=this.h;null!==b?Em(b,this):this instanceof S&&null!==c&&c.Uk.remove(this);this.zk=a;null!==a?Fm(a,this):this instanceof
S&&null!==c&&c.Uk.add(this);this.J(aj);if(null!==c){var d=this.data,f=c.ba;null!==d&&f instanceof M&&f.vx(d,f.Hb(null!==a?a.data:null))}d=this.Wz;null!==d&&(f=!0,null!==c&&(f=c.Na,c.Na=!0),d(this,b,a),null!==c&&(c.Na=f));if(this instanceof S)for(c=new ma(C),Ie(c,this,!0,0),c=c.k;c.next();)if(d=c.value,d instanceof R)for(d=d.qe;d.next();)f=d.value,Lj(f);if(this instanceof R)for(d=this.qe;d.next();)f=d.value,Lj(f);this.j("containingGroup",b,a);null!==a&&a.xx()}}else t.m("cannot set the Part.containingGroup of a Link or Adornment")});
function wk(a){a=a.hb;null!==a&&(a.ha(),null!==a.Jb&&a.Jb.ha(),a.wf())}C.prototype.lt=function(a){var b=this.zk;null===b||a||Fm(b,this)};C.prototype.mt=function(a){var b=this.zk;null===b||a||Em(b,this)};C.prototype.Nm=function(){var a=this.data;if(null!==a){var b=this.h;null!==b&&(b=b.ba,null!==b&&b.nx(a))}};t.g(C,"containingGroupChanged",C.prototype.Wz);
t.defineProperty(C,{Wz:"containingGroupChanged"},function(){return this.xq},function(a){var b=this.xq;b!==a&&(null!==a&&t.i(a,"function",C,"containingGroupChanged"),this.xq=a,this.j("containingGroupChanged",b,a))});C.prototype.findTopLevelPart=function(){return Gm(this,this)};function Gm(a,b){var c=b.hb;return null!==c?Gm(a,c):b instanceof R&&(c=b.$d,null!==c)?Gm(a,c):b}t.A(C,{sp:"isTopLevel"},function(){return null!==this.hb||this instanceof R&&this.bi?!1:!0});
C.prototype.isMemberOf=C.prototype.nl=function(a){return a instanceof S?Hm(this,this,a):!1};function Hm(a,b,c){if(b===c||null===c)return!1;var d=b.hb;return null===d||d!==c&&!Hm(a,d,c)?b instanceof R&&(b=b.$d,null!==b)?Hm(a,b,c):!1:!0}C.prototype.findCommonContainingGroup=C.prototype.EI=function(a){return Im(this,this,a)};
function Im(a,b,c){if(null===b||null===c)return null;var d=b.hb;if(null===d)return null;if(b===c)return d;var f=c.hb;return null===f?null:d===f?f:Hm(a,c,d)?d:Hm(a,b,f)?f:Im(a,d,f)}t.g(C,"layoutConditions",C.prototype.mF);t.defineProperty(C,{mF:"layoutConditions"},function(){return this.kr},function(a){var b=this.kr;b!==a&&(e&&t.i(a,"number",C,"layoutConditions"),this.kr=a,this.j("layoutConditions",b,a))});
C.prototype.canLayout=function(){if(!this.vA||!this.La())return!1;var a=this.layer;return null!==a&&a.rc||this instanceof R&&this.bi?!1:!0};C.prototype.invalidateLayout=C.prototype.J=function(a){void 0===a&&(a=16777215);var b;this.vA&&0!==(a&this.mF)?(b=this.layer,null!==b&&b.rc||this instanceof R&&this.bi?b=!1:(b=this.h,b=null!==b&&b.la.vb?!1:!0)):b=!1;if(b)if(b=this.zk,null!==b){var c=b.jc;null!==c?c.J():b.J(a)}else a=this.h,null!==a&&(c=a.jc,null!==c&&c.J())};
function ej(a){if(!a.La())return!1;a=a.layer;return null!==a&&a.rc?!1:!0}t.g(C,"dragComputation",C.prototype.aA);t.defineProperty(C,{aA:"dragComputation"},function(){return this.Hq},function(a){var b=this.Hq;b!==a&&(null!==a&&t.i(a,"function",C,"dragComputation"),this.Hq=a,this.j("dragComputation",b,a))});t.g(C,"shadowOffset",C.prototype.pG);
t.defineProperty(C,{pG:"shadowOffset"},function(){return this.wm},function(a){var b=this.wm;b.M(a)||(e&&t.l(a,w,C,"shadowOffset"),this.wm=a=a.Z(),this.fa(),this.j("shadowOffset",b,a))});t.g(C,"shadowColor",C.prototype.shadowColor);t.defineProperty(C,{shadowColor:"shadowColor"},function(){return this.vm},function(a){var b=this.vm;b!==a&&(e&&t.i(a,"string",C,"shadowColor"),this.vm=a,this.fa(),this.j("shadowColor",b,a))});t.g(C,"shadowBlur",C.prototype.shadowBlur);
t.defineProperty(C,{shadowBlur:"shadowBlur"},function(){return this.um},function(a){var b=this.um;b!==a&&(e&&t.i(a,"number",C,"shadowBlur"),this.um=a,this.fa(),this.j("shadowBlur",b,a))});function Je(a){0===arguments.length?C.call(this,$g):C.call(this,a);this.af="Adornment";this.sb=null;this.W&=-257;this.Yg=new w(NaN,NaN);this.mi=new B(x);this.Jb=null}t.ga("Adornment",Je);t.Ka(Je,C);aa=Je.prototype;aa.toString=function(){var a=this.Wh;return"Adornment("+this.Zc+")"+(null!==a?a.toString():"")};
aa.uj=function(){return this.sb&&this.sb.S instanceof T?this.sb.S.uj():null};aa.Rq=function(){return null};aa.bx=function(){var a=this.pc.S,b=this.pc;if(a instanceof T&&b instanceof V){var c=a.path,b=c.Ta;a.bx();for(var b=c.Ta,a=this.xa,c=a.length,d=0;d<c;d++){var f=a.n[d];f.fj&&f instanceof V&&(f.Ta=b)}}};aa.Sy=function(){var a=this.Wh;return a instanceof T?a.Cc:null};t.A(Je,{placeholder:"placeholder"},function(){return this.Jb});t.g(Je,"adornedObject",Je.prototype.pc);
t.defineProperty(Je,{pc:"adornedObject"},function(){return this.sb},function(a){e&&null!==a&&t.l(a,Q,C,"adornedObject:val");var b=this.Wh,c=null;null!==a&&(c=a.S);null===b||null!==a&&b===c||b.vl(this.Zc);this.sb=a;c&&c.Wk(this.Zc,this)});t.A(Je,{Wh:"adornedPart"},function(){var a=this.sb;return null!==a?a.S:null});Je.prototype.ol=function(){var a=this.sb;if(null===a)return!0;a=a.S;return null===a||!Ri(a)};Je.prototype.Ld=function(){return!1};t.A(Je,{hb:"containingGroup"},function(){return null});
Je.prototype.gn=function(a,b,c,d,f,g,h){if(a===wd&&"elements"===b)if(f instanceof Ug)null===this.Jb?this.Jb=f:this.Jb!==f&&t.m("Cannot insert a second Placeholder into the visual tree of an Adornment.");else{if(f instanceof y){var k=f.bt(function(a){return a instanceof Ug});k instanceof Ug&&(null===this.Jb?this.Jb=k:this.Jb!==k&&t.m("Cannot insert a second Placeholder into the visual tree of an Adornment."))}}else a===xd&&"elements"===b&&null!==this.Jb&&(d===this.Jb?this.Jb=null:d instanceof y&&this.Jb.ej(d)&&
(this.Jb=null));C.prototype.gn.call(this,a,b,c,d,f,g,h)};Je.prototype.updateAdornments=function(){};Je.prototype.Nm=function(){};function R(a){0===arguments.length?C.call(this,$g):C.call(this,a);this.nc=new B(T);this.io=this.Lk=this.nr=this.mr=null;this.dr=!0;this.Gs=!1;this.Bs=null;this.qq=this.er=!0;this.rq=F.eH;this.Rd=this.qh=null;this.Qr=Jm;this.Uh=!1}t.ga("Node",R);t.Ka(R,C);
R.prototype.cloneProtected=function(a){C.prototype.cloneProtected.call(this,a);a.mr=this.mr;a.nr=this.nr;a.Lk=this.Lk;a.dr=this.dr;a.Gs=this.Gs;a.Bs=this.Bs;a.er=this.er;a.qq=this.qq;a.rq=this.rq.Z();a.Qr=this.Qr};R.prototype.Yh=function(a){C.prototype.Yh.call(this,a);a.wf();a.qh=this.qh;a.Rd=null};var Km;R.DirectionDefault=Km=t.w(R,"DirectionDefault",0);R.DirectionAbsolute=t.w(R,"DirectionAbsolute",1);var Lm;R.DirectionRotatedNode=Lm=t.w(R,"DirectionRotatedNode",2);var kk;
R.DirectionRotatedNodeOrthogonal=kk=t.w(R,"DirectionRotatedNodeOrthogonal",3);R.SpreadingNone=t.w(R,"SpreadingNone",10);var Jm;R.SpreadingEvenly=Jm=t.w(R,"SpreadingEvenly",11);var Mm;R.SpreadingPacked=Mm=t.w(R,"SpreadingPacked",12);function Nm(a,b){null!==b&&(null===a.qh&&(a.qh=new ma(Om)),a.qh.add(b))}
R.prototype.gn=function(a,b,c,d,f,g,h){a===wd&&"elements"===b?this.Rd=null:a===xd&&"elements"===b&&(null===this.h?this.Rd=null:d instanceof Q&&Vl(this,d,function(a,b){Sk(a,b,!0)}));C.prototype.gn.call(this,a,b,c,d,f,g,h)};R.prototype.invalidateConnectedLinks=R.prototype.wf=function(a){void 0===a&&(a=null);for(var b=this.qe;b.next();){var c=b.value;null!==a&&a.contains(c)||(Pm(this,c.ud),Pm(this,c.fe),c.ac())}};function Pm(a,b){if(null!==b){b.Pr=null;var c=a.hb;null===c||c.Yd||Pm(c,c.gl(""))}}
R.prototype.ol=function(){return!0};t.defineProperty(R,{DJ:"portSpreading"},function(){return this.Qr},function(a){var b=this.Qr;b!==a&&(e&&t.Aa(a,R,R,"portSpreading"),this.Qr=a,this.j("portSpreading",b,a),a=this.h,null!==a&&a.la.vb||this.wf())});t.g(R,"avoidable",R.prototype.Qz);t.defineProperty(R,{Qz:"avoidable"},function(){return this.qq},function(a){var b=this.qq;if(b!==a){e&&t.i(a,"boolean",R,"avoidable");this.qq=a;var c=this.h;null!==c&&Xj(c,this);this.j("avoidable",b,a)}});
t.g(R,"avoidableMargin",R.prototype.PD);t.defineProperty(R,{PD:"avoidableMargin"},function(){return this.rq},function(a){"number"===typeof a?a=new ab(a):t.l(a,ab,R,"avoidableMargin");var b=this.rq;if(!b.M(a)){this.rq=a=a.Z();var c=this.h;null!==c&&Xj(c,this);this.j("avoidableMargin",b,a)}});R.prototype.canAvoid=function(){return this.Qz&&!this.bi};R.prototype.getAvoidableRect=function(a){a.set(this.oa);a.bw(this.PD);return a};
R.prototype.findVisibleNode=function(){for(var a=this;null!==a&&!a.La();)a=a.hb;return a};R.prototype.df=function(a){C.prototype.df.call(this,a);for(var b=this.qe;b.next();)b.value.df(a)};t.A(R,{qe:"linksConnected"},function(){return this.nc.k});R.prototype.findLinksConnected=R.prototype.yE=function(a){void 0===a&&(a=null);if(null===a)return this.nc.k;e&&t.i(a,"string",R,"findLinksConnected:pid");var b=new Ba(this.nc),c=this;b.tl=function(b){return b.aa===c&&b.Rf===a||b.ca===c&&b.Og===a};return b};
R.prototype.findLinksOutOf=R.prototype.Cw=function(a){void 0===a&&(a=null);e&&null!==a&&t.i(a,"string",R,"findLinksOutOf:pid");var b=new Ba(this.nc),c=this;b.tl=function(b){return b.aa!==c?!1:null===a?!0:b.Rf===a};return b};R.prototype.findLinksInto=R.prototype.wg=function(a){void 0===a&&(a=null);e&&null!==a&&t.i(a,"string",R,"findLinksInto:pid");var b=new Ba(this.nc),c=this;b.tl=function(b){return b.ca!==c?!1:null===a?!0:b.Og===a};return b};
R.prototype.findNodesConnected=R.prototype.zE=function(a){void 0===a&&(a=null);e&&null!==a&&t.i(a,"string",R,"findNodesConnected:pid");for(var b=null,c=null,d=this.nc.k;d.next();){var f=d.value;if(f.aa===this){if(null===a||f.Rf===a)f=f.ca,null!==b?b.add(f):null!==c&&c!==f?(b=new ma(R),b.add(c),b.add(f)):c=f}else f.ca!==this||null!==a&&f.Og!==a||(f=f.aa,null!==b?b.add(f):null!==c&&c!==f?(b=new ma(R),b.add(c),b.add(f)):c=f)}return null!==b?b.k:null!==c?new Aa(c):t.ag};
R.prototype.findNodesOutOf=function(a){void 0===a&&(a=null);e&&null!==a&&t.i(a,"string",R,"findNodesOutOf:pid");for(var b=null,c=null,d=this.nc.k;d.next();){var f=d.value;f.aa!==this||null!==a&&f.Rf!==a||(f=f.ca,null!==b?b.add(f):null!==c&&c!==f?(b=new ma(R),b.add(c),b.add(f)):c=f)}return null!==b?b.k:null!==c?new Aa(c):t.ag};
R.prototype.findNodesInto=function(a){void 0===a&&(a=null);e&&null!==a&&t.i(a,"string",R,"findNodesInto:pid");for(var b=null,c=null,d=this.nc.k;d.next();){var f=d.value;f.ca!==this||null!==a&&f.Og!==a||(f=f.aa,null!==b?b.add(f):null!==c&&c!==f?(b=new ma(R),b.add(c),b.add(f)):c=f)}return null!==b?b.k:null!==c?new Aa(c):t.ag};
R.prototype.findLinksBetween=function(a,b,c){void 0===b&&(b=null);void 0===c&&(c=null);e&&(t.l(a,R,R,"findLinksBetween:othernode"),null!==b&&t.i(b,"string",R,"findLinksBetween:pid"),null!==c&&t.i(c,"string",R,"findLinksBetween:otherpid"));var d=new Ba(this.nc),f=this;d.tl=function(d){return(d.aa!==f||d.ca!==a||null!==b&&d.Rf!==b||null!==c&&d.Og!==c)&&(d.aa!==a||d.ca!==f||null!==c&&d.Rf!==c||null!==b&&d.Og!==b)?!1:!0};return d};
R.prototype.findLinksTo=function(a,b,c){void 0===b&&(b=null);void 0===c&&(c=null);e&&(t.l(a,R,R,"findLinksTo:othernode"),null!==b&&t.i(b,"string",R,"findLinksTo:pid"),null!==c&&t.i(c,"string",R,"findLinksTo:otherpid"));var d=new Ba(this.nc),f=this;d.tl=function(d){return d.aa!==f||d.ca!==a||null!==b&&d.Rf!==b||null!==c&&d.Og===c?!1:!0};return d};t.g(R,"linkConnected",R.prototype.oF);
t.defineProperty(R,{oF:"linkConnected"},function(){return this.mr},function(a){var b=this.mr;b!==a&&(null!==a&&t.i(a,"function",R,"linkConnected"),this.mr=a,this.j("linkConnected",b,a))});t.g(R,"linkDisconnected",R.prototype.pF);t.defineProperty(R,{pF:"linkDisconnected"},function(){return this.nr},function(a){var b=this.nr;b!==a&&(null!==a&&t.i(a,"function",R,"linkDisconnected"),this.nr=a,this.j("linkDisconnected",b,a))});t.g(R,"linkValidation",R.prototype.Ap);
t.defineProperty(R,{Ap:"linkValidation"},function(){return this.Lk},function(a){var b=this.Lk;b!==a&&(null!==a&&t.i(a,"function",R,"linkValidation"),this.Lk=a,this.j("linkValidation",b,a))});
function Qm(a,b,c){Pm(a,c);if(!a.nc.contains(b)){a.nc.add(b);var d=a.oF;if(null!==d){var f=!0,g=a.h;null!==g&&(f=g.Na,g.Na=!0);d(a,b,c);null!==g&&(g.Na=f)}b.Ec&&(c=b.aa,b=b.ca,null!==c&&null!==b&&c!==b&&(d=!0,g=a.h,null!==g&&(d=g.pd),a=d?b:c,f=d?c:b,a.Uh||(a.Uh=f),!f.ci||null!==g&&g.la.vb||(d?c===f&&(f.ci=!1):b===f&&(f.ci=!1))))}}
function Rm(a,b,c){Pm(a,c);if(a.nc.remove(b)){var d=a.pF,f=a.h;if(null!==d){var g=!0;null!==f&&(g=f.Na,f.Na=!0);d(a,b,c);null!==f&&(f.Na=g)}b.Ec&&(c=!0,null!==f&&(c=f.pd),a=c?b.ca:b.aa,b=c?b.aa:b.ca,null!==a&&(a.Uh=!1),null===b||b.ci||(0===b.nc.count?(b.Uh=null,null!==f&&f.la.vb||(b.ci=!0)):Qj(b)))}}
function Qj(a){a.Uh=!1;if(0!==a.nc.count){var b=!0,c=a.h;if(null===c||!c.la.vb){null!==c&&(b=c.pd);for(c=a.nc.k;c.next();){var d=c.value;if(d.Ec)if(b){if(d.aa===a){a.ci=!1;return}}else if(d.ca===a){a.ci=!1;return}}a.ci=!0}}}
R.prototype.updateModelDataReferences=function(){C.prototype.updateModelDataReferences.call(this);var a=this.data;if(null!==a){var b=this.h;if(null!==b){var c=b.ba;if(c instanceof Kd){var d=c.Tm(a),b=b.Ve(d),f=this.dA();b!==f&&(b=null!==f?c.Hb(f.data):void 0,f=c.fn,"function"===typeof f?f(a,b):a[f]=b,c.lh(a,d))}}}};R.prototype.lt=function(a){C.prototype.lt.call(this,a);a||Qj(this);var b=this.io;null===b||a||Sm(b,this)};
R.prototype.mt=function(a){C.prototype.mt.call(this,a);var b=this.io;null===b||a||null===b.we||(b.we.remove(this),b.ha())};R.prototype.Nm=function(){if(0<this.nc.count){var a=this.h;if(null===a)return;for(var b=this.nc.copy().k;b.next();)a.remove(b.value)}this.$d=null;C.prototype.Nm.call(this)};t.A(R,{bi:"isLinkLabel"},function(){return null!==this.io});t.g(R,"labeledLink",R.prototype.$d);
t.defineProperty(R,{$d:"labeledLink"},function(){return this.io},function(a){var b=this.io;if(b!==a){e&&null!==a&&t.l(a,T,R,"labeledLink");var c=this.h,d=this.data;if(null!==b&&(null!==b.we&&(b.we.remove(this),b.ha()),null!==c&&null!==d&&!c.la.vb)){var f=b.data,g=c.ba;if(null!==f&&g instanceof M){var h=g.Hb(d);void 0!==h&&g.IJ(f,h)}}this.io=a;null!==a&&(Sm(a,this),null===c||null===d||c.la.vb||(f=a.data,g=c.ba,null!==f&&g instanceof M&&(h=g.Hb(d),void 0!==h&&g.GD(f,h))));Jk(this);this.j("labeledLink",
b,a)}});R.prototype.findPort=R.prototype.gl=function(a){e&&t.i(a,"string",R,"findPort:pid");if(null===this.Rd){if(""===a&&!1===this.Eh)return this;Tk(this)}var b=this.Rd.za(a);return null!==b||""!==a&&(b=this.Rd.za(""),null!==b)?b:this};t.A(R,{port:"port"},function(){return this.gl("")});t.A(R,{ports:"ports"},function(){null===this.Rd&&Tk(this);return this.Rd.jF});
function Tk(a){null===a.Rd?a.Rd=new ia("string",Q):a.Rd.clear();Vl(a,a,function(a,c){var d=c.Nd;null!==d&&a.Rd.add(d,c)});0===a.Rd.count&&a.Rd.add("",a)}function Sk(a,b,c){var d=b.Nd;if(null!==d&&(null!==a.Rd&&a.Rd.remove(d),b=a.h,null!==b&&c)){c=null;for(a=a.yE(d);a.next();)null===c&&(c=t.Db()),c.push(a.value);if(null!==c){for(a=0;a<c.length;a++)b.remove(c[a]);t.ya(c)}}}
R.prototype.isInTreeOf=function(a){if(null===a||a===this)return!1;var b=!0,c=this.h;null!==c&&(b=c.pd);c=this;if(b)for(;c!==a;){for(var b=null,d=c.nc.k;d.next();){var f=d.value;if(f.Ec&&(b=f.aa,b!==c&&b!==this))break}if(b===this||null===b||b===c)return!1;c=b}else for(;c!==a;){b=null;for(d=c.nc.k;d.next()&&(f=d.value,!f.Ec||(b=f.ca,b===c||b===this)););if(b===this||null===b||b===c)return!1;c=b}return!0};
R.prototype.findTreeRoot=function(){var a=!0,b=this.h;null!==b&&(a=b.pd);b=this;if(a)for(;;){for(var a=null,c=b.nc.k;c.next();){var d=c.value;if(d.Ec&&(a=d.aa,a!==b&&a!==this))break}if(a===this)return this;if(null===a||a===b)return b;b=a}else for(;;){a=null;for(c=b.nc.k;c.next()&&(d=c.value,!d.Ec||(a=d.ca,a===b||a===this)););if(a===this)return this;if(null===a||a===b)return b;b=a}};
R.prototype.findTreeParentLink=R.prototype.ft=function(){var a=!0,b=this.h;null!==b&&(a=b.pd);b=this.nc.k;if(a)for(;b.next();){if(a=b.value,a.Ec&&a.aa!==this)return a}else for(;b.next();)if(a=b.value,a.Ec&&a.ca!==this)return a;return null};
R.prototype.findTreeParentNode=R.prototype.dA=function(){if(null===this.Uh||this.Uh instanceof R)return this.Uh;var a=!0,b=this.h;null!==b&&(a=b.pd);var b=this.nc.n,c=b.length;if(a)for(a=0;a<c;a++){var d=b[a];if(d.Ec&&(d=d.aa,d!==this))return this.Uh=d}else for(a=0;a<c;a++)if(d=b[a],d.Ec&&(d=d.ca,d!==this))return this.Uh=d;return this.Uh=null};
R.prototype.findTreeChildrenLinks=R.prototype.Fw=function(){var a=!0,b=this.h;null!==b&&(a=b.pd);if(a){var a=new Ba(this.nc),c=this;a.tl=function(a){return a.Ec&&a.aa===c?!0:!1}}else a=new Ba(this.nc),c=this,a.tl=function(a){return a.Ec&&a.ca===c?!0:!1};return a};
R.prototype.findTreeChildrenNodes=R.prototype.BE=function(){var a=!0,b=this.h;null!==b&&(a=b.pd);var c=b=null,d=this.nc.k;if(a)for(;d.next();)a=d.value,a.Ec&&a.aa===this&&(a=a.ca,null!==b?b.add(a):null!==c&&c!==a?(b=new B(R),b.add(c),b.add(a)):c=a);else for(;d.next();)a=d.value,a.Ec&&a.ca===this&&(a=a.aa,null!==b?b.add(a):null!==c&&c!==a?(b=new B(R),b.add(c),b.add(a)):c=a);return null!==b?b.k:null!==c?new Aa(c):t.ag};
R.prototype.findTreeParts=function(a){void 0===a&&(a=Infinity);t.i(a,"number",R,"collapseTree:level");var b=new ma(C);Ie(b,this,!1,a);return b};R.prototype.collapseTree=R.prototype.collapseTree=function(a){void 0===a&&(a=1);t.q(a,R,"collapseTree:level");1>a&&(a=1);var b=this.h;if(null!==b&&!b.Wd){var c=b.Ub;0!==b.la.Je&&c.ul();b.Wd=!0;var c=b.pd,d=new ma(R);d.add(this);Tm(this,d,c,a,this.Qc);b.Wd=!1;b.fa()}};
function Tm(a,b,c,d,f){if(1<d)for(f=c?a.Cw():a.wg();f.next();){var g=f.value;g.Ec&&(g=g.jA(a),null===g||g===a||b.contains(g)||(b.add(g),Tm(g,b,c,d-1,g.Qc)))}else Um(a,b,c,f)}function Um(a,b,c,d){for(var f=c?a.Cw():a.wg();f.next();){var g=f.value;d&&g.Wi();g.Ec&&(g=g.jA(a),null===g||g===a||b.contains(g)||(b.add(g),d&&(g.fa(),wk(g),g.df(!1)),g.Qc&&(g.pn=g.Qc,Um(g,b,c,g.pn))))}a.Qc=!1}
R.prototype.expandTree=R.prototype.expandTree=function(a){void 0===a&&(a=2);t.q(a,R,"collapseTree:level");2>a&&(a=2);var b=this.h;if(null!==b&&!b.Wd){var c=b.Ub;0!==b.la.Je&&c.ul();b.Wd=!0;var d=b.pd,f=new ma(R);f.add(this);Vm(this,f,d,a,this.Qc,c,this);b.Wd=!1}};
function Vm(a,b,c,d,f,g,h){for(var k=c?a.Cw():a.wg();k.next();){var l=k.value;l.Ec&&(f||(l.rg||l.ac(),l.updateAdornments()),l=l.jA(a),null!==l&&l!==a&&!b.contains(l)&&(b.add(l),f||(l.df(!0),wk(l),Nh(g,l,h)),2<d||l.pn))&&(l.pn=!1,Vm(l,b,c,d-1,l.Qc,g,h))}a.Qc=!0}t.g(R,"isTreeExpanded",R.prototype.Qc);
t.defineProperty(R,{Qc:"isTreeExpanded"},function(){return this.dr},function(a){var b=this.dr;if(b!==a){e&&t.i(a,"boolean",R,"isTreeExpanded");this.dr=a;var c=this.h;this.j("isTreeExpanded",b,a);b=this.LG;if(null!==b){var d=!0;null!==c&&(d=c.Na,c.Na=!0);b(this);null!==c&&(c.Na=d)}a?null===c||c.Wd||(0!==c.la.Je&&c.Ub.ul(),c.Wd=!0,a=c.pd,b=new ma(R),b.add(this),Vm(this,b,a,2,!1,c.Ub,this),c.Wd=!1):null===c||c.Wd||(0!==c.la.Je&&c.Ub.ul(),c.Wd=!0,a=c.pd,b=new ma(R),b.add(this),Um(this,b,a,!0),c.Wd=!1)}});
t.g(R,"wasTreeExpanded",R.prototype.pn);t.defineProperty(R,{pn:"wasTreeExpanded"},function(){return this.Gs},function(a){var b=this.Gs;b!==a&&(e&&t.i(a,"boolean",R,"wasTreeExpanded"),this.Gs=a,this.j("wasTreeExpanded",b,a))});t.g(R,"treeExpandedChanged",R.prototype.LG);t.defineProperty(R,{LG:"treeExpandedChanged"},function(){return this.Bs},function(a){var b=this.Bs;b!==a&&(null!==a&&t.i(a,"function",R,"treeExpandedChanged"),this.Bs=a,this.j("treeExpandedChanged",b,a))});t.g(R,"isTreeLeaf",R.prototype.ci);
t.defineProperty(R,{ci:"isTreeLeaf"},function(){return this.er},function(a){var b=this.er;b!==a&&(e&&t.i(a,"boolean",R,"isTreeLeaf"),this.er=a,this.j("isTreeLeaf",b,a))});
function T(){C.call(this,wg);this.eg=null;this.Bh="";this.qg=this.Pq=null;this.Rh="";this.As=null;this.Vr=this.Ur=this.Tr=!1;this.fr=!0;this.lq=zg;this.yq=0;this.Bq=zg;this.Cq=NaN;this.pm=el;this.ps=0.5;this.Ji=this.we=null;this.Cc=(new B(w)).freeze();this.xo=this.xe=null;this.rg=!1;this.oz=null;this.vz=!1;this.xn=this.ui=this.Ta=null;this.hf=0;this.Jn=this.Fn=null;this.mi=new B(x);this.zz=new w;this.oD=this.mD=null;this.qy=!1;this.P=null}t.ga("Link",T);t.Ka(T,C);
T.prototype.cloneProtected=function(a){C.prototype.cloneProtected.call(this,a);a.Bh=this.Bh;a.Pq=this.Pq;a.Rh=this.Rh;a.As=this.As;a.Tr=this.Tr;a.Ur=this.Ur;a.Vr=this.Vr;a.fr=this.fr;a.lq=this.lq;a.yq=this.yq;a.Bq=this.Bq;a.Cq=this.Cq;a.pm=this.pm;a.ps=this.ps;if(null!==this.P){var b=this.P;a.P={Dh:b.Dh.Z(),Th:b.Th.Z(),Ah:b.Ah,Qh:b.Qh,zh:b.zh,Ph:b.Ph,Ch:b.Ch,Sh:b.Sh}}else a.P=null};
T.prototype.Yh=function(a){C.prototype.Yh.call(this,a);this.Bh=a.Bh;this.Rh=a.Rh;a.Ji=null;a.xe=null;a.ac();a.xn=this.xn;a.hf=this.hf};var el;T.Normal=el=t.w(T,"Normal",1);T.Orthogonal=t.w(T,"Orthogonal",2);T.AvoidsNodes=t.w(T,"AvoidsNodes",6);var Wm;T.AvoidsNodesStraight=Wm=t.w(T,"AvoidsNodesStraight",7);var zg;T.None=zg=t.w(T,"None",0);var Pg;T.Bezier=Pg=t.w(T,"Bezier",9);var yg;T.JumpGap=yg=t.w(T,"JumpGap",10);var xg;T.JumpOver=xg=t.w(T,"JumpOver",11);var bl;T.End=bl=t.w(T,"End",17);var cl;
T.Scale=cl=t.w(T,"Scale",18);var dl;T.Stretch=dl=t.w(T,"Stretch",19);var jm;T.OrientAlong=jm=t.w(T,"OrientAlong",21);var Xm;T.OrientPlus90=Xm=t.w(T,"OrientPlus90",22);var Ym;T.OrientMinus90=Ym=t.w(T,"OrientMinus90",23);var Zm;T.OrientOpposite=Zm=t.w(T,"OrientOpposite",24);var $m;T.OrientUpright=$m=t.w(T,"OrientUpright",25);var an;T.OrientPlus90Upright=an=t.w(T,"OrientPlus90Upright",26);var bn;T.OrientMinus90Upright=bn=t.w(T,"OrientMinus90Upright",27);var cn;
T.OrientUpright45=cn=t.w(T,"OrientUpright45",28);T.prototype.Fe=function(){this.P={Dh:xb,Th:xb,Ah:NaN,Qh:NaN,zh:Km,Ph:Km,Ch:NaN,Sh:NaN}};T.prototype.ol=function(){var a=this.aa;if(null!==a){var b=a.findVisibleNode();null!==b&&(a=b);if(Ri(a)||Si(a))return!1}a=this.ca;return null!==a&&(b=a.findVisibleNode(),null!==b&&(a=b),Ri(a)||Si(a))?!1:!0};T.prototype.Ld=function(){return!1};
T.prototype.computeAngle=function(a,b,c){switch(b){default:case zg:a=0;break;case jm:a=c;break;case Xm:a=c+90;break;case Ym:a=c-90;break;case Zm:a=c+180;break;case $m:a=F.Dt(c);90<a&&270>a&&(a-=180);break;case an:a=F.Dt(c+90);90<a&&270>a&&(a-=180);break;case bn:a=F.Dt(c-90);90<a&&270>a&&(a-=180);break;case cn:a=F.Dt(c);if(45<a&&135>a||225<a&&315>a)return 0;90<a&&270>a&&(a-=180)}return F.Dt(a)};t.g(T,"fromNode",T.prototype.aa);
t.defineProperty(T,{aa:"fromNode"},function(){return this.eg},function(a){var b=this.eg;if(b!==a){e&&null!==a&&t.l(a,R,T,"fromNode");var c=this.ud;null!==b&&(this.qg!==b&&Rm(b,this,c),dn(this),this.J(gj));this.eg=a;this.ui=null;this.ac();var d=this.h;if(null!==d){var f=this.data,g=d.ba;if(null!==f)if(g instanceof M){var h=null!==a?a.data:null;g.ux(f,g.Hb(h))}else g instanceof Kd&&(h=null!==a?a.data:null,d.pd?g.lh(f,g.Hb(h)):(null!==b&&g.lh(b.data,void 0),g.lh(h,g.Hb(null!==this.qg?this.qg.data:null))))}f=
this.ud;g=this.iA;null!==g&&(h=!0,null!==d&&(h=d.Na,d.Na=!0),g(this,c,f),null!==d&&(d.Na=h));null!==a&&(this.qg!==a&&Qm(a,this,f),en(this),this.J(aj));this.j("fromNode",b,a);Lj(this)}});t.g(T,"fromPortId",T.prototype.Rf);
t.defineProperty(T,{Rf:"fromPortId"},function(){return this.Bh},function(a){var b=this.Bh;if(b!==a){e&&t.i(a,"string",T,"fromPortId");var c=this.ud;null!==c&&Pm(this.aa,c);dn(this);this.Bh=a;var d=this.ud;null!==d&&Pm(this.aa,d);var f=this.h;if(null!==f){var g=this.data,h=f.ba;null!==g&&h instanceof M&&h.$A(g,a)}c!==d&&(this.ui=null,this.ac(),g=this.iA,null!==g&&(h=!0,null!==f&&(h=f.Na,f.Na=!0),g(this,c,d),null!==f&&(f.Na=h)));en(this);this.j("fromPortId",b,a)}});
t.A(T,{ud:"fromPort"},function(){var a=this.eg;return null===a?null:a.gl(this.Bh)});t.g(T,"fromPortChanged",T.prototype.iA);t.defineProperty(T,{iA:"fromPortChanged"},function(){return this.Pq},function(a){var b=this.Pq;b!==a&&(null!==a&&t.i(a,"function",T,"fromPortChanged"),this.Pq=a,this.j("fromPortChanged",b,a))});t.g(T,"toNode",T.prototype.ca);
t.defineProperty(T,{ca:"toNode"},function(){return this.qg},function(a){var b=this.qg;if(b!==a){e&&null!==a&&t.l(a,R,T,"toNode");var c=this.fe;null!==b&&(this.eg!==b&&Rm(b,this,c),dn(this),this.J(gj));this.qg=a;this.ui=null;this.ac();var d=this.h;if(null!==d){var f=this.data,g=d.ba;if(null!==f)if(g instanceof M){var h=null!==a?a.data:null;g.wx(f,g.Hb(h))}else g instanceof Kd&&(h=null!==a?a.data:null,d.pd?(null!==b&&g.lh(b.data,void 0),g.lh(h,g.Hb(null!==this.eg?this.eg.data:null))):g.lh(f,g.Hb(h)))}f=
this.fe;g=this.kB;null!==g&&(h=!0,null!==d&&(h=d.Na,d.Na=!0),g(this,c,f),null!==d&&(d.Na=h));null!==a&&(this.eg!==a&&Qm(a,this,f),en(this),this.J(aj));this.j("toNode",b,a);Lj(this)}});t.g(T,"toPortId",T.prototype.Og);
t.defineProperty(T,{Og:"toPortId"},function(){return this.Rh},function(a){var b=this.Rh;if(b!==a){e&&t.i(a,"string",T,"toPortId");var c=this.fe;null!==c&&Pm(this.ca,c);dn(this);this.Rh=a;var d=this.fe;null!==d&&Pm(this.ca,d);var f=this.h;if(null!==f){var g=this.data,h=f.ba;null!==g&&h instanceof M&&h.cB(g,a)}c!==d&&(this.ui=null,this.ac(),g=this.kB,null!==g&&(h=!0,null!==f&&(h=f.Na,f.Na=!0),g(this,c,d),null!==f&&(f.Na=h)));en(this);this.j("toPortId",b,a)}});
t.A(T,{fe:"toPort"},function(){var a=this.qg;return null===a?null:a.gl(this.Rh)});t.g(T,"toPortChanged",T.prototype.kB);t.defineProperty(T,{kB:"toPortChanged"},function(){return this.As},function(a){var b=this.As;b!==a&&(null!==a&&t.i(a,"function",T,"toPortChanged"),this.As=a,this.j("toPortChanged",b,a))});
t.defineProperty(T,{ob:"fromSpot"},function(){return null!==this.P?this.P.Dh:xb},function(a){null===this.P&&this.Fe();var b=this.P.Dh;b.M(a)||(e&&t.l(a,H,T,"fromSpot"),a=a.Z(),this.P.Dh=a,this.j("fromSpot",b,a),this.ac())});
t.defineProperty(T,{dk:"fromEndSegmentLength"},function(){return null!==this.P?this.P.Ah:NaN},function(a){null===this.P&&this.Fe();var b=this.P.Ah;b!==a&&(e&&t.i(a,"number",T,"fromEndSegmentLength"),0>a&&t.ka(a,">= 0",T,"fromEndSegmentLength"),this.P.Ah=a,this.j("fromEndSegmentLength",b,a),this.ac())});
t.defineProperty(T,{hp:"fromEndSegmentDirection"},function(){return null!==this.P?this.P.zh:Km},function(a){null===this.P&&this.Fe();var b=this.P.zh;b!==a&&(e&&t.Aa(a,R,T,"fromEndSegmentDirection"),this.P.zh=a,this.j("fromEndSegmentDirection",b,a),this.ac())});t.defineProperty(T,{ip:"fromShortLength"},function(){return null!==this.P?this.P.Ch:NaN},function(a){null===this.P&&this.Fe();var b=this.P.Ch;b!==a&&(e&&t.i(a,"number",T,"fromShortLength"),this.P.Ch=a,this.j("fromShortLength",b,a),this.ac())});
t.defineProperty(T,{rb:"toSpot"},function(){return null!==this.P?this.P.Th:xb},function(a){null===this.P&&this.Fe();var b=this.P.Th;b.M(a)||(e&&t.l(a,H,T,"toSpot"),a=a.Z(),this.P.Th=a,this.j("toSpot",b,a),this.ac())});
t.defineProperty(T,{jk:"toEndSegmentLength"},function(){return null!==this.P?this.P.Qh:NaN},function(a){null===this.P&&this.Fe();var b=this.P.Qh;b!==a&&(e&&t.i(a,"number",T,"toEndSegmentLength"),0>a&&t.ka(a,">= 0",T,"toEndSegmentLength"),this.P.Qh=a,this.j("toEndSegmentLength",b,a),this.ac())});
t.defineProperty(T,{Xp:"toEndSegmentDirection"},function(){return null!==this.P?this.P.Ph:Km},function(a){null===this.P&&this.Fe();var b=this.P.Ph;b!==a&&(e&&t.Aa(a,R,T,"toEndSegmentDirection"),this.P.Ph=a,this.j("toEndSegmentDirection",b,a),this.ac())});t.defineProperty(T,{Yp:"toShortLength"},function(){return null!==this.P?this.P.Sh:NaN},function(a){null===this.P&&this.Fe();var b=this.P.Sh;b!==a&&(e&&t.i(a,"number",T,"toShortLength"),this.P.Sh=a,this.j("toShortLength",b,a),this.ac())});
function Lj(a){var b=a.aa,c=a.ca;null!==b&&null!==c?fn(a,b.EI(c)):fn(a,null)}function fn(a,b){var c=a.zk;if(c!==b){null!==c&&Em(c,a);a.zk=b;null!==b&&Fm(b,a);var d=a.Wz;if(null!==d){var f=!0,g=a.h;null!==g&&(f=g.Na,g.Na=!0);d(a,c,b);null!==g&&(g.Na=f)}!a.rg||a.mD!==c&&a.oD!==c||a.ac()}}T.prototype.getOtherNode=T.prototype.jA=function(a){e&&t.l(a,R,T,"getOtherNode:node");var b=this.aa;return a===b?this.ca:b};
T.prototype.getOtherPort=function(a){e&&t.l(a,Q,T,"getOtherPort:port");var b=this.ud;return a===b?this.fe:b};t.A(T,{zK:"isLabeledLink"},function(){return null===this.we?!1:0<this.we.count});t.A(T,{fk:"labelNodes"},function(){return null===this.we?t.ag:this.we.k});function Sm(a,b){null===a.we&&(a.we=new ma(R));a.we.add(b);a.ha()}
T.prototype.lt=function(a){C.prototype.lt.call(this,a);gn(this)&&Ag(this,this.oa);if(!a){a=this.eg;var b=this.qg;null!==a&&(Qm(a,this,this.ud),en(this));null!==b&&(Qm(b,this,this.fe),en(this))}};T.prototype.mt=function(a){C.prototype.mt.call(this,a);gn(this)&&Ag(this,this.oa);if(!a){a=this.eg;var b=this.qg;null!==a&&(Rm(a,this,this.ud),dn(this));null!==b&&(Rm(b,this,this.fe),dn(this))}};
T.prototype.Nm=function(){this.rg=!0;if(null!==this.we){var a=this.h;if(null===a)return;for(var b=this.we.copy().k;b.next();)a.remove(b.value)}b=this.data;null!==b&&(a=this.h,null!==a&&(a=a.ba,a instanceof M?a.UA(b):a instanceof Kd&&a.lh(b,void 0)))};
T.prototype.updateModelDataReferences=function(){var a=this.data;if(null!==a){var b=this.h;if(null!==b){var c=b.ba;if(c instanceof M){var d=c.il(a),f=b.Ve(d),g=this.aa;f!==g&&(f=null!==g?c.Hb(g.data):void 0,g=c.Zm,"function"===typeof g?g(a,f):a[g]=f,c.ux(a,d));d=c.ml(a);f=b.Ve(d);g=this.ca;f!==g&&(f=null!==g?c.Hb(g.data):void 0,g=c.$m,"function"===typeof g?g(a,f):a[g]=f,c.wx(a,d))}}}};
T.prototype.move=T.prototype.move=function(a){var b=this.position,c=b.x;isNaN(c)&&(c=0);b=b.y;isNaN(b)&&(b=0);c=a.x-c;b=a.y-b;C.prototype.move.call(this,a);this.ql(c,b);for(a=this.fk;a.next();){var d=a.value,f=d.position;d.moveTo(f.x+c,f.y+b)}};t.g(T,"relinkableFrom",T.prototype.LF);t.defineProperty(T,{LF:"relinkableFrom"},function(){return this.Tr},function(a){var b=this.Tr;b!==a&&(e&&t.i(a,"boolean",T,"relinkableFrom"),this.Tr=a,this.j("relinkableFrom",b,a),this.updateAdornments())});
t.g(T,"relinkableTo",T.prototype.MF);t.defineProperty(T,{MF:"relinkableTo"},function(){return this.Ur},function(a){var b=this.Ur;b!==a&&(e&&t.i(a,"boolean",T,"relinkableTo"),this.Ur=a,this.j("relinkableTo",b,a),this.updateAdornments())});T.prototype.canRelinkFrom=function(){if(!this.LF)return!1;var a=this.layer;if(null===a)return!0;if(!a.Sj)return!1;a=a.h;return null===a||a.Sj?!0:!1};
T.prototype.canRelinkTo=function(){if(!this.MF)return!1;var a=this.layer;if(null===a)return!0;if(!a.Sj)return!1;a=a.h;return null===a||a.Sj?!0:!1};t.g(T,"resegmentable",T.prototype.Kp);t.defineProperty(T,{Kp:"resegmentable"},function(){return this.Vr},function(a){var b=this.Vr;b!==a&&(e&&t.i(a,"boolean",T,"resegmentable"),this.Vr=a,this.j("resegmentable",b,a),this.updateAdornments())});t.g(T,"isTreeLink",T.prototype.Ec);
t.defineProperty(T,{Ec:"isTreeLink"},function(){return this.fr},function(a){var b=this.fr;b!==a&&(e&&t.i(a,"boolean",T,"isTreeLink"),this.fr=a,this.j("isTreeLink",b,a),null!==this.aa&&Qj(this.aa),null!==this.ca&&Qj(this.ca))});t.A(T,{path:"path"},function(){var a=this.Ji;if(null!==a)return a;a=this.xa;a=Kk(this,a,a.length);return a instanceof V?this.Ji=a:null});T.prototype.Rq=function(){return this.path};T.prototype.Sy=function(){return this.Cc};
T.prototype.uj=function(){this.updateRoute();var a=new x;this.qf(a);return this.oz=a};
T.prototype.qf=function(a){var b=Infinity,c=Infinity,d=this.pa;if(0===d)return a.p(NaN,NaN,0,0),a;if(1===d)d=this.o(0),b=Math.min(d.x,b),c=Math.min(d.y,c),a.p(d.x,d.y,0,0);else if(2===d){var f=this.o(0),g=this.o(1),b=Math.min(f.x,g.x),c=Math.min(f.y,g.y);a.p(f.x,f.y,0,0);a.kj(g)}else if(this.computeCurve()===Pg&&3<=d&&!this.ic)if(f=this.o(0),b=f.x,c=f.y,a.p(b,c,0,0),3===d)d=this.o(1),b=Math.min(d.x,b),c=Math.min(d.y,c),g=this.o(2),b=Math.min(g.x,b),c=Math.min(g.y,c),F.So(f.x,f.y,d.x,d.y,d.x,d.y,g.x,
g.y,0.5,a);else for(var h,k,l=3;l<d;l+=3)h=this.o(l-2),l+3>=d&&(l=d-1),k=this.o(l-1),g=this.o(l),F.So(f.x,f.y,h.x,h.y,k.x,k.y,g.x,g.y,0.5,a),b=Math.min(g.x,b),c=Math.min(g.y,c),f=g;else for(f=this.o(0),g=this.o(1),b=Math.min(f.x,g.x),c=Math.min(f.y,g.y),a.p(f.x,f.y,0,0),a.kj(g),l=2;l<d;l++)f=this.o(l),b=Math.min(f.x,b),c=Math.min(f.y,c),a.kj(f);this.zz.p(b-a.x,c-a.y);return a};t.A(T,{yF:"midPoint"},function(){this.updateRoute();return this.computeMidPoint(new w)});
T.prototype.computeMidPoint=function(a){var b=this.pa;if(0===b)return a.assign(F.dH),a;if(1===b)return a.assign(this.o(0)),a;if(2===b){var c=this.o(0),d=this.o(1);a.p((c.x+d.x)/2,(c.y+d.y)/2);return a}if(this.computeCurve()===Pg&&3<=b&&!this.ic){if(3===b)return this.o(1);var b=(b-1)/3|0,f=3*(b/2|0);1===b%2?(c=this.o(f),d=this.o(f+1),b=this.o(f+2),f=this.o(f+3),F.aI(c.x,c.y,d.x,d.y,b.x,b.y,f.x,f.y,a)):a.assign(this.o(f));return a}for(var f=0,g=t.Db(),h=0;h<b-1;h++)c=this.o(h),d=this.o(h+1),F.mb(c.x,
d.x)?(c=d.y-c.y,0>c&&(c=-c)):F.mb(c.y,d.y)?(c=d.x-c.x,0>c&&(c=-c)):c=Math.sqrt(c.Zj(d)),g.push(c),f+=c;for(d=h=c=0;c<f/2&&h<b;){d=g[h];if(c+d>f/2)break;c+=d;h++}t.ya(g);b=this.o(h);g=this.o(h+1);b.x===g.x?b.y>g.y?a.p(b.x,b.y-(f/2-c)):a.p(b.x,b.y+(f/2-c)):b.y===g.y?b.x>g.x?a.p(b.x-(f/2-c),b.y):a.p(b.x+(f/2-c),b.y):(f=(f/2-c)/d,a.p(b.x+f*(g.x-b.x),b.y+f*(g.y-b.y)));return a};t.A(T,{xF:"midAngle"},function(){this.updateRoute();return this.computeMidAngle()});
T.prototype.computeMidAngle=function(){var a=this.pa;if(2>a)return NaN;if(this.computeCurve()===Pg&&4<=a&&!this.ic){var b=(a-1)/3|0,c=3*(b/2|0);if(1===b%2){var c=Math.floor(c),a=this.o(c),b=this.o(c+1),d=this.o(c+2),c=this.o(c+3);return F.$H(a.x,a.y,b.x,b.y,d.x,d.y,c.x,c.y)}if(0<c&&c+1<a)return a=this.o(c-1),b=this.o(c+1),a.aj(b)}d=a/2|0;if(0===a%2)return a=this.o(d-1),b=this.o(d),a.aj(b);var a=this.o(d-1),b=this.o(d),d=this.o(d+1),c=a.Zj(b),f=b.Zj(d);return c>f?a.aj(b):b.aj(d)};t.g(T,"points",T.prototype.points);
t.defineProperty(T,{points:"points"},function(){return this.Cc},function(a){var b=this.Cc;if(b!==a){e&&(Array.isArray(a)||a instanceof B||t.m("Link.points value is not an instance of List or Array"));var c=a;if(Array.isArray(a)){var d=0===a.length%2;if(d)for(var f=0;f<a.length;f++)if("number"!==typeof a[f]){d=!1;break}if(d)for(c=new B(w),d=0;d<a.length/2;d++)f=(new w(a[2*d],a[2*d+1])).freeze(),c.add(f);else t.m("Link.points array must contain only numbers")}else for(c=a.copy(),a=c.k;a.next();)a.value.freeze();
c.freeze();this.Cc=c;this.Ye();hn(this);this.h&&this.h.Ub.sd&&(this.xo=c);this.j("points",b,c)}});t.A(T,{pa:"pointsCount"},function(){return this.Cc.count});T.prototype.getPoint=T.prototype.o=function(a){return this.Cc.n[a]};T.prototype.setPoint=T.prototype.Ef=function(a,b){e&&(t.l(b,w,T,"setPoint"),b.N()||t.m("Link.setPoint called with a Point that does not have real numbers: "+b.toString()));null===this.xe&&t.m("Call Link.startRoute before modifying the points of the route.");this.Cc.Mg(a,b)};
T.prototype.setPointAt=T.prototype.Y=function(a,b,c){e&&(t.q(b,T,"setPointAt:x"),t.q(c,T,"setPointAt:y"));null===this.xe&&t.m("Call Link.startRoute before modifying the points of the route.");this.Cc.Mg(a,new w(b,c))};T.prototype.insertPoint=function(a,b){e&&(t.l(b,w,T,"insertPoint"),b.N()||t.m("Link.insertPoint called with a Point that does not have real numbers: "+b.toString()));null===this.xe&&t.m("Call Link.startRoute before modifying the points of the route.");this.Cc.Jd(a,b)};
T.prototype.insertPointAt=T.prototype.C=function(a,b,c){e&&(t.q(b,T,"insertPointAt:x"),t.q(c,T,"insertPointAt:y"));null===this.xe&&t.m("Call Link.startRoute before modifying the points of the route.");this.Cc.Jd(a,new w(b,c))};T.prototype.addPoint=T.prototype.Vh=function(a){e&&(t.l(a,w,T,"addPoint"),a.N()||t.m("Link.addPoint called with a Point that does not have real numbers: "+a.toString()));null===this.xe&&t.m("Call Link.startRoute before modifying the points of the route.");this.Cc.add(a)};
T.prototype.addPointAt=T.prototype.Xk=function(a,b){e&&(t.q(a,T,"insertPointAt:x"),t.q(b,T,"insertPointAt:y"));null===this.xe&&t.m("Call Link.startRoute before modifying the points of the route.");this.Cc.add(new w(a,b))};T.prototype.removePoint=T.prototype.PF=function(a){null===this.xe&&t.m("Call Link.startRoute before modifying the points of the route.");this.Cc.qd(a)};
T.prototype.clearPoints=T.prototype.Uo=function(){null===this.xe&&t.m("Call Link.startRoute before modifying the points of the route.");this.Cc.clear()};T.prototype.movePoints=T.prototype.ql=function(a,b){for(var c=new B(w),d=this.Cc.k;d.next();){var f=d.value;c.add((new w(f.x+a,f.y+b)).freeze())}c.freeze();d=this.Cc;this.Cc=c;this.Ye();hn(this);this.h&&this.h.Ub.sd&&(this.xo=c);this.j("points",d,c)};T.prototype.startRoute=T.prototype.zl=function(){null===this.xe&&(this.xe=this.Cc,this.Cc=this.Cc.copy())};
T.prototype.commitRoute=T.prototype.Xi=function(){if(null!==this.xe){for(var a=this.xe,b=this.Cc,c=Infinity,d=Infinity,f=a.count,g=0;g<f;g++)var h=a.n[g],c=Math.min(h.x,c),d=Math.min(h.y,d);for(var k=Infinity,l=Infinity,m=b.count,g=0;g<m;g++)h=b.n[g],k=Math.min(h.x,k),l=Math.min(h.y,l),h.freeze();b.freeze();if(m===f)for(g=0;g<m;g++){if(f=a.n[g],h=b.n[g],f.x-c!==h.x-k||f.y-d!==h.y-l){this.Ye();break}}else this.Ye();this.xe=null;this.h&&this.h.Ub.sd&&(this.xo=b);hn(this);this.j("points",a,b)}};
T.prototype.rollbackRoute=T.prototype.KJ=function(){null!==this.xe&&(this.Cc=this.xe,this.xe=null)};function hn(a){0===a.Cc.count?a.rg=!1:(a.rg=!0,a.Fn=a.o(0).copy(),a.Jn=a.o(a.pa-1).copy(),jn(a,!1))}T.prototype.invalidateRoute=T.prototype.ac=function(){if(!(this.vz||this.h&&this.h.la.vb)){var a=this.Rq();null!==a&&(this.rg=!1,this.Ye(),a.ha())}};t.defineProperty(T,{Wp:null},function(){return this.vz},function(a){this.vz=a});
T.prototype.updateRoute=function(){if(!this.rg&&!this.qy){var a=!0;try{this.qy=!0,this.zl(),a=this.computePoints()}finally{this.qy=!1,a?this.Xi():this.KJ()}}};
T.prototype.computePoints=function(){var a=this.h;if(null===a)return!1;var b=this.aa,c=null;null===b?(a.qm||(a.Bv=new V,a.Bv.Ca=F.gq,a.Bv.fb=0,a.qm=new R,a.qm.add(a.Bv),a.qm.sf()),this.Fn&&(a.qm.position=a.qm.location=this.Fn,a.qm.sf(),b=a.qm,c=a.Bv)):c=this.ud;if(null!==c){var d=Uk(c);d!==b&&b.La()?c=d:(d=b.findVisibleNode(),null!==d&&d!==b?(b=d,c=d.gl("")):b=d)}this.mD=b;if(null===b||null===c||!b.location.N())return!1;var d=this.ca,f=null;null===d?(a.rm||(a.Cv=new V,a.Cv.Ca=F.gq,a.Cv.fb=0,a.rm=
new R,a.rm.add(a.Cv),a.rm.sf()),this.Jn&&(a.rm.position=a.rm.location=this.Jn,a.rm.sf(),d=a.rm,f=a.Cv)):f=this.fe;null!==f&&(a=Uk(f),a!==d&&d.La()?f=a:(a=d.findVisibleNode(),null!==a&&a!==d?(d=a,f=a.gl("")):d=a));this.oD=d;if(null===d||null===f||!d.location.N())return!1;var a=this.pa,g=kn(this,c),h=ln(this,f),k=c===f&&null!==c,l=this.ic,m=this.De===Pg;this.ui=k&&!l?m=!0:!1;var n=this.Lo===zg||k;if(l||g!==wb||h!==wb||k){m=this.dj;n&&(l&&m||k)&&this.Uo();var p=k?this.computeCurviness():0,q=this.getLinkPoint(b,
c,g,!0,l,d,f),r=0,s=0,u=0;if(l||g!==wb||k){var v=this.computeEndSegmentLength(b,c,g,!0),u=this.getLinkDirection(b,c,q,g,!0,l,d,f);k&&(u-=l?90:30,0>p&&(u-=180));0>u?u+=360:360<=u&&(u-=360);k&&(v+=Math.abs(p));0===u?r=v:90===u?s=v:180===u?r=-v:270===u?s=-v:(r=v*Math.cos(u*Math.PI/180),s=v*Math.sin(u*Math.PI/180));if(g.Ge()&&k){var D=c.pb(Hb,t.K()),A=t.mc(D.x+1E3*r,D.y+1E3*s);this.getLinkPointFromPoint(b,c,D,A,!0,q);t.B(D);t.B(A)}}var v=this.getLinkPoint(d,f,h,!1,l,b,c),G=0,K=0,N=0;if(l||h!==wb||k)D=
this.computeEndSegmentLength(d,f,h,!1),N=this.getLinkDirection(d,f,v,h,!1,l,b,c),k&&(N+=l?0:30,0>p&&(N+=180)),0>N?N+=360:360<=N&&(N-=360),k&&(D+=Math.abs(p)),0===N?G=D:90===N?K=D:180===N?G=-D:270===N?K=-D:(G=D*Math.cos(N*Math.PI/180),K=D*Math.sin(N*Math.PI/180)),h.Ge()&&k&&(D=f.pb(Hb,t.K()),A=t.mc(D.x+1E3*G,D.y+1E3*K),this.getLinkPointFromPoint(d,f,D,A,!1,v),t.B(D),t.B(A));f=q;if(l||g!==wb||k)f=new w(q.x+r,q.y+s);c=v;if(l||h!==wb||k)c=new w(v.x+G,v.y+K);!n&&!l&&g===wb&&3<a&&this.adjustPoints(0,q,
a-2,c)?this.Ef(a-1,v):!n&&!l&&h===wb&&3<a&&this.adjustPoints(1,f,a-1,v)?this.Ef(0,q):!n&&!l&&4<a&&this.adjustPoints(1,f,a-2,c)?(this.Ef(0,q),this.Ef(a-1,v)):!n&&l&&6<=a&&!m&&this.adjustPoints(1,f,a-2,c)?(this.Ef(0,q),this.Ef(a-1,v)):(this.Uo(),this.Vh(q),(l||g!==wb||k)&&this.Vh(f),l&&this.addOrthoPoints(f,u,c,N,b,d),(l||h!==wb||k)&&this.Vh(c),this.Vh(v))}else g=!1,!n&&3<=a&&(n=this.getLinkPoint(b,c,wb,!0,!1,d,f),h=this.getLinkPoint(d,f,wb,!1,!1,b,c),g=this.adjustPoints(0,n,a-1,h))&&(n=this.getLinkPoint(b,
c,wb,!0,!1,d,f),h=this.getLinkPoint(d,f,wb,!1,!1,b,c),this.adjustPoints(0,n,a-1,h)),g||(this.Uo(),m?(a=this.getLinkPoint(b,c,wb,!0,!1,d,f),n=this.getLinkPoint(d,f,wb,!1,!1,b,c),g=n.x-a.x,h=n.y-a.y,k=this.computeCurviness(),m=l=0,q=a.x+g/3,u=a.y+h/3,r=q,s=u,F.I(h,0)?s=0<g?s-k:s+k:(l=-g/h,m=Math.sqrt(k*k/(l*l+1)),0>k&&(m=-m),r=(0>h?-1:1)*m+q,s=l*(r-q)+u),q=a.x+2*g/3,u=a.y+2*h/3,v=q,G=u,F.I(h,0)?G=0<g?G-k:G+k:(v=(0>h?-1:1)*m+q,G=l*(v-q)+u),this.Uo(),this.Vh(a),this.Xk(r,s),this.Xk(v,G),this.Vh(n),this.Ef(0,
this.getLinkPoint(b,c,wb,!0,!1,d,f)),this.Ef(3,this.getLinkPoint(d,f,wb,!1,!1,b,c))):(a=d,d=this.getLinkPoint(b,c,wb,!0,!1,a,f),f=this.getLinkPoint(a,f,wb,!1,!1,b,c),this.hasCurviness()?(h=f.x-d.x,b=f.y-d.y,c=this.computeCurviness(),a=d.x+h/2,n=d.y+b/2,g=a,k=n,F.I(b,0)?k=0<h?k-c:k+c:(h=-h/b,g=Math.sqrt(c*c/(h*h+1)),0>c&&(g=-g),g=(0>b?-1:1)*g+a,k=h*(g-a)+n),this.Vh(d),this.Xk(g,k)):this.Vh(d),this.Vh(f)));return!0};
function mn(a,b){Math.abs(b.x-a.x)>Math.abs(b.y-a.y)?(b.x=b.x>=a.x?a.x+9E9:a.x-9E9,b.y=a.y):(b.y=b.y>=a.y?a.y+9E9:a.y-9E9,b.x=a.x);return b}
T.prototype.getLinkPointFromPoint=function(a,b,c,d,f,g){void 0===g&&(g=new w);if(null===a||null===b)return g.assign(c),g;a.La()||(f=a.findVisibleNode(),null!==f&&f!==a&&(b=f.port));var h;a=null;f=b.ja;null===f||f.Hf()||(f=f.ja);if(null===f)f=d.x,d=d.y,h=c.x,c=c.y;else{a=f.me;f=1/(a.m11*a.m22-a.m12*a.m21);h=a.m22*f;var k=-a.m12*f,l=-a.m21*f,m=a.m11*f,n=f*(a.m21*a.dy-a.m22*a.dx),p=f*(a.m12*a.dx-a.m11*a.dy);f=d.x*h+d.y*l+n;d=d.x*k+d.y*m+p;h=c.x*h+c.y*l+n;c=c.x*k+c.y*m+p}b.kp(f,d,h,c,g);a&&g.transform(a);
return g};function nn(a,b){var c=b.Pr;null===c&&(c=new on,c.port=b,c.Fc=b.S,b.Pr=c);return pn(c,a)}
T.prototype.getLinkPoint=function(a,b,c,d,f,g,h,k){void 0===k&&(k=new w);if(c.xd())return b.pb(c,k),k;if(c.rp()&&(c=nn(this,b),null!==c)){k.assign(c.xp);if(f&&this.Lt===Wm){var l=nn(this,h);if(c.Lm<l.Lm){c=t.K();var l=t.K(),m=new x(b.pb(Eb,c),b.pb(Pb,l)),n=this.computeSpot(!d);a=this.getLinkPoint(g,h,n,!d,f,a,b,l);a.x>=m.x&&a.x<=m.x+m.width?k.x=a.x:a.y>=m.y&&a.y<=m.y+m.height&&(k.y=a.y);t.B(c);t.B(l)}}return k}g=b.pb(Hb,t.K());c=null;this.pa>(f?6:2)?(h=d?this.o(1):this.o(this.pa-2),f&&(h=mn(g,h.copy()))):
(c=t.K(),h=h.pb(Hb,c),f&&(h=mn(g,h)));this.getLinkPointFromPoint(a,b,g,h,d,k);t.B(g);null!==c&&t.B(c);return k};
T.prototype.getLinkDirection=function(a,b,c,d,f,g,h,k){a:if(d.xd())c=d.x>d.y?d.x>1-d.y?0:d.x<1-d.y?270:315:d.x<d.y?d.x>1-d.y?90:d.x<1-d.y?180:135:0.5>d.x?225:0.5<d.x?45:0;else{if(d.rp()&&(a=nn(this,b),null!==a))switch(a.be){case t.bd:c=270;break a;case t.Jc:c=180;break a;default:case t.Tc:c=0;break a;case t.Sc:c=90;break a}a=b.pb(Hb,t.K());d=null;this.pa>(g?6:2)?(k=f?this.o(1):this.o(this.pa-2),k=g?mn(a,k.copy()):c):(d=t.K(),k=k.pb(Hb,d));c=Math.abs(k.x-a.x)>Math.abs(k.y-a.y)?k.x>=a.x?0:180:k.y>=
a.y?90:270;t.B(a);null!==d&&t.B(d)}g=Km;g=f?this.hp:this.Xp;g===Km&&(g=f?b.hp:b.Xp);switch(g){case Lm:b=b.hl();c+=b;360<=c&&(c-=360);break;case Km:case kk:b=b.hl();if(0===b)break;45<=b&&135>b?c+=90:135<=b&&225>b?c+=180:225<=b&&315>b&&(c+=270);360<=c&&(c-=360)}return c};T.prototype.computeEndSegmentLength=function(a,b,c,d){if(null!==b&&c.rp()&&(a=nn(this,b),null!==a))return a.Aw;a=NaN;a=d?this.dk:this.jk;null!==b&&isNaN(a)&&(a=d?b.dk:b.jk);isNaN(a)&&(a=10);return a};
T.prototype.computeSpot=function(a){return a?kn(this,this.ud):ln(this,this.fe)};function kn(a,b){if(null===b)return Hb;var c=a.ob;c.Pc()&&(void 0===b&&(b=a.ud),null!==b&&(c=b.ob));return c===xb?wb:c}function ln(a,b){if(null===b)return Hb;var c=a.rb;c.Pc()&&(void 0===b&&(b=a.fe),null!==b&&(c=b.rb));return c===xb?wb:c}T.prototype.computeOtherPoint=function(a,b){var c=b.pb(Hb),d;d=b.Pr;d=null!==d?pn(d,this):null;null!==d&&(c=d.xp);return c};
T.prototype.computeShortLength=function(a){return a?qn(this):rn(this)};function qn(a){var b=a.ip;isNaN(b)&&(a=a.ud,null!==a&&(b=a.ip));return isNaN(b)?0:b}function rn(a){var b=a.Yp;isNaN(b)&&(a=a.fe,null!==a&&(b=a.Yp));return isNaN(b)?0:b}
T.prototype.bk=function(a,b,c,d,f,g){if(!1===this.Bf)return!1;void 0===b&&(b=null);void 0===c&&(c=null);var h=g;void 0===g&&(h=t.oh(),h.reset());h.multiply(this.transform);if(this.Km(a,h))return am(this,b,c,f),void 0===g&&t.We(h),!0;if(this.Tf(a,h)){var k=!1;if(!this.Vg)for(var l=this.xa.length;l--;){var m=this.xa.n[l];if(m.visible||m===this.kc){var n=m.oa,p=this.Pa;if(!(n.x>p.width||n.y>p.height||0>n.x+n.width||0>n.y+n.height)){n=t.oh();n.set(h);if(m instanceof y)k=m.bk(a,b,c,d,f,n);else if(this.path===
m){var k=m,q=a,r=d,p=n;if(!1===k.Bf)k=!1;else if(p.multiply(k.transform),r)b:{var s=q,u=p;if(k.Km(s,u))k=!0;else{if(void 0===u&&(u=k.transform,s.Vj(k.oa))){k=!0;break b}var p=s.left,q=s.right,r=s.top,s=s.bottom,v=t.K(),D=t.K(),A=t.K(),G=t.oh();G.set(u);G.DF(k.transform);G.nA();D.x=q;D.y=r;D.transform(G);v.x=p;v.y=r;v.transform(G);u=!1;hm(k,v,D,A)?u=!0:(v.x=q,v.y=s,v.transform(G),hm(k,v,D,A)?u=!0:(D.x=p,D.y=s,D.transform(G),hm(k,v,D,A)?u=!0:(v.x=p,v.y=r,v.transform(G),hm(k,v,D,A)&&(u=!0))));t.We(G);
t.B(v);t.B(D);t.B(A);k=u}}else k=k.Km(q,p)}else k=pk(m,a,d,n);k&&(null!==b&&(m=b(m)),m&&(null===c||c(m))&&f.add(m));t.We(n)}}}void 0===g&&t.We(h);return k||null!==this.background||null!==this.$k}void 0===g&&t.We(h);return!1};t.A(T,{ic:"isOrthogonal"},function(){return 2===(this.pm.value&2)});t.A(T,{dj:"isAvoiding"},function(){return 4===(this.pm.value&4)});T.prototype.computeCurve=function(){if(null===this.ui){var a=this.ud,b=this.ic;this.ui=null!==a&&a===this.fe&&!b}return this.ui?Pg:this.De};
T.prototype.computeCorner=function(){if(this.De===Pg)return 0;var a=this.sw;if(isNaN(a)||0>a)a=10;return a};T.prototype.computeCurviness=function(){var a=this.Xs;if(isNaN(a)){var b=this.hf;if(0!==b){var a=10,c=this.h;null!==c&&(a=c.yp);c=Math.abs(b);a=a/2+((c-1)/2|0)*a;0===c%2&&(a=-a);0>b&&(a=-a)}else a=10}return a};T.prototype.computeThickness=function(){var a=this.path;return null!==a?Math.max(a.fb,1):1};T.prototype.hasCurviness=function(){return!isNaN(this.Xs)||0!==this.hf&&!this.ic};
T.prototype.adjustPoints=function(a,b,c,d){var f=this.Lo;if(this.ic){if(f===cl)return!1;f===dl&&(f=bl)}switch(f){case cl:var g=this.o(a),h=this.o(c);if(!g.M(b)||!h.M(d)){var f=g.x,g=g.y,k=h.x-f,l=h.y-g,m=Math.sqrt(k*k+l*l);if(!F.I(m,0)){var n;F.I(k,0)?n=0>l?-Math.PI/2:Math.PI/2:(n=Math.atan(l/Math.abs(k)),0>k&&(n=Math.PI-n));var h=b.x,p=b.y,k=d.x-h,q=d.y-p,l=Math.sqrt(k*k+q*q);F.I(k,0)?q=0>q?-Math.PI/2:Math.PI/2:(q=Math.atan(q/Math.abs(k)),0>k&&(q=Math.PI-q));m=l/m;n=q-n;this.Ef(a,b);for(a+=1;a<c;a++)b=
this.o(a),k=b.x-f,l=b.y-g,b=Math.sqrt(k*k+l*l),F.I(b,0)||(F.I(k,0)?l=0>l?-Math.PI/2:Math.PI/2:(l=Math.atan(l/Math.abs(k)),0>k&&(l=Math.PI-l)),k=l+n,b*=m,this.Y(a,h+b*Math.cos(k),p+b*Math.sin(k)));this.Ef(c,d)}}return!0;case dl:g=this.o(a);p=this.o(c);if(!g.M(b)||!p.M(d)){f=g.x;g=g.y;h=p.x;p=p.y;m=(h-f)*(h-f)+(p-g)*(p-g);k=b.x;n=b.y;var l=d.x,q=d.y,r=0,s=1,r=0!==l-k?(q-n)/(l-k):9E9;0!==r&&(s=Math.sqrt(1+1/(r*r)));this.Ef(a,b);for(a+=1;a<c;a++){b=this.o(a);var u=b.x,v=b.y,D=0.5;0!==m&&(D=((f-u)*(f-
h)+(g-v)*(g-p))/m);var A=f+D*(h-f),G=g+D*(p-g);b=Math.sqrt((u-A)*(u-A)+(v-G)*(v-G));v<r*(u-A)+G&&(b=-b);0<r&&(b=-b);u=k+D*(l-k);D=n+D*(q-n);0!==r?(b=u+b/s,this.Y(a,b,D-(b-u)/r)):this.Y(a,u,D+b)}this.Ef(c,d)}return!0;case bl:return this.ic&&(f=this.o(a),g=this.o(a+1),h=this.o(a+2),F.I(f.y,g.y)?F.I(g.x,h.x)?this.Y(a+1,g.x,b.y):F.I(g.y,h.y)&&this.Y(a+1,b.x,g.y):F.I(f.x,g.x)&&(F.I(g.y,h.y)?this.Y(a+1,b.x,g.y):F.I(g.x,h.x)&&this.Y(a+1,g.x,b.y)),f=this.o(c),g=this.o(c-1),h=this.o(c-2),F.I(f.y,g.y)?F.I(g.x,
h.x)?this.Y(c-1,g.x,d.y):F.I(g.y,h.y)&&this.Y(c-1,d.x,g.y):F.I(f.x,g.x)&&(F.I(g.y,h.y)?this.Y(c-1,d.x,g.y):F.I(g.x,h.x)&&this.Y(c-1,g.x,d.y))),this.Ef(a,b),this.Ef(c,d),!0;default:return!1}};
T.prototype.addOrthoPoints=function(a,b,c,d,f,g){b=-45<=b&&45>b?0:45<=b&&135>b?90:135<=b&&225>b?180:270;d=-45<=d&&45>d?0:45<=d&&135>d?90:135<=d&&225>d?180:270;var h=f.oa.copy(),k=g.oa.copy();if(h.N()&&k.N()){h.Sf(8,8);k.Sf(8,8);h.kj(a);k.kj(c);var l,m;if(0===b)if(c.x>a.x||270===d&&c.y<a.y&&k.right>a.x||90===d&&c.y>a.y&&k.right>a.x)l=new w(c.x,a.y),m=new w(c.x,(a.y+c.y)/2),180===d?(l.x=this.computeMidOrthoPosition(a.x,c.x,!1),m.x=l.x,m.y=c.y):270===d&&c.y<a.y||90===d&&c.y>a.y?(l.x=a.x<k.left?this.computeMidOrthoPosition(a.x,
k.left,!1):a.x<k.right&&(270===d&&a.y<k.top||90===d&&a.y>k.bottom)?this.computeMidOrthoPosition(a.x,c.x,!1):k.right,m.x=l.x,m.y=c.y):0===d&&a.x<k.left&&a.y>k.top&&a.y<k.bottom&&(l.x=a.x,l.y=a.y<c.y?Math.min(c.y,k.top):Math.max(c.y,k.bottom),m.y=l.y);else{l=new w(a.x,c.y);m=new w((a.x+c.x)/2,c.y);if(180===d||90===d&&c.y<h.top||270===d&&c.y>h.bottom)180===d&&(k.Fa(a)||h.Fa(c))?l.y=this.computeMidOrthoPosition(a.y,c.y,!0):c.y<a.y&&(180===d||90===d)?l.y=this.computeMidOrthoPosition(h.top,Math.max(c.y,
k.bottom),!0):c.y>a.y&&(180===d||270===d)&&(l.y=this.computeMidOrthoPosition(h.bottom,Math.min(c.y,k.top),!0)),m.x=c.x,m.y=l.y;if(l.y>h.top&&l.y<h.bottom)if(c.x>=h.left&&c.x<=a.x||a.x<=k.right&&a.x>=c.x){if(90===d||270===d)l=new w(Math.max((a.x+c.x)/2,a.x),a.y),m=new w(l.x,c.y)}else l.y=270===d||(0===d||180===d)&&c.y<a.y?Math.min(c.y,0===d?h.top:Math.min(h.top,k.top)):Math.max(c.y,0===d?h.bottom:Math.max(h.bottom,k.bottom)),m.x=c.x,m.y=l.y}else if(180===b)if(c.x<a.x||270===d&&c.y<a.y&&k.left<a.x||
90===d&&c.y>a.y&&k.left<a.x)l=new w(c.x,a.y),m=new w(c.x,(a.y+c.y)/2),0===d?(l.x=this.computeMidOrthoPosition(a.x,c.x,!1),m.x=l.x,m.y=c.y):270===d&&c.y<a.y||90===d&&c.y>a.y?(l.x=a.x>k.right?this.computeMidOrthoPosition(a.x,k.right,!1):a.x>k.left&&(270===d&&a.y<k.top||90===d&&a.y>k.bottom)?this.computeMidOrthoPosition(a.x,c.x,!1):k.left,m.x=l.x,m.y=c.y):180===d&&a.x>k.right&&a.y>k.top&&a.y<k.bottom&&(l.x=a.x,l.y=a.y<c.y?Math.min(c.y,k.top):Math.max(c.y,k.bottom),m.y=l.y);else{l=new w(a.x,c.y);m=new w((a.x+
c.x)/2,c.y);if(0===d||90===d&&c.y<h.top||270===d&&c.y>h.bottom)0===d&&(k.Fa(a)||h.Fa(c))?l.y=this.computeMidOrthoPosition(a.y,c.y,!0):c.y<a.y&&(0===d||90===d)?l.y=this.computeMidOrthoPosition(h.top,Math.max(c.y,k.bottom),!0):c.y>a.y&&(0===d||270===d)&&(l.y=this.computeMidOrthoPosition(h.bottom,Math.min(c.y,k.top),!0)),m.x=c.x,m.y=l.y;if(l.y>h.top&&l.y<h.bottom)if(c.x<=h.right&&c.x>=a.x||a.x>=k.left&&a.x<=c.x){if(90===d||270===d)l=new w(Math.min((a.x+c.x)/2,a.x),a.y),m=new w(l.x,c.y)}else l.y=270===
d||(0===d||180===d)&&c.y<a.y?Math.min(c.y,180===d?h.top:Math.min(h.top,k.top)):Math.max(c.y,180===d?h.bottom:Math.max(h.bottom,k.bottom)),m.x=c.x,m.y=l.y}else if(90===b)if(c.y>a.y||180===d&&c.x<a.x&&k.bottom>a.y||0===d&&c.x>a.x&&k.bottom>a.y)l=new w(a.x,c.y),m=new w((a.x+c.x)/2,c.y),270===d?(l.y=this.computeMidOrthoPosition(a.y,c.y,!0),m.x=c.x,m.y=l.y):180===d&&c.x<a.x||0===d&&c.x>a.x?(l.y=a.y<k.top?this.computeMidOrthoPosition(a.y,k.top,!0):a.y<k.bottom&&(180===d&&a.x<k.left||0===d&&a.x>k.right)?
this.computeMidOrthoPosition(a.y,c.y,!0):k.bottom,m.x=c.x,m.y=l.y):90===d&&a.y<k.top&&a.x>k.left&&a.x<k.right&&(l.x=a.x<c.x?Math.min(c.x,k.left):Math.max(c.x,k.right),l.y=a.y,m.x=l.x);else{l=new w(c.x,a.y);m=new w(c.x,(a.y+c.y)/2);if(270===d||0===d&&c.x<h.left||180===d&&c.x>h.right)270===d&&(k.Fa(a)||h.Fa(c))?l.x=this.computeMidOrthoPosition(a.x,c.x,!1):c.x<a.x&&(270===d||0===d)?l.x=this.computeMidOrthoPosition(h.left,Math.max(c.x,k.right),!1):c.x>a.x&&(270===d||180===d)&&(l.x=this.computeMidOrthoPosition(h.right,
Math.min(c.x,k.left),!1)),m.x=l.x,m.y=c.y;if(l.x>h.left&&l.x<h.right)if(c.y>=h.top&&c.y<=a.y||a.y<=k.bottom&&a.y>=c.y){if(0===d||180===d)l=new w(a.x,Math.max((a.y+c.y)/2,a.y)),m=new w(c.x,l.y)}else l.x=180===d||(90===d||270===d)&&c.x<a.x?Math.min(c.x,90===d?h.left:Math.min(h.left,k.left)):Math.max(c.x,90===d?h.right:Math.max(h.right,k.right)),m.x=l.x,m.y=c.y}else if(c.y<a.y||180===d&&c.x<a.x&&k.top<a.y||0===d&&c.x>a.x&&k.top<a.y)l=new w(a.x,c.y),m=new w((a.x+c.x)/2,c.y),90===d?(l.y=this.computeMidOrthoPosition(a.y,
c.y,!0),m.x=c.x,m.y=l.y):180===d&&c.x<a.x||0===d&&c.x>=a.x?(l.y=a.y>k.bottom?this.computeMidOrthoPosition(a.y,k.bottom,!0):a.y>k.top&&(180===d&&a.x<k.left||0===d&&a.x>k.right)?this.computeMidOrthoPosition(a.y,c.y,!0):k.top,m.x=c.x,m.y=l.y):270===d&&a.y>k.bottom&&a.x>k.left&&a.x<k.right&&(l.x=a.x<c.x?Math.min(c.x,k.left):Math.max(c.x,k.right),l.y=a.y,m.x=l.x);else{l=new w(c.x,a.y);m=new w(c.x,(a.y+c.y)/2);if(90===d||0===d&&c.x<h.left||180===d&&c.x>h.right)90===d&&(k.Fa(a)||h.Fa(c))?l.x=this.computeMidOrthoPosition(a.x,
c.x,!1):c.x<a.x&&(90===d||0===d)?l.x=this.computeMidOrthoPosition(h.left,Math.max(c.x,k.right),!1):c.x>a.x&&(90===d||180===d)&&(l.x=this.computeMidOrthoPosition(h.right,Math.min(c.x,k.left),!1)),m.x=l.x,m.y=c.y;if(l.x>h.left&&l.x<h.right)if(c.y<=h.bottom&&c.y>=a.y||a.y>=k.top&&a.y<=c.y){if(0===d||180===d)l=new w(a.x,Math.min((a.y+c.y)/2,a.y)),m=new w(c.x,l.y)}else l.x=180===d||(90===d||270===d)&&c.x<a.x?Math.min(c.x,270===d?h.left:Math.min(h.left,k.left)):Math.max(c.x,270===d?h.right:Math.max(h.right,
k.right)),m.x=l.x,m.y=c.y}var n=l,p=m;if(this.dj){var q=this.h,r;(r=null===q)||(q.Ub.yg?r=!1:(r=q.Ua,r=r instanceof cf?!r.Ov||r.aF:!0),r=!r);if(r||h.Fa(c)||k.Fa(a)||f===g||this.layer.rc)a=!1;else if(f=Sj(q,this),sn(f,Math.min(a.x,n.x),Math.min(a.y,n.y),Math.abs(a.x-n.x),Math.abs(a.y-n.y))&&sn(f,Math.min(n.x,p.x),Math.min(n.y,p.y),Math.abs(n.x-p.x),Math.abs(n.y-p.y))&&sn(f,Math.min(p.x,c.x),Math.min(p.y,c.y),Math.abs(p.x-c.x),Math.abs(p.y-c.y)))a=!1;else if(h=h.copy().ii(k),h.Sf(2*f.Hm,2*f.Gm),tn(f,
a,b,c,d,h),k=un(f,c.x,c.y),f.abort||k!==vn||(Vj(f),k=f.sG,h.Sf(f.Hm*k,f.Gm*k),tn(f,a,b,c,d,h),k=un(f,c.x,c.y)),f.abort||k!==vn||(Vj(f),k=f.kF,h.Sf(f.Hm*k,f.Gm*k),tn(f,a,b,c,d,h),k=un(f,c.x,c.y)),!f.abort&&k===vn&&f.XG&&(Vj(f),tn(f,a,b,c,d,f.Pb),k=un(f,c.x,c.y)),!f.abort&&k<vn&&0!==un(f,c.x,c.y)){wn(this,f,c.x,c.y,d,!0);d=this.o(2);if(4>this.pa)0===b||180===b?(d.x=a.x,d.y=c.y):(d.x=c.x,d.y=a.y),this.Y(2,d.x,d.y),this.C(3,d.x,d.y);else if(c=this.o(3),0===b||180===b)F.I(d.x,c.x)?(b=0===b?Math.max(d.x,
a.x):Math.min(d.x,a.x),this.Y(2,b,a.y),this.Y(3,b,c.y)):F.I(d.y,c.y)?(Math.abs(a.y-d.y)<=f.Gm/2&&(this.Y(2,d.x,a.y),this.Y(3,c.x,a.y)),this.C(2,d.x,a.y)):this.Y(2,a.x,d.y);else if(90===b||270===b)F.I(d.y,c.y)?(b=90===b?Math.max(d.y,a.y):Math.min(d.y,a.y),this.Y(2,a.x,b),this.Y(3,c.x,b)):F.I(d.x,c.x)?(Math.abs(a.x-d.x)<=f.Hm/2&&(this.Y(2,a.x,d.y),this.Y(3,a.x,c.y)),this.C(2,a.x,d.y)):this.Y(2,d.x,a.y);a=!0}else a=!1}else a=!1;a||(this.Vh(l),this.Vh(m))}};
T.prototype.computeMidOrthoPosition=function(a,b){if(this.hasCurviness()){var c=this.computeCurviness();return(a+b)/2+c}return(a+b)/2};function Bf(a){if(!a.dj)return!1;var b=a.points.n,c=b.length;if(4>c)return!1;a=Sj(a.h,a);for(var d=1;d<c-2;d++){var f=b[d],g=b[d+1];if(!sn(a,Math.min(f.x,g.x),Math.min(f.y,g.y),Math.abs(f.x-g.x),Math.abs(f.y-g.y)))return!0}return!1}
function wn(a,b,c,d,f,g){var h=b.Hm,k=b.Gm,l=un(b,c,d),m=c,n=d;for(0===f?m+=h:90===f?n+=k:180===f?m-=h:n-=k;l>xn&&un(b,m,n)===l-yn;)c=m,d=n,0===f?m+=h:90===f?n+=k:180===f?m-=h:n-=k,l-=yn;if(g){if(l>xn)if(180===f||0===f)c=Math.floor(c/h)*h+h/2;else if(90===f||270===f)d=Math.floor(d/k)*k+k/2}else c=Math.floor(c/h)*h+h/2,d=Math.floor(d/k)*k+k/2;l>xn&&(g=f,m=c,n=d,0===f?(g=90,n+=k):90===f?(g=180,m-=h):180===f?(g=270,n-=k):270===f&&(g=0,m+=h),un(b,m,n)===l-yn?wn(a,b,m,n,g,!1):(m=c,n=d,0===f?(g=270,n-=
k):90===f?(g=0,m+=h):180===f?(g=90,n+=k):270===f&&(g=180,m-=h),un(b,m,n)===l-yn&&wn(a,b,m,n,g,!1)));a.Xk(c,d)}T.prototype.findClosestSegment=function(a){e&&t.l(a,w,T,"findClosestSegment:p");var b=a.x;a=a.y;for(var c=this.o(0),d=this.o(1),f=Ra(b,a,c.x,c.y,d.x,d.y),g=0,h=1;h<this.pa-1;h++){var c=this.o(h+1),k=Ra(b,a,d.x,d.y,c.x,c.y),d=c;k<f&&(g=h,f=k)}return g};T.prototype.invalidateGeometry=T.prototype.Ye=function(){this.Ji=this.Ta=null;this.ha()};
t.A(T,{nd:"geometry"},function(){null===this.Ta&&(this.updateRoute(),this.Ta=this.makeGeometry());return this.Ta});T.prototype.bx=function(){if(null===this.Ta&&!1!==this.rg){this.Ta=this.makeGeometry();var a=this.Rq();if(null!==a){a.Ta=this.Ta;for(var b=this.xa,c=b.length,d=0;d<c;d++){var f=b.n[d];f!==a&&f.fj&&f instanceof V&&(f.Ta=this.Ta)}}}};
T.prototype.makeGeometry=function(){var a=this.pa;if(2>a){var b=new zc(Ac),c=new Bc(0,0);b.Bb.add(c);return b}var d=!1,b=this.h;null!==b&&0!==b.la.Je&&gn(this)&&(d=!0);var f=this.o(0).copy(),g=f.copy(),h=this.computeCurve();if(h===Pg&&3<=a&&!F.mb(this.mn,0))if(3===a)var k=this.o(1),b=Math.min(f.x,k.x),c=Math.min(f.y,k.y),k=this.o(2),b=Math.min(b,k.x),c=Math.min(c,k.y);else{if(this.ic)for(k=0;k<a;k++)b=this.Cc.n[k],g.x=Math.min(b.x,g.x),g.y=Math.min(b.y,g.y);else for(var l,k=3;k<a;k+=3)k+3>=a&&(k=
a-1),l=this.o(k),g.x=Math.min(l.x,g.x),g.y=Math.min(l.y,g.y);b=g.x;c=g.y}else{for(k=0;k<a;k++)b=this.Cc.n[k],g.x=Math.min(b.x,g.x),g.y=Math.min(b.y,g.y);b=g.x;c=g.y}b-=this.zz.x;c-=this.zz.y;f.x-=b;f.y-=c;if(2===a){var m=this.o(1).copy();m.x-=b;m.y-=c;0!==qn(this)&&zn(this,f,!0,g);0!==rn(this)&&zn(this,m,!1,g);b=new zc(Dc);b.qa=f.x;b.ra=f.y;b.D=m.x;b.F=m.y}else{m=t.u();0!==qn(this)&&zn(this,f,!0,g);I(m,f.x,f.y,!1,!1);if(h===Pg&&3<=a&&!F.mb(this.mn,0))if(3===a)k=this.o(1),a=k.x-b,d=k.y-c,k=this.o(2).copy(),
k.x-=b,k.y-=c,0!==rn(this)&&zn(this,k,!1,g),J(m,a,d,a,d,k.x,k.y);else if(this.ic){g=new w(b,c);f=this.o(1).copy();h=new w(b,c);a=new w(b,c);d=this.o(0);l=null;for(var n=this.mn/3,k=1;k<this.pa-1;k++){l=this.o(k);var p=d,q=l,r=this.o(An(this,l,k,!1));if(!F.mb(p.x,q.x)||!F.mb(q.x,r.x))if(!F.mb(p.y,q.y)||!F.mb(q.y,r.y)){var s=n,u=h,v=a;isNaN(s)&&(s=this.mn/3);var D=p.x,p=p.y,A=q.x,q=q.y,G=r.x,r=r.y,K=s*Bn(D,p,A,q),s=s*Bn(A,q,G,r);F.mb(p,q)&&F.mb(A,G)&&(A>D?r>q?(u.x=A-K,u.y=q-K,v.x=A+s,v.y=q+s):(u.x=
A-K,u.y=q+K,v.x=A+s,v.y=q-s):r>q?(u.x=A+K,u.y=q-K,v.x=A-s,v.y=q+s):(u.x=A+K,u.y=q+K,v.x=A-s,v.y=q-s));F.mb(D,A)&&F.mb(q,r)&&(q>p?(G>A?(u.x=A-K,u.y=q-K,v.x=A+s):(u.x=A+K,u.y=q-K,v.x=A-s),v.y=q+s):(G>A?(u.x=A-K,u.y=q+K,v.x=A+s):(u.x=A+K,u.y=q+K,v.x=A-s),v.y=q-s));if(F.mb(D,A)&&F.mb(A,G)||F.mb(p,q)&&F.mb(q,r))D=0.5*(D+G),p=0.5*(p+r),u.x=D,u.y=p,v.x=D,v.y=p;1===k?(f.x=0.5*(d.x+l.x),f.y=0.5*(d.y+l.y)):2===k&&F.mb(d.x,this.o(0).x)&&F.mb(d.y,this.o(0).y)&&(f.x=0.5*(d.x+l.x),f.y=0.5*(d.y+l.y));J(m,f.x-b,
f.y-c,h.x-b,h.y-c,l.x-b,l.y-c);g.set(h);f.set(a);d=l}}k=d.x;d=d.y;g=this.o(this.pa-1);k=0.5*(k+g.x);d=0.5*(d+g.y);J(m,a.x-b,a.y-c,k-b,d-c,g.x-b,g.y-c)}else for(k=3;k<a;k+=3)d=this.o(k-2),k+3>=a&&(k=a-1),g=this.o(k-1),l=this.o(k),k===a-1&&0!==rn(this)&&(l=l.copy(),zn(this,l,!1,F.mj)),J(m,d.x-b,d.y-c,g.x-b,g.y-c,l.x-b,l.y-c);else{g=t.K();g.assign(this.o(0));for(k=1;k<a;){k=An(this,g,k,1<k);u=this.o(k);if(k>=a-1){g!==u&&(0!==rn(this)&&(u=u.copy(),zn(this,u,!1,F.mj)),Cn(this,m,-b,-c,g,u,d));break}k=An(this,
u,k+1,k<a-3);f=m;h=-b;l=-c;n=g;v=this.o(k);D=g;p=d;F.I(n.y,u.y)&&F.I(u.x,v.x)?(s=this.computeCorner(),s=Math.min(s,Math.abs(u.x-n.x)/2),s=A=Math.min(s,Math.abs(v.y-u.y)/2),F.I(s,0)?(Cn(this,f,h,l,n,u,p),D.assign(u)):(q=u.x,G=u.y,r=q,K=G,q=u.x>n.x?u.x-s:u.x+s,K=v.y>u.y?u.y+A:u.y-A,Cn(this,f,h,l,n,new w(q,G),p),Sc(f,u.x+h,u.y+l,r+h,K+l),D.p(r,K))):F.I(n.x,u.x)&&F.I(u.y,v.y)?(s=this.computeCorner(),A=Math.min(s,Math.abs(u.y-n.y)/2),A=s=Math.min(A,Math.abs(v.x-u.x)/2),F.I(s,0)?(Cn(this,f,h,l,n,u,p),D.assign(u)):
(q=u.x,K=G=u.y,G=u.y>n.y?u.y-A:u.y+A,r=v.x>u.x?u.x+s:u.x-s,Cn(this,f,h,l,n,new w(q,G),p),Sc(f,u.x+h,u.y+l,r+h,K+l),D.p(r,K))):(Cn(this,f,h,l,n,u,p),D.assign(u))}t.B(g)}b=m.s;t.v(m)}return b};function Bn(a,b,c,d){a=c-a;if(isNaN(a)||Infinity===a||-Infinity===a)return NaN;0>a&&(a=-a);b=d-b;if(isNaN(b)||Infinity===b||-Infinity===b)return NaN;0>b&&(b=-b);return F.mb(a,0)?b:F.mb(b,0)?a:Math.sqrt(a*a+b*b)}
function zn(a,b,c,d){var f=a.pa;if(!(2>f))if(c){var g=a.o(1);c=g.x-d.x;d=g.y-d.y;g=Bn(b.x,b.y,c,d);0!==g&&(f=2===f?0.5*g:g,a=qn(a),a>f&&(a=f),c=a*(c-b.x)/g,a=a*(d-b.y)/g,b.x+=c,b.y+=a)}else g=a.o(f-2),c=g.x-d.x,d=g.y-d.y,g=Bn(b.x,b.y,c,d),0!==g&&(f=2===f?0.5*g:g,a=rn(a),a>f&&(a=f),c=a*(b.x-c)/g,a=a*(b.y-d)/g,b.x-=c,b.y-=a)}
function An(a,b,c,d){for(var f=a.pa,g=b;F.mb(b.x,g.x)&&F.mb(b.y,g.y);){if(c>=f)return f-1;g=a.o(c++)}if(!F.mb(b.x,g.x)&&!F.mb(b.y,g.y))return c-1;for(var h=g;F.mb(b.x,g.x)&&F.mb(g.x,h.x)&&(!d||(b.y>=g.y?g.y>=h.y:g.y<=h.y))||F.mb(b.y,g.y)&&F.mb(g.y,h.y)&&(!d||(b.x>=g.x?g.x>=h.x:g.x<=h.x));){if(c>=f)return f-1;h=a.o(c++)}return c-2}
function Cn(a,b,c,d,f,g,h){if(!h&&gn(a)){h=[];var k=0;a.La()&&(k=Dn(a,f,g,h));var l=f.x,l=f.y;if(0<k)if(F.I(f.y,g.y))if(f.x<g.x)for(var m=0;m<k;){var n=Math.max(f.x,Math.min(h[m++]-5,g.x-10));b.lineTo(n+c,g.y+d);for(var l=n+c,p=Math.min(n+10,g.x);m<k;){var q=h[m];if(q<p+10)m++,p=Math.min(q+5,g.x);else break}q=(n+p)/2+c;q=g.y-10+d;n=p+c;p=g.y+d;a.De===yg?I(b,n,p,!1,!1):J(b,l,q,n,q,n,p)}else for(m=k-1;0<=m;){n=Math.min(f.x,Math.max(h[m--]+5,g.x+10));b.lineTo(n+c,g.y+d);l=n+c;for(p=Math.max(n-10,g.x);0<=
m;)if(q=h[m],q>p-10)m--,p=Math.max(q-5,g.x);else break;q=g.y-10+d;n=p+c;p=g.y+d;a.De===yg?I(b,n,p,!1,!1):J(b,l,q,n,q,n,p)}else if(F.I(f.x,g.x))if(f.y<g.y)for(m=0;m<k;){n=Math.max(f.y,Math.min(h[m++]-5,g.y-10));b.lineTo(g.x+c,n+d);l=n+d;for(p=Math.min(n+10,g.y);m<k;)if(q=h[m],q<p+10)m++,p=Math.min(q+5,g.y);else break;q=g.x-10+c;n=g.x+c;p+=d;a.De===yg?I(b,n,p,!1,!1):J(b,q,l,q,p,n,p)}else for(m=k-1;0<=m;){n=Math.min(f.y,Math.max(h[m--]+5,g.y+10));b.lineTo(g.x+c,n+d);l=n+d;for(p=Math.max(n-10,g.y);0<=
m;)if(q=h[m],q>p-10)m--,p=Math.max(q-5,g.y);else break;q=g.x-10+c;n=g.x+c;p+=d;a.De===yg?I(b,n,p,!1,!1):J(b,q,l,q,p,n,p)}}b.lineTo(g.x+c,g.y+d)}
function Dn(a,b,c,d){var f=a.h;if(null===f||b.M(c))return 0;for(f=f.Yw;f.next();){var g=f.value;if(null!==g&&g.visible)for(var g=g.zb.n,h=g.length,k=0;k<h;k++){var l=g[k];if(l===a)return 0<d.length&&d.sort(function(a,b){return a-b}),d.length;if(l instanceof T&&l.La()&&gn(l)){var m=l.uj();m.N()&&a.uj().Tf(m)&&!a.usesSamePort(l)&&(m=l.path,null!==m&&m.pl()&&En(b,c,d,l))}}}0<d.length&&d.sort(function(a,b){return a-b});return d.length}
function En(a,b,c,d){for(var f=F.I(a.y,b.y),g=d.pa,h=d.o(0),k=t.K(),l=1;l<g;l++){var m=d.o(l);if(l<g-1){var n=d.o(l+1);if(h.y===m.y&&m.y===n.y){if(m.x>h.x&&n.x>m.x||m.x<h.x&&n.x<m.x)m=n,l++}else h.x===m.x&&m.x===n.x&&(m.y>h.y&&n.y>m.y||m.y<h.y&&n.y<m.y)&&(m=n,l++)}a:{var n=k,p=a.x,q=a.y,r=b.x,s=b.y,u=h.x,h=h.y,v=m.x,D=m.y;if(!F.I(p,r)){if(F.I(q,s)&&F.I(u,v)&&Math.min(p,r)<u&&Math.max(p,r)>u&&Math.min(h,D)<q&&Math.max(h,D)>q&&!F.I(h,D)){n.x=u;n.y=q;n=!0;break a}}else if(!F.I(q,s)&&F.I(h,D)&&Math.min(q,
s)<h&&Math.max(q,s)>h&&Math.min(u,v)<p&&Math.max(u,v)>p&&!F.I(u,v)){n.x=p;n.y=h;n=!0;break a}n.x=0;n.y=0;n=!1}n&&(f?c.push(k.x):c.push(k.y));h=m}t.B(k)}t.A(T,{gt:"firstPickIndex"},function(){return 2>=this.pa?0:this.ic||kn(this)!==wb?1:0});t.A(T,{Ww:"lastPickIndex"},function(){var a=this.pa;return 0===a?0:2>=a?a-1:this.ic||ln(this)!==wb?a-2:a-1});function gn(a){a=a.De;return a===xg||a===yg}function jn(a,b){if(b||gn(a)){var c=a.h;null===c||c.Rl.contains(a)||null===a.oz||c.Rl.add(a,a.oz)}}
function Ag(a,b){var c=a.layer;if(null!==c&&c.visible&&!c.rc){var d=c.h;if(null!==d)for(var f=!1,d=d.Yw;d.next();){var g=d.value;if(g.visible)if(g===c)for(var f=!0,h=!1,g=g.zb.n,k=g.length,l=0;l<k;l++){var m=g[l];m instanceof T&&(m===a?h=!0:h&&Fn(a,m,b))}else if(f)for(g=g.zb.n,k=g.length,l=0;l<k;l++)m=g[l],m instanceof T&&Fn(a,m,b)}}}function Fn(a,b,c){if(null!==b&&gn(b)&&null!==b.Ta){var d=b.uj();d.N()&&(a.uj().Tf(d)||c.Tf(d))&&(a.usesSamePort(b)||b.Ye())}}
T.prototype.usesSamePort=function(a){var b=this.pa,c=a.pa;if(0<b&&0<c){if(this.o(0).tf(a.o(0))||this.o(b-1).tf(a.o(c-1)))return!0}else if(this.aa===a.aa||this.ca===a.ca)return!0;return!1};T.prototype.df=function(a){C.prototype.df.call(this,a);if(null!==this.we)for(var b=this.we.k;b.next();)b.value.df(a)};t.g(T,"adjusting",T.prototype.Lo);t.defineProperty(T,{Lo:"adjusting"},function(){return this.lq},function(a){var b=this.lq;b!==a&&(e&&t.Aa(a,T,T,"adjusting"),this.lq=a,this.j("adjusting",b,a))});
t.g(T,"corner",T.prototype.sw);t.defineProperty(T,{sw:"corner"},function(){return this.yq},function(a){var b=this.yq;b!==a&&(e&&t.i(a,"number",T,"corner"),this.yq=a,this.Ye(),this.j("corner",b,a))});t.g(T,"curve",T.prototype.De);t.defineProperty(T,{De:"curve"},function(){return this.Bq},function(a){var b=this.Bq;b!==a&&(e&&t.Aa(a,T,T,"curve"),this.Bq=a,this.ac(),jn(this,b===yg||b===xg||a===yg||a===xg),this.j("curve",b,a))});t.g(T,"curviness",T.prototype.Xs);
t.defineProperty(T,{Xs:"curviness"},function(){return this.Cq},function(a){var b=this.Cq;b!==a&&(e&&t.i(a,"number",T,"curviness"),this.Cq=a,this.ac(),this.j("curviness",b,a))});t.g(T,"routing",T.prototype.Lt);t.defineProperty(T,{Lt:"routing"},function(){return this.pm},function(a){var b=this.pm;b!==a&&(e&&t.Aa(a,T,T,"routing"),this.pm=a,this.ui=null,this.ac(),jn(this,2===(b.value&2)||2===(a.value&2)),this.j("routing",b,a))});t.g(T,"smoothness",T.prototype.mn);
t.defineProperty(T,{mn:"smoothness"},function(){return this.ps},function(a){var b=this.ps;b!==a&&(e&&t.i(a,"number",T,"smoothness"),this.ps=a,this.Ye(),this.j("smoothness",b,a))});
function en(a){var b=a.eg;if(null!==b){var c=a.qg;if(null!==c){var d=a.Bh,f=a.Rh;a:{if(null!==c&&null!==b.qh)for(a=b.qh.k;a.next();){var g=a.value;if(g.Hp===b&&g.At===c&&g.ix===d&&g.jx===f||g.Hp===c&&g.At===b&&g.ix===f&&g.jx===d){a=g;break a}}a=null}for(var h=g=null,k=b.nc.n,l=k.length,m=0;m<l;m++){var n=k[m];if(n.eg===b&&n.Bh===d&&n.qg===c&&n.Rh===f||n.eg===c&&n.Bh===f&&n.qg===b&&n.Rh===d)null===h?h=n:(null===g&&(g=new B(T),g.add(h)),g.add(n))}if(null!==g)for(null===a&&(a=new Om,a.Hp=b,a.ix=d,a.At=
c,a.jx=f,Nm(b,a),Nm(c,a)),a.links=g,m=0;m<g.count;m++)if(n=g.n[m],0===n.hf){b=1;for(c=0;c<g.count;c++)Math.abs(g.n[c].hf)===b&&(b++,c=-1);n.xn=a;n.hf=n.aa===a.Hp?b:-b;b=n.h;(null===b||b.lf)&&n.ac()}}}}
function dn(a){var b=a.xn;if(null!==b){var c=a.hf;a.xn=null;a.hf=0;b.links.remove(a);if(2>b.links.count)1===b.links.count&&(c=b.links.n[0],c.xn=null,c.hf=0,c.ac()),c=b.Hp,null!==b&&null!==c.qh&&c.qh.remove(b),c=b.At,null!==b&&null!==c.qh&&c.qh.remove(b);else for(c=Math.abs(c),a=0===c%2,b=b.links.k;b.next();){var d=b.value,f=Math.abs(d.hf),g=0===f%2;f>c&&a===g&&(d.hf=0<d.hf?d.hf-2:d.hf+2,d.ac())}}}function Om(){t.Ac(this);this.links=this.jx=this.At=this.ix=this.Hp=null}
t.Vd(Om,{Hp:!0,ix:!0,At:!0,jx:!0,links:!0,spacing:!0});function Tj(){t.Ac(this);this.group=null;this.nt=!0;this.abort=!1;this.kg=this.jg=1;this.vr=this.ur=-1;this.je=this.ie=8;this.wc=null;this.XG=!1;this.sG=22;this.kF=111}t.Vd(Tj,{group:!0,nt:!0,abort:!0,XG:!0,sG:!0,kF:!0});var xn=1,yn=1,vn=999999999,Gn=vn;
Tj.prototype.initialize=function(a){if(!(0>=a.width||0>=a.height)){var b=a.y,c=a.x+a.width,d=a.y+a.height;this.jg=Math.floor((a.x-this.ie)/this.ie)*this.ie;this.kg=Math.floor((b-this.je)/this.je)*this.je;this.ur=Math.ceil((c+2*this.ie)/this.ie)*this.ie;this.vr=Math.ceil((d+2*this.je)/this.je)*this.je;a=1+(Math.ceil((this.ur-this.jg)/this.ie)|0);b=1+(Math.ceil((this.vr-this.kg)/this.je)|0);if(null===this.wc||this.Go<a-1||this.Ho<b-1){c=[];for(d=0;d<=a;d++){for(var f=[],g=0;g<=b;g++)f[g]=0;c[d]=f}this.wc=
c;this.Go=a-1;this.Ho=b-1}if(null!==this.wc)for(a=0;a<=this.Go;a++)for(b=0;b<=this.Ho;b++)this.wc[a][b]=Gn}};t.A(Tj,{Pb:null},function(){return new x(this.jg,this.kg,this.ur-this.jg,this.vr-this.kg)});t.g(Tj,"cellWidth",Tj.prototype.Hm);t.defineProperty(Tj,{Hm:null},function(){return this.ie},function(a){0<a&&a!==this.ie&&(this.ie=a,this.initialize(this.Pb))});t.g(Tj,"cellHeight",Tj.prototype.Gm);t.defineProperty(Tj,{Gm:null},function(){return this.je},function(a){0<a&&a!==this.je&&(this.je=a,this.initialize(this.Pb))});
function Hn(a,b,c){return a.jg<=b&&b<=a.ur&&a.kg<=c&&c<=a.vr}function un(a,b,c){if(!Hn(a,b,c))return 0;b-=a.jg;b/=a.ie;c-=a.kg;c/=a.je;return a.wc[b|0][c|0]}function Wj(a,b,c){Hn(a,b,c)&&(b-=a.jg,b/=a.ie,c-=a.kg,c/=a.je,a.wc[b|0][c|0]=0)}function Vj(a){if(null!==a.wc)for(var b=0;b<=a.Go;b++)for(var c=0;c<=a.Ho;c++)a.wc[b][c]>=xn&&(a.wc[b][c]|=vn)}
function sn(a,b,c,d,f){if(b>a.ur||b+d<a.jg||c>a.vr||c+f<a.kg)return!0;b=(b-a.jg)/a.ie|0;c=(c-a.kg)/a.je|0;d=Math.max(0,d)/a.ie+1|0;var g=Math.max(0,f)/a.je+1|0;0>b&&(d+=b,b=0);0>c&&(g+=c,c=0);if(0>d||0>g)return!0;f=Math.min(b+d-1,a.Go)|0;for(d=Math.min(c+g-1,a.Ho)|0;b<=f;b++)for(g=c;g<=d;g++)if(0===a.wc[b][g])return!1;return!0}
function In(a,b,c,d,f,g,h,k,l){if(!(b<g||b>h||c<k||c>l)){var m,n;m=b|0;n=c|0;var p=a.wc[m][n];if(p>=xn&&p<vn)for(f?n+=d:m+=d,p+=yn;g<=m&&m<=h&&k<=n&&n<=l&&!(p>=a.wc[m][n]);)a.wc[m][n]=p,p+=yn,f?n+=d:m+=d;m=f?n:m;if(f)if(0<d)for(c+=d;c<m;c+=d)In(a,b,c,1,!f,g,h,k,l),In(a,b,c,-1,!f,g,h,k,l);else for(c+=d;c>m;c+=d)In(a,b,c,1,!f,g,h,k,l),In(a,b,c,-1,!f,g,h,k,l);else if(0<d)for(b+=d;b<m;b+=d)In(a,b,c,1,!f,g,h,k,l),In(a,b,c,-1,!f,g,h,k,l);else for(b+=d;b>m;b+=d)In(a,b,c,1,!f,g,h,k,l),In(a,b,c,-1,!f,g,h,
k,l)}}function Jn(a,b,c,d,f,g,h,k,l,m,n){for(var p=b|0,q=c|0,r=a.wc[p][q];0===r&&p>k&&p<l&&q>m&&q<n;)if(h?q+=g:p+=g,r=a.wc[p][q],1>=Math.abs(p-d)&&1>=Math.abs(q-f))return a.abort=!0,0;p=b|0;q=c|0;r=a.wc[p][q];b=xn;for(a.wc[p][q]=b;0===r&&p>k&&p<l&&q>m&&q<n;)h?q+=g:p+=g,r=a.wc[p][q],a.wc[p][q]=b,b+=yn;return h?q:p}
function tn(a,b,c,d,f,g){if(null!==a.wc){a.abort=!1;var h=b.x,k=b.y;if(Hn(a,h,k)){var h=h-a.jg,h=h/a.ie,k=k-a.kg,k=k/a.je,l=d.x,m=d.y;if(Hn(a,l,m))if(l-=a.jg,l/=a.ie,m-=a.kg,m/=a.je,1>=Math.abs(h-l)&&1>=Math.abs(k-m))a.abort=!0;else{var n=g.x;b=g.y;d=g.x+g.width;var p=g.y+g.height,n=n-a.jg,n=n/a.ie;b-=a.kg;b/=a.je;d-=a.jg;d/=a.ie;p-=a.kg;p/=a.je;g=Math.max(0,Math.min(a.Go,n|0));d=Math.min(a.Go,Math.max(0,d|0));b=Math.max(0,Math.min(a.Ho,b|0));var p=Math.min(a.Ho,Math.max(0,p|0)),h=h|0,k=k|0,l=l|0,
m=m|0,n=h,q=k,r=0===c||90===c?1:-1;(c=90===c||270===c)?q=Jn(a,h,k,l,m,r,c,g,d,b,p):n=Jn(a,h,k,l,m,r,c,g,d,b,p);if(!a.abort){a:{c=0===f||90===f?1:-1;f=90===f||270===f;for(var r=l|0,s=m|0,u=a.wc[r][s];0===u&&r>g&&r<d&&s>b&&s<p;)if(f?s+=c:r+=c,u=a.wc[r][s],1>=Math.abs(r-h)&&1>=Math.abs(s-k)){a.abort=!0;break a}r=l|0;s=m|0;u=a.wc[r][s];for(a.wc[r][s]=Gn;0===u&&r>g&&r<d&&s>b&&s<p;)f?s+=c:r+=c,u=a.wc[r][s],a.wc[r][s]=Gn}a.abort||(In(a,n,q,1,!1,g,d,b,p),In(a,n,q,-1,!1,g,d,b,p),In(a,n,q,1,!0,g,d,b,p),In(a,
n,q,-1,!0,g,d,b,p))}}}}}function on(){t.Ac(this);this.port=this.Fc=null;this.Fg=[];this.Gp=!1}t.Vd(on,{Fc:!0,port:!0,Fg:!0,Gp:!0});on.prototype.toString=function(){for(var a=this.Fg,b=this.Fc.toString()+" "+a.length.toString()+":",c=0;c<a.length;c++){var d=a[c];null!==d&&(b+="\n  "+d.toString())}return b};
function Kn(a,b,c,d){b=b.offsetY;switch(b){case t.Sc:return 90;case t.Jc:return 180;case t.bd:return 270;case t.Tc:return 0}switch(b){case t.Sc|t.bd:return 180<c?270:90;case t.Jc|t.Tc:return 90<c&&270>=c?180:0}a=180*Math.atan2(a.height,a.width)/Math.PI;switch(b){case t.Jc|t.bd:return c>a&&c<=180+a?180:270;case t.bd|t.Tc:return c>180-a&&c<=360-a?270:0;case t.Tc|t.Sc:return c>a&&c<=180+a?90:0;case t.Sc|t.Jc:return c>180-a&&c<=360-a?180:90;case t.Jc|t.bd|t.Tc:return 90<c&&c<=180+a?180:c>180+a&&c<=360-
a?270:0;case t.bd|t.Tc|t.Sc:return 180<c&&c<=360-a?270:c>a&&180>=c?90:0;case t.Tc|t.Sc|t.Jc:return c>a&&c<=180-a?90:c>180-a&&270>=c?180:0;case t.Sc|t.Jc|t.bd:return c>180-a&&c<=180+a?180:c>180+a?270:90}d&&b!==(t.Jc|t.bd|t.Tc|t.Sc)&&(c-=15,0>c&&(c+=360));return c>a&&c<180-a?90:c>=180-a&&c<=180+a?180:c>180+a&&c<360-a?270:0}
function pn(a,b){var c=a.Fg;if(0===c.length){a:if(!a.Gp){c=a.Gp;a.Gp=!0;var d,f=null,g=a.Fc;if(g instanceof S&&!g.Yd){if(!g.oa.N()){a.Gp=c;break a}f=g;d=f.xE()}else d=a.Fc.yE();var h=a.Fg.length=0,k=a.port.pb(Eb,t.K()),l=a.port.pb(Pb,t.K()),g=t.ik(k.x,k.y,0,0);g.kj(l);t.B(k);t.B(l);k=t.mc(g.x+g.width/2,g.y+g.height/2);for(d=d.k;d.next();)if(l=d.value,l.La()){var m=wb,n=l.ud===a.port||l.aa.nl(f),m=n?kn(l,a.port):ln(l,a.port);if(m.rp()&&(n=n?l.fe:l.ud,null!==n)){var p=n.S;if(null!==p){var n=l.computeOtherPoint(p,
n),p=k.aj(n),m=Kn(g,m,p,l.ic),q;0===m?(q=t.Tc,180<p&&(p-=360)):q=90===m?t.Sc:180===m?t.Jc:t.bd;(m=a.Fg[h])?(m.link=l,m.angle=p,m.be=q):(m=new Ln(l,p,q),a.Fg[h]=m);m.hx.set(n);h++}}}t.B(k);a.Fg.sort(on.prototype.rJ);f=a.Fg.length;k=-1;for(h=d=0;h<f;h++)m=a.Fg[h],null!==m&&(m.be!==k&&(k=m.be,d=0),m.mp=d,d++);k=-1;d=0;for(h=f-1;0<=h;h--)m=a.Fg[h],null!==m&&(m.be!==k&&(k=m.be,d=m.mp+1),m.Lm=d);h=a.Fg;n=a.port;f=a.Fc.DJ;k=t.K();d=t.K();l=t.K();m=t.K();n.pb(Eb,k);n.pb(Gb,d);n.pb(Pb,l);n.pb(Lb,m);var r=
q=p=n=0;if(f===Mm)for(var s=0;s<h.length;s++){var u=h[s];if(null!==u){var v=u.link.computeThickness();switch(u.be){case t.Sc:q+=v;break;case t.Jc:r+=v;break;case t.bd:n+=v;break;default:case t.Tc:p+=v}}}for(var D=0,A,G,K=0,N=G=0,O=1,s=0;s<h.length;s++)if(u=h[s],null!==u){if(D!=u.be){D=u.be;switch(D){case t.Sc:A=l;G=m;break;case t.Jc:A=m;G=k;break;case t.bd:A=k;G=d;break;default:case t.Tc:A=d,G=l}K=G.x-A.x;G=G.y-A.y;switch(D){case t.Sc:q>Math.abs(K)?(O=Math.abs(K)/q,q=Math.abs(K)):O=1;break;case t.Jc:r>
Math.abs(G)?(O=Math.abs(G)/r,r=Math.abs(G)):O=1;break;case t.bd:n>Math.abs(K)?(O=Math.abs(K)/n,n=Math.abs(K)):O=1;break;default:case t.Tc:p>Math.abs(G)?(O=Math.abs(G)/p,p=Math.abs(G)):O=1}N=0}var U=u.xp;if(f===Mm){v=u.link.computeThickness();v*=O;U.set(A);switch(D){case t.Sc:U.x=A.x+K/2+q/2-N-v/2;break;case t.Jc:U.y=A.y+G/2+r/2-N-v/2;break;case t.bd:U.x=A.x+K/2-n/2+N+v/2;break;default:case t.Tc:U.y=A.y+G/2-p/2+N+v/2}N+=v}else v=0.5,f===Jm&&(v=(u.mp+1)/(u.Lm+1)),U.x=A.x+K*v,U.y=A.y+G*v}t.B(k);t.B(d);
t.B(l);t.B(m);A=a.Fg;for(h=0;h<A.length;h++)f=A[h],null!==f&&(f.Aw=a.computeEndSegmentLength(f));a.Gp=c;t.hc(g)}c=a.Fg}for(g=0;g<c.length;g++)if(A=c[g],null!==A&&A.link===b)return A;return null}on.prototype.rJ=function(a,b){return a===b?0:null===a?-1:null===b?1:a.be<b.be?-1:a.be>b.be?1:a.angle<b.angle?-1:a.angle>b.angle?1:0};
on.prototype.computeEndSegmentLength=function(a){var b=a.link,c=b.computeEndSegmentLength(this.Fc,this.port,wb,b.ud===this.port),d=a.mp;if(0>d)return c;var f=a.Lm;if(1>=f||!b.ic)return c;var b=a.hx,g=a.xp;if(a.be===t.Jc||a.be===t.Sc)d=f-1-d;return((a=a.be===t.Jc||a.be===t.Tc)?b.y<g.y:b.x<g.x)?c+8*d:(a?b.y===g.y:b.x===g.x)?c:c+8*(f-1-d)};function Ln(a,b,c){this.link=a;this.angle=b;this.be=c;this.hx=new w;this.Lm=this.mp=0;this.xp=new w;this.Aw=0}
t.Vd(Ln,{link:!0,angle:!0,be:!0,hx:!0,mp:!0,Lm:!0,xp:!0,Aw:!0});Ln.prototype.toString=function(){return this.link.toString()+" "+this.angle.toString()+" "+this.be.toString()+":"+this.mp.toString()+"/"+this.Lm.toString()+" "+this.xp.toString()+" "+this.Aw.toString()+" "+this.hx.toString()};
function S(a){0===arguments.length?R.call(this,$g):R.call(this,a);this.xr=new ma(C);this.qo=new ma(S);this.Ok=this.yr=this.wr=null;this.Es=!1;this.br=!0;this.Fs=!1;this.Jb=this.ts=null;this.uq=!1;this.vq=!0;this.wq=!1;this.Pd=new be;this.Pd.group=this}t.ga("Group",S);t.Ka(S,R);
S.prototype.cloneProtected=function(a){R.prototype.cloneProtected.call(this,a);a.wr=this.wr;a.yr=this.yr;a.Ok=this.Ok;a.Es=this.Es;a.br=this.br;a.Fs=this.Fs;a.ts=this.ts;var b=a.bt(function(a){return a instanceof Ug});a.Jb=b instanceof Ug?b:null;a.uq=this.uq;a.vq=this.vq;a.wq=this.wq;null!==this.Pd?(a.Pd=this.Pd.copy(),a instanceof S&&(a.Pd.group=a)):(null!==a.Pd&&(a.Pd.group=null),a.Pd=null)};
S.prototype.Yh=function(a){R.prototype.Yh.call(this,a);var b=a.dp();for(a=a.Rc;a.next();){var c=a.value;c.ha();c.J(8);c.Wi();if(c instanceof R)c.wf(b);else if(c instanceof T)for(c=c.fk;c.next();)c.value.wf(b)}};
S.prototype.gn=function(a,b,c,d,f,g,h){if(a===wd&&"elements"===b)if(f instanceof Ug)null===this.Jb?this.Jb=f:this.Jb!==f&&t.m("Cannot insert a second Placeholder into the visual tree of a Group.");else{if(f instanceof y){var k=f.bt(function(a){return a instanceof Ug});k instanceof Ug&&(null===this.Jb?this.Jb=k:this.Jb!==k&&t.m("Cannot insert a second Placeholder into the visual tree of a Group."))}}else a===xd&&"elements"===b&&null!==this.Jb&&(d===this.Jb?this.Jb=null:d instanceof y&&this.Jb.ej(d)&&
(this.Jb=null));R.prototype.gn.call(this,a,b,c,d,f,g,h)};S.prototype.Tj=function(a,b,c,d){this.Nk=this.Jb;y.prototype.Tj.call(this,a,b,c,d)};S.prototype.ol=function(){if(!R.prototype.ol.call(this))return!1;for(var a=this.Rc;a.next();){var b=a.value;if(b instanceof R){if(b.La()&&Ri(b))return!1}else if(b instanceof T&&b.La()&&Ri(b)&&b.aa!==this&&b.ca!==this)return!1}return!0};t.A(S,{placeholder:"placeholder"},function(){return this.Jb});t.g(S,"computesBoundsAfterDrag",S.prototype.Vz);
t.defineProperty(S,{Vz:"computesBoundsAfterDrag"},function(){return this.uq},function(a){var b=this.uq;b!==a&&(t.i(a,"boolean",S,"computesBoundsAfterDrag"),this.uq=a,this.j("computesBoundsAfterDrag",b,a))});t.g(S,"computesBoundsIncludingLinks",S.prototype.$D);t.defineProperty(S,{$D:"computesBoundsIncludingLinks"},function(){return this.vq},function(a){t.i(a,"boolean",S,"computesBoundsIncludingLinks");var b=this.vq;b!==a&&(this.vq=a,this.j("computesBoundsIncludingLinks",b,a))});
t.g(S,"computesBoundsIncludingLocation",S.prototype.aE);t.defineProperty(S,{aE:"computesBoundsIncludingLocation"},function(){return this.wq},function(a){t.i(a,"boolean",S,"computesBoundsIncludingLocation");var b=this.wq;b!==a&&(this.wq=a,this.j("computesBoundsIncludingLocation",b,a))});t.A(S,{Rc:"memberParts"},function(){return this.xr.k});
function Fm(a,b){if(a.xr.add(b)){b instanceof S&&a.qo.add(b);var c=a.vF;if(null!==c){var d=!0,f=a.h;null!==f&&(d=f.Na,f.Na=!0);c(a,b);null!==f&&(f.Na=d)}a.La()&&a.Yd||b.df(!1)}c=a.Jb;null===c&&(c=a);c.ha()}function Em(a,b){if(a.xr.remove(b)){b instanceof S&&a.qo.remove(b);var c=a.wF;if(null!==c){var d=!0,f=a.h;null!==f&&(d=f.Na,f.Na=!0);c(a,b);null!==f&&(f.Na=d)}}c=a.Jb;null===c&&(c=a);c.ha()}S.prototype.Nm=function(){if(0<this.xr.count){var a=this.h;if(null===a)return;for(var b=this.xr.copy().k;b.next();)a.remove(b.value)}R.prototype.Nm.call(this)};
S.prototype.xx=function(){var a=this.layer;null!==a&&a.xx(this)};t.g(S,"layout",S.prototype.jc);t.defineProperty(S,{jc:"layout"},function(){return this.Pd},function(a){var b=this.Pd;b!==a&&(null!==a&&t.l(a,be,S,"layout"),null!==b&&(b.h=null,b.group=null),this.Pd=a,null!==a&&(a.h=this.h,a.group=this),this.j("layout",b,a))});t.g(S,"memberAdded",S.prototype.vF);
t.defineProperty(S,{vF:"memberAdded"},function(){return this.wr},function(a){var b=this.wr;b!==a&&(null!==a&&t.i(a,"function",S,"memberAdded"),this.wr=a,this.j("memberAdded",b,a))});t.g(S,"memberRemoved",S.prototype.wF);t.defineProperty(S,{wF:"memberRemoved"},function(){return this.yr},function(a){var b=this.yr;b!==a&&(null!==a&&t.i(a,"function",S,"memberRemoved"),this.yr=a,this.j("memberRemoved",b,a))});t.g(S,"memberValidation",S.prototype.vt);
t.defineProperty(S,{vt:"memberValidation"},function(){return this.Ok},function(a){var b=this.Ok;b!==a&&(null!==a&&t.i(a,"function",S,"memberValidation"),this.Ok=a,this.j("memberValidation",b,a))});S.prototype.canAddMembers=function(a){var b=this.h;if(null===b)return!1;b=b.Se;for(a=Ye(a).k;a.next();)if(!b.isValidMember(this,a.value))return!1;return!0};
S.prototype.addMembers=function(a,b){var c=this.h;if(null===c)return!1;for(var c=c.Se,d=!0,f=Ye(a).k;f.next();){var g=f.value;!b||c.isValidMember(this,g)?g.hb=this:d=!1}return d};t.g(S,"ungroupable",S.prototype.NG);t.defineProperty(S,{NG:"ungroupable"},function(){return this.Es},function(a){var b=this.Es;b!==a&&(t.i(a,"boolean",S,"ungroupable"),this.Es=a,this.j("ungroupable",b,a))});
S.prototype.canUngroup=function(){if(!this.NG)return!1;var a=this.layer;if(null!==a&&!a.Ro)return!1;a=a.h;return null===a||a.Ro?!0:!1};S.prototype.invalidateConnectedLinks=S.prototype.wf=function(a){void 0===a&&(a=null);R.prototype.wf.call(this,a);for(var b=this.xE();b.next();){var c=b.value;if(null===a||!a.contains(c)){var d=c.aa;null!==d&&d.nl(this)&&!d.La()?c.ac():(d=c.ca,null!==d&&d.nl(this)&&!d.La()&&c.ac())}}};
S.prototype.findExternalLinksConnected=S.prototype.xE=function(){var a=this.dp();a.add(this);for(var b=new ma(T),c=a.k;c.next();){var d=c.value;if(d instanceof R)for(d=d.qe;d.next();){var f=d.value;a.contains(f)||b.add(f)}}return b.k};S.prototype.findExternalNodesConnected=function(){var a=this.dp();a.add(this);for(var b=new ma(R),c=a.k;c.next();){var d=c.value;if(d instanceof R)for(d=d.qe;d.next();){var f=d.value,g=f.aa;a.contains(g)&&g!==this||b.add(g);f=f.ca;a.contains(f)&&f!==this||b.add(f)}}return b.k};
S.prototype.findSubGraphParts=S.prototype.dp=function(){var a=new ma(C);Ie(a,this,!0,0);a.remove(this);return a};S.prototype.df=function(a){R.prototype.df.call(this,a);for(var b=this.Rc;b.next();)b.value.df(a)};S.prototype.collapseSubGraph=S.prototype.collapseSubGraph=function(){var a=this.h;if(null!==a&&!a.Wd){a.Wd=!0;var b=this.dp();Mn(this,b);a.Wd=!1}};
function Mn(a,b){for(var c=a.Rc;c.next();){var d=c.value;d.df(!1);if(d instanceof S){var f=d;f.Yd&&(f.Dx=f.Yd,Mn(f,b))}if(d instanceof R)d.wf(b);else if(d instanceof T)for(d=d.fk;d.next();)d.value.wf(b)}a.Yd=!1}S.prototype.expandSubGraph=S.prototype.expandSubGraph=function(){var a=this.h;if(null!==a&&!a.Wd){var b=a.Ub;0!==a.la.Je&&b.ul();a.Wd=!0;var c=this.dp();Nn(this,c,b,this);a.Wd=!1}};
function Nn(a,b,c,d){for(var f=a.Rc;f.next();){var g=f.value;g.df(!0);if(g instanceof S){var h=g;h.Dx&&(h.Dx=!1,Nn(h,b,c,d))}if(g instanceof R)g.wf(b),Nh(c,g,d);else if(g instanceof T)for(g=g.fk;g.next();)g.value.wf(b)}a.Yd=!0}t.g(S,"isSubGraphExpanded",S.prototype.Yd);
t.defineProperty(S,{Yd:"isSubGraphExpanded"},function(){return this.br},function(a){var b=this.br;if(b!==a){t.i(a,"boolean",S,"isSubGraphExpanded");this.br=a;var c=this.h;this.j("isSubGraphExpanded",b,a);b=this.yG;if(null!==b){var d=!0;null!==c&&(d=c.Na,c.Na=!0);b(this);null!==c&&(c.Na=d)}null!==c&&c.la.vb||(a?this.expandSubGraph():this.collapseSubGraph())}});t.g(S,"wasSubGraphExpanded",S.prototype.Dx);
t.defineProperty(S,{Dx:"wasSubGraphExpanded"},function(){return this.Fs},function(a){var b=this.Fs;b!==a&&(t.i(a,"boolean",S,"wasSubGraphExpanded"),this.Fs=a,this.j("wasSubGraphExpanded",b,a))});t.g(S,"subGraphExpandedChanged",S.prototype.yG);t.defineProperty(S,{yG:"subGraphExpandedChanged"},function(){return this.ts},function(a){var b=this.ts;b!==a&&(null!==a&&t.i(a,"function",S,"subGraphExpandedChanged"),this.ts=a,this.j("subGraphExpandedChanged",b,a))});
S.prototype.move=S.prototype.move=function(a){var b=this.position,c=b.x;isNaN(c)&&(c=0);b=b.y;isNaN(b)&&(b=0);var c=a.x-c,b=a.y-b,d=t.mc(c,b);R.prototype.move.call(this,a);for(a=this.dp().k;a.next();){var f=a.value;if(!(f instanceof T||f.bi)){var g=f.position,h=f.location;g.N()?(d.x=g.x+c,d.y=g.y+b,f.position=d):h.N()&&(d.x=h.x+c,d.y=h.y+b,f.location=d)}}for(a.reset();a.next();)f=a.value,f instanceof T&&(g=f.position,d.x=g.x+c,d.y=g.y+b,f.move(d));t.B(d)};
function Ug(){Q.call(this);this.Ne=F.fq;this.cs=new x(NaN,NaN,NaN,NaN)}t.ga("Placeholder",Ug);t.Ka(Ug,Q);Ug.prototype.cloneProtected=function(a){Q.prototype.cloneProtected.call(this,a);a.Ne=this.Ne.Z();a.cs=this.cs.copy()};Ug.prototype.Uj=function(a){if(null===this.background&&null===this.$k)return!1;var b=this.Pa;return mb(0,0,b.width,b.height,a.x,a.y)};
Ug.prototype.ut=function(){var a=this.S;null!==a&&(a instanceof S||a instanceof Je)||t.m("Placeholder is not inside a Group or Adornment.");if(a instanceof S){var b=this.computeBorder(this.cs),c=this.hd;Va(c,b.width||0,b.height||0);nk(this,0,0,c.width,c.height);for(var c=a.Rc,d=!1;c.next();)if(c.value.La()){d=!0;break}!d||isNaN(b.x)||isNaN(b.y)||(c=new w,c.Qt(b,a.bf),a.location=new w(c.x,c.y))}else{var b=this.Ca,c=this.hd,a=this.padding,d=a.left+a.right,f=a.top+a.bottom;if(b.N())Va(c,b.width+d||0,
b.height+f||0),nk(this,-a.left,-a.top,c.width,c.height);else{var g=this.S,h=g.pc,k=h.pb(Eb,t.K()),b=t.ik(k.x,k.y,0,0);b.kj(h.pb(Pb,k));b.kj(h.pb(Gb,k));b.kj(h.pb(Lb,k));g.Yg.p(b.x,b.y);Va(c,b.width+d||0,b.height+f||0);nk(this,-a.left,-a.top,c.width,c.height);t.B(k);t.hc(b)}}};Ug.prototype.Tj=function(a,b,c,d){var f=this.oa;f.x=a;f.y=b;f.width=c;f.height=d};
Ug.prototype.computeBorder=function(a){var b=this.S;if(b instanceof S&&b.Vz&&this.cs.N()){var c=b.h;if(null!==c&&(c=c.Ua,c instanceof cf&&!c.Iq&&null!==c.qc&&!c.qc.contains(b)))return a.assign(this.cs),a}var c=t.Gf(),d=this.computeMemberBounds(c),f=this.padding;a.p(d.x-f.left,d.y-f.top,d.width+f.left+f.right,d.height+f.top+f.bottom);t.hc(c);b instanceof S&&b.aE&&b.location.N()&&a.kj(b.location);return a};
Ug.prototype.computeMemberBounds=function(a){var b=this.S;if(!(b instanceof S))return a.p(0,0,0,0),a;for(var c=Infinity,d=Infinity,f=-Infinity,g=-Infinity,h=b.Rc;h.next();){var k=h.value;if(k.La()){if(k instanceof T){if(!b.$D)continue;if(Qi(k))continue;if(k.aa===b||k.ca===b)continue}k=k.oa;k.left<c&&(c=k.left);k.top<d&&(d=k.top);k.right>f&&(f=k.right);k.bottom>g&&(g=k.bottom)}}isFinite(c)&&isFinite(d)?a.p(c,d,f-c,g-d):(b=b.location,c=this.padding,a.p(b.x+c.left,b.y+c.top,0,0));return a};
t.g(Ug,"padding",Ug.prototype.padding);t.defineProperty(Ug,{padding:"padding"},function(){return this.Ne},function(a){"number"===typeof a?(0>a&&t.ka(a,">= 0",Ug,"padding"),a=new ab(a)):(t.l(a,ab,Ug,"padding"),0>a.left&&t.ka(a.left,">= 0",Ug,"padding:val.left"),0>a.right&&t.ka(a.right,">= 0",Ug,"padding:val.right"),0>a.top&&t.ka(a.top,">= 0",Ug,"padding:val.top"),0>a.bottom&&t.ka(a.bottom,">= 0",Ug,"padding:val.bottom"));var b=this.Ne;b.M(a)||(this.Ne=a=a.Z(),this.j("padding",b,a))});
function be(){0<arguments.length&&t.ad(be);t.Ac(this);this.Wy=this.U=null;this.Xq=this.Zq=!0;this.gr=this.co=!1;this.nq=(new w(0,0)).freeze();this.az=!0;this.kz=null;this.$q=!0}t.ga("Layout",be);be.prototype.cloneProtected=function(a){a.Zq=this.Zq;a.Xq=this.Xq;this.Xq||(a.co=!0);a.gr=this.gr;a.nq.assign(this.nq);a.$q=this.$q};be.prototype.copy=function(){var a=new this.constructor;this.cloneProtected(a);return a};
be.prototype.toString=function(){var a=t.xg(Object.getPrototypeOf(this)),a=a+"(";null!==this.group&&(a+=" in "+this.group);null!==this.h&&(a+=" for "+this.h);return a+")"};t.g(be,"diagram",be.prototype.h);t.defineProperty(be,{h:"diagram"},function(){return this.U},function(a){this.U!==a&&(null!==a&&t.l(a,z,be,"diagram"),this.U=a)});t.g(be,"group",be.prototype.group);
t.defineProperty(be,{group:"group"},function(){return this.Wy},function(a){this.Wy!==a&&(null!==a&&t.l(a,S,be,"group"),this.Wy=a,null!==a&&(this.U=a.h))});t.g(be,"isOngoing",be.prototype.fF);t.defineProperty(be,{fF:"isOngoing"},function(){return this.Zq},function(a){this.Zq!==a&&(t.i(a,"boolean",be,"isOngoing"),this.Zq=a)});t.g(be,"isInitial",be.prototype.eF);t.defineProperty(be,{eF:"isInitial"},function(){return this.Xq},function(a){t.i(a,"boolean",be,"isInitial");this.Xq=a;a||(this.co=!0)});
t.g(be,"isValidLayout",be.prototype.$e);t.defineProperty(be,{$e:"isValidLayout"},function(){return this.co},function(a){this.co!==a&&(t.i(a,"boolean",be,"isValidLayout"),this.co=a,a||(a=this.h,null!==a&&(a.mu=!0)))});be.prototype.invalidateLayout=be.prototype.J=function(){if(this.co){var a=this.h;if(null!==a&&!a.la.vb){var b=a.Ub;!b.cr&&(b.yg&&b.Al(),this.fF&&a.lf||this.eF&&!a.lf)&&(this.$e=!1,a.te())}}};t.g(be,"isRealtime",be.prototype.wA);
t.defineProperty(be,{wA:"isRealtime"},function(){return this.$q},function(a){this.$q!==a&&(t.i(a,"boolean",be,"isRealtime"),this.$q=a)});t.g(be,"isViewportSized",be.prototype.st);t.defineProperty(be,{st:"isViewportSized"},function(){return this.gr},function(a){this.gr!==a&&(t.i(a,"boolean",be,"isViewportSized"),(this.gr=a)&&this.J())});t.g(be,"isRouting",be.prototype.rt);
t.defineProperty(be,{rt:"isRouting"},function(){return this.az},function(a){this.az!==a&&(t.i(a,"boolean",be,"isRouting"),this.az=a)});t.g(be,"network",be.prototype.network);t.defineProperty(be,{network:"network"},function(){return this.kz},function(a){var b=this.kz;b!==a&&(null!==a&&t.l(a,ta,be,"network"),null!==b&&On(b,null),this.kz=a,null!==a&&On(a,this))});be.prototype.createNetwork=function(){var a=new ta;On(a,this);return a};
be.prototype.makeNetwork=function(a){var b=this.createNetwork();a instanceof z?(b.Ks(a.jh,!0),b.Ks(a.links,!0)):a instanceof S?b.Ks(a.Rc):b.Ks(a.k);return b};be.prototype.updateParts=function(){var a=this.h;if(null===a&&null!==this.network)for(var b=this.network.vertexes.k;b.next();){var c=b.value.Fc;if(null!==c&&(a=c.h,null!==a))break}this.$e=!0;null!==a&&a.uc("Layout");this.commitLayout();null!==a&&a.Ce("Layout")};be.prototype.commitLayout=function(){};
be.prototype.doLayout=function(a){a||t.m("Layout.doLayout(collection) argument must not be null but a Diagram, a Group, or an Iterable of Parts");var b=new ma(C);a===this.h?(Pn(this,b,a.jh,!0,this.FA,!0,!1,!0),Pn(this,b,a.sl,!0,this.FA,!0,!1,!0)):a===this.group?Pn(this,b,a.Rc,!1,this.FA,!0,!1,!0):b.Oe(a.k);var c=b.count;if(0<c){a=this.h;null!==a&&a.uc("Layout");for(var c=Math.ceil(Math.sqrt(c)),d=this.Fd.x,f=d,g=this.Fd.y,h=0,k=0,b=b.k;b.next();){var l=b.value;l.sf();var m=l.Ga,n=m.width,m=m.height;
l.moveTo(f,g);delete l.LC;f+=Math.max(n,50)+20;k=Math.max(k,Math.max(m,50));h>=c-1?(h=0,f=d,g+=k+20,k=0):h++}null!==a&&a.Ce("Layout")}this.$e=!0};be.prototype.FA=function(a){return!a.location.N()||a instanceof S&&a.LC?!0:!1};function Pn(a,b,c,d,f,g,h,k){for(c=c.k;c.next();){var l=c.value;d&&!l.sp||f&&!f(l)||l.canLayout()&&(g&&l instanceof R?l.bi||(l instanceof S&&null===l.jc?Pn(a,b,l.Rc,!1,f,g,h,k):b.add(l)):h&&l instanceof T?b.add(l):!k||!l.Ld()||l instanceof R||b.add(l))}}
t.g(be,"arrangementOrigin",be.prototype.Fd);t.defineProperty(be,{Fd:"arrangementOrigin"},function(){return this.nq},function(a){t.l(a,w,be,"arrangementOrigin");this.nq.M(a)||(this.nq.assign(a),this.J())});be.prototype.initialOrigin=function(a){var b=this.group;if(null!==b){var c=b.location;if(isNaN(c.x)||isNaN(c.y))return a;a=b.placeholder;null!==a?(c=a.pb(Eb),c.x+=a.padding.left,c.y+=a.padding.top):c=b.position.copy();return c}return a};function ta(){t.Ac(this);this.Pd=null;this.clear()}
t.ga("LayoutNetwork",ta);ta.prototype.clear=function(){if(this.vertexes)for(var a=this.vertexes.k;a.next();){var b=a.value;b.clear();b.network=null}if(this.edges)for(a=this.edges.k;a.next();)b=a.value,b.clear(),b.network=null;this.vertexes=new ma(ua);this.edges=new ma(va);this.IA=new ia(R,ua);this.yA=new ia(T,va)};ta.prototype.toString=function(){return"LayoutNetwork"+(null!==this.jc?"("+this.jc.toString()+")":"")};t.A(ta,{jc:"layout"},function(){return this.Pd});
function On(a,b){e&&null!==b&&t.l(b,be,ta,"setLayout");a.Pd=b}ta.prototype.createVertex=function(){return new ua};ta.prototype.createEdge=function(){return new va};
ta.prototype.addParts=ta.prototype.Ks=function(a,b){if(null!==a){void 0===b&&(b=!1);t.i(b,"boolean",ta,"addParts:toplevelonly");for(var c=a.k;c.next();){var d=c.value;if(d instanceof R&&(!b||d.sp)&&d.canLayout()&&!d.bi)if(d instanceof S&&null===d.jc)this.Ks(d.Rc,!1);else if(null===this.Rm(d)){var f=this.createVertex();f.Fc=d;this.Yk(f)}}for(c.reset();c.next();)if(d=c.value,d instanceof T&&(!b||d.sp)&&d.canLayout()&&null===this.Bw(d)){var g=d.aa,f=d.ca;g!==f&&(g=this.findGroupVertex(g),f=this.findGroupVertex(f),
null!==g&&null!==f&&this.an(g,f,d))}}};ta.prototype.findGroupVertex=function(a){if(null===a)return null;var b=a.findVisibleNode();if(null===b)return null;a=this.Rm(b);if(null!==a)return a;for(b=b.hb;null!==b;){a=this.Rm(b);if(null!==a)return a;b=b.hb}return null};ta.prototype.addVertex=ta.prototype.Yk=function(a){if(null!==a){e&&t.l(a,ua,ta,"addVertex:vertex");this.vertexes.add(a);var b=a.Fc;null!==b&&this.IA.add(b,a);a.network=this}};
ta.prototype.addNode=ta.prototype.Ko=function(a){if(null===a)return null;e&&t.l(a,R,ta,"addNode:node");var b=this.Rm(a);null===b&&(b=this.createVertex(),b.Fc=a,this.Yk(b));return b};ta.prototype.deleteVertex=ta.prototype.rE=function(a){if(null!==a&&(e&&t.l(a,ua,ta,"deleteVertex:vertex"),Qn(this,a))){for(var b=a.ff,c=b.count-1;0<=c;c--){var d=b.wa(c);this.Zo(d)}b=a.Te;for(c=b.count-1;0<=c;c--)d=b.wa(c),this.Zo(d)}};
function Qn(a,b){if(null===b)return!1;var c=a.vertexes.remove(b);c&&(a.IA.remove(b.Fc),b.network=null);return c}ta.prototype.deleteNode=function(a){null!==a&&(e&&t.l(a,R,ta,"deleteNode:node"),a=this.Rm(a),null!==a&&this.rE(a))};ta.prototype.findVertex=ta.prototype.Rm=function(a){if(null===a)return null;e&&t.l(a,R,ta,"findVertex:node");return this.IA.za(a)};
ta.prototype.addEdge=ta.prototype.Jo=function(a){if(null!==a){e&&t.l(a,va,ta,"addEdge:edge");this.edges.add(a);var b=a.link;null!==b&&null===this.Bw(b)&&this.yA.add(b,a);b=a.toVertex;null!==b&&b.HD(a);b=a.fromVertex;null!==b&&b.FD(a);a.network=this}};
ta.prototype.addLink=function(a){if(null===a)return null;e&&t.l(a,T,ta,"addLink:link");var b=a.aa,c=a.ca,d=this.Bw(a);null===d?(d=this.createEdge(),d.link=a,null!==b&&(d.fromVertex=this.Ko(b)),null!==c&&(d.toVertex=this.Ko(c)),this.Jo(d)):(d.fromVertex=null!==b?this.Ko(b):null,d.toVertex=null!==c?this.Ko(c):null);return d};ta.prototype.deleteEdge=ta.prototype.Zo=function(a){if(null!==a){e&&t.l(a,va,ta,"deleteEdge:edge");var b=a.toVertex;null!==b&&b.qE(a);b=a.fromVertex;null!==b&&b.pE(a);Rn(this,a)}};
function Rn(a,b){null!==b&&a.edges.remove(b)&&(a.yA.remove(b.link),b.network=null)}ta.prototype.deleteLink=function(a){null!==a&&(e&&t.l(a,T,ta,"deleteLink:link"),a=this.Bw(a),null!==a&&this.Zo(a))};ta.prototype.findEdge=ta.prototype.Bw=function(a){if(null===a)return null;e&&t.l(a,T,ta,"findEdge:link");return this.yA.za(a)};
ta.prototype.linkVertexes=ta.prototype.an=function(a,b,c){if(null===a||null===b)return null;e&&(t.l(a,ua,ta,"linkVertexes:fromVertex"),t.l(b,ua,ta,"linkVertexes:toVertex"),null!==c&&t.l(c,T,ta,"linkVertexes:link"));if(a.network===this&&b.network===this){var d=this.createEdge();d.link=c;d.fromVertex=a;d.toVertex=b;this.Jo(d);return d}return null};
ta.prototype.reverseEdge=ta.prototype.ox=function(a){if(null!==a){e&&t.l(a,va,ta,"reverseEdge:edge");var b=a.fromVertex,c=a.toVertex;null!==b&&null!==c&&(b.pE(a),c.qE(a),a.ox(),b.HD(a),c.FD(a))}};ta.prototype.deleteSelfEdges=ta.prototype.xw=function(){for(var a=t.Db(),b=this.edges.k;b.next();){var c=b.value;c.fromVertex===c.toVertex&&a.push(c)}b=a.length;for(c=0;c<b;c++)this.Zo(a[c]);t.ya(a)};
ta.prototype.deleteArtificialVertexes=function(){for(var a=t.Db(),b=this.vertexes.k;b.next();){var c=b.value;null===c.Fc&&a.push(c)}c=a.length;for(b=0;b<c;b++)this.rE(a[b]);c=t.Db();for(b=this.edges.k;b.next();){var d=b.value;null===d.link&&c.push(d)}d=c.length;for(b=0;b<d;b++)this.Zo(c[b]);t.ya(a);t.ya(c)};function Sn(a){for(var b=t.Db(),c=a.edges.k;c.next();){var d=c.value;null!==d.fromVertex&&null!==d.toVertex||b.push(d)}c=b.length;for(d=0;d<c;d++)a.Zo(b[d]);t.ya(b)}
ta.prototype.splitIntoSubNetworks=ta.prototype.VJ=function(){this.deleteArtificialVertexes();Sn(this);this.xw();for(var a=new B(ta),b=!0;b;)for(var b=!1,c=this.vertexes.k;c.next();){var d=c.value;if(0<d.ff.count||0<d.Te.count){b=this.jc.createNetwork();a.add(b);Tn(this,b,d);b=!0;break}}a.sort(function(a,b){return null===a||null===b||a===b?0:b.vertexes.count-a.vertexes.count});return a};
function Tn(a,b,c){if(null!==c&&c.network!==b){Qn(a,c);b.Yk(c);for(var d=c.tc;d.next();){var f=d.value;f.network!==b&&(Rn(a,f),b.Jo(f),Tn(a,b,f.fromVertex))}for(d=c.gc;d.next();)f=d.value,f.network!==b&&(Rn(a,f),b.Jo(f),Tn(a,b,f.toVertex))}}ta.prototype.findAllParts=function(){for(var a=new ma(C),b=this.vertexes.k;b.next();)a.add(b.value.Fc);for(b=this.edges.k;b.next();)a.add(b.value.link);return a};
function ua(){t.Ac(this);this.network=null;this.T=(new x(0,0,10,10)).freeze();this.O=(new w(5,5)).freeze();this.clear()}t.ga("LayoutVertex",ua);ua.prototype.clear=function(){this.rd=null;this.ff=new B(va);this.Te=new B(va)};ua.prototype.toString=function(){return"LayoutVertex#"+t.od(this)+(null!==this.Fc?"("+this.Fc.toString()+")":"")};t.g(ua,"node",ua.prototype.Fc);
t.defineProperty(ua,{Fc:"node"},function(){return this.rd},function(a){if(this.rd!==a){e&&null!==a&&t.l(a,R,ua,"node");this.rd=a;a.sf();var b=a.oa,c=b.x,d=b.y,f=b.width,b=b.height;isNaN(c)&&(c=0);isNaN(d)&&(d=0);this.T.p(c,d,f,b);if(!(a instanceof S)&&(a=a.kc.pb(Hb),a.N())){this.O.p(a.x-c,a.y-d);return}this.O.p(f/2,b/2)}});t.g(ua,"bounds",ua.prototype.Pb);t.defineProperty(ua,{Pb:"bounds"},function(){return this.T},function(a){this.T.M(a)||(e&&t.l(a,x,ua,"bounds"),this.T.assign(a))});
t.g(ua,"focus",ua.prototype.focus);t.defineProperty(ua,{focus:"focus"},function(){return this.O},function(a){this.O.M(a)||(e&&t.l(a,w,ua,"focus"),this.O.assign(a))});t.g(ua,"centerX",ua.prototype.Da);t.defineProperty(ua,{Da:"centerX"},function(){return this.T.x+this.O.x},function(a){var b=this.T;b.x+this.O.x!==a&&(e&&t.q(a,ua,"centerX"),b.Ma(),b.x=a-this.O.x,b.freeze())});t.g(ua,"centerY",ua.prototype.Oa);
t.defineProperty(ua,{Oa:"centerY"},function(){return this.T.y+this.O.y},function(a){var b=this.T;b.y+this.O.y!==a&&(e&&t.q(a,ua,"centerY"),b.Ma(),b.y=a-this.O.y,b.freeze())});t.g(ua,"focusX",ua.prototype.fp);t.defineProperty(ua,{fp:"focusX"},function(){return this.O.x},function(a){var b=this.O;b.x!==a&&(b.Ma(),b.x=a,b.freeze())});t.g(ua,"focusY",ua.prototype.gp);t.defineProperty(ua,{gp:"focusY"},function(){return this.O.y},function(a){var b=this.O;b.y!==a&&(b.Ma(),b.y=a,b.freeze())});t.g(ua,"x",ua.prototype.x);
t.defineProperty(ua,{x:"x"},function(){return this.T.x},function(a){var b=this.T;b.x!==a&&(b.Ma(),b.x=a,b.freeze())});t.g(ua,"y",ua.prototype.y);t.defineProperty(ua,{y:"y"},function(){return this.T.y},function(a){var b=this.T;b.y!==a&&(b.Ma(),b.y=a,b.freeze())});t.g(ua,"width",ua.prototype.width);t.defineProperty(ua,{width:"width"},function(){return this.T.width},function(a){var b=this.T;b.width!==a&&(b.Ma(),b.width=a,b.freeze())});t.g(ua,"height",ua.prototype.height);
t.defineProperty(ua,{height:"height"},function(){return this.T.height},function(a){var b=this.T;b.height!==a&&(b.Ma(),b.height=a,b.freeze())});ua.prototype.commit=function(){var a=this.Fc;if(null!==a){var b=this.Pb;if(!(a instanceof S)){var c=a.oa,d=a.kc.pb(Hb);if(c.N()&&d.N()){a.moveTo(b.x+this.fp-(d.x-c.x),b.y+this.gp-(d.y-c.y));return}}a.moveTo(b.x,b.y)}};ua.prototype.addSourceEdge=ua.prototype.HD=function(a){null!==a&&(e&&t.l(a,va,ua,"addSourceEdge:edge"),this.ff.contains(a)||this.ff.add(a))};
ua.prototype.deleteSourceEdge=ua.prototype.qE=function(a){null!==a&&(e&&t.l(a,va,ua,"deleteSourceEdge:edge"),this.ff.remove(a))};ua.prototype.addDestinationEdge=ua.prototype.FD=function(a){null!==a&&(e&&t.l(a,va,ua,"addDestinationEdge:edge"),this.Te.contains(a)||this.Te.add(a))};ua.prototype.deleteDestinationEdge=ua.prototype.pE=function(a){null!==a&&(e&&t.l(a,va,ua,"deleteDestinationEdge:edge"),this.Te.remove(a))};
t.A(ua,{SJ:"sourceVertexes"},function(){for(var a=new ma(ua),b=this.tc;b.next();){var c=b.value.fromVertex;null===c||a.contains(c)||a.add(c)}return a.k});t.A(ua,{xI:"destinationVertexes"},function(){for(var a=new ma(ua),b=this.gc;b.next();){var c=b.value.toVertex;null===c||a.contains(c)||a.add(c)}return a.k});
t.A(ua,{vertexes:"vertexes"},function(){for(var a=new ma(ua),b=this.tc;b.next();){var c=b.value,c=c.fromVertex;null===c||a.contains(c)||a.add(c)}for(b=this.gc;b.next();)c=b.value,c=c.toVertex,null===c||a.contains(c)||a.add(c);return a.k});t.A(ua,{tc:"sourceEdges"},function(){return this.ff.k});t.A(ua,{gc:"destinationEdges"},function(){return this.Te.k});t.A(ua,{edges:"edges"},function(){for(var a=new B(va),b=this.tc;b.next();){var c=b.value;a.add(c)}for(b=this.gc;b.next();)c=b.value,a.add(c);return a.k});
t.A(ua,{DI:"edgesCount"},function(){return this.ff.count+this.Te.count});var Un;ua.standardComparer=Un=function(a,b){e&&t.l(a,ua,ua,"standardComparer:m");e&&t.l(b,ua,ua,"standardComparer:n");var c=a.rd,d=b.rd;return c?d?(c=c.text,d=d.text,c<d?-1:c>d?1:0):1:null!==d?-1:0};
ua.smartComparer=function(a,b){e&&t.l(a,ua,ua,"smartComparer:m");e&&t.l(b,ua,ua,"smartComparer:n");if(null!==a){if(null!==b){var c=a.rd,d=b.rd;if(null!==c){if(null!==d){var c=c.text.toLocaleLowerCase().split(/([+\-]?[\.]?\d+(?:\.\d*)?(?:e[+\-]?\d+)?)/),d=d.text.toLocaleLowerCase().split(/([+\-]?[\.]?\d+(?:\.\d*)?(?:e[+\-]?\d+)?)/),f;for(f=0;f<c.length;f++)if(""!==d[f]&&void 0!==d[f]){var g=parseFloat(c[f]),h=parseFloat(d[f]);if(isNaN(g)){if(!isNaN(h))return 1;if(0!==c[f].localeCompare(d[f]))return c[f].localeCompare(d[f])}else{if(isNaN(h))return-1;
if(0!==g-h)return g-h}}else if(""!==c[f])return 1;return""!==d[f]&&void 0!==d[f]?-1:0}return 1}return null!==d?-1:0}return 1}return null!==b?-1:0};function va(){t.Ac(this);this.network=null;this.clear()}t.ga("LayoutEdge",va);va.prototype.clear=function(){this.toVertex=this.fromVertex=this.link=null};va.prototype.toString=function(){return"LayoutEdge#"+t.od(this)+(null!==this.link?"("+this.link.toString()+")":"")};
va.prototype.ox=function(){var a=this.fromVertex;this.fromVertex=this.toVertex;this.toVertex=a};va.prototype.commit=function(){};va.prototype.getOtherVertex=va.prototype.II=function(a){e&&t.l(a,ua,va,"getOtherVertex:v");return this.toVertex===a?this.fromVertex:this.fromVertex===a?this.toVertex:null};
function ck(){0<arguments.length&&t.ad(ck);be.call(this);this.st=!0;this.Hs=this.Is=NaN;this.pj=(new fa(NaN,NaN)).freeze();this.Nh=(new fa(10,10)).freeze();this.ue=ll;this.cd=jl;this.Mh=fl;this.th=Vn}t.ga("GridLayout",ck);t.Ka(ck,be);ck.prototype.cloneProtected=function(a){be.prototype.cloneProtected.call(this,a);a.Is=this.Is;a.Hs=this.Hs;a.pj.assign(this.pj);a.Nh.assign(this.Nh);a.ue=this.ue;a.cd=this.cd;a.Mh=this.Mh;a.th=this.th};
ck.prototype.doLayout=function(a){a||t.m("Layout.doLayout(collection) argument must not be null but a Diagram, a Group, or an Iterable of Parts");this.Fd=this.initialOrigin(this.Fd);var b=this.h,c=new ma(C);a instanceof z?(b=a,Pn(this,c,a.jh,!0,null,!0,!0,!0),Pn(this,c,a.links,!0,null,!0,!0,!0),Pn(this,c,a.sl,!0,null,!0,!0,!0)):a instanceof S?(b=a.h,Pn(this,c,a.Rc,!1,null,!0,!0,!0)):c.Oe(a.k);for(a=c.copy().k;a.next();){var d=a.value;if(d instanceof T&&(null!==d.aa||null!==d.ca))c.remove(d);else if(d.sf(),
d instanceof S)for(d=d.Rc;d.next();)c.remove(d.value)}c=c.Ie();if(0!==c.length){switch(this.sorting){case il:c.reverse();break;case fl:c.sort(this.comparer);break;case gl:c.sort(this.comparer),c.reverse()}var f=this.ZG;isNaN(f)&&(f=0);var g=this.qB,g=isNaN(g)&&null!==b?Math.max(b.xb.width-b.padding.left-b.padding.right,0):Math.max(this.qB,0);0>=f&&0>=g&&(f=1);a=this.spacing.width;isFinite(a)||(a=0);d=this.spacing.height;isFinite(d)||(d=0);null!==b&&b.uc("Layout");var h=[];switch(this.alignment){case ml:var k=
a,l=d,m=Math.max(this.al.width,1);if(!isFinite(m))for(var n=m=0;n<c.length;n++)var p=c[n],q=p.Ga,m=Math.max(m,q.width);var m=Math.max(m+k,1),r=Math.max(this.al.height,1);if(!isFinite(r))for(n=r=0;n<c.length;n++)p=c[n],q=p.Ga,r=Math.max(r,q.height);for(var r=Math.max(r+l,1),s=this.Qe,u=this.Fd.x,v=u,D=this.Fd.y,A=0,G=0,n=0;n<c.length;n++){var p=c[n],q=p.Ga,K=Math.ceil((q.width+k)/m)*m,N=Math.ceil((q.height+l)/r)*r,O;switch(s){case kl:O=Math.abs(v-q.width);break;default:O=v+q.width}if(0<f&&A>f-1||0<
g&&0<A&&O>g)h.push(new x(0,D,g,G+l)),A=0,v=u,D+=G,G=0;G=Math.max(G,N);switch(s){case kl:q=-q.width;break;default:q=0}p.moveTo(v+q,D);switch(s){case kl:v-=K;break;default:v+=K}A++}h.push(new x(0,D,g,G+l));break;case ll:k=a;l=d;m=Math.max(this.al.width,1);n=A=q=0;p=t.K();for(r=0;r<c.length;r++)s=c[r],u=s.Ga,v=Cm(s,s.kc,s.bf,p),q=Math.max(q,v.x),A=Math.max(A,u.width-v.x),n=Math.max(n,v.y);D=this.Qe;switch(D){case kl:q+=k;break;default:A+=k}var m=isFinite(m)?Math.max(m+k,1):Math.max(q+A,1),U=A=this.Fd.x,
G=this.Fd.y,K=0;g>=q&&(g-=q);q=0;N=Math.max(this.al.height,1);O=n=0;for(var X=!0,Z=t.K(),r=0;r<c.length;r++){s=c[r];u=s.Ga;v=Cm(s,s.kc,s.bf,p);if(0<K)switch(D){case kl:U=Math.floor((U-A-(u.width-v.x))/m)*m+A;break;default:U=Math.ceil((U-A+v.x)/m)*m+A}else switch(D){case kl:q=U+v.x+u.width;break;default:q=U-v.x}var P;switch(D){case kl:P=-(U+v.x)+q;break;default:P=U+u.width-v.x-q}if(0<f&&K>f-1||0<g&&0<K&&P>g){h.push(new x(0,G,g,(X?O:O+n)+l));for(U=0;U<K&&r!==K;U++){P=c[r-K+U];var pa=Cm(P,P.kc,P.bf,
Z);P.moveTo(P.position.x,P.position.y+n-pa.y)}O+=l;G=X?G+O:G+(O+n);K=O=n=0;U=A;X=!1}n=Math.max(n,v.y);O=Math.max(O,u.height-v.y);isFinite(N)&&(O=Math.max(O,Math.max(u.height,N)-v.y));X?s.moveTo(U-v.x,G-v.y):s.moveTo(U-v.x,G);switch(D){case kl:U-=v.x+k;break;default:U+=u.width-v.x+k}K++}h.push(new x(0,G,g,(X?O:O+n)+l));for(U=0;U<K&&r!==K;U++)P=c[r-K+U],pa=Cm(P,P.kc,P.bf,p),P.moveTo(P.position.x,P.position.y+n-pa.y);t.B(p);t.B(Z)}this.commitLayers(h,new w(-a/2,-d/2));null!==b&&b.Ce("Layout");this.$e=
!0}};ck.prototype.commitLayers=function(){};t.g(ck,"wrappingWidth",ck.prototype.qB);t.defineProperty(ck,{qB:"wrappingWidth"},function(){return this.Is},function(a){this.Is!==a&&(t.i(a,"number",ck,"wrappingWidth"),0<a||isNaN(a))&&(this.Is=a,this.st=isNaN(a),this.J())});t.g(ck,"wrappingColumn",ck.prototype.ZG);t.defineProperty(ck,{ZG:"wrappingColumn"},function(){return this.Hs},function(a){this.Hs!==a&&(t.i(a,"number",ck,"wrappingColumn"),0<a||isNaN(a))&&(this.Hs=a,this.J())});t.g(ck,"cellSize",ck.prototype.al);
t.defineProperty(ck,{al:"cellSize"},function(){return this.pj},function(a){t.l(a,fa,ck,"cellSize");this.pj.M(a)||(this.pj.assign(a),this.J())});t.g(ck,"spacing",ck.prototype.spacing);t.defineProperty(ck,{spacing:"spacing"},function(){return this.Nh},function(a){t.l(a,fa,ck,"spacing");this.Nh.M(a)||(this.Nh.assign(a),this.J())});t.g(ck,"alignment",ck.prototype.alignment);
t.defineProperty(ck,{alignment:"alignment"},function(){return this.ue},function(a){this.ue!==a&&(t.Aa(a,ck,ck,"alignment"),a===ll||a===ml)&&(this.ue=a,this.J())});t.g(ck,"arrangement",ck.prototype.Qe);t.defineProperty(ck,{Qe:"arrangement"},function(){return this.cd},function(a){this.cd!==a&&(t.Aa(a,ck,ck,"arrangement"),a===jl||a===kl)&&(this.cd=a,this.J())});t.g(ck,"sorting",ck.prototype.sorting);
t.defineProperty(ck,{sorting:"sorting"},function(){return this.Mh},function(a){this.Mh!==a&&(t.Aa(a,ck,ck,"sorting"),a===hl||a===il||a===fl||a===gl)&&(this.Mh=a,this.J())});t.g(ck,"comparer",ck.prototype.comparer);t.defineProperty(ck,{comparer:"comparer"},function(){return this.th},function(a){this.th!==a&&(t.i(a,"function",ck,"comparer"),this.th=a,this.J())});var Vn;
ck.standardComparer=Vn=function(a,b){e&&t.l(a,C,ck,"standardComparer:a");e&&t.l(b,C,ck,"standardComparer:b");var c=a.text,d=b.text;return c<d?-1:c>d?1:0};
ck.smartComparer=function(a,b){e&&t.l(a,C,ck,"standardComparer:a");e&&t.l(b,C,ck,"standardComparer:b");if(null!==a){if(null!==b){var c=a.text.toLocaleLowerCase().split(/([+\-]?[\.]?\d+(?:\.\d*)?(?:e[+\-]?\d+)?)/),d=b.text.toLocaleLowerCase().split(/([+\-]?[\.]?\d+(?:\.\d*)?(?:e[+\-]?\d+)?)/),f;for(f=0;f<c.length;f++)if(""!==d[f]&&void 0!==d[f]){var g=parseFloat(c[f]),h=parseFloat(d[f]);if(isNaN(g)){if(!isNaN(h))return 1;if(0!==c[f].localeCompare(d[f]))return c[f].localeCompare(d[f])}else{if(isNaN(h))return-1;
if(0!==g-h)return g-h}}else if(""!==c[f])return 1;return""!==d[f]&&void 0!==d[f]?-1:0}return 1}return null!==b?-1:0};var ml;ck.Position=ml=t.w(ck,"Position",0);var ll;ck.Location=ll=t.w(ck,"Location",1);var jl;ck.LeftToRight=jl=t.w(ck,"LeftToRight",2);var kl;ck.RightToLeft=kl=t.w(ck,"RightToLeft",3);var hl;ck.Forward=hl=t.w(ck,"Forward",4);var il;ck.Reverse=il=t.w(ck,"Reverse",5);var fl;ck.Ascending=fl=t.w(ck,"Ascending",6);var gl;ck.Descending=gl=t.w(ck,"Descending",7);
function nl(){0<arguments.length&&t.ad(nl);be.call(this);this.Ny=this.Nn=this.Ad=0;this.Jq=360;this.My=El;this.Bk=0;this.eC=El;this.uu=this.tg=this.wD=0;this.Xv=new Wn;this.xu=this.mm=0;this.sH=600;this.Rr=NaN;this.pq=1;this.ss=0;this.us=360;this.cd=El;this.sa=vl;this.Mh=sl;this.th=Un;this.Nh=6;this.Ir=Hl}t.ga("CircularLayout",nl);t.Ka(nl,be);
nl.prototype.cloneProtected=function(a){be.prototype.cloneProtected.call(this,a);a.Rr=this.Rr;a.pq=this.pq;a.ss=this.ss;a.us=this.us;a.cd=this.cd;a.sa=this.sa;a.Mh=this.Mh;a.th=this.th;a.Nh=this.Nh;a.Ir=this.Ir};nl.prototype.createNetwork=function(){var a=new Xn;On(a,this);return a};
nl.prototype.doLayout=function(a){a||t.m("Layout.doLayout(collection) argument must not be null but a Diagram, a Group, or an Iterable of Parts");null===this.network&&(this.network=this.makeNetwork(a));a=this.network.vertexes;if(1>=a.count)1===a.count&&(a=a.$a(),a.Da=0,a.Oa=0);else{var b=new B(Yn);b.Oe(a.k);a=new B(Yn);var c=new B(Yn),b=this.sort(b);a=new B(Yn);var c=new B(Yn),d=this.My,f=this.eC,g=this.Ad,h=this.Nn,k=this.Ny,l=this.Jq,m=this.Bk,n=this.wD,p=this.tg,q=this.uu,d=this.Qe,f=this.Bt,g=
this.KF;if(!isFinite(g)||0>=g)g=NaN;h=this.ND;if(!isFinite(h)||0>=h)h=1;k=this.mh;isFinite(k)||(k=0);l=this.gi;if(!isFinite(l)||360<l||1>l)l=360;m=this.spacing;isFinite(m)||(m=NaN);d===Fl&&f===Gl?d=El:d===Fl&&f!==Gl&&(f=Gl,d=this.Qe);if((this.direction===tl||this.direction===ul)&&this.sorting!==sl){for(var r=0;!(r>=b.length);r+=2){a.add(b.wa(r));if(r+1>=b.length)break;c.add(b.wa(r+1))}this.direction===tl?(this.Qe===Fl&&a.reverse(),b=new B(Yn),b.Oe(a),b.Oe(c)):(this.Qe===Fl&&c.reverse(),b=new B(Yn),
b.Oe(c),b.Oe(a))}for(var s=b.length,u=n=0,r=0;r<b.length;r++){var p=k+l*u*(this.direction===vl?1:-1)/s,v=b.wa(r).diameter;isNaN(v)&&(v=Zn(b.wa(r),p));360>l&&(0===r||r===b.length-1)&&(v/=2);n+=v;u++}if(isNaN(g)||d===Fl){isNaN(m)&&(m=6);if(d!==El&&d!==Fl){v=-Infinity;for(r=0;r<s;r++){var q=b.wa(r),D=b.wa(r===s-1?0:r+1);isNaN(q.diameter)&&Zn(q,0);isNaN(D.diameter)&&Zn(D,0);v=Math.max(v,(q.diameter+D.diameter)/2)}q=v+m;d===xl?(p=2*Math.PI/s,g=(v+m)/p):g=$n(this,q*(360<=l?s:s-1),h,k*Math.PI/180,l*Math.PI/
180)}else g=$n(this,n+(360<=l?s:s-1)*(d!==Fl?m:1.6*m),h,k*Math.PI/180,l*Math.PI/180);p=g*h}else if(p=g*h,u=ao(this,g,p,k*Math.PI/180,l*Math.PI/180),isNaN(m)){if(d===El||d===Fl)m=(u-n)/(360<=l?s:s-1)}else if(d===El||d===Fl)r=(u-n)/(360<=l?s:s-1),r<m?(g=$n(this,n+m*(360<=l?s:s-1),h,k*Math.PI/180,l*Math.PI/180),p=g*h):m=r;else{v=-Infinity;for(r=0;r<s;r++)q=b.wa(r),D=b.wa(r===s-1?0:r+1),isNaN(q.diameter)&&Zn(q,0),isNaN(D.diameter)&&Zn(D,0),v=Math.max(v,(q.diameter+D.diameter)/2);q=v+m;r=$n(this,q*(360<=
l?s:s-1),h,k*Math.PI/180,l*Math.PI/180);r>g?(g=r,p=g*h):q=u/(360<=l?s:s-1)}this.My=d;this.eC=f;this.Ad=g;this.Nn=h;this.Ny=k;this.Jq=l;this.Bk=m;this.wD=n;this.tg=p;this.uu=q;c=[b,a,c];b=c[0];a=c[1];c=c[2];d=this.My;f=this.Ad;h=this.Ny;k=this.Jq;l=this.Bk;m=this.tg;n=this.uu;if(this.direction!==tl&&this.direction!==ul||d!==Fl)if(this.direction===tl||this.direction===ul){g=0;switch(d){case Dl:g=180*bo(this,f,m,h,n)/Math.PI;break;case El:n=b=0;g=a.$a();null!==g&&(b=Zn(g,Math.PI/2));g=c.$a();null!==
g&&(n=Zn(g,Math.PI/2));g=180*bo(this,f,m,h,l+(b+n)/2)/Math.PI;break;case xl:g=k/b.length}if(this.direction===tl){switch(d){case Dl:co(this,a,h,wl);break;case El:eo(this,a,h,wl);break;case xl:fo(this,a,k/2,h,wl)}switch(d){case Dl:co(this,c,h+g,vl);break;case El:eo(this,c,h+g,vl);break;case xl:fo(this,c,k/2,h+g,vl)}}else{switch(d){case Dl:co(this,c,h,wl);break;case El:eo(this,c,h,wl);break;case xl:fo(this,c,k/2,h,wl)}switch(d){case Dl:co(this,a,h+g,vl);break;case El:eo(this,a,h+g,vl);break;case xl:fo(this,
a,k/2,h+g,vl)}}}else switch(d){case Dl:co(this,b,h,this.direction);break;case El:eo(this,b,h,this.direction);break;case xl:fo(this,b,k,h,this.direction);break;case Fl:ho(this,b,k,h,this.direction)}else ho(this,b,k,h-k/2,vl)}this.updateParts();this.network=null;this.$e=!0};
function fo(a,b,c,d,f){var g=a.Jq,h=a.Ad;a=a.tg;d=d*Math.PI/180;c=c*Math.PI/180;for(var k=b.length,l=0;l<k;l++){var m=d+(f===vl?l*c/(360<=g?k:k-1):-(l*c)/k),n=b.wa(l),p=h*Math.tan(m)/a,p=Math.sqrt((h*h+a*a*p*p)/(1+p*p));n.Da=p*Math.cos(m);n.Oa=p*Math.sin(m);n.actualAngle=180*m/Math.PI}}
function eo(a,b,c,d){var f=a.Ad,g=a.tg,h=a.Bk;c=c*Math.PI/180;for(var k=b.length,l=0;l<k;l++){var m=b.wa(l),n=b.wa(l===k-1?0:l+1),p=g*Math.sin(c);m.Da=f*Math.cos(c);m.Oa=p;m.actualAngle=180*c/Math.PI;isNaN(m.diameter)&&Zn(m,0);isNaN(n.diameter)&&Zn(n,0);m=bo(a,f,g,d===vl?c:-c,(m.diameter+n.diameter)/2+h);c+=d===vl?m:-m}}
function co(a,b,c,d){var f=a.Ad,g=a.tg,h=a.uu;c=c*Math.PI/180;for(var k=b.length,l=0;l<k;l++){var m=b.wa(l);m.Da=f*Math.cos(c);m.Oa=g*Math.sin(c);m.actualAngle=180*c/Math.PI;m=bo(a,f,g,d===vl?c:-c,h);c+=d===vl?m:-m}}function ho(a,b,c,d,f){var g=a.xu,g=a.Jq;a.mm=0;a.Xv=new Wn;if(360>c){for(g=d+(f===vl?g:-g);0>g;)g+=360;g%=360;180<g&&(g-=360);g*=Math.PI/180;a.xu=g;io(a,b,c,d,f)}else jo(a,b,c,d,f);a.Xv.commit(b)}
function jo(a,b,c,d,f){var g=a.Ad,h=a.Bk,k=a.Nn,l=g*Math.cos(d*Math.PI/180),m=a.tg*Math.sin(d*Math.PI/180),n=b.Ie();if(3===n.length)n[0].Da=g,n[0].Oa=0,n[1].Da=n[0].Da-n[0].width/2-n[1].width/2-h,n[1].y=n[0].y,n[2].Da=(n[0].Da+n[1].Da)/2,n[2].y=n[0].y-n[2].height-h;else if(4===n.length)n[0].Da=g,n[0].Oa=0,n[2].Da=-n[0].Da,n[2].Oa=n[0].Oa,n[1].Da=0,n[1].y=Math.min(n[0].y,n[2].y)-n[1].height-h,n[3].Da=0,n[3].y=Math.max(n[0].y+n[0].height+h,n[2].y+n[2].height+h);else{for(g=0;g<n.length;g++){n[g].Da=
l;n[g].Oa=m;if(g>=n.length-1)break;var p=lo(a,l,m,n,g,f);p[0]||(p=mo(a,l,m,n,g,f));l=p[1];m=p[2]}a.mm++;if(!(23<a.mm)){var l=n[0].Da,m=n[0].Oa,g=n[n.length-1].Da,p=n[n.length-1].Oa,q=Math.abs(l-g)-((n[0].width+n[n.length-1].width)/2+h),r=Math.abs(m-p)-((n[0].height+n[n.length-1].height)/2+h),h=0;1>Math.abs(r)?Math.abs(l-g)<(n[0].width+n[n.length-1].width)/2&&(h=0):h=0<r?r:1>Math.abs(q)?0:q;q=!1;q=Math.abs(g)>Math.abs(p)?0<g!==m>p:0<p!==l<g;if(q=f===vl?q:!q)h=-Math.abs(h),h=Math.min(h,-n[n.length-
1].width),h=Math.min(h,-n[n.length-1].height);l=a.Xv;if(0<h&&0>l.jp||Math.abs(h)<Math.abs(l.jp)&&!(0>h&&0<l.jp))for(l.jp=h,l.qn=[],l.$p=[],m=0;m<n.length;m++)l.qn[m]=n[m].Pb.x,l.$p[m]=n[m].Pb.y;1<Math.abs(h)&&(a.Ad=8>a.mm?a.Ad-h/(2*Math.PI):5>n.length&&10<h?a.Ad/2:a.Ad-(0<h?1.7:-2.3),a.tg=a.Ad*k,jo(a,b,c,d,f))}}}
function io(a,b,c,d,f){for(var g=a.Ad,h=a.tg,k=a.Nn,l=g*Math.cos(d*Math.PI/180),m=h*Math.sin(d*Math.PI/180),n=b.Ie(),p=0;p<n.length;p++){n[p].Da=l;n[p].Oa=m;if(p>=n.length-1)break;var q=lo(a,l,m,n,p,f);q[0]||(q=mo(a,l,m,n,p,f));l=q[1];m=q[2]}a.mm++;if(!(23<a.mm)){l=Math.atan2(m,l);l=f===vl?a.xu-l:l-a.xu;l=Math.abs(l)<Math.abs(l-2*Math.PI)?l:l-2*Math.PI;g=l*(g+h)/2;h=a.Xv;if(Math.abs(g)<Math.abs(h.jp))for(h.jp=g,h.qn=[],h.$p=[],l=0;l<n.length;l++)h.qn[l]=n[l].Pb.x,h.$p[l]=n[l].Pb.y;1<Math.abs(g)&&
(a.Ad=8>a.mm?a.Ad-g/(2*Math.PI):a.Ad-(0<g?1.7:-2.3),a.tg=a.Ad*k,io(a,b,c,d,f))}}function lo(a,b,c,d,f,g){var h=a.Ad,k=a.tg,l=0,m=0;a=(d[f].width+d[f+1].width)/2+a.Bk;var n=!1;if(0<=c!==(g===vl)){if(l=b+a,l>h){l=b-a;if(l<-h)return b=[!1],b[1]=l,b[2]=m,b;n=!0}}else if(l=b-a,l<-h){l=b+a;if(l>h)return b=[!1],b[1]=l,b[2]=m,b;n=!0}m=Math.sqrt(1-Math.min(1,l*l/(h*h)))*k;0>c!==n&&(m=-m);b=Math.abs(c-m)>(d[f].height+d[f+1].height)/2?[!1]:[!0];b[1]=l;b[2]=m;return b}
function mo(a,b,c,d,f,g){var h=a.Ad,k=a.tg,l=0,m=0;a=(d[f].height+d[f+1].height)/2+a.Bk;var n=!1;if(0<=b!==(g===vl)){if(m=c-a,m<-k){m=c+a;if(m>k)return b=[!1],b[1]=l,b[2]=m,b;n=!0}}else if(m=c+a,m>k){m=c-a;if(m<-k)return b=[!1],b[1]=l,b[2]=m,b;n=!0}l=Math.sqrt(1-Math.min(1,m*m/(k*k)))*h;0>b!==n&&(l=-l);b=Math.abs(b-l)>(d[f].width+d[f+1].width)/2?[!1]:[!0];b[1]=l;b[2]=m;return b}function Wn(){this.jp=-Infinity;this.$p=this.qn=null}
Wn.prototype.commit=function(a){if(null!==this.qn&&null!==this.$p)for(var b=0;b<this.qn.length;b++){var c=a.wa(b);c.x=this.qn[b];c.y=this.$p[b]}};nl.prototype.commitLayout=function(){this.commitNodes();this.rt&&this.commitLinks()};nl.prototype.commitNodes=function(){for(var a=this.AH,b=this.network.vertexes.k,c;b.next();)c=b.value,c.x+=a.x,c.y+=a.y,c.commit()};nl.prototype.commitLinks=function(){for(var a=this.network.edges.k;a.next();)a.value.commit()};
function ao(a,b,c,d,f){var g=a.sH;if(0.001>Math.abs(a.Nn-1))return void 0!==d&&void 0!==f?f*b:2*Math.PI*b;a=b>c?Math.sqrt(b*b-c*c)/b:Math.sqrt(c*c-b*b)/c;var h=0,k;k=void 0!==d&&void 0!==f?f/(g+1):Math.PI/(2*(g+1));for(var l=0;l<=g;l++)var m=Math.sin(void 0!==d&&void 0!==f?d+l*f/g:l*Math.PI/(2*g)),h=h+Math.sqrt(1-a*a*m*m)*k;return void 0!==d&&void 0!==f?(b>c?b:c)*h:4*(b>c?b:c)*h}function $n(a,b,c,d,f){a=void 0!==d&&void 0!==f?ao(a,1,c,d,f):ao(a,1,c);return b/a}
function bo(a,b,c,d,f){if(0.001>Math.abs(a.Nn-1))return f/b;var g=b>c?Math.sqrt(b*b-c*c)/b:Math.sqrt(c*c-b*b)/c,h=0;a=2*Math.PI/(700*a.network.vertexes.count);b>c&&(d+=Math.PI/2);for(var k=0;;k++){var l=Math.sin(d+k*a),h=h+(b>c?b:c)*Math.sqrt(1-g*g*l*l)*a;if(h>=f)return k*a}return 0}
nl.prototype.sort=function(a){switch(this.sorting){case ql:break;case rl:a.reverse();break;case ol:a.sort(this.comparer);break;case pl:a.sort(this.comparer);a.reverse();break;case sl:for(var b=[],c=0;c<a.length;c++)b.push(0);for(var d=new B(Yn),c=0;c<a.length;c++){var f=-1,g=-1;if(0===c)for(var h=0;h<a.length;h++){var k=a.wa(h).DI;k>f&&(f=k,g=h)}else for(h=0;h<a.length;h++)k=b[h],k>f&&(f=k,g=h);d.add(a.wa(g));b[g]=-1;g=a.wa(g);f=g.tc;for(g=g.gc;f.next();)h=f.value,h=h.fromVertex,h=a.indexOf(h),0>
h||0<=b[h]&&b[h]++;for(;g.next();)h=g.value,h=h.toVertex,h=a.indexOf(h),0>h||0<=b[h]&&b[h]++}a=[];for(b=0;b<d.length;b++){k=d.wa(b);a[b]=[];for(var c=k.gc,f=k.tc,l,m;c.next();)l=c.value,m=d.indexOf(l.toVertex),m!==b&&0>a[b].indexOf(m)&&a[b].push(m);for(;f.next();)l=f.value,m=d.indexOf(l.fromVertex),m!==b&&0>a[b].indexOf(m)&&a[b].push(m)}k=[];for(b=0;b<a.length;b++)k[b]=0;for(var c=[],n=[],p=[],f=[],g=new B(Yn),h=b=0;b<a.length;b++){var q=a[b].length;if(1===q)f.push(b);else if(0===q)g.add(d.wa(b));
else{if(0===h)c.push(b);else{for(var r=Infinity,s=Infinity,u=-1,v=[],q=0;q<c.length;q++)0>a[c[q]].indexOf(c[q===c.length-1?0:q+1])&&v.push(q===c.length-1?0:q+1);if(0===v.length)for(q=0;q<c.length;q++)v.push(q);for(q=0;q<v.length;q++){var D=v[q],A;m=a[b];l=n;A=p;for(var G=k,K=D,N=c,O=0,U=0;U<l.length;U++){var X=G[l[U]],Z=G[A[U]],P=0,pa=0;X<Z?(P=X,pa=Z):(P=Z,pa=X);if(P<K&&K<=pa)for(X=0;X<m.length;X++)Z=m[X],0>N.indexOf(Z)||P<G[Z]&&G[Z]<pa||P===G[Z]||pa===G[Z]||O++;else for(X=0;X<m.length;X++)Z=m[X],
0>N.indexOf(Z)||P<G[Z]&&G[Z]<pa&&P!==G[Z]&&pa!==G[Z]&&O++}A=O;for(l=G=0;l<a[b].length;l++)m=c.indexOf(a[b][l]),0<=m&&(m=Math.abs(D-(m>=D?m+1:m)),G+=m<c.length+1-m?m:c.length+1-m);for(l=0;l<n.length;l++)m=k[n[l]],K=k[p[l]],m>=D&&m++,K>=D&&K++,m>K&&(N=K,K=m,m=N),K-m<(c.length+2)/2===(m<D&&D<=K)&&G++;if(A<r||A===r&&G<s)r=A,s=G,u=D}c.splice(u,0,b);for(q=0;q<c.length;q++)k[c[q]]=q;for(q=0;q<a[b].length;q++)r=a[b][q],0<=c.indexOf(r)&&(n.push(b),p.push(r))}h++}}n=!1;for(p=c.length;;){n=!0;for(k=0;k<f.length;k++)if(b=
f[k],q=a[b][0],m=c.indexOf(q),0<=m){for(h=s=0;h<a[q].length;h++)r=a[q][h],r=c.indexOf(r),0>r||r===m||(u=r>m?r-m:m-r,s+=r<m!==u>p-u?1:-1);c.splice(0>s?m:m+1,0,b);f.splice(k,1);k--}else n=!1;if(n)break;else c.push(f[0]),f.splice(0,1)}for(b=0;b<c.length;b++)m=c[b],g.add(d.wa(m));return g;default:t.m("Invalid sorting type.")}return a};t.g(nl,"radius",nl.prototype.KF);
t.defineProperty(nl,{KF:"radius"},function(){return this.Rr},function(a){this.Rr!==a&&(t.i(a,"number",nl,"radius"),0<a||isNaN(a))&&(this.Rr=a,this.J())});t.g(nl,"aspectRatio",nl.prototype.ND);t.defineProperty(nl,{ND:"aspectRatio"},function(){return this.pq},function(a){this.pq!==a&&(t.i(a,"number",nl,"aspectRatio"),0<a&&(this.pq=a,this.J()))});t.g(nl,"startAngle",nl.prototype.mh);
t.defineProperty(nl,{mh:"startAngle"},function(){return this.ss},function(a){this.ss!==a&&(t.i(a,"number",nl,"startAngle"),this.ss=a,this.J())});t.g(nl,"sweepAngle",nl.prototype.gi);t.defineProperty(nl,{gi:"sweepAngle"},function(){return this.us},function(a){this.us!==a&&(t.i(a,"number",nl,"sweepAngle"),this.us=0<a&&360>=a?a:360,this.J())});t.g(nl,"arrangement",nl.prototype.Qe);
t.defineProperty(nl,{Qe:"arrangement"},function(){return this.cd},function(a){this.cd!==a&&(t.Aa(a,nl,nl,"arrangement"),a===Fl||a===El||a===Dl||a===xl)&&(this.cd=a,this.J())});t.g(nl,"direction",nl.prototype.direction);t.defineProperty(nl,{direction:"direction"},function(){return this.sa},function(a){this.sa!==a&&(t.Aa(a,nl,nl,"direction"),a===vl||a===wl||a===tl||a===ul)&&(this.sa=a,this.J())});t.g(nl,"sorting",nl.prototype.sorting);
t.defineProperty(nl,{sorting:"sorting"},function(){return this.Mh},function(a){this.Mh!==a&&(t.Aa(a,nl,nl,"sorting"),a===ql||a===rl||a===ol||pl||a===sl)&&(this.Mh=a,this.J())});t.g(nl,"comparer",nl.prototype.comparer);t.defineProperty(nl,{comparer:"comparer"},function(){return this.th},function(a){this.th!==a&&(t.i(a,"function",nl,"comparer"),this.th=a,this.J())});t.g(nl,"spacing",nl.prototype.spacing);
t.defineProperty(nl,{spacing:"spacing"},function(){return this.Nh},function(a){this.Nh!==a&&(t.i(a,"number",nl,"spacing"),this.Nh=a,this.J())});t.g(nl,"nodeDiameterFormula",nl.prototype.Bt);t.defineProperty(nl,{Bt:"nodeDiameterFormula"},function(){return this.Ir},function(a){this.Ir!==a&&(t.Aa(a,nl,nl,"nodeDiameterFormula"),a===Hl||a===Gl)&&(this.Ir=a,this.J())});t.A(nl,{BH:"actualXRadius"},function(){return this.Ad});t.A(nl,{CH:"actualYRadius"},function(){return this.tg});
t.A(nl,{eK:"actualSpacing"},function(){return this.Bk});t.A(nl,{AH:"actualCenter"},function(){return isNaN(this.Fd.x)||isNaN(this.Fd.y)?new w(0,0):new w(this.Fd.x+this.BH,this.Fd.y+this.CH)});var El;nl.ConstantSpacing=El=t.w(nl,"ConstantSpacing",0);var Dl;nl.ConstantDistance=Dl=t.w(nl,"ConstantDistance",1);var xl;nl.ConstantAngle=xl=t.w(nl,"ConstantAngle",2);var Fl;nl.Packed=Fl=t.w(nl,"Packed",3);var vl;nl.Clockwise=vl=t.w(nl,"Clockwise",4);var wl;
nl.Counterclockwise=wl=t.w(nl,"Counterclockwise",5);var tl;nl.BidirectionalLeft=tl=t.w(nl,"BidirectionalLeft",6);var ul;nl.BidirectionalRight=ul=t.w(nl,"BidirectionalRight",7);var ql;nl.Forwards=ql=t.w(nl,"Forwards",8);var rl;nl.Reverse=rl=t.w(nl,"Reverse",9);var ol;nl.Ascending=ol=t.w(nl,"Ascending",10);var pl;nl.Descending=pl=t.w(nl,"Descending",11);var sl;nl.Optimized=sl=t.w(nl,"Optimized",12);var Hl;nl.Pythagorean=Hl=t.w(nl,"Pythagorean",13);var Gl;nl.Circular=Gl=t.w(nl,"Circular",14);
function Xn(){ta.call(this)}t.ga("CircularNetwork",Xn);t.Ka(Xn,ta);Xn.prototype.createVertex=function(){return new Yn};Xn.prototype.createEdge=function(){return new no};function Yn(){ua.call(this);this.actualAngle=this.diameter=NaN}t.ga("CircularVertex",Yn);t.Ka(Yn,ua);
function Zn(a,b){var c=a.network;if(null===c)return NaN;c=c.jc;if(null===c)return NaN;if(c.Qe===Fl)if(c.Bt===Gl)a.diameter=Math.max(a.width,a.height);else{var c=Math.abs(Math.sin(b)),d=Math.abs(Math.cos(b));if(0===c)return a.width;if(0===d)return a.height;a.diameter=Math.min(a.height/c,a.width/d)}else a.diameter=c.Bt===Gl?Math.max(a.width,a.height):Math.sqrt(a.width*a.width+a.height*a.height);return a.diameter}function no(){va.call(this)}t.ga("CircularEdge",no);t.Ka(no,va);
function oo(){0<arguments.length&&t.ad(oo);be.call(this);this.sg=null;this.ir=0;this.bg=(new fa(100,100)).freeze();this.oq=!1;this.Lh=!0;this.sh=!1;this.oo=100;this.Lq=1;this.Fh=1E3;this.In=0.05;this.Hn=50;this.En=150;this.Gn=0;this.Fq=10;this.Eq=5}t.ga("ForceDirectedLayout",oo);t.Ka(oo,be);
oo.prototype.cloneProtected=function(a){be.prototype.cloneProtected.call(this,a);a.bg.assign(this.bg);a.oq=this.oq;a.Lh=this.Lh;a.sh=this.sh;a.oo=this.oo;a.Lq=this.Lq;a.Fh=this.Fh;a.In=this.In;a.Hn=this.Hn;a.En=this.En;a.Gn=this.Gn;a.Fq=this.Fq;a.Eq=this.Eq};oo.prototype.createNetwork=function(){var a=new po;On(a,this);return a};
oo.prototype.doLayout=function(a){a||t.m("Layout.doLayout(collection) argument must not be null but a Diagram, a Group, or an Iterable of Parts");null===this.network&&(this.network=this.makeNetwork(a));a=this.ex;if(0<this.network.vertexes.count){this.network.xw();for(var b=this.network.vertexes.k;b.next();){var c=b.value;c.charge=this.electricalCharge(c);c.mass=this.gravitationalMass(c)}for(b=this.network.edges.k;b.next();)c=b.value,c.stiffness=this.springStiffness(c),c.length=this.springLength(c);
this.Mz();this.ir=0;if(this.needsClusterLayout()){for(var b=this.network,d=b.VJ().k;d.next();){var f=d.value;this.network=f;for(c=this.network.vertexes.k;c.next();){for(var f=c.value,g=0,h=f.vertexes;h.next();)g++;f.Xf=g;f.gk=1;f.Jm=null;f.kh=null}qo(this,0,a)}this.network=b;d.reset();e&&t.l(b,po,oo,"arrangeConnectedGraphs:singletons");for(var c=this.fw,k=d.count,l=!0,g=f=0,h=t.Db(),m=0;m<k+b.vertexes.count+2;m++)h[m]=null;k=0;d.reset();for(m=t.Gf();d.next();){var n=d.value;this.qf(n,m);if(l)l=!1,
f=m.x+m.width/2,g=m.y+m.height/2,h[0]=new w(m.x+m.width+c.width,m.y),h[1]=new w(m.x,m.y+m.height+c.height),k=2;else{var p=ro(h,k,f,g,m.width,m.height,c),q=h[p],r=new w(q.x+m.width+c.width,q.y),s=new w(q.x,q.y+m.height+c.height);p+1<k&&h.splice(p+1,0,null);h[p]=r;h[p+1]=s;k++;p=q.x-m.x;q=q.y-m.y;for(n=n.vertexes.k;n.next();){var u=n.value;u.Da+=p;u.Oa+=q}}}t.hc(m);for(n=b.vertexes.k;n.next();)u=n.value,l=u.T,2>k?(f=l.x+l.width/2,g=l.y+l.height/2,h[0]=new w(l.x+l.width+c.width,l.y),h[1]=new w(l.x,l.y+
l.height+c.height),k=2):(p=ro(h,k,f,g,l.width,l.height,c),q=h[p],r=new w(q.x+l.width+c.width,q.y),s=new w(q.x,q.y+l.height+c.height),p+1<k&&h.splice(p+1,0,null),h[p]=r,h[p+1]=s,k++,u.Da=q.x+u.width/2,u.Oa=q.y+u.height/2);t.ya(h);for(d.reset();d.next();){f=d.value;for(g=f.vertexes.k;g.next();)c=g.value,b.Yk(c);for(f=f.edges.k;f.next();)c=f.value,b.Jo(c)}}so(this,a);this.updateParts()}this.oo=a;this.network=null;this.$e=!0};
oo.prototype.needsClusterLayout=function(){if(3>this.network.vertexes.count)return!1;var a=0,b=0,c=this.network.vertexes.k;c.next();for(var d=c.value.T;c.next();){if(c.value.T.Tf(d)&&(a++,1<a))return!0;if(10<b)break;b++}return!1};oo.prototype.qf=function(a,b){for(var c=!0,d=a.vertexes.k;d.next();){var f=d.value;c?(c=!1,b.set(f.T)):b.ii(f.T)}return b};
function to(a,b,c){e&&(t.q(b,oo,"computeClusterLayoutIterations:level"),t.q(c,oo,"computeClusterLayoutIterations:maxiter"));return Math.max(Math.min(a.network.vertexes.count,c*(b+1)/11),10)}
function qo(a,b,c){e&&(t.q(b,oo,"layoutClusters:level"),t.q(c,oo,"layoutClusters:maxiter"));if(uo(a,b)){var d=a.Fh;a.Fh*=1+1/(b+1);var f=vo(a,b),g=Math.max(0,to(a,b,c));a.ex+=g;qo(a,b+1,c);so(a,g);wo(a,f,b);c=a.sg;null===c?c=new B(xo):c.clear();c.Oe(f.vertexes);c.sort(function(a,b){return null===a||null===b||a===b?0:b.Xf-a.Xf});for(f=c.k;f.next();)yo(a,f.value,b);a.Fh=d}}
function uo(a,b){e&&t.q(b,oo,"hasClusters:level");if(10<b||3>a.network.vertexes.count)return!1;null===a.sg?a.sg=new B(xo):a.sg.clear();a.sg.Oe(a.network.vertexes);var c=a.sg;c.sort(function(a,b){return null===a||null===b||a===b?0:b.Xf-a.Xf});for(var d=c.count-1;0<=d&&1>=c.n[d].Xf;)d--;return 1<c.count-d}
function vo(a,b){e&&t.q(b,oo,"pushSubNetwork:level");for(var c=a.network,d=new po,f=a.sg.k;f.next();){var g=f.value;if(1<g.Xf){d.Yk(g);var h={vB:g.Xf,xB:g.width,uB:g.height,$G:g.O.x,aH:g.O.y};null===g.kh&&(g.kh=new B);g.kh.add(h);g.XA=g.kh.count-1}else break}for(var k=c.edges.k;k.next();){var l=k.value;if(l.fromVertex.network===d&&l.toVertex.network===d)d.Jo(l);else if(l.fromVertex.network===d){var m=l.fromVertex.Jm;null===m&&(m=new B(xo),l.fromVertex.Jm=m);m.add(l.toVertex);l.fromVertex.Xf--;l.fromVertex.gk+=
l.toVertex.gk}else l.toVertex.network===d&&(m=l.toVertex.Jm,null===m&&(m=new B(xo),l.toVertex.Jm=m),m.add(l.fromVertex),l.toVertex.Xf--,l.toVertex.gk+=l.fromVertex.gk)}for(k=d.edges.k;k.next();)l=k.value,l.length*=Math.max(1,F.sqrt((l.fromVertex.gk+l.toVertex.gk)/(4*b+1)));for(f=d.vertexes.k;f.next();)if(g=f.value,m=g.Jm,null!==m&&0<m.count&&(h=g.kh.n[g.kh.count-1],h=h.vB-g.Xf,!(0>=h))){for(var n=0,p=0,q=m.count-h;q<m.count;q++){for(var r=m.n[q],l=null,k=r.edges.k;k.next();){var s=k.value;if(s.II(r)===
g){l=s;break}}null!==l&&(p+=l.length,n+=r.width*r.height)}m=g.Da;k=g.Oa;l=g.width;q=g.height;r=g.O;s=l*q;1>s&&(s=1);n=F.sqrt((n+s+p*p*4/(h*h))/s);h=(n-1)*l/2;n=(n-1)*q/2;g.Pb=new x(m-r.x-h,k-r.y-n,l+2*h,q+2*n);g.focus=new w(r.x+h,r.y+n)}a.network=d;return c}
function wo(a,b,c){e&&(t.l(b,po,oo,"popNetwork:oldnet"),t.q(c,oo,"popNetwork:level"));for(c=a.network.vertexes.k;c.next();){var d=c.value;d.network=b;if(null!==d.kh){var f=d.kh.n[d.XA];d.Xf=f.vB;var g=f.$G,h=f.aH;d.Pb=new x(d.Da-g,d.Oa-h,f.xB,f.uB);d.focus=new w(g,h);d.XA--}}for(c=a.network.edges.k;c.next();)c.value.network=b;a.network=b}
function yo(a,b,c){e&&(t.l(b,xo,oo,"surroundNode:oldnet"),t.q(c,oo,"surroundNode:level"));var d=b.Jm;if(null!==d&&0!==d.count){c=b.Da;var f=b.Oa,g=b.width,h=b.height;null!==b.kh&&0<b.kh.count&&(h=b.kh.n[0],g=h.xB,h=h.uB);for(var g=F.sqrt(g*g+h*h)/2,k=!1,l=h=0,m=0,n=b.vertexes.k;n.next();){var p=n.value;1>=p.Xf?l++:(k=!0,m++,h+=Math.atan2(b.Oa-p.Oa,b.Da-p.Da))}if(0!==l)for(0<m&&(h/=m),m=b=0,b=k?2*Math.PI/(l+1):2*Math.PI/l,0===l%2&&(m=b/2),1<d.count&&d.sort(function(a,b){return null===a||null===b||
a===b?0:b.width*b.height-a.width*a.height}),k=0===l%2?0:1,n=d.k;n.next();)if(p=n.value,!(1<p.Xf||a.isFixed(p))){d=null;for(l=p.edges.k;l.next();){d=l.value;break}var l=p.width,q=p.height,l=F.sqrt(l*l+q*q)/2,d=g+d.length+l,l=h+(b*(k/2>>1)+m)*(0===k%2?1:-1);p.Da=c+d*Math.cos(l);p.Oa=f+d*Math.sin(l);k++}}}
function ro(a,b,c,d,f,g,h){var k=9E19,l=-1,m=0;a:for(;m<b;m++){var n=a[m],p=n.x-c,q=n.y-d,p=p*p+q*q;if(p<k){for(q=m-1;0<=q;q--)if(a[q].y>n.y&&a[q].x-n.x<f+h.width)continue a;for(q=m+1;q<b;q++)if(a[q].x>n.x&&a[q].y-n.y<g+h.height)continue a;l=m;k=p}}return l}oo.prototype.Mz=function(){if(this.comments)for(var a=this.network.vertexes.k;a.next();)this.addComments(a.value)};
oo.prototype.addComments=function(a){var b=a.Fc;if(null!==b)for(b=b.zE();b.next();){var c=b.value;if("Comment"===c.Zc&&c.La()){var d=this.network.Rm(c);null===d&&(d=this.network.Ko(c));d.charge=this.jE;for(var c=null,f=d.gc;f.next();)if(f.value.toVertex===a){c=f.value;break}if(null===c)for(f=d.tc;f.next();)if(f.value.fromVertex===a){c=f.value;break}null===c&&(c=this.network.an(a,d,null));c.length=this.kE}}};
function zo(a,b){e&&(t.l(a,xo,oo,"getNodeDistance:vertexA"),t.l(b,xo,oo,"getNodeDistance:vertexB"));var c=a.T,d=c.x,f=c.y,g=c.width,c=c.height,h=b.T,k=h.x,l=h.y,m=h.width,h=h.height;return d+g<k?f>l+h?(d=d+g-k,f=f-l-h,F.sqrt(d*d+f*f)):f+c<l?(d=d+g-k,f=f+c-l,F.sqrt(d*d+f*f)):k-(d+g):d>k+m?f>l+h?(d=d-k-m,f=f-l-h,F.sqrt(d*d+f*f)):f+c<l?(d=d-k-m,f=f+c-l,F.sqrt(d*d+f*f)):d-(k+m):f>l+h?f-(l+h):f+c<l?l-(f+c):0.1}
function so(a,b){e&&t.q(b,oo,"performIterations:num");a.sg=null;for(var c=a.ir+b;a.ir<c&&(a.ir++,Ao(a)););a.sg=null}
function Ao(a){null===a.sg&&(a.sg=new B(xo),a.sg.Oe(a.network.vertexes));var b=a.sg.n;if(0>=b.length)return!1;var c=b[0];c.forceX=0;c.forceY=0;for(var d=c.Da,f=d,g=c.Oa,h=g,c=1;c<b.length;c++){var k=b[c];k.forceX=0;k.forceY=0;var l=k.Da,k=k.Oa,d=Math.min(d,l),f=Math.max(f,l),g=Math.min(g,k),h=Math.max(h,k)}(g=f-d>h-g)?b.sort(function(a,b){return null===a||null===b||a===b?0:a.Da-b.Da}):b.sort(function(a,b){return null===a||null===b||a===b?0:a.Oa-b.Oa});for(var h=a.Fh,m=0,n=0,p=0,c=0;c<b.length;c++){var k=
b[c],l=k.T,q=k.O,d=l.x+q.x,l=l.y+q.y,n=k.charge*a.electricalFieldX(d,l),p=k.charge*a.electricalFieldY(d,l),n=n+k.mass*a.gravitationalFieldX(d,l),p=p+k.mass*a.gravitationalFieldY(d,l);k.forceX+=n;k.forceY+=p;for(q=c+1;q<b.length;q++)if(f=b[q],f!==k){var n=f.T,r=f.O,p=n.x+r.x,r=n.y+r.y;if(d-p>h||p-d>h){if(g)break}else if(l-r>h||r-l>h){if(!g)break}else{var s=zo(k,f);1>s?(d>p?(n=Math.abs(f.T.right-k.T.x),n=(1+n)*Math.random()):d<p?(n=Math.abs(f.T.x-k.T.right),n=-(1+n)*Math.random()):(n=Math.max(f.width,
k.width),n=(1+n)*Math.random()-n/2),l>r?(p=Math.abs(f.T.bottom-k.T.y),p=(1+p)*Math.random()):d<p?(p=Math.abs(f.T.y-k.T.bottom),p=-(1+p)*Math.random()):(p=Math.max(f.height,k.height),p=(1+p)*Math.random()-p/2)):(m=-(k.charge*f.charge)/(s*s),n=(p-d)/s*m,p=(r-l)/s*m);k.forceX+=n;k.forceY+=p;f.forceX-=n;f.forceY-=p}}}for(c=a.network.edges.k;c.next();)g=c.value,k=g.fromVertex,f=g.toVertex,l=k.T,q=k.O,d=l.x+q.x,l=l.y+q.y,n=f.T,r=f.O,p=n.x+r.x,r=n.y+r.y,s=zo(k,f),1>s?(n=(d>p?1:-1)*(1+(f.width>k.width)?f.width:
k.width)*Math.random(),p=(l>r?1:-1)*(1+(f.height>k.height)?f.height:k.height)*Math.random()):(m=g.stiffness*(s-g.length),n=(p-d)/s*m,p=(r-l)/s*m),k.forceX+=n,k.forceY+=p,f.forceX-=n,f.forceY-=p;c=0;d=Math.max(a.Fh/20,50);for(f=0;f<b.length;f++)k=b[f],a.isFixed(k)?a.moveFixedVertex(k):(g=k.forceX,h=k.forceY,g<-d?g=-d:g>d&&(g=d),h<-d?h=-d:h>d&&(h=d),k.Da+=g,k.Oa+=h,c=Math.max(c,g*g+h*h));return c>a.bA*a.bA}oo.prototype.moveFixedVertex=function(){};
oo.prototype.commitLayout=function(){this.bB();this.commitNodes();this.rt&&this.commitLinks()};oo.prototype.bB=function(){if(this.yl)for(var a=this.network.edges.k;a.next();){var b=a.value.link;null!==b&&(b.ob=xb,b.rb=xb)}};oo.prototype.commitNodes=function(){var a=0,b=0;if(this.LD){var c=t.Gf();this.qf(this.network,c);b=this.Fd;a=b.x-c.x;b=b.y-c.y;t.hc(c)}for(var c=t.Gf(),d=this.network.vertexes.k;d.next();){var f=d.value;if(0!==a||0!==b)c.assign(f.T),c.x+=a,c.y+=b,f.Pb=c;f.commit()}t.hc(c)};
oo.prototype.commitLinks=function(){for(var a=this.network.edges.k;a.next();)a.value.commit()};oo.prototype.springStiffness=function(a){a=a.stiffness;return isNaN(a)?this.In:a};oo.prototype.springLength=function(a){a=a.length;return isNaN(a)?this.Hn:a};oo.prototype.electricalCharge=function(a){a=a.charge;return isNaN(a)?this.En:a};oo.prototype.electricalFieldX=function(){return 0};oo.prototype.electricalFieldY=function(){return 0};
oo.prototype.gravitationalMass=function(a){a=a.mass;return isNaN(a)?this.Gn:a};oo.prototype.gravitationalFieldX=function(){return 0};oo.prototype.gravitationalFieldY=function(){return 0};oo.prototype.isFixed=function(a){return a.isFixed};t.A(oo,{gK:"currentIteration"},function(){return this.ir});t.g(oo,"arrangementSpacing",oo.prototype.fw);t.defineProperty(oo,{fw:"arrangementSpacing"},function(){return this.bg},function(a){t.l(a,fa,oo,"arrangementSpacing");this.bg.M(a)||(this.bg.assign(a),this.J())});
t.g(oo,"arrangesToOrigin",oo.prototype.LD);t.defineProperty(oo,{LD:"arrangesToOrigin"},function(){return this.oq},function(a){this.oq!==a&&(t.i(a,"boolean",oo,"arrangesToOrigin"),this.oq=a,this.J())});t.g(oo,"setsPortSpots",oo.prototype.yl);t.defineProperty(oo,{yl:"setsPortSpots"},function(){return this.Lh},function(a){this.Lh!==a&&(t.i(a,"boolean",oo,"setsPortSpots"),this.Lh=a,this.J())});t.g(oo,"comments",oo.prototype.comments);
t.defineProperty(oo,{comments:"comments"},function(){return this.sh},function(a){this.sh!==a&&(t.i(a,"boolean",oo,"comments"),this.sh=a,this.J())});t.g(oo,"maxIterations",oo.prototype.ex);t.defineProperty(oo,{ex:"maxIterations"},function(){return this.oo},function(a){this.oo!==a&&(t.i(a,"number",oo,"maxIterations"),0<=a&&(this.oo=a,this.J()))});t.g(oo,"epsilonDistance",oo.prototype.bA);
t.defineProperty(oo,{bA:"epsilonDistance"},function(){return this.Lq},function(a){this.Lq!==a&&(t.i(a,"number",oo,"epsilonDistance"),0<a&&(this.Lq=a,this.J()))});t.g(oo,"infinityDistance",oo.prototype.RI);t.defineProperty(oo,{RI:"infinityDistance"},function(){return this.Fh},function(a){this.Fh!==a&&(t.i(a,"number",oo,"infinityDistance"),1<a&&(this.Fh=a,this.J()))});t.g(oo,"defaultSpringStiffness",oo.prototype.wI);
t.defineProperty(oo,{wI:"defaultSpringStiffness"},function(){return this.In},function(a){this.In!==a&&(t.i(a,"number",oo,"defaultSpringStiffness"),this.In=a,this.J())});t.g(oo,"defaultSpringLength",oo.prototype.vI);t.defineProperty(oo,{vI:"defaultSpringLength"},function(){return this.Hn},function(a){this.Hn!==a&&(t.i(a,"number",oo,"defaultSpringLength"),this.Hn=a,this.J())});t.g(oo,"defaultElectricalCharge",oo.prototype.pI);
t.defineProperty(oo,{pI:"defaultElectricalCharge"},function(){return this.En},function(a){this.En!==a&&(t.i(a,"number",oo,"defaultElectricalCharge"),this.En=a,this.J())});t.g(oo,"defaultGravitationalMass",oo.prototype.qI);t.defineProperty(oo,{qI:"defaultGravitationalMass"},function(){return this.Gn},function(a){this.Gn!==a&&(t.i(a,"number",oo,"defaultGravitationalMass"),this.Gn=a,this.J())});t.g(oo,"defaultCommentSpringLength",oo.prototype.kE);
t.defineProperty(oo,{kE:"defaultCommentSpringLength"},function(){return this.Fq},function(a){this.Fq!==a&&(t.i(a,"number",oo,"defaultCommentSpringLength"),this.Fq=a,this.J())});t.g(oo,"defaultCommentElectricalCharge",oo.prototype.jE);t.defineProperty(oo,{jE:"defaultCommentElectricalCharge"},function(){return this.Eq},function(a){this.Eq!==a&&(t.i(a,"number",oo,"defaultCommentElectricalCharge"),this.Eq=a,this.J())});function po(){ta.call(this)}t.ga("ForceDirectedNetwork",po);t.Ka(po,ta);
po.prototype.createVertex=function(){return new xo};po.prototype.createEdge=function(){return new Bo};function xo(){ua.call(this);this.isFixed=!1;this.mass=this.charge=NaN;this.gk=this.Xf=this.forceY=this.forceX=0;this.kh=this.Jm=null;this.XA=0}t.ga("ForceDirectedVertex",xo);t.Ka(xo,ua);function Bo(){va.call(this);this.length=this.stiffness=NaN}t.ga("ForceDirectedEdge",Bo);t.Ka(Bo,va);
function Y(){0<arguments.length&&t.ad(Y);be.call(this);this.zd=this.dm=25;this.sa=0;this.Dn=Co;this.mo=Do;this.Yn=Eo;this.am=4;this.vn=Fo;this.Hi=Go;this.Lh=!0;this.yj=4;this.Ib=this.cv=this.kb=-1;this.Kf=this.zr=0;this.Ob=this.Jf=this.ig=this.Wg=this.Od=null;this.Fr=0;this.lv=this.im=null;this.lg=0;this.Gr=null;this.Zg=[];this.Zg.length=100}t.ga("LayeredDigraphLayout",Y);t.Ka(Y,be);
Y.prototype.cloneProtected=function(a){be.prototype.cloneProtected.call(this,a);a.dm=this.dm;a.zd=this.zd;a.sa=this.sa;a.Dn=this.Dn;a.mo=this.mo;a.Yn=this.Yn;a.am=this.am;a.vn=this.vn;a.Hi=this.Hi;a.Lh=this.Lh;a.yj=this.yj};Y.prototype.createNetwork=function(){var a=new No;On(a,this);return a};
Y.prototype.doLayout=function(a){a||t.m("Layout.doLayout(collection) argument must not be null but a Diagram, a Group, or an Iterable of Parts");null===this.network&&(this.network=this.makeNetwork(a));this.Fd=this.initialOrigin(this.Fd);this.cv=-1;this.Kf=this.zr=0;this.Gr=this.lv=this.im=null;for(a=0;a<this.Zg.length;a++)this.Zg[a]=null;if(0<this.network.vertexes.count){this.network.xw();for(a=this.network.edges.k;a.next();)a.value.rev=!1;switch(this.Dn){default:case Ro:var b=0,c=this.network.vertexes.count-
1;a=[];a.length=c+1;for(var d=this.network.vertexes.k;d.next();)d.value.valid=!0;for(;null!==So(this.network);){for(d=To(this.network);null!==d;)a[c]=d,c--,d.valid=!1,d=To(this.network);for(d=Uo(this.network);null!==d;)a[b]=d,b++,d.valid=!1,d=Uo(this.network);for(var d=null,f=0,g=this.network.vertexes.k;g.next();){var h=g.value;if(h.valid){for(var k=0,l=h.gc;l.next();)l.value.toVertex.valid&&k++;for(var l=0,m=h.tc;m.next();)m.value.fromVertex.valid&&l++;if(null===d||f<k-l)d=h,f=k-l}}null!==d&&(a[b]=
d,b++,d.valid=!1)}for(b=0;b<this.network.vertexes.count;b++)a[b].index=b;for(a=this.network.edges.k;a.next();)b=a.value,b.fromVertex.index>b.toVertex.index&&(this.network.ox(b),b.rev=!0);break;case Co:for(b=this.network.vertexes.k;b.next();)b.value.$o=-1,b.value.finish=-1;for(a=this.network.edges.k;a.next();)a.value.forest=!1;this.Fr=0;for(b.reset();b.next();)0===b.value.tc.count&&Vo(this,b.value);for(b.reset();b.next();)-1===b.value.$o&&Vo(this,b.value);for(a.reset();a.next();)b=a.value,b.forest||
(c=b.fromVertex,d=c.finish,f=b.toVertex,g=f.finish,f.$o<c.$o&&d<g&&(this.network.ox(b),b.rev=!0))}for(a=this.network.vertexes.k;a.next();)b=a.value,b.layer=-1;this.kb=-1;this.assignLayers();for(a.reset();a.next();)this.kb=Math.max(this.kb,a.value.layer);c=this.network.edges.k;for(b=[];c.next();)a=c.value,a.valid=!1,b.push(a);for(c=0;c<b.length;c++)if(a=b[c],!a.valid&&(null!==a.fromVertex.rd&&null!==a.toVertex.rd||a.fromVertex.layer!==a.toVertex.layer)){g=k=h=l=0;f=a.fromVertex;d=a.toVertex;if(null!==
a.link){k=a.link;if(null===k)continue;var n=f.rd,g=d.rd;if(null===n||null===g)continue;var p=k.aa,h=k.ca,q=k.ud,l=k.fe;a.rev&&(k=p,m=q,p=h,q=l,h=k,l=m);var r=f.O,k=a.toVertex.O,s=a.rev?d.T:f.T,m=t.K();isNaN(s.x)?m.assign(r):Cm(p,q,Hb,m);n!==p&&!isNaN(s.x)&&p.La()&&(n=f.T,isNaN(n.x)||(m.x+=s.x-n.x,m.y+=s.y-n.y));p=a.rev?f.T:d.T;n=t.K();isNaN(p.x)?n.assign(k):Cm(h,l,Hb,n);g!==h&&!isNaN(p.x)&&h.La()&&(g=d.T,isNaN(g.x)||(n.x+=p.x-g.x,n.y+=p.y-g.y));90===this.sa||270===this.sa?(g=Math.round((m.x-r.x)/
this.zd),h=m.x,k=Math.round((n.x-k.x)/this.zd),l=n.x):(g=Math.round((m.y-r.y)/this.zd),h=m.y,k=Math.round((n.y-k.y)/this.zd),l=n.y);t.B(m);t.B(n);a.portFromColOffset=g;a.portFromPos=h;a.portToColOffset=k;a.portToPos=l}else a.portFromColOffset=0,a.portFromPos=0,a.portToColOffset=0,a.portToPos=0;m=f.layer;r=d.layer;n=a;p=0;s=n.link;if(null!==s){var u=s.ud,v=s.fe;if(null!==u&&null!==v){var D=s.aa,q=s.ca;if(null!==D&&null!==q){var A=u.ob,G=v.rb;this.yl||(s.ob.Pc()||(A=s.ob),s.rb.Pc()||(G=s.rb));if(A.Pc()||
A===wb)A=Wo(this,!0);if(G.Pc()||G===wb)G=Wo(this,!1);var K=s.ic,N=s.getLinkPoint(D,u,A,!0,K,q,v,t.K()),A=s.getLinkDirection(D,u,N,A,!0,K,q,v);t.B(N);A===Xo(this,n,!0)?p+=1:this.yl&&null!==D&&1===D.ports.count&&n.rev&&(p+=1);N=s.getLinkPoint(q,v,G,!1,K,D,u,t.K());s=s.getLinkDirection(q,v,N,G,!1,K,D,u);t.B(N);s===Xo(this,n,!1)?p+=2:this.yl&&null!==q&&1===q.ports.count&&n.rev&&(p+=2)}}}n=1===p||3===p?!0:!1;if(p=2===p||3===p?!0:!1)q=this.network.createVertex(),q.rd=null,q.Em=1,q.layer=m,q.near=f,this.network.Yk(q),
f=this.network.an(f,q,a.link),f.valid=!1,f.rev=a.rev,f.portFromColOffset=g,f.portToColOffset=0,f.portFromPos=h,f.portToPos=0,f=q;s=1;n&&s--;if(m-r>s&&0<m){a.valid=!1;q=this.network.createVertex();q.rd=null;q.Em=2;q.layer=m-1;this.network.Yk(q);f=this.network.an(f,q,a.link);f.valid=!0;f.rev=a.rev;f.portFromColOffset=p?0:g;f.portToColOffset=0;f.portFromPos=p?0:h;f.portToPos=0;f=q;for(m--;m-r>s&&0<m;)q=this.network.createVertex(),q.rd=null,q.Em=3,q.layer=m-1,this.network.Yk(q),f=this.network.an(f,q,
a.link),f.valid=!0,f.rev=a.rev,f.portFromColOffset=0,f.portToColOffset=0,f.portFromPos=0,f.portToPos=0,f=q,m--;f=this.network.an(q,d,a.link);f.valid=!n;n&&(q.near=d);f.rev=a.rev;f.portFromColOffset=0;f.portToColOffset=k;f.portFromPos=0;f.portToPos=l}else a.valid=!0}b=this.Od=[];for(c=0;c<=this.kb;c++)b[c]=0;for(a=this.network.vertexes.k;a.next();)a.value.index=-1;this.initializeIndices();this.cv=-1;for(c=this.Kf=this.zr=0;c<=this.kb;c++)b[c]>b[this.Kf]&&(this.cv=b[c]-1,this.Kf=c),b[c]<b[this.zr]&&
(this.zr=c);this.Gr=[];for(c=0;c<b.length;c++)this.Gr[c]=[];for(a.reset();a.next();)c=a.value,b=c.layer,this.Gr[b][c.index]=c;this.Ib=-1;for(a=0;a<=this.kb;a++){b=Yo(this,a);c=0;d=this.Od[a];for(f=0;f<d;f++)g=b[f],c+=this.nodeMinColumnSpace(g,!0),g.column=c,c+=1,c+=this.nodeMinColumnSpace(g,!1);this.Ib=Math.max(this.Ib,c-1);Zo(this,a,b)}this.reduceCrossings();this.straightenAndPack();this.updateParts()}this.network=null;this.$e=!0};
Y.prototype.linkMinLength=function(a){var b=a.toVertex,c=0;for(a=a.fromVertex.gc;a.next();)a.value.toVertex===b&&c++;return 1<c?2:1};function $o(a){var b=a.fromVertex.rd;a=a.toVertex.rd;return null===b&&null===a?8:null===b||null===a?4:1}Y.prototype.nodeMinLayerSpace=function(a,b){return null===a.rd?0:90===this.sa||270===this.sa?b?a.O.y+10:a.T.height-a.O.y+10:b?a.O.x+10:a.T.width-a.O.x+10};
Y.prototype.nodeMinColumnSpace=function(a,b){if(null===a.rd)return 0;var c=b?a.HA:a.GA;if(void 0!==c)return c;c=this.sa;return 90===c||270===c?b?a.HA=a.O.x/this.zd+1|0:a.GA=(a.T.width-a.O.x)/this.zd+1|0:b?a.HA=a.O.y/this.zd+1|0:a.GA=(a.T.height-a.O.y)/this.zd+1|0};function ap(a){null===a.im&&(a.im=[]);for(var b=0,c=a.network.vertexes.k,d;c.next();)d=c.value,a.im[b]=d.layer,b++,a.im[b]=d.column,b++,a.im[b]=d.index,b++;return a.im}
function bp(a,b){for(var c=0,d=a.network.vertexes.k,f;d.next();)f=d.value,f.layer=b[c],c++,f.column=b[c],c++,f.index=b[c],c++}
function cp(a,b,c){e&&(t.q(b,Y,"crossingMatrix:unfixedLayer"),t.q(c,Y,"crossingMatrix:direction"));var d=Yo(a,b),f=a.Od[b];a.lv||(a.lv=[]);for(var g=a.lv,h,k=0;k<f;k++){h=0;var l=d[k],m=l.near,n,p;if(null!==m&&m.layer===l.layer)if(l=m.index,l>k)for(p=k+1;p<l;p++)n=d[p],n.near===m&&n.Em===m.Em||h++;else for(p=k-1;p>l;p--)n=d[p],n.near===m&&n.Em===m.Em||h++;var q,r,s,u,v,D;if(0<=c)for(l=d[k].ff,m=0;m<l.count;m++)if(q=l.n[m],q.valid&&q.fromVertex.layer!==b)for(n=q.fromVertex.index,p=q.portToPos,q=q.portFromPos,
r=m+1;r<l.count;r++)s=l.n[r],s.valid&&s.fromVertex.layer!==b&&(u=s.fromVertex.index,v=s.portToPos,s=s.portFromPos,p<v&&(n>u||n===u&&q>s)&&h++,v<p&&(u>n||u===n&&s>q)&&h++);if(0>=c)for(l=d[k].Te,m=0;m<l.count;m++)if(q=l.n[m],q.valid&&q.toVertex.layer!==b)for(n=q.toVertex.index,p=q.portToPos,q=q.portFromPos,r=m+1;r<l.count;r++)s=l.n[r],s.valid&&s.toVertex.layer!==b&&(u=s.toVertex.index,v=s.portToPos,s=s.portFromPos,q<s&&(n>u||n===u&&p>v)&&h++,s<q&&(u>n||u===n&&v>p)&&h++);g[k*f+k]=h;for(l=k+1;l<f;l++){var A=
0,G=0;if(0<=c)for(h=d[k].ff,D=d[l].ff,m=0;m<h.count;m++)if(q=h.n[m],q.valid&&q.fromVertex.layer!==b)for(n=q.fromVertex.index,q=q.portFromPos,r=0;r<D.count;r++)s=D.n[r],s.valid&&s.fromVertex.layer!==b&&(u=s.fromVertex.index,s=s.portFromPos,(n<u||n===u&&q<s)&&G++,(u<n||u===n&&s<q)&&A++);if(0>=c)for(h=d[k].Te,D=d[l].Te,m=0;m<h.count;m++)if(q=h.n[m],q.valid&&q.toVertex.layer!==b)for(n=q.toVertex.index,p=q.portToPos,r=0;r<D.count;r++)s=D.n[r],s.valid&&s.toVertex.layer!==b&&(u=s.toVertex.index,v=s.portToPos,
(n<u||n===u&&p<v)&&G++,(u<n||u===n&&v<p)&&A++);g[k*f+l]=A;g[l*f+k]=G}}Zo(a,b,d);return g}Y.prototype.countCrossings=function(){var a,b=0,c,d;for(a=0;a<=this.kb;a++){c=cp(this,a,1);d=this.Od[a];for(var f=0;f<d;f++)for(var g=f;g<d;g++)b+=c[f*d+g]}return b};
function dp(a){for(var b=0,c=0;c<=a.kb;c++){for(var d=a,f=c,g=Yo(d,f),h=d.Od[f],k=0,l=void 0,l=0;l<h;l++){var m=g[l].Te,n,p,q;if("undefined"!==typeof m)for(var r=0;r<m.count;r++)n=m.n[r],n.valid&&n.toVertex.layer!==f&&(p=n.fromVertex.column+n.portFromColOffset,q=n.toVertex.column+n.portToColOffset,k+=(Math.abs(p-q)+1)*$o(n))}Zo(d,f,g);b+=k}return b}
Y.prototype.normalize=function(){var a=Infinity;this.Ib=-1;for(var b=this.network.vertexes.k,c;b.next();)c=b.value,a=Math.min(a,c.column-this.nodeMinColumnSpace(c,!0)),this.Ib=Math.max(this.Ib,c.column+this.nodeMinColumnSpace(c,!1));for(b.reset();b.next();)b.value.column-=a;this.Ib-=a};
function ep(a,b,c){e&&(t.q(b,Y,"barycenters:unfixedLayer"),t.q(c,Y,"barycenters:direction"));var d=Yo(a,b),f=a.Od[b],g=[],h;for(h=0;h<f;h++){var k=d[h],l=null;0>=c&&(l=k.ff);var m=null;0<=c&&(m=k.Te);var n=0,p=0,q=k.near;null!==q&&q.layer===k.layer&&(n+=q.column-1,p++);if(null!==l)for(q=0;q<l.count;q++){var k=l.n[q],r=k.fromVertex;k.valid&&!k.rev&&r.layer!==b&&(n+=r.column+k.portFromColOffset,p++)}if(null!==m)for(l=0;l<m.count;l++)k=m.n[l],q=k.toVertex,k.valid&&!k.rev&&q.layer!==b&&(n+=q.column+k.portToColOffset,
p++);g[h]=0===p?-1:n/p}Zo(a,b,d);return g}
function fp(a,b,c){e&&(t.q(b,Y,"medians:unfixedLayer"),t.q(c,Y,"medians:direction"));for(var d=Yo(a,b),f=a.Od[b],g=[],h=0;h<f;h++){var k=d[h],l=null;0>=c&&(l=k.ff);var m=null;0<=c&&(m=k.Te);var n=0,p=[],q=k.near;null!==q&&q.layer===k.layer&&(p[n]=q.column-1,n++);if(null!==l)for(q=0;q<l.count;q++){var k=l.n[q],r=k.fromVertex;k.valid&&!k.rev&&r.layer!==b&&(p[n]=r.column+k.portFromColOffset,n++)}if(null!==m)for(l=0;l<m.count;l++)k=m.n[l],q=k.toVertex,k.valid&&!k.rev&&q.layer!==b&&(p[n]=q.column+k.portToColOffset,
n++);0===n?g[h]=-1:(p.sort(function(a,b){return a-b}),m=n>>1,g[h]=n&1?p[m]:p[m-1]+p[m]>>1)}Zo(a,b,d);return g}function gp(a,b,c,d,f,g){if(b.component===d){b.component=c;var h,k;if(f)for(var l=b.gc;l.next();){var m=l.value.toVertex;h=b.layer-m.layer;k=a.linkMinLength(l.value);h===k&&gp(a,m,c,d,f,g)}if(g)for(l=b.tc;l.next();)m=l.value.fromVertex,h=m.layer-b.layer,k=a.linkMinLength(l.value),h===k&&gp(a,m,c,d,f,g)}}
function hp(a,b,c,d,f,g){if(b.component===d){b.component=c;if(f)for(var h=b.gc,k;h.next();)k=h.value.toVertex,hp(a,k,c,d,f,g);if(g)for(b=b.tc;b.next();)h=b.value.fromVertex,hp(a,h,c,d,f,g)}}function So(a){for(a=a.vertexes.k;a.next();){var b=a.value;if(b.valid)return b}return null}function To(a){for(a=a.vertexes.k;a.next();){var b=a.value;if(b.valid){for(var c=!0,d=b.gc;d.next();)if(d.value.toVertex.valid){c=!1;break}if(c)return b}}return null}
function Uo(a){for(a=a.vertexes.k;a.next();){var b=a.value;if(b.valid){for(var c=!0,d=b.tc;d.next();)if(d.value.fromVertex.valid){c=!1;break}if(c)return b}}return null}function Vo(a,b){b.$o=a.Fr;a.Fr++;for(var c=b.gc;c.next();){var d=c.value,f=d.toVertex;-1===f.$o&&(d.forest=!0,Vo(a,f))}b.finish=a.Fr;a.Fr++}
Y.prototype.assignLayers=function(){switch(this.mo){case ip:jp(this);break;case kp:for(var a,b=this.network.vertexes.k;b.next();)a=lp(this,b.value),this.kb=Math.max(a,this.kb);for(b.reset();b.next();)a=b.value,a.layer=this.kb-a.layer;break;default:case Do:jp(this);for(b=this.network.vertexes.k;b.next();)b.value.valid=!1;for(b.reset();b.next();)0===b.value.tc.count&&mp(this,b.value);a=Infinity;for(b.reset();b.next();)a=Math.min(a,b.value.layer);this.kb=-1;for(b.reset();b.next();)b.value.layer-=a,this.kb=
Math.max(this.kb,b.value.layer)}};function jp(a){for(var b=a.network.vertexes.k;b.next();){var c=np(a,b.value);a.kb=Math.max(c,a.kb)}}function np(a,b){var c=0;if(-1===b.layer){for(var d=b.gc;d.next();)var f=d.value,g=a.linkMinLength(f),c=Math.max(c,np(a,f.toVertex)+g);b.layer=c}else c=b.layer;return c}function lp(a,b){var c=0;if(-1===b.layer){for(var d,f,g=b.tc;g.next();)f=g.value,d=a.linkMinLength(f),c=Math.max(c,lp(a,f.fromVertex)+d);b.layer=c}else c=b.layer;return c}
function mp(a,b){if(!b.valid){b.valid=!0;for(var c=b.gc;c.next();)mp(a,c.value.toVertex);for(c=a.network.vertexes.k;c.next();)c.value.component=-1;for(var d=b.ff.n,f=d.length,g=0;g<f;g++){var h=d[g],k=a.linkMinLength(h);h.fromVertex.layer-h.toVertex.layer>k&&gp(a,h.fromVertex,0,-1,!0,!1)}for(gp(a,b,1,-1,!0,!0);0!==b.component;){for(var k=0,d=Infinity,l=0,m=null,n=a.network.vertexes.k;n.next();){var p=n.value;if(1===p.component){for(var q=0,r=!1,s=p.ff.n,f=s.length,g=0;g<f;g++){var h=s[g],u=h.fromVertex,
q=q+1;1!==u.component&&(k+=1,u=u.layer-p.layer,h=a.linkMinLength(h),d=Math.min(d,u-h))}h=p.Te.n;f=h.length;for(g=0;g<f;g++)s=h[g].toVertex,q-=1,1!==s.component?k-=1:r=!0;(null===m||q<l)&&!r&&(m=p,l=q)}}if(0<k){for(c.reset();c.next();)f=c.value,1===f.component&&(f.layer+=d);b.component=0}else m.component=0}for(c=a.network.vertexes.k;c.next();)c.value.component=-1;for(gp(a,b,1,-1,!0,!1);0!==b.component;){g=0;f=Infinity;d=0;k=null;for(l=a.network.vertexes.k;l.next();)if(m=l.value,1===m.component){n=
0;p=!1;h=m.ff.n;q=h.length;for(r=0;r<q;r++)s=h[r].fromVertex,n+=1,1!==s.component?g+=1:p=!0;h=m.Te.n;q=h.length;for(r=0;r<q;r++)s=h[r],u=s.toVertex,n-=1,1!==u.component&&(g-=1,u=m.layer-u.layer,s=a.linkMinLength(s),f=Math.min(f,u-s));(null===k||n>d)&&!p&&(k=m,d=n)}if(0>g){for(c.reset();c.next();)g=c.value,1===g.component&&(g.layer-=f);b.component=0}else k.component=0}}}
function Xo(a,b,c){return 90===a.sa?c&&!b.rev||!c&&b.rev?270:90:180===a.sa?c&&!b.rev||!c&&b.rev?0:180:270===a.sa?c&&!b.rev||!c&&b.rev?90:270:c&&!b.rev||!c&&b.rev?180:0}
Y.prototype.initializeIndices=function(){switch(this.Yn){default:case op:for(var a,b=this.network.vertexes.k;b.next();){var c=b.value;a=c.layer;c.index=this.Od[a];this.Od[a]++}break;case Eo:b=this.network.vertexes.k;for(a=this.kb;0<=a;a--){for(;b.next();)b.value.layer===a&&-1===b.value.index&&pp(this,b.value);b.reset()}break;case qp:for(b=this.network.vertexes.k,a=0;a<=this.kb;a++){for(;b.next();)b.value.layer===a&&-1===b.value.index&&rp(this,b.value);b.reset()}}};
function pp(a,b){var c=b.layer;b.index=a.Od[c];a.Od[c]++;for(var c=b.Te.Ie(),d=!0,f;d;)for(d=!1,f=0;f<c.length-1;f++){var g=c[f],h=c[f+1];g.portFromColOffset>h.portFromColOffset&&(d=!0,c[f]=h,c[f+1]=g)}for(f=0;f<c.length;f++)d=c[f],d.valid&&(d=d.toVertex,-1===d.index&&pp(a,d))}
function rp(a,b){var c=b.layer;b.index=a.Od[c];a.Od[c]++;for(var c=b.ff.Ie(),d=!0,f;d;)for(d=!1,f=0;f<c.length-1;f++){var g=c[f],h=c[f+1];g.portToColOffset>h.portToColOffset&&(d=!0,c[f]=h,c[f+1]=g)}for(f=0;f<c.length;f++)d=c[f],d.valid&&(d=d.fromVertex,-1===d.index&&rp(a,d))}
Y.prototype.reduceCrossings=function(){var a=this.countCrossings(),b=ap(this),c,d,f;for(c=0;c<this.am;c++){for(d=0;d<=this.kb;d++)sp(this,d,1),tp(this,d,1);f=this.countCrossings();f<a&&(a=f,b=ap(this));for(d=this.kb;0<=d;d--)sp(this,d,-1),tp(this,d,-1);f=this.countCrossings();f<a&&(a=f,b=ap(this))}bp(this,b);for(c=0;c<this.am;c++){for(d=0;d<=this.kb;d++)sp(this,d,0),tp(this,d,0);f=this.countCrossings();f<a&&(a=f,b=ap(this));for(d=this.kb;0<=d;d--)sp(this,d,0),tp(this,d,0);f=this.countCrossings();
f<a&&(a=f,b=ap(this))}bp(this,b);var g,h,k;switch(this.vn){case up:break;case vp:for(k=a+1;(d=this.countCrossings())<k;)for(k=d,c=this.kb;0<=c;c--)for(h=0;h<=c;h++){for(g=!0;g;)for(g=!1,d=c;d>=h;d--)g=tp(this,d,-1)||g;f=this.countCrossings();f>=a?bp(this,b):(a=f,b=ap(this));for(g=!0;g;)for(g=!1,d=c;d>=h;d--)g=tp(this,d,1)||g;f=this.countCrossings();f>=a?bp(this,b):(a=f,b=ap(this));for(g=!0;g;)for(g=!1,d=h;d<=c;d++)g=tp(this,d,1)||g;f>=a?bp(this,b):(a=f,b=ap(this));for(g=!0;g;)for(g=!1,d=h;d<=c;d++)g=
tp(this,d,-1)||g;f>=a?bp(this,b):(a=f,b=ap(this));for(g=!0;g;)for(g=!1,d=c;d>=h;d--)g=tp(this,d,0)||g;f>=a?bp(this,b):(a=f,b=ap(this));for(g=!0;g;)for(g=!1,d=h;d<=c;d++)g=tp(this,d,0)||g;f>=a?bp(this,b):(a=f,b=ap(this))}break;default:case Fo:for(c=this.kb,h=0,k=a+1;(d=this.countCrossings())<k;){k=d;for(g=!0;g;)for(g=!1,d=c;d>=h;d--)g=tp(this,d,-1)||g;f=this.countCrossings();f>=a?bp(this,b):(a=f,b=ap(this));for(g=!0;g;)for(g=!1,d=c;d>=h;d--)g=tp(this,d,1)||g;f=this.countCrossings();f>=a?bp(this,b):
(a=f,b=ap(this));for(g=!0;g;)for(g=!1,d=h;d<=c;d++)g=tp(this,d,1)||g;f>=a?bp(this,b):(a=f,b=ap(this));for(g=!0;g;)for(g=!1,d=h;d<=c;d++)g=tp(this,d,-1)||g;f>=a?bp(this,b):(a=f,b=ap(this));for(g=!0;g;)for(g=!1,d=c;d>=h;d--)g=tp(this,d,0)||g;f>=a?bp(this,b):(a=f,b=ap(this));for(g=!0;g;)for(g=!1,d=h;d<=c;d++)g=tp(this,d,0)||g;f>=a?bp(this,b):(a=f,b=ap(this))}}bp(this,b)};
function sp(a,b,c){e&&(t.q(b,Y,"medianBarycenterCrossingReduction:unfixedLayer"),t.q(c,Y,"medianBarycenterCrossingReduction:direction"));var d=Yo(a,b),f=a.Od[b],g=fp(a,b,c),h=ep(a,b,c);for(c=0;c<f;c++)-1===h[c]&&(h[c]=d[c].column),-1===g[c]&&(g[c]=d[c].column);for(var k=!0,l;k;)for(k=!1,c=0;c<f-1;c++)if(g[c+1]<g[c]||g[c+1]===g[c]&&h[c+1]<h[c])k=!0,l=g[c],g[c]=g[c+1],g[c+1]=l,l=h[c],h[c]=h[c+1],h[c+1]=l,l=d[c],d[c]=d[c+1],d[c+1]=l;for(c=g=0;c<f;c++)l=d[c],l.index=c,g+=a.nodeMinColumnSpace(l,!0),l.column=
g,g+=1,g+=a.nodeMinColumnSpace(l,!1);Zo(a,b,d)}
function tp(a,b,c){var d=Yo(a,b),f=a.Od[b];c=cp(a,b,c);var g,h;h=[];for(g=0;g<f;g++)h[g]=-1;var k;k=[];for(g=0;g<f;g++)k[g]=-1;for(var l=!1,m=!0;m;)for(m=!1,g=0;g<f-1;g++){var n=c[d[g].index*f+d[g+1].index],p=c[d[g+1].index*f+d[g].index],q=0,r=0,s=d[g].column,u=d[g+1].column,v=a.nodeMinColumnSpace(d[g],!0),D=a.nodeMinColumnSpace(d[g],!1),A=a.nodeMinColumnSpace(d[g+1],!0),G=a.nodeMinColumnSpace(d[g+1],!1),v=s-v+A,D=u-D+G,K=d[g].tc.k;for(K.reset();K.next();)if(G=K.value,G.valid&&G.fromVertex.layer===
b){G=G.fromVertex;for(A=0;d[A]!==G;)A++;A<g&&(q+=2*(g-A),r+=2*(g+1-A));A===g+1&&(q+=1);A>g+1&&(q+=4*(A-g),r+=4*(A-(g+1)))}K=d[g].gc.k;for(K.reset();K.next();)if(G=K.value,G.valid&&G.toVertex.layer===b){G=G.toVertex;for(A=0;d[A]!==G;)A++;A===g+1&&(r+=1)}K=d[g+1].tc.k;for(K.reset();K.next();)if(G=K.value,G.valid&&G.fromVertex.layer===b){G=G.fromVertex;for(A=0;d[A]!==G;)A++;A<g&&(q+=2*(g+1-A),r+=2*(g-A));A===g&&(r+=1);A>g+1&&(q+=4*(A-(g+1)),r+=4*(A-g))}K=d[g+1].gc.k;for(K.reset();K.next();)if(G=K.value,
G.valid&&G.toVertex.layer===b){G=G.toVertex;for(A=0;d[A]!==G;)A++;A===g&&(q+=1)}var A=G=0,K=h[d[g].index],N=k[d[g].index],O=h[d[g+1].index],U=k[d[g+1].index];-1!==K&&(G+=Math.abs(K-s),A+=Math.abs(K-D));-1!==N&&(G+=Math.abs(N-s),A+=Math.abs(N-D));-1!==O&&(G+=Math.abs(O-u),A+=Math.abs(O-v));-1!==U&&(G+=Math.abs(U-u),A+=Math.abs(U-v));if(r<q-0.5||r===q&&p<n-0.5||r===q&&p===n&&A<G-0.5)m=l=!0,d[g].column=D,d[g+1].column=v,n=d[g],d[g]=d[g+1],d[g+1]=n}for(g=0;g<f;g++)d[g].index=g;Zo(a,b,d);return l}
Y.prototype.straightenAndPack=function(){var a,b,c=0!==(this.Hi&wp);a=this.Hi===Go;1E3<this.network.edges.count&&!a&&(c=!1);if(c){b=[];for(a=0;a<=this.kb;a++)b[a]=0;for(var d=this.network.vertexes.k,f,g;d.next();)f=d.value,a=f.layer,g=f.column,f=this.nodeMinColumnSpace(f,!1),b[a]=Math.max(b[a],g+f);for(d.reset();d.next();)f=d.value,a=f.layer,g=f.column,f.column=(8*(this.Ib-b[a])>>1)+8*g;this.Ib*=8}if(0!==(this.Hi&xp))for(b=!0;b;){b=!1;for(a=this.Kf+1;a<=this.kb;a++)b=yp(this,a,1)||b;for(a=this.Kf-
1;0<=a;a--)b=yp(this,a,-1)||b;b=yp(this,this.Kf,0)||b}if(0!==(this.Hi&zp)){for(a=this.Kf+1;a<=this.kb;a++)Ap(this,a,1);for(a=this.Kf-1;0<=a;a--)Ap(this,a,-1);Ap(this,this.Kf,0)}c&&(Bp(this,-1),Bp(this,1));if(0!==(this.Hi&xp))for(b=!0;b;){b=!1;b=yp(this,this.Kf,0)||b;for(a=this.Kf+1;a<=this.kb;a++)b=yp(this,a,0)||b;for(a=this.Kf-1;0<=a;a--)b=yp(this,a,0)||b}};function yp(a,b,c){e&&(t.q(b,Y,"bendStraighten:unfixedLayer"),t.q(c,Y,"bendStraighten:direction"));for(var d=!1;Cp(a,b,c);)d=!0;return d}
function Cp(a,b,c){e&&(t.q(b,Y,"shiftbendStraighten:unfixedLayer"),t.q(c,Y,"shiftbendStraighten:direction"));var d,f=Yo(a,b),g=a.Od[b],h=ep(a,b,-1);if(0<c)for(d=0;d<g;d++)h[d]=-1;var k=ep(a,b,1);if(0>c)for(d=0;d<g;d++)k[d]=-1;for(var l=!1,m=!0;m;)for(m=!1,d=0;d<g;d++){var n=f[d].column,p=a.nodeMinColumnSpace(f[d],!0),q=a.nodeMinColumnSpace(f[d],!1),p=0>d-1||n-f[d-1].column-1>p+a.nodeMinColumnSpace(f[d-1],!1)?n-1:n,q=d+1>=g||f[d+1].column-n-1>q+a.nodeMinColumnSpace(f[d+1],!0)?n+1:n,r=0,s=0,u=0,v,D,
A,G;if(0>=c)for(var K=f[d].tc.k;K.next();)v=K.value,v.valid&&v.fromVertex.layer!==b&&(D=$o(v),A=v.portFromColOffset,G=v.portToColOffset,v=v.fromVertex.column,r+=(Math.abs(n+G-(v+A))+1)*D,s+=(Math.abs(p+G-(v+A))+1)*D,u+=(Math.abs(q+G-(v+A))+1)*D);if(0<=c)for(K=f[d].gc.k;K.next();)v=K.value,v.valid&&v.toVertex.layer!==b&&(D=$o(v),A=v.portFromColOffset,G=v.portToColOffset,v=v.toVertex.column,r+=(Math.abs(n+A-(v+G))+1)*D,s+=(Math.abs(p+A-(v+G))+1)*D,u+=(Math.abs(q+A-(v+G))+1)*D);G=A=D=0;v=h[f[d].index];
K=k[f[d].index];-1!==v&&(D+=Math.abs(v-n),A+=Math.abs(v-p),G+=Math.abs(v-q));-1!==K&&(D+=Math.abs(K-n),A+=Math.abs(K-p),G+=Math.abs(K-q));if(s<r||s===r&&A<D)m=l=!0,f[d].column=p;if(u<r||u===r&&G<D)m=l=!0,f[d].column=q}Zo(a,b,f);a.normalize();return l}
function Ap(a,b,c){e&&(t.q(b,Y,"medianStraighten:unfixedLayer"),t.q(c,Y,"medianStraighten:direction"));var d=Yo(a,b),f=a.Od[b],g=fp(a,b,c),h=[];for(c=0;c<f;c++)h[c]=g[c];for(g=!0;g;)for(g=!1,c=0;c<f;c++){var k=d[c].column,l=a.nodeMinColumnSpace(d[c],!0),m=a.nodeMinColumnSpace(d[c],!1),n=0,p;-1===h[c]?0===c&&c===f-1?n=k:0===c?(p=d[c+1].column,n=p-k===m+a.nodeMinColumnSpace(d[c+1],!0)?k-1:k):c===f-1?(p=d[c-1].column,n=k-p===l+a.nodeMinColumnSpace(d[c-1],!1)?k+1:k):(p=d[c-1].column,l=p+a.nodeMinColumnSpace(d[c-
1],!1)+l+1,p=d[c+1].column,m=p-a.nodeMinColumnSpace(d[c+1],!0)-m-1,n=(l+m)/2|0):0===c&&c===f-1?n=h[c]:0===c?(p=d[c+1].column,m=p-a.nodeMinColumnSpace(d[c+1],!0)-m-1,n=Math.min(h[c],m)):c===f-1?(p=d[c-1].column,l=p+a.nodeMinColumnSpace(d[c-1],!1)+l+1,n=Math.max(h[c],l)):(p=d[c-1].column,l=p+a.nodeMinColumnSpace(d[c-1],!1)+l+1,p=d[c+1].column,m=p-a.nodeMinColumnSpace(d[c+1],!0)-m-1,l<h[c]&&h[c]<m?n=h[c]:l>=h[c]?n=l:m<=h[c]&&(n=m));n!==k&&(g=!0,d[c].column=n)}Zo(a,b,d);a.normalize()}
function Dp(a,b){e&&(t.q(b,Y,"packAux:column"),t.q(1,Y,"packAux:direction"));for(var c=!0,d=a.network.vertexes.k,f;d.next();){f=d.value;var g=a.nodeMinColumnSpace(f,!0),h=a.nodeMinColumnSpace(f,!1);if(f.column-g<=b&&f.column+h>=b){c=!1;break}}g=!1;if(c)for(d.reset();d.next();)f=d.value,f.column>b&&(f.column-=1,g=!0);return g}
function Ep(a,b){e&&(t.q(b,Y,"tightPackAux:column"),t.q(1,Y,"tightPackAux:direction"));var c=b,c=b+1,d,f=[],g=[];for(d=0;d<=a.kb;d++)f[d]=!1,g[d]=!1;for(var h=a.network.vertexes.k;h.next();){d=h.value;var k=d.column-a.nodeMinColumnSpace(d,!0),l=d.column+a.nodeMinColumnSpace(d,!1);k<=b&&l>=b&&(f[d.layer]=!0);k<=c&&l>=c&&(g[d.layer]=!0)}k=!0;c=!1;for(d=0;d<=a.kb;d++)k=k&&!(f[d]&&g[d]);if(k)for(h.reset();h.next();)d=h.value,d.column>b&&(d.column-=1,c=!0);return c}
function Bp(a,b){e&&t.q(b,Y,"componentPack:direction");for(var c=0;c<=a.Ib;c++)for(;Dp(a,c););a.normalize();for(c=0;c<a.Ib;c++)for(;Ep(a,c););a.normalize();var d,f,g,h;if(0<b)for(c=0;c<=a.Ib;c++)for(d=ap(a),f=dp(a),g=f+1;f<g;)g=f,Fp(a,c,1),h=dp(a),h>f?bp(a,d):h<f&&(f=h,d=ap(a));if(0>b)for(c=a.Ib;0<=c;c--)for(d=ap(a),f=dp(a),g=f+1;f<g;)g=f,Fp(a,c,-1),h=dp(a),h>f?bp(a,d):h<f&&(f=h,d=ap(a));a.normalize()}
function Fp(a,b,c){a.lg=0;for(var d=a.network.vertexes.k,f;d.next();)d.value.component=-1;if(0<c)for(d.reset();d.next();)f=d.value,f.column-a.nodeMinColumnSpace(f,!0)<=b&&(f.component=a.lg);if(0>c)for(d.reset();d.next();)f=d.value,f.column+a.nodeMinColumnSpace(f,!1)>=b&&(f.component=a.lg);a.lg++;for(d.reset();d.next();)f=d.value,-1===f.component&&(hp(a,f,a.lg,-1,!0,!0),a.lg++);b=[];for(f=0;f<a.lg*a.lg;f++)b[f]=!1;var g=[];for(f=0;f<(a.kb+1)*(a.Ib+1);f++)g[f]=-1;for(d.reset();d.next();){f=d.value;
for(var h=f.layer,k=Math.max(0,f.column-a.nodeMinColumnSpace(f,!0)),l=Math.min(a.Ib,f.column+a.nodeMinColumnSpace(f,!1));k<=l;k++)g[h*(a.Ib+1)+k]=f.component}for(f=0;f<=a.kb;f++){if(0<c)for(k=0;k<a.Ib;k++)-1!==g[f*(a.Ib+1)+k]&&-1!==g[f*(a.Ib+1)+k+1]&&g[f*(a.Ib+1)+k]!==g[f*(a.Ib+1)+k+1]&&(b[g[f*(a.Ib+1)+k]*a.lg+g[f*(a.Ib+1)+k+1]]=!0);if(0>c)for(k=a.Ib;0<k;k--)-1!==g[f*(a.Ib+1)+k]&&-1!==g[f*(a.Ib+1)+k-1]&&g[f*(a.Ib+1)+k]!==g[f*(a.Ib+1)+k-1]&&(b[g[f*(a.Ib+1)+k]*a.lg+g[f*(a.Ib+1)+k-1]]=!0)}g=[];for(f=
0;f<a.lg;f++)g[f]=!0;h=new B("number");for(h.add(0);0!==h.count;)if(l=h.n[h.count-1],h.qd(h.count-1),g[l])for(g[l]=!1,f=0;f<a.lg;f++)b[l*a.lg+f]&&h.Jd(0,f);if(0<c)for(d.reset();d.next();)f=d.value,g[f.component]&&(f.column-=1);if(0>c)for(d.reset();d.next();)f=d.value,g[f.component]&&(f.column+=1)}Y.prototype.commitLayout=function(){if(this.yl)for(var a=Wo(this,!0),b=Wo(this,!1),c=this.network.edges.k,d;c.next();)d=c.value.link,null!==d&&(d.ob=a,d.rb=b);this.commitNodes();this.Uz();this.rt&&this.commitLinks()};
function Wo(a,b){return 270===a.sa?b?Qb:Xb:90===a.sa?b?Xb:Qb:180===a.sa?b?Vb:Wb:b?Wb:Vb}
Y.prototype.commitNodes=function(){this.Wg=[];this.ig=[];this.Jf=[];this.Ob=[];for(var a=0;a<=this.kb;a++)this.Wg[a]=0,this.ig[a]=0,this.Jf[a]=0,this.Ob[a]=0;for(var a=this.network.vertexes.k,b,c;a.next();)b=a.value,c=b.layer,this.Wg[c]=Math.max(this.Wg[c],this.nodeMinLayerSpace(b,!0)),this.ig[c]=Math.max(this.ig[c],this.nodeMinLayerSpace(b,!1));var d=0,f=this.dm;for(b=0;b<=this.kb;b++)c=f,0>=this.Wg[b]+this.ig[b]&&(c=0),0<b&&(d+=c/2),90===this.sa||0===this.sa?(d+=this.ig[b],this.Jf[b]=d,d+=this.Wg[b]):
(d+=this.Wg[b],this.Jf[b]=d,d+=this.ig[b]),b<this.kb&&(d+=c/2),this.Ob[b]=d;f=d;d=this.Fd;for(b=0;b<=this.kb;b++)270===this.sa?this.Jf[b]=d.y+this.Jf[b]:90===this.sa?(this.Jf[b]=d.y+f-this.Jf[b],this.Ob[b]=f-this.Ob[b]):180===this.sa?this.Jf[b]=d.x+this.Jf[b]:(this.Jf[b]=d.x+f-this.Jf[b],this.Ob[b]=f-this.Ob[b]);for(a.reset();a.next();){b=a.value;c=b.layer;var g=b.column|0;270===this.sa||90===this.sa?(f=d.x+this.zd*g,c=this.Jf[c]):(f=this.Jf[c],c=d.y+this.zd*g);b.Da=f;b.Oa=c;b.commit()}};
Y.prototype.Uz=function(){for(var a=0,b=this.dm,c=0;c<=this.kb;c++)a+=this.Wg[c],a+=this.ig[c];for(var a=a+this.kb*b,b=[],c=this.zd*this.Ib,d=this.mJ;0<=d;d--)270===this.sa?0===d?b.push(new x(0,0,c,Math.abs(this.Ob[0]))):b.push(new x(0,this.Ob[d-1],c,Math.abs(this.Ob[d-1]-this.Ob[d]))):90===this.sa?0===d?b.push(new x(0,this.Ob[0],c,Math.abs(this.Ob[0]-a))):b.push(new x(0,this.Ob[d],c,Math.abs(this.Ob[d-1]-this.Ob[d]))):180===this.sa?0===d?b.push(new x(0,0,Math.abs(this.Ob[0]),c)):b.push(new x(this.Ob[d-
1],0,Math.abs(this.Ob[d-1]-this.Ob[d]),c)):0===d?b.push(new x(this.Ob[0],0,Math.abs(this.Ob[0]-a),c)):b.push(new x(this.Ob[d],0,Math.abs(this.Ob[d-1]-this.Ob[d]),c));this.commitLayers(b,F.mj)};Y.prototype.commitLayers=function(){};
Y.prototype.commitLinks=function(){for(var a=this.network.edges.k,b,c;a.next();)c=a.value.link,"undefined"!==typeof c&&null!==c&&(c.zl(),c.Uo(),c.Xi());for(a.reset();a.next();)c=a.value.link,"undefined"!==typeof c&&null!==c&&c.updateRoute();for(a.reset();a.next();)if(b=a.value,c=b.link){c.zl();var d=c,f=d.aa,g=d.ca,h=d.ud,k=d.fe;if(b.valid){if(c.De===Pg&&4===c.pa){if(b.rev)var l=f,f=g,g=l,m=h,h=k,k=m;if(b.fromVertex.column===b.toVertex.column){var n=c.getLinkPoint(f,h,c.computeSpot(!0),!0,!1,g,k),
p=c.getLinkPoint(g,k,c.computeSpot(!1),!1,!1,f,h);c.Uo();c.Xk(n.x,n.y);c.Xk((2*n.x+p.x)/3,(2*n.y+p.y)/3);c.Xk((n.x+2*p.x)/3,(n.y+2*p.y)/3);c.Xk(p.x,p.y)}else{var q=!1,r=!1;null!==h&&c.computeSpot(!0)===wb&&(q=!0);null!==k&&c.computeSpot(!1)===wb&&(r=!0);if(q||r){var s=c.o(0).x,u=c.o(0).y,v=c.o(1).x,D=c.o(1).y,A=c.o(2).x,G=c.o(2).y,K=c.o(3).x,N=c.o(3).y;if(q){90===this.sa||270===this.sa?(v=s,D=(u+N)/2):(v=(s+K)/2,D=u);c.Y(1,v,D);var O=c.getLinkPoint(f,h,c.computeSpot(!0),!0,!1,g,k);c.Y(0,O.x,O.y)}r&&
(90===this.sa||270===this.sa?(A=K,G=(u+N)/2):(A=(s+K)/2,G=N),c.Y(2,A,G),O=c.getLinkPoint(g,k,c.computeSpot(!1),!1,!1,f,h),c.Y(3,O.x,O.y))}}}c.Xi()}else if(b.fromVertex.layer===b.toVertex.layer)c.Xi();else{var U=!1,X=!1,Z,P=c.gt+1;if(c.ic)X=!0,Z=c.pa,4<Z&&c.points.removeRange(2,Z-3);else if(c.De===Pg)U=!0,Z=c.pa,4<Z&&c.points.removeRange(2,Z-3),P=2;else{Z=c.pa;var pa=c.computeSpot(!0)===wb,Ya=c.computeSpot(!1)===wb;2<Z&&pa&&Ya?c.points.removeRange(1,Z-2):3<Z&&pa&&!Ya?c.points.removeRange(1,Z-3):3<
Z&&!pa&&Ya?c.points.removeRange(2,Z-2):4<Z&&!pa&&!Ya&&c.points.removeRange(2,Z-3)}var za=b.fromVertex,Na=b.toVertex,wa,Pa;if(b.rev){for(var Ga;null!==Na&&za!==Na;){Pa=wa=null;for(var Kf=Na.tc.k;Kf.next()&&(ic=Kf.value,ic.link!==b.link||(wa=ic.fromVertex,Pa=ic.toVertex,null!==wa.rd)););wa!==za&&(kb=c.o(P-1).x,fb=c.o(P-1).y,Ia=wa.Da,Ja=wa.Oa,X?180===this.sa||0===this.sa?2===P?(c.C(P++,kb,fb),c.C(P++,kb,Ja)):(md=null!==Pa?Pa.Oa:fb,md!==Ja&&(Xa=this.Ob[wa.layer-1],c.C(P++,Xa,fb),c.C(P++,Xa,Ja))):2===
P?(c.C(P++,kb,fb),c.C(P++,Ia,fb)):(mf=null!==Pa?Pa.Da:kb,mf!==Ia&&(Xa=this.Ob[wa.layer-1],c.C(P++,kb,Xa),c.C(P++,Ia,Xa))):2===P?U?(db=Math.max(10,this.Wg[Na.layer]),Ab=Math.max(10,this.ig[Na.layer]),180===this.sa?(Ga=Na.T.x,c.C(P++,Ga-db,Ja),c.C(P++,Ga,Ja),c.C(P++,Ga+Ab,Ja)):90===this.sa?(Ga=Na.T.y+Na.T.height,c.C(P++,Ia,Ga+Ab),c.C(P++,Ia,Ga),c.C(P++,Ia,Ga-db)):270===this.sa?(Ga=Na.T.y,c.C(P++,Ia,Ga-db),c.C(P++,Ia,Ga),c.C(P++,Ia,Ga+Ab)):(Ga=Na.T.x+Na.T.width,c.C(P++,Ga+Ab,Ja),c.C(P++,Ga,Ja),c.C(P++,
Ga-db,Ja))):(c.C(P++,kb,fb),180===this.sa||0===this.sa?c.C(P++,kb,Ja):c.C(P++,Ia,fb),c.C(P++,Ia,Ja)):(db=Math.max(10,this.Wg[wa.layer]),Ab=Math.max(10,this.ig[wa.layer]),180===this.sa?(U&&c.C(P++,Ia-db,Ja),c.C(P++,Ia,Ja),U&&c.C(P++,Ia+Ab,Ja)):90===this.sa?(U&&c.C(P++,Ia,Ja+Ab),c.C(P++,Ia,Ja),U&&c.C(P++,Ia,Ja-db)):270===this.sa?(U&&c.C(P++,Ia,Ja-db),c.C(P++,Ia,Ja),U&&c.C(P++,Ia,Ja+Ab)):(U&&c.C(P++,Ia+Ab,Ja),c.C(P++,Ia,Ja),U&&c.C(P++,Ia-db,Ja))));Na=wa}if(null===k||c.computeSpot(!1)!==wb)if(kb=c.o(P-
1).x,fb=c.o(P-1).y,Ia=c.o(P).x,Ja=c.o(P).y,X){var lf=this.ig[za.layer],$b;180===this.sa||0===this.sa?($b=fb,$b>=za.T.y&&$b<=za.T.bottom&&(Ga=za.Da+lf,$b=$b<za.T.y+za.T.height/2?za.T.y-this.zd/2:za.T.bottom+this.zd/2,c.C(P++,Ga,fb),c.C(P++,Ga,$b)),c.C(P++,Ia,$b)):($b=kb,$b>=za.T.x&&$b<=za.T.right&&(Ga=za.Oa+lf,$b=$b<za.T.x+za.T.width/2?za.T.x-this.zd/2:za.T.right+this.zd/2,c.C(P++,kb,Ga),c.C(P++,$b,Ga)),c.C(P++,$b,Ja));c.C(P++,Ia,Ja)}else U?(db=Math.max(10,this.Wg[za.layer]),Ab=Math.max(10,this.ig[za.layer]),
180===this.sa?(Ga=za.T.x+za.T.width,c.Y(P-2,Ga,fb),c.Y(P-1,Ga+Ab,fb)):90===this.sa?(Ga=za.T.y,c.Y(P-2,kb,Ga),c.Y(P-1,kb,Ga-db)):270===this.sa?(Ga=za.T.y+za.T.height,c.Y(P-2,kb,Ga),c.Y(P-1,kb,Ga+Ab)):(Ga=za.T.x,c.Y(P-2,Ga,fb),c.Y(P-1,Ga-db,fb))):(180===this.sa||0===this.sa?c.C(P++,Ia,fb):c.C(P++,kb,Ja),c.C(P++,Ia,Ja))}else{for(;null!==za&&za!==Na;){Pa=wa=null;for(var gg=za.gc.k,ic;gg.next()&&(ic=gg.value,ic.link!==b.link||(wa=ic.toVertex,Pa=ic.fromVertex,null!==Pa.rd&&(Pa=null),null!==wa.rd)););var kb,
fb,Ia,Ja,Xa,db,Ab;if(wa!==Na)if(kb=c.o(P-1).x,fb=c.o(P-1).y,Ia=wa.Da,Ja=wa.Oa,X)if(180===this.sa||0===this.sa){var md=null!==Pa?Pa.Oa:fb;md!==Ja&&(Xa=this.Ob[wa.layer],2===P&&(Xa=0===this.sa?Math.max(Xa,kb):Math.min(Xa,kb)),c.C(P++,Xa,fb),c.C(P++,Xa,Ja))}else{var mf=null!==Pa?Pa.Da:kb;mf!==Ia&&(Xa=this.Ob[wa.layer],2===P&&(Xa=90===this.sa?Math.max(Xa,fb):Math.min(Xa,fb)),c.C(P++,kb,Xa),c.C(P++,Ia,Xa))}else db=Math.max(10,this.Wg[wa.layer]),Ab=Math.max(10,this.ig[wa.layer]),180===this.sa?(c.C(P++,
Ia+Ab,Ja),U&&c.C(P++,Ia,Ja),c.C(P++,Ia-db,Ja)):90===this.sa?(c.C(P++,Ia,Ja-db),U&&c.C(P++,Ia,Ja),c.C(P++,Ia,Ja+Ab)):270===this.sa?(c.C(P++,Ia,Ja+Ab),U&&c.C(P++,Ia,Ja),c.C(P++,Ia,Ja-db)):(c.C(P++,Ia-db,Ja),U&&c.C(P++,Ia,Ja),c.C(P++,Ia+Ab,Ja));za=wa}X&&(kb=c.o(P-1).x,fb=c.o(P-1).y,Ia=c.o(P).x,Ja=c.o(P).y,180===this.sa||0===this.sa?fb!==Ja&&(Xa=0===this.sa?Math.min(Math.max((Ia+kb)/2,this.Ob[Na.layer]),Ia):Math.max(Math.min((Ia+kb)/2,this.Ob[Na.layer]),Ia),c.C(P++,Xa,fb),c.C(P++,Xa,Ja)):kb!==Ia&&(Xa=
90===this.sa?Math.min(Math.max((Ja+fb)/2,this.Ob[Na.layer]),Ja):Math.max(Math.min((Ja+fb)/2,this.Ob[Na.layer]),Ja),c.C(P++,kb,Xa),c.C(P++,Ia,Xa)))}if(null!==d&&U){if(null!==h){if(c.computeSpot(!0)===wb){var Dd=c.o(0),nd=c.o(2);Dd.M(nd)||c.Y(1,(Dd.x+nd.x)/2,(Dd.y+nd.y)/2)}O=c.getLinkPoint(f,h,wb,!0,!1,g,k);c.Y(0,O.x,O.y)}null!==k&&(c.computeSpot(!1)===wb&&(Dd=c.o(c.pa-1),nd=c.o(c.pa-3),Dd.M(nd)||c.Y(c.pa-2,(Dd.x+nd.x)/2,(Dd.y+nd.y)/2)),O=c.getLinkPoint(g,k,wb,!1,!1,f,h),c.Y(c.pa-1,O.x,O.y))}c.Xi();
b.commit()}}for(var Ne=new B(T),Ed=this.network.edges.k,se;Ed.next();)se=Ed.value.link,null!==se&&se.ic&&!Ne.contains(se)&&Ne.add(se);if(0<Ne.count)if(90===this.sa||270===this.sa){for(var Lf=0,Bb=new B(Gp),Cg=Ne.k,Ib,rb,Za;Cg.next();)if(Ib=Cg.value,null!==Ib&&Ib.ic)for(var yb=2;yb<Ib.pa-3;yb++)if(rb=Ib.o(yb),Za=Ib.o(yb+1),this.I(rb.y,Za.y)&&!this.I(rb.x,Za.x)){var jc=new Gp;jc.layer=Math.floor(rb.y/2);var Mf=Ib.o(0),Nf=Ib.o(Ib.pa-1);jc.$a=Mf.x*Mf.x+Mf.y;jc.ae=Nf.x*Nf.x+Nf.y;jc.Be=Math.min(rb.x,Za.x);
jc.Ud=Math.max(rb.x,Za.x);jc.index=yb;jc.link=Ib;if(yb+2<Ib.pa){var kc=Ib.o(yb-1),Uc=Ib.o(yb+2),od=0;kc.y<rb.y?od=Uc.y<rb.y?3:rb.x<Za.x?2:1:kc.y>rb.y&&(od=Uc.y>rb.y?0:Za.x<rb.x?2:1);jc.hi=od}Bb.add(jc)}if(1<Bb.count){Bb.sort(this.fG);for(var ec=0;ec<Bb.count;){for(var pd=Bb.n[ec].layer,$a=ec+1;$a<Bb.count&&Bb.n[$a].layer===pd;)$a++;if(1<$a-ec)for(var Ua=ec;Ua<$a;){for(var Rb=Bb.n[Ua].Ud,Jb=ec+1;Jb<$a&&Bb.n[Jb].Be<Rb;)Rb=Math.max(Rb,Bb.n[Jb].Ud),Jb++;var Oe=Jb-Ua;if(1<Oe){Bb.Up(this.px,Ua,Ua+Oe);for(var Od=
1,pc=Bb.n[Ua].ae,Kb,yb=Ua;yb<Jb;yb++)Kb=Bb.n[yb],Kb.ae!==pc&&(Od++,pc=Kb.ae);Bb.Up(this.eG,Ua,Ua+Oe);for(var de=1,pc=Bb.n[Ua].$a,yb=Ua;yb<Jb;yb++)Kb=Bb.n[yb],Kb.$a!==pc&&(de++,pc=Kb.$a);var sb,Fd;Od<de?(sb=!1,Fd=Od,pc=Bb.n[Ua].ae,Bb.Up(this.px,Ua,Ua+Oe)):(sb=!0,Fd=de,pc=Bb.n[Ua].$a);for(var Dg=0,yb=Ua;yb<Jb;yb++){Kb=Bb.n[yb];(sb?Kb.$a:Kb.ae)!==pc&&(Dg++,pc=sb?Kb.$a:Kb.ae);Ib=Kb.link;rb=Ib.o(Kb.index);Za=Ib.o(Kb.index+1);var Pe=this.yp*(Dg-(Fd-1)/2);if(!Ib.dj||Hp(rb.x,rb.y+Pe,Za.x,Za.y+Pe))Lf++,Ib.zl(),
Ib.Y(Kb.index,rb.x,rb.y+Pe),Ib.Y(Kb.index+1,Za.x,Za.y+Pe),Ib.Xi()}}Ua=Jb}ec=$a}}}else{for(var Gd=0,gb=new B(Gp),nf=Ne.k,ib,tb,Vc;nf.next();)if(ib=nf.value,null!==ib&&ib.ic)for(var Nb=2;Nb<ib.pa-3;Nb++)if(tb=ib.o(Nb),Vc=ib.o(Nb+1),this.I(tb.x,Vc.x)&&!this.I(tb.y,Vc.y)){var Pd=new Gp;Pd.layer=Math.floor(tb.x/2);var Qd=ib.o(0),ee=ib.o(ib.pa-1);Pd.$a=Qd.x+Qd.y*Qd.y;Pd.ae=ee.x+ee.y*ee.y;Pd.Be=Math.min(tb.y,Vc.y);Pd.Ud=Math.max(tb.y,Vc.y);Pd.index=Nb;Pd.link=ib;if(Nb+2<ib.pa){var Fc=ib.o(Nb-1),te=ib.o(Nb+
2),Gc=0;Fc.x<tb.x?Gc=te.x<tb.x?3:tb.y<Vc.y?2:1:Fc.x>tb.x&&(Gc=te.x>tb.x?0:Vc.y<tb.y?2:1);Pd.hi=Gc}gb.add(Pd)}if(1<gb.count){gb.sort(this.fG);for(var Cb=0;Cb<gb.count;){for(var Qe=gb.n[Cb].layer,qd=Cb+1;qd<gb.count&&gb.n[qd].layer===Qe;)qd++;if(1<qd-Cb)for(var lb=Cb;lb<qd;){for(var Hd=gb.n[lb].Ud,Db=Cb+1;Db<qd&&gb.n[Db].Be<Hd;)Hd=Math.max(Hd,gb.n[Db].Ud),Db++;var Rd=Db-lb;if(1<Rd){gb.Up(this.px,lb,lb+Rd);for(var Id=1,lc=gb.n[lb].ae,Ob,Nb=lb;Nb<Db;Nb++)Ob=gb.n[Nb],Ob.ae!==lc&&(Id++,lc=Ob.ae);gb.Up(this.eG,
lb,lb+Rd);for(var nb=1,lc=gb.n[lb].$a,Nb=lb;Nb<Db;Nb++)Ob=gb.n[Nb],Ob.$a!==lc&&(nb++,lc=Ob.$a);var of,bb;Id<nb?(of=!1,bb=Id,lc=gb.n[lb].ae,gb.Up(this.px,lb,lb+Rd)):(of=!0,bb=nb,lc=gb.n[lb].$a);for(var Jd=0,Nb=lb;Nb<Db;Nb++){Ob=gb.n[Nb];(of?Ob.$a:Ob.ae)!==lc&&(Jd++,lc=of?Ob.$a:Ob.ae);ib=Ob.link;tb=ib.o(Ob.index);Vc=ib.o(Ob.index+1);var Wc=this.yp*(Jd-(bb-1)/2);if(!ib.dj||Hp(tb.x+Wc,tb.y,Vc.x+Wc,Vc.y))Gd++,ib.zl(),ib.Y(Ob.index,tb.x+Wc,tb.y),ib.Y(Ob.index+1,Vc.x+Wc,Vc.y),ib.Xi()}}lb=Db}Cb=qd}}}};
function Gp(){this.index=this.Ud=this.Be=this.ae=this.$a=this.layer=0;this.link=null;this.hi=0}t.Vd(Gp,{layer:!0,$a:!0,ae:!0,Be:!0,Ud:!0,index:!0,link:!0,hi:!0});Y.prototype.fG=function(a,b){return a instanceof Gp&&b instanceof Gp&&a!==b?a.layer<b.layer?-1:a.layer>b.layer?1:a.Be<b.Be?-1:a.Be>b.Be?1:a.Ud<b.Ud?-1:a.Ud>b.Ud?1:0:0};
Y.prototype.eG=function(a,b){return a instanceof Gp&&b instanceof Gp&&a!==b?a.$a<b.$a?-1:a.$a>b.$a||a.hi<b.hi?1:a.hi>b.hi||a.Be<b.Be?-1:a.Be>b.Be?1:a.Ud<b.Ud?-1:a.Ud>b.Ud?1:0:0};Y.prototype.px=function(a,b){return a instanceof Gp&&b instanceof Gp&&a!==b?a.ae<b.ae?-1:a.ae>b.ae||a.hi<b.hi?1:a.hi>b.hi||a.Be<b.Be?-1:a.Be>b.Be?1:a.Ud<b.Ud?-1:a.Ud>b.Ud?1:0:0};Y.prototype.I=function(a,b){e&&(t.q(a,Y,"isApprox:a"),t.q(b,Y,"isApprox:b"));var c=a-b;return-1<c&&1>c};
function Hp(a,b,c,d){e&&(t.q(a,Y,"isUnoccupied2:px"),t.q(b,Y,"isUnoccupied2:py"),t.q(c,Y,"isUnoccupied2:qx"),t.q(d,Y,"isUnoccupied2:qy"));return!0}function Yo(a,b){var c,d=a.Od[b];if(d>=a.Zg.length){c=[];var f;for(f=0;f<a.Zg.length;f++)c[f]=a.Zg[f];a.Zg=c}"undefined"===typeof a.Zg[d]||null===a.Zg[d]?c=[]:(c=a.Zg[d],a.Zg[d]=null);var d=a.Gr[b],g;for(f=0;f<d.length;f++)g=d[f],g instanceof Ip&&(c[g.index]=g);return c}function Zo(a,b,c){a.Zg[a.Od[b]]=c}t.g(Y,"layerSpacing",Y.prototype.layerSpacing);
t.defineProperty(Y,{layerSpacing:"layerSpacing"},function(){return this.dm},function(a){this.dm!==a&&(t.i(a,"number",Y,"layerSpacing"),0<=a&&(this.dm=a,this.J()))});t.g(Y,"columnSpacing",Y.prototype.eI);t.defineProperty(Y,{eI:"columnSpacing"},function(){return this.zd},function(a){this.zd!==a&&(t.i(a,"number",Y,"columnSpacing"),0<=a&&(this.zd=a,this.J()))});t.g(Y,"direction",Y.prototype.direction);
t.defineProperty(Y,{direction:"direction"},function(){return this.sa},function(a){this.sa!==a&&(t.i(a,"number",Y,"direction"),this.sa=a,this.J())});t.g(Y,"cycleRemoveOption",Y.prototype.hE);t.defineProperty(Y,{hE:"cycleRemoveOption"},function(){return this.Dn},function(a){this.Dn!==a&&(t.Aa(a,Y,Y,"cycleRemoveOption"),a===Ro||a===Co)&&(this.Dn=a,this.J())});t.g(Y,"layeringOption",Y.prototype.lF);
t.defineProperty(Y,{lF:"layeringOption"},function(){return this.mo},function(a){this.mo!==a&&(t.Aa(a,Y,Y,"layeringOption"),a===Do||a===ip||a===kp)&&(this.mo=a,this.J())});t.g(Y,"initializeOption",Y.prototype.ZE);t.defineProperty(Y,{ZE:"initializeOption"},function(){return this.Yn},function(a){this.Yn!==a&&(t.Aa(a,Y,Y,"initializeOption"),a===Eo||a===qp||a===op)&&(this.Yn=a,this.J())});t.g(Y,"iterations",Y.prototype.eJ);
t.defineProperty(Y,{eJ:"iterations"},function(){return this.am},function(a){this.am!==a&&(t.q(a,No,"iterations"),0<=a&&(this.am=a,this.J()))});t.g(Y,"aggressiveOption",Y.prototype.JD);t.defineProperty(Y,{JD:"aggressiveOption"},function(){return this.vn},function(a){this.vn!==a&&(t.Aa(a,Y,Y,"aggressiveOption"),a===up||a===Fo||a===vp)&&(this.vn=a,this.J())});t.g(Y,"packOption",Y.prototype.BJ);
t.defineProperty(Y,{BJ:"packOption"},function(){return this.Hi},function(a){this.Hi!==a&&(t.i(a,"number",Y,"packOption"),0<=a&&8>a&&(this.Hi=a,this.J()))});t.g(Y,"setsPortSpots",Y.prototype.yl);t.defineProperty(Y,{yl:"setsPortSpots"},function(){return this.Lh},function(a){this.Lh!==a&&(t.i(a,"boolean",Y,"setsPortSpots"),this.Lh=a,this.J())});t.g(Y,"linkSpacing",Y.prototype.yp);
t.defineProperty(Y,{yp:"linkSpacing"},function(){return this.yj},function(a){this.yj!==a&&(t.i(a,"number",Y,"linkSpacing"),0<=a&&(this.yj=a,this.J()))});t.A(Y,{mJ:"maxLayer"},function(){return this.kb});t.A(Y,{EK:"maxIndex"},function(){return this.cv});t.A(Y,{DK:"maxColumn"},function(){return this.Ib});t.A(Y,{GK:"minIndexLayer"},function(){return this.zr});t.A(Y,{FK:"maxIndexLayer"},function(){return this.Kf});var Co;Y.CycleDepthFirst=Co=t.w(Y,"CycleDepthFirst",0);var Ro;
Y.CycleGreedy=Ro=t.w(Y,"CycleGreedy",1);var Do;Y.LayerOptimalLinkLength=Do=t.w(Y,"LayerOptimalLinkLength",0);var ip;Y.LayerLongestPathSink=ip=t.w(Y,"LayerLongestPathSink",1);var kp;Y.LayerLongestPathSource=kp=t.w(Y,"LayerLongestPathSource",2);var Eo;Y.InitDepthFirstOut=Eo=t.w(Y,"InitDepthFirstOut",0);var qp;Y.InitDepthFirstIn=qp=t.w(Y,"InitDepthFirstIn",1);var op;Y.InitNaive=op=t.w(Y,"InitNaive",2);var up;Y.AggressiveNone=up=t.w(Y,"AggressiveNone",0);var Fo;
Y.AggressiveLess=Fo=t.w(Y,"AggressiveLess",1);var vp;Y.AggressiveMore=vp=t.w(Y,"AggressiveMore",2);Y.PackNone=0;var wp;Y.PackExpand=wp=1;var xp;Y.PackStraighten=xp=2;var zp;Y.PackMedian=zp=4;var Go;Y.PackAll=Go=7;function No(){ta.call(this)}t.ga("LayeredDigraphNetwork",No);t.Ka(No,ta);No.prototype.createVertex=function(){return new Ip};No.prototype.createEdge=function(){return new Jp};
function Ip(){ua.call(this);this.index=this.column=this.layer=-1;this.component=NaN;this.near=null;this.valid=!1;this.finish=this.$o=NaN;this.Em=0;this.GA=this.HA=void 0}t.ga("LayeredDigraphVertex",Ip);t.Ka(Ip,ua);function Jp(){va.call(this);this.forest=this.rev=this.valid=!1;this.portToPos=this.portFromPos=NaN;this.portToColOffset=this.portFromColOffset=0}t.ga("LayeredDigraphEdge",Jp);t.Ka(Jp,va);
function W(){0<arguments.length&&t.ad(W);be.call(this);this.Yc=new ma(Object);this.Ji=Kp;this.If=Lp;this.Cs=Mp;this.Zu=Np;this.EB=null;this.sh=!0;this.cd=Op;this.bg=(new fa(10,10)).freeze();this.ua=new Pp;this.ta=new Pp}t.ga("TreeLayout",W);t.Ka(W,be);W.prototype.cloneProtected=function(a){be.prototype.cloneProtected.call(this,a);a.Ji=this.Ji;a.Cs=this.Cs;a.Zu=this.Zu;a.sh=this.sh;a.cd=this.cd;a.bg.assign(this.bg);a.ua.copyInheritedPropertiesFrom(this.ua);a.ta.copyInheritedPropertiesFrom(this.ta)};
W.prototype.createNetwork=function(){var a=new Qp;On(a,this);return a};W.prototype.makeNetwork=function(a){var b=this.createNetwork();a instanceof z?(Rp(this,b,a.jh,!0),Rp(this,b,a.links,!0)):a instanceof S?Rp(this,b,a.Rc,!1):Rp(this,b,a.k,!1);return b};
function Rp(a,b,c,d){for(c=c.k;c.next();){var f=c.value;f instanceof R&&f.canLayout()&&"Comment"!==f.Zc&&(!d||f.sp)&&(f.bi||(f instanceof S&&null===f.jc?Rp(a,b,f.Rc,!1):b.Ko(f)))}for(c.reset();c.next();)if(f=c.value,f instanceof T&&f.canLayout()&&"Comment"!==f.Zc&&(!d||f.sp)){var g=f.aa;a=f.ca;null!==g&&null!==a&&g!==a&&"Comment"!==g.Zc&&"Comment"!==a.Zc&&(g=b.findGroupVertex(g),a=b.findGroupVertex(a),null!==g&&null!==a&&b.an(g,a,f))}}
W.prototype.doLayout=function(a){a||t.m("Layout.doLayout(collection) argument must not be null but a Diagram, a Group, or an Iterable of Parts");null===this.network&&(this.network=this.makeNetwork(a));this.Qe!==Sp&&(this.Fd=this.initialOrigin(this.Fd));var b=this.h;null===b&&a instanceof z&&(b=a);this.If=this.path===Kp&&null!==b?b.pd?Lp:Tp:this.path===Kp?Lp:this.path;if(0<this.network.vertexes.count){this.network.xw();for(b=this.network.vertexes.k;b.next();)a=b.value,a.initialized=!1,a.level=0,a.parent=
null,a.children=[];if(0<this.Yc.count)for(b=this.Yc.k,this.Yc=new ma(Pp);b.next();)a=b.value,a instanceof R?(a=this.network.Rm(a),null!==a&&this.Yc.add(a)):a instanceof Pp&&this.Yc.add(a);0===this.Yc.count&&this.findRoots();for(b=this.Yc.copy().k;b.next();)a=b.value,a.initialized||(a.initialized=!0,Up(this,a));for(a=this.Yc.k;a.next();)Vp(this,a.value);for(a=this.Yc.k;a.next();)Wp(this,a.value);for(a=this.Yc.k;a.next();)Xp(this,a.value);this.Mz();if(this.Xw===Yp){var c=[];for(a=this.network.vertexes.k;a.next();){var b=
a.value,d=b.parent;d||(d=b);var d=0===d.angle||180===d.angle,f=c[b.level];void 0===f&&(f=0);c[b.level]=Math.max(f,d?b.width:b.height)}for(f=0;f<c.length;f++)void 0===c[f]&&(c[f]=0);this.EB=c;for(a=this.network.vertexes.k;a.next();)b=a.value,(d=b.parent)||(d=b),0===d.angle||180===d.angle?(180===d.angle&&(b.fp+=c[b.level]-b.width),b.width=c[b.level]):(270===d.angle&&(b.gp+=c[b.level]-b.height),b.height=c[b.level])}else if(this.Xw===Zp)for(a=this.network.vertexes.k;a.next();){b=a.value;d=0===b.angle||
180===b.angle;c=-1;for(f=0;f<b.children.length;f++)var g=b.children[f],c=Math.max(c,d?g.width:g.height);if(0<=c)for(f=0;f<b.children.length;f++)g=b.children[f],d?(180===b.angle&&(g.fp+=c-g.width),g.width=c):(270===b.angle&&(g.gp+=c-g.height),g.height=c)}for(a=this.Yc.k;a.next();)this.layoutTree(a.value);this.arrangeTrees();this.updateParts()}this.network=null;this.Yc=new ma(Object);this.$e=!0};
W.prototype.findRoots=function(){for(var a=this.network.vertexes.k;a.next();){var b=a.value;switch(this.If){case Lp:0===b.tc.count&&this.Yc.add(b);break;case Tp:0===b.gc.count&&this.Yc.add(b);break;default:t.m("Unhandled path value "+this.If.toString())}}if(0===this.Yc.count){for(var a=999999,b=null,c=this.network.vertexes.k;c.next();){var d=c.value;switch(this.If){case Lp:d.tc.count<a&&(a=d.tc.count,b=d);break;case Tp:d.gc.count<a&&(a=d.gc.count,b=d);break;default:t.m("Unhandled path value "+this.If.toString())}}null!==
b&&this.Yc.add(b)}};
function Up(a,b){if(null!==b){e&&t.l(b,Pp,W,"walkTree:v");switch(a.If){case Lp:if(0<b.gc.count){for(var c=new B(Pp),d=b.xI;d.next();){var f=d.value;$p(a,b,f)&&c.add(f)}0<c.count&&(b.children=c.Ie())}break;case Tp:if(0<b.tc.count){c=new B(Pp);for(d=b.SJ;d.next();)f=d.value,$p(a,b,f)&&c.add(f);0<c.count&&(b.children=c.Ie())}break;default:t.m("Unhandled path value"+a.If.toString())}for(var c=b.children,d=c.length,g=0;g<d;g++)f=c[g],f.initialized=!0,f.level=b.level+1,f.parent=b,a.Yc.remove(f);for(g=0;g<
d;g++)f=c[g],Up(a,f)}}function $p(a,b,c){e&&t.l(b,Pp,W,"walkOK:v");e&&t.l(c,Pp,W,"walkOK:c");if(c.initialized){var d;if(null===b)d=!1;else{e&&t.l(c,Pp,W,"isAncestor:a");e&&t.l(b,Pp,W,"isAncestor:b");for(d=b.parent;null!==d&&d!==c;)d=d.parent;d=d===c}if(d||c.level>b.level)return!1;a.removeChild(c.parent,c)}return!0}
W.prototype.removeChild=function(a,b){if(null!==a&&null!==b){e&&t.l(a,Pp,W,"removeChild:p");e&&t.l(b,Pp,W,"removeChild:c");for(var c=a.children,d=0,f=0;f<c.length;f++)c[f]===b&&d++;if(0<d){for(var d=Array(c.length-d),g=0,f=0;f<c.length;f++)c[f]!==b&&(d[g++]=c[f]);a.children=d}}};
function Vp(a,b){if(null!==b){e&&t.l(b,Pp,W,"initializeTree:v");a.initializeTreeVertexValues(b);b.alignment===aq&&a.sortTreeVertexChildren(b);for(var c=0,d=b.Im,f=0,g=b.children,h=g.length,k=0;k<h;k++){var l=g[k];Vp(a,l);c+=l.descendantCount+1;d=Math.max(d,l.maxChildrenCount);f=Math.max(f,l.maxGenerationCount)}b.descendantCount=c;b.maxChildrenCount=d;b.maxGenerationCount=0<d?f+1:0}}
function bq(a,b){e&&t.l(b,Pp,W,"mom:v");switch(a.Cs){default:case Mp:return null!==b.parent?b.parent:a.ua;case cq:return null===b.parent?a.ua:null===b.parent.parent?a.ta:b.parent;case dq:if(null!==b.parent)return null!==b.parent.parent?b.parent.parent:a.ta;case eq:var c=!0;if(0===b.Im)c=!1;else for(var d=b.children,f=d.length,g=0;g<f;g++)if(0<d[g].Im){c=!1;break}return c&&null!==b.parent?a.ta:null!==b.parent?b.parent:a.ua}}
W.prototype.initializeTreeVertexValues=function(a){e&&t.l(a,Pp,W,"initializeTreeVertexValues:v");var b=bq(this,a);a.copyInheritedPropertiesFrom(b);if(null!==a.parent&&a.parent.alignment===aq){for(var b=a.angle,c=a.parent.children,d=0;d<c.length&&a!==c[d];)d++;0===d%2?d!==c.length-1&&(b=90===b?180:180===b?270:270===b?180:270):b=90===b?0:180===b?90:270===b?0:90;a.angle=b}a.initialized=!0};
function Wp(a,b){if(null!==b){e&&t.l(b,Pp,W,"assignTree:v");a.assignTreeVertexValues(b);for(var c=b.children,d=c.length,f=0;f<d;f++)Wp(a,c[f])}}W.prototype.assignTreeVertexValues=function(){};function Xp(a,b){if(null!==b){e&&t.l(b,Pp,W,"sortTree:v");b.alignment!==aq&&a.sortTreeVertexChildren(b);for(var c=b.children,d=c.length,f=0;f<d;f++)Xp(a,c[f])}}
W.prototype.sortTreeVertexChildren=function(a){e&&t.l(a,Pp,W,"sortTreeVertexChildren:v");switch(a.sorting){case fq:break;case gq:a.children.reverse();break;case hq:a.children.sort(a.comparer);break;case iq:a.children.sort(a.comparer);a.children.reverse();break;default:t.m("Unhandled sorting value "+a.sorting.toString())}};W.prototype.Mz=function(){if(this.comments)for(var a=this.network.vertexes.k;a.next();)this.addComments(a.value)};
W.prototype.addComments=function(a){e&&t.l(a,Pp,W,"addComments:v");var b=a.angle,c=a.parent,d=0,f=jq,f=!1;null!==c&&(d=c.angle,f=c.alignment,f=kq(f));var b=90===b||270===b,d=90===d||270===d,c=0===a.Im,g=0,h=0,k=0,l=a.commentSpacing;if(null!==a.Fc)for(var m=a.Fc.zE();m.next();){var n=m.value;"Comment"===n.Zc&&n.La()&&(null===a.comments&&(a.comments=[]),a.comments.push(n),n.sf(),n=n.Ga,b&&!c||!f&&!d&&c||f&&d&&c?(g=Math.max(g,n.width),h+=n.height+Math.abs(k)):(g+=n.width+Math.abs(k),h=Math.max(h,n.height)),
k=l)}null!==a.comments&&(b&&!c||!f&&!d&&c||f&&d&&c?(g+=Math.abs(a.commentMargin),h=Math.max(0,h-a.height)):(h+=Math.abs(a.commentMargin),g=Math.max(0,g-a.width)),f=t.ik(0,0,a.T.width+g,a.T.height+h),a.Pb=f,t.hc(f))};function kq(a){return a===lq||a===aq||a===mq||a===nq}function oq(a){return a===lq||a===aq}
function pq(a){e&&t.l(a,Pp,W,"isLeftSideBus:v");var b=a.parent;if(null!==b){var c=b.alignment;if(kq(c)){if(oq(c)){b=b.children;for(c=0;c<b.length&&a!==b[c];)c++;return 0===c%2}if(c===mq)return!0}}return!1}
W.prototype.layoutComments=function(a){e&&t.l(a,Pp,W,"layoutComments:v");if(null!==a.comments){var b=a.Fc.Ga,c=a.parent,d=a.angle,f=0,g=jq,g=!1;null!==c&&(f=c.angle,g=c.alignment,g=kq(g));for(var d=90===d||270===d,h=90===f||270===f,k=0===a.Im,l=pq(a),m=0,n=a.comments,p=n.length,q=t.K(),r=0;r<p;r++){var c=n[r],s=c.Ga;if(d&&!k||!g&&!h&&k||g&&h&&k){if(135<f&&!g||h&&l)if(0<=a.commentMargin){q.p(a.T.x-a.commentMargin-s.width,a.T.y+m);c.move(q);for(var u=c.wg();u.next();)c=u.value,c.ob=Vb,c.rb=Wb}else for(q.p(a.T.x+
2*a.O.x-a.commentMargin,a.T.y+m),c.move(q),u=c.wg();u.next();)c=u.value,c.ob=Wb,c.rb=Vb;else if(0<=a.commentMargin)for(q.p(a.T.x+2*a.O.x+a.commentMargin,a.T.y+m),c.move(q),u=c.wg();u.next();)c=u.value,c.ob=Wb,c.rb=Vb;else for(q.p(a.T.x+a.commentMargin-s.width,a.T.y+m),c.move(q),u=c.wg();u.next();)c=u.value,c.ob=Vb,c.rb=Wb;m=0<=a.commentSpacing?m+(s.height+a.commentSpacing):m+(a.commentSpacing-s.height)}else{if(135<f&&!g||!h&&l)if(0<=a.commentMargin)for(q.p(a.T.x+m,a.T.y-a.commentMargin-s.height),
c.move(q),u=c.wg();u.next();)c=u.value,c.ob=Qb,c.rb=Xb;else for(q.p(a.T.x+m,a.T.y+2*a.O.y-a.commentMargin),c.move(q),u=c.wg();u.next();)c=u.value,c.ob=Xb,c.rb=Qb;else if(0<=a.commentMargin)for(q.p(a.T.x+m,a.T.y+2*a.O.y+a.commentMargin),c.move(q),u=c.wg();u.next();)c=u.value,c.ob=Xb,c.rb=Qb;else for(q.p(a.T.x+m,a.T.y+a.commentMargin-s.height),c.move(q),u=c.wg();u.next();)c=u.value,c.ob=Qb,c.rb=Xb;m=0<=a.commentSpacing?m+(s.width+a.commentSpacing):m+(a.commentSpacing-s.width)}}t.B(q);b=m-a.commentSpacing-
(d?b.height:b.width);if(this.If===Lp)for(a=a.gc;a.next();)f=a.value,(c=f.link)&&!c.dj&&(c.dk=0<b?b:NaN);else for(a=a.tc;a.next();)f=a.value,(c=f.link)&&!c.dj&&(c.jk=0<b?b:NaN)}};
W.prototype.layoutTree=function(a){if(null!==a){e&&t.l(a,Pp,W,"layoutTree:v");for(var b=a.children,c=b.length,d=0;d<c;d++)this.layoutTree(b[d]);switch(a.compaction){case qq:rq(this,a);break;case sq:if(a.alignment===aq)rq(this,a);else if(e&&t.l(a,Pp,W,"layoutTreeBlock:v"),0===a.Im){var d=a.parent,b=!1,c=0,f=jq;null!==d&&(c=d.angle,f=d.alignment,b=kq(f));d=pq(a);a.na.p(0,0);a.Za.p(a.width,a.height);null===a.parent||null===a.comments||(180!==c&&270!==c||b)&&!d?a.Ia.p(0,0):180===c&&!b||(90===c||270===
c)&&d?a.Ia.p(a.width-2*a.O.x,0):a.Ia.p(0,a.height-2*a.O.y);a.tt=null;a.Kt=null}else{for(var g=tq(a),b=90===g||270===g,h=0,k=a.children,l=k.length,m=0;m<l;m++)var n=k[m],h=Math.max(h,b?n.Za.width:n.Za.height);var p=a.alignment,d=p===uq,q=p===vq,r=kq(p),s=Math.max(0,a.breadthLimit),c=wq(a),u=a.nodeSpacing,v=xq(a),D=a.rowSpacing,A=0;if(d||q||a.Op||a.Pp&&1===a.maxGenerationCount)A=Math.max(0,a.rowIndent);var d=a.width,f=a.height,G=0,K=0,N=0,O=null,U=null,X=0,Z=0,P=0,pa=0,Ya=0,za=0,Na=0,wa=0,n=0;r&&!oq(p)&&
135<g&&k.reverse();if(oq(p))if(1<l)for(m=0;m<l;m++)0===m%2&&m!==l-1?wa=Math.max(wa,b?k[m].Za.width:k[m].Za.height):0!==m%2&&(n=Math.max(n,b?k[m].Za.width:k[m].Za.height));else 1===l&&(wa=b?k[0].Za.width:k[0].Za.height);if(r){switch(p){case lq:Z=135>g?yq(a,k,wa,G,K):zq(a,k,wa,G,K);wa=Z[0];G=Z[1];K=Z[2];break;case mq:for(m=0;m<l;m++){var n=k[m],Pa=n.Za,O=0===za?0:D;b?(n.na.p(h-Pa.width,pa+O),G=Math.max(G,Pa.width),K=Math.max(K,pa+O+Pa.height),pa+=O+Pa.height):(n.na.p(P+O,h-Pa.height),G=Math.max(G,P+
O+Pa.width),K=Math.max(K,Pa.height),P+=O+Pa.width);za++}break;case nq:for(m=0;m<l;m++)n=k[m],Pa=n.Za,O=0===za?0:D,b?(n.na.p(u/2+a.O.x,pa+O),G=Math.max(G,Pa.width),K=Math.max(K,pa+O+Pa.height),pa+=O+Pa.height):(n.na.p(P+O,u/2+a.O.y),G=Math.max(G,P+O+Pa.width),K=Math.max(K,Pa.height),P+=O+Pa.width),za++}O=Aq(this,2);U=Aq(this,2);b?(O[0].p(0,0),O[1].p(0,K),U[0].p(G,0)):(O[0].p(0,0),O[1].p(G,0),U[0].p(0,K));U[1].p(G,K)}else for(m=0;m<l;m++){n=k[m];Pa=n.Za;if(b){0<s&&0<za&&P+u+Pa.width>s&&(P<h&&Bq(a,p,
h-P,0,Na,m-1),Ya++,za=0,Na=m,N=K,P=0,pa=135<g?-K-D:K+D);Cq(this,n,0,pa);var Ga=0;if(0===za){if(O=n.tt,U=n.Kt,X=Pa.width,Z=Pa.height,null===O||null===U||g!==tq(n))O=Aq(this,2),U=Aq(this,2),O[0].p(0,0),O[1].p(0,Z),U[0].p(X,0),U[1].p(X,Z)}else Z=Dq(this,a,n,O,U,X,Z),Ga=Z[0],O=Z[1],U=Z[2],X=Z[3],Z=Z[4],P<Pa.width&&0>Ga&&(Eq(a,-Ga,0,Na,m-1),Fq(O,-Ga,0),Fq(U,-Ga,0),Ga=0);n.na.p(Ga,pa);G=Math.max(G,X);K=Math.max(K,N+(0===Ya?0:D)+Pa.height);P=X}else{0<s&&0<za&&pa+u+Pa.height>s&&(pa<h&&Bq(a,p,0,h-pa,Na,m-
1),Ya++,za=0,Na=m,N=G,pa=0,P=135<g?-G-D:G+D);Cq(this,n,P,0);Ga=0;if(0===za){if(O=n.tt,U=n.Kt,X=Pa.width,Z=Pa.height,null===O||null===U||g!==tq(n))O=Aq(this,2),U=Aq(this,2),O[0].p(0,0),O[1].p(X,0),U[0].p(0,Z),U[1].p(X,Z)}else Z=Dq(this,a,n,O,U,X,Z),Ga=Z[0],O=Z[1],U=Z[2],X=Z[3],Z=Z[4],pa<Pa.height&&0>Ga&&(Eq(a,0,-Ga,Na,m-1),Fq(O,0,-Ga),Fq(U,0,-Ga),Ga=0);n.na.p(P,Ga);K=Math.max(K,Z);G=Math.max(G,N+(0===Ya?0:D)+Pa.width);pa=Z}za++}0<Ya&&(b?(K+=Math.max(0,c),P<G&&Bq(a,p,G-P,0,Na,l-1),0<A&&(q||Eq(a,A,0,
0,l-1),G+=A)):(G+=Math.max(0,c),pa<K&&Bq(a,p,0,K-pa,Na,l-1),0<A&&(q||Eq(a,0,A,0,l-1),K+=A)));q=h=0;switch(p){case Gq:b?h+=G/2-a.O.x-v/2:q+=K/2-a.O.y-v/2;break;case jq:0<Ya?b?h+=G/2-a.O.x-v/2:q+=K/2-a.O.y-v/2:b?(m=k[0].na.x+k[0].Ia.x,wa=k[l-1].na.x+k[l-1].Ia.x+2*k[l-1].O.x,h+=m+(wa-m)/2-a.O.x-v/2):(m=k[0].na.y+k[0].Ia.y,wa=k[l-1].na.y+k[l-1].Ia.y+2*k[l-1].O.y,q+=m+(wa-m)/2-a.O.y-v/2);break;case uq:b?(h-=v,G+=v):(q-=v,K+=v);break;case vq:b?(h+=G-a.width+v,G+=v):(q+=K-a.height+v,K+=v);break;case lq:b?
h=1<l?h+(wa+u/2-a.O.x):h+(k[0].O.x-a.O.x+k[0].Ia.x):q=1<l?q+(wa+u/2-a.O.y):q+(k[0].O.y-a.O.y+k[0].Ia.y);break;case mq:b?h+=G+u/2-a.O.x:q+=K+u/2-a.O.y;break;case nq:break;default:t.m("Unhandled alignment value "+p.toString())}for(m=0;m<l;m++)n=k[m],b?n.na.p(n.na.x+n.Ia.x-h,n.na.y+(135<g?(r?-K:-n.Za.height)+n.Ia.y-c:f+c+n.Ia.y)):n.na.p(n.na.x+(135<g?(r?-G:-n.Za.width)+n.Ia.x-c:d+c+n.Ia.x),n.na.y+n.Ia.y-q);l=k=0;r?b?(G=Hq(a,G,h),0>h&&(h=0),135<g&&(q+=K+c),K+=f+c,p===nq&&(k+=u/2+a.O.x),l+=f+c):(135<g&&
(h+=G+c),G+=d+c,K=Iq(a,K,q),0>q&&(q=0),p===nq&&(l+=u/2+a.O.y),k+=d+c):b?(null===a.comments?d>G&&(p=Jq(p,d-G,0),k=p[0],l=p[1],G=d,h=0):G=Hq(a,G,h),0>h&&(k-=h,h=0),135<g&&(q+=K+c),K=Math.max(Math.max(K,f),K+f+c),l+=f+c):(135<g&&(h+=G+c),G=Math.max(Math.max(G,d),G+d+c),null===a.comments?f>K&&(p=Jq(p,0,f-K),k=p[0],l=p[1],K=f,q=0):K=Iq(a,K,q),0>q&&(l-=q,q=0),k+=d+c);if(0<Ya)g=Aq(this,4),p=Aq(this,4),b?(g[2].p(0,f+c),g[3].p(g[2].x,K),p[2].p(G,g[2].y),p[3].p(p[2].x,g[3].y)):(g[2].p(d+c,0),g[3].p(G,g[2].y),
p[2].p(g[2].x,K),p[3].p(g[3].x,p[2].y));else{g=Aq(this,O.length+2);p=Aq(this,U.length+2);for(m=0;m<O.length;m++)r=O[m],g[m+2].p(r.x+k,r.y+l);for(m=0;m<U.length;m++)r=U[m],p[m+2].p(r.x+k,r.y+l)}b?(g[0].p(h,0),g[1].p(g[0].x,f),g[2].y<g[1].y&&(g[2].x>g[0].x?g[2].assign(g[1]):g[1].assign(g[2])),g[3].y<g[2].y&&(g[3].x>g[0].x?g[3].assign(g[2]):g[2].assign(g[3])),p[0].p(h+d,0),p[1].p(p[0].x,f),p[2].y<p[1].y&&(p[2].x<p[0].x?p[2].assign(p[1]):p[1].assign(p[2])),p[3].y<p[2].y&&(p[3].x<p[0].x?p[3].assign(p[2]):
p[2].assign(p[3])),g[2].y-=c/2,p[2].y-=c/2):(g[0].p(0,q),g[1].p(d,g[0].y),g[2].x<g[1].x&&(g[2].y>g[0].y?g[2].assign(g[1]):g[1].assign(g[2])),g[3].x<g[2].x&&(g[3].y>g[0].y?g[3].assign(g[2]):g[2].assign(g[3])),p[0].p(0,q+f),p[1].p(d,p[0].y),p[2].x<p[1].x&&(p[2].y<p[0].y?p[2].assign(p[1]):p[1].assign(p[2])),p[3].x<p[2].x&&(p[3].y<p[0].y?p[3].assign(p[2]):p[2].assign(p[3])),g[2].x-=c/2,p[2].x-=c/2);Kq(this,O);Kq(this,U);a.tt=g;a.Kt=p;a.Ia.p(h,q);a.Za.p(G,K)}break;default:t.m("Unhandled compaction value "+
a.compaction.toString())}}};
function rq(a,b){e&&t.l(b,Pp,W,"layoutTreeNone:v");if(0===b.Im){var c=!1,d=0,f=jq;null!==b.parent&&(d=b.parent.angle,f=b.parent.alignment,c=kq(f));f=pq(b);b.na.p(0,0);b.Za.p(b.width,b.height);null===b.parent||null===b.comments||(180!==d&&270!==d||c)&&!f?b.Ia.p(0,0):180===d&&!c||(90===d||270===d)&&f?b.Ia.p(b.width-2*b.O.x,0):b.Ia.p(0,b.height-2*b.O.y)}else{for(var c=tq(b),d=90===c||270===c,g=0,f=b.children,h=f.length,k=0;k<h;k++)var l=f[k],g=Math.max(g,d?l.Za.width:l.Za.height);var m=b.alignment,n=
m===uq,p=m===vq,q=kq(m),r=Math.max(0,b.breadthLimit),s=wq(b),u=b.nodeSpacing,v=xq(b),D=n||p?0:v/2,A=b.rowSpacing,G=0;if(n||p||b.Op||b.Pp&&1===b.maxGenerationCount)G=Math.max(0,b.rowIndent);var n=b.width,K=b.height,N=0,O=0,U=0,X=0,Z=0,P=0,pa=0,Ya=0,za=0,Na=0;q&&!oq(m)&&135<c&&f.reverse();if(oq(m))if(1<h)for(k=0;k<h;k++){var l=f[k],wa=l.Za;0===k%2&&k!==h-1?za=Math.max(za,(d?wa.width:wa.height)+Lq(l)-u):0!==k%2&&(Na=Math.max(Na,(d?wa.width:wa.height)+Lq(l)-u))}else 1===h&&(za=d?f[0].Za.width:f[0].Za.height);
if(q)switch(m){case lq:case aq:O=135>c?yq(b,f,za,N,O):zq(b,f,za,N,O);za=O[0];N=O[1];O=O[2];break;case mq:for(k=0;k<h;k++)l=f[k],wa=l.Za,r=0===pa?0:A,d?(l.na.p(g-wa.width,Z+r),N=Math.max(N,wa.width),O=Math.max(O,Z+r+wa.height),Z+=r+wa.height):(l.na.p(X+r,g-wa.height),N=Math.max(N,X+r+wa.width),O=Math.max(O,wa.height),X+=r+wa.width),pa++;break;case nq:for(g=0;g<h;g++)l=f[g],wa=l.Za,r=0===pa?0:A,d?(l.na.p(u/2+b.O.x,Z+r),N=Math.max(N,wa.width),O=Math.max(O,Z+r+wa.height),Z+=r+wa.height):(l.na.p(X+r,u/
2+b.O.y),N=Math.max(N,X+r+wa.width),O=Math.max(O,wa.height),X+=r+wa.width),pa++}else for(k=0;k<h;k++)l=f[k],wa=l.Za,d?(0<r&&0<pa&&X+u+wa.width>r&&(X<g&&Bq(b,m,g-X,0,Ya,k-1),P++,pa=0,Ya=k,U=O,X=0,Z=135<c?-O-A:O+A),Na=0===pa?D:u,Cq(a,l,0,Z),l.na.p(X+Na,Z),N=Math.max(N,X+Na+wa.width),O=Math.max(O,U+(0===P?0:A)+wa.height),X+=Na+wa.width):(0<r&&0<pa&&Z+u+wa.height>r&&(Z<g&&Bq(b,m,0,g-Z,Ya,k-1),P++,pa=0,Ya=k,U=N,Z=0,X=135<c?-N-A:N+A),Na=0===pa?D:u,Cq(a,l,X,0),l.na.p(X,Z+Na),O=Math.max(O,Z+Na+wa.height),
N=Math.max(N,U+(0===P?0:A)+wa.width),Z+=Na+wa.height),pa++;0<P&&(d?(O+=Math.max(0,s),X<N&&Bq(b,m,N-X,0,Ya,h-1),0<G&&(p||Eq(b,G,0,0,h-1),N+=G)):(N+=Math.max(0,s),Z<O&&Bq(b,m,0,O-Z,Ya,h-1),0<G&&(p||Eq(b,0,G,0,h-1),O+=G)));G=p=0;switch(m){case Gq:d?p+=N/2-b.O.x-v/2:G+=O/2-b.O.y-v/2;break;case jq:0<P?d?p+=N/2-b.O.x-v/2:G+=O/2-b.O.y-v/2:d?(m=f[0].na.x+f[0].Ia.x,u=f[h-1].na.x+f[h-1].Ia.x+2*f[h-1].O.x,p+=m+(u-m)/2-b.O.x-v/2):(m=f[0].na.y+f[0].Ia.y,u=f[h-1].na.y+f[h-1].Ia.y+2*f[h-1].O.y,G+=m+(u-m)/2-b.O.y-
v/2);break;case uq:d?(p-=v,N+=v):(G-=v,O+=v);break;case vq:d?(p+=N-b.width+v,N+=v):(G+=O-b.height+v,O+=v);break;case lq:case aq:d?p=1<h?p+(za+u/2-b.O.x):p+(f[0].O.x-b.O.x+f[0].Ia.x):G=1<h?G+(za+u/2-b.O.y):G+(f[0].O.y-b.O.y+f[0].Ia.y);break;case mq:d?p+=N+u/2-b.O.x:G+=O+u/2-b.O.y;break;case nq:break;default:t.m("Unhandled alignment value "+m.toString())}for(k=0;k<h;k++)l=f[k],d?l.na.p(l.na.x+l.Ia.x-p,l.na.y+(135<c?(q?-O:-l.Za.height)+l.Ia.y-s:K+s+l.Ia.y)):l.na.p(l.na.x+(135<c?(q?-N:-l.Za.width)+l.Ia.x-
s:n+s+l.Ia.x),l.na.y+l.Ia.y-G);d?(N=Hq(b,N,p),0>p&&(p=0),135<c&&(G+=O+s),O+=K+s):(135<c&&(p+=N+s),N+=n+s,O=Iq(b,O,G),0>G&&(G=0));b.Ia.p(p,G);b.Za.p(N,O)}}
function yq(a,b,c,d,f){e&&t.l(a,Pp,W,"layoutBusChildrenPosDir:v");var g=b.length;if(0===g)return a=[],a[0]=c,a[1]=d,a[2]=f,a;if(1===g){var h=b[0];d=h.Za.width;f=h.Za.height;a=[];a[0]=c;a[1]=d;a[2]=f;return a}for(var k=a.nodeSpacing,l=a.rowSpacing,m=90===tq(a),n=0,p=0,q=0,r=0;r<g;r++)if(!(0!==r%2||1<g&&r===g-1)){var h=b[r],s=h.Za,u=0===n?0:l;if(m){var v=Lq(h)-k;h.na.p(c-(s.width+v),q+u);d=Math.max(d,s.width+v);f=Math.max(f,q+u+s.height);q+=u+s.height}else v=Lq(h)-k,h.na.p(p+u,c-(s.height+v)),f=Math.max(f,
s.height+v),d=Math.max(d,p+u+s.width),p+=u+s.width;n++}var n=0,D=p,A=q;m?(p=c+k,q=0):(p=0,q=c+k);for(r=0;r<g;r++)0!==r%2&&(h=b[r],s=h.Za,u=0===n?0:l,m?(v=Lq(h)-k,h.na.p(p+v,q+u),d=Math.max(d,p+s.width+v),f=Math.max(f,q+u+s.height),q+=u+s.height):(v=Lq(h)-k,h.na.p(p+u,q+v),d=Math.max(d,p+u+s.width),f=Math.max(f,q+s.height+v),p+=u+s.width),n++);1<g&&1===g%2&&(h=b[g-1],s=h.Za,b=Mq(h,m?Math.max(Math.abs(A),Math.abs(q)):Math.max(Math.abs(D),Math.abs(p))),m?(h.na.p(c+k/2-h.O.x-h.Ia.x,f+b),m=c+k/2-h.O.x-
h.Ia.x,d=Math.max(d,m+s.width),0>m&&(d-=m),f=Math.max(f,Math.max(A,q)+b+s.height),0>h.na.x&&(c=Sq(a,h.na.x,!1,c,k))):(h.na.p(d+b,c+k/2-h.O.y-h.Ia.y),d=Math.max(d,Math.max(D,p)+b+s.width),m=c+k/2-h.O.y-h.Ia.y,f=Math.max(f,m+s.height),0>m&&(f-=m),0>h.na.y&&(c=Sq(a,h.na.y,!0,c,k))));a=[];a[0]=c;a[1]=d;a[2]=f;return a}
function zq(a,b,c,d,f){e&&t.l(a,Pp,W,"layoutBusChildrenNegDir:v");var g=b.length;if(0===g)return a=[],a[0]=c,a[1]=d,a[2]=f,a;if(1===g){var h=b[0];d=h.Za.width;f=h.Za.height;a=[];a[0]=c;a[1]=d;a[2]=f;return a}for(var k=a.nodeSpacing,l=a.rowSpacing,m=270===tq(a),n=0,p=0,q=0,r=0;r<g;r++)if(!(0!==r%2||1<g&&r===g-1)){var h=b[r],s=h.Za,u=0===n?0:l;if(m){var v=Lq(h)-k,q=q-(u+s.height);h.na.p(c-(s.width+v),q);d=Math.max(d,s.width+v);f=Math.max(f,Math.abs(q))}else v=Lq(h)-k,p-=u+s.width,h.na.p(p,c-(s.height+
v)),f=Math.max(f,s.height+v),d=Math.max(d,Math.abs(p));n++}var n=0,D=p,A=q;m?(p=c+k,q=0):(p=0,q=c+k);for(r=0;r<g;r++)0!==r%2&&(h=b[r],s=h.Za,u=0===n?0:l,m?(v=Lq(h)-k,q-=u+s.height,h.na.p(p+v,q),d=Math.max(d,p+s.width+v),f=Math.max(f,Math.abs(q))):(v=Lq(h)-k,p-=u+s.width,h.na.p(p,q+v),f=Math.max(f,q+s.height+v),d=Math.max(d,Math.abs(p))),n++);1<g&&1===g%2&&(h=b[g-1],s=h.Za,l=Mq(h,m?Math.max(Math.abs(A),Math.abs(q)):Math.max(Math.abs(D),Math.abs(p))),m?(h.na.p(c+k/2-h.O.x-h.Ia.x,-f-s.height-l),p=c+
k/2-h.O.x-h.Ia.x,d=Math.max(d,p+s.width),0>p&&(d-=p),f=Math.max(f,Math.abs(Math.min(A,q))+l+s.height),0>h.na.x&&(c=Sq(a,h.na.x,!1,c,k))):(h.na.p(-d-s.width-l,c+k/2-h.O.y-h.Ia.y),d=Math.max(d,Math.abs(Math.min(D,p))+l+s.width),p=c+k/2-h.O.y-h.Ia.y,f=Math.max(f,p+s.height),0>p&&(f-=p),0>h.na.y&&(c=Sq(a,h.na.y,!0,c,k))));for(r=0;r<g;r++)h=b[r],m?h.na.p(h.na.x,h.na.y+f):h.na.p(h.na.x+d,h.na.y);a=[];a[0]=c;a[1]=d;a[2]=f;return a}
function Lq(a){e&&t.l(a,Pp,W,"fixRelativePostions:child");return null===a.parent?0:a.parent.nodeSpacing}function Mq(a){e&&t.l(a,Pp,W,"fixRelativePostions:lastchild");return null===a.parent?0:a.parent.rowSpacing}function Sq(a,b,c,d,f){e&&t.l(a,Pp,W,"fixRelativePostions:v");a=a.children;for(var g=a.length,h=0;h<g;h++)c?a[h].na.p(a[h].na.x,a[h].na.y-b):a[h].na.p(a[h].na.x-b,a[h].na.y);b=a[g-1];return Math.max(d,c?b.Ia.y+b.O.y-f/2:b.Ia.x+b.O.x-f/2)}
function Hq(a,b,c){e&&t.l(a,Pp,W,"calculateSubwidth:v");switch(a.alignment){case jq:case Gq:var d=b;c+a.width>d&&(d=c+a.width);0>c&&(d-=c);return d;case uq:return a.width>b?a.width:b;case vq:return 2*a.O.x>b?a.width:b+a.width-2*a.O.x;case lq:case aq:return d=Math.min(0,c),c=Math.max(b,c+a.width),Math.max(a.width,c-d);case mq:return a.width-a.O.x+a.nodeSpacing/2+b;case nq:return Math.max(a.width,a.O.x+a.nodeSpacing/2+b);default:return b}}
function Iq(a,b,c){e&&t.l(a,Pp,W,"calculateSubheight:v");switch(a.alignment){case jq:case Gq:var d=b;c+a.height>d&&(d=c+a.height);0>c&&(d-=c);return d;case uq:return a.height>b?a.height:b;case vq:return 2*a.O.y>b?a.height:b+a.height-2*a.O.y;case lq:case aq:return d=Math.min(0,c),c=Math.max(b,c+a.height),Math.max(a.height,c-d);case mq:return a.height-a.O.y+a.nodeSpacing/2+b;case nq:return Math.max(a.height,a.O.y+a.nodeSpacing/2+b);default:return b}}
function Jq(a,b,c){e&&t.l(a,ca,W,"alignOffset:align");switch(a){case Gq:b/=2;c/=2;break;case jq:b/=2;c/=2;break;case uq:c=b=0;break;case vq:break;default:t.m("Unhandled alignment value "+a.toString())}a=[];a[0]=b;a[1]=c;return a}function Bq(a,b,c,d,f,g){e&&t.l(a,Pp,W,"shiftRelPosAlign:v");e&&t.l(b,ca,W,"shiftRelPosAlign:align");b=Jq(b,c,d);Eq(a,b[0],b[1],f,g)}function Eq(a,b,c,d,f){e&&t.l(a,Pp,W,"shiftRelPos:v");if(0!==b||0!==c)for(a=a.children;d<=f;d++){var g=a[d].na;g.x+=b;g.y+=c}}
function Cq(a,b,c,d){e&&(t.l(b,Pp,W,"recordMidPoints:v"),t.i(c,"number",W,"recordMidPoints:x"),t.i(d,"number",W,"recordMidPoints:y"));var f=b.parent;switch(a.If){case Lp:for(a=b.tc;a.next();)b=a.value,b.fromVertex===f&&b.Sr.p(c,d);break;case Tp:for(a=b.gc;a.next();)b=a.value,b.toVertex===f&&b.Sr.p(c,d);break;default:t.m("Unhandled path value "+a.If.toString())}}function Fq(a,b,c){for(var d=0;d<a.length;d++){var f=a[d];f.x+=b;f.y+=c}}
function Dq(a,b,c,d,f,g,h){e&&t.l(b,Pp,W,"mergeFringes:parent");e&&t.l(c,Pp,W,"mergeFringes:child");var k=tq(b),l=90===k||270===k,m=b.nodeSpacing;b=d;var n=f;d=g;f=h;var p=c.tt,q=c.Kt;h=c.Za;var r=l?Math.max(f,h.height):Math.max(d,h.width);if(null===p||k!==tq(c))p=Aq(a,2),q=Aq(a,2),l?(p[0].p(0,0),p[1].p(0,h.height),q[0].p(h.width,0),q[1].p(q[0].x,p[1].y)):(p[0].p(0,0),p[1].p(h.width,0),q[0].p(0,h.height),q[1].p(p[1].x,q[0].y));if(l){c=d;d=9999999;if(!(null===n||2>n.length||null===p||2>p.length))for(g=
f=0;f<n.length&&g<p.length;){var k=n[f],s=p[g],l=s.x,u=s.y,l=l+c,v=k;f+1<n.length&&(v=n[f+1]);var D=s,s=D.x,D=D.y;g+1<p.length&&(D=p[g+1],s=D.x,D=D.y,s+=c);var A=d;k.y===u?A=l-k.x:k.y>u&&k.y<D?A=l+(k.y-u)/(D-u)*(s-l)-k.x:u>k.y&&u<v.y&&(A=l-(k.x+(u-k.y)/(v.y-k.y)*(v.x-k.x)));A<d&&(d=A);v.y<=k.y?f++:D<=u?g++:(v.y<=D&&f++,D<=v.y&&g++)}c-=d;c+=m;f=p;g=c;if(null===b||2>b.length||null===f||2>f.length)d=null;else{m=Aq(a,b.length+f.length);for(d=l=k=0;l<f.length&&f[l].y<b[0].y;)u=f[l++],m[d++].p(u.x+g,u.y);
for(;k<b.length;)u=b[k++],m[d++].p(u.x,u.y);for(k=b[b.length-1].y;l<f.length&&f[l].y<=k;)l++;for(;l<f.length&&f[l].y>k;)u=f[l++],m[d++].p(u.x+g,u.y);f=Aq(a,d);for(k=0;k<d;k++)f[k].assign(m[k]);Kq(a,m);d=f}l=q;u=c;if(null===n||2>n.length||null===l||2>l.length)f=null;else{m=Aq(a,n.length+l.length);for(g=v=f=0;f<n.length&&n[f].y<l[0].y;)k=n[f++],m[g++].p(k.x,k.y);for(;v<l.length;)k=l[v++],m[g++].p(k.x+u,k.y);for(l=l[l.length-1].y;f<n.length&&n[f].y<=l;)f++;for(;f<n.length&&n[f].y>l;)k=n[f++],m[g++].p(k.x,
k.y);k=Aq(a,g);for(f=0;f<g;f++)k[f].assign(m[f]);Kq(a,m);f=k}g=Math.max(0,c)+h.width;h=r}else{c=f;d=9999999;if(!(null===n||2>n.length||null===p||2>p.length))for(g=f=0;f<n.length&&g<p.length;)k=n[f],s=p[g],l=s.x,u=s.y,u+=c,v=k,f+1<n.length&&(v=n[f+1]),D=s,s=D.x,D=D.y,g+1<p.length&&(D=p[g+1],s=D.x,D=D.y,D+=c),A=d,k.x===l?A=u-k.y:k.x>l&&k.x<s?A=u+(k.x-l)/(s-l)*(D-u)-k.y:l>k.x&&l<v.x&&(A=u-(k.y+(l-k.x)/(v.x-k.x)*(v.y-k.y))),A<d&&(d=A),v.x<=k.x?f++:s<=l?g++:(v.x<=s&&f++,s<=v.x&&g++);c-=d;c+=m;f=p;g=c;
if(null===b||2>b.length||null===f||2>f.length)d=null;else{m=Aq(a,b.length+f.length);for(d=l=k=0;l<f.length&&f[l].x<b[0].x;)u=f[l++],m[d++].p(u.x,u.y+g);for(;k<b.length;)u=b[k++],m[d++].p(u.x,u.y);for(k=b[b.length-1].x;l<f.length&&f[l].x<=k;)l++;for(;l<f.length&&f[l].x>k;)u=f[l++],m[d++].p(u.x,u.y+g);f=Aq(a,d);for(k=0;k<d;k++)f[k].assign(m[k]);Kq(a,m);d=f}l=q;u=c;if(null===n||2>n.length||null===l||2>l.length)f=null;else{m=Aq(a,n.length+l.length);for(g=v=f=0;f<n.length&&n[f].x<l[0].x;)k=n[f++],m[g++].p(k.x,
k.y);for(;v<l.length;)k=l[v++],m[g++].p(k.x,k.y+u);for(l=l[l.length-1].x;f<n.length&&n[f].x<=l;)f++;for(;f<n.length&&n[f].x>l;)k=n[f++],m[g++].p(k.x,k.y);k=Aq(a,g);for(f=0;f<g;f++)k[f].assign(m[f]);Kq(a,m);f=k}g=r;h=Math.max(0,c)+h.height}Kq(a,b);Kq(a,p);Kq(a,n);Kq(a,q);a=[];a[0]=c;a[1]=d;a[2]=f;a[3]=g;a[4]=h;return a}function Aq(a,b){a.ws||(a.ws=[]);var c=a.ws[b];if(void 0!==c&&(c=c.pop(),void 0!==c))return c;for(var c=[],d=0;d<b;d++)c[d]=new w;return c}
function Kq(a,b){if(a.ws){var c=b.length,d=a.ws[c];void 0===d&&(d=[],a.ws[c]=d);d.push(b)}}
W.prototype.arrangeTrees=function(){if(this.cd===Sp)for(var a=this.Yc.k;a.next();){var b=a.value,c=b.Fc;if(null!==c){var d=c.position,c=d.x,d=d.y;isFinite(c)||(c=0);isFinite(d)||(d=0);Tq(this,b,c,d)}}else for(a=this.Fd,c=a.x,d=a.y,a=this.Yc.k;a.next();)switch(b=a.value,Tq(this,b,c+b.Ia.x,d+b.Ia.y),this.cd){case Op:d+=b.Za.height+this.bg.height;break;case Uq:c+=b.Za.width+this.bg.width;break;default:t.m("Unhandled arrangement value "+this.cd.toString())}};
function Tq(a,b,c,d){if(null!==b){e&&t.l(b,Pp,W,"assignAbsolutePositions:v");b.x=c;b.y=d;b=b.children;for(var f=b.length,g=0;g<f;g++){var h=b[g];Tq(a,h,c+h.na.x,d+h.na.y)}}}W.prototype.commitLayout=function(){this.bB();this.commitNodes();this.Uz();this.rt&&this.commitLinks()};W.prototype.commitNodes=function(){for(var a=this.network.vertexes.k,b;a.next();)b=a.value,b.commit();for(a.reset();a.next();)b=a.value,this.layoutComments(b)};
W.prototype.Uz=function(){if(this.Xw===Yp){for(var a=this.EB,b=[],c=null,d=this.network.vertexes.k;d.next();){var f=d.value;null===c?c=f.Pb.copy():c.ii(f.Pb);var g=b[f.level],g=void 0===g?wq(f):Math.max(g,wq(f));b[f.level]=g}for(d=0;d<b.length;d++)void 0===b[d]&&(b[d]=0);90===this.angle||270===this.angle?(c.Sf(this.nodeSpacing/2,this.layerSpacing),f=new w(-this.nodeSpacing/2,-this.layerSpacing/2)):(c.Sf(this.layerSpacing,this.nodeSpacing/2),f=new w(-this.layerSpacing/2,-this.nodeSpacing/2));var g=
[],c=90===this.angle||270===this.angle?c.width:c.height,h=0;if(180===this.angle||270===this.angle)for(d=0;d<a.length;d++)h+=a[d]+b[d];for(d=0;d<a.length;d++){var k=a[d]+b[d];270===this.angle?(h-=k,g.push(new x(0,h,c,k))):90===this.angle?(g.push(new x(0,h,c,k)),h+=k):180===this.angle?(h-=k,g.push(new x(h,0,k,c))):(g.push(new x(h,0,k,c)),h+=k)}this.commitLayers(g,f)}};W.prototype.commitLayers=function(){};W.prototype.commitLinks=function(){for(var a=this.network.edges.k;a.next();)a.value.commit()};
W.prototype.bB=function(){for(var a=this.Yc.k;a.next();)Vq(this,a.value)};function Vq(a,b){if(null!==b){e&&t.l(b,Pp,W,"setPortSpotsTree:v");a.setPortSpots(b);for(var c=b.children,d=c.length,f=0;f<d;f++)Vq(a,c[f])}}
W.prototype.setPortSpots=function(a){e&&t.l(a,Pp,W,"setPortSpots:v");var b=a.alignment;if(kq(b)){e&&t.l(a,Pp,W,"setPortSpotsBus:v");e&&t.l(b,ca,W,"setPortSpots:align");var c=this.If===Lp,d=tq(a),f;switch(d){case 0:f=Wb;break;case 90:f=Xb;break;case 180:f=Vb;break;default:f=Qb}var g=a.children,h=g.length;switch(b){case lq:case aq:for(b=0;b<h;b++){var k=g[b],k=c?k.tc:k.gc;if(k.next()){var l=k.value,l=l.link;if(null!==l){var m=90===d||270===d?Vb:Qb;if(1===h||b===h-1&&1===h%2)switch(d){case 0:m=Vb;break;
case 90:m=Qb;break;case 180:m=Wb;break;default:m=Xb}else 0===b%2&&(m=90===d||270===d?Wb:Xb);c?(a.setsPortSpot&&(l.ob=f),a.setsChildPortSpot&&(l.rb=m)):(a.setsPortSpot&&(l.ob=m),a.setsChildPortSpot&&(l.rb=f))}}}break;case mq:m=90===d||270===d?Wb:Xb;for(k=c?a.gc:a.tc;k.next();)l=k.value,l=l.link,null!==l&&(c?(a.setsPortSpot&&(l.ob=f),a.setsChildPortSpot&&(l.rb=m)):(a.setsPortSpot&&(l.ob=m),a.setsChildPortSpot&&(l.rb=f)));break;case nq:for(m=90===d||270===d?Vb:Qb,k=c?a.gc:a.tc;k.next();)l=k.value,l=
l.link,null!==l&&(c?(a.setsPortSpot&&(l.ob=f),a.setsChildPortSpot&&(l.rb=m)):(a.setsPortSpot&&(l.ob=m),a.setsChildPortSpot&&(l.rb=f)))}}else if(c=tq(a),this.If===Lp)for(d=a.gc;d.next();){if(f=d.value,f=f.link,null!==f){if(a.setsPortSpot)if(a.portSpot.Pc())switch(c){case 0:f.ob=Wb;break;case 90:f.ob=Xb;break;case 180:f.ob=Vb;break;default:f.ob=Qb}else f.ob=a.portSpot;if(a.setsChildPortSpot)if(a.childPortSpot.Pc())switch(c){case 0:f.rb=Vb;break;case 90:f.rb=Qb;break;case 180:f.rb=Wb;break;default:f.rb=
Xb}else f.rb=a.childPortSpot}}else for(d=a.tc;d.next();)if(f=d.value,f=f.link,null!==f){if(a.setsPortSpot)if(a.portSpot.Pc())switch(c){case 0:f.rb=Wb;break;case 90:f.rb=Xb;break;case 180:f.rb=Vb;break;default:f.rb=Qb}else f.rb=a.portSpot;if(a.setsChildPortSpot)if(a.childPortSpot.Pc())switch(c){case 0:f.ob=Vb;break;case 90:f.ob=Qb;break;case 180:f.ob=Wb;break;default:f.ob=Xb}else f.ob=a.childPortSpot}};function tq(a){a=a.angle;return 45>=a?0:135>=a?90:225>=a?180:315>=a?270:0}
function wq(a){e&&t.l(a,Pp,W,"computeLayerSpacing:v");var b=tq(a),b=90===b||270===b,c=a.layerSpacing;if(0<a.layerSpacingParentOverlap)var d=Math.min(1,a.layerSpacingParentOverlap),c=c-(b?a.height*d:a.width*d);c<(b?-a.height:-a.width)&&(c=b?-a.height:-a.width);return c}function xq(a){e&&t.l(a,Pp,W,"computeNodeIndent:v");var b=tq(a),b=90===b||270===b,c=a.nodeIndent;if(0<a.nodeIndentPastParent)var d=Math.min(1,a.nodeIndentPastParent),c=c+(b?a.width*d:a.height*d);return c=Math.max(0,c)}
t.g(W,"roots",W.prototype.MJ);t.defineProperty(W,{MJ:"roots"},function(){return this.Yc},function(a){this.Yc!==a&&(t.l(a,ma,W,"roots"),this.Yc=a,this.J())});t.g(W,"path",W.prototype.path);t.defineProperty(W,{path:"path"},function(){return this.Ji},function(a){this.Ji!==a&&(t.Aa(a,W,W,"path"),this.Ji=a,this.J())});t.g(W,"treeStyle",W.prototype.MG);
t.defineProperty(W,{MG:"treeStyle"},function(){return this.Cs},function(a){this.cd!==a&&(t.Aa(a,W,W,"treeStyle"),a===Mp||a===dq||a===eq||a===cq)&&(this.Cs=a,this.J())});t.g(W,"layerStyle",W.prototype.Xw);t.defineProperty(W,{Xw:"layerStyle"},function(){return this.Zu},function(a){this.cd!==a&&(t.Aa(a,W,W,"layerStyle"),a===Np||a===Zp||a===Yp)&&(this.Zu=a,this.J())});t.g(W,"comments",W.prototype.comments);
t.defineProperty(W,{comments:"comments"},function(){return this.sh},function(a){this.sh!==a&&(t.i(a,"boolean",W,"comments"),this.sh=a,this.J())});t.g(W,"arrangement",W.prototype.Qe);t.defineProperty(W,{Qe:"arrangement"},function(){return this.cd},function(a){this.cd!==a&&(t.Aa(a,W,W,"arrangement"),a===Op||a===Uq||a===Sp)&&(this.cd=a,this.J())});t.g(W,"arrangementSpacing",W.prototype.fw);
t.defineProperty(W,{fw:"arrangementSpacing"},function(){return this.bg},function(a){t.l(a,fa,W,"arrangementSpacing");this.bg.M(a)||(this.bg.assign(a),this.J())});t.g(W,"rootDefaults",W.prototype.LJ);t.defineProperty(W,{LJ:"rootDefaults"},function(){return this.ua},function(a){this.ua!==a&&(t.l(a,Pp,W,"rootDefaults"),this.ua=a,this.J())});t.g(W,"alternateDefaults",W.prototype.NH);
t.defineProperty(W,{NH:"alternateDefaults"},function(){return this.ta},function(a){this.ta!==a&&(t.l(a,Pp,W,"alternateDefaults"),this.ta=a,this.J())});t.g(W,"sorting",W.prototype.sorting);t.defineProperty(W,{sorting:"sorting"},function(){return this.ua.sorting},function(a){this.ua.sorting!==a&&(t.Aa(a,W,W,"sorting"),a===fq||a===gq||a===hq||iq)&&(this.ua.sorting=a,this.J())});t.g(W,"comparer",W.prototype.comparer);
t.defineProperty(W,{comparer:"comparer"},function(){return this.ua.comparer},function(a){this.ua.comparer!==a&&(t.i(a,"function",W,"comparer"),this.ua.comparer=a,this.J())});t.g(W,"angle",W.prototype.angle);t.defineProperty(W,{angle:"angle"},function(){return this.ua.angle},function(a){this.ua.angle!==a&&(t.i(a,"number",W,"angle"),0===a||90===a||180===a||270===a)&&(this.ua.angle=a,this.J())});t.g(W,"alignment",W.prototype.alignment);
t.defineProperty(W,{alignment:"alignment"},function(){return this.ua.alignment},function(a){this.ua.alignment!==a&&(t.Aa(a,W,W,"alignment"),this.ua.alignment=a,this.J())});t.g(W,"nodeIndent",W.prototype.nodeIndent);t.defineProperty(W,{nodeIndent:"nodeIndent"},function(){return this.ua.nodeIndent},function(a){this.ua.nodeIndent!==a&&(t.i(a,"number",W,"nodeIndent"),0<=a&&(this.ua.nodeIndent=a,this.J()))});t.g(W,"nodeIndentPastParent",W.prototype.nodeIndentPastParent);
t.defineProperty(W,{nodeIndentPastParent:"nodeIndentPastParent"},function(){return this.ua.nodeIndentPastParent},function(a){this.ua.nodeIndentPastParent!==a&&(t.i(a,"number",W,"nodeIndentPastParent"),0<=a&&1>=a&&(this.ua.nodeIndentPastParent=a,this.J()))});t.g(W,"nodeSpacing",W.prototype.nodeSpacing);t.defineProperty(W,{nodeSpacing:"nodeSpacing"},function(){return this.ua.nodeSpacing},function(a){this.ua.nodeSpacing!==a&&(t.i(a,"number",W,"nodeSpacing"),this.ua.nodeSpacing=a,this.J())});
t.g(W,"layerSpacing",W.prototype.layerSpacing);t.defineProperty(W,{layerSpacing:"layerSpacing"},function(){return this.ua.layerSpacing},function(a){this.ua.layerSpacing!==a&&(t.i(a,"number",W,"layerSpacing"),this.ua.layerSpacing=a,this.J())});t.g(W,"layerSpacingParentOverlap",W.prototype.layerSpacingParentOverlap);
t.defineProperty(W,{layerSpacingParentOverlap:"layerSpacingParentOverlap"},function(){return this.ua.layerSpacingParentOverlap},function(a){this.ua.layerSpacingParentOverlap!==a&&(t.i(a,"number",W,"layerSpacingParentOverlap"),0<=a&&1>=a&&(this.ua.layerSpacingParentOverlap=a,this.J()))});t.g(W,"compaction",W.prototype.compaction);
t.defineProperty(W,{compaction:"compaction"},function(){return this.ua.compaction},function(a){this.ua.compaction!==a&&(t.Aa(a,W,W,"compaction"),a===qq||a===sq)&&(this.ua.compaction=a,this.J())});t.g(W,"breadthLimit",W.prototype.breadthLimit);t.defineProperty(W,{breadthLimit:"breadthLimit"},function(){return this.ua.breadthLimit},function(a){this.ua.breadthLimit!==a&&(t.i(a,"number",W,"breadthLimit"),0<=a&&(this.ua.breadthLimit=a,this.J()))});t.g(W,"rowSpacing",W.prototype.rowSpacing);
t.defineProperty(W,{rowSpacing:"rowSpacing"},function(){return this.ua.rowSpacing},function(a){this.ua.rowSpacing!==a&&(t.i(a,"number",W,"rowSpacing"),this.ua.rowSpacing=a,this.J())});t.g(W,"rowIndent",W.prototype.rowIndent);t.defineProperty(W,{rowIndent:"rowIndent"},function(){return this.ua.rowIndent},function(a){this.ua.rowIndent!==a&&(t.i(a,"number",W,"rowIndent"),0<=a&&(this.ua.rowIndent=a,this.J()))});t.g(W,"commentSpacing",W.prototype.commentSpacing);
t.defineProperty(W,{commentSpacing:"commentSpacing"},function(){return this.ua.commentSpacing},function(a){this.ua.commentSpacing!==a&&(t.i(a,"number",W,"commentSpacing"),this.ua.commentSpacing=a,this.J())});t.g(W,"commentMargin",W.prototype.commentMargin);t.defineProperty(W,{commentMargin:"commentMargin"},function(){return this.ua.commentMargin},function(a){this.ua.commentMargin!==a&&(t.i(a,"number",W,"commentMargin"),this.ua.commentMargin=a,this.J())});t.g(W,"setsPortSpot",W.prototype.setsPortSpot);
t.defineProperty(W,{setsPortSpot:"setsPortSpot"},function(){return this.ua.setsPortSpot},function(a){this.ua.setsPortSpot!==a&&(t.i(a,"boolean",W,"setsPortSpot"),this.ua.setsPortSpot=a,this.J())});t.g(W,"portSpot",W.prototype.portSpot);t.defineProperty(W,{portSpot:"portSpot"},function(){return this.ua.portSpot},function(a){t.l(a,H,W,"portSpot");this.ua.portSpot.M(a)||(this.ua.portSpot=a,this.J())});t.g(W,"setsChildPortSpot",W.prototype.setsChildPortSpot);
t.defineProperty(W,{setsChildPortSpot:"setsChildPortSpot"},function(){return this.ua.setsChildPortSpot},function(a){this.ua.setsChildPortSpot!==a&&(t.i(a,"boolean",W,"setsChildPortSpot"),this.ua.setsChildPortSpot=a,this.J())});t.g(W,"childPortSpot",W.prototype.childPortSpot);t.defineProperty(W,{childPortSpot:"childPortSpot"},function(){return this.ua.childPortSpot},function(a){t.l(a,H,W,"childPortSpot");this.ua.childPortSpot.M(a)||(this.ua.childPortSpot=a,this.J())});t.g(W,"alternateSorting",W.prototype.YH);
t.defineProperty(W,{YH:"alternateSorting"},function(){return this.ta.sorting},function(a){this.ta.sorting!==a&&(t.Aa(a,W,W,"alternateSorting"),a===fq||a===gq||a===hq||iq)&&(this.ta.sorting=a,this.J())});t.g(W,"alternateComparer",W.prototype.MH);t.defineProperty(W,{MH:"alternateComparer"},function(){return this.ta.comparer},function(a){this.ta.comparer!==a&&(t.i(a,"function",W,"alternateComparer"),this.ta.comparer=a,this.J())});t.g(W,"alternateAngle",W.prototype.GH);
t.defineProperty(W,{GH:"alternateAngle"},function(){return this.ta.angle},function(a){this.ta.angle!==a&&(t.i(a,"number",W,"alternateAngle"),0===a||90===a||180===a||270===a)&&(this.ta.angle=a,this.J())});t.g(W,"alternateAlignment",W.prototype.FH);t.defineProperty(W,{FH:"alternateAlignment"},function(){return this.ta.alignment},function(a){this.ta.alignment!==a&&(t.Aa(a,W,W,"alternateAlignment"),this.ta.alignment=a,this.J())});t.g(W,"alternateNodeIndent",W.prototype.QH);
t.defineProperty(W,{QH:"alternateNodeIndent"},function(){return this.ta.nodeIndent},function(a){this.ta.nodeIndent!==a&&(t.i(a,"number",W,"alternateNodeIndent"),0<=a&&(this.ta.nodeIndent=a,this.J()))});t.g(W,"alternateNodeIndentPastParent",W.prototype.RH);
t.defineProperty(W,{RH:"alternateNodeIndentPastParent"},function(){return this.ta.nodeIndentPastParent},function(a){this.ta.nodeIndentPastParent!==a&&(t.i(a,"number",W,"alternateNodeIndentPastParent"),0<=a&&1>=a&&(this.ta.nodeIndentPastParent=a,this.J()))});t.g(W,"alternateNodeSpacing",W.prototype.SH);t.defineProperty(W,{SH:"alternateNodeSpacing"},function(){return this.ta.nodeSpacing},function(a){this.ta.nodeSpacing!==a&&(t.i(a,"number",W,"alternateNodeSpacing"),this.ta.nodeSpacing=a,this.J())});
t.g(W,"alternateLayerSpacing",W.prototype.OH);t.defineProperty(W,{OH:"alternateLayerSpacing"},function(){return this.ta.layerSpacing},function(a){this.ta.layerSpacing!==a&&(t.i(a,"number",W,"alternateLayerSpacing"),this.ta.layerSpacing=a,this.J())});t.g(W,"alternateLayerSpacingParentOverlap",W.prototype.PH);
t.defineProperty(W,{PH:"alternateLayerSpacingParentOverlap"},function(){return this.ta.layerSpacingParentOverlap},function(a){this.ta.layerSpacingParentOverlap!==a&&(t.i(a,"number",W,"alternateLayerSpacingParentOverlap"),0<=a&&1>=a&&(this.ta.layerSpacingParentOverlap=a,this.J()))});t.g(W,"alternateCompaction",W.prototype.LH);
t.defineProperty(W,{LH:"alternateCompaction"},function(){return this.ta.compaction},function(a){this.ta.compaction!==a&&(t.Aa(a,W,W,"alternateCompaction"),a===qq||a===sq)&&(this.ta.compaction=a,this.J())});t.g(W,"alternateBreadthLimit",W.prototype.HH);t.defineProperty(W,{HH:"alternateBreadthLimit"},function(){return this.ta.breadthLimit},function(a){this.ta.breadthLimit!==a&&(t.i(a,"number",W,"alternateBreadthLimit"),0<=a&&(this.ta.breadthLimit=a,this.J()))});t.g(W,"alternateRowSpacing",W.prototype.VH);
t.defineProperty(W,{VH:"alternateRowSpacing"},function(){return this.ta.rowSpacing},function(a){this.ta.rowSpacing!==a&&(t.i(a,"number",W,"alternateRowSpacing"),this.ta.rowSpacing=a,this.J())});t.g(W,"alternateRowIndent",W.prototype.UH);t.defineProperty(W,{UH:"alternateRowIndent"},function(){return this.ta.rowIndent},function(a){this.ta.rowIndent!==a&&(t.i(a,"number",W,"alternateRowIndent"),0<=a&&(this.ta.rowIndent=a,this.J()))});t.g(W,"alternateCommentSpacing",W.prototype.KH);
t.defineProperty(W,{KH:"alternateCommentSpacing"},function(){return this.ta.commentSpacing},function(a){this.ta.commentSpacing!==a&&(t.i(a,"number",W,"alternateCommentSpacing"),this.ta.commentSpacing=a,this.J())});t.g(W,"alternateCommentMargin",W.prototype.JH);t.defineProperty(W,{JH:"alternateCommentMargin"},function(){return this.ta.commentMargin},function(a){this.ta.commentMargin!==a&&(t.i(a,"number",W,"alternateCommentMargin"),this.ta.commentMargin=a,this.J())});t.g(W,"alternateSetsPortSpot",W.prototype.XH);
t.defineProperty(W,{XH:"alternateSetsPortSpot"},function(){return this.ta.setsPortSpot},function(a){this.ta.setsPortSpot!==a&&(t.i(a,"boolean",W,"alternateSetsPortSpot"),this.ta.setsPortSpot=a,this.J())});t.g(W,"alternatePortSpot",W.prototype.TH);t.defineProperty(W,{TH:"alternatePortSpot"},function(){return this.ta.portSpot},function(a){t.l(a,H,W,"alternatePortSpot");this.ta.portSpot.M(a)||(this.ta.portSpot=a,this.J())});t.g(W,"alternateSetsChildPortSpot",W.prototype.WH);
t.defineProperty(W,{WH:"alternateSetsChildPortSpot"},function(){return this.ta.setsChildPortSpot},function(a){this.ta.setsChildPortSpot!==a&&(t.i(a,"boolean",W,"alternateSetsChildPortSpot"),this.ta.setsChildPortSpot=a,this.J())});t.g(W,"alternateChildPortSpot",W.prototype.IH);t.defineProperty(W,{IH:"alternateChildPortSpot"},function(){return this.ta.childPortSpot},function(a){t.l(a,H,W,"alternateChildPortSpot");this.ta.childPortSpot.M(a)||(this.ta.childPortSpot=a,this.J())});var Kp;
W.PathDefault=Kp=t.w(W,"PathDefault",-1);var Lp;W.PathDestination=Lp=t.w(W,"PathDestination",0);var Tp;W.PathSource=Tp=t.w(W,"PathSource",1);var fq;W.SortingForwards=fq=t.w(W,"SortingForwards",10);var gq;W.SortingReverse=gq=t.w(W,"SortingReverse",11);var hq;W.SortingAscending=hq=t.w(W,"SortingAscending",12);var iq;W.SortingDescending=iq=t.w(W,"SortingDescending",13);var Gq;W.AlignmentCenterSubtrees=Gq=t.w(W,"AlignmentCenterSubtrees",20);var jq;
W.AlignmentCenterChildren=jq=t.w(W,"AlignmentCenterChildren",21);var uq;W.AlignmentStart=uq=t.w(W,"AlignmentStart",22);var vq;W.AlignmentEnd=vq=t.w(W,"AlignmentEnd",23);var lq;W.AlignmentBus=lq=t.w(W,"AlignmentBus",24);var aq;W.AlignmentBusBranching=aq=t.w(W,"AlignmentBusBranching",25);var mq;W.AlignmentTopLeftBus=mq=t.w(W,"AlignmentTopLeftBus",26);var nq;W.AlignmentBottomRightBus=nq=t.w(W,"AlignmentBottomRightBus",27);var qq;W.CompactionNone=qq=t.w(W,"CompactionNone",30);var sq;
W.CompactionBlock=sq=t.w(W,"CompactionBlock",31);var Mp;W.StyleLayered=Mp=t.w(W,"StyleLayered",40);var eq;W.StyleLastParents=eq=t.w(W,"StyleLastParents",41);var dq;W.StyleAlternating=dq=t.w(W,"StyleAlternating",42);var cq;W.StyleRootOnly=cq=t.w(W,"StyleRootOnly",43);var Op;W.ArrangementVertical=Op=t.w(W,"ArrangementVertical",50);var Uq;W.ArrangementHorizontal=Uq=t.w(W,"ArrangementHorizontal",51);var Sp;W.ArrangementFixedRoots=Sp=t.w(W,"ArrangementFixedRoots",52);var Np;
W.LayerIndividual=Np=t.w(W,"LayerIndividual",60);var Zp;W.LayerSiblings=Zp=t.w(W,"LayerSiblings",61);var Yp;W.LayerUniform=Yp=t.w(W,"LayerUniform",62);function Qp(){ta.call(this)}t.ga("TreeNetwork",Qp);t.Ka(Qp,ta);Qp.prototype.createVertex=function(){return new Pp};Qp.prototype.createEdge=function(){return new Wq};
function Pp(){ua.call(this);this.initialized=!1;this.parent=null;this.children=[];this.maxGenerationCount=this.maxChildrenCount=this.descendantCount=this.level=0;this.comments=null;this.na=new w(0,0);this.Za=new fa(0,0);this.Ia=new w(0,0);this.Pp=this.Op=this.NJ=!1;this.Kt=this.tt=null;this.sorting=fq;this.comparer=Un;this.angle=0;this.alignment=jq;this.nodeIndentPastParent=this.nodeIndent=0;this.nodeSpacing=20;this.layerSpacing=50;this.layerSpacingParentOverlap=0;this.compaction=sq;this.breadthLimit=
0;this.rowSpacing=25;this.commentSpacing=this.rowIndent=10;this.commentMargin=20;this.setsPortSpot=!0;this.portSpot=xb;this.setsChildPortSpot=!0;this.childPortSpot=xb}t.ga("TreeVertex",Pp);t.Ka(Pp,ua);
Pp.prototype.copyInheritedPropertiesFrom=function(a){null!==a&&(this.sorting=a.sorting,this.comparer=a.comparer,this.angle=a.angle,this.alignment=a.alignment,this.nodeIndent=a.nodeIndent,this.nodeIndentPastParent=a.nodeIndentPastParent,this.nodeSpacing=a.nodeSpacing,this.layerSpacing=a.layerSpacing,this.layerSpacingParentOverlap=a.layerSpacingParentOverlap,this.compaction=a.compaction,this.breadthLimit=a.breadthLimit,this.rowSpacing=a.rowSpacing,this.rowIndent=a.rowIndent,this.commentSpacing=a.commentSpacing,
this.commentMargin=a.commentMargin,this.setsPortSpot=a.setsPortSpot,this.portSpot=a.portSpot,this.setsChildPortSpot=a.setsChildPortSpot,this.childPortSpot=a.childPortSpot)};t.A(Pp,{Im:"childrenCount"},function(){return this.children.length});t.g(Pp,"relativePosition",Pp.prototype.HJ);t.defineProperty(Pp,{HJ:"relativePosition"},function(){return this.na},function(a){this.na.set(a)});t.g(Pp,"subtreeSize",Pp.prototype.$J);t.defineProperty(Pp,{$J:"subtreeSize"},function(){return this.Za},function(a){this.Za.set(a)});
t.g(Pp,"subtreeOffset",Pp.prototype.ZJ);t.defineProperty(Pp,{ZJ:"subtreeOffset"},function(){return this.Ia},function(a){this.Ia.set(a)});function Wq(){va.call(this);this.Sr=new w(0,0)}t.ga("TreeEdge",Wq);t.Ka(Wq,va);
Wq.prototype.commit=function(){var a=this.link;if(null!==a&&!a.dj){var b=this.network.jc,c=null,d=null;switch(b.If){case Lp:c=this.fromVertex;d=this.toVertex;break;case Tp:c=this.toVertex;d=this.fromVertex;break;default:t.m("Unhandled path value "+b.If.toString())}if(null!==c&&null!==d)if(b=this.Sr,0!==b.x||0!==b.y||c.NJ){var d=c.Pb,f=tq(c),g=wq(c),h=c.rowSpacing;a.updateRoute();var k=a.De===Pg,l=a.ic,m,n,p,q;a.zl();if(l||k){for(m=2;4<a.pa;)a.PF(2);n=a.o(1);p=a.o(2)}else{for(m=1;3<a.pa;)a.PF(1);n=
a.o(0);p=a.o(a.pa-1)}q=a.o(a.pa-1);0===f?(c.alignment===vq?(f=d.bottom+b.y,0===b.y&&n.y>q.y+c.rowIndent&&(f=Math.min(f,Math.max(n.y,f-xq(c))))):c.alignment===uq?(f=d.top+b.y,0===b.y&&n.y<q.y-c.rowIndent&&(f=Math.max(f,Math.min(n.y,f+xq(c))))):f=c.Op||c.Pp&&1===c.maxGenerationCount?d.top-c.Ia.y+b.y:d.y+d.height/2+b.y,k?(a.C(m,n.x,f),m++,a.C(m,d.right+g,f),m++,a.C(m,d.right+g+(b.x-h)/3,f),m++,a.C(m,d.right+g+2*(b.x-h)/3,f),m++,a.C(m,d.right+g+(b.x-h),f),m++,a.C(m,p.x,f)):(l&&(a.C(m,d.right+g/2,n.y),
m++),a.C(m,d.right+g/2,f),m++,a.C(m,d.right+g+b.x-(l?h/2:h),f),m++,l&&a.C(m,a.o(m-1).x,p.y))):90===f?(c.alignment===vq?(f=d.right+b.x,0===b.x&&n.x>q.x+c.rowIndent&&(f=Math.min(f,Math.max(n.x,f-xq(c))))):c.alignment===uq?(f=d.left+b.x,0===b.x&&n.x<q.x-c.rowIndent&&(f=Math.max(f,Math.min(n.x,f+xq(c))))):f=c.Op||c.Pp&&1===c.maxGenerationCount?d.left-c.Ia.x+b.x:d.x+d.width/2+b.x,k?(a.C(m,f,n.y),m++,a.C(m,f,d.bottom+g),m++,a.C(m,f,d.bottom+g+(b.y-h)/3),m++,a.C(m,f,d.bottom+g+2*(b.y-h)/3),m++,a.C(m,f,d.bottom+
g+(b.y-h)),m++,a.C(m,f,p.y)):(l&&(a.C(m,n.x,d.bottom+g/2),m++),a.C(m,f,d.bottom+g/2),m++,a.C(m,f,d.bottom+g+b.y-(l?h/2:h)),m++,l&&a.C(m,p.x,a.o(m-1).y))):180===f?(c.alignment===vq?(f=d.bottom+b.y,0===b.y&&n.y>q.y+c.rowIndent&&(f=Math.min(f,Math.max(n.y,f-xq(c))))):c.alignment===uq?(f=d.top+b.y,0===b.y&&n.y<q.y-c.rowIndent&&(f=Math.max(f,Math.min(n.y,f+xq(c))))):f=c.Op||c.Pp&&1===c.maxGenerationCount?d.top-c.Ia.y+b.y:d.y+d.height/2+b.y,k?(a.C(m,n.x,f),m++,a.C(m,d.left-g,f),m++,a.C(m,d.left-g+(b.x+
h)/3,f),m++,a.C(m,d.left-g+2*(b.x+h)/3,f),m++,a.C(m,d.left-g+(b.x+h),f),m++,a.C(m,p.x,f)):(l&&(a.C(m,d.left-g/2,n.y),m++),a.C(m,d.left-g/2,f),m++,a.C(m,d.left-g+b.x+(l?h/2:h),f),m++,l&&a.C(m,a.o(m-1).x,p.y))):270===f?(c.alignment===vq?(f=d.right+b.x,0===b.x&&n.x>q.x+c.rowIndent&&(f=Math.min(f,Math.max(n.x,f-xq(c))))):c.alignment===uq?(f=d.left+b.x,0===b.x&&n.x<q.x-c.rowIndent&&(f=Math.max(f,Math.min(n.x,f+xq(c))))):f=c.Op||c.Pp&&1===c.maxGenerationCount?d.left-c.Ia.x+b.x:d.x+d.width/2+b.x,k?(a.C(m,
f,n.y),m++,a.C(m,f,d.top-g),m++,a.C(m,f,d.top-g+(b.y+h)/3),m++,a.C(m,f,d.top-g+2*(b.y+h)/3),m++,a.C(m,f,d.top-g+(b.y+h)),m++,a.C(m,f,p.y)):(l&&(a.C(m,n.x,d.top-g/2),m++),a.C(m,f,d.top-g/2),m++,a.C(m,f,d.top-g+b.y+(l?h/2:h)),m++,l&&a.C(m,p.x,a.o(m-1).y))):t.m("Invalid angle "+f);a.Xi()}else g=c,h=d,e&&t.l(g,Pp,Wq,"adjustRouteForAngleChange:parent"),e&&t.l(h,Pp,Wq,"adjustRouteForAngleChange:child"),a=this.link,c=tq(g),c!==tq(h)&&(b=wq(g),d=g.Pb,g=h.Pb,0===c&&g.left-d.right<b+1||90===c&&g.top-d.bottom<
b+1||180===c&&d.left-g.right<b+1||270===c&&d.top-g.bottom<b+1||(a.updateRoute(),g=a.De===Pg,h=a.ic,k=kq(this.fromVertex.alignment),a.zl(),0===c?(c=d.right+b/2,g?4===a.pa&&(b=a.o(3).y,a.Y(1,c-20,a.o(1).y),a.C(2,c-20,b),a.C(3,c,b),a.C(4,c+20,b),a.Y(5,a.o(5).x,b)):h?k?a.Y(3,a.o(2).x,a.o(4).y):6===a.pa&&(a.Y(2,c,a.o(2).y),a.Y(3,c,a.o(3).y)):4===a.pa?a.C(2,c,a.o(2).y):3===a.pa?a.Y(1,c,a.o(2).y):2===a.pa&&a.C(1,c,a.o(1).y)):90===c?(b=d.bottom+b/2,g?4===a.pa&&(c=a.o(3).x,a.Y(1,a.o(1).x,b-20),a.C(2,c,b-20),
a.C(3,c,b),a.C(4,c,b+20),a.Y(5,c,a.o(5).y)):h?k?a.Y(3,a.o(2).x,a.o(4).y):6===a.pa&&(a.Y(2,a.o(2).x,b),a.Y(3,a.o(3).x,b)):4===a.pa?a.C(2,a.o(2).x,b):3===a.pa?a.Y(1,a.o(2).x,b):2===a.pa&&a.C(1,a.o(1).x,b)):180===c?(c=d.left-b/2,g?4===a.pa&&(b=a.o(3).y,a.Y(1,c+20,a.o(1).y),a.C(2,c+20,b),a.C(3,c,b),a.C(4,c-20,b),a.Y(5,a.o(5).x,b)):h?k?a.Y(3,a.o(2).x,a.o(4).y):6===a.pa&&(a.Y(2,c,a.o(2).y),a.Y(3,c,a.o(3).y)):4===a.pa?a.C(2,c,a.o(2).y):3===a.pa?a.Y(1,c,a.o(2).y):2===a.pa&&a.C(1,c,a.o(1).y)):270===c&&(b=
d.top-b/2,g?4===a.pa&&(c=a.o(3).x,a.Y(1,a.o(1).x,b+20),a.C(2,c,b+20),a.C(3,c,b),a.C(4,c,b-20),a.Y(5,c,a.o(5).y)):h?k?a.Y(3,a.o(2).x,a.o(4).y):6===a.pa&&(a.Y(2,a.o(2).x,b),a.Y(3,a.o(3).x,b)):4===a.pa?a.C(2,a.o(2).x,b):3===a.pa?a.Y(1,a.o(2).x,b):2===a.pa&&a.C(1,a.o(1).x,b)),a.Xi()))}};t.g(Wq,"relativePoint",Wq.prototype.GJ);t.defineProperty(Wq,{GJ:"relativePoint"},function(){return this.Sr},function(a){this.Sr.set(a)});function Xq(){this.Vn=[]}
function Xk(a){var b=new Xq,c;if("string"===typeof a)c=(new DOMParser).parseFromString(a,"text/xml");else if(a instanceof Document)c=a.implementation.createDocument("http://www.w3.org/2000/svg","svg",null),c.appendChild(c.importNode(a.documentElement,!0));else return null;a=c.getElementsByTagName("svg");if(0===a.length)return null;var d=a[0],f=c.getElementsByTagName("linearGradient"),g=c.getElementsByTagName("radialGradient");for(a=0;a<f.length;a++){for(var h=f[a],k=Yk(ea,Yd,{start:Yb,end:Zb}),l=
h.childNodes,m=0;m<l.length;m++)if("stop"===l[m].tagName){var n=Yq(b,l[m],"stop-color");if(n){var p=Yq(b,l[m],"offset");p||(p="0");var q=parseFloat(p);isNaN(q)&&(q=0);k.addColorStop((-1!==p.indexOf("%")?0.01:1)*q,n)}}h=h.getAttribute("id");"string"===typeof h&&(b["_brush"+h]=k)}for(a=0;a<g.length;a++){h=g[a];k=Yk(ea,Zd,{start:Hb,end:Hb});l=h.childNodes;for(m=0;m<l.length;m++)"stop"===l[m].tagName&&(n=Yq(b,l[m],"stop-color"))&&((p=Yq(b,l[m],"offset"))||(p="0"),q=parseFloat(p),isNaN(q)&&(q=0),k.addColorStop((-1!==
p.indexOf("%")?0.01:1)*q,n));h=h.getAttribute("id");"string"===typeof h&&(b["_brush"+h]=k)}for(f=!0;f;)for(f=!1,g=c.getElementsByTagName("use"),a=0;a<g.length;a++)k=g[a],0===k.childNodes.length&&(h=k.href,void 0!==h&&(h=c.getElementById(h.baseVal.substring(1)),null!==h&&(h=h.cloneNode(!0),h.removeAttribute("id"),l=parseFloat(k.getAttribute("x")),isNaN(l)&&(l=0),m=parseFloat(k.getAttribute("y")),isNaN(m)&&(m=0),n=k.getAttribute("transform"),null===n&&(n=""),k.setAttribute("transform",n+" translate("+
l+","+m+")"),k.appendChild(h),"use"===h.tagName&&(f=!0))));Zq(b,d,null);c=new y;if(0===b.Vn.length)return c;if(1===b.Vn.length)return b.Vn[0];for(a=0;a<b.Vn.length;a++)c.add(b.Vn[a]);return c}function $q(a,b){var c=a.getAttribute(b);"string"!==typeof c&&a.style&&(c=a.style[b]);return"string"!==typeof c?null:c}
function Yq(a,b,c){var d=b.getAttribute(c);"string"!==typeof d&&b.style&&(d=b.style[c]);return"string"!==typeof d||""===d||"inherit"===d?(b=b.parentNode,"g"===b.tagName||"use"===b.tagName?Yq(a,b,c):null):d}
function Zq(a,b,c){var d=b.tagName;if(("g"===d||"svg"===d||"use"===d||"symbol"===d)&&"none"!==Yq(a,b,"display")){for(var d=b.childNodes,f=0;f<d.length;f++){var g=d[f],h=null;if(void 0!==g.getAttribute){var k=g.getAttribute("transform");switch(g.tagName){case "g":null===k?Zq(a,g,null):(h=new y,Zq(a,g,h));break;case "use":null===k?Zq(a,g,null):(h=new y,Zq(a,g,h));break;case "symbol":if("use"!==b.tagName)break;h=new y;Zq(a,g,h);var l=h,m=a,n=g;Yq(m,n,"preserveAspectRatio");Yq(m,n,"viewBox");l.scale=
1;break;case "path":l=g;h=new V;l=l.getAttribute("d");"string"===typeof l&&(h.IE=Qc(l));break;case "line":var p=g,h=new V,l=parseFloat(p.getAttribute("x1"));isNaN(l)&&(l=0);m=parseFloat(p.getAttribute("y1"));isNaN(m)&&(m=0);n=parseFloat(p.getAttribute("x2"));isNaN(n)&&(n=0);p=parseFloat(p.getAttribute("y2"));isNaN(p)&&(p=0);var q=new zc(Dc);h.position=new w(Math.min(l,n),Math.min(m,p));0<(n-l)/(p-m)?(q.qa=0,q.ra=0,q.D=Math.abs(n-l),q.F=Math.abs(p-m)):(q.qa=0,q.ra=Math.abs(p-m),q.D=Math.abs(n-l),q.F=
0);h.nd=q;break;case "circle":n=g;h=new V;l=parseFloat(n.getAttribute("r"));isNaN(l)||0>l?h=null:(m=parseFloat(n.getAttribute("cx")),isNaN(m)&&(m=0),n=parseFloat(n.getAttribute("cy")),isNaN(n)&&(n=0),p=new zc(Mc),p.qa=0,p.ra=0,p.D=2*l,p.F=2*l,h.position=new w(m-l,n-l),h.nd=p);break;case "ellipse":p=g;h=new V;l=parseFloat(p.getAttribute("rx"));isNaN(l)||0>l?h=null:(m=parseFloat(p.getAttribute("ry")),isNaN(m)||0>m?h=null:(n=parseFloat(p.getAttribute("cx")),isNaN(n)&&(n=0),p=parseFloat(p.getAttribute("cy")),
isNaN(p)&&(p=0),q=new zc(Mc),q.qa=0,q.ra=0,q.D=2*l,q.F=2*m,h.position=new w(n-l,p-m),h.nd=q));break;case "rect":q=g;h=new V;l=parseFloat(q.getAttribute("width"));if(isNaN(l)||0>l)h=null;else if(m=parseFloat(q.getAttribute("height")),isNaN(m)||0>m)h=null;else{n=parseFloat(q.getAttribute("x"));isNaN(n)&&(n=0);p=parseFloat(q.getAttribute("y"));isNaN(p)&&(p=0);var r=q.getAttribute("rx"),s=q.getAttribute("ry"),q=parseFloat(r);if(isNaN(q)||0>q)q=0;var u=parseFloat(s);if(isNaN(u)||0>u)u=0;!r&&s?q=u:r&&!s&&
(u=q);q=Math.min(q,l/2);u=Math.min(u,m/2);s=void 0;0===q&&0===u?(s=new zc(Ec),s.qa=0,s.ra=0,s.D=l,s.F=m):(s=F.va/2,r=t.u(),I(r,q,0,!0),r.lineTo(l-q,0),J(r,l-q*s,0,l,u*s,l,u),r.lineTo(l,m-u),J(r,l,m-u*s,l-q*s,m,l-q,m),r.lineTo(q,m),J(r,q*s,m,0,m-u*s,0,m-u),r.lineTo(0,u),J(r,0,u*s,q*s,0,q,0),L(r),s=r.s,t.v(r));h.position=new w(n,p);h.nd=s}break;case "polygon":h=ar(g);break;case "polyline":h=ar(g)}if(null!==h){if(h instanceof V){l=Yq(a,g,"fill");null!==l&&-1!==l.indexOf("url")?(l=l.substring(l.indexOf("#")+
1,l.length-1),l=a["_brush"+l],h.fill=l instanceof ea?l:"black"):h.fill=null===l?"black":"none"===l?null:l;l=Yq(a,g,"stroke");null!==l&&-1!==l.indexOf("url")?(l=l.substring(l.indexOf("#")+1,l.length-1),l=a["_brush"+l],h.stroke=l instanceof ea?l:"black"):h.stroke="none"===l?null:l;l=parseFloat(Yq(a,g,"stroke-width"));isNaN(l)||(h.fb=l);l=Yq(a,g,"stroke-linecap");null!==l&&(h.wG=l);if(l=Yq(a,g,"stroke-dasharray")){m=l.split(",");n=[];for(l=0;l<m.length;l++)p=parseFloat(m[l]),!isNaN(p)&&0<p&&n.push(p);
h.zx=n}if(g=Yq(a,g,"stroke-dashoffset"))g=parseFloat(g),isNaN(g)||(h.xG=g);h.rA=!0}if(null!==k){k=k.split(")");g=!0;for(l=0;l<k.length;l++)/\(.*[^0-9\.,\s-]/.test(k[l])&&(g=!1),/\(.*[0-9]-[0-9]/.test(k[l])&&(g=!1);if(g)for(l=k.length-1;0<=l;l--)if(m=k[l],""!==m)switch(n=m.indexOf("("),g=m.substring(0,n).replace(/\s*/,""),n=m.substring(n+1).split(/\s*[\s,]\s*/),g){case "rotate":br(a,h,n);break;case "translate":g=h;m=parseFloat(n[0]);isNaN(m)&&(m=0);n=parseFloat(n[1]);isNaN(n)&&(n=0);if(0!==m||0!==
n)p=g.position.copy(),isNaN(p.x)&&(p.x=0),isNaN(p.y)&&(p.y=0),g.position=new w(m+p.x,n+p.y);break;case "scale":cr(a,h,n);break;case "skewX":dr(a,h,n);break;case "skewY":er(a,h,n);break;case "matrix":fr(a,h,n)}}if(h instanceof y){k=h.elements.k;l=g=0;m=h.position.copy();isNaN(m.x)&&(m.x=0);isNaN(m.y)&&(m.y=0);for(;k.next();)n=k.value.position.copy(),isNaN(n.x)&&(n.x=0),isNaN(n.y)&&(n.y=0),n.x<g&&(g=n.x),n.y<l&&(l=n.y);m.x+=g;m.y+=l;h.position=m}null===c?a.Vn.push(h):c.add(h)}}}if(null!==h){a=$q(b,
"visibility");if("hidden"===a||"collapse"===a)h.visible=!1;if(b=$q(b,"opacity"))b=parseFloat(b),isNaN(b)||(h.opacity=b)}}}
function fr(a,b,c){var d=parseFloat(c[0]),f=parseFloat(c[1]),g=parseFloat(c[2]),h=parseFloat(c[3]),k=parseFloat(c[4]),l=parseFloat(c[5]);if(!isNaN(d+f+g+h+k+l)){var m=b.position.copy();isNaN(m.x)&&(m.x=0);isNaN(m.y)&&(m.y=0);if(b instanceof V){c=b.nd.copy();if(c.type===Ec)c=a.Ds(c);else if(c.type===Mc)c=gr(c);else if(c.type===Dc){c.type=Ac;a=new Bc(c.qa,c.ra);var n=new id(Oc,c.D,c.F);a.Ea.add(n);c.Bb.add(a)}c.offset(m.x,m.y);c.transform(d,f,g,h,k-m.x,l-m.y);a=c.normalize();b.nd=c;m.x-=a.x;m.y-=a.y;
b.position=m}else{for(b=b.elements.k;b.next();)d=b.value.position.copy(),d.x+=m.x,d.y+=m.y,b.value.position=d;for(b.reset();b.next();)fr(a,b.value,c);for(b.reset();b.next();)d=b.value.position.copy(),d.x-=m.x,d.y-=m.y,b.value.position=d}}}
function br(a,b,c){var d=parseFloat(c[0]);isNaN(d)&&(d=0);var f=parseFloat(c[1]);isNaN(f)&&(f=0);var g=parseFloat(c[2]);isNaN(g)&&(g=0);if(0!==d){var h=d*Math.PI/180,k=b.position.copy();isNaN(k.x)&&(k.x=0);isNaN(k.y)&&(k.y=0);if(b instanceof V){c=b.nd.copy();c.type===Mc?c=gr(c):c.type===Ec&&(c=a.Ds(c));if(c.type===Ac)c.rotate(d,f-k.x,g-k.y),g=c.normalize(),b.nd=c,k.x-=g.x,k.y-=g.y,b.position=k;else{var d=c.qa-f+k.x,l=c.ra-g+k.y,m=c.D-f+k.x,n=c.F-g+k.y;a=d*Math.cos(h)-l*Math.sin(h)+f-k.x;d=l*Math.cos(h)+
d*Math.sin(h)+g-k.y;f=m*Math.cos(h)-n*Math.sin(h)+f-k.x;g=n*Math.cos(h)+m*Math.sin(h)+g-k.y;m=Math.min(a,f);n=Math.min(d,g);c.qa=a-m;c.ra=d-n;c.D=f-m;c.F=g-n;k.x+=m;k.y+=n;b.position=k;b.nd=c}b.fill instanceof ea&&(k=b.fill.copy(),c=Math.atan((0.5-k.start.y)/(0.5-k.start.x)),isNaN(c)||(c+=h,k.start=new H((1-Math.cos(c))/2,(1-Math.sin(c))/2),k.end=new H((1+Math.cos(c))/2,(1+Math.sin(c))/2)),b.fill=k);b.stroke instanceof ea&&(k=b.stroke.copy(),c=Math.atan((0.5-k.start.y)/(0.5-k.start.x)),isNaN(c)||
(c+=h,k.start=new H((1-Math.cos(c))/2,(1-Math.sin(c))/2),k.end=new H((1+Math.cos(c))/2,(1+Math.sin(c))/2)),b.stroke=k)}else{for(b=b.elements.k;b.next();)h=b.value.position.copy(),h.x+=k.x,h.y+=k.y,b.value.position=h;for(b.reset();b.next();)br(a,b.value,c);for(b.reset();b.next();)h=b.value.position.copy(),h.x-=k.x,h.y-=k.y,b.value.position=h}}}
function cr(a,b,c){var d=parseFloat(c[0]);isNaN(d)&&(d=1);var f=parseFloat(c[1]);isNaN(f)&&(f=d);if(1!==d||1!==f){var g=b.position.copy();isNaN(g.x)&&(g.x=0);isNaN(g.y)&&(g.y=0);if(b instanceof V)a=b.nd.copy(),g.x*=d,g.y*=f,b.position=g,a.scale(d,f),b.nd=a;else{for(b=b.elements.k;b.next();)d=b.value.position.copy(),d.x+=g.x,d.y+=g.y,b.value.position=d;for(b.reset();b.next();)cr(a,b.value,c);for(b.reset();b.next();)d=b.value.position.copy(),d.x-=g.x,d.y-=g.y,b.value.position=d}}}
function dr(a,b,c){var d=parseFloat(c[0]);if(!isNaN(d)){var d=d*Math.PI/180,f=b.position.copy();isNaN(f.x)&&(f.x=0);isNaN(f.y)&&(f.y=0);if(b instanceof V){c=b.nd.copy();if(c.type===Ec)c=a.Ds(c);else if(c.type===Mc)c=gr(c);else if(c.type===Dc){c.type=Ac;a=new Bc(c.qa,c.ra);var g=new id(Oc,c.D,c.F);a.Ea.add(g);c.Bb.add(a)}c.offset(f.x,f.y);c.transform(1,0,Math.tan(d),1,-f.x,-f.y);a=c.normalize();b.nd=c;f.x-=a.x;f.y-=a.y;b.position=f}else{for(b=b.elements.k;b.next();)d=b.value.position.copy(),d.x+=f.x,
d.y+=f.y,b.value.position=d;for(b.reset();b.next();)dr(a,b.value,c);for(b.reset();b.next();)d=b.value.position.copy(),d.x-=f.x,d.y-=f.y,b.value.position=d}}}
function er(a,b,c){var d=parseFloat(c[0]);if(!isNaN(d)){var d=d*Math.PI/180,f=b.position.copy();isNaN(f.x)&&(f.x=0);isNaN(f.y)&&(f.y=0);if(b instanceof V){c=b.nd.copy();if(c.type===Ec)c=a.Ds(c);else if(c.type===Mc)c=gr(c);else if(c.type===Dc){c.type=Ac;a=new Bc(c.qa,c.ra);var g=new id(Oc,c.D,c.F);a.Ea.add(g);c.Bb.add(a)}c.offset(f.x,f.y);c.transform(1,Math.tan(d),0,1,-f.x,-f.y);a=c.normalize();b.nd=c;f.x-=a.x;f.y-=a.y;b.position=f}else{for(b=b.elements.k;b.next();)d=b.value.position.copy(),d.x+=f.x,
d.y+=f.y,b.value.position=d;for(b.reset();b.next();)er(a,b.value,c);for(b.reset();b.next();)d=b.value.position.copy(),d.x-=f.x,d.y-=f.y,b.value.position=d}}}
function ar(a){var b=!1;if("polygon"===a.tagName)b=!0;else if("polyline"!==a.tagName)return null;var c=new V,d=a.getAttribute("points");a=new zc;var f=new B(Bc),g=d.split(/\s*[\s,]\s*/);if(4>g.length)return null;for(var h,d=new B(id),k,l,m=1;m<g.length;m+=2){k=eval(g[m-1]);l=eval(g[m]);if("number"!==typeof k||isNaN(k)||"number"!==typeof l||isNaN(l))return null;1===m?h=new Bc(k,l):d.add(new id(Oc,k,l))}b&&(b=new id(Oc,h.qa,h.ra),b.close(),d.add(b));h.Ea=d;f.add(h);a.Bb=f;h=a.normalize();c.position=
new w(-h.x,-h.y);c.nd=a;return c}
function gr(a){var b=a.qa,c=a.ra,d=a.D,f=a.F,g=Math.abs(d-b)/2,h=Math.abs(f-c)/2,b=Math.min(b,d)+g,c=Math.min(c,f)+h;new w;f=new Bc(b,c-h);d=new id(cd);d.Cb=b+F.va*g;d.Sb=c-h;d.re=b+g;d.se=c-F.va*h;d.D=b+g;d.F=c;f.Ea.add(d);d=new id(cd);d.Cb=b+g;d.Sb=c+F.va*h;d.re=b+F.va*g;d.se=c+h;d.D=b;d.F=c+h;f.Ea.add(d);d=new id(cd);d.Cb=b-F.va*g;d.Sb=c+h;d.re=b-g;d.se=c+F.va*h;d.D=b-g;d.F=c;f.Ea.add(d);d=new id(cd);d.Cb=b-g;d.Sb=c-F.va*h;d.re=b-F.va*g;d.se=c-h;d.D=b;d.F=c-h;f.Ea.add(d);a.type=Ac;a.Bb.add(f);
return a}Xq.prototype.Ds=function(a){var b=a.qa,c=a.ra,d=a.D,f=a.F,g=Math.min(b,d),h=Math.min(c,f),b=Math.abs(d-b),c=Math.abs(f-c),f=new Bc(g,h);f.Ea.add(new id(Oc,g+b,h));f.Ea.add(new id(Oc,g+b,h+c));f.Ea.add((new id(Oc,g,h+c)).close());a.type=Ac;a.Bb.add(f);return a};ba.version="1.4.27";
window&&(window.module&&"object"===typeof window.module&&"object"===typeof window.module.exports?window.module.exports=ba:window.define&&"function"===typeof window.define&&window.define.amd?(window.go=ba,window.define(ba)):window.go=ba); })(window);

/**
 * Created by pheadra on 6/11/15.
 */
(function (window, go, $, _) {
    "use strict";

    /**
     * ServerMap
     *
     * @class ServerMap
     * @version 1.0.0
     * @since Sep, 2013
     * @author Denny Lim<hello@iamdenny.com, iamdenny@nhn.com>
     * @license MIT License
     * @copyright 2014 NAVER Corp.
     */
    window.ServerMap = $.Class({

        /**
         * constructor
         *
         * @constructor
         * @method $init
         * @param {Hash Table} options
         */
        $init: function (htOption) {
            this.option({
                "sContainerId": '',
                "sBigFont": "11pt avn85,NanumGothic,ng,dotum,AppleGothic,sans-serif",
                "sSmallFont": "10pt avn55,NanumGothic,ng,dotum,AppleGothic,sans-serif",
                "sImageDir": './img/',
                "sBoldKey": null,
                "htIcons": {
                    'APACHE': 'APACHE.png',
                    'ARCUS': 'ARCUS.png',
                    'BACKEND': 'BACKEND.png',
                    'BLOC': 'BLOC.png',
                    'CASSANDRA': 'CASSANDRA.png',
                    'CUBRID': 'CUBRID.png',
                    'JAVA': 'JAVA.png',
                    'MEMCACHED': 'MEMCACHED.png',
                    'MONGODB': 'MONGODB.png',
                    'MSSQLSERVER': 'MSSQLSERVER.png',
                    'MYSQL': 'MYSQL.png',
                    'NBASE': 'NBASE.png',
                    'NGINX': 'NGINX.png',
                    'ORACLE': 'ORACLE.png',
                    'QUEUE': 'QUEUE.png',
                    'STAND_ALONE': 'STAND_ALONE.png',
                    'TOMCAT': 'TOMCAT.png',
                    'UNKNOWN': 'UNKNOWN.png',
                    'UNKNOWN_GROUP': 'UNKNOWN_GROUP.png',
                    'REDIS': 'REDIS.png',
                    'NBASE_ARC': 'NBASE_ARC.png',
                    'USER': 'USER.png'
                },
                "htNodeTheme": {
                    "default": {
                        "backgroundColor": "#ffffff",
                        "borderColor": "#C5C5C5",
                        "borderWidth": 1,
                        "fontColor": "#1F1F21"
                    },
                    "bold": {
                        "backgroundColor": "#f2f2f2",
                        "borderColor": "#666975",
                        "borderWidth": 2
                    }
                },
                "htLinkType": {
                    "sRouting": "AvoidsNodes", // Normal, Orthogonal, AvoidNodes
                    "sCurve": "JumpGap" // Bezier, JumpOver, JumpGap
                },
                "htLinkTheme": {
                    "default": {
                        "backgroundColor": "#ffffff",
                        "borderColor": "#c5c5c5",
                        "fontFamily": "11pt avn55,NanumGothic,ng,dotum,AppleGothic,sans-serif",
                        "fontColor": "#000000",
                        "fontAlign": "center",
                        "margin": 1
                    },
                    "bad": {
                        "backgroundColor": "#ffc9c9",
                        "borderColor": "#7d7d7d",
                        "fontFamily": "11pt avn55,NanumGothic,ng,dotum,AppleGothic,sans-serif",
                        "fontColor": "#FF1300",
                        "fontAlign": "center",
                        "margin": 1
                    }
                },
                "htHighlightNode": {
                    "borderColor": "#25AFF4",
                    "backgroundColor": "#289E1D",
                    "fontColor": "#ffffff"
                },
                "htHighlightLink": {
                    "borderColor": "#25AFF4"
                },
                "htPadding": {
                    "top": 10,
                    "right": 10,
                    "bottom": 10,
                    "left": 10
                },
                "fOnNodeClicked": function (eMouseEvent, htData) {
                },
                "fOnNodeContextClicked": function (eMouseEvent, htData) {
                },
                "fOnLinkClicked": function (eMouseEvent, htData) {
                },
                "fOnLinkContextClicked": function (eMouseEvent, htData) {
                },
                "fOnBackgroundClicked": function (eMouseEvent, htData) {
                },
                "fOnBackgroundDoubleClicked": function (eMouseEvent, htData) {
                },
                "fOnBackgroundContextClicked": function (eMouseEvent, htData) {
                }
            });

            this.option(htOption);
            this._initVariables();
            this._initNodeTemplates();
            this._initLinkTemplates();
            this._initDiagramEnvironment();
        },

        /**
         * initialize variables
         *
         * @method _initVariables
         */
        _initVariables: function () {
            this.$ = go.GraphObject.make;
            this.nodeClickEventOnce = false;
            this._oDiagram = this.$(
                go.Diagram,
                this.option('sContainerId'),
                {
                    initialContentAlignment: go.Spot.Center,
                    maxSelectionCount: 1,
                    allowDelete: false
                }
            );
        },

        /**
         * initialize node templates
         *
         * @method _initNodeTemplates
         */
        _initNodeTemplates: function () {
            var self = this,
                sImageDir = this.option('sImageDir'),
                htIcons = this.option('htIcons');

            var infoTableTemplate = self.$(
                go.Panel,
                go.Panel.TableRow,
                {

                },
                self.$(
                    go.TextBlock,
                    {
                        margin: new go.Margin(0, 2),
                        column: 1,
                        stroke: "#848484",
                        font: self.option('sSmallFont')
                    },
                    new go.Binding('text', 'k')
                ),
                self.$(
                    go.TextBlock,
                    {
                        margin: new go.Margin(0, 2),
                        column: 2,
                        stroke: "#848484",
                        font: self.option('sSmallFont')
                    },
                    new go.Binding('text', 'v')
                )
            );

            var getNodeTemplate = function (sImageName) {
                return self.$(
                    go.Node,
                    new go.Binding("category", "serviceType"),
                    go.Panel.Auto,
                    {
                        selectionAdorned: false,
                        cursor: "pointer",
                        name: "NODE",
                        click: function (e, obj) {
                            self._onNodeClicked(e, obj);
                        },
                        contextClick: self._onNodeContextClicked.bind(this)
                    },
                    self.$(
                        go.Shape,
                        {
                            alignment: go.Spot.TopLeft,
                            alignmentFocus: go.Spot.TopLeft,
                            figure: "RoundedRectangle",
                            strokeWidth: 1,
//                            margin: new go.Margin(10, 10, 10, 10),
                            margin: 0,
                            isPanelMain: true,
//                            maxSize: new go.Size(150, NaN),
                            minSize: new go.Size(120, NaN),
                            name: "NODE_SHAPE",
                            portId: ""
                        },
                        new go.Binding("strokeWidth", "key", function (key) {
                            var type = 'default';
                            if (self.option('sBoldKey') && self.option('sBoldKey') === key) {
                                type = 'bold';
                            }
                            return self.option('htNodeTheme')[type].borderWidth;
                        }),
                        new go.Binding("stroke", "key", function (key) {
                            var type = 'default';
                            if (self.option('sBoldKey') && self.option('sBoldKey') === key) {
                                type = 'bold';
                            }
                            return self.option('htNodeTheme')[type].borderColor;
                        }),
                        new go.Binding("fill", "key", function (key) {
                            var type = 'default';
                            if (self.option('sBoldKey') && self.option('sBoldKey') === key) {
                                type = 'bold';
                            }
                            return self.option('htNodeTheme')[type].backgroundColor;
                        }),
                        new go.Binding("key", "key")
                    ),
                    self.$(
                        go.Panel,
                        go.Panel.Spot,
                        {
                            alignment: go.Spot.TopLeft,
                            alignmentFocus: go.Spot.TopLeft
                        },
                        self.$(
                            go.Panel,
                            go.Panel.Vertical,
                            {
                                alignment: go.Spot.TopLeft,
                                alignmentFocus: go.Spot.TopLeft,
                                minSize: new go.Size(120, NaN)
                            },
                            self.$(
                                go.Picture,
                                {
                                    source: sImageDir + sImageName,
                                    margin: new go.Margin(18, 0, 5, 0),
                                    desiredSize: new go.Size(80, 40),
                                    imageStretch: go.GraphObject.Uniform
                                }
                            ),
                            self.$(
                                go.TextBlock,
                                new go.Binding("text", "applicationName").makeTwoWay(),
                                {
                                    alignment: go.Spot.Center,
                                    name: "NODE_TEXT",
                                    margin: 6,
                                    font: self.option('sBigFont'),
//                                    wrap: go.TextBlock.WrapFit,
//                                    width: 130,
                                    editable: false
                                }
                            ),

                            // http://www.gojs.net/latest/samples/entityRelationship.html
                            // http://www.gojs.net/latest/samples/records.html
                            self.$(
                                go.Panel,
                                go.Panel.Table,
                                {
                                    padding: 2,
                                    minSize: new go.Size(100, 10),
                                    defaultStretch: go.GraphObject.Horizontal,
                                    itemTemplate: infoTableTemplate
                                },
                                new go.Binding("itemArray", "infoTable")
                            )
                        ),
                        self.$(
                            go.Panel,
                            go.Panel.Horizontal,
                            {
                                alignment: go.Spot.TopLeft,
                                alignmentFocus: go.Spot.TopLeft,
                                margin: 0
                            },
                            self.$(
                                go.Picture,
                                {
                                    source: sImageDir + 'ERROR.png',
                                    desiredSize: new go.Size(20, 20),
//                                    visible: false,
                                    imageStretch: go.GraphObject.Uniform,
                                    margin: new go.Margin(1, 5, 0, 1)
                                },
                                new go.Binding("visible", "hasAlert")
                            ),
                            self.$(
                                go.Picture,
                                {
                                    source: sImageDir + 'FILTER.png',
                                    desiredSize: new go.Size(17, 17),
                                    visible: false,
                                    imageStretch: go.GraphObject.Uniform
                                },
                                new go.Binding("visible", "isFiltered")
                            )
                        ),
                        self.$(
                            go.Panel,
                            go.Panel.Auto,
                            {
                                alignment: go.Spot.TopRight,
                                alignmentFocus: go.Spot.TopRight,
                                visible: false
                            },
                            new go.Binding("visible", "instanceCount", function (v) {
                                return v > 1 ? true : false;
                            }),
                            self.$(
                                go.Shape,
                                {
                                    figure: "RoundedRectangle",
                                    fill: "#848484",
                                    strokeWidth: 1,
                                    stroke: "#848484"
                                }
                            ),
                            self.$(
                                go.Panel,
                                go.Panel.Auto,
                                {
                                    margin: new go.Margin(0, 3, 0, 3)
                                },
                                self.$(
                                    go.TextBlock,
                                    new go.Binding("text", "instanceCount"),
                                    {
                                        stroke: "#FFFFFF",
                                        textAlign: "center",
                                        height: 16,
                                        font: self.option('sSmallFont'),
                                        editable: false
                                    }
                                )
                            )
                        )
                    )
                );
            };

            var unknownTableTemplate = self.$(
                go.Panel,
                go.Panel.TableRow,
                {
                },
                self.$(
                    go.Picture,
                    {
                        source: sImageDir + 'ERROR.png',
                        margin: new go.Margin(1, 2),
                        desiredSize: new go.Size(10, 10),
                        visible: false,
                        column: 1,
                        imageStretch: go.GraphObject.Uniform
                    },
                    new go.Binding("visible", "hasAlert")
                ),
                self.$(
                    go.TextBlock,
                    {
                        margin: new go.Margin(1, 2),
                        column: 2,
                        font: self.option('sSmallFont'),
//                        height:30,
                        alignment: go.Spot.Left
                    },
                    new go.Binding('text', 'applicationName'),
                    new go.Binding('click', 'key', function (key) {
                        return function (e, obj) {
                            e.bubbles = false;
                            self._onNodeClicked(e, obj, key);
                            return false;
                        };
                    })
                ),
                self.$(
                    go.TextBlock,
                    {
                        margin: new go.Margin(1, 2),
                        column: 3,
                        alignment: go.Spot.Right,
                        font: self.option('sSmallFont')
                    },
                    new go.Binding('text', 'totalCount', function (val) {
                        return Number(val, 10).toLocaleString();
                    })
                )
            );

            var getUnknownGroupTemplate = function (sImageName) {
                return self.$(
                    go.Node,
                    go.Panel.Auto,
                    {
                        selectionAdorned: false,
                        cursor: "pointer",
                        name: "NODE",
                        click: function (e, obj) {
                            if (e.bubbles) {
                                self._onNodeClicked(e, obj);
                            }
                        },
                        contextClick: self._onNodeContextClicked.bind(this)
                    },
                    self.$(
                        go.Shape,
                        {
                            figure: "RoundedRectangle",
//                            margin: new go.Margin(10, 10, 10, 10),
                            isPanelMain: true,
//                            maxSize: new go.Size(150, NaN),
                            minSize: new go.Size(100, 100),
                            name: "NODE_SHAPE",
                            portId: "",
                            strokeWidth: self.option('htNodeTheme').default.borderWidth,
                            stroke: self.option('htNodeTheme').default.borderColor,
                            fill: self.option('htNodeTheme').default.backgroundColor
                        },
                        new go.Binding("key", "key")
                    ),
                    self.$(
                        go.Panel,
                        go.Panel.Spot,
                        {
                        },
                        self.$(
                            go.Panel,
                            go.Panel.Vertical,
                            {
                                alignment: go.Spot.TopLeft,
                                alignmentFocus: go.Spot.TopLeft,
                                minSize: new go.Size(130, NaN)
                            },
                            self.$(
                                go.Picture,
                                {
                                    source: sImageDir + sImageName,
                                    margin: new go.Margin(0, 0, 5, 0),
                                    desiredSize: new go.Size(100, 40),
                                    imageStretch: go.GraphObject.Uniform
                                }
                            ),
                            self.$(
                                go.Panel,
                                go.Panel.Table,
                                {
                                    padding: 2,
                                    minSize: new go.Size(100, 10),
                                    defaultStretch: go.GraphObject.Horizontal,
                                    itemTemplate: unknownTableTemplate,
                                    name: "NODE_TEXT"
                                },
                                new go.Binding("itemArray", "unknownNodeGroup")
                            )
                        )
                    )
                );
            };

            _.each(htIcons, function (sVal, sKey) {
                if (sKey === "UNKNOWN_GROUP") {
                    this._oDiagram.nodeTemplateMap.add(sKey, getUnknownGroupTemplate(sVal));
                } else {
                    this._oDiagram.nodeTemplateMap.add(sKey, getNodeTemplate(sVal));
                }
            }, this);

        },

        /**
         * initialize link templates
         *
         * @method _initLinkTemplates
         */
        _initLinkTemplates: function () {
            var self = this,
                htLinkType = this.option('htLinkType'),
                option = {
                    selectionAdorned: false,
                    // selectionAdornmentTemplate: this._oDefaultAdornmentForLink,
//                    click: this._onLinkClicked.bind(this),
                    contextClick: this._onLinkContextClicked.bind(this),
                    layerName: "Foreground",
                    reshapable: false, // to disable reshape on links

                    // fromSpot: go.Spot.RightSide,
                    // toSpot: go.Spot.LeftSide,

                    // routing: go.Link[htLinkType.sRouting],
                    // routing : go.Link.Normal,
                    // routing: go.Link.Orthogonal,
                    // routing: go.Link.AvoidsNodes,

                    corner: 10,
                    cursor: "pointer"

                    // curve: go.Link[htLinkType.sCurve],
                    // curve: go.Link.JumpOver
                    // curve: go.Link.JumpGap
                    // curve: go.Link.Bezier
                },
                htLinkTheme = this.option("htLinkTheme"),
                sImageDir = this.option('sImageDir'),
                htDefault = htLinkTheme.default,
                bad = htLinkTheme.bad;

            var getLinkTemplate = function (htOption) {
                return self.$(
                    go.Link,  // the whole link panel
                    // { routing: go.Link.Normal, curve: go.Link.Bezier, toShortLength: 2 },
                    option,
                    new go.Binding("routing", "routing", function (val) {
                        return go.Link[val];
                    }),
                    new go.Binding("curve", "curve", function (val) {
                        return go.Link[val];
                    }),
                    new go.Binding("curviness", "curviness"),
                    self.$(
                        go.Shape,  // the link shape
                        {
                            name: "LINK",
                            isPanelMain: true,
                            stroke: htOption.borderColor,
                            strokeWidth: 1.5
                        }
                    ),
                    self.$(
                        go.Shape,  // the arrowhead
                        {
                            name: "ARROW",
                            toArrow: "standard",  // toArrow : kite, standard, OpenTriangle
                            fill: htOption.borderColor,
                            stroke: null,
                            scale: 1.5
                        }
                    ),
                    self.$(
                        go.Panel,
                        go.Panel.Auto,
                        self.$(
                            go.Shape,  // the link shape
                            "RoundedRectangle",
                            {
                                name: "LINK2",
                                fill: "#ffffff",
                                stroke: "#ffffff",
                                portId: "",
                                fromLinkable: true,
                                toLinkable: true
                            }
                        ),
                        self.$(
                            go.Panel,
                            go.Panel.Horizontal,
                            {
                                margin: 4
                            },
                            self.$(
                                go.Picture,
                                {
                                    source: sImageDir + 'FILTER.png',
                                    width: 14,
                                    height: 14,
                                    margin: 1,
                                    visible: false,
                                    imageStretch: go.GraphObject.Uniform
                                },
                                new go.Binding("visible", "isFiltered")
                            ),
                            self.$(
                                go.TextBlock,  // the label
                                {
                                    textAlign: htOption.fontAlign,
                                    font: htOption.fontFamily,
                                    margin: htOption.margin
                                },
//                                new go.Binding("text", "count", function (val) {
                                new go.Binding("text", "totalCount", function (val) {
                                    return Number(val, 10).toLocaleString();
                                }) ,
                                new go.Binding("stroke", "hasAlert", function (hasAlert) {
                                    return (hasAlert) ? bad.fontColor : htDefault.fontColor;
                                })
                            )
                        )
                    )
                );
            };

            this._oDiagram.linkTemplate = getLinkTemplate(htDefault);

            _.each(htLinkTheme, function (sVal, sKey) {
                if (sKey === "default") {
                    return;
                }
                this._oDiagram.linkTemplateMap.add(sKey, getLinkTemplate(sVal));
            }, this);
        },

        /**
         * initialize diagrams
         *
         * @method _initDiagramEnvironment
         */
        _initDiagramEnvironment: function () {
            var htPadding = this.option('htPadding');
            // have mouse wheel events zoom in and out instead of scroll up and
            // down
            this._oDiagram.toolManager.mouseWheelBehavior = go.ToolManager.WheelZoom;
            this._oDiagram.allowDrop = false;

            // read in the JSON-format data from the "mySavedModel" element
            this._oDiagram.initialAutoScale = go.Diagram.Uniform; // None,
            // Uniform,
            // UniformToFill
            // this._oDiagram.toolManager.linkingTool.direction =
            // go.LinkingTool.ForwardsOnly;
            this._oDiagram.toolManager.draggingTool.doCancel();
            this._oDiagram.toolManager.draggingTool.doDeactivate();
            this._oDiagram.toolManager.dragSelectingTool.isEnabled = false;
            this._oDiagram.initialContentAlignment = go.Spot.Center;
            this._oDiagram.padding = new go.Margin(htPadding.top, htPadding.right, htPadding.bottom, htPadding.left);
            this._oDiagram.layout = this.$(
                go.LayeredDigraphLayout,
                { // rdirection: 90,
                    isOngoing: false,
                    layerSpacing: 100,
                    columnSpacing: 30,
                    setsPortSpots: false
                    // packOption : 7 // sum of 1(PackExpand), 2(PackStraighten), 4(PackMedian)

// direction : 0,
// cycleRemoveOption : go.LayeredDigraphLayout.CycleDepthFirst,
// layeringOption : go.LayeredDigraphLayout.LayerOptimalLinkLength,
// initializeOption : go.LayeredDigraphLayout.InitDepthFirstOut,
// aggressiveOption : go.LayeredDigraphLayout.AggressiveLess,
// packOption : 7,
// setsPortSpots : true
                }
            );

            var self = this;
            // whenever selection changes, run updateHighlights
            this._oDiagram.addDiagramListener("ChangedSelection", function (e) {
                var selection = self._oDiagram.selection.first();
                if (selection) {
                    if (selection instanceof go.Node) {
                        if (!self.nodeClickEventOnce) {
                            self._onNodeClicked(e, selection);
                            self.nodeClickEventOnce = true;
                        }
                    } else if (selection instanceof go.Link) {
                        self._onLinkClicked(e, selection);
                    }
                }
                self._updateHightlights();
            });
            this._oDiagram.addDiagramListener("BackgroundSingleClicked", function (e) {
                var fOnBackgroundClicked = self.option('fOnBackgroundClicked');
                if (_.isFunction(fOnBackgroundClicked)) {
                    fOnBackgroundClicked.call(self, e);
                }
            });
            this._oDiagram.addDiagramListener("BackgroundDoubleClicked", function (e) {
                var fOnBackgroundDoubleClicked = self.option('fOnBackgroundDoubleClicked');
                if (_.isFunction(fOnBackgroundDoubleClicked)) {
                    fOnBackgroundDoubleClicked.call(self, e);
                }
            });
            this._oDiagram.addDiagramListener("BackgroundContextClicked", function (e) {
                var fOnBackgroundContextClicked = self.option('fOnBackgroundContextClicked');
                if (_.isFunction(fOnBackgroundContextClicked)) {
                    fOnBackgroundContextClicked.call(self, e);
                }
            });
        },

        /**
         * load
         *
         * @method load
         * @param {Hash Table} str
         */
        load: function (str) {
            this.nodeClickEventOnce = false;
            this._sLastModelData = str;
            this._oDiagram.model = go.Model.fromJson(str);
            this._oDiagram.undoManager.isEnabled = true;
        },

        /**
         * clear diagram
         *
         * @method clear
         */
        clear: function () {
            this._oDiagram.model = go.Model.fromJson({});
        },

        /**
         * reset highlights
         *
         * @method _resetHighlights
         */
        _resetHighlights: function () {
            var allNodes = this._oDiagram.nodes;
            var allLinks = this._oDiagram.links;
            while (allNodes.next()) {
                allNodes.value.highlight = false;
            }
            while (allLinks.next()) {
                allLinks.value.highlight = false;
            }
        },

        /**
         * update highlights
         *
         * @method _updateHighlights
         * @param {go.Node} selection
         */
        _updateHightlights: function (selection) {
            selection = selection || this._oDiagram.selection.first();
            if (selection === null) {
                return;
            }

            this._resetHighlights();
            selection.highlight = 'self';
            if (selection instanceof go.Node) {
//                this._linksTo(selection, 'from');
//                this._linksFrom(selection, 'to');
            } else if (selection instanceof go.Link) {
//                this._nodesTo(selection, 'from');
//                this._nodesFrom(selection, 'to');
            }

            // iterators containing all nodes and links in the diagram
            var allNodes = this._oDiagram.nodes,
                allLinks = this._oDiagram.links;

            // nodes, including groups
            while (allNodes.next()) {
                this._hightlightNode(allNodes.value.findObject("NODE_SHAPE"), allNodes.value.findObject("NODE_TEXT"), allNodes.value.highlight);
            }
            // links
            while (allLinks.next()) {
                this._highlightLink(allLinks.value.findObject("LINK"), allLinks.value.highlight);
//                this._highlightLink(allLinks.value.findObject("LINK2"), allLinks.value.highlight);
                this._highlightLink(allLinks.value.findObject("ARROW"), allLinks.value.highlight, true);
            }
        },

        /**
         * highlight node by node key
         *
         * @method highlightNodeByKey
         * @param {String} sKey node key
         */
        highlightNodeByKey: function (sKey) {
            var node = this._oDiagram.findNodeForKey(sKey);
            if (node) {
                var part = this._oDiagram.findPartForKey(sKey);
                this._oDiagram.select(part);
                this._updateHightlights(node);
            }
        },

        /**
         * highlight link by from, to objects
         *
         * @method highlightLinkByFromTo
         * @param {String,Number} from
         * @param {String,Number} to
         */
        highlightLinkByFromTo: function (from, to) {
            var htLink = this._getLinkObjectByFromTo(from, to);
            if (htLink) {
                this._oDiagram.select(this._oDiagram.findPartForData(htLink));
                this._updateHightlights(this._oDiagram.findLinkForData(htLink));
            }
        },

        /**
         * get link by from, to objects
         *
         * @method _getLinkObjectByFromTo
         * @param {String,Number} from
         * @param {String,Number} to
         */
        _getLinkObjectByFromTo: function (from, to) {
            var aLink = this._oDiagram.model.linkDataArray;
            for (var i = 0, len = aLink.length; i < len; i += 1) {
                var htLink = aLink[i];
                if (htLink.from === from && htLink.to === to) {
                    return htLink;
                }
            }
            return false;
        },

        /**
         * highlight node
         * @param nodeShape
         * @param nodeText
         * @param theme
         * @private
         */
        _hightlightNode: function (nodeShape, nodeText, theme) {
            if (nodeShape === null || nodeText === null) {
                return;
            }
            if (theme) {
                nodeShape.stroke = this.option('htHighlightNode').borderColor;
//                nodeText.stroke = this.option('htHighlightNode')[theme].fontColor;
            } else {
                var type = (nodeShape.key === this.option('sBoldKey')) ? 'bold' : 'default';
                nodeShape.stroke = this.option('htNodeTheme')[type].borderColor;
//                nodeText.stroke = this.option('htNodeTheme').default.fontColor;
            }
        },

        /**
         * highlight link
         * @param shape
         * @param theme
         * @private
         */
        _highlightLink: function (shape, theme, toFill) {
            if (shape === null) {
                return;
            }
            var color;
            if (theme) {
                color = this.option('htHighlightLink').borderColor;
            } else {
                color = this.option('htLinkTheme').default.borderColor;
            }
            if (toFill) {
                shape.fill = color;
            } else {
                shape.stroke = color;
            }
        },

        /**
         * if the link connects to this node, highlight it
         *
         * @method _linksTo
         * @param {go.Node} x
         * @param {Number} i
         */
        _linksTo: function (x, i) {
            if (x instanceof go.Node) {
                var links = x.findLinksInto();
                while (links.next()) {
                    links.value.highlight = i;
                }
            }
        },

        /**
         * if the link comes from this node, highlight it
         *
         * @method _linksFrom
         * @param {go.Node} x
         * @param {Number} i
         */
        _linksFrom: function (x, i) {
            if (x instanceof go.Node) {
                var links = x.findLinksOutOf();
                while (links.next()) {
                    links.value.highlight = i;
                }
            }
        },

        /**
         * if selected object is a link, highlight its fromNode, otherwise,
         * highlight the fromNode of each link coming into the selected node
         *
         * @method _nodesTo
         * @param {go.Node} x
         * @param {Number} i
         * @return a List of the keys of the nodes
         */
        _nodesTo: function (x, i) {
            var nodesToList = new go.List("string");
            if (x instanceof go.Link) {
                x.fromNode.highlight = i;
                nodesToList.add(x.data.from);
            } else {
                var nodes = x.findNodesInto();
                while (nodes.next()) {
                    nodes.value.highlight = i;
                    nodesToList.add(nodes.value.data.key);
                }
            }
            return nodesToList;
        },

        /**
         * same as nodesTo, but from instead of to
         *
         * @method _nodesFrom
         * @param {go.Node} x
         * @param {Number} i
         */
        _nodesFrom: function (x, i) {
            var nodesFromList = new go.List("string");
            if (x instanceof go.Link) {
                x.toNode.highlight = i;
                nodesFromList.add(x.data.to);
            } else {
                var nodes = x.findNodesOutOf();
                while (nodes.next()) {
                    nodes.value.highlight = i;
                    nodesFromList.add(nodes.value.data.key);
                }
            }
            return nodesFromList;
        },

        /**
         * event of node click
         *
         * @method _onNodeClicked
         * @param {Event} e
         * @param {ojb} ojb
         * @param {String} unknownKey
         */
        _onNodeClicked: function (e, obj, unknownKey) {
            var node = obj.part,
                htData = node.data,
                fOnNodeClicked = this.option('fOnNodeClicked');
            if (_.isFunction(fOnNodeClicked)) {
                fOnNodeClicked.call(this, e, htData, unknownKey);
            }
            // node.diagram.startTransaction("onNodeClick");
            // node.diagram.commitTransaction("onNodeClick");
        },

        /**
         * event of node context click
         *
         * @method _onNodeContextClick
         * @param {Event} e
         * @param {ojb} ojb
         */
        _onNodeContextClicked: function (e, obj) {
            var node = obj.part,
                htData = node.data,
                fOnNodeContextClicked = this.option('fOnNodeContextClicked');
            if (_.isFunction(fOnNodeContextClicked)) {
                fOnNodeContextClicked.call(this, e, htData);
            }
        },

        /**
         * event of link click
         *
         * @method _onLinkClicked
         * @param {Event} e
         * @param {ojb} ojb
         */
        _onLinkClicked: function (e, obj) {
            var link = obj.part,
                htData = link.data,
                fOnLinkClicked = this.option('fOnLinkClicked');
            if (_.isFunction(fOnLinkClicked)) {
                htData.fromNode = obj.fromNode.part.data;
                htData.toNode = obj.toNode.part.data;
                fOnLinkClicked.call(this, e, htData);
            }
        },

        /**
         * event of link context click
         *
         * @method _onLinkContextClicked
         * @param {Event} e
         * @param {ojb} ojb
         */
        _onLinkContextClicked: function (e, obj) {
            var link = obj.part,
                htData = link.data,
                fOnLinkContextClicked = this.option('fOnLinkContextClicked');
            if (_.isFunction(fOnLinkContextClicked)) {
                htData.fromNode = obj.fromNode.part.data;
                htData.toNode = obj.toNode.part.data;
                fOnLinkContextClicked.call(this, e, htData);
            }
        },

        /**
         * refresh
         */
        refresh: function () {
//            while (this._oDiagram.undoManager.canUndo()) {
//                this._oDiagram.undoManager.undo();
//            }
//            this._oDiagram.zoomToFit();
            this.load(this._sLastModelData);
        },

        /**
         * zoom to fit
         */
        zoomToFit: function () {
            this._oDiagram.zoomToFit();
            this._oDiagram.contentAlignment = go.Spot.Center;
            this._oDiagram.contentAlignment = go.Spot.None;
        }

    });

})(window, go, jQuery, _);
'use strict';

angular.module('app', [
    'ngAnimate',
    'ngCookies',
    'ngResource',
    'ngSanitize',
    'ngTouch',
    'ngStorage',
    'ui.router',
    'ui.bootstrap',
    'ui.utils',
    'ui.load',
    'ui.jq',
    'oc.lazyLoad',
    'pascalprecht.translate',
    'appservices',
    'facebook',
    'googleplus',
    'user',
    'toaster',
    'youtube-embed'
]);


// config

var app =  
angular.module('app')
  .constant('server_url', '/')
  .config(
    [        '$controllerProvider', '$compileProvider', '$filterProvider', '$provide', 'FacebookProvider', 'GooglePlusProvider','cryptProvider',
    function ($controllerProvider,   $compileProvider,   $filterProvider,   $provide, FacebookProvider,   GooglePlusProvider, cryptProvider) {

        cryptProvider.setSecret('abcdefg1234567890');
        FacebookProvider.init('858617410822846');
        GooglePlusProvider.init({
            clientId: '974639913694-n9mc312ljjf9mrce85la0ipaloabj6tp.apps.googleusercontent.com',
            apiKey: 'derp'
        });

        // lazy controller, directive and service
        app.controller = $controllerProvider.register;
        app.directive  = $compileProvider.directive;
        app.filter     = $filterProvider.register;
        app.factory    = $provide.factory;
        app.service    = $provide.service;
        app.constant   = $provide.constant;
        app.value      = $provide.value;
    }
  ])
  .config(['$translateProvider', function($translateProvider){
    // Register a loader for the static files
    // So, the module will search missing translation tables under the specified urls.
    // Those urls are [prefix][langKey][suffix].
    $translateProvider.useStaticFilesLoader({
      prefix: 'l10n/',
      suffix: '.js'
    });
    // Tell the module what language to use by default
    $translateProvider.preferredLanguage('en');
    // Tell the module to store the language in the local storage
    $translateProvider.useLocalStorage();

    $translateProvider.useSanitizeValueStrategy('escaped');

}]);
// lazyload config

angular.module('app')
    /**
   * jQuery plugin config use ui-jq directive , config the js and css files that required
   * key: function name of the jQuery plugin
   * value: array of the css js file located
   */
  .constant('JQ_CONFIG', {
      easyPieChart:   [   '../bower_components/jquery.easy-pie-chart/dist/jquery.easypiechart.fill.js'],
      sparkline:      [   '../bower_components/jquery.sparkline/dist/jquery.sparkline.min.js'],
      plot:           [   '../bower_components/flot/jquery.flot.js',
                          '../bower_components/flot/jquery.flot.pie.js',
                          '../bower_components/flot/jquery.flot.resize.js',
                          '../bower_components/flot.tooltip/js/jquery.flot.tooltip.js',
                          '../bower_components/flot.orderbars/js/jquery.flot.orderBars.js',
                          '../bower_components/flot-spline/js/jquery.flot.spline.js'],
      moment:         [   '../bower_components/moment/moment.js'],
      screenfull:     [   '../bower_components/screenfull/dist/screenfull.js'],
      slimScroll:     [   '../bower_components/slimscroll/jquery.slimscroll.min.js'],
      sortable:       [   '../bower_components/html5sortable/jquery.sortable.js'],
      nestable:       [   '../bower_components/nestable/jquery.nestable.js',
                          '../bower_components/nestable/jquery.nestable.css'],
      filestyle:      [   '../bower_components/bootstrap-filestyle/src/bootstrap-filestyle.js'],
      slider:         [   '../bower_components/bootstrap-slider/bootstrap-slider.js',
                          '../bower_components/bootstrap-slider/bootstrap-slider.css'],
      chosen:         [   '../bower_components/chosen/chosen.jquery.min.js',
                          '../bower_components/bootstrap-chosen/bootstrap-chosen.css'],
      TouchSpin:      [   '../bower_components/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.min.js',
                          '../bower_components/bootstrap-touchspin/dist/jquery.bootstrap-touchspin.min.css'],
      wysiwyg:        [   '../bower_components/bootstrap-wysiwyg/bootstrap-wysiwyg.js',
                          '../bower_components/bootstrap-wysiwyg/external/jquery.hotkeys.js'],
      dataTable:      [   '../bower_components/datatables/media/js/jquery.dataTables.min.js',
                          '../bower_components/plugins/integration/bootstrap/3/dataTables.bootstrap.js',
                          '../bower_components/plugins/integration/bootstrap/3/dataTables.bootstrap.css'],
      vectorMap:      [   '../bower_components/bower-jvectormap/jquery-jvectormap-1.2.2.min.js',
                          '../bower_components/bower-jvectormap/jquery-jvectormap-world-mill-en.js',
                          '../bower_components/bower-jvectormap/jquery-jvectormap-us-aea-en.js',
                          '../bower_components/bower-jvectormap/jquery-jvectormap-1.2.2.css'],
      footable:       [   '../bower_components/footable/dist/footable.all.min.js',
                          '../bower_components/footable/css/footable.core.css'],
      fullcalendar:   [   '../bower_components/moment/moment.js',
                          '../bower_components/fullcalendar/dist/fullcalendar.min.js',
                          '../bower_components/fullcalendar/dist/fullcalendar.css',
                          '../bower_components/fullcalendar/dist/fullcalendar.theme.css'],
      daterangepicker:[   '../bower_components/moment/moment.js',
                          '../bower_components/bootstrap-daterangepicker/daterangepicker.js',
                          '../bower_components/bootstrap-daterangepicker/daterangepicker-bs3.css'],
      tagsinput:      [   '../bower_components/bootstrap-tagsinput/dist/bootstrap-tagsinput.js',
                          '../bower_components/bootstrap-tagsinput/dist/bootstrap-tagsinput.css'],
        gojs:          [  '../bower_components/gojs/release/go.js']

    }
  )
  // oclazyload config
  .config(['$ocLazyLoadProvider', function($ocLazyLoadProvider) {
      // We configure ocLazyLoad to use the lib script.js as the async loader
      $ocLazyLoadProvider.config({
          debug:  true,
          events: true,
          modules: [
              {
                  name: 'ngGrid',
                  files: [
                      '../bower_components/ng-grid/build/ng-grid.min.js',
                      '../bower_components/ng-grid/ng-grid.min.css',
                      '../bower_components/ng-grid/ng-grid.bootstrap.css'
                  ]
              },
              {
                  name: 'ui.grid',
                  files: [
                      '../bower_components/angular-ui-grid/ui-grid.min.js',
                      '../bower_components/angular-ui-grid/ui-grid.min.css',
                      '../bower_components/angular-ui-grid/ui-grid.bootstrap.css'
                  ]
              },
              {
                  name: 'ui.select',
                  files: [
                      '../bower_components/angular-ui-select/dist/select.min.js',
                      '../bower_components/angular-ui-select/dist/select.min.css'
                  ]
              },
              {
                  name:'angularFileUpload',
                  files: [
                    '../bower_components/angular-file-upload/angular-file-upload.min.js'
                  ]
              },
              {
                  name:'ui.calendar',
                  files: ['../bower_components/angular-ui-calendar/src/calendar.js']
              },
              {
                  name: 'ngImgCrop',
                  files: [
                      '../bower_components/ngImgCrop/compile/minified/ng-img-crop.js',
                      '../bower_components/ngImgCrop/compile/minified/ng-img-crop.css'
                  ]
              },
              {
                  name: 'angularBootstrapNavTree',
                  files: [
                      '../bower_components/angular-bootstrap-nav-tree/dist/abn_tree_directive.js',
                      '../bower_components/angular-bootstrap-nav-tree/dist/abn_tree.css'
                  ]
              },
              {
                  name: 'toaster',
                  files: [
                      '../bower_components/angularjs-toaster/toaster.js',
                      '../bower_components/angularjs-toaster/toaster.css'
                  ]
              },
              {
                  name: 'textAngular',
                  files: [
                      '../bower_components/textAngular/dist/textAngular-sanitize.min.js',
                      '../bower_components/textAngular/dist/textAngular.min.js'
                  ]
              },
              {
                  name: 'vr.directives.slider',
                  files: [
                      '../bower_components/venturocket-angular-slider/build/angular-slider.min.js',
                      '../bower_components/venturocket-angular-slider/build/angular-slider.css'
                  ]
              },
              {
                  name: 'com.2fdevs.videogular',
                  files: [
                      '../bower_components/videogular/videogular.min.js'
                  ]
              },
              {
                  name: 'com.2fdevs.videogular.plugins.controls',
                  files: [
                      '../bower_components/videogular-controls/controls.min.js'
                  ]
              },
              {
                  name: 'com.2fdevs.videogular.plugins.buffering',
                  files: [
                      '../bower_components/videogular-buffering/buffering.min.js'
                  ]
              },
              {
                  name: 'com.2fdevs.videogular.plugins.overlayplay',
                  files: [
                      '../bower_components/videogular-overlay-play/overlay-play.min.js'
                  ]
              },
              {
                  name: 'com.2fdevs.videogular.plugins.poster',
                  files: [
                      '../bower_components/videogular-poster/poster.min.js'
                  ]
              },
              {
                  name: 'com.2fdevs.videogular.plugins.imaads',
                  files: [
                      '../bower_components/videogular-ima-ads/ima-ads.min.js'
                  ]
              },
              {
                  name: 'xeditable',
                  files: [
                      '../bower_components/angular-xeditable/dist/js/xeditable.min.js',
                      '../bower_components/angular-xeditable/dist/css/xeditable.css'
                  ]
              },
              {
                  name: 'smart-table',
                  files: [
                      '../bower_components/angular-smart-table/dist/smart-table.min.js'
                  ]
              }
          ]
      });
  }])
;

'use strict';

/**
 * Config for the router
 */
angular.module('app')
  .run(
    [          '$rootScope', '$state', '$stateParams',
      function ($rootScope,   $state,   $stateParams) {
          $rootScope.$state = $state;
          $rootScope.$stateParams = $stateParams;        
      }
    ]
  )
  .config(
    [          '$stateProvider', '$urlRouterProvider', 'JQ_CONFIG', 
      function ($stateProvider,   $urlRouterProvider, JQ_CONFIG) {
          
          $urlRouterProvider
              .otherwise('/app/dashboard-v1');

          $stateProvider
              // contents
              .state('app', {
                  abstract: true,
                  url: '/app',
                  templateUrl: 'tpl/app/layout.html'
              })
              .state('app.blank', {
                  url: '/blank',
                  template: '<div>blank</div>'

              })
              .state('app.dashboard-v1', {
                  url: '/dashboard-v1',
                  templateUrl: 'tpl/app_dashboard_v1.html',
                  controller:'DashboardCtrl',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad ){
                              return $ocLazyLoad.load(['js/app/dashboard/dashboard.js',
                                  'js/app/dashboard/dashboard-service.js',
                                  'js/app/dashboard/dashboard.css',
                              'js/app/realtime/realtime-service.js']);
                          }]
                  }
              })
              .state('app.servermap', {
                  url: '/servermap',
                  templateUrl: 'tpl/app_servermap.html',
                  controller:'ServerMapCtrl',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad ){
                              return $ocLazyLoad.load(['js/app/servermap/servermap.js']);
                          }]
                  }
              })
              .state('app.realtime', {
                  url: '/realtime',
                  templateUrl: 'tpl/app_realtime.html',
                  controller:'RealtimeCtrl',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad ){
                              return $ocLazyLoad.load(['js/app/realtime/realtime.js', 'js/app/realtime/realtime-service.js']);
                          }]
                  }
              })
              .state('app.transactionview', {
                  url: '/transactionview',
                  templateUrl: 'tpl/performance/transactionview.html',
                  controller:'TranscationViewCtrl',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad ){
                              return $ocLazyLoad.load(['js/app/performance/transactionview.js', 'js/app/performance/transaction-service.js']);
                          }]
                  }
              })
              .state('app.transactiondetail', {
                  url: '/transactiondetail',
                  templateUrl: 'tpl/performance/transactiondetail.html',
                  controller:'TranscationDetailCtrl',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad ){
                              return $ocLazyLoad.load(['js/app/performance/transactiondetail.js', 'js/app/performance/transaction-service.js']);
                          }]
                  }
              })
              .state('app.transaction', {
                  url: '/transaction',
                  templateUrl: 'tpl/performance/transaction.html',
                  controller:'TranscationCtrl',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad ){
                              return $ocLazyLoad.load(['js/app/performance/transaction.js', 'js/app/performance/transaction-service.js']);
                          }]
                  }
              })
              .state('app.analysis', {
                  url: '/analysis',
                  templateUrl:  'tpl/page_analysis.html',
                  controller:'AnalysisCtrl',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad ){
                              return $ocLazyLoad.load(['js/app/analysis/analysis.js']);
                          }]
                  }
              })
              .state('app.error', {
                  url: '/error',
                  templateUrl: 'tpl/error/error.html',
                  controller:'ErrorCtrl',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad ){
                              return $ocLazyLoad.load(['js/app/error/error.js', 'js/app/error/error-service.js']);
                          }]
                  }
              })
              .state('app.errordetail', {
                  url: '/errordetail/{id}',
                  templateUrl: 'tpl/error/errordetail.html',
                  controller:'ErrorDetailCtrl',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad ){
                              return $ocLazyLoad.load(['js/app/error/errordetail.js', 'js/app/error/error-service.js']);
                          }]
                  }
              })
              .state('access', {
                  url: '/access',
                  template: '<div ui-view ></div>'
              })
              .state('app.projects', {
                  url: '/projects',
                  templateUrl: 'tpl/ui_projects.html',
                  resolve: {
                      deps: ['uiLoad',
                          function( uiLoad ){
                              return uiLoad.load( ['js/app/user/projects.js'] );
                          }]
                  }
              })
              .state('access.project', {
                  url: '/project',
                  templateUrl: 'tpl/page_project.html',
                  resolve: {
                      deps: ['uiLoad',
                          function( uiLoad ){
                              return uiLoad.load( ['js/app/user/projectsform.js'] );
                          }]
                  }
              })
              .state('access.signin', {
                  url: '/signin',
                  templateUrl: 'tpl/page_signin.html',
                  resolve: {
                      deps: ['uiLoad',
                          function( uiLoad ){
                              return uiLoad.load( ['js/app/user/signin.js'] );
                          }]
                  }
              })
              .state('access.signup', {
                  url: '/signup',
                  templateUrl: 'tpl/page_signup.html',
                  resolve: {
                      deps: ['uiLoad',
                          function( uiLoad ){
                              return uiLoad.load( ['js/app/user/signup.js'] );
                          }]
                  }
              })
              .state('access.forgotpwd', {
                  url: '/forgotpwd',
                  templateUrl: 'tpl/page_forgotpwd.html'
              })
              .state('access.404', {
                  url: '/404',
                  templateUrl: 'tpl/page_404.html'
              })

          //app setting

              .state('app.setting', {
                  url: '/setting',
                  template: '<div ui-view class="fade-in-down"></div>'
              })
              .state('app.setting.general', {
                  url: '/general',
                  templateUrl: 'tpl/setting/page_general.html',
                  resolve: {
                      deps: ['uiLoad',
                          function( uiLoad ){
                              return uiLoad.load('js/app/setting/general.js');
                          }]
                  }
              })
              .state('app.setting.keys', {
                  url: '/keys',
                  templateUrl: 'tpl/setting/page_keys.html'
              })
              .state('app.setting.email', {
                  url: '/email',
                  templateUrl: 'tpl/setting/page_email.html',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad ){
                              return $ocLazyLoad.load([
                                  'js/app/setting/email.js'
                              ]);
                          }]
                  }
              })
              .state('app.setting.collorators', {
                  url: '/collorators',
                  templateUrl: 'tpl/setting/page_collorators.html',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function ($ocLazyLoad) {
                              return $ocLazyLoad.load([
                                  'js/app/setting/collorator.js'
                              ]);
                          }]
                  }
              })
              .state('app.quickstart', {
                  url: '/quickstart',
                  templateUrl: 'tpl/quickstart/quickstart.html',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad){
                              return $ocLazyLoad.load([
                                  'bower_components/image-picker/image-picker/image-picker.min.js',
                                  'bower_components/image-picker/image-picker/image-picker.css']).then(
                                  function(){
                                      return $ocLazyLoad.load('js/app/quickstart/quickstart.js');
                                  }
                              );
                          }]
                  }
              })
              .state('app.android1', {
                  url: '/android1',
                  templateUrl: 'tpl/quickstart/android1.html',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad){
                              return $ocLazyLoad.load([
                                  'js/app/quickstart/quickstart.js',
                                  'js/app/quickstart/quickstart-android.js',
                                  'js/app/quickstart/quickstart-service.js'

                              ]);
                          }]
                  }
              })
              .state('app.android2', {
                  url: '/android2',
                  templateUrl: 'tpl/quickstart/android2.html',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad){
                              return $ocLazyLoad.load([
                                  'js/app/quickstart/quickstart.js',
                                  'js/app/quickstart/quickstart-android.js',
                                  'js/app/quickstart/quickstart-service.js'
                              ]);
                          }]
                  }
              })
              .state('app.java', {
                  url: '/java',
                  templateUrl: 'tpl/document/android_docs.html',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad){
                              return $ocLazyLoad.load([
                                  'tpl/document/document.css'
                              ]);
                          }]
                  }
              })
              .state('app.node', {
                  url: '/node',
                  templateUrl: 'tpl/document/iphone_docs.html'
              })
              .state('app.rest', {
                  url: '/rest',
                  templateUrl: 'tpl/document/rest_docs.html',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad){
                              return $ocLazyLoad.load([
                                  'tpl/document/document.css'
                              ]);
                          }]
                  }
              })
              .state('app.sdkdownloads', {
                  url: '/sdkdownloads',
                  templateUrl: 'tpl/document/sdkdownloads.html'
              })

              .state('app.videos', {
                  url: '/videos',
                  templateUrl: 'tpl/document/youtube_docs.html',
                  resolve: {
                      deps: ['$ocLazyLoad',
                          function( $ocLazyLoad){
                              return $ocLazyLoad.load([
                                  'tpl/document/document.css'
                              ]);
                          }]
                  }
              })
              .state('app.terms', {
                  url: '/terms',
                  templateUrl: 'tpl/terms/terms.html'
              })
              .state('app.privacy', {
                  url: '/privacy',
                  templateUrl: 'tpl/terms/privacy.html'
              });
      }
    ]
  );

'use strict';

/* Controllers */

angular.module('app')
  .controller('AppCtrl', ['$rootScope', '$scope', '$translate', '$localStorage', '$sessionStorage', '$window', '$state', 'UserService', 'crypt', 'toaster', '$q', '$http',
        function(         $rootScope,    $scope,   $translate,   $localStorage,   $sessionStorage,  $window,   $state,   UserService,   crypt,   toaster, $q, $http ) {
      // add 'ie' classes to html
      var isIE = !!navigator.userAgent.match(/MSIE/i);
      isIE && angular.element($window.document.body).addClass('ie');
      isSmartDevice( $window ) && angular.element($window.document.body).addClass('smart');

      // config
      $scope.app = {
        name: 'Harpoon',
        version: '1.0.0',
        // for chart colors
        color: {
          primary: '#7266ba',
          info:    '#23b7e5',
          success: '#27c24c',
          warning: '#fad733',
          danger:  '#f05050',
          light:   '#e8eff0',
          dark:    '#3a3f51',
          black:   '#1c2b36'
        },
        settings: {
          themeID: 1,
          navbarHeaderColor: 'bg-black',
          navbarCollapseColor: 'bg-white-only',
          asideColor: 'bg-black',
          headerFixed: true,
          asideFixed: false,
          asideFolded: false,
          asideDock: false,
          container: false
        }
      }

      // save settings to local storage
      if ( angular.isDefined($localStorage.settings) ) {
        $scope.app.settings = $localStorage.settings;
      } else {
        $localStorage.settings = $scope.app.settings;
      }
      $scope.$watch('app.settings', function(){
        if( $scope.app.settings.asideDock  &&  $scope.app.settings.asideFixed ){
          // aside dock and fixed must set the header fixed.
          $scope.app.settings.headerFixed = true;
        }
        // save to local storage
        $localStorage.settings = $scope.app.settings;
      }, true);

      // angular translate
      $scope.lang = { isopen: false };
      $scope.langs = {en:'English', ko_KR:'Korean'};
      $scope.selectLang = $scope.langs[$translate.proposedLanguage()] || "English";
      $scope.setLang = function(langKey, $event) {
        // set the current lang
        $scope.selectLang = $scope.langs[langKey];
        // You can change the language during runtime
        $translate.use(langKey);
        $scope.lang.isopen = !$scope.lang.isopen;
      };

      function isSmartDevice( $window )
      {
          // Adapted from http://www.detectmobilebrowsers.com
          var ua = $window['navigator']['userAgent'] || $window['navigator']['vendor'] || $window['opera'];
          // Checks for iOs, Android, Blackberry, Opera Mini, and Windows mobile devices
          return (/iPhone|iPod|iPad|Silk|Android|BlackBerry|Opera Mini|IEMobile/).test(ua);
      }

        // initalize object
        $scope.user = {};
        $scope.user.authuser = {};
        $scope.user.projects = {};
        $scope.user.currentproject = {};

        if ($localStorage.auth &&
            $localStorage.auth.token !== '') {
            var authtoken = $localStorage.auth.token;
            var csrftoken = $('meta[name=csrf-token]').attr('content');

            if ($localStorage.auth.provider == 'WEB') {
                UserService.UserInfo(csrftoken, authtoken).then(function (data) {
                    $scope.user.authuser = data.user;
                    $scope.user.projects = data.projects;
                    $scope.$broadcast('loadproject', data.projects);
                    //console.log($scope.user.currentproject);
                }, function (error) {
                    console.log(error);
                });
            }

            if ($sessionStorage.currentproject != undefined) {
                $scope.user.currentproject = crypt.decrypt($sessionStorage.currentproject);
            }
        }

        $rootScope.$on('Facebook:statusChange', function (ev, data) {
            //console.log('Facebook Status: ', JSON.stringify(data));

            if (data.status == 'connected') {
                var token = $('meta[name=csrf-token]').attr('content');
                UserService.FacebookMe(token, data.authResponse.accessToken).then(function (data) {
                    //console.log(data);

                    //$scope.user = {};
                    $scope.user.authuser = data.user;
                    $scope.user.projects = data.projects;
                    $scope.$broadcast('loadproject', data.projects);
                }, function (data) {
                    console.log(data);
                });

                $localStorage.auth = {'token': data.authResponse.accessToken, 'provider': 'FACEBOOK'};
                if ($state.current.name == 'access.signin') {
                    $state.go('app.projects');
                }
            }
        });

        $rootScope.$on('GooglePlus:statusChange', function (ev, data) {
            //  console.log('Google Status: ', data);

            if (data.status == 'connected') {
                csrftoken = $('meta[name=csrf-token]').attr('content');
                UserService.GoogleMe(csrftoken, data.access_token).then(function (data) {
                    $scope.user.authuser = data.user;
                    $scope.user.projects = data.projects;
                    $scope.$broadcast('loadproject', data.projects);
                    if (data.projects.length == 0) {
                        $state.go('access.project');
                    }
                }, function (data) {
                    console.log(data);
                });

                $localStorage.auth = {'token': data.access_token, 'provider': 'GOOGLE'};
            } else if (data.status == 'loggin') {
                csrftoken = $('meta[name=csrf-token]').attr('content');
                UserService.GoogleMe(csrftoken, data.access_token).then(function (data) {
                    $scope.user.authuser = data.user;
                    $scope.user.projects = data.projects;
                    $scope.$broadcast('loadproject', data.projects);
                    if (data.projects.length == 0) {
                        $state.go('access.project');
                    }
                }, function (data) {
                    console.log(data);
                });

                $localStorage.auth = {'token': data.access_token, 'provider': 'GOOGLE'};
                if ($state.current.name == 'access.signin') {
                    $state.go('app.projects');
                }
            }
        });


        /*check facebook sdk load complete*/
        $scope.$watch(function () {
                return UserService.FacebookIsReady();
            },
            function (newVal) {
                if (newVal)
                    $scope.facebookReady = true;
            }
        );

        /*check googleplus sdk load complete*/
        $scope.$watch(function () {
                return UserService.GooglePlusIsReady();
            },
            function (newVal) {
                if (newVal)
                    $scope.googleplusReady = true;
            }
        );


        $scope.Logout = Logout;
        $scope.$on('Logout', function (event) {
            event.stopPropagation();

            Logout();
        });

        function Logout() {
            UserService.Logout($scope.user.authuser.provider);
            $scope.user.authuser = {};
            $scope.user.projects = {};
            $scope.user.currentproject = {};
            $scope.user = {};

            delete $localStorage.auth;
            delete $sessionStorage.currentproject;

            $state.go('access.signin');
        }


        // select project
        $scope.selectproject = function (index) {
            if ($scope.user.projects.length >= index) {
                $scope.user.currentproject = $scope.user.projects[index];

                $sessionStorage.currentproject = crypt.encrypt($scope.user.currentproject);

                $socket.send("change", $scope.user.currentproject.applicationkey);

                getLatestQnR($scope.user.currentproject.applicationkey).then(function(result){
                    $scope.LatestRnQ = result;
                });
            }
        };


        $scope.toaster = {
            type: 'note',
            title: 'Title',
            text: 'Message'
        };

        $scope.pop = function () {
            toaster.pop($scope.toaster.type, $scope.toaster.title, $scope.toaster.text);
        };

        /*
        $socket.on("open", function (event, data) {
            // process the data here
            //console.log(event, data);
            if ($scope.user.currentproject != undefined && $scope.user.currentproject.applicationkey != undefined && $scope.user.currentproject.applicationkey != '') {
                $socket.send("messgae", $scope.user.currentproject.applicationkey);
            }
        });

        $socket.on("close", function (event, data) {
            // process the data here
            console.log(event, data);
        });



        $socket.on("message", function (event, data) {
            // process the data here
            console.log(event, data);

            if (data.appid == $scope.user.currentproject.applicationkey) {
                console.log(data.appid);

                if (data.type == 'App Review') {
                    toaster.pop('note', '리뷰 수집', '리뷰 수집이 완료되었습니다.');
                    $scope.LatestRnQ.splice($scope.LatestRnQ.length -1, 1);
                    $scope.LatestRnQ.unshift({content: data.message +"수집이 완료되었습니다.", messagetype: "App Review", time: 1416194690})

                } else if (data.type == 'Q&A') {
                    toaster.pop('note', 'Q&A',  data.message);

                    $scope.LatestRnQ.splice($scope.LatestRnQ.length -1, 1);
                    $scope.LatestRnQ.unshift({content: data.message, messagetype: "Q&A",time: 1416194690})
                }
                console.log(JSON.stringify($scope.LatestRnQ));
            } else {
                console.log(data.appid);
            }

        });
*/
        $scope.LatestRnQ = [];

        var getLatestQnR = function(applicationkey){
            var csrf = angular.element(document.querySelector('meta[name=csrf-token]')).context.content;

            var param = {'csrf-token':csrf, 'appid': applicationkey};

            var url = '/webhook/info';
            var deferred = $q.defer();
            $http({url:url,
                method:'GET',
                params:param,
                headers:{'Application-Id':applicationkey, 'Content-Type': 'application/x-www-form-urlencoded'}})
                .then(function(response) {
                    deferred.resolve(response.data);
                }, function(x) {
                    deferred.reject({ error: "Server Error" });
                });
            return deferred.promise;
        };

        $scope.$watch('user.currentproject', function(){
            if($scope.user.currentproject != undefined
                && $scope.user.currentproject.applicationkey != undefined) {
                getLatestQnR($scope.user.currentproject.applicationkey).then(function(result){
                    $scope.LatestRnQ = result;
                });
            }
        });

        $scope.clickLink = function (index) {
            console.log(index);
            var type = $scope.LatestRnQ[index].messagetype;
            if(type == 'Q&A'){
                $state.go('app.helpcenter.qna');
            }else {
                $state.go('app.helpcenter.review');
            }
        };


    }]);

/**
 * Created by pheadra on 6/6/15.
 */
angular.module("youtube-embed",["ng"]).service("youtubeEmbedUtils",["$window","$rootScope",function(e,t){function r(e,t){return e.indexOf(t)>-1}var a={},n=/https?:\/\/(?:[0-9A-Z-]+\.)?(?:youtu\.be\/|youtube(?:-nocookie)?\.com\S*[^\w\s-])([\w-]{11})(?=[^\w-]|$)(?![?=&+%\w.-]*(?:['"][^<>]*>|<\/a>))[?=&+%\w.-]*/gi,i=/t=(\d+)[ms]?(\d+)?s?/;return a.getIdFromURL=function(e){var t=e.replace(n,"$1");if(r(t,";")){var a=t.split(";");if(r(a[1],"%")){var i=decodeURIComponent(t.split(";")[1]);t=("http://youtube.com"+i).replace(n,"$1")}else t=a[0]}else r(t,"#")&&(t=t.split("#")[0]);return t},a.getTimeFromURL=function(e){e=e||"";var t=e.match(i);if(!t)return 0;var a=t[0],n=t[1],o=t[2];return"undefined"!=typeof o?(o=parseInt(o,10),n=parseInt(n,10)):r(a,"m")?(n=parseInt(n,10),o=0):(o=parseInt(n,10),n=0),o+60*n},function(){var e=document.createElement("script");e.src="https://www.youtube.com/iframe_api";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}(),a.ready=!1,e.onYouTubeIframeAPIReady=function(){t.$apply(function(){a.ready=!0})},a}]).directive("youtubeVideo",["youtubeEmbedUtils",function(e){var t=1,r={"-1":"unstarted",0:"ended",1:"playing",2:"paused",3:"buffering",5:"queued"},a="youtube.player.";return{restrict:"EA",scope:{videoId:"=?",videoUrl:"=?",player:"=?",playerVars:"=?",playerHeight:"=?",playerWidth:"=?"},link:function(n,i,o){function u(){var e=Array.prototype.slice.call(arguments);n.$apply(function(){n.$emit.apply(n,e)})}function d(e){var t=r[e.data];"undefined"!=typeof t&&u(a+t,n.player,e),n.$apply(function(){n.player.currentState=t})}function l(e){u(a+"ready",n.player,e)}function p(){var e=angular.copy(n.playerVars);e.start=e.start||n.urlStartTime;var t=new YT.Player(c,{height:n.playerHeight,width:n.playerWidth,videoId:n.videoId,playerVars:e,events:{onReady:l,onStateChange:d}});return t.id=c,t}function y(){c&&n.videoId&&(n.player&&n.player.d&&"function"==typeof n.player.destroy&&n.player.destroy(),n.player=p())}n.utils=e;var c=o.playerId||i[0].id||"unique-youtube-embed-id-"+t++;i[0].id=c,n.playerHeight=n.playerHeight||390,n.playerWidth=n.playerWidth||640,n.playerVars=n.playerVars||{};var s=n.$watch(function(){return n.utils.ready&&("undefined"!=typeof n.videoUrl||"undefined"!=typeof n.videoId)},function(e){e&&(s(),"undefined"!=typeof n.videoUrl?n.$watch("videoUrl",function(e){n.videoId=n.utils.getIdFromURL(e),n.urlStartTime=n.utils.getTimeFromURL(e),y()}):n.$watch("videoId",function(){n.urlStartTime=null,y()}))});n.$watchCollection(["playerHeight","playerWidth"],function(){n.player&&n.player.setSize(n.playerWidth,n.playerHeight)}),n.$on("$destroy",function(){n.player&&n.player.destroy()})}}}]);
/**
 * Created by pheadra on 6/17/15.
 */
angular.module('app')
    .directive('errorcount', ['$rootScope', '$anchorScroll', function($rootScope, $anchorScroll) {
        return {
            restrict: 'E',
            template:'<div id="errorcount"></div>',
            link: function(scope, el, attrs) {
                var t = 0,
                    v = 100;



                (function() {
                    var chart = new Rubix('#errorcount', {
                        width: '100%',
                        height: 150,
                        title: 'Error Total Count',
                        subtitle: '',
                        titleColor: '#0054A9',
                        subtitleColor: '#0054A9',
                        tooltip: {
                            color: '#0054A9',
                            format: {
                                x: '.0f',
                                y: '.0f'
                            }
                        }
                    });

                    var line = chart.area_series({
                        name: 'Error',
                        color: '#0054A9'
                    });

                    var next = function() {
                        return {
                            x: ++t,
                            y:0
                        };
                    };
                    var data = d3.range(49).map(next);
                    data = d3.merge([data, d3.range(1).map(function() {
                        return {
                            x: ++t,
                            y: Math.round(Math.random() * 10)
                        }
                    })]);

                    console.log(JSON.stringify(data));

                    //var data = [{"x":1,"y":2},{"x":2,"y":1},{"x":3,"y":1},{"x":4,"y":1},{"x":5,"y":1},{"x":6,"y":1},{"x":7,"y":1},{"x":8,"y":1},{"x":9,"y":1},{"x":10,"y":1},{"x":11,"y":1},{"x":12,"y":1},{"x":13,"y":1},{"x":14,"y":1},{"x":15,"y":1},{"x":16,"y":1},{"x":17,"y":1},{"x":18,"y":1},{"x":19,"y":1},{"x":20,"y":1},{"x":21,"y":1},{"x":22,"y":1},{"x":23,"y":1},{"x":24,"y":1},{"x":25,"y":1},{"x":26,"y":1},{"x":27,"y":1},{"x":28,"y":1},{"x":29,"y":1},{"x":30,"y":1},{"x":31,"y":1},{"x":32,"y":1},{"x":33,"y":1},{"x":34,"y":1},{"x":35,"y":1},{"x":36,"y":1},{"x":37,"y":1},{"x":38,"y":1},{"x":39,"y":1},{"x":40,"y":1},{"x":41,"y":1},{"x":42,"y":1},{"x":43,"y":1},{"x":44,"y":1},{"x":45,"y":1},{"x":46,"y":1},{"x":47,"y":1},{"x":48,"y":1},{"x":49,"y":1},{"x":50,"y":1},{"x":51,"y":1},{"x":52,"y":1},{"x":53,"y":1},{"x":54,"y":1},{"x":55,"y":1},{"x":56,"y":1},{"x":57,"y":1},{"x":58,"y":1},{"x":59,"y":1},{"x":60,"y":1},{"x":61,"y":1},{"x":62,"y":1},{"x":63,"y":1},{"x":64,"y":1},{"x":65,"y":1},{"x":66,"y":1},{"x":67,"y":1},{"x":68,"y":1},{"x":69,"y":1},{"x":70,"y":1},{"x":71,"y":1},{"x":72,"y":1},{"x":73,"y":1},{"x":74,"y":1},{"x":75,"y":1},{"x":76,"y":1},{"x":77,"y":1},{"x":78,"y":1},{"x":79,"y":1},{"x":80,"y":1},{"x":81,"y":1},{"x":82,"y":1},{"x":83,"y":1},{"x":84,"y":1},{"x":85,"y":1},{"x":86,"y":1},{"x":87,"y":1},{"x":88,"y":1},{"x":89,"y":1},{"x":90,"y":1},{"x":91,"y":1},{"x":92,"y":1},{"x":93,"y":1},{"x":94,"y":1},{"x":95,"y":1},{"x":96,"y":1},{"x":97,"y":1},{"x":98,"y":1},{"x":99,"y":1},{"x":100,"y":1}];
                    line.addData(data);
                })();

            }
        };
    }]);
angular.module('app')
    .directive('select-focus', function($timeout, $parse) {
        return {
            link: function(scope, element, attr) {
                var model = $parse(attr.uiFocus);
                scope.$watch(model, function(value) {
                    if(value === true) {
                        $timeout(function() {
                            console.log('tet');
                            if (document.createEvent) {
                                var e = document.createEvent("MouseEvents");
                                e.initMouseEvent("mousedown", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
                                element[0].dispatchEvent(e);
                            } else if (element.fireEvent) {
                                element[0].fireEvent("onmousedown");
                            }
                        });
                    }
                });
                element.bind('blur', function() {
                    scope.$apply(model.assign(scope, false));
                });
            }
        };
    });

angular.module('app')
    .directive('pwCheck', [function () {
    return {
        require: 'ngModel',
        link: function (scope, elem, attrs, ctrl) {
            var firstPassword = '#' + attrs.pwCheck;
            elem.add(firstPassword).on('keyup', function () {
                scope.$apply(function () {
                    var v = elem.val()===$(firstPassword).val();
                    //console.log(v, elem.val(), $(firstPassword).val());
                    ctrl.$setValidity('pwmatch', v);
                });
            });
        }
    }
}]);


angular.module('app')
    .directive('labelColor', function(){
    return function(scope, $el, attrs){
        $el.css({'color': attrs.color});
    }
});
/**
 * Created by pheadra on 6/17/15.
 */
angular.module('app')
    .directive('realtimechart', ['$rootScope', '$anchorScroll', function($rootScope, $anchorScroll) {
        return {
            restrict: 'E',
            template:'<div class="row">\n    <div class="col-lg-12">\n        <div class="panel panel-default">\n            <div class="panel-body">\n                <div id="webrequest"></div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class="row">\n    <div class="col-lg-6">\n        <div class="panel panel-default">\n            <div class="panel-body">\n                <div id="tmu"></div>\n            </div>\n        </div>\n        <div class="panel panel-default">\n            <div class="panel-body">\n                <div id="sqm"></div>\n            </div>\n        </div>\n    </div>\n    <div class="col-lg-6">\n        <div class="panel panel-default">\n            <div class="panel-body">\n                <div id="crom"></div>\n            </div>\n        </div>\n        <div class="panel panel-default">\n            <div class="panel-body">\n                <div id="diam"></div>\n            </div>\n        </div>\n      \n    </div>\n</div>\n',
            link: function(scope, el, attrs) {
                var t = 0,
                    v = 100;



                (function() {
                    var chart = new Rubix('#webrequest', {
                        title: 'Web Request',
                        subtitle: 'Request Count',
                        width: '100%',
                        height: 200,
                        tooltip: {
                            color: '#0054A9',
                            format: {
                                x: '.0f',
                                y: '.0f'
                            }
                        }
                    });
                    chart.callAxis();
                    var line = chart.line_series({
                        name: 'Series A',
                        color: '#0054A9'
                    });



                    var time = 0,  v = 100;

                    var realtime = function() {
                        return {
                            x: ++time,
                            y: v = ~~Math.max(10, Math.min(40, v + 10 * (Math.random() - .5)))
                        };
                    };
                    var data = d3.range(50).map(realtime);
                    line.addData(data);

                    this.interval = setInterval(function() {
                        line.addPoint(realtime(), true);
                    }, 3000);
                })();


                (function() {
                    var chart = new Rubix('#tmu', {
                        title: 'Active Users',
                        subtitle: 'Active Users',
                        width: '100%',
                        height: 200,
                        tooltip: {
                            color: '#0054A9',
                            format: {
                                x: '.0f',
                                y: '.0f'
                            }
                        }
                    });
                    chart.callAxis();
                    var line = chart.line_series({
                        name: 'Series A',
                        color: '#0054A9'
                    });




                    var time = 0,  v = 100;

                    var realtime = function() {
                        return {
                            x: ++time,
                            y: v = ~~Math.max(10, Math.min(90, v + 10 * (Math.random() - .5)))
                        };
                    };
                    var data = [{"x":1,"y":1},{"x":2,"y":1},{"x":3,"y":1},{"x":4,"y":1},{"x":5,"y":1},{"x":6,"y":1},{"x":7,"y":1},{"x":8,"y":1},{"x":9,"y":2},{"x":10,"y":2}];


                    //var data = d3.range(100).map(realtime);
                    line.addData(data);

                    //this.interval = setInterval(function() {
                    //    line.addPoint(realtime(), true);
                    //}, 2500);
                })();

                (function() {
                    var chart = new Rubix('#crom', {
                        title: 'Active Service',
                        subtitle: 'Active Service',
                        width: '100%',
                        height: 200,
                        tooltip: {
                            color: '#0054A9',
                            format: {
                                x: '.0f',
                                y: '.0f'
                            }
                        }
                    });
                    chart.callAxis();
                    var line = chart.line_series({
                        name: 'Series A',
                        color: '#0054A9'
                    });


                    var time = 0,  v = 100;

                    var realtime = function() {
                        return {
                            x: ++time,
                            y: v = ~~Math.max(10, Math.min(20, v + 10 * (Math.random() - .5)))
                        };
                    };
 //                   var data = d3.range(100).map(realtime);
                    var data = [{"x":1,"y":0},{"x":2,"y":1},{"x":3,"y":1},{"x":4,"y":1},{"x":5,"y":1},{"x":6,"y":1},{"x":7,"y":1},{"x":8,"y":1},{"x":9,"y":0},{"x":10,"y":0}];

                    line.addData(data);


                    //this.interval = setInterval(function() {
                    //    line.addPoint(realtime(), true);
                    //}, 2500);
                })();


                (function() {
                    var genChart = function(id, symbol, color, subtitle) {
                        var chart = new Rubix(id, {
                            height: 200,
                            title: subtitle,
                            titleColor: color,
                            axis: {
                                x: {
                                    tickCount: 4
                                }
                            },
                            tooltip: {
                                color: color,
                                format: {
                                    x: '.0f',
                                    y: '.0f'
                                }
                            },
                            show_markers: true
                        });

                        var line = chart.line_series({
                            name: symbol,
                            color: color,
                            marker: symbol
                        });

                        var t = 0,
                            v = 100;
                        var next = function() {
                            return {
                                x: ++t,
                                y: v = ~~Math.max(10, Math.min(30, v + 10 * (Math.random() - .5)))
                            };
                        };
                        var data = d3.range(10).map(next);

                        line.addData(data);
                        this.interval = setInterval(function() {
                            line.addPoint(next(), true);
                        }, 3000);
                    };

                   // genChart('#cirm', 'circle' , 'green', 'Response Time');
                    //genChart('#crom', 'cross'  , '#9F00A7', 'Active Service');
                    genChart('#sqm' , 'square' , '#DA532C', 'Heap Memory');
                    genChart('#diam' , 'diamond' , '#00ABA9', 'TPS');
                    //genChart('#tmu' , 'triangle-up' , '#b91d47', 'Active Users');
                   // genChart('#tmd' , 'triangle-down' , '#2d89ef' ,'Call Count by Hours');
                })();
            }
        };
    }]).directive('rubixchart', ['$rootScope', '$anchorScroll', function($rootScope, $anchorScroll) {
    return {
        restrict: 'E',
        template:' <div id="txcount"></div>',
        link: function(scope, el, attrs) {
            var t = 0,
                v = 100;

            var next = function() {
                return {
                    x: ++t,
                    y: v = ~~Math.max(10, Math.min(90, v + 10 * (Math.random() - .5)))
                };
            };

            (function() {
                var chart = new Rubix('#txcount', {
                    title: 'Tx Count',
                    subtitle: 'Transaction Count',
                    width: '100%',
                    height: 200,
                    tooltip: {
                        color: '#0054A9',
                        format: {
                            x: '.0f',
                            y: '.0f'
                        }
                    }
                });
                chart.callAxis();
                var line = chart.line_series({
                    name: 'Series A',
                    color: '#0054A9'
                });

                var time = 0,  v = 100;

                var realtime = function() {
                    return {
                        x: ++time,
                        y: v = ~~Math.max(10, Math.min(90, v + 10 * (Math.random() - .5)))
                    };
                };
           //     var data = d3.range(100).map(realtime);
                var data = [{"x":1,"y":2},{"x":2,"y":1},{"x":3,"y":1},{"x":4,"y":1},{"x":5,"y":0},{"x":6,"y":1},{"x":7,"y":1},{"x":8,"y":1},{"x":9,"y":0},{"x":10,"y":0}];
                line.addData(data);


                /*this.interval = setInterval(function() {
                    line.addPoint(realtime(), true);
                }, 2500);*/
            })();
        }
    };
}]);
angular.module('app')
    .directive('sankey', ['$animate', function ($animate) {
        return {
            restrict: 'E',
            template:'<p id="chart">',
            link: function ($scope, $element, $attrs) {

                var graph =
                {
                    "links":[
                        {"source":"/1/GameObject","target":"JDBC","value":2},
                        {"source":"/1/LiveObject","target":"JDBC","value":2},
                        {"source":"JDBC","target":"MySQL","value":2}
                    ],
                    "nodes":[
                        {"name":"/1/GameObject"},
                        {"name":"/1/LiveObject"},
                        {"name":"JDBC"},
                        {"name":"MySQL"}
                    ]
                };


                var units = "Widgets";

                var margin = {top: 10, right: 10, bottom: 10, left: 10},
                    width = 1000 - margin.left - margin.right,
                    height = 300 - margin.top - margin.bottom;

                var formatNumber = d3.format(",.0f"),    // zero decimal places
                    format = function (d) {
                        return formatNumber(d) + " " + units;
                    },
                    color = d3.scale.category20();

                // append the svg canvas to the page
                var svg = d3.select("#chart").append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g")
                    .attr("transform",
                    "translate(" + margin.left + "," + margin.top + ")");

                // Set the sankey diagram properties
                var sankey = d3.sankey()
                    .nodeWidth(36)
                    .nodePadding(10)
                    .size([width, height]);

                var path = sankey.link();

                // load the data
                var nodeMap = {};
                graph.nodes.forEach(function (x) {
                    nodeMap[x.name] = x;
                });
                graph.links = graph.links.map(function (x) {
                    return {
                        source: nodeMap[x.source],
                        target: nodeMap[x.target],
                        value: x.value
                    };
                });

                sankey
                    .nodes(graph.nodes)
                    .links(graph.links)
                    .layout(32);

                // add in the links
                var link = svg.append("g").selectAll(".link")
                    .data(graph.links)
                    .enter().append("path")
                    .attr("class", "link")
                    .attr("d", path)
                    .style("stroke-width", function (d) {
                        return Math.max(1, d.dy);
                    })
                    .sort(function (a, b) {
                        return b.dy - a.dy;
                    });

                // add the link titles
                link.append("title")
                    .text(function (d) {
                        return d.source.name + " → " +
                            d.target.name + "\n" + format(d.value);
                    });

                // add in the nodes
                var node = svg.append("g").selectAll(".node")
                    .data(graph.nodes)
                    .enter().append("g")
                    .attr("class", "node")
                    .attr("transform", function (d) {
                        return "translate(" + d.x + "," + d.y + ")";
                    })
                    .call(d3.behavior.drag()
                        .origin(function (d) {
                            return d;
                        })
                        .on("dragstart", function () {
                            this.parentNode.appendChild(this);
                        })
                        .on("drag", dragmove));

                // add the rectangles for the nodes
                node.append("rect")
                    .attr("height", function (d) {
                        return d.dy;
                    })
                    .attr("width", sankey.nodeWidth())
                    .style("fill", function (d) {
                        return d.color = color(d.name.replace(/ .*/, ""));
                    })
                    .style("stroke", function (d) {
                        return d3.rgb(d.color).darker(2);
                    })
                    .append("title")
                    .text(function (d) {
                        return d.name + "\n" + format(d.value);
                    });

                // add in the title for the nodes
                node.append("text")
                    .attr("x", -6)
                    .attr("y", function (d) {
                        return d.dy / 2;
                    })
                    .attr("dy", ".35em")
                    .attr("text-anchor", "end")
                    .attr("transform", null)
                    .text(function (d) {
                        return d.name;
                    })
                    .filter(function (d) {
                        return d.x < width / 2;
                    })
                    .attr("x", 6 + sankey.nodeWidth())
                    .attr("text-anchor", "start");

                // the function for moving the nodes
                function dragmove(d) {
                    d3.select(this).attr("transform",
                        "translate(" + d.x + "," + (
                            d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))
                        ) + ")");
                    sankey.relayout();
                    link.attr("d", path);
                }
            }
        };
    }]);
/**
 * Created by pheadra on 6/11/15.
 */
angular.module('app')
    .directive('servermap', ['$rootScope', '$anchorScroll', function($rootScope, $anchorScroll) {
        return {
            restrict: 'E',
            template:'<div id="servermap" style="position:fixed;top:120px;left:220px;right:0;bottom:0"></div>',
            link: function(scope, el, attrs) {
                var sampleData, options;
                sampleData = {
                    "applicationMapData": {
                        "nodeDataArray": [
                            {
                                "key": "FRONT-WEB^USER",
                                "applicationName": "USER",
                                "category": "USER",
                                "fig": "Ellipse",
                                "serviceTypeCode": "2",
                                "terminal": "false",
                                "isWas": false,
                                "infoTable": [
                                    {k: 'TPS', v: '100,000'},
                                    {k: 'Calls', v: '300,000'},
                                    {k: 'Load', v: '50%'}
                                ],
                                "histogram": {"1s": 634, "3s": 5, "5s": 0, "Slow": 0, "Error": 203},
                                "agentHistogram": {},
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "agentTimeSeriesHistogram": {},
                                "serverList": {}
                            },

                            {
                                "key": "MySQL^MYSQL",
                                "applicationName": "MySQL (DATABASE)",
                                "category": "MYSQL",
                                "fig": "RoundedRectangle",
                                "serviceTypeCode": "2101",
                                "terminal": "true",
                                "isWas": false,
                                "infoTable": [
                                    {k: 'TPS', v: '2,000,000'},
                                    {k: 'Load', v: '90%'}
                                ],
                                "histogram": {"1s": 867, "3s": 0, "5s": 0, "Slow": 0, "Error": 0},
                                "agentHistogram": {"10.25.141.69:3306": {"1s": 867, "3s": 0, "5s": 0, "Slow": 0, "Error": 0}},
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "agentTimeSeriesHistogram": {
                                    "10.25.141.69:3306": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ]
                                },
                                "serverList": {
                                    "10.25.141.69": {
                                        "name": "10.25.141.69",
                                        "status": null,
                                        "instanceList": {
                                            "10.25.141.69:3306": {
                                                "name": "10.25.141.69:3306",
                                                "category": "MYSQL_EXECUTE_QUERY",
                                                "agentInfo": null,
                                                "hasInspector": false
                                            }
                                        }
                                    }
                                }
                            },

                            {
                                "key": "BACKEND-API^TOMCAT",
                                "applicationName": "BACKEND-API",
                                "category": "TOMCAT",
                                "fig": "RoundedRectangle",
                                "serviceTypeCode": "1010",
                                "terminal": "false",
                                "isWas": true,
                                "histogram": {"1s": 59, "3s": 0, "5s": 0, "Slow": 0, "Error": 249},
                                "agentHistogram": {"ApiWAS1": {"1s": 59, "3s": 0, "5s": 0, "Slow": 0, "Error": 249}},
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "agentTimeSeriesHistogram": {
                                    "ApiWAS1": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ]
                                },
                                "serverList": {
                                    "dev-pinpoint-workload003.ncl.nhnsystem.com": {
                                        "name": "dev-pinpoint-workload003.ncl.nhnsystem.com",
                                        "status": null,
                                        "instanceList": {
                                            "ApiWAS1": {
                                                "name": "ApiWAS1",
                                                "category": "TOMCAT",
                                                "agentInfo": {
                                                    "hostname": "dev-pinpoint-workload003.ncl.nhnsystem.com",
                                                    "ip": "10.101.55.85",
                                                    "ports": "",
                                                    "agentId": "ApiWAS1",
                                                    "applicationName": "BACKEND-API",
                                                    "category": "TOMCAT",
                                                    "pid": 20531,
                                                    "version": "1.0.2-SNAPSHOT",
                                                    "startTime": 1396492780257,
                                                    "endTimeStamp": 0,
                                                    "endStatus": 0
                                                },
                                                "hasInspector": true
                                            }
                                        }
                                    }
                                }
                            },

                            {
                                "key": "FRONT-WEB^TOMCAT",
                                "applicationName": "FRONT-WEB",
                                "category": "TOMCAT",
                                "fig": "RoundedRectangle",
                                "serviceTypeCode": "1010",
                                "terminal": "false",
                                "isWas": true,
                                "histogram": {"1s": 634, "3s": 5, "5s": 0, "Slow": 0, "Error": 203},
                                "agentHistogram": {
                                    "FrontWAS2": {"1s": 333, "3s": 2, "5s": 0, "Slow": 0, "Error": 106},
                                    "FrontWAS1": {"1s": 301, "3s": 3, "5s": 0, "Slow": 0, "Error": 97}
                                },
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "agentTimeSeriesHistogram": {
                                    "FrontWAS1": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ], "FrontWAS2": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ]
                                },
                                "serverList": {
                                    "dev-pinpoint-workload001.ncl.nhnsystem.com": {
                                        "name": "dev-pinpoint-workload001.ncl.nhnsystem.com",
                                        "status": null,
                                        "instanceList": {
                                            "FrontWAS1": {
                                                "name": "FrontWAS1",
                                                "category": "TOMCAT",
                                                "agentInfo": {
                                                    "hostname": "dev-pinpoint-workload001.ncl.nhnsystem.com",
                                                    "ip": "10.101.55.177",
                                                    "ports": "",
                                                    "agentId": "FrontWAS1",
                                                    "applicationName": "FRONT-WEB",
                                                    "category": "TOMCAT",
                                                    "pid": 17005,
                                                    "version": "1.0.2-SNAPSHOT",
                                                    "startTime": 1396492730774,
                                                    "endTimeStamp": 0,
                                                    "endStatus": 0
                                                },
                                                "hasInspector": true
                                            },
                                            "FrontWAS2": {
                                                "name": "FrontWAS2",
                                                "category": "TOMCAT",
                                                "agentInfo": {
                                                    "hostname": "dev-pinpoint-workload001.ncl.nhnsystem.com",
                                                    "ip": "10.101.55.177",
                                                    "ports": "",
                                                    "agentId": "FrontWAS2",
                                                    "applicationName": "FRONT-WEB",
                                                    "category": "TOMCAT",
                                                    "pid": 16962,
                                                    "version": "1.0.2-SNAPSHOT",
                                                    "startTime": 1396492726314,
                                                    "endTimeStamp": 0,
                                                    "endStatus": 0
                                                },
                                                "hasInspector": true
                                            }
                                        }
                                    }
                                }
                            },

                            {
                                "id": "MEMCACHED^MEMCACHED",
                                "key": "MEMCACHED^MEMCACHED",
                                "applicationName": "MEMCACHED",
                                "category": "MEMCACHED",
                                "fig": "Rectangle",
                                "serviceTypeCode": "8050",
                                "terminal": "true",
                                "isWas": false,
                                "histogram": {"100ms": 340, "300ms": 0, "500ms": 0, "Slow": 0, "Error": 0},
                                "agentHistogram": {
                                    "10.25.149.80:11211": {
                                        "100ms": 103,
                                        "300ms": 0,
                                        "500ms": 0,
                                        "Slow": 0,
                                        "Error": 0
                                    },
                                    "10.25.149.79:11211": {"100ms": 116, "300ms": 0, "500ms": 0, "Slow": 0, "Error": 0},
                                    "10.25.149.80:11244": {"100ms": 121, "300ms": 0, "500ms": 0, "Slow": 0, "Error": 0}
                                },
                                "timeSeriesHistogram": [
                                    {
                                        "key": "100ms", "values": []
                                    },
                                    {
                                        "key": "300ms", "values": []
                                    },
                                    {
                                        "key": "500ms", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "agentTimeSeriesHistogram": {
                                    "10.25.149.79:11211": [
                                        {
                                            "key": "100ms", "values": []
                                        },
                                        {
                                            "key": "300ms", "values": []
                                        },
                                        {
                                            "key": "500ms", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ], "10.25.149.80:11211": [
                                        {
                                            "key": "100ms", "values": []
                                        },
                                        {
                                            "key": "300ms", "values": []
                                        },
                                        {
                                            "key": "500ms", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ], "10.25.149.80:11244": [
                                        {
                                            "key": "100ms", "values": []
                                        },
                                        {
                                            "key": "300ms", "values": []
                                        },
                                        {
                                            "key": "500ms", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ]
                                },
                                "serverList": {
                                    "10.25.149.79": {
                                        "name": "10.25.149.79",
                                        "status": null,
                                        "instanceList": {
                                            "10.25.149.79:11211": {
                                                "name": "10.25.149.79:11211",
                                                "category": "MEMCACHED",
                                                "agentInfo": null,
                                                "hasInspector": false
                                            }
                                        }
                                    },
                                    "10.25.149.80": {
                                        "name": "10.25.149.80",
                                        "status": null,
                                        "instanceList": {
                                            "10.25.149.80:11244": {
                                                "name": "10.25.149.80:11244",
                                                "category": "MEMCACHED",
                                                "agentInfo": null,
                                                "hasInspector": false
                                            },
                                            "10.25.149.80:11211": {
                                                "name": "10.25.149.80:11211",
                                                "category": "MEMCACHED",
                                                "agentInfo": null,
                                                "hasInspector": false
                                            }
                                        }
                                    }
                                }
                            },

                            {
                                "id": "BACKEND-WEB^USER",
                                "key": "BACKEND-WEB^USER",
                                "applicationName": "USER",
                                "category": "USER",
                                "fig": "Ellipse",
                                "serviceTypeCode": "2",
                                "terminal": "false",
                                "isWas": false,
                                "histogram": {"1s": 251, "3s": 0, "5s": 0, "Slow": 0, "Error": 0},
                                "agentHistogram": {},
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "agentTimeSeriesHistogram": {},
                                "serverList": {}
                            },
                            {
                                "id": "BACKEND-WEB^TOMCAT",
                                "key": "BACKEND-WEB^TOMCAT",
                                "applicationName": "BACKEND-WEB",
                                "category": "TOMCAT",
                                "fig": "RoundedRectangle",
                                "serviceTypeCode": "1010",
                                "terminal": "false",
                                "isWas": true,
                                "histogram": {"1s": 513, "3s": 0, "5s": 0, "Slow": 0, "Error": 46},
                                "agentHistogram": {"BackendWAS1": {"1s": 513, "3s": 0, "5s": 0, "Slow": 0, "Error": 46}},
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "agentTimeSeriesHistogram": {
                                    "BackendWAS1": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ]
                                },
                                "serverList": {
                                    "dev-pinpoint-workload002.ncl.nhnsystem.com": {
                                        "name": "dev-pinpoint-workload002.ncl.nhnsystem.com",
                                        "status": null,
                                        "instanceList": {
                                            "BackendWAS1": {
                                                "name": "BackendWAS1",
                                                "category": "TOMCAT",
                                                "agentInfo": {
                                                    "hostname": "dev-pinpoint-workload002.ncl.nhnsystem.com",
                                                    "ip": "10.101.52.71",
                                                    "ports": "",
                                                    "agentId": "BackendWAS1",
                                                    "applicationName": "BACKEND-WEB",
                                                    "category": "TOMCAT",
                                                    "pid": 18010,
                                                    "version": "1.0.2-SNAPSHOT",
                                                    "startTime": 1396492762904,
                                                    "endTimeStamp": 0,
                                                    "endStatus": 0
                                                },
                                                "hasInspector": true
                                            }
                                        }
                                    }
                                }
                            }
                        ], "linkDataArray": [
                            {
                                "id": "BACKEND-WEB^USER~BACKEND-WEB^TOMCAT",
                                "from": "BACKEND-WEB^USER",
                                "to": "BACKEND-WEB^TOMCAT",
                                "sourceInfo": {
                                    "applicationName": "BACKEND-WEB",
                                    "category": "USER",
                                    "serviceTypeCode": 2,
                                    "isWas": false
                                },
                                "targetInfo": {
                                    "applicationName": "BACKEND-WEB",
                                    "category": "TOMCAT",
                                    "serviceTypeCode": 1010,
                                    "isWas": true
                                },
                                "filterApplicationName": "BACKEND-WEB",
                                "filterApplicationServiceTypeCode": 1010,
                                "totalCount": 251,
                                "error": 0,
                                "slow": 0,
                                "histogram": {"1s": 251, "3s": 0, "5s": 0, "Slow": 0, "Error": 0},
                                "sourceHistogram": {},
                                "targetHistogram": {},
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "sourceTimeSeriesHistogram": {},
                                "category": "default"
                            },

                            {
                                "id": "FRONT-WEB^USER~FRONT-WEB^TOMCAT",
                                "from": "FRONT-WEB^USER",
                                "to": "FRONT-WEB^TOMCAT",
                                "sourceInfo": {
                                    "applicationName": "FRONT-WEB",
                                    "category": "USER",
                                    "serviceTypeCode": 2,
                                    "isWas": false
                                },
                                "targetInfo": {
                                    "applicationName": "FRONT-WEB",
                                    "category": "TOMCAT",
                                    "serviceTypeCode": 1010,
                                    "isWas": true
                                },
                                "filterApplicationName": "FRONT-WEB",
                                "filterApplicationServiceTypeCode": 1010,
                                "totalCount": 842,
                                "error": 203,
                                "slow": 0,
                                "histogram": {"1s": 634, "3s": 5, "5s": 0, "Slow": 0, "Error": 203},
                                "sourceHistogram": {},
                                "targetHistogram": {},
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "sourceTimeSeriesHistogram": {},
                                "category": "default"
                            },
                            {
                                "id": "BACKEND-API^TOMCAT~MySQL^MYSQL",
                                "from": "BACKEND-API^TOMCAT",
                                "to": "MySQL^MYSQL",
                                "sourceInfo": {
                                    "applicationName": "BACKEND-API",
                                    "category": "TOMCAT",
                                    "serviceTypeCode": 1010,
                                    "isWas": true
                                },
                                "targetInfo": {
                                    "applicationName": "MySQL",
                                    "category": "MYSQL",
                                    "serviceTypeCode": 2101,
                                    "isWas": false
                                },
                                "filterApplicationName": "BACKEND-API",
                                "filterApplicationServiceTypeCode": 1010,
                                "totalCount": 308,
                                "error": 0,
                                "slow": 0,
                                "histogram": {"1s": 308, "3s": 0, "5s": 0, "Slow": 0, "Error": 0},
                                "sourceHistogram": {"ApiWAS1": {"1s": 308, "3s": 0, "5s": 0, "Slow": 0, "Error": 0}},
                                "targetHistogram": {"10.25.141.69:3306": {"1s": 308, "3s": 0, "5s": 0, "Slow": 0, "Error": 0}},
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "sourceTimeSeriesHistogram": {
                                    "ApiWAS1": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ]
                                },
                                "category": "default"
                            },
                            {
                                "id": "FRONT-WEB^TOMCAT~MEMCACHED^MEMCACHED",
                                "from": "FRONT-WEB^TOMCAT",
                                "to": "MEMCACHED^MEMCACHED",
                                "sourceInfo": {
                                    "applicationName": "FRONT-WEB",
                                    "category": "TOMCAT",
                                    "serviceTypeCode": 1010,
                                    "isWas": true
                                },
                                "targetInfo": {
                                    "applicationName": "MEMCACHED",
                                    "category": "MEMCACHED",
                                    "serviceTypeCode": 8050,
                                    "isWas": false
                                },
                                "filterApplicationName": "FRONT-WEB",
                                "filterApplicationServiceTypeCode": 1010,
                                "totalCount": 340,
                                "error": 0,
                                "slow": 0,
                                "histogram": {"100ms": 340, "300ms": 0, "500ms": 0, "Slow": 0, "Error": 0},
                                "sourceHistogram": {
                                    "FrontWAS2": {"100ms": 192, "300ms": 0, "500ms": 0, "Slow": 0, "Error": 0},
                                    "FrontWAS1": {"100ms": 148, "300ms": 0, "500ms": 0, "Slow": 0, "Error": 0}
                                },
                                "targetHistogram": {
                                    "10.25.149.80:11244": {
                                        "100ms": 121,
                                        "300ms": 0,
                                        "500ms": 0,
                                        "Slow": 0,
                                        "Error": 0
                                    },
                                    "10.25.149.79:11211": {"100ms": 116, "300ms": 0, "500ms": 0, "Slow": 0, "Error": 0},
                                    "10.25.149.80:11211": {"100ms": 103, "300ms": 0, "500ms": 0, "Slow": 0, "Error": 0}
                                },
                                "timeSeriesHistogram": [
                                    {
                                        "key": "100ms", "values": []
                                    },
                                    {
                                        "key": "300ms", "values": []
                                    },
                                    {
                                        "key": "500ms", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "sourceTimeSeriesHistogram": {
                                    "FrontWAS1": [
                                        {
                                            "key": "100ms", "values": []
                                        },
                                        {
                                            "key": "300ms", "values": []
                                        },
                                        {
                                            "key": "500ms", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ], "FrontWAS2": [
                                        {
                                            "key": "100ms", "values": []
                                        },
                                        {
                                            "key": "300ms", "values": []
                                        },
                                        {
                                            "key": "500ms", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ]
                                },
                                "category": "default"
                            },

                            {
                                "id": "FRONT-WEB^TOMCAT~BACKEND-WEB^TOMCAT",
                                "from": "FRONT-WEB^TOMCAT",
                                "to": "BACKEND-WEB^TOMCAT",
                                "sourceInfo": {
                                    "applicationName": "FRONT-WEB",
                                    "category": "TOMCAT",
                                    "serviceTypeCode": 1010,
                                    "isWas": true
                                },
                                "targetInfo": {
                                    "applicationName": "BACKEND-WEB",
                                    "category": "TOMCAT",
                                    "serviceTypeCode": 1010,
                                    "isWas": true
                                },
                                "filterApplicationName": "FRONT-WEB",
                                "filterApplicationServiceTypeCode": 1010,
                                "filterTargetRpcList": [
                                    {"rpc": "dev-pinpoint-workload002.ncl:8080", "rpcServiceTypeCode": 9050}
                                ],
                                "totalCount": 308,
                                "error": 0,
                                "slow": 0,
                                "histogram": {"1s": 308, "3s": 0, "5s": 0, "Slow": 0, "Error": 0},
                                "sourceHistogram": {
                                    "FrontWAS2": {"1s": 174, "3s": 0, "5s": 0, "Slow": 0, "Error": 0},
                                    "FrontWAS1": {"1s": 134, "3s": 0, "5s": 0, "Slow": 0, "Error": 0}
                                },
                                "targetHistogram": {
                                    "dev-pinpoint-workload002.ncl:8080": {
                                        "1s": 308,
                                        "3s": 0,
                                        "5s": 0,
                                        "Slow": 0,
                                        "Error": 0
                                    }
                                },
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "sourceTimeSeriesHistogram": {
                                    "FrontWAS1": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ], "FrontWAS2": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ]
                                },
                                "category": "default"
                            },
                            {
                                "id": "BACKEND-WEB^TOMCAT~BACKEND-API^TOMCAT",
                                "from": "BACKEND-WEB^TOMCAT",
                                "to": "BACKEND-API^TOMCAT",
                                "sourceInfo": {
                                    "applicationName": "BACKEND-WEB",
                                    "category": "TOMCAT",
                                    "serviceTypeCode": 1010,
                                    "isWas": true
                                },
                                "targetInfo": {
                                    "applicationName": "BACKEND-API",
                                    "category": "TOMCAT",
                                    "serviceTypeCode": 1010,
                                    "isWas": true
                                },
                                "filterApplicationName": "BACKEND-WEB",
                                "filterApplicationServiceTypeCode": 1010,
                                "filterTargetRpcList": [
                                    {"rpc": "dev-pinpoint-workload003.ncl:8080", "rpcServiceTypeCode": 9050}
                                ],
                                "totalCount": 57,
                                "error": 46,
                                "slow": 0,
                                "histogram": {"1s": 11, "3s": 0, "5s": 0, "Slow": 0, "Error": 46},
                                "sourceHistogram": {"BackendWAS1": {"1s": 11, "3s": 0, "5s": 0, "Slow": 0, "Error": 46}},
                                "targetHistogram": {
                                    "dev-pinpoint-workload003.ncl:8080": {
                                        "1s": 11,
                                        "3s": 0,
                                        "5s": 0,
                                        "Slow": 0,
                                        "Error": 46
                                    }
                                },
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "sourceTimeSeriesHistogram": {
                                    "BackendWAS1": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ]
                                },
                                "category": "default"
                            },

                            {
                                "id": "BACKEND-WEB^TOMCAT~MySQL^MYSQL",
                                "from": "BACKEND-WEB^TOMCAT",
                                "to": "MySQL^MYSQL",
                                "sourceInfo": {
                                    "applicationName": "BACKEND-WEB",
                                    "category": "TOMCAT",
                                    "serviceTypeCode": 1010,
                                    "isWas": true
                                },
                                "targetInfo": {
                                    "applicationName": "MySQL",
                                    "category": "MYSQL",
                                    "serviceTypeCode": 2101,
                                    "isWas": false
                                },
                                "filterApplicationName": "BACKEND-WEB",
                                "filterApplicationServiceTypeCode": 1010,
                                "totalCount": 559,
                                "error": 0,
                                "slow": 0,
                                "histogram": {"1s": 559, "3s": 0, "5s": 0, "Slow": 0, "Error": 0},
                                "sourceHistogram": {"BackendWAS1": {"1s": 559, "3s": 0, "5s": 0, "Slow": 0, "Error": 0}},
                                "targetHistogram": {"10.25.141.69:3306": {"1s": 559, "3s": 0, "5s": 0, "Slow": 0, "Error": 0}},
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "sourceTimeSeriesHistogram": {
                                    "BackendWAS1": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ]
                                },
                                "category": "default"
                            },
                            {
                                "id": "FRONT-WEB^TOMCAT~BACKEND-API^TOMCAT",
                                "from": "FRONT-WEB^TOMCAT",
                                "to": "BACKEND-API^TOMCAT",
                                "isFiltered": true,
                                "sourceInfo": {
                                    "applicationName": "FRONT-WEB",
                                    "category": "TOMCAT",
                                    "serviceTypeCode": 1010,
                                    "isWas": true
                                },
                                "targetInfo": {
                                    "applicationName": "BACKEND-API",
                                    "category": "TOMCAT",
                                    "serviceTypeCode": 1010,
                                    "isWas": true
                                },
                                "filterApplicationName": "FRONT-WEB",
                                "filterApplicationServiceTypeCode": 1010,
                                "filterTargetRpcList": [
                                    {"rpc": "dev-pinpoint-workload003.ncl:8080", "rpcServiceTypeCode": 9050}
                                ],
                                "totalCount": 251,
                                "error": 203,
                                "slow": 0,
                                "histogram": {"1s": 48, "3s": 0, "5s": 0, "Slow": 0, "Error": 203},
                                "sourceHistogram": {
                                    "FrontWAS2": {"1s": 26, "3s": 0, "5s": 0, "Slow": 0, "Error": 106},
                                    "FrontWAS1": {"1s": 22, "3s": 0, "5s": 0, "Slow": 0, "Error": 97}
                                },
                                "targetHistogram": {
                                    "dev-pinpoint-workload003.ncl:8080": {
                                        "1s": 48,
                                        "3s": 0,
                                        "5s": 0,
                                        "Slow": 0,
                                        "Error": 203
                                    }
                                },
                                "timeSeriesHistogram": [
                                    {
                                        "key": "1s", "values": []
                                    },
                                    {
                                        "key": "3s", "values": []
                                    },
                                    {
                                        "key": "5s", "values": []
                                    },
                                    {
                                        "key": "Slow", "values": []
                                    },
                                    {
                                        "key": "Error", "values": []
                                    }
                                ],
                                "sourceTimeSeriesHistogram": {
                                    "FrontWAS1": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ], "FrontWAS2": [
                                        {
                                            "key": "1s", "values": []
                                        },
                                        {
                                            "key": "3s", "values": []
                                        },
                                        {
                                            "key": "5s", "values": []
                                        },
                                        {
                                            "key": "Slow", "values": []
                                        },
                                        {
                                            "key": "Error", "values": []
                                        }
                                    ]
                                },
                                "category": "default"
                            }
                        ]
                    }
                };
                var self = this;
                options = {
                    "sContainerId": 'servermap',
                    "sImageDir": '/img/servermap/',
                    "htLinkType": {
                        "sRouting": "Normal", // Normal, Orthogonal, AvoidNodes
                        "sCurve": "JumpGap" // Bezier, JumpOver, JumpGap
                    },
                    "fOnNodeClicked" :  function (eMouseEvent, htData) {
                        //self.transitionTo("/app/dashboard");
                        console.log('test');
                    }
                };
                oServerMap = new ServerMap(options);
                oServerMap.load(sampleData.applicationMapData);
            }
        };
    }]);
angular.module('app')
  .directive('setNgAnimate', ['$animate', function ($animate) {
    return {
        link: function ($scope, $element, $attrs) {
            $scope.$watch( function() {
                return $scope.$eval($attrs.setNgAnimate, $scope);
            }, function(valnew, valold){
                $animate.enabled(!!valnew, $element);
            });
        }
    };
  }]);
/**
 * Created by pheadra on 6/17/15.
 */
/**
 * Created by pheadra on 6/17/15.
 */
angular.module('app')
    .directive('transcationchart', ['$rootScope', '$anchorScroll', '$state', function($rootScope, $anchorScroll, $state) {
        return {
            restrict: 'E',
            template:'<div id="transcationchart"></div>',
            link: function(scope, el, attrs) {
                var t = 0,
                    v = 100;

                var next = function() {
                    return {
                        x: ++t,
                        y: v = ~~Math.max(10, Math.min(90, v + 10 * (Math.random() - .5)))
                    };
                };
                (function() {
                    var chart = new Rubix('#transcationchart', {
                        title: 'Transcation Chart View',
                        titleColor: 'steelblue',
                        subtitleColor: 'steelblue',
                        height: 500,
                        tooltip: {
                            color: 'steelblue',
                            format: {
                                x: '.0f',
                                y: '.0f'
                            }
                        },
                        show_markers: true
                    });

                    var scatter = chart.line_series({
                        name: 'Transcation',
                        color: 'steelblue',
                        marker: 'circle',
                        scatter: true
                    });

                    var t = 1,
                        v = 100,
                        data = d3.range(333).map(function() {
                            return {
                                x: ++t,
                                y: Math.round(Math.random() * 40)
                            }
                        });
                    data = d3.merge([data, d3.range(333).map(function() {
                        return {
                            x: ++t,
                            y: Math.round(Math.random() * 40)
                        }
                    })]);
                  /*  data = d3.merge([data, d3.range(333).map(function() {
                        return {
                            x: ++t,
                            y: Math.round(Math.random() * 100)
                        }
                    })]);*/
                    data[0] = {x:0, y: 0};
                    data.push({x: 0, y: 200});

                    scatter.addData(data);
                })();

                $("#transcationchart").dragToSelect({selectables: 'li',
                    onHide: function (selectBox) {
                        selectBox.hide();

                        $state.go('app.transactiondetail');
                        console.log(selectBox);
                    }
                });
            }
        };
    }]);
angular.module('app')
  .directive('uiButterbar', ['$rootScope', '$anchorScroll', function($rootScope, $anchorScroll) {
     return {
      restrict: 'AC',
      template:'<span class="bar"></span>',
      link: function(scope, el, attrs) {        
        el.addClass('butterbar hide');
        scope.$on('$stateChangeStart', function(event) {
          $anchorScroll();
          el.removeClass('hide').addClass('active');
        });
        scope.$on('$stateChangeSuccess', function( event, toState, toParams, fromState ) {
          event.targetScope.$watch('$viewContentLoaded', function(){
            el.addClass('hide').removeClass('active');
          })
        });
      }
     };
  }]);
angular.module('app')
  .directive('uiFocus', function($timeout, $parse) {
    return {
      link: function(scope, element, attr) {
        var model = $parse(attr.uiFocus);
        scope.$watch(model, function(value) {
          if(value === true) {
            $timeout(function() {
              element[0].focus();
            });
          }
        });
        element.bind('blur', function() {
           scope.$apply(model.assign(scope, false));
        });
      }
    };
  });
 angular.module('app')
  .directive('uiFullscreen', ['uiLoad', 'JQ_CONFIG', '$document', '$window', function(uiLoad, JQ_CONFIG, $document, $window) {
    return {
      restrict: 'AC',
      template:'<i class="fa fa-expand fa-fw text"></i><i class="fa fa-compress fa-fw text-active"></i>',
      link: function(scope, el, attr) {
        el.addClass('hide');
        uiLoad.load(JQ_CONFIG.screenfull).then(function(){
          // disable on ie11
          if (screenfull.enabled && !navigator.userAgent.match(/Trident.*rv:11\./)) {
            el.removeClass('hide');
          }
          el.on('click', function(){
            var target;
            attr.target && ( target = $(attr.target)[0] );            
            screenfull.toggle(target);
          });
          $document.on(screenfull.raw.fullscreenchange, function () {
            if(screenfull.isFullscreen){
              el.addClass('active');
            }else{
              el.removeClass('active');
            }
          });
        });
      }
    };
  }]);

'use strict';

/**
 * 0.1.1
 * General-purpose jQuery wrapper. Simply pass the plugin name as the expression.
 *
 * It is possible to specify a default set of parameters for each jQuery plugin.
 * Under the jq key, namespace each plugin by that which will be passed to ui-jq.
 * Unfortunately, at this time you can only pre-define the first parameter.
 * @example { jq : { datepicker : { showOn:'click' } } }
 *
 * @param ui-jq {string} The $elm.[pluginName]() to call.
 * @param [ui-options] {mixed} Expression to be evaluated and passed as options to the function
 *     Multiple parameters can be separated by commas
 * @param [ui-refresh] {expression} Watch expression and refire plugin on changes
 *
 * @example <input ui-jq="datepicker" ui-options="{showOn:'click'},secondParameter,thirdParameter" ui-refresh="iChange">
 */
angular.module('ui.jq', ['ui.load']).
  value('uiJqConfig', {}).
  directive('uiJq', ['uiJqConfig', 'JQ_CONFIG', 'uiLoad', '$timeout', function uiJqInjectingFunction(uiJqConfig, JQ_CONFIG, uiLoad, $timeout) {

  return {
    restrict: 'A',
    compile: function uiJqCompilingFunction(tElm, tAttrs) {

      if (!angular.isFunction(tElm[tAttrs.uiJq]) && !JQ_CONFIG[tAttrs.uiJq]) {
        throw new Error('ui-jq: The "' + tAttrs.uiJq + '" function does not exist');
      }
      var options = uiJqConfig && uiJqConfig[tAttrs.uiJq];

      return function uiJqLinkingFunction(scope, elm, attrs) {

        function getOptions(){
          var linkOptions = [];

          // If ui-options are passed, merge (or override) them onto global defaults and pass to the jQuery method
          if (attrs.uiOptions) {
            linkOptions = scope.$eval('[' + attrs.uiOptions + ']');
            if (angular.isObject(options) && angular.isObject(linkOptions[0])) {
              linkOptions[0] = angular.extend({}, options, linkOptions[0]);
            }
          } else if (options) {
            linkOptions = [options];
          }
          return linkOptions;
        }

        // If change compatibility is enabled, the form input's "change" event will trigger an "input" event
        if (attrs.ngModel && elm.is('select,input,textarea')) {
          elm.bind('change', function() {
            elm.trigger('input');
          });
        }

        // Call jQuery method and pass relevant options
        function callPlugin() {
          $timeout(function() {
            elm[attrs.uiJq].apply(elm, getOptions());
          }, 0, false);
        }

        function refresh(){
          // If ui-refresh is used, re-fire the the method upon every change
          if (attrs.uiRefresh) {
            scope.$watch(attrs.uiRefresh, function() {
              callPlugin();
            });
          }
        }

        if ( JQ_CONFIG[attrs.uiJq] ) {
          uiLoad.load(JQ_CONFIG[attrs.uiJq]).then(function() {
            callPlugin();
            refresh();
          }).catch(function() {
            
          });
        } else {
          callPlugin();
          refresh();
        }
      };
    }
  };
}]);
angular.module('app')
  .directive('uiModule', ['MODULE_CONFIG','uiLoad', '$compile', function(MODULE_CONFIG, uiLoad, $compile) {
    return {
      restrict: 'A',
      compile: function (el, attrs) {
        var contents = el.contents().clone();
        return function(scope, el, attrs){
          el.contents().remove();
          uiLoad.load(MODULE_CONFIG[attrs.uiModule])
          .then(function(){
            $compile(contents)(scope, function(clonedElement, scope) {
              el.append(clonedElement);
            });
          });
        }
      }
    };
  }]);
angular.module('app')
  .directive('uiNav', ['$timeout', function($timeout) {
    return {
      restrict: 'AC',
      link: function(scope, el, attr) {
        var _window = $(window), 
        _mb = 768, 
        wrap = $('.app-aside'), 
        next, 
        backdrop = '.dropdown-backdrop';
        // unfolded
        el.on('click', 'a', function(e) {
          next && next.trigger('mouseleave.nav');
          var _this = $(this);
          _this.parent().siblings( ".active" ).toggleClass('active');
          _this.next().is('ul') &&  _this.parent().toggleClass('active') &&  e.preventDefault();
          // mobile
          _this.next().is('ul') || ( ( _window.width() < _mb ) && $('.app-aside').removeClass('show off-screen') );
        });

        // folded & fixed
        el.on('mouseenter', 'a', function(e){
          next && next.trigger('mouseleave.nav');
          $('> .nav', wrap).remove();
          if ( !$('.app-aside-fixed.app-aside-folded').length || ( _window.width() < _mb ) || $('.app-aside-dock').length) return;
          var _this = $(e.target)
          , top
          , w_h = $(window).height()
          , offset = 50
          , min = 150;

          !_this.is('a') && (_this = _this.closest('a'));
          if( _this.next().is('ul') ){
             next = _this.next();
          }else{
            return;
          }
         
          _this.parent().addClass('active');
          top = _this.parent().position().top + offset;
          next.css('top', top);
          if( top + next.height() > w_h ){
            next.css('bottom', 0);
          }
          if(top + min > w_h){
            next.css('bottom', w_h - top - offset).css('top', 'auto');
          }
          next.appendTo(wrap);

          next.on('mouseleave.nav', function(e){
            $(backdrop).remove();
            next.appendTo(_this.parent());
            next.off('mouseleave.nav').css('top', 'auto').css('bottom', 'auto');
            _this.parent().removeClass('active');
          });

          $('.smart').length && $('<div class="dropdown-backdrop"/>').insertAfter('.app-aside').on('click', function(next){
            next && next.trigger('mouseleave.nav');
          });

        });

        wrap.on('mouseleave', function(e){
          next && next.trigger('mouseleave.nav');
          $('> .nav', wrap).remove();
        });
      }
    };
  }]);
angular.module('app')
    .directive('uiScrollTo', ['$location', '$anchorScroll', function($location, $anchorScroll) {
        return {
            restrict: 'AC',
            link: function(scope, el, attr) {
                el.on('click', function(e) {
                    $location.hash(attr.uiScrollTo);
                    $anchorScroll();
                });
            }
        };
    }]);

angular.module('app')
  .directive('uiShift', ['$timeout', function($timeout) {
    return {
      restrict: 'A',
      link: function(scope, el, attr) {
        // get the $prev or $parent of this el
        var _el = $(el),
            _window = $(window),
            prev = _el.prev(),
            parent,
            width = _window.width()
            ;

        !prev.length && (parent = _el.parent());
        
        function sm(){
          $timeout(function () {
            var method = attr.uiShift;
            var target = attr.target;
            _el.hasClass('in') || _el[method](target).addClass('in');
          });
        }
        
        function md(){
          parent && parent['prepend'](el);
          !parent && _el['insertAfter'](prev);
          _el.removeClass('in');
        }

        (width < 768 && sm()) || md();

        _window.resize(function() {
          if(width !== _window.width()){
            $timeout(function(){
              (_window.width() < 768 && sm()) || md();
              width = _window.width();
            });
          }
        });
      }
    };
  }]);
angular.module('app')
  .directive('uiToggleClass', ['$timeout', '$document', function($timeout, $document) {
    return {
      restrict: 'AC',
      link: function(scope, el, attr) {
        el.on('click', function(e) {
          e.preventDefault();
          var classes = attr.uiToggleClass.split(','),
              targets = (attr.target && attr.target.split(',')) || Array(el),
              key = 0;
          angular.forEach(classes, function( _class ) {
            var target = targets[(targets.length && key)];            
            ( _class.indexOf( '*' ) !== -1 ) && magic(_class, target);
            $( target ).toggleClass(_class);
            key ++;
          });
          $(el).toggleClass('active');

          function magic(_class, target){
            var patt = new RegExp( '\\s' + 
                _class.
                  replace( /\*/g, '[A-Za-z0-9-_]+' ).
                  split( ' ' ).
                  join( '\\s|\\s' ) + 
                '\\s', 'g' );
            var cn = ' ' + $(target)[0].className + ' ';
            while ( patt.test( cn ) ) {
              cn = cn.replace( patt, ' ' );
            }
            $(target)[0].className = $.trim( cn );
          }
        });
      }
    };
  }]);
/**
 * Created by pheadra on 6/6/15.
 */
'use strict';

/* Services */


// Demonstrate how to register services
angular.module('appservices', [])
    .factory('safeApply', [function() {
        return function($scope, fn) {
            var phase = $scope.$root.$$phase;
            if(phase == '$apply' || phase == '$digest') {
                if(fn && (typeof(fn) === 'function')) {
                    fn();
                }
            } else {
                if (fn) {
                    $scope.$apply(fn);
                }
            }
        }
    }]).provider('crypt', [function() {
        var secretkey = '';
        this.setSecret = function (s) {
            secretkey = s;
        };

        this.$get = function () {
            var secret = secretkey;
            return {
                encrypt: function (object) {
                    var message = JSON.stringify(object);
                    return CryptoJS.TripleDES.encrypt(message, secret).toString();
                },
                decrypt: function (encrypted) {
                    var decrypted = CryptoJS.TripleDES.decrypt(encrypted, secret);
                    return JSON.parse(decrypted.toString(CryptoJS.enc.Utf8));
                }
            }
        };
    }]);

'use strict';

/**
 * 0.1.1
 * Deferred load js/css file, used for ui-jq.js and Lazy Loading.
 * 
 * @ flatfull.com All Rights Reserved.
 * Author url: http://themeforest.net/user/flatfull
 */

angular.module('ui.load', [])
	.service('uiLoad', ['$document', '$q', '$timeout', function ($document, $q, $timeout) {

		var loaded = [];
		var promise = false;
		var deferred = $q.defer();

		/**
		 * Chain loads the given sources
		 * @param srcs array, script or css
		 * @returns {*} Promise that will be resolved once the sources has been loaded.
		 */
		this.load = function (srcs) {
			srcs = angular.isArray(srcs) ? srcs : srcs.split(/\s+/);
			var self = this;
			if(!promise){
				promise = deferred.promise;
			}
      angular.forEach(srcs, function(src) {
      	promise = promise.then( function(){
      		return src.indexOf('.css') >=0 ? self.loadCSS(src) : self.loadScript(src);
      	} );
      });
      deferred.resolve();
      return promise;
		}

		/**
		 * Dynamically loads the given script
		 * @param src The url of the script to load dynamically
		 * @returns {*} Promise that will be resolved once the script has been loaded.
		 */
		this.loadScript = function (src) {
			if(loaded[src]) return loaded[src].promise;

			var deferred = $q.defer();
			var script = $document[0].createElement('script');
			script.src = src;
			script.onload = function (e) {
				$timeout(function () {
					deferred.resolve(e);
				});
			};
			script.onerror = function (e) {
				$timeout(function () {
					deferred.reject(e);
				});
			};
			$document[0].body.appendChild(script);
			loaded[src] = deferred;

			return deferred.promise;
		};

		/**
		 * Dynamically loads the given CSS file
		 * @param href The url of the CSS to load dynamically
		 * @returns {*} Promise that will be resolved once the CSS file has been loaded.
		 */
		this.loadCSS = function (href) {
			if(loaded[href]) return loaded[href].promise;

			var deferred = $q.defer();
			var style = $document[0].createElement('link');
			style.rel = 'stylesheet';
			style.type = 'text/css';
			style.href = href;
			style.onload = function (e) {
				$timeout(function () {
					deferred.resolve(e);
				});
			};
			style.onerror = function (e) {
				$timeout(function () {
					deferred.reject(e);
				});
			};
			$document[0].head.appendChild(style);
			loaded[href] = deferred;

			return deferred.promise;
		};
}]);
'use strict';

/* Filters */
// need load the moment.js to use this filter. 
angular.module('app')
  .filter('fromNow', function() {
    return function(date) {
      return moment(date).fromNow();
    }
  });


angular.module('app').filter('bytes', function() {
    return function(bytes, precision) {

        if (isNaN(parseFloat(bytes)) || !isFinite(bytes)) return '-';
        if (typeof precision === 'undefined') precision = 1;
        var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'],
            number = Math.floor(Math.log(bytes) / Math.log(1024));
        if(number == -Infinity){
            number = 0;
        }
        return (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) +  ' ' + units[number];
    }
});

angular.module('app').filter('percentage', ['$filter', function ($filter) {
    return function (input, decimals) {
        return $filter('number')(input * 100, decimals) + '%';
    };
}]);

angular.module('app').filter('reverse', function() {
    return function(items) {
        return items.slice().reverse();
    };
});
'use strict';

/* Controllers */

  // bootstrap controller
  app.controller('TypeaheadDemoCtrl', ['$scope', '$http', function($scope, $http) {
    $scope.selected = undefined;
    $scope.states = ['Alabama', 'Alaska', 'Arizona', 'Arkansas', 'California', 'Colorado', 'Connecticut', 'Delaware', 'Florida', 'Georgia', 'Hawaii', 'Idaho', 'Illinois', 'Indiana', 'Iowa', 'Kansas', 'Kentucky', 'Louisiana', 'Maine', 'Maryland', 'Massachusetts', 'Michigan', 'Minnesota', 'Mississippi', 'Missouri', 'Montana', 'Nebraska', 'Nevada', 'New Hampshire', 'New Jersey', 'New Mexico', 'New York', 'North Dakota', 'North Carolina', 'Ohio', 'Oklahoma', 'Oregon', 'Pennsylvania', 'Rhode Island', 'South Carolina', 'South Dakota', 'Tennessee', 'Texas', 'Utah', 'Vermont', 'Virginia', 'Washington', 'West Virginia', 'Wisconsin', 'Wyoming'];
    // Any function returning a promise object can be used to load values asynchronously
    $scope.getLocation = function(val) {
      return $http.get('http://maps.googleapis.com/maps/api/geocode/json', {
        params: {
          address: val,
          sensor: false
        }
      }).then(function(res){
        var addresses = [];
        angular.forEach(res.data.results, function(item){
          addresses.push(item.formatted_address);
        });
        return addresses;
      });
    };
  }])
  ;
